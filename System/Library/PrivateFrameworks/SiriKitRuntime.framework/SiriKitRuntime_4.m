uint64_t UsoTask.parseEntity(setting:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(_BYTE *);
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  const char *v106;
  _BYTE *v107;
  _BYTE *v108;
  void (*v109)(_BYTE *, uint64_t);
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  void (*v115)(_BYTE *, uint64_t);
  _BYTE *v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, uint64_t, uint64_t);
  int v125;
  _BYTE *v126;
  uint64_t v127;
  _BYTE *v128;
  void (*v129)(_BYTE *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  char v132;
  _BYTE *v133;
  void (*v134)(_BYTE *, uint64_t);
  void (*v135)(uint64_t, uint64_t);
  uint64_t v136;
  char v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(_BYTE *, uint64_t);
  uint64_t v146;
  _BYTE *v147;
  char v148;
  uint64_t v149;
  _BYTE *v150;
  char v151;
  _BYTE *v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  NSObject *v157;
  os_log_type_t v158;
  uint8_t *v159;
  _BYTE *v161;
  _BYTE *v162;
  uint64_t v163;
  _BYTE *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE *v168;
  char v169;
  void (*v170)(_BYTE *, uint64_t);
  void (*v171)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v172;
  _BYTE *v173;
  uint64_t v174;
  uint64_t v175;
  _BYTE *v176;
  const char *v177;
  uint64_t v178;
  uint64_t (*v179)(uint64_t, uint64_t, uint64_t);
  void (*v180)(_BYTE *, uint64_t);
  int v181;
  _BYTE *v182;
  uint64_t v183;
  _BYTE *v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  _BYTE *v188;
  char v189;
  void (*v190)(_BYTE *, uint64_t);
  void (*v191)(_BYTE *, uint64_t);
  uint64_t v192;
  _BYTE *v193;
  char v194;
  uint64_t v195;
  char v196;
  _BYTE *v197;
  _BYTE *v198;
  uint64_t v199;
  _BYTE *v200;
  _BYTE *v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  void (*v205)(_BYTE *, uint64_t);
  _BYTE *v206;
  _BYTE *v207;
  _BYTE *v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t (*v214)(uint64_t, uint64_t, uint64_t);
  void (*v215)(_BYTE *, uint64_t);
  int v216;
  _BYTE *v217;
  _BYTE *v218;
  _BYTE *v219;
  uint64_t v220;
  _BYTE *v221;
  void (*v222)(_BYTE *, uint64_t);
  _BYTE *v223;
  void (*v224)(_BYTE *, uint64_t);
  uint64_t v225;
  _BYTE *v226;
  char v227;
  _BYTE *v228;
  char v229;
  uint64_t v230;
  char v231;
  _BYTE *v232;
  _BYTE *v233;
  uint64_t v234;
  _BYTE *v235;
  _BYTE *v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  void (*v240)(_BYTE *, uint64_t);
  _BYTE *v241;
  _BYTE *v242;
  _BYTE *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _BYTE *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t (*v250)(uint64_t, uint64_t, uint64_t);
  void (*v251)(_BYTE *, uint64_t);
  int v252;
  _BYTE *v253;
  _BYTE *v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  _BYTE *v258;
  void (*v259)(_BYTE *, uint64_t);
  uint64_t v260;
  void (*v261)(_BYTE *, uint64_t);
  uint64_t v262;
  uint64_t v263;
  char v264;
  _BYTE *v265;
  char v266;
  uint64_t v267;
  char v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  _BYTE *v272;
  _BYTE *v273;
  uint64_t v274;
  uint64_t v275;
  char v276;
  void (*v277)(_BYTE *, uint64_t);
  _BYTE *v278;
  _BYTE *v279;
  _BYTE *v280;
  uint64_t v281;
  uint64_t v282;
  _BYTE *v283;
  _BYTE *v284;
  uint64_t v285;
  uint64_t (*v286)(uint64_t, uint64_t, uint64_t);
  void (*v287)(_BYTE *, uint64_t);
  int v288;
  void (*v289)(_BYTE *, uint64_t);
  _BYTE *v290;
  uint64_t v291;
  _BYTE *v292;
  uint64_t v293;
  _BYTE *v294;
  uint64_t v295;
  _BYTE *v296;
  char v297;
  void (*v298)(_BYTE *, uint64_t);
  void (*v299)(_BYTE *, uint64_t);
  uint64_t v300;
  uint64_t v301;
  char v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  _BYTE *v306;
  void (*v307)(_BYTE *, uint64_t);
  _BYTE v308[4];
  int v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  _BYTE *v313;
  _BYTE *v314;
  unsigned int v315;
  _BYTE *v316;
  uint64_t v317;
  _BYTE *v318;
  _BYTE *v319;
  _BYTE *v320;
  _BYTE *v321;
  const char *v322;
  uint64_t v323;
  _BYTE *v324;
  unint64_t v325;
  _BYTE *v326;
  uint64_t v327;
  uint64_t v328;
  unsigned int v329;
  _BYTE *v330;
  _BYTE *v331;
  _BYTE *v332;
  _BYTE *v333;
  _BYTE *v334;
  _BYTE *v335;
  _BYTE *v336;
  _BYTE *v337;
  _BYTE *v338;
  _BYTE *v339;
  _BYTE *v340;
  _BYTE *v341;
  const char *v342;
  _BYTE *v343;
  _BYTE *v344;
  _BYTE *v345;
  _BYTE *v346;
  _BYTE *v347;
  _BYTE *v348;
  _BYTE *v349;
  _BYTE *v350;
  _BYTE *v351;
  _BYTE *v352;
  _BYTE *v353;
  uint64_t v354;
  _BYTE *v355;
  _BYTE *v356;
  _BYTE *v357;
  _BYTE *v358;
  uint64_t v359;
  _BYTE *v360;
  _BYTE *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  _BYTE *v365;
  _BYTE *v366;
  uint64_t v367;
  uint64_t v368;
  _BYTE *v369;
  void (*v370)(_BYTE *);
  void (*v371)(_BYTE *, uint64_t);

  v2 = v1;
  v4 = type metadata accessor for UsoIdentifier.NluComponent();
  v5 = *(_QWORD *)(v4 - 8);
  v363 = v4;
  v364 = v5;
  MEMORY[0x1E0C80A78](v4);
  v330 = &v308[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v362 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
  v7 = MEMORY[0x1E0C80A78](v362);
  v341 = &v308[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = &v308[-v10];
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = &v308[-v13];
  v15 = MEMORY[0x1E0C80A78](v12);
  v342 = &v308[-v16];
  MEMORY[0x1E0C80A78](v15);
  v324 = &v308[-v17];
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = &v308[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = MEMORY[0x1E0C80A78](v19);
  v351 = &v308[-v23];
  v24 = MEMORY[0x1E0C80A78](v22);
  v350 = &v308[-v25];
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = &v308[-v27];
  v29 = MEMORY[0x1E0C80A78](v26);
  v336 = &v308[-v30];
  v31 = MEMORY[0x1E0C80A78](v29);
  v33 = &v308[-v32];
  v34 = MEMORY[0x1E0C80A78](v31);
  v320 = &v308[-v35];
  v36 = MEMORY[0x1E0C80A78](v34);
  v338 = &v308[-v37];
  v38 = MEMORY[0x1E0C80A78](v36);
  v337 = &v308[-v39];
  v40 = MEMORY[0x1E0C80A78](v38);
  v321 = &v308[-v41];
  v42 = MEMORY[0x1E0C80A78](v40);
  v340 = &v308[-v43];
  v44 = MEMORY[0x1E0C80A78](v42);
  v339 = &v308[-v45];
  v46 = MEMORY[0x1E0C80A78](v44);
  v319 = &v308[-v47];
  v48 = MEMORY[0x1E0C80A78](v46);
  v334 = &v308[-v49];
  MEMORY[0x1E0C80A78](v48);
  v322 = &v308[-v50];
  v51 = type metadata accessor for IdentifierAppBundle();
  v367 = *(_QWORD *)(v51 - 8);
  v368 = v51;
  v52 = MEMORY[0x1E0C80A78](v51);
  v366 = &v308[-((v53 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v52);
  v365 = &v308[-v54];
  v55 = type metadata accessor for UsoIdentifier();
  v56 = *(_QWORD *)(v55 - 8);
  v57 = MEMORY[0x1E0C80A78](v55);
  v58 = MEMORY[0x1E0C80A78](v57);
  v349 = &v308[-v59];
  v60 = MEMORY[0x1E0C80A78](v58);
  v355 = &v308[-v61];
  v62 = MEMORY[0x1E0C80A78](v60);
  v352 = &v308[-v63];
  v64 = MEMORY[0x1E0C80A78](v62);
  v332 = &v308[-v65];
  v66 = MEMORY[0x1E0C80A78](v64);
  v345 = &v308[-v67];
  v68 = MEMORY[0x1E0C80A78](v66);
  v356 = &v308[-v69];
  v70 = MEMORY[0x1E0C80A78](v68);
  v360 = &v308[-v71];
  v72 = MEMORY[0x1E0C80A78](v70);
  v347 = &v308[-v73];
  v74 = MEMORY[0x1E0C80A78](v72);
  v346 = &v308[-v75];
  v76 = MEMORY[0x1E0C80A78](v74);
  v357 = &v308[-v77];
  v78 = MEMORY[0x1E0C80A78](v76);
  v361 = &v308[-v79];
  v80 = MEMORY[0x1E0C80A78](v78);
  v333 = &v308[-v81];
  v82 = MEMORY[0x1E0C80A78](v80);
  v348 = &v308[-v83];
  v84 = MEMORY[0x1E0C80A78](v82);
  v353 = &v308[-v85];
  v86 = MEMORY[0x1E0C80A78](v84);
  v354 = (uint64_t)&v308[-v87];
  v88 = MEMORY[0x1E0C80A78](v86);
  v316 = &v308[-v89];
  v90 = MEMORY[0x1E0C80A78](v88);
  v344 = &v308[-v91];
  v92 = MEMORY[0x1E0C80A78](v90);
  v358 = &v308[-v93];
  MEMORY[0x1E0C80A78](v92);
  v96 = &v308[-v95];
  if (!a1)
    return 0;
  v335 = v14;
  v313 = v28;
  v343 = v94;
  swift_retain();
  v97 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (v97)
    v98 = v97;
  else
    v98 = MEMORY[0x1E0DEE9D8];
  v369 = *(_BYTE **)(v98 + 16);
  if (!v369)
  {
    v102 = swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  v326 = v33;
  v331 = v11;
  v311 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  v99 = *(void (**)(_BYTE *))(v56 + 16);
  v325 = v98 + v311;
  v99(v96);
  swift_retain();
  swift_bridgeObjectRetain();
  v100 = specialized implicit closure #3 in implicit closure #2 in UsoTask.parseEntity(setting:)((uint64_t)v96);
  v312 = v56;
  v371 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
  v371(v96, v55);
  v323 = v2;
  v318 = v21;
  v328 = v98;
  v370 = v99;
  v310 = a1;
  if ((v100 & 1) != 0)
  {
    swift_release();
    goto LABEL_8;
  }
  if (v369 == (_BYTE *)1)
  {
LABEL_31:
    swift_release();
    v98 = v328;
    swift_bridgeObjectRelease();
    v329 = 0;
    goto LABEL_32;
  }
  v103 = *(_QWORD *)(v312 + 72);
  v329 = *MEMORY[0x1E0DA0F08];
  v315 = *MEMORY[0x1E0DA0600];
  v327 = v103;
  v104 = v328 + v103 + v311;
  v105 = 1;
  v106 = v322;
  v314 = v96;
  while (1)
  {
    ((void (*)(_BYTE *, unint64_t, uint64_t))v99)(v96, v104, v55);
    if (__OFADD__(v105, 1))
      goto LABEL_173;
    v359 = v105 + 1;
    v110 = v365;
    UsoIdentifier.appBundleSemantic.getter();
    v111 = v366;
    v112 = v367;
    v113 = v368;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v367 + 104))(v366, v329, v368);
    v114 = MEMORY[0x1B5E40114](v110, v111);
    v115 = *(void (**)(_BYTE *, uint64_t))(v112 + 8);
    v115(v111, v113);
    v116 = v110;
    v99 = v370;
    v115(v116, v113);
    v117 = v358;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v99)(v358, v96, v55);
    if ((v114 & 1) == 0)
    {
      v371(v117, v55);
LABEL_14:
      v107 = v344;
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v99)(v344, v96, v55);
LABEL_15:
      v108 = v107;
      v109 = v371;
      v371(v108, v55);
      v109(v96, v55);
      goto LABEL_16;
    }
    UsoIdentifier.sourceComponent.getter();
    v118 = v363;
    v119 = v364;
    v120 = (uint64_t)v106;
    v121 = v334;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v364 + 104))(v334, v315, v363);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v121, 0, 1, v118);
    v122 = v324;
    v123 = (uint64_t)&v324[*(int *)(v362 + 48)];
    outlined init with copy of ReferenceResolutionClientProtocol?(v120, (uint64_t)v324, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v121, v123, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v124 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 48);
    if (v124((uint64_t)v122, 1, v118) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v121, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of ReferenceResolutionClientProtocol?(v120, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v371(v358, v55);
      v125 = v124(v123, 1, v118);
      v106 = (const char *)v120;
      v99 = v370;
      v96 = v314;
      if (v125 != 1)
        goto LABEL_24;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v122, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v107 = v344;
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v99)(v344, v96, v55);
      goto LABEL_26;
    }
    v126 = v319;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v122, (uint64_t)v319, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    if (v124(v123, 1, v118) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v334, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v106 = v322;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v322, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v371(v358, v55);
      (*(void (**)(_BYTE *, uint64_t))(v364 + 8))(v126, v118);
      v99 = v370;
      v96 = v314;
LABEL_24:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v122, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
      goto LABEL_14;
    }
    v127 = v364;
    v128 = v330;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v364 + 32))(v330, v123, v118);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA0620], MEMORY[0x1E0DA0630]);
    v309 = dispatch thunk of static Equatable.== infix(_:_:)();
    v129 = *(void (**)(_BYTE *, uint64_t))(v127 + 8);
    v129(v128, v118);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v334, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v106 = v322;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v322, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v371(v358, v55);
    v129(v126, v118);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v122, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v107 = v344;
    v96 = v314;
    v99 = v370;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v370)(v344, v314, v55);
    if ((v309 & 1) == 0)
      goto LABEL_15;
LABEL_26:
    v130 = UsoIdentifier.namespace.getter();
    if (!v131)
      goto LABEL_15;
    if (v130 == 0x746553656E6F6870 && v131 == 0xEC000000676E6974)
      break;
    v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v133 = v107;
    v134 = v371;
    v371(v133, v55);
    swift_bridgeObjectRelease();
    v134(v96, v55);
    if ((v132 & 1) != 0)
      goto LABEL_165;
LABEL_16:
    ++v105;
    v104 += v327;
    if ((_BYTE *)v359 == v369)
      goto LABEL_31;
  }
  v306 = v107;
  v307 = v371;
  v371(v306, v55);
  swift_bridgeObjectRelease();
  v307(v96, v55);
LABEL_165:
  swift_release();
  v98 = v328;
LABEL_8:
  swift_bridgeObjectRelease();
  v329 = 2;
LABEL_32:
  v135 = (void (*)(uint64_t, uint64_t))v371;
  v136 = (uint64_t)v316;
  ((void (*)(_BYTE *, unint64_t, uint64_t))v99)(v316, v325, v55);
  swift_retain();
  swift_bridgeObjectRetain();
  v137 = specialized UsoTask.generalVolumeFilter(_:)(v136);
  v135(v136, v55);
  if ((v137 & 1) != 0)
  {
LABEL_33:
    swift_release();
    swift_bridgeObjectRelease();
    v329 |= 4u;
  }
  else
  {
    if (v369 != (_BYTE *)1)
    {
      v138 = *(_QWORD *)(v312 + 72);
      v139 = v98 + v138 + v311;
      v140 = 1;
      do
      {
        ((void (*)(uint64_t, unint64_t, uint64_t))v99)(v136, v139, v55);
        v141 = v140 + 1;
        if (__OFADD__(v140, 1))
          goto LABEL_174;
        v142 = specialized UsoTask.generalVolumeFilter(_:)(v136);
        v371((_BYTE *)v136, v55);
        if ((v142 & 1) != 0)
          goto LABEL_33;
        ++v140;
        v139 += v138;
      }
      while ((_BYTE *)v141 != v369);
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  v143 = v354;
  ((void (*)(uint64_t, unint64_t, uint64_t))v99)(v354, v325, v55);
  swift_retain();
  v144 = v143;
  swift_bridgeObjectRetain();
  LOBYTE(v143) = specialized UsoTask.siriVolumeFilter(_:)(v143);
  v145 = v371;
  v371((_BYTE *)v144, v55);
  v146 = (uint64_t)v361;
  v147 = v333;
  if ((v143 & 1) != 0)
    goto LABEL_41;
  if (v369 == (_BYTE *)1)
  {
LABEL_43:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  v161 = *(_BYTE **)(v312 + 72);
  LODWORD(v344) = *MEMORY[0x1E0DA0F08];
  LODWORD(v327) = *MEMORY[0x1E0DA0600];
  v334 = v161;
  v162 = &v161[v311 + v328];
  v163 = 1;
  v322 = "environmentPlaceName";
  v324 = (_BYTE *)0x80000001B4EF3250;
  while (2)
  {
    ((void (*)(uint64_t, _BYTE *, uint64_t))v99)(v144, v162, v55);
    if (__OFADD__(v163, 1))
      goto LABEL_170;
    v358 = v162;
    v359 = v163 + 1;
    v164 = v365;
    UsoIdentifier.appBundleSemantic.getter();
    v165 = v367;
    v166 = v368;
    v167 = v144;
    v168 = v366;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v367 + 104))(v366, v344, v368);
    v169 = MEMORY[0x1B5E40114](v164, v168);
    v170 = *(void (**)(_BYTE *, uint64_t))(v165 + 8);
    v170(v168, v166);
    v170(v164, v166);
    v171 = (void (*)(_BYTE *, uint64_t, uint64_t))v99;
    v172 = v353;
    v171(v353, v167, v55);
    if ((v169 & 1) == 0)
    {
      v145 = v371;
      v371(v172, v55);
      v146 = (uint64_t)v361;
      v182 = v348;
      v99 = v370;
      goto LABEL_74;
    }
    v173 = v339;
    UsoIdentifier.sourceComponent.getter();
    v175 = v363;
    v174 = v364;
    v176 = v340;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v364 + 104))(v340, v327, v363);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v174 + 56))(v176, 0, 1, v175);
    v177 = v342;
    v178 = (uint64_t)&v342[*(int *)(v362 + 48)];
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v173, (uint64_t)v342, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v176, v178, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v179 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v174 + 48);
    if (v179((uint64_t)v177, 1, v175) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v176, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v173, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v180 = v371;
      v371(v172, v55);
      v181 = v179(v178, 1, v175);
      v145 = v180;
      v146 = (uint64_t)v361;
      v147 = v333;
      v99 = v370;
      if (v181 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v342, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v182 = v348;
        v183 = v354;
        ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v348, v354, v55);
        goto LABEL_80;
      }
LABEL_73:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v342, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
      v182 = v348;
LABEL_74:
      v183 = v354;
      ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v182, v354, v55);
LABEL_75:
      v145(v182, v55);
      ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v147, v183, v55);
      v144 = v183;
LABEL_76:
      v145(v147, v55);
      v145((_BYTE *)v144, v55);
LABEL_77:
      ++v163;
      v162 = &v334[(_QWORD)v358];
      if ((_BYTE *)v359 == v369)
        goto LABEL_43;
      continue;
    }
    break;
  }
  v184 = v321;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v177, (uint64_t)v321, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  if (v179(v178, 1, v175) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v340, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v339, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v145 = v371;
    v371(v353, v55);
    (*(void (**)(_BYTE *, uint64_t))(v364 + 8))(v184, v175);
    v146 = (uint64_t)v361;
    v99 = v370;
    v147 = v333;
    goto LABEL_73;
  }
  v185 = (uint64_t)v177;
  v186 = v364;
  v187 = v184;
  v188 = v330;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v364 + 32))(v330, v178, v175);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA0620], MEMORY[0x1E0DA0630]);
  v189 = dispatch thunk of static Equatable.== infix(_:_:)();
  v190 = *(void (**)(_BYTE *, uint64_t))(v186 + 8);
  v190(v188, v175);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v340, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v339, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v191 = v371;
  v371(v353, v55);
  v190(v187, v175);
  v145 = v191;
  outlined destroy of ReferenceResolutionClientProtocol?(v185, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v182 = v348;
  v183 = v354;
  v99 = v370;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v370)(v348, v354, v55);
  v146 = (uint64_t)v361;
  v147 = v333;
  if ((v189 & 1) == 0)
    goto LABEL_75;
LABEL_80:
  v192 = UsoIdentifier.namespace.getter();
  if (!v193)
    goto LABEL_75;
  if (v192 == 0xD000000000000010 && v193 == v324)
  {
    v145(v182, v55);
    swift_bridgeObjectRelease();
    v144 = v354;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v147, v354, v55);
  }
  else
  {
    v194 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v145(v182, v55);
    swift_bridgeObjectRelease();
    v144 = v354;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v147, v354, v55);
    if ((v194 & 1) == 0)
      goto LABEL_76;
  }
  if (UsoIdentifier.value.getter() != 0x6563696F76 || v195 != 0xE500000000000000)
  {
    v196 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v145(v147, v55);
    v145((_BYTE *)v144, v55);
    if ((v196 & 1) != 0)
      goto LABEL_41;
    goto LABEL_77;
  }
  swift_bridgeObjectRelease();
  v145(v147, v55);
  v145((_BYTE *)v144, v55);
LABEL_41:
  swift_release();
  swift_bridgeObjectRelease();
  v329 |= 0x20u;
LABEL_44:
  ((void (*)(uint64_t, unint64_t, uint64_t))v99)(v146, v325, v55);
  swift_retain();
  swift_bridgeObjectRetain();
  v148 = specialized UsoTask.mediaVolumeFilter(_:)(v146);
  v145((_BYTE *)v146, v55);
  if ((v148 & 1) != 0)
    goto LABEL_45;
  if (v369 == (_BYTE *)1)
  {
LABEL_47:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  v197 = *(_BYTE **)(v312 + 72);
  LODWORD(v358) = *MEMORY[0x1E0DA0F08];
  LODWORD(v353) = *MEMORY[0x1E0DA0600];
  v354 = (uint64_t)v197;
  v198 = &v197[v311 + v328];
  v199 = 1;
  v342 = "environmentPlaceName";
  v344 = (_BYTE *)0x80000001B4EF3250;
  while (2)
  {
    ((void (*)(uint64_t, _BYTE *, uint64_t))v99)(v146, v198, v55);
    if (__OFADD__(v199, 1))
      goto LABEL_171;
    v359 = v199 + 1;
    v200 = v365;
    UsoIdentifier.appBundleSemantic.getter();
    v201 = v366;
    v202 = v367;
    v203 = v368;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v367 + 104))(v366, v358, v368);
    v204 = MEMORY[0x1B5E40114](v200, v201);
    v205 = *(void (**)(_BYTE *, uint64_t))(v202 + 8);
    v205(v201, v203);
    v206 = v200;
    v99 = v370;
    v205(v206, v203);
    v207 = v357;
    ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v357, v146, v55);
    if ((v204 & 1) == 0)
    {
      v145 = v371;
      v371(v207, v55);
      v218 = v347;
      v217 = v346;
      goto LABEL_99;
    }
    v208 = v337;
    UsoIdentifier.sourceComponent.getter();
    v210 = v363;
    v209 = v364;
    v211 = v338;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v364 + 104))(v338, v353, v363);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v211, 0, 1, v210);
    v212 = (uint64_t)v335;
    v213 = (uint64_t)&v335[*(int *)(v362 + 48)];
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v208, (uint64_t)v335, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v211, v213, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v214 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v209 + 48);
    if (v214(v212, 1, v210) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v211, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v208, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v215 = v371;
      v371(v357, v55);
      v216 = v214(v213, 1, v210);
      v145 = v215;
      v99 = v370;
      if (v216 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v335, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v217 = v346;
        v146 = (uint64_t)v361;
        ((void (*)(_BYTE *, _BYTE *, uint64_t))v99)(v346, v361, v55);
        v218 = v347;
        goto LABEL_105;
      }
LABEL_98:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v335, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
      v218 = v347;
      v217 = v346;
      v146 = (uint64_t)v361;
LABEL_99:
      ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v217, v146, v55);
LABEL_100:
      v145(v217, v55);
      ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v218, v146, v55);
LABEL_101:
      v145(v218, v55);
      v145((_BYTE *)v146, v55);
LABEL_102:
      ++v199;
      v198 += v354;
      if ((_BYTE *)v359 == v369)
        goto LABEL_47;
      continue;
    }
    break;
  }
  v219 = v320;
  outlined init with copy of ReferenceResolutionClientProtocol?(v212, (uint64_t)v320, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  if (v214(v213, 1, v210) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v338, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v337, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v145 = v371;
    v371(v357, v55);
    (*(void (**)(_BYTE *, uint64_t))(v364 + 8))(v219, v210);
    v99 = v370;
    goto LABEL_98;
  }
  v220 = v364;
  v221 = v330;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v364 + 32))(v330, v213, v210);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA0620], MEMORY[0x1E0DA0630]);
  LODWORD(v348) = dispatch thunk of static Equatable.== infix(_:_:)();
  v222 = *(void (**)(_BYTE *, uint64_t))(v220 + 8);
  v222(v221, v210);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v338, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v337, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v223 = v219;
  v224 = v371;
  v371(v357, v55);
  v222(v223, v210);
  v145 = v224;
  outlined destroy of ReferenceResolutionClientProtocol?(v212, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v217 = v346;
  v146 = (uint64_t)v361;
  v99 = v370;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v370)(v346, v361, v55);
  v218 = v347;
  if ((v348 & 1) == 0)
    goto LABEL_100;
LABEL_105:
  v225 = UsoIdentifier.namespace.getter();
  if (!v226)
    goto LABEL_100;
  if (v225 == 0xD000000000000010 && v226 == v344)
  {
    v145(v217, v55);
    swift_bridgeObjectRelease();
    ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v218, v146, v55);
  }
  else
  {
    v227 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v228 = v217;
    v229 = v227;
    v145(v228, v55);
    swift_bridgeObjectRelease();
    ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v218, v146, v55);
    if ((v229 & 1) == 0)
      goto LABEL_101;
  }
  if (UsoIdentifier.value.getter() != 0x707954616964656DLL || v230 != 0xE900000000000065)
  {
    v231 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v145(v218, v55);
    v145((_BYTE *)v146, v55);
    if ((v231 & 1) != 0)
      goto LABEL_45;
    goto LABEL_102;
  }
  swift_bridgeObjectRelease();
  v145(v218, v55);
  v145((_BYTE *)v146, v55);
LABEL_45:
  swift_release();
  swift_bridgeObjectRelease();
  v329 |= 0x10u;
LABEL_48:
  v149 = (uint64_t)v360;
  ((void (*)(_BYTE *, unint64_t, uint64_t))v99)(v360, v325, v55);
  swift_retain();
  v150 = (_BYTE *)v149;
  swift_bridgeObjectRetain();
  v151 = specialized UsoTask.callVolumeFilter(_:)(v149);
  v145((_BYTE *)v149, v55);
  v152 = v332;
  if ((v151 & 1) != 0)
    goto LABEL_49;
  if (v369 == (_BYTE *)1)
  {
LABEL_51:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  v232 = *(_BYTE **)(v312 + 72);
  LODWORD(v359) = *MEMORY[0x1E0DA0F08];
  LODWORD(v358) = *MEMORY[0x1E0DA0600];
  v233 = &v232[v311 + v328];
  v234 = 1;
  v357 = v232;
  v317 = v55;
  while (2)
  {
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v99)(v150, v233, v55);
    if (__OFADD__(v234, 1))
      goto LABEL_172;
    v361 = (_BYTE *)(v234 + 1);
    v235 = v365;
    UsoIdentifier.appBundleSemantic.getter();
    v236 = v366;
    v237 = v367;
    v238 = v368;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v367 + 104))(v366, v359, v368);
    v239 = MEMORY[0x1B5E40114](v235, v236);
    v240 = *(void (**)(_BYTE *, uint64_t))(v237 + 8);
    v241 = v236;
    v150 = v360;
    v240(v241, v238);
    v242 = v235;
    v99 = v370;
    v240(v242, v238);
    v243 = v356;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v99)(v356, v150, v55);
    if ((v239 & 1) == 0)
    {
      v254 = v243;
      v145 = v371;
      v371(v254, v55);
      v253 = v345;
      goto LABEL_124;
    }
    v244 = (uint64_t)v326;
    UsoIdentifier.sourceComponent.getter();
    v246 = v363;
    v245 = v364;
    v247 = v336;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v364 + 104))(v336, v358, v363);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v245 + 56))(v247, 0, 1, v246);
    v248 = (uint64_t)v331;
    v249 = (uint64_t)&v331[*(int *)(v362 + 48)];
    outlined init with copy of ReferenceResolutionClientProtocol?(v244, (uint64_t)v331, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v247, v249, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v250 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v245 + 48);
    if (v250(v248, 1, v246) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v247, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of ReferenceResolutionClientProtocol?(v244, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v55 = v317;
      v251 = v371;
      v371(v356, v317);
      v252 = v250(v249, 1, v246);
      v145 = v251;
      v232 = v357;
      if (v252 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v331, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v253 = v345;
        v150 = v360;
        ((void (*)(_BYTE *, _BYTE *, uint64_t))v99)(v345, v360, v55);
        v152 = v332;
        goto LABEL_130;
      }
LABEL_123:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v331, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
      v152 = v332;
      v253 = v345;
      v150 = v360;
LABEL_124:
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v99)(v253, v150, v55);
LABEL_125:
      v145(v253, v55);
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v99)(v152, v150, v55);
LABEL_126:
      v145(v152, v55);
      v145(v150, v55);
LABEL_127:
      ++v234;
      v233 = &v232[(_QWORD)v233];
      if (v361 == v369)
        goto LABEL_51;
      continue;
    }
    break;
  }
  v255 = (uint64_t)v313;
  outlined init with copy of ReferenceResolutionClientProtocol?(v248, (uint64_t)v313, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v256 = v250(v249, 1, v246);
  v55 = v317;
  if (v256 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v336, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v326, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v145 = v371;
    v371(v356, v55);
    (*(void (**)(uint64_t, uint64_t))(v364 + 8))(v255, v246);
    v232 = v357;
    goto LABEL_123;
  }
  v257 = v364;
  v258 = v330;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v364 + 32))(v330, v249, v246);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA0620], MEMORY[0x1E0DA0630]);
  LODWORD(v354) = dispatch thunk of static Equatable.== infix(_:_:)();
  v259 = *(void (**)(_BYTE *, uint64_t))(v257 + 8);
  v259(v258, v246);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v336, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v326, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v260 = v255;
  v261 = v371;
  v371(v356, v55);
  v259((_BYTE *)v260, v246);
  v145 = v261;
  outlined destroy of ReferenceResolutionClientProtocol?(v248, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v253 = v345;
  v150 = v360;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v99)(v345, v360, v55);
  v152 = v332;
  v232 = v357;
  if ((v354 & 1) == 0)
    goto LABEL_125;
LABEL_130:
  v262 = UsoIdentifier.namespace.getter();
  if (!v263)
    goto LABEL_125;
  if (v262 == 0x746553656E6F6870 && v263 == 0xEC000000676E6974)
  {
    v145(v253, v55);
    swift_bridgeObjectRelease();
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v99)(v152, v150, v55);
  }
  else
  {
    v264 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v265 = v253;
    v266 = v264;
    v145(v265, v55);
    swift_bridgeObjectRelease();
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v99)(v152, v150, v55);
    if ((v266 & 1) == 0)
      goto LABEL_126;
  }
  if (UsoIdentifier.value.getter() != 0x6C6F765F6C6C6163 || v267 != 0xEB00000000656D75)
  {
    v268 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v145(v152, v55);
    v145(v150, v55);
    if ((v268 & 1) != 0)
      goto LABEL_49;
    goto LABEL_127;
  }
  swift_bridgeObjectRelease();
  v145(v152, v55);
  v145(v150, v55);
LABEL_49:
  swift_release();
  swift_bridgeObjectRelease();
  v329 |= 8u;
LABEL_52:
  v153 = (uint64_t)v352;
  ((void (*)(_BYTE *, unint64_t, uint64_t))v99)(v352, v325, v55);
  swift_retain();
  swift_bridgeObjectRetain();
  v154 = specialized UsoTask.supportedBooleanNamespaceValuesFilter(_:)(v153);
  v145((_BYTE *)v153, v55);
  if ((v154 & 1) != 0)
  {
LABEL_53:
    swift_release();
    swift_bridgeObjectRelease_n();
    v101 = v329 | 0x40;
LABEL_56:
    swift_release();
    return v101;
  }
  if (v369 != (_BYTE *)1)
  {
    v269 = *(_QWORD *)(v312 + 72);
    LODWORD(v360) = *MEMORY[0x1E0DA0F08];
    LODWORD(v358) = *MEMORY[0x1E0DA0600];
    v359 = v269;
    v270 = v328 + v269 + v311;
    v271 = 1;
    while (1)
    {
      ((void (*)(uint64_t, unint64_t, uint64_t))v99)(v153, v270, v55);
      if (__OFADD__(v271, 1))
      {
        __break(1u);
LABEL_170:
        __break(1u);
LABEL_171:
        __break(1u);
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        swift_once();
LABEL_60:
        v156 = type metadata accessor for Logger();
        __swift_project_value_buffer(v156, (uint64_t)static Logger.executor);
        v157 = Logger.logObject.getter();
        v158 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v157, v158))
        {
          v159 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v159 = 0;
          _os_log_impl(&dword_1B4BE6000, v157, v158, "PhoneAffinityScorer Found an unsupported UsoEntity_common_Setting", v159, 2u);
          MEMORY[0x1B5E44758](v159, -1, -1);
        }
        swift_release();

        return 1;
      }
      v361 = (_BYTE *)(v271 + 1);
      v272 = v365;
      UsoIdentifier.appBundleSemantic.getter();
      v273 = v366;
      v274 = v367;
      v275 = v368;
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v367 + 104))(v366, v360, v368);
      v276 = MEMORY[0x1B5E40114](v272, v273);
      v277 = *(void (**)(_BYTE *, uint64_t))(v274 + 8);
      v277(v273, v275);
      v278 = v272;
      v99 = v370;
      v277(v278, v275);
      v279 = v355;
      ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v355, v153, v55);
      if ((v276 & 1) == 0)
        break;
      v280 = v350;
      UsoIdentifier.sourceComponent.getter();
      v282 = v363;
      v281 = v364;
      v283 = v351;
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v364 + 104))(v351, v358, v363);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v281 + 56))(v283, 0, 1, v282);
      v284 = v341;
      v285 = (uint64_t)&v341[*(int *)(v362 + 48)];
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v280, (uint64_t)v341, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v283, v285, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v286 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v281 + 48);
      if (v286((uint64_t)v284, 1, v282) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v351, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v350, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v287 = v371;
        v371(v279, v55);
        v288 = v286(v285, 1, v282);
        v289 = v287;
        if (v288 != 1)
          goto LABEL_148;
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v284, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v290 = v349;
        v153 = (uint64_t)v352;
        v99 = v370;
        ((void (*)(_BYTE *, _BYTE *, uint64_t))v370)(v349, v352, v55);
      }
      else
      {
        v291 = (uint64_t)v284;
        v292 = v351;
        v293 = (uint64_t)v318;
        outlined init with copy of ReferenceResolutionClientProtocol?(v291, (uint64_t)v318, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        if (v286(v285, 1, v282) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v292, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v350, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
          v289 = v371;
          v371(v355, v55);
          (*(void (**)(uint64_t, uint64_t))(v364 + 8))(v293, v282);
          v284 = v341;
LABEL_148:
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v284, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
          v290 = v349;
          v153 = (uint64_t)v352;
          v99 = v370;
LABEL_149:
          ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v290, v153, v55);
LABEL_150:
          v289(v290, v55);
          v294 = v343;
          ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v343, v153, v55);
LABEL_151:
          v289(v294, v55);
          v289((_BYTE *)v153, v55);
          goto LABEL_152;
        }
        v295 = v364;
        v296 = v330;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v364 + 32))(v330, v285, v282);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA0620], MEMORY[0x1E0DA0630]);
        v297 = dispatch thunk of static Equatable.== infix(_:_:)();
        v298 = *(void (**)(_BYTE *, uint64_t))(v295 + 8);
        v298(v296, v282);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v292, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v350, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v299 = v371;
        v371(v355, v55);
        v298(v318, v282);
        v289 = v299;
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v341, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v290 = v349;
        v153 = (uint64_t)v352;
        v99 = v370;
        ((void (*)(_BYTE *, _BYTE *, uint64_t))v370)(v349, v352, v55);
        if ((v297 & 1) == 0)
          goto LABEL_150;
      }
      v300 = UsoIdentifier.namespace.getter();
      if (!v301)
        goto LABEL_150;
      if (v300 == 0x747465536C6F6F62 && v301 == 0xEF656D614E676E69)
      {
        v289(v290, v55);
        swift_bridgeObjectRelease();
        v294 = v343;
        ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v343, v153, v55);
      }
      else
      {
        v302 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v289(v290, v55);
        swift_bridgeObjectRelease();
        v294 = v343;
        ((void (*)(_BYTE *, uint64_t, uint64_t))v99)(v343, v153, v55);
        if ((v302 & 1) == 0)
          goto LABEL_151;
      }
      if (one-time initialization token for kSupportedBooleanNamespaceValues != -1)
        swift_once();
      v303 = static UsoTask.kSupportedBooleanNamespaceValues;
      v304 = UsoIdentifier.value.getter();
      LOBYTE(v303) = specialized Set.contains(_:)(v304, v305, v303);
      swift_bridgeObjectRelease();
      v289(v294, v55);
      v289((_BYTE *)v153, v55);
      if ((v303 & 1) != 0)
        goto LABEL_53;
LABEL_152:
      ++v271;
      v270 += v359;
      if (v361 == v369)
        goto LABEL_55;
    }
    v289 = v371;
    v371(v279, v55);
    v290 = v349;
    v153 = (uint64_t)v352;
    goto LABEL_149;
  }
LABEL_55:
  swift_release();
  v102 = swift_bridgeObjectRelease_n();
  v101 = v329;
  if (v329)
    goto LABEL_56;
LABEL_57:
  v155 = MEMORY[0x1B5E40264](v102);
  swift_release();
  if (!v155)
  {
    if (one-time initialization token for executor != -1)
      goto LABEL_175;
    goto LABEL_60;
  }
  swift_release();
  return 0;
}

uint64_t UsoTask.parseEntity(userEntity:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, unint64_t, uint64_t);
  uint64_t v44;
  char v45;
  uint64_t v47;
  void (*v48)(char *, unint64_t, uint64_t);
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t);
  void (*v68)(uint64_t, uint64_t);
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char v92;
  void (*v93)(char *, uint64_t);
  char *v94;
  void (*v95)(char *, uint64_t, uint64_t);
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t, uint64_t);
  int v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  char *v111;
  char v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  void (*v121)(uint64_t, uint64_t);
  _QWORD v122[2];
  char *v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  unsigned int v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(char *, uint64_t);
  void (*v157)(char *, unint64_t, uint64_t);

  v1 = v0;
  v142 = type metadata accessor for UsoIdentifier.NluComponent();
  v149 = *(_QWORD *)(v142 - 8);
  MEMORY[0x1E0C80A78](v142);
  v130 = (char *)v122 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
  v3 = MEMORY[0x1E0C80A78](v141);
  v5 = (char *)v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v122 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v135 = (uint64_t)v122 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v122 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v134 = (char *)v122 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v140 = (uint64_t)v122 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v122 - v21;
  v148 = type metadata accessor for IdentifierAppBundle();
  v153 = *(_QWORD *)(v148 - 8);
  v23 = MEMORY[0x1E0C80A78](v148);
  v152 = (char *)v122 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v151 = (char *)v122 - v25;
  v26 = type metadata accessor for UsoIdentifier();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x1E0C80A78](v26);
  v137 = (char *)v122 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x1E0C80A78](v28);
  v136 = (char *)v122 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v138 = (char *)v122 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v145 = (char *)v122 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v147 = (uint64_t)v122 - v37;
  v38 = MEMORY[0x1E0C80A78](v36);
  v150 = (char *)v122 - v39;
  MEMORY[0x1E0C80A78](v38);
  v41 = (char *)v122 - v40;
  v42 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (!v42)
    v42 = MEMORY[0x1E0DEE9D8];
  v154 = *(_QWORD *)(v42 + 16);
  if (!v154)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  v139 = v7;
  v124 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  v43 = *(void (**)(char *, unint64_t, uint64_t))(v27 + 16);
  v44 = v42;
  v125 = v42 + v124;
  v157 = v43;
  ((void (*)(char *))v43)(v41);
  swift_retain();
  swift_bridgeObjectRetain();
  v45 = specialized implicit closure #3 in implicit closure #2 in UsoTask.parseEntity(setting:)((uint64_t)v41);
  v127 = v27;
  v156 = *(void (**)(char *, uint64_t))(v27 + 8);
  v156(v41, v26);
  if ((v45 & 1) != 0)
    goto LABEL_5;
  v128 = v44;
  v131 = v5;
  v123 = v11;
  v146 = v16;
  v47 = v148;
  v122[1] = v1;
  if (v154 == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    v49 = (void (*)(uint64_t, uint64_t))v156;
    v48 = v157;
LABEL_30:
    v78 = (uint64_t)v145;
    v48(v145, v125, v26);
    swift_retain();
    swift_bridgeObjectRetain();
    v79 = specialized UsoTask.answerProductFilter(_:)(v78);
    v49(v78, v26);
    if ((v79 & 1) != 0)
    {
LABEL_31:
      swift_release();
      swift_bridgeObjectRelease_n();
      return 0;
    }
    if (v154 == 1)
    {
LABEL_33:
      swift_release();
      swift_bridgeObjectRelease_n();
LABEL_34:
      if (one-time initialization token for executor == -1)
      {
LABEL_35:
        v80 = type metadata accessor for Logger();
        __swift_project_value_buffer(v80, (uint64_t)static Logger.executor);
        v81 = Logger.logObject.getter();
        v82 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v81, v82))
        {
          v83 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v83 = 0;
          _os_log_impl(&dword_1B4BE6000, v81, v82, "PhoneAffinityScorer Found an unsupported UsoEntity_common_UserEntity", v83, 2u);
          MEMORY[0x1B5E44758](v83, -1, -1);
        }

        return 1;
      }
LABEL_66:
      swift_once();
      goto LABEL_35;
    }
    v84 = *(char **)(v127 + 72);
    LODWORD(v155) = *MEMORY[0x1E0DA0F08];
    LODWORD(v143) = *MEMORY[0x1E0DA0600];
    v150 = v84;
    v85 = &v84[v124 + v128];
    v86 = 1;
    while (1)
    {
      v157((char *)v78, (unint64_t)v85, v26);
      v87 = v86 + 1;
      if (__OFADD__(v86, 1))
        goto LABEL_65;
      v88 = v151;
      UsoIdentifier.appBundleSemantic.getter();
      v90 = v152;
      v89 = v153;
      v91 = v148;
      (*(void (**)(char *, _QWORD, uint64_t))(v153 + 104))(v152, v155, v148);
      v92 = MEMORY[0x1B5E40114](v88, v90);
      v93 = *(void (**)(char *, uint64_t))(v89 + 8);
      v94 = v90;
      v95 = (void (*)(char *, uint64_t, uint64_t))v157;
      v93(v94, v91);
      v96 = v91;
      v78 = (uint64_t)v145;
      v93(v88, v96);
      v97 = v138;
      v95(v138, v78, v26);
      if ((v92 & 1) == 0)
        break;
      v144 = v86;
      v147 = v86 + 1;
      UsoIdentifier.sourceComponent.getter();
      v98 = v149;
      v99 = v135;
      v100 = v142;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v149 + 104))(v135, v143, v142);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v98 + 56))(v99, 0, 1, v100);
      v101 = (uint64_t)v131;
      v102 = (uint64_t)&v131[*(int *)(v141 + 48)];
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t)v131, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v99, v102, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v103 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
      if (v103(v101, 1, v100) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v99, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v156(v97, v26);
        v104 = v103(v102, 1, v100);
        v105 = v137;
        v87 = v147;
        v86 = v144;
        if (v104 != 1)
          goto LABEL_47;
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v131, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v106 = v136;
        v78 = (uint64_t)v145;
        v95 = (void (*)(char *, uint64_t, uint64_t))v157;
        v157(v136, (unint64_t)v145, v26);
      }
      else
      {
        v107 = (uint64_t)v123;
        outlined init with copy of ReferenceResolutionClientProtocol?(v101, (uint64_t)v123, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        if (v103(v102, 1, v100) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v135, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
          v16 = v146;
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v146, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
          v156(v97, v26);
          (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v107, v100);
          v105 = v137;
          v87 = v147;
          v86 = v144;
LABEL_47:
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v131, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
          v106 = v136;
          v78 = (uint64_t)v145;
          v95 = (void (*)(char *, uint64_t, uint64_t))v157;
LABEL_48:
          v95(v106, v78, v26);
LABEL_49:
          v108 = v106;
          v109 = v156;
          v156(v108, v26);
          v95(v105, v78, v26);
LABEL_50:
          v109(v105, v26);
          v109((char *)v78, v26);
          goto LABEL_51;
        }
        v110 = v149;
        v111 = v130;
        (*(void (**)(char *, uint64_t, uint64_t))(v149 + 32))(v130, v102, v100);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA0620], MEMORY[0x1E0DA0630]);
        v112 = dispatch thunk of static Equatable.== infix(_:_:)();
        v113 = *(void (**)(char *, uint64_t))(v110 + 8);
        v113(v111, v100);
        outlined destroy of ReferenceResolutionClientProtocol?(v135, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v16 = v146;
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v146, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v156(v138, v26);
        v113((char *)v107, v100);
        outlined destroy of ReferenceResolutionClientProtocol?(v101, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
        v106 = v136;
        v78 = (uint64_t)v145;
        v95 = (void (*)(char *, uint64_t, uint64_t))v157;
        v157(v136, (unint64_t)v145, v26);
        v105 = v137;
        v87 = v147;
        v86 = v144;
        if ((v112 & 1) == 0)
          goto LABEL_49;
      }
      v114 = UsoIdentifier.namespace.getter();
      if (!v115)
        goto LABEL_49;
      if (v114 == 0x7250726577736E61 && v115 == 0xED0000746375646FLL)
      {
        v156(v106, v26);
        swift_bridgeObjectRelease();
        v95(v105, v78, v26);
      }
      else
      {
        LODWORD(v147) = _stringCompareWithSmolCheck(_:_:expecting:)();
        v116 = v106;
        v109 = v156;
        v156(v116, v26);
        swift_bridgeObjectRelease();
        v95(v105, v78, v26);
        if ((v147 & 1) == 0)
          goto LABEL_50;
      }
      if (one-time initialization token for kAnswerProductValues != -1)
        swift_once();
      v117 = static UsoTask.kAnswerProductValues;
      v118 = UsoIdentifier.value.getter();
      LOBYTE(v117) = specialized Set.contains(_:)(v118, v119, v117);
      swift_bridgeObjectRelease();
      v120 = v105;
      v121 = (void (*)(uint64_t, uint64_t))v156;
      v156(v120, v26);
      v121(v78, v26);
      if ((v117 & 1) != 0)
        goto LABEL_31;
LABEL_51:
      ++v86;
      v85 = &v150[(_QWORD)v85];
      if (v87 == v154)
        goto LABEL_33;
    }
    v156(v97, v26);
    v105 = v137;
    v106 = v136;
    goto LABEL_48;
  }
  v50 = *(_QWORD *)(v127 + 72);
  LODWORD(v144) = *MEMORY[0x1E0DA0F08];
  v133 = *MEMORY[0x1E0DA0600];
  v143 = v50;
  v51 = v128 + v50 + v124;
  v52 = 1;
  v132 = v26;
  v129 = v22;
  v157(v41, v51, v26);
  while (1)
  {
    if (__OFADD__(v52, 1))
    {
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    v155 = v52 + 1;
    v55 = v151;
    UsoIdentifier.appBundleSemantic.getter();
    v57 = v152;
    v56 = v153;
    (*(void (**)(char *, _QWORD, uint64_t))(v153 + 104))(v152, v144, v47);
    v58 = MEMORY[0x1B5E40114](v55, v57);
    v59 = *(void (**)(char *, uint64_t))(v56 + 8);
    v59(v57, v47);
    v59(v55, v47);
    v48 = v157;
    v60 = v150;
    v157(v150, (unint64_t)v41, v26);
    if ((v58 & 1) == 0)
    {
      v53 = v60;
      v49 = (void (*)(uint64_t, uint64_t))v156;
      v156(v53, v26);
LABEL_11:
      v54 = v147;
      v48((char *)v147, (unint64_t)v41, v26);
LABEL_12:
      v49(v54, v26);
      v49((uint64_t)v41, v26);
      goto LABEL_13;
    }
    UsoIdentifier.sourceComponent.getter();
    v61 = v149;
    v62 = (uint64_t)v22;
    v63 = v140;
    v64 = v142;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v149 + 104))(v140, v133, v142);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v61 + 56))(v63, 0, 1, v64);
    v65 = (uint64_t)v139;
    v66 = (uint64_t)&v139[*(int *)(v141 + 48)];
    outlined init with copy of ReferenceResolutionClientProtocol?(v62, (uint64_t)v139, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v63, v66, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
    if (v67(v65, 1, v64) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v63, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of ReferenceResolutionClientProtocol?(v62, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v26 = v132;
      v68 = (void (*)(uint64_t, uint64_t))v156;
      v156(v150, v132);
      v69 = v67(v66, 1, v64);
      v49 = v68;
      v65 = (uint64_t)v139;
      v22 = (char *)v62;
      if (v69 != 1)
        goto LABEL_22;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v139, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v54 = v147;
      v48 = v157;
      v157((char *)v147, (unint64_t)v41, v26);
      v47 = v148;
      goto LABEL_24;
    }
    v70 = (uint64_t)v134;
    outlined init with copy of ReferenceResolutionClientProtocol?(v65, (uint64_t)v134, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    if (v67(v66, 1, v64) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v140, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v22 = v129;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v129, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      v26 = v132;
      v49 = (void (*)(uint64_t, uint64_t))v156;
      v156(v150, v132);
      (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v70, v64);
LABEL_22:
      outlined destroy of ReferenceResolutionClientProtocol?(v65, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
      v48 = v157;
      v47 = v148;
      goto LABEL_11;
    }
    v71 = v149;
    v72 = v130;
    (*(void (**)(char *, uint64_t, uint64_t))(v149 + 32))(v130, v66, v64);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA0620], MEMORY[0x1E0DA0630]);
    v126 = dispatch thunk of static Equatable.== infix(_:_:)();
    v73 = *(void (**)(char *, uint64_t))(v71 + 8);
    v47 = v148;
    v73(v72, v64);
    outlined destroy of ReferenceResolutionClientProtocol?(v140, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v22 = v129;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v129, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v26 = v132;
    v74 = v65;
    v75 = (void (*)(uint64_t, uint64_t))v156;
    v156(v150, v132);
    v73(v134, v64);
    v49 = v75;
    outlined destroy of ReferenceResolutionClientProtocol?(v74, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    v54 = v147;
    v48 = v157;
    v157((char *)v147, (unint64_t)v41, v26);
    if ((v126 & 1) == 0)
      goto LABEL_12;
LABEL_24:
    v76 = UsoIdentifier.namespace.getter();
    if (!v77)
      goto LABEL_12;
    if (v76 == 0x746553656E6F6870 && v77 == 0xEC000000676E6974)
      break;
    v126 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v49(v54, v26);
    swift_bridgeObjectRelease();
    v49((uint64_t)v41, v26);
    if ((v126 & 1) != 0)
      goto LABEL_5;
LABEL_13:
    ++v52;
    v51 += v143;
    v16 = v146;
    if (v155 == v154)
    {
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    v48(v41, v51, v26);
  }
  v49(v54, v26);
  swift_bridgeObjectRelease();
  v49((uint64_t)v41, v26);
LABEL_5:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 2;
}

uint64_t one-time initialization function for forceEnabled(uint64_t a1)
{
  return one-time initialization function for forceEnabled(a1, &static InCallFeatureFlags.forceEnabled);
}

{
  return one-time initialization function for forceEnabled(a1, &static PhoneFeatureFlags.forceEnabled);
}

uint64_t *InCallFeatureFlags.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return &static InCallFeatureFlags.forceEnabled;
}

uint64_t static InCallFeatureFlags.forceEnabled.getter()
{
  return default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(&one-time initialization token for forceEnabled);
}

const char *InCallFeatureFlags.domain.getter()
{
  return "SiriInCall";
}

const char *InCallFeatureFlags.feature.getter()
{
  return "blushing_phantom";
}

uint64_t static InCallFeatureFlags.== infix(_:_:)()
{
  return 1;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance InCallFeatureFlags()
{
  return "SiriInCall";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance InCallFeatureFlags()
{
  return "blushing_phantom";
}

uint64_t one-time initialization function for forceEnabled(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 2;
  *a2 = result;
  return result;
}

uint64_t *PhoneFeatureFlags.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return &static PhoneFeatureFlags.forceEnabled;
}

uint64_t static PhoneFeatureFlags.forceEnabled.getter()
{
  return default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(&one-time initialization token for forceEnabled);
}

const char *PhoneFeatureFlags.domain.getter()
{
  return "SiriPhone";
}

const char *PhoneFeatureFlags.feature.getter()
{
  return "CancelCallBell";
}

unsigned __int8 *closure #1 in InCallFeatureFlags.isEnabled.getter@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, _BYTE *a4@<X8>)
{
  int v5;
  char v6;
  char v7;
  _BYTE v8[24];
  uint64_t v9;
  uint64_t v10;

  v5 = *result;
  if (v5 == 2)
  {
    v9 = a2;
    v10 = a3();
    v6 = isFeatureEnabled(_:)();
    result = (unsigned __int8 *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    v7 = v6 & 1;
  }
  else
  {
    v7 = v5 & 1;
  }
  *a4 = v7;
  return result;
}

uint64_t static PhoneFeatureFlags.== infix(_:_:)()
{
  return 1;
}

void PhoneFeatureFlags.hash(into:)()
{
  Hasher._combine(_:)(0);
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology021UsoEntity_common_UserG0CG_0D10KitRuntime19SettingParseOptionsVs5NeverOTg504_s12d9Ontology7f9TaskC0A10jk69E11parseEntity33_78CB2465498F39AEB41E4B41B1A3637CLL12userEntitiesAD19lmn12VSayAA0ch12_h1_I25H0CG_tFAiKcACcfu_AiKcfu0_AF0fR0CTf1cn_nTf4ng_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x1E0DEE9D8];
    if (!v2)
      return v3;
    v9 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v9;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        MEMORY[0x1B5E43B94](v5, a1);
      else
        swift_retain();
      v6 = UsoTask.parseEntity(userEntity:)();
      swift_release();
      v8 = *(_QWORD *)(v9 + 16);
      v7 = *(_QWORD *)(v9 + 24);
      if (v8 >= v7 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      ++v5;
      *(_QWORD *)(v9 + 16) = v8 + 1;
      *(_BYTE *)(v9 + v8 + 32) = v6;
      if (v2 == v5)
        return v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type SettingParseOptions and conformance SettingParseOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions;
  if (!lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SettingParseOptions, &type metadata for SettingParseOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions;
  if (!lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SettingParseOptions, &type metadata for SettingParseOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions;
  if (!lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SettingParseOptions, &type metadata for SettingParseOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions;
  if (!lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SettingParseOptions, &type metadata for SettingParseOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SettingParseOptions and conformance SettingParseOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InCallFeatureFlags and conformance InCallFeatureFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InCallFeatureFlags and conformance InCallFeatureFlags;
  if (!lazy protocol witness table cache variable for type InCallFeatureFlags and conformance InCallFeatureFlags)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for InCallFeatureFlags, &type metadata for InCallFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InCallFeatureFlags and conformance InCallFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InCallFeatureFlags and conformance InCallFeatureFlags;
  if (!lazy protocol witness table cache variable for type InCallFeatureFlags and conformance InCallFeatureFlags)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for InCallFeatureFlags, &type metadata for InCallFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InCallFeatureFlags and conformance InCallFeatureFlags);
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneAffinityScorer()
{
  return &type metadata for PhoneAffinityScorer;
}

uint64_t getEnumTagSinglePayload for PhoneSettingParseResult(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  if (!a2)
    return 0;
  v2 = a2 + 0xFFFF;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (v2 < 0xFF0000)
    v3 = 1;
  if (v2 >= 0x10000)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1B4E35D90 + 4 * byte_1B4EEC7A8[v4]))();
}

uint64_t sub_1B4E35DA8(unsigned __int16 *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (a1[1])
    return (*a1 | ((_DWORD)v1 << 16)) - 0xFFFF;
  return v1;
}

void sub_1B4E35DB4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2))
    JUMPOUT(0x1B4E35DBCLL);
  JUMPOUT(0x1B4E35DCCLL);
}

uint64_t storeEnumTagSinglePayload for PhoneSettingParseResult(_WORD *a1, int a2, int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 0xFFFF;
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v4 = 2;
  else
    v4 = 4;
  if (v3 < 0xFF0000)
    v4 = 1;
  if (v3 >= 0x10000)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3)
    v5 = v5;
  else
    v5 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_1B4E35E58 + 4 * byte_1B4EEC7B2[v5]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_1B4E35E38 + 4 * byte_1B4EEC7AD[v5]))();
}

uint64_t sub_1B4E35E38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B4E35E58(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_1B4E35E60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B4E35E68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B4E35E70(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_1B4E35E78(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

uint64_t getEnumTag for PhoneSettingParseResult(unsigned __int8 *a1)
{
  if (a1[1])
    return (*a1 | (a1[1] << 8)) - 255;
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for PhoneSettingParseResult(_BYTE *result, int a2)
{
  if (a2)
  {
    *result = a2 - 1;
    result[1] = ((unsigned __int16)(a2 - 1) >> 8) + 1;
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhoneSettingParseResult()
{
  return &type metadata for PhoneSettingParseResult;
}

ValueMetadata *type metadata accessor for SettingParseOptions()
{
  return &type metadata for SettingParseOptions;
}

ValueMetadata *type metadata accessor for InCallFeatureFlags()
{
  return &type metadata for InCallFeatureFlags;
}

uint64_t storeEnumTagSinglePayload for InCallFeatureFlags(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4E35F40 + 4 * byte_1B4EEC7B7[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4E35F60 + 4 * byte_1B4EEC7BC[v4]))();
}

_BYTE *sub_1B4E35F40(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4E35F60(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4E35F68(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4E35F70(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4E35F78(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4E35F80(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PhoneFeatureFlags()
{
  return &type metadata for PhoneFeatureFlags;
}

uint64_t sub_1B4E35FE0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = dispatch thunk of CodeGenListEntry.entry.getter();
  *a1 = v3;
  return result;
}

uint64_t specialized implicit closure #3 in implicit closure #2 in UsoTask.parseEntity(setting:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v12;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = specialized UsoTask.vocFilter(_:)(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  if ((v6 & 1) != 0 && (v7 = UsoIdentifier.namespace.getter(), v8))
  {
    if (v7 == 0x746553656E6F6870 && v8 == 0xEC000000676E6974)
      v10 = 1;
    else
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t specialized UsoTask.answerProductFilter(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char v9;
  void (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  char v14;
  void (*v15)(char *, uint64_t);
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v21 - v7;
  v9 = specialized UsoTask.vocFilter(_:)(a1);
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v10(v8, a1, v2);
  if ((v9 & 1) != 0 && (v11 = UsoIdentifier.namespace.getter(), v12))
  {
    if (v11 == 0x7250726577736E61 && v12 == 0xED0000746375646FLL)
    {
      v15 = *(void (**)(char *, uint64_t))(v3 + 8);
      v15(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
    }
    else
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v15 = *(void (**)(char *, uint64_t))(v3 + 8);
      v15(v8, v2);
      swift_bridgeObjectRelease();
      v10(v6, a1, v2);
      v16 = 0;
      if ((v14 & 1) == 0)
        goto LABEL_14;
    }
    if (one-time initialization token for kAnswerProductValues != -1)
      swift_once();
    v17 = static UsoTask.kAnswerProductValues;
    v18 = UsoIdentifier.value.getter();
    v16 = specialized Set.contains(_:)(v18, v19, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v8, v2);
    v10(v6, a1, v2);
    v16 = 0;
  }
LABEL_14:
  v15(v6, v2);
  return v16 & 1;
}

SiriKitRuntime::PhotosAffinityScorer __swiftcall PhotosAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::PhotosAffinityScorer result;

  v0 = (void *)0x80000001B4EF6D80;
  v1 = 0xD000000000000027;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t PhotosAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t one-time initialization function for supportedIntents()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for supportedIntents);
  result = swift_arrayDestroy();
  static PhotosAffinityScorer.supportedIntents = v0;
  return result;
}

uint64_t *PhotosAffinityScorer.supportedIntents.unsafeMutableAddressor()
{
  if (one-time initialization token for supportedIntents != -1)
    swift_once();
  return &static PhotosAffinityScorer.supportedIntents;
}

uint64_t static PhotosAffinityScorer.supportedIntents.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for supportedIntents);
}

uint64_t one-time initialization function for sharedIntents()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for sharedIntents);
  result = swift_arrayDestroy();
  static PhotosAffinityScorer.sharedIntents = v0;
  return result;
}

uint64_t *PhotosAffinityScorer.sharedIntents.unsafeMutableAddressor()
{
  if (one-time initialization token for sharedIntents != -1)
    swift_once();
  return &static PhotosAffinityScorer.sharedIntents;
}

uint64_t static PhotosAffinityScorer.sharedIntents.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for sharedIntents);
}

void one-time initialization function for supportedApps()
{
  static PhotosAffinityScorer.supportedApps = MEMORY[0x1E0DEE9E8];
}

uint64_t *PhotosAffinityScorer.supportedApps.unsafeMutableAddressor()
{
  if (one-time initialization token for supportedApps != -1)
    swift_once();
  return &static PhotosAffinityScorer.supportedApps;
}

uint64_t static PhotosAffinityScorer.supportedApps.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for supportedApps);
}

uint64_t specialized PhotosAffinityScorer.supportedAppIsOnScreen(with:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  char v50;
  char v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  void (*v61)(char *, char *, uint64_t);
  int v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  void (*v75)(char *, uint64_t, uint64_t);
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void (*v81)(char *, _QWORD, uint64_t);
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  char *v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  char *v92;
  char v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  char v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t result;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char *v108;
  void (*v109)(char *, uint64_t);
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  char *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char *v128;
  int64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(char *, uint64_t, uint64_t);
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unsigned int v146;
  unint64_t v147;
  char *v148;
  unsigned int v149;
  char *v150;
  char *v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  void (*v169)(char *, uint64_t);
  uint64_t v170;
  uint64_t v171;
  void (*v172)(char *, uint64_t, uint64_t);
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  int v179;
  char *v180;
  void (*v181)(char *, char *, uint64_t);
  char *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v144 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RRMetadata();
  v176 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v144 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v184 = (char *)&v144 - v9;
  v185 = type metadata accessor for RRDataSourceMetadataValue();
  v183 = *(_QWORD *)(v185 - 8);
  v10 = MEMORY[0x1E0C80A78](v185);
  v154 = (char *)&v144 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v160 = (char *)&v144 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v180 = (char *)&v144 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v175 = (char *)&v144 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v174 = (char *)&v144 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v151 = (char *)&v144 - v21;
  MEMORY[0x1E0C80A78](v20);
  v163 = (char *)&v144 - v22;
  v23 = type metadata accessor for RREntity();
  v168 = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x1E0C80A78](v23);
  v162 = (char *)&v144 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v150 = (char *)&v144 - v27;
  MEMORY[0x1E0C80A78](v26);
  v156 = (char *)&v144 - v28;
  v29 = type metadata accessor for RRCandidate();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x1E0C80A78](v29);
  v157 = (char *)&v144 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v31);
  v148 = (char *)&v144 - v34;
  v35 = MEMORY[0x1E0C80A78](v33);
  v161 = (char *)&v144 - v36;
  v37 = MEMORY[0x1E0C80A78](v35);
  v39 = (char *)&v144 - v38;
  MEMORY[0x1E0C80A78](v37);
  v173 = (char *)&v144 - v40;
  v41 = MEMORY[0x1E0DEE9D8];
  v186 = (char *)MEMORY[0x1E0DEE9D8];
  v42 = *(_QWORD *)(a1 + 16);
  v144 = a1;
  swift_bridgeObjectRetain();
  v164 = v23;
  v170 = v30;
  v171 = v29;
  v155 = v42;
  if (!v42)
  {
    v127 = v41;
    v128 = (_QWORD *)v41;
LABEL_72:
    swift_bridgeObjectRelease();
    v129 = *(_QWORD *)(v127 + 16);
    if (v129)
    {
      v186 = (char *)v128;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v129, 0);
      v130 = *(unsigned __int8 *)(v170 + 80);
      v185 = v127;
      v131 = v127 + ((v130 + 32) & ~v130);
      v132 = *(_QWORD *)(v170 + 72);
      v133 = *(void (**)(char *, uint64_t, uint64_t))(v170 + 16);
      v134 = v157;
      do
      {
        v133(v134, v131, v29);
        v135 = v162;
        RRCandidate.entity.getter();
        v136 = RREntity.appBundleId.getter();
        v138 = v137;
        (*(void (**)(char *, uint64_t))(v168 + 8))(v135, v23);
        (*(void (**)(char *, uint64_t))(v170 + 8))(v134, v171);
        v139 = v186;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v139[2] + 1, 1);
          v139 = v186;
        }
        v141 = v139[2];
        v140 = v139[3];
        if (v141 >= v140 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v140 > 1, v141 + 1, 1);
          v139 = v186;
        }
        v139[2] = v141 + 1;
        v142 = &v139[2 * v141];
        v142[4] = v136;
        v142[5] = v138;
        v131 += v132;
        --v129;
        v23 = v164;
        v29 = v171;
      }
      while (v129);
      swift_release();
      if (v139[2])
        goto LABEL_80;
    }
    else
    {
      swift_release();
      v139 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      {
LABEL_80:
        v143 = v139[4];
        swift_bridgeObjectRetain();
LABEL_83:
        swift_bridgeObjectRelease();
        return v143;
      }
    }
    v143 = 0;
    goto LABEL_83;
  }
  v43 = 0;
  v44 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v159 = *(_QWORD *)(v30 + 72);
  v145 = v44;
  v153 = v144 + v44;
  v172 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v179 = *MEMORY[0x1E0DA3D48];
  v149 = *MEMORY[0x1E0DA3DC0];
  v146 = *MEMORY[0x1E0DA3DB8];
  v182 = v8;
  v158 = v39;
  v177 = v4;
  while (1)
  {
    v165 = v43;
    v172(v173, v153 + v159 * v43, v29);
    v45 = v156;
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    v169 = *(void (**)(char *, uint64_t))(v168 + 8);
    v169(v45, v23);
    v46 = UsoTask.verbString.getter();
    v48 = v47;
    swift_release();
    if (one-time initialization token for kUsoCommonAppEntityName != -1)
      swift_once();
    if (v46 == kUsoCommonAppEntityName._countAndFlagsBits && v48 == kUsoCommonAppEntityName._object)
      break;
    v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v172(v39, (uint64_t)v173, v29);
    v51 = 0;
    v52 = (uint64_t)v177;
    if ((v50 & 1) != 0)
      goto LABEL_15;
LABEL_55:
    v109 = *(void (**)(char *, uint64_t))(v170 + 8);
    v109(v39, v29);
    v110 = v161;
    v172(v161, (uint64_t)v173, v29);
    if ((v51 & 1) != 0)
    {
      if (one-time initialization token for supportedApps != -1)
        swift_once();
      v111 = static PhotosAffinityScorer.supportedApps;
      v112 = v162;
      v113 = v161;
      RRCandidate.entity.getter();
      v114 = RREntity.appBundleId.getter();
      v116 = v115;
      v169(v112, v23);
      LOBYTE(v114) = specialized Set.contains(_:)(v114, v116, v111);
      swift_bridgeObjectRelease();
      v109(v113, v29);
      v8 = v182;
      v39 = v158;
      if ((v114 & 1) != 0)
      {
        v117 = *(void (**)(char *, char *, uint64_t))(v170 + 32);
        v117(v148, v173, v29);
        v118 = v186;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v118 + 2) + 1, 1);
          v118 = v186;
        }
        v120 = *((_QWORD *)v118 + 2);
        v119 = *((_QWORD *)v118 + 3);
        if (v120 >= v119 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v119 > 1, v120 + 1, 1);
          v118 = v186;
        }
        *((_QWORD *)v118 + 2) = v120 + 1;
        v117(&v118[v145 + v120 * v159], v148, v29);
        v186 = v118;
        v8 = v182;
        goto LABEL_5;
      }
    }
    else
    {
      v109(v110, v29);
    }
    v109(v173, v29);
LABEL_5:
    v43 = v165 + 1;
    if (v165 + 1 == v155)
    {
      v127 = (uint64_t)v186;
      v128 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      goto LABEL_72;
    }
  }
  swift_bridgeObjectRelease();
  v172(v39, (uint64_t)v173, v29);
  v52 = (uint64_t)v177;
LABEL_15:
  v53 = v150;
  RRCandidate.entity.getter();
  v54 = RREntity.metadata.getter();
  v169(v53, v23);
  v55 = *(char **)(v54 + 16);
  if (v55)
  {
    v56 = v176;
    v57 = v54 + ((*(unsigned __int8 *)(v176 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v176 + 80));
    v167 = v54;
    swift_bridgeObjectRetain();
    v58 = *(_QWORD *)(v56 + 72);
    v181 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
    v59 = MEMORY[0x1E0DEE9D8];
    do
    {
      v60 = v184;
      v61 = v181;
      v181(v184, (char *)v57, v5);
      v61(v8, v60, v5);
      v62 = (*(uint64_t (**)(char *, uint64_t))(v56 + 88))(v8, v5);
      if (v62 == v179)
      {
        (*(void (**)(char *, uint64_t))(v56 + 96))(v8, v5);
        v63 = v8;
        v64 = v183;
        v65 = *(void (**)(char *, char *, uint64_t))(v183 + 32);
        v66 = v185;
        v178 = v55;
        v67 = v58;
        v68 = v59;
        v69 = v5;
        v70 = v56;
        v71 = v175;
        v65(v175, v63, v185);
        v72 = v71;
        v56 = v70;
        v5 = v69;
        v59 = v68;
        v58 = v67;
        v55 = v178;
        v65((char *)v52, v72, v66);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v52, 0, 1, v66);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v184, v5);
      }
      else
      {
        v73 = v8;
        v74 = *(void (**)(char *, uint64_t))(v56 + 8);
        v74(v73, v5);
        v64 = v183;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v183 + 56))(v52, 1, 1, v185);
        v74(v184, v5);
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v52, 1, v185) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?(v52);
      }
      else
      {
        v75 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 32);
        v76 = v174;
        v77 = v185;
        v75(v174, v52, v185);
        v75(v180, (uint64_t)v76, v77);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v59 + 16) + 1, 1, v59);
        v79 = *(_QWORD *)(v59 + 16);
        v78 = *(_QWORD *)(v59 + 24);
        if (v79 >= v78 >> 1)
          v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, v79 + 1, 1, v59);
        *(_QWORD *)(v59 + 16) = v79 + 1;
        v75((char *)(v59+ ((*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80))+ *(_QWORD *)(v183 + 72) * v79), (uint64_t)v180, v185);
        v56 = v176;
        v52 = (uint64_t)v177;
      }
      v8 = v182;
      v57 += v58;
      --v55;
    }
    while (v55);
    swift_bridgeObjectRelease_n();
    v23 = v164;
  }
  else
  {
    swift_bridgeObjectRelease();
    v59 = MEMORY[0x1E0DEE9D8];
  }
  v80 = v183;
  v81 = *(void (**)(char *, _QWORD, uint64_t))(v183 + 104);
  v82 = v163;
  v81(v163, v149, v185);
  v83 = v151;
  if (!*(_QWORD *)(v59 + 16))
  {
    v98 = *(void (**)(char *, uint64_t))(v80 + 8);
    v29 = v171;
    v39 = v158;
    v98(v82, v185);
LABEL_41:
    v51 = 0;
LABEL_54:
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  v166 = *(_QWORD *)(v59 + 16);
  v147 = (*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
  v84 = *(char **)(v80 + 16);
  v152 = v59 + v147;
  v85 = v185;
  v178 = v84;
  ((void (*)(char *))v84)(v151);
  v86 = lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue();
  swift_bridgeObjectRetain();
  v167 = v86;
  v87 = dispatch thunk of static Equatable.== infix(_:_:)();
  v181 = *(void (**)(char *, char *, uint64_t))(v80 + 8);
  ((void (*)(char *, uint64_t))v181)(v83, v85);
  if ((v87 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_33:
    v88 = v154;
    v89 = (void (*)(char *, uint64_t))v181;
    v23 = v164;
LABEL_34:
    v90 = v185;
    v89(v163, v185);
    v81(v160, v146, v90);
    ((void (*)(char *, unint64_t, uint64_t))v178)(v88, v152, v90);
    swift_bridgeObjectRetain();
    v91 = (void (*)(char *, uint64_t))v181;
    v92 = v88;
    v93 = dispatch thunk of static Equatable.== infix(_:_:)();
    v91(v92, v90);
    if ((v93 & 1) != 0)
      goto LABEL_37;
    if (v166 != 1)
    {
      v94 = *(_QWORD *)(v80 + 72);
      v95 = v154;
      v96 = v185;
      ((void (*)(char *, unint64_t, uint64_t))v178)(v154, v152 + v94, v185);
      v97 = dispatch thunk of static Equatable.== infix(_:_:)();
      v91(v95, v96);
      if ((v97 & 1) != 0)
      {
LABEL_37:
        v51 = 0;
        goto LABEL_52;
      }
      if (v166 != 2)
      {
        v121 = v59 + v147 + 2 * v94;
        v122 = 2;
        while (1)
        {
          v123 = v154;
          result = ((uint64_t (*)(char *, unint64_t, uint64_t))v178)(v154, v121, v185);
          v124 = v122 + 1;
          if (__OFADD__(v122, 1))
            break;
          v125 = v185;
          v126 = dispatch thunk of static Equatable.== infix(_:_:)();
          ((void (*)(char *, uint64_t))v181)(v123, v125);
          if ((v126 & 1) == 0)
          {
            ++v122;
            v121 += v94;
            if (v124 != v166)
              continue;
          }
          v51 = v126 ^ 1;
          v29 = v171;
          v91 = (void (*)(char *, uint64_t))v181;
          v8 = v182;
          goto LABEL_53;
        }
        __break(1u);
        goto LABEL_85;
      }
    }
    v51 = 1;
LABEL_52:
    v29 = v171;
LABEL_53:
    v39 = v158;
    swift_bridgeObjectRelease();
    v91(v160, v185);
    goto LABEL_54;
  }
  if (v166 == 1)
    goto LABEL_40;
  v99 = *(_QWORD *)(v80 + 72);
  v100 = v185;
  ((void (*)(char *, unint64_t, uint64_t))v178)(v83, v152 + v99, v185);
  v101 = dispatch thunk of static Equatable.== infix(_:_:)();
  ((void (*)(char *, uint64_t))v181)(v83, v100);
  if ((v101 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v80 = v183;
    goto LABEL_33;
  }
  if (v166 == 2)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    v29 = v171;
    v39 = v158;
    v23 = v164;
    ((void (*)(char *, uint64_t))v181)(v163, v185);
    goto LABEL_41;
  }
  v102 = v59 + v147 + 2 * v99;
  v103 = 2;
  while (1)
  {
    result = ((uint64_t (*)(char *, unint64_t, uint64_t))v178)(v83, v102, v185);
    v105 = v103 + 1;
    if (__OFADD__(v103, 1))
      break;
    v106 = v185;
    v107 = dispatch thunk of static Equatable.== infix(_:_:)();
    ((void (*)(char *, uint64_t))v181)(v83, v106);
    if ((v107 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v23 = v164;
      v8 = v182;
      v80 = v183;
      v88 = v154;
      v89 = (void (*)(char *, uint64_t))v181;
      goto LABEL_34;
    }
    ++v103;
    v102 += v99;
    v108 = v163;
    if (v105 == v166)
    {
      swift_bridgeObjectRelease();
      v23 = v164;
      v29 = v171;
      v39 = v158;
      v8 = v182;
      ((void (*)(char *, uint64_t))v181)(v108, v185);
      goto LABEL_41;
    }
  }
LABEL_85:
  __break(1u);
  return result;
}

uint64_t specialized PhotosAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  Swift::String v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  NSObject *v53;
  uint64_t v54;
  uint8_t *v55;
  const char *v56;
  _QWORD v58[2];
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;

  v3 = type metadata accessor for Parse();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for USOParse();
  v63 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v6, v3) != *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (one-time initialization token for executor != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = 2;
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1B4BE6000, v24, v25, "[PhotosAffinityScorer] Not a Uso parse, returning .default", v27, 2u);
      MEMORY[0x1B5E44758](v27, -1, -1);

      return v26;
    }

    return 2;
  }
  (*(void (**)(char *, uint64_t))(v4 + 96))(v6, v3);
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v9, v6, v7);
  if (!specialized static AffinityScorerUtils.getTask(_:)())
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1B4BE6000, v29, v30, "[PhotosAffinityScorer] Unable to extract task from uso parse, returning .default", v31, 2u);
      MEMORY[0x1B5E44758](v31, -1, -1);
    }

    goto LABEL_36;
  }
  v60 = a2;
  v10 = UsoTask.verbString.getter();
  v12 = v11;
  v61 = UsoTask.baseEntityAsString.getter();
  v14 = v13;
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v58[1] = v16;
    v20 = v19;
    v21 = swift_slowAlloc();
    v65 = v21;
    *(_DWORD *)v20 = 136315394;
    v59 = v9;
    v58[0] = v7;
    swift_bridgeObjectRetain();
    v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain();
    v22 = v61;
    v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, (unint64_t)v14, &v65);
    v7 = v58[0];
    v9 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v17, v18, "[PhotosAffinityScorer] UsoTask for %s:%s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v21, -1, -1);
    MEMORY[0x1B5E44758](v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v22 = v61;
  }
  v65 = v10;
  v66 = v12;
  swift_bridgeObjectRetain();
  v32._countAndFlagsBits = 58;
  v32._object = (void *)0xE100000000000000;
  String.append(_:)(v32);
  swift_bridgeObjectRetain();
  v33._countAndFlagsBits = v22;
  v33._object = v14;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v35 = v65;
  v34 = v66;
  if (one-time initialization token for supportedIntents != -1)
    swift_once();
  v36 = specialized Set.contains(_:)(v35, v34, static PhotosAffinityScorer.supportedIntents);
  swift_bridgeObjectRelease();
  if ((v36 & 1) != 0)
  {
    v65 = v10;
    v66 = v12;
    swift_bridgeObjectRetain();
    v37._countAndFlagsBits = 58;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    swift_bridgeObjectRetain();
    v38._countAndFlagsBits = v22;
    v38._object = v14;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v40 = v65;
    v39 = v66;
    if (one-time initialization token for sharedIntents != -1)
      swift_once();
    v41 = specialized Set.contains(_:)(v40, v39, static PhotosAffinityScorer.sharedIntents);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v41 & 1) != 0)
    {
      SiriEnvironment.salientEntitiesProvider.getter();
      v42 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
      swift_release();
      v43 = specialized PhotosAffinityScorer.supportedAppIsOnScreen(with:)(v42);
      v45 = v44;
      swift_bridgeObjectRelease();
      if (v45)
      {
        swift_bridgeObjectRetain();
        v46 = Logger.logObject.getter();
        v47 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v46, v47))
        {
          v48 = (uint8_t *)swift_slowAlloc();
          v49 = swift_slowAlloc();
          v65 = v49;
          *(_DWORD *)v48 = 136315138;
          swift_bridgeObjectRetain();
          v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, &v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v26 = 3;
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B4BE6000, v46, v47, "[PhotosAffinityScorer] UsoTask is shared, and %s is on screen, returning .high", v48, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v49, -1, -1);
          MEMORY[0x1B5E44758](v48, -1, -1);

          swift_release();
          (*(void (**)(char *, uint64_t))(v63 + 8))(v9, v7);
        }
        else
        {
          swift_bridgeObjectRelease_n();

          swift_release();
          (*(void (**)(char *, uint64_t))(v63 + 8))(v9, v7);
          return 3;
        }
        return v26;
      }
      v53 = Logger.logObject.getter();
      v54 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v53, (os_log_type_t)v54))
        goto LABEL_35;
      v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v55 = 0;
      v56 = "[PhotosAffinityScorer] UsoTask is shared, but supported app is not on screen, returning .default";
    }
    else
    {
      v53 = Logger.logObject.getter();
      LOBYTE(v54) = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v53, (os_log_type_t)v54))
      {
LABEL_35:

        swift_release();
LABEL_36:
        (*(void (**)(char *, uint64_t))(v63 + 8))(v9, v7);
        return 2;
      }
      v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v55 = 0;
      v56 = "[PhotosAffinityScorer] UsoTask is not shared, returning .default";
    }
    _os_log_impl(&dword_1B4BE6000, v53, (os_log_type_t)v54, v56, v55, 2u);
    MEMORY[0x1B5E44758](v55, -1, -1);
    goto LABEL_35;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50 = Logger.logObject.getter();
  v51 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v52 = 0;
    _os_log_impl(&dword_1B4BE6000, v50, v51, "[PhotosAffinityScorer] UsoTask is not supported, returning .unsupported", v52, 2u);
    MEMORY[0x1B5E44758](v52, -1, -1);
  }

  swift_release();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v9, v7);
  return 0;
}

ValueMetadata *type metadata accessor for PhotosAffinityScorer()
{
  return &type metadata for PhotosAffinityScorer;
}

uint64_t static PlatformErrorActions.renderCompanionBuildUnsupportedForPersonalRequests()()
{
  return static PlatformErrorActions.renderCompanionBuildUnsupportedForPersonalRequests()(MEMORY[0x1E0D9B3B8]);
}

uint64_t static PlatformErrorActions.renderCompanionHardwareTooOldForPersonalRequests()()
{
  return static PlatformErrorActions.renderCompanionBuildUnsupportedForPersonalRequests()(MEMORY[0x1E0D9B3B0]);
}

uint64_t static PlatformErrorActions.renderUserDataNotSynced()()
{
  return static PlatformErrorActions.renderCompanionBuildUnsupportedForPersonalRequests()(MEMORY[0x1E0D9B3A8]);
}

uint64_t static PlatformErrorActions.renderCompanionBuildUnsupportedForPersonalRequests()(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for SiriKitPlatformErrorCase();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *a1, v2);
  SiriKitPlatformErrorCase.makePluginActionToRenderError()();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

ValueMetadata *type metadata accessor for PlatformErrorActions()
{
  return &type metadata for PlatformErrorActions;
}

SiriKitRuntime::PlaybackControlsAffinityScorer __swiftcall PlaybackControlsAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::PlaybackControlsAffinityScorer result;

  v0 = (void *)0x80000001B4EF6B20;
  v1 = 0xD00000000000002FLL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t PlaybackControlsAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

void one-time initialization function for kSupportedIdentifierNamespaces()
{
  static PlaybackControlsAffinityScorer.ParseAttributes.kSupportedIdentifierNamespaces = (uint64_t)&outlined read-only object #0 of one-time initialization function for kSupportedIdentifierNamespaces;
}

{
  static SystemCommandsAffinityScorer.kSupportedIdentifierNamespaces = (uint64_t)&outlined read-only object #0 of one-time initialization function for kSupportedIdentifierNamespaces;
}

uint64_t *PlaybackControlsAffinityScorer.ParseAttributes.kSupportedIdentifierNamespaces.unsafeMutableAddressor()
{
  if (one-time initialization token for kSupportedIdentifierNamespaces != -1)
    swift_once();
  return &static PlaybackControlsAffinityScorer.ParseAttributes.kSupportedIdentifierNamespaces;
}

uint64_t static PlaybackControlsAffinityScorer.ParseAttributes.kSupportedIdentifierNamespaces.getter()
{
  if (one-time initialization token for kSupportedIdentifierNamespaces != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t PlaybackControlsAffinityScorer.ParseAttributes.hasControlsSupportedIdentifier.getter(char a1)
{
  return a1 & 1;
}

uint64_t PlaybackControlsAffinityScorer.ParseAttributes.hasControlsSupportedIdentifier.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*PlaybackControlsAffinityScorer.ParseAttributes.hasControlsSupportedIdentifier.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t PlaybackControlsAffinityScorer.ParseAttributes.hasAirPlaySetting.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

uint64_t PlaybackControlsAffinityScorer.ParseAttributes.hasAirPlaySetting.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*PlaybackControlsAffinityScorer.ParseAttributes.hasAirPlaySetting.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t static PlaybackControlsAffinityScorer.ParseAttributes.from(usoParse:)()
{
  return specialized static PlaybackControlsAffinityScorer.ParseAttributes.from(usoParse:)() & 0x101;
}

SiriKitRuntime::PlaybackControlsAffinityScorer::ParseAttributes __swiftcall PlaybackControlsAffinityScorer.ParseAttributes.init(hasControlsSupportedIdentifier:hasAirPlaySetting:)(Swift::Bool hasControlsSupportedIdentifier, Swift::Bool hasAirPlaySetting)
{
  __int16 v2;

  if (hasAirPlaySetting)
    v2 = 256;
  else
    v2 = 0;
  return (SiriKitRuntime::PlaybackControlsAffinityScorer::ParseAttributes)(v2 & 0xFFFE | hasControlsSupportedIdentifier);
}

ValueMetadata *type metadata accessor for PlaybackControlsAffinityScorer()
{
  return &type metadata for PlaybackControlsAffinityScorer;
}

uint64_t storeEnumTagSinglePayload for PlaybackControlsAffinityScorer.ParseAttributes(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B4E38004 + 4 * byte_1B4EECC65[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1B4E38038 + 4 * asc_1B4EECC60[v4]))();
}

uint64_t sub_1B4E38038(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B4E38040(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1B4E38048);
  return result;
}

uint64_t sub_1B4E38054(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1B4E3805CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B4E38060(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B4E38068(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlaybackControlsAffinityScorer.ParseAttributes()
{
  return &type metadata for PlaybackControlsAffinityScorer.ParseAttributes;
}

_QWORD *PreExecutionActionHandler.__allocating_init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_getObjectType();
  return specialized PreExecutionActionHandler.__allocating_init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(a1, a2, a3, a4, a5);
}

void *PreExecutionActionHandler.serverFallbackWithNoConnectionCatId.unsafeMutableAddressor()
{
  return &static PreExecutionActionHandler.serverFallbackWithNoConnectionCatId;
}

unint64_t static PreExecutionActionHandler.serverFallbackWithNoConnectionCatId.getter()
{
  return 0xD000000000000022;
}

void *PreExecutionActionHandler.serverFallbackWithAirplaneModeCatId.unsafeMutableAddressor()
{
  return &static PreExecutionActionHandler.serverFallbackWithAirplaneModeCatId;
}

unint64_t static PreExecutionActionHandler.serverFallbackWithAirplaneModeCatId.getter()
{
  return 0xD000000000000022;
}

void *PreExecutionActionHandler.announceCallsUnrelatedFollowupCatId.unsafeMutableAddressor()
{
  return &static PreExecutionActionHandler.announceCallsUnrelatedFollowupCatId;
}

unint64_t static PreExecutionActionHandler.announceCallsUnrelatedFollowupCatId.getter()
{
  return 0xD000000000000032;
}

void *PreExecutionActionHandler.activePhoneCallUnrelatedFollowupCatId.unsafeMutableAddressor()
{
  return &static PreExecutionActionHandler.activePhoneCallUnrelatedFollowupCatId;
}

unint64_t static PreExecutionActionHandler.activePhoneCallUnrelatedFollowupCatId.getter()
{
  return 0xD00000000000002BLL;
}

void *PreExecutionActionHandler.activePhoneCallHangUpOnlyCatId.unsafeMutableAddressor()
{
  return &static PreExecutionActionHandler.activePhoneCallHangUpOnlyCatId;
}

unint64_t static PreExecutionActionHandler.activePhoneCallHangUpOnlyCatId.getter()
{
  return 0xD000000000000035;
}

_QWORD *PreExecutionActionHandler.init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  swift_getObjectType();
  return specialized PreExecutionActionHandler.init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(a1, a2, a3, a4, a5, v5);
}

uint64_t PreExecutionActionHandler.getPreExecutionMitigationDecision(rcState:inputOrigin:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(char *);
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t (*v37)(char *);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  uint64_t (*v51)(char *);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v52 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v47 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v47 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v47 - v12;
  v14 = type metadata accessor for TTResponseMessage.MitigationDecision();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v47 - v20;
  v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 472))(v19);
  v22 = *(uint64_t (**)(char *))(v15 + 104);
  v49 = *MEMORY[0x1E0D9C968];
  v23 = v22(v21);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 520))(v23);
  v48 = *MEMORY[0x1E0D9C970];
  v51 = v22;
  v22(v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
  v24 = (uint64_t)&v5[*(int *)(v3 + 48)];
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t)v5, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v11, v24, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  v53 = v15;
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v25((uint64_t)v5, 1, v14) != 1)
  {
    v28 = v47;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v5, v47, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    if (v25(v24, 1, v14) != 1)
    {
      v29 = v53;
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v18, v24, v14);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C978], MEMORY[0x1E0D9C988]);
      v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      v31 = *(void (**)(char *, uint64_t))(v29 + 8);
      v31(v18, v14);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      v31((char *)v28, v14);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      v26 = v52;
      v27 = v50;
      if ((v30 & 1) == 0)
        goto LABEL_17;
      goto LABEL_8;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v28, v14);
LABEL_6:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
    v26 = v52;
    v27 = v50;
    goto LABEL_17;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  if (v25(v24, 1, v14) != 1)
    goto LABEL_6;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  v26 = v52;
  v27 = v50;
LABEL_8:
  if (PreExecutionDecision.rawValue.getter(v27) == 0xD000000000000019 && v32 == 0x80000001B4EF4DD0)
    goto LABEL_16;
  v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
    if (PreExecutionDecision.rawValue.getter(v27) == 0xD000000000000010 && v34 == 0x80000001B4EF4E80)
      goto LABEL_16;
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0)
    {
      if (PreExecutionDecision.rawValue.getter(v27) == 0xD000000000000017 && v36 == 0x80000001B4EF4EA0)
      {
LABEL_16:
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v45 & 1) == 0)
      {
        v46 = v53;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v21, v14);
        ((void (*)(char *, _QWORD, uint64_t))v51)(v21, v48, v14);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v46 + 32))(v26, v21, v14);
      }
    }
  }
LABEL_17:
  if (v27 > 7u)
  {
    v37 = v51;
    v38 = v49;
  }
  else
  {
    v37 = v51;
    v38 = v49;
    if (v27 != 3)
      v38 = v48;
  }
  v39 = *(void (**)(char *, uint64_t))(v53 + 8);
  v39(v21, v14);
  ((void (*)(char *, uint64_t, uint64_t))v37)(v21, v38, v14);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.conversationBridge);
  v41 = Logger.logObject.getter();
  v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v43 = 134217984;
    swift_beginAccess();
    v54 = TTResponseMessage.MitigationDecision.rawValue.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v41, v42, "preExecution Mitigation Decision %ld", v43, 0xCu);
    MEMORY[0x1B5E44758](v43, -1, -1);
  }

  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 16))(v26, v21, v14);
  return ((uint64_t (*)(char *, uint64_t))v39)(v21, v14);
}

uint64_t PreExecutionActionHandler.rejectUnrelatedAnnounceCallsFollowup(requestId:rcId:catId:userId:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return PreExecutionActionHandler.rejectUnrelatedAnnounceCallsFollowup(requestId:rcId:catId:userId:)(a1, a2, a3, a4, a5, a6, a7, "Rejecting this request: %s because it's an unrelated followup to an announced call.", (uint64_t)&unk_1E684D630, (uint64_t)closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:)partial apply);
}

uint64_t PreExecutionActionHandler.rejectRequestSinceUserIsOnCall(requestId:rcId:userId:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, _QWORD, uint64_t (*)(char), _QWORD *);
  uint64_t v25;
  uint64_t v27;

  v6 = v5;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v25 = a4;
    v15 = a5;
    v16 = swift_slowAlloc();
    v27 = v16;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v12, v13, "Rejecting this request: %s since user is on a phone call", v14, 0xCu);
    swift_arrayDestroy();
    v17 = v16;
    a5 = v15;
    a4 = v25;
    MEMORY[0x1B5E44758](v17, -1, -1);
    MEMORY[0x1B5E44758](v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v18 = 0xD00000000000002BLL;
  if ((AFSupportsSiriInCall() & 1) != 0 || (AFSupportsCallHangUp() & 1) == 0)
  {
    v19 = "ActivePhoneCall#UnsupportedDuringActiveCall";
  }
  else
  {
    v18 = 0xD000000000000035;
    v19 = "ActivePhoneCall#UnsupportedDuringActiveCallHangUpOnly";
  }
  v20 = (unint64_t)(v19 - 32) | 0x8000000000000000;
  v21 = *(_QWORD *)(v6 + 48);
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v6;
  v22[3] = a1;
  v22[4] = a2;
  v23 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, _QWORD, uint64_t (*)(char), _QWORD *))(*(_QWORD *)v21 + 104);
  swift_bridgeObjectRetain();
  swift_retain();
  v23(a1, a2, a3, a4, v18, v20, a5, 0, partial apply for closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:), v22);
  swift_bridgeObjectRelease();
  return swift_release();
}

void PreExecutionActionHandler.mitigateDueToEmptyASR(requestId:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v15 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Mitigating this request: %s due to empty ASR", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  PreExecutionActionHandler.closeAssistantAndCancelRequest(requestId:closeAssistantReason:)(a1, a2, v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v15 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v11, v12, "RequestID: %s has been mitigated", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v14, -1, -1);
    MEMORY[0x1B5E44758](v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void PreExecutionActionHandler.mitigateRequest(requestId:dismissUI:logToStream:mitigatedByURS:)(uint64_t a1, unint64_t a2, char a3, char a4, char a5)
{
  _QWORD **v5;
  _QWORD **v6;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  _QWORD **v27;
  uint64_t v29;

  v6 = v5;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v29 = v15;
    *(_DWORD *)v14 = 136315394;
    v27 = v6;
    swift_bridgeObjectRetain();
    v16 = a1;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2080;
    if ((a5 & 1) != 0)
      v17 = 7562585;
    else
      v17 = 28494;
    if ((a5 & 1) != 0)
      v18 = 0xE300000000000000;
    else
      v18 = 0xE200000000000000;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v6 = v27;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v12, v13, "Mitigating this request: %s. Requested to mitigate by Speech: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v15, -1, -1);
    MEMORY[0x1B5E44758](v14, -1, -1);

  }
  else
  {
    v16 = a1;

    swift_bridgeObjectRelease_n();
  }
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v19 = type metadata accessor for InsightRequestSummaryLogger();
  v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.insightRequestSummaryLogger);
  swift_bridgeObjectRetain();
  specialized InsightRequestSummaryLogger.emitDebug(_:)(v20, v16, a2, a3 & 1, a5 & 1);
  swift_bridgeObjectRelease();
  if ((a3 & 1) != 0)
  {
    if ((a4 & 1) != 0)
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*v6[3] + 176))(v16, a2, 2);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    PreExecutionActionHandler.closeAssistantAndCancelRequest(requestId:closeAssistantReason:)(v16, a2, v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v29 = v26;
      *(_DWORD *)v25 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, a2, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v23, v24, "RequestID: %s has been mitigated", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v26, -1, -1);
      MEMORY[0x1B5E44758](v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    ((void (*)(uint64_t, unint64_t))(*v6)[28])(v16, a2);
  }
}

void PreExecutionActionHandler.closeAssistantAndCancelRequest(requestId:closeAssistantReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v5 = v4;
  v25 = a4;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88518]), sel_init);
  UUID.init()();
  v14 = UUID.uuidString.getter();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v17 = (void *)MEMORY[0x1B5E432E8](v14, v16);
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel_setAceId_, v17);

  v18 = v13;
  v19 = (void *)MEMORY[0x1B5E432E8](a1, a2);
  objc_msgSend(v18, sel_setRefId_, v19);

  v20 = (void *)MEMORY[0x1B5E432E8](a3, v25);
  objc_msgSend(v18, sel_setReason_, v20);

  v21 = *(void **)(v5 + 16);
  aBlock[4] = closure #1 in PreExecutionActionHandler.closeAssistantAndCancelRequest(requestId:closeAssistantReason:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_9_1;
  v22 = _Block_copy(aBlock);
  v23 = v18;
  objc_msgSend(v21, sel_handleCommand_completion_, v23, v22);
  _Block_release(v22);

  PreExecutionActionHandler.cancelRequest(requestId:)(a1, a2);
}

void closure #1 in PreExecutionActionHandler.closeAssistantAndCancelRequest(requestId:closeAssistantReason:)(uint64_t a1, void *a2)
{
  closure #1 in PreExecutionActionHandler.closeAssistantAndCancelRequest(requestId:closeAssistantReason:)(a1, a2, "Posted CloseAssistant, error:%s");
}

uint64_t PreExecutionActionHandler.rejectOfflineServerFallback(requestId:rcId:catId:userId:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return PreExecutionActionHandler.rejectUnrelatedAnnounceCallsFollowup(requestId:rcId:catId:userId:)(a1, a2, a3, a4, a5, a6, a7, "Rejecting this request: %s because it's an offline server fallback", (uint64_t)&unk_1E684D658, (uint64_t)closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:)partial apply);
}

uint64_t PreExecutionActionHandler.rejectUnrelatedAnnounceCallsFollowup(requestId:rcId:catId:userId:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const char *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  _QWORD *v26;
  void (*v27)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v33;

  v12 = v10;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v30 = a6;
    v21 = (uint8_t *)swift_slowAlloc();
    v29 = a7;
    v22 = swift_slowAlloc();
    v33 = v22;
    *(_DWORD *)v21 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v19, v20, a8, v21, 0xCu);
    swift_arrayDestroy();
    v23 = v22;
    a7 = v29;
    MEMORY[0x1B5E44758](v23, -1, -1);
    v24 = v21;
    a6 = v30;
    MEMORY[0x1B5E44758](v24, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v25 = *(_QWORD *)(v12 + 48);
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v12;
  v26[3] = a1;
  v26[4] = a2;
  v27 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v25 + 104);
  swift_bridgeObjectRetain();
  swift_retain();
  v27(a1, a2, a3, a4, a5, a6, a7, 1, a10, v26);
  return swift_release();
}

uint64_t closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v12 != -1)
    swift_once();
  swift_beginAccess();
  v13 = static MessageBusActor.shared;
  v14 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v15 + 24) = v14;
  *(_BYTE *)(v15 + 32) = a1 & 1;
  *(_QWORD *)(v15 + 40) = a2;
  *(_QWORD *)(v15 + 48) = a3;
  *(_QWORD *)(v15 + 56) = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:), v15);
  return swift_release();
}

uint64_t closure #1 in closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  *(_QWORD *)(v7 + 48) = a6;
  *(_QWORD *)(v7 + 56) = a7;
  *(_QWORD *)(v7 + 40) = a5;
  *(_BYTE *)(v7 + 64) = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = 216;
  if (*(_BYTE *)(v0 + 64))
    v1 = 224;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v0 + 40) + v1))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall PreExecutionActionHandler.failRequest(requestId:)(Swift::String requestId)
{
  PreExecutionActionHandler.failRequest(requestId:)(requestId._countAndFlagsBits, (uint64_t)requestId._object, "Sending CommandFailed to fail this request.", (Class *)0x1E0D87FE8, (uint64_t)closure #1 in PreExecutionActionHandler.failRequest(requestId:), (uint64_t)&block_descriptor_16);
}

void closure #1 in PreExecutionActionHandler.failRequest(requestId:)(uint64_t a1, uint64_t a2)
{
  closure #1 in PreExecutionActionHandler.failRequest(requestId:)(a1, a2, "Sent CommandFailed to fail this request");
}

Swift::Void __swiftcall PreExecutionActionHandler.completeRequest(requestId:)(Swift::String requestId)
{
  PreExecutionActionHandler.failRequest(requestId:)(requestId._countAndFlagsBits, (uint64_t)requestId._object, "Sending RequestCompleted to end the request", (Class *)0x1E0D883A0, (uint64_t)closure #1 in PreExecutionActionHandler.completeRequest(requestId:), (uint64_t)&block_descriptor_3_1);
}

void PreExecutionActionHandler.failRequest(requestId:)(uint64_t a1, uint64_t a2, const char *a3, Class *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v29 = a5;
  v30 = a6;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1B4BE6000, v15, v16, a3, v17, 2u);
    MEMORY[0x1B5E44758](v17, -1, -1);
  }

  v18 = objc_msgSend(objc_allocWithZone(*a4), sel_init);
  UUID.init()();
  v19 = UUID.uuidString.getter();
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v22 = (void *)MEMORY[0x1B5E432E8](v19, v21);
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_setAceId_, v22);

  v23 = v18;
  v24 = (void *)MEMORY[0x1B5E432E8](a1, a2);
  objc_msgSend(v23, sel_setRefId_, v24);

  v25 = *(void **)(v28[1] + 16);
  aBlock[4] = v29;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = v30;
  v26 = _Block_copy(aBlock);
  v27 = v23;
  objc_msgSend(v25, sel_handleCommand_completion_, v27, v26);
  _Block_release(v26);

}

void closure #1 in PreExecutionActionHandler.completeRequest(requestId:)(uint64_t a1, uint64_t a2)
{
  closure #1 in PreExecutionActionHandler.failRequest(requestId:)(a1, a2, "Sent RequestCompleted to end the request");
}

void closure #1 in PreExecutionActionHandler.failRequest(requestId:)(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v5, a3, v6, 2u);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }

}

void PreExecutionActionHandler.cancelRequest(requestId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D87FD0]), sel_init);
  UUID.init()();
  v11 = UUID.uuidString.getter();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v14 = (void *)MEMORY[0x1B5E432E8](v11, v13);
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setAceId_, v14);

  v15 = (void *)MEMORY[0x1B5E432E8](a1, a2);
  objc_msgSend(v10, sel_setRefId_, v15);

  v16 = *(void **)(v3 + 16);
  aBlock[4] = closure #1 in PreExecutionActionHandler.cancelRequest(requestId:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_6_1;
  v17 = _Block_copy(aBlock);
  v18 = v10;
  objc_msgSend(v16, sel_handleCommand_completion_, v18, v17);
  _Block_release(v17);

}

void closure #1 in PreExecutionActionHandler.cancelRequest(requestId:)(uint64_t a1, void *a2)
{
  closure #1 in PreExecutionActionHandler.closeAssistantAndCancelRequest(requestId:closeAssistantReason:)(a1, a2, "Posted CancelRequest, error:%s");
}

void closure #1 in PreExecutionActionHandler.closeAssistantAndCancelRequest(requestId:closeAssistantReason:)(uint64_t a1, void *a2, const char *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *oslog;
  uint64_t v14;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
  v6 = a2;
  v7 = a2;
  oslog = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v14 = v10;
    *(_DWORD *)v9 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    v11 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, oslog, v8, a3, v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);

  }
  else
  {

  }
}

uint64_t PreExecutionActionHandler.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  return v0;
}

uint64_t PreExecutionActionHandler.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

_QWORD *specialized PreExecutionActionHandler.__allocating_init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;

  type metadata accessor for PreExecutionActionHandler();
  v10 = (_QWORD *)swift_allocObject();
  return specialized PreExecutionActionHandler.init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(a1, a2, a3, a4, a5, v10);
}

_QWORD *specialized PreExecutionActionHandler.init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  a6[2] = a1;
  a6[3] = a2;
  a6[4] = a3;
  a6[5] = a4;
  a6[6] = a5;
  type metadata accessor for MitigationDismissalHelper();
  swift_allocObject();
  a6[7] = MitigationDismissalHelper.init()();
  return a6;
}

uint64_t type metadata accessor for PreExecutionActionHandler()
{
  return objc_opt_self();
}

uint64_t method lookup function for PreExecutionActionHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PreExecutionActionHandler.__allocating_init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of PreExecutionActionHandler.getPreExecutionMitigationDecision(rcState:inputOrigin:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PreExecutionActionHandler.actOnPreExecutionDecision(rcState:requestId:inputOrigin:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PreExecutionActionHandler.failRequest(requestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PreExecutionActionHandler.completeRequest(requestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t partial apply for closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:)(char a1)
{
  uint64_t *v1;

  return closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B4E3A1D8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 56);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in PreExecutionActionHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:)(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t objectdestroyTm_6()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PreExecutionDecision(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = PreExecutionDecision.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == PreExecutionDecision.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PreExecutionDecision()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  PreExecutionDecision.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PreExecutionDecision()
{
  unsigned __int8 *v0;

  PreExecutionDecision.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PreExecutionDecision()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  PreExecutionDecision.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PreExecutionDecision@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized PreExecutionDecision.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PreExecutionDecision@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = PreExecutionDecision.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t specialized PreExecutionDecision.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PreExecutionDecision.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC)
    return 12;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type PreExecutionDecision and conformance PreExecutionDecision()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreExecutionDecision and conformance PreExecutionDecision;
  if (!lazy protocol witness table cache variable for type PreExecutionDecision and conformance PreExecutionDecision)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for PreExecutionDecision, &type metadata for PreExecutionDecision);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExecutionDecision and conformance PreExecutionDecision);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PreExecutionDecision(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1B4E3A594 + 4 * byte_1B4EECD51[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1B4E3A5C8 + 4 * byte_1B4EECD4C[v4]))();
}

uint64_t sub_1B4E3A5C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E3A5D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4E3A5D8);
  return result;
}

uint64_t sub_1B4E3A5E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4E3A5ECLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1B4E3A5F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E3A5F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreExecutionDecision()
{
  return &type metadata for PreExecutionDecision;
}

uint64_t PreExecutionDecisionMaker.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PreExecutionDecisionMaker.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t PreExecutionDecisionMaker.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PreExecutionDecisionMaker.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PreExecutionDecisionMaker()
{
  return objc_opt_self();
}

uint64_t method lookup function for PreExecutionDecisionMaker()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PreExecutionDecisionMaker.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of PreExecutionDecisionMaker.evaluate(rules:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t PreExecutionDialogHandler.__allocating_init(executionOutputSubmitter:preferences:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t PreExecutionDialogHandler.init(executionOutputSubmitter:preferences:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

void PreExecutionDialogHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, void (*a9)(void), uint64_t a10)
{
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t ObjCClassFromMetadata;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  void *v27;
  Class v28;
  uint64_t v29;
  id v30;
  Class isa;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void (*v38)(void);
  _QWORD aBlock[6];

  v37 = a8;
  v35 = a7;
  v36 = a1;
  v38 = a9;
  v14 = type metadata accessor for UserID();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = PreExecutionDialogHandler.createCATContext()();
  if (v18)
  {
    v30 = v18;
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v29 = a10;
    v34 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    v33 = (id)objc_opt_self();
    v32 = MEMORY[0x1B5E432E8](a5, a6);
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v35, v14);
    v20 = (*(unsigned __int8 *)(v15 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    v21 = swift_allocObject();
    v22 = v29;
    *(_QWORD *)(v21 + 16) = v38;
    *(_QWORD *)(v21 + 24) = v22;
    *(_QWORD *)(v21 + 32) = a5;
    *(_QWORD *)(v21 + 40) = a6;
    v23 = v36;
    *(_QWORD *)(v21 + 48) = v10;
    *(_QWORD *)(v21 + 56) = v23;
    *(_QWORD *)(v21 + 64) = a2;
    *(_BYTE *)(v21 + 72) = v37 & 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v21 + v20, v17, v14);
    aBlock[4] = partial apply for closure #1 in PreExecutionDialogHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:completion:);
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed CATResult, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_17;
    v24 = _Block_copy(aBlock);
    v25 = v30;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    v26 = v34;
    v28 = isa;
    v27 = (void *)v32;
    objc_msgSend(v33, sel_execute_catId_parameters_globals_completion_, v34, v32, isa, v25, v24);
    _Block_release(v24);

  }
  else
  {
    v38();
  }
}

void closure #1 in PreExecutionDialogHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:completion:)(uint64_t a1, id a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  id v22;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  void *v34;
  void (*v35)(_QWORD);
  uint64_t v36;
  uint64_t v38;

  if (a2)
  {
    v14 = a2;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    v16 = a2;
    v17 = a2;
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v20 = 138412290;
      v22 = a2;
      v38 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v21 = v38;

      _os_log_impl(&dword_1B4BE6000, v18, v19, "CAT.execute failed: %@", v20, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v21, -1, -1);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }
    else
    {

    }
    a3(0);

  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v35 = a3;
      v30 = (uint8_t *)swift_slowAlloc();
      v36 = a4;
      v31 = swift_slowAlloc();
      v38 = v31;
      *(_DWORD *)v30 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v28, v29, "Submitting executionOutput for catId %s", v30, 0xCu);
      swift_arrayDestroy();
      v32 = v31;
      a4 = v36;
      MEMORY[0x1B5E44758](v32, -1, -1);
      v33 = v30;
      a3 = v35;
      MEMORY[0x1B5E44758](v33, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v34 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a7 + 128))(a1, a8, a9, a10 & 1);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, void (*)(_QWORD), uint64_t))(*(_QWORD *)a7 + 112))(v34, a8, a9, a11, a3, a4);

  }
}

uint64_t PreExecutionDialogHandler.submitAddViews(addViews:requestId:userId:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(id, uint64_t, uint64_t, _QWORD, _QWORD, _OWORD *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t (*)(), uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;

  v37 = a5;
  v38 = a6;
  v32 = a2;
  v33 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8);
  v35 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UserID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for RequestType();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
  v34 = a3;
  swift_bridgeObjectRetain();
  v19 = a1;
  v30 = a3;
  v20 = v32;
  v21 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(a1, 0, 0, 0, 0, 0, 0, 0, 0, 0, v32, v30);

  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x1E0D9E8A0], v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v33, v10);
  type metadata accessor for ConversationContextUpdateMetadata();
  v22 = swift_allocObject();
  *(_BYTE *)(v22 + 16) = 1;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v22 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v17, v14);
  *(_QWORD *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v22 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v13, v10);
  *(_BYTE *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = 0;
  v23 = *(_QWORD *)(v36 + 16);
  v24 = type metadata accessor for UUID();
  memset(v39, 0, sizeof(v39));
  v40 = 0;
  v25 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v35, 1, 1, v24);
  v26 = swift_allocObject();
  v27 = v38;
  *(_QWORD *)(v26 + 16) = v37;
  *(_QWORD *)(v26 + 24) = v27;
  v28 = *(void (**)(id, uint64_t, uint64_t, _QWORD, _QWORD, _OWORD *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t (*)(), uint64_t))(*(_QWORD *)v23 + 264);
  swift_retain();
  swift_retain();
  v28(v21, v20, v34, 0, 0, v39, 0, v22, 0, 0, v25, 0, 0, partial apply for closure #1 in PreExecutionDialogHandler.submitAddViews(addViews:requestId:userId:completion:), v26);

  swift_release_n();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v25, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v39, &demangling cache variable for type metadata for ContextUpdating?);
}

id PreExecutionDialogHandler.createCATContext()()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  const char *v21;
  uint64_t v22;

  v1 = *(void **)(v0 + 24);
  v2 = objc_msgSend(v1, sel_languageCode);
  if (!v2)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19))
      goto LABEL_14;
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    v21 = "Unable to retrieve input language code";
    goto LABEL_13;
  }
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7 = objc_msgSend(v1, sel_outputVoice);
  if (!v7
    || (v8 = v7, v9 = objc_msgSend(v7, sel_languageCode), v8, !v9))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19))
      goto LABEL_14;
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    v21 = "Unable to retrieve outputVoice language code";
LABEL_13:
    _os_log_impl(&dword_1B4BE6000, v18, v19, v21, v20, 2u);
    MEMORY[0x1B5E44758](v20, -1, -1);
LABEL_14:

    return 0;
  }
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  v13 = objc_allocWithZone(MEMORY[0x1E0D1D290]);
  v14 = (void *)MEMORY[0x1B5E432E8](v4, v6);
  swift_bridgeObjectRelease();
  v15 = (void *)MEMORY[0x1B5E432E8](v10, v12);
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v13, sel_initWithInputLocale_outputVoiceLocale_, v14, v15);

  return v16;
}

uint64_t sub_1B4E3B27C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UserID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in PreExecutionDialogHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:completion:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UserID() - 8) + 80);
  closure #1 in PreExecutionDialogHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:completion:)(a1, a2, *(void (**)(_QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_BYTE *)(v2 + 72), v2 + ((v5 + 73) & ~v5));
}

id PreExecutionDialogHandler.generateAddViewsForCATResult(result:requestId:shouldSpeak:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  Class isa;
  id v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;
  void *v49;
  uint64_t v50;
  id v51;
  Class v52;

  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88508]), sel_init);
  v9 = objc_allocWithZone(MEMORY[0x1E0CB3A28]);
  v10 = v8;
  v11 = objc_msgSend(v9, sel_init);
  v12 = objc_msgSend(v11, sel_UUIDString);

  if (!v12)
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = (id)MEMORY[0x1B5E432E8](v13);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v10, sel_setAceId_, v12);

  v14 = v10;
  v15 = (void *)MEMORY[0x1B5E432E8](a2, a3);
  objc_msgSend(v14, sel_setRefId_, v15);

  v16 = objc_msgSend(a1, sel_print);
  v17 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v17[2])
  {
    v18 = v17[4];
    v19 = v17[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v20 = (void *)MEMORY[0x1B5E432E8](v18, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  objc_msgSend(v14, sel_setText_, v20);

  v21 = objc_msgSend(a1, sel_dialogId);
  v22 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v22[2])
  {
    v23 = v22[4];
    v24 = v22[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v25 = (void *)MEMORY[0x1B5E432E8](v23, v24);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = 0;
  }
  objc_msgSend(v14, sel_setDialogIdentifier_, v25);

  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v26 = v14;
  isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
  objc_msgSend(v26, sel_setListenAfterSpeaking_, isa);

  v28 = objc_msgSend(a1, sel_meta);
  v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(_QWORD *)(v29 + 16)
    && (v30 = specialized __RawDictionaryStorage.find<A>(_:)(0x79726F6765746163, 0xE800000000000000), (v31 & 1) != 0))
  {
    v32 = (uint64_t *)(*(_QWORD *)(v29 + 56) + 16 * v30);
    v33 = *v32;
    v34 = v32[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v35 = (void *)MEMORY[0x1B5E432E8](v33, v34);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v35 = 0;
  }
  objc_msgSend(v26, sel_setDialogCategory_, v35);

  if ((a4 & 1) != 0)
  {
    v36 = v26;
    v37 = objc_msgSend(a1, sel_print);
    v38 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v38[2])
    {
      v39 = v38[4];
      v40 = v38[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v41 = (void *)MEMORY[0x1B5E432E8](v39, v40);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v41 = 0;
    }
    objc_msgSend(v36, sel_setSpeakableText_, v41);

  }
  v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D884F8]), sel_init);
  v43 = objc_allocWithZone(MEMORY[0x1E0CB3A28]);
  v44 = v42;
  v45 = objc_msgSend(v43, sel_init);
  v46 = objc_msgSend(v45, sel_UUIDString);

  if (!v46)
  {
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v46 = (id)MEMORY[0x1B5E432E8](v47);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v44, sel_setAceId_, v46);

  v48 = v44;
  v49 = (void *)MEMORY[0x1B5E432E8](a2, a3);
  objc_msgSend(v48, sel_setRefId_, v49);

  objc_msgSend(v48, sel_setDialogPhase_, *MEMORY[0x1E0D89220]);
  objc_msgSend(v48, sel_setDisplayTarget_, *MEMORY[0x1E0D89258]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_1B4EEBC90;
  *(_QWORD *)(v50 + 32) = v26;
  specialized Array._endMutation()();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  v51 = v26;
  v52 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v48, sel_setViews_, v52);

  return v48;
}

uint64_t PreExecutionDialogHandler.deinit()
{
  uint64_t v0;

  swift_release();

  return v0;
}

uint64_t PreExecutionDialogHandler.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1B4E3B944()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PreExecutionDialogHandler.submitAddViews(addViews:requestId:userId:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t type metadata accessor for PreExecutionDialogHandler()
{
  return objc_opt_self();
}

uint64_t method lookup function for PreExecutionDialogHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PreExecutionDialogHandler.__allocating_init(executionOutputSubmitter:preferences:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PreExecutionDialogHandler.submitDialog(requestId:rcId:catId:userId:shouldSpeak:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PreExecutionDialogHandler.submitAddViews(addViews:requestId:userId:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PreExecutionDialogHandler.generateAddViewsForCATResult(result:requestId:shouldSpeak:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PreExecutionRule.ruleType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PreExecutionRule.evaluate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t PreExecutionRuleType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4E3BA3C + 4 * byte_1B4EECEC0[a1]))(0xD000000000000016, 0x80000001B4EF4EF0);
}

uint64_t sub_1B4E3BA3C()
{
  uint64_t v0;

  return v0 - 1;
}

uint64_t sub_1B4E3BA9C()
{
  return 0x5253417974706D65;
}

uint64_t sub_1B4E3BABC()
{
  return 1701736302;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PreExecutionRuleType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = PreExecutionRuleType.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == PreExecutionRuleType.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PreExecutionRuleType()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  PreExecutionRuleType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PreExecutionRuleType()
{
  unsigned __int8 *v0;

  PreExecutionRuleType.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PreExecutionRuleType()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  PreExecutionRuleType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PreExecutionRuleType@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized PreExecutionRuleType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PreExecutionRuleType@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = PreExecutionRuleType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t specialized PreExecutionRuleType.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PreExecutionRuleType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type PreExecutionRuleType and conformance PreExecutionRuleType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreExecutionRuleType and conformance PreExecutionRuleType;
  if (!lazy protocol witness table cache variable for type PreExecutionRuleType and conformance PreExecutionRuleType)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for PreExecutionRuleType, &type metadata for PreExecutionRuleType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreExecutionRuleType and conformance PreExecutionRuleType);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PreExecutionRuleType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B4E3BD80 + 4 * byte_1B4EECECD[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B4E3BDB4 + 4 * byte_1B4EECEC8[v4]))();
}

uint64_t sub_1B4E3BDB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E3BDBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4E3BDC4);
  return result;
}

uint64_t sub_1B4E3BDD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4E3BDD8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B4E3BDDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E3BDE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreExecutionRuleType()
{
  return &type metadata for PreExecutionRuleType;
}

uint64_t outlined destroy of Parse?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static ReactiveUIEventActor.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

Swift::Void __swiftcall ReactiveUIEventActor.run()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + 128) == 1)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    v16 = Logger.logObject.getter();
    v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1B4BE6000, v16, v6, "[ReactiveEventActor] already running.", v7, 2u);
      MEMORY[0x1B5E44758](v7, -1, -1);
    }

  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1B4BE6000, v9, v10, "[ReactiveEventActor] Starting EncoreEvent Loop.", v11, 2u);
      MEMORY[0x1B5E44758](v11, -1, -1);
    }

    v12 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
    v13 = lazy protocol witness table accessor for type ReactiveUIEventActor and conformance ReactiveUIEventActor();
    v14 = (_QWORD *)swift_allocObject();
    v14[2] = v1;
    v14[3] = v13;
    v14[4] = v1;
    swift_retain_n();
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in ReactiveUIEventActor.run(), (uint64_t)v14);
    swift_release();
  }
}

uint64_t closure #1 in ReactiveUIEventActor.run()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[3] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEvent>);
  v4[4] = v5;
  v4[5] = *(_QWORD *)(v5 - 8);
  v4[6] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEvent>.Iterator);
  v4[7] = v6;
  v4[8] = *(_QWORD *)(v6 - 8);
  v4[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in ReactiveUIEventActor.run()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[5];
  v1 = v0[6];
  v3 = v0[4];
  type metadata accessor for EncoreService();
  v4 = (void *)dispatch thunk of static EncoreService.service.getter();
  dispatch thunk of AsyncService.events.getter();

  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[10] = lazy protocol witness table accessor for type ReactiveUIEventActor and conformance ReactiveUIEventActor();
  v5 = (_QWORD *)swift_task_alloc();
  v0[11] = v5;
  *v5 = v0;
  v5[1] = closure #1 in ReactiveUIEventActor.run();
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  _QWORD *v7;
  void (*v9)(id);
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t *v18;
  _QWORD *v19;
  id v20;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    v3 = v1;
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc();
      v7 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v6 = 138412290;
      *(_QWORD *)(v6 + 4) = v3;
      *v7 = v1;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "[ReactiveEventActor] Got Event %@", (uint8_t *)v6, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v7, -1, -1);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }
    else
    {

    }
    v9 = *(void (**)(id))(*(_QWORD *)(v0 + 24) + 112);
    if (v9)
    {
      v10 = v3;
      outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?((uint64_t)v9);
      v11 = Logger.logObject.getter();
      v12 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v20 = v3;
        v13 = swift_slowAlloc();
        v14 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v13 = 138412290;
        *(_QWORD *)(v13 + 4) = v10;
        *v14 = v1;
        _os_log_impl(&dword_1B4BE6000, v11, v12, "[ReactiveEventActor] Dispatching  Event %@", (uint8_t *)v13, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v14, -1, -1);
        v15 = v13;
        v3 = v20;
        MEMORY[0x1B5E44758](v15, -1, -1);
      }
      else
      {

      }
      v9(v10);
      _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v9);
    }
    else
    {
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, (os_log_type_t)v17))
      {
        v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v18 = 0;
        _os_log_impl(&dword_1B4BE6000, v16, (os_log_type_t)v17, "[ReactiveEventActor] No registered handler", v18, 2u);
        MEMORY[0x1B5E44758](v18, -1, -1);
      }

    }
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v19;
    *v19 = v0;
    v19[1] = closure #1 in ReactiveUIEventActor.run();
    return AsyncStream.Iterator.next(isolation:)();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t ReactiveUIEventActor.setHandler(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;

  v3 = v2;
  if (one-time initialization token for executor != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1B4BE6000, v7, v8, "[ReactiveEventActor] setting new handler", v9, 2u);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }

  v10 = *(_QWORD *)(v3 + 112);
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = a2;
  swift_retain();
  return _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v10);
}

uint64_t ReactiveUIEventActor.deinit()
{
  uint64_t v0;

  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy();
  return v0;
}

uint64_t ReactiveUIEventActor.__deallocating_deinit()
{
  uint64_t v0;

  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t ReactiveUIEventActor.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for static GlobalActor.shared.getter in conformance ReactiveUIEventActor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t protocol witness for static GlobalActor.sharedUnownedExecutor.getter in conformance ReactiveUIEventActor()
{
  type metadata accessor for ReactiveUIEventActor();
  return static GlobalActor.sharedUnownedExecutor.getter();
}

unint64_t lazy protocol witness table accessor for type ReactiveUIEventActor and conformance ReactiveUIEventActor()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ReactiveUIEventActor and conformance ReactiveUIEventActor;
  if (!lazy protocol witness table cache variable for type ReactiveUIEventActor and conformance ReactiveUIEventActor)
  {
    v1 = type metadata accessor for ReactiveUIEventActor();
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ReactiveUIEventActor, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReactiveUIEventActor and conformance ReactiveUIEventActor);
  }
  return result;
}

uint64_t type metadata accessor for ReactiveUIEventActor()
{
  return objc_opt_self();
}

uint64_t sub_1B4E3C840()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ReactiveUIEventActor.run()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ReactiveUIEventActor.run()(a1, v4, v5, v6);
}

uint64_t method lookup function for ReactiveUIEventActor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ReactiveUIEventActor.run()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ReactiveUIEventActor.setHandler(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

SiriKitRuntime::ReaderAffinityScorer __swiftcall ReaderAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::ReaderAffinityScorer result;

  v0 = (void *)0x80000001B4EF6CA0;
  v1 = 0xD00000000000001FLL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t *ReaderAffinityScorer.kAppBundleIdMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kAppBundleIdMatches != -1)
    swift_once();
  return &static ReaderAffinityScorer.kAppBundleIdMatches;
}

uint64_t static ReaderAffinityScorer.kAppBundleIdMatches.getter()
{
  if (one-time initialization token for kAppBundleIdMatches != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t ReaderAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized ReaderAffinityScorer.supportedAppIsOnScreen(with:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(char *, uint64_t);
  unint64_t v27;
  unint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  BOOL v43;
  unint64_t v44;
  _QWORD *v45;
  BOOL v46;
  char *v47;
  char *v48;
  unint64_t i;
  unint64_t v50;
  _QWORD *v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::Int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  BOOL v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  BOOL v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t j;
  unint64_t v74;
  _QWORD *v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v97 = (char *)v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v79 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v79 - v9;
  v11 = type metadata accessor for RREntity();
  v89 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v88 = (char *)v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for RRCandidate();
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = *(_QWORD *)(a1 + 16);
  if (!v87)
    return 0;
  v91 = v16;
  v17 = v14;
  v86 = type metadata accessor for UsoEntity_common_App();
  v85 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v84 = *(_QWORD *)(v17 + 72);
  v82 = v17;
  v83 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v79[1] = a1;
  swift_bridgeObjectRetain();
  v18 = 0;
  v94 = v3;
  v100 = v8;
  v80 = v11;
  v81 = v13;
  while (1)
  {
    v92 = v18;
    v19 = v91;
    v83(v91, v85 + v84 * v18, v13);
    v20 = v88;
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v20, v11);
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    v21 = v101;
    if (v101)
      break;
    (*(void (**)(char *, uint64_t))(v82 + 8))(v19, v13);
LABEL_4:
    v18 = v92 + 1;
    if (v92 + 1 == v87)
    {
      v78 = 0;
LABEL_67:
      swift_bridgeObjectRelease();
      return v78;
    }
  }
  swift_retain();
  v22 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v90 = v21;
  result = swift_release();
  v24 = MEMORY[0x1E0DEE9D8];
  v102 = MEMORY[0x1E0DEE9D8];
  v96 = *(_QWORD *)(v22 + 16);
  if (!v96)
  {
LABEL_63:
    swift_bridgeObjectRelease();
    v77 = *(_QWORD *)(v24 + 16);
    swift_release();
    swift_release();
    v13 = v81;
    (*(void (**)(char *, uint64_t))(v82 + 8))(v91, v81);
    if (v77)
    {
      v78 = 1;
      goto LABEL_67;
    }
    goto LABEL_4;
  }
  v25 = 0;
  v95 = v22;
  while (v25 < *(_QWORD *)(v22 + 16))
  {
    v27 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v98 = *(_QWORD *)(v3 + 72);
    v99 = v27;
    v28 = v22 + v27 + v98 * v25;
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v30 = v2;
    v29(v10, v28, v2);
    if (one-time initialization token for kAppBundleIdMatches != -1)
      swift_once();
    v31 = static ReaderAffinityScorer.kAppBundleIdMatches;
    v32 = v10;
    v33 = UsoIdentifier.appBundleId.getter();
    v35 = v34;
    if (*(_QWORD *)(v31 + 16))
    {
      v36 = v33;
      Hasher.init(_seed:)();
      String.hash(into:)();
      v37 = Hasher._finalize()();
      v38 = -1 << *(_BYTE *)(v31 + 32);
      v39 = v37 & ~v38;
      v40 = v31 + 56;
      if (((*(_QWORD *)(v31 + 56 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) != 0)
      {
        v41 = *(_QWORD *)(v31 + 48);
        v42 = (_QWORD *)(v41 + 16 * v39);
        v43 = *v42 == v36 && v42[1] == v35;
        if (v43 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_26:
          swift_bridgeObjectRelease();
          v47 = v100;
          v10 = v32;
          v48 = v32;
          v2 = v30;
          v29(v100, (unint64_t)v48, v30);
          v3 = v94;
LABEL_49:
          v22 = v95;
          (*(void (**)(char *, uint64_t))(v3 + 8))(v47, v2);
          v69 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
          v69(v97, v10, v2);
          v70 = v102;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v70 + 16) + 1, 1);
            v70 = v102;
          }
          v72 = *(_QWORD *)(v70 + 16);
          v71 = *(_QWORD *)(v70 + 24);
          if (v72 >= v71 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1);
            v70 = v102;
          }
          *(_QWORD *)(v70 + 16) = v72 + 1;
          result = ((uint64_t (*)(unint64_t, char *, uint64_t))v69)(v70 + v99 + v72 * v98, v97, v2);
          v102 = v70;
          goto LABEL_9;
        }
        v93 = ~v38;
        v44 = (v39 + 1) & ~v38;
        if (((*(_QWORD *)(v40 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8)) >> v44) & 1) != 0)
        {
          v45 = (_QWORD *)(v41 + 16 * v44);
          v46 = *v45 == v36 && v45[1] == v35;
          if (v46 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_26;
          for (i = v44 + 1; ; i = v50 + 1)
          {
            v50 = i & v93;
            if (((*(_QWORD *)(v40 + (((i & v93) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v93)) & 1) == 0)
              break;
            v51 = (_QWORD *)(v41 + 16 * v50);
            v52 = *v51 == v36 && v51[1] == v35;
            if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_26;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    v29(v100, (unint64_t)v32, v30);
    v53 = static ReaderAffinityScorer.kAppBundleIdMatches;
    v54 = UsoIdentifier.value.getter();
    v56 = v55;
    if (*(_QWORD *)(v53 + 16))
    {
      v57 = v54;
      Hasher.init(_seed:)();
      String.hash(into:)();
      v58 = Hasher._finalize()();
      v59 = -1 << *(_BYTE *)(v53 + 32);
      v60 = v58 & ~v59;
      v61 = v53 + 56;
      if (((*(_QWORD *)(v53 + 56 + ((v60 >> 3) & 0xFFFFFFFFFFFFF8)) >> v60) & 1) != 0)
      {
        v62 = *(_QWORD *)(v53 + 48);
        v63 = (_QWORD *)(v62 + 16 * v60);
        v64 = *v63 == v57 && v63[1] == v56;
        if (v64 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_48:
          swift_bridgeObjectRelease();
          v47 = v100;
          v3 = v94;
          v10 = v32;
          v2 = v30;
          goto LABEL_49;
        }
        v65 = ~v59;
        v66 = (v60 + 1) & ~v59;
        if (((*(_QWORD *)(v61 + ((v66 >> 3) & 0xFFFFFFFFFFFFF8)) >> v66) & 1) != 0)
        {
          v67 = (_QWORD *)(v62 + 16 * v66);
          v68 = *v67 == v57 && v67[1] == v56;
          if (v68 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_48;
          for (j = v66 + 1; ; j = v74 + 1)
          {
            v74 = j & v65;
            if (((*(_QWORD *)(v61 + (((j & v65) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v65)) & 1) == 0)
              break;
            v75 = (_QWORD *)(v62 + 16 * v74);
            v76 = *v75 == v57 && v75[1] == v56;
            if (v76 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_48;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    v3 = v94;
    v26 = *(void (**)(char *, uint64_t))(v94 + 8);
    v26(v100, v30);
    v10 = v32;
    v2 = v30;
    result = ((uint64_t (*)(char *, uint64_t))v26)(v10, v30);
    v22 = v95;
LABEL_9:
    if (++v25 == v96)
    {
      v24 = v102;
      v11 = v80;
      goto LABEL_63;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized ReaderAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  Swift::String v38;
  Swift::String v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void (*v68)(char *, unint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Swift::Int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  BOOL v90;
  uint64_t v91;
  unint64_t i;
  uint64_t v93;
  _QWORD *v94;
  BOOL v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void (*v106)(char *, unint64_t, uint64_t);
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  uint8_t *v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint64_t v127;
  unint64_t v128;
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  void (*v131)(char *, uint64_t);
  char v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  _QWORD v137[4];
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;

  v157 = a2;
  v2 = type metadata accessor for RREntity();
  v161 = *(_QWORD *)(v2 - 8);
  v162 = v2;
  MEMORY[0x1E0C80A78](v2);
  v160 = (char *)v137 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  MEMORY[0x1E0C80A78](v4);
  v145 = (char *)v137 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RRCandidate();
  v7 = *(_QWORD *)(v6 - 8);
  v163 = v6;
  v164 = v7;
  v8 = MEMORY[0x1E0C80A78](v6);
  v146 = (char *)v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v140 = (char *)v137 - v11;
  MEMORY[0x1E0C80A78](v10);
  v147 = (char *)v137 - v12;
  v156 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v159 = *(_QWORD *)(v156 - 8);
  MEMORY[0x1E0C80A78](v156);
  v158 = (char *)v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v143 = *(_QWORD *)(v144 - 8);
  MEMORY[0x1E0C80A78](v144);
  v142 = (char *)v137 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Siri_Nlu_External_UserParse();
  v154 = *(_QWORD *)(v19 - 8);
  v155 = v19;
  MEMORY[0x1E0C80A78](v19);
  v153 = (char *)v137 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v21);
  v149 = (char *)v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v151 = *(_QWORD *)(v152 - 8);
  v23 = MEMORY[0x1E0C80A78](v152);
  v141 = (char *)v137 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v150 = (char *)v137 - v25;
  v26 = type metadata accessor for USOParse();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)v137 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Parse();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)v137 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v31 + 88))(v33, v30) == *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v31 + 96))(v33, v30);
    v139 = v27;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v29, v33, v26);
    v34 = specialized static AffinityScorerUtils.getTask(_:)();
    v148 = v29;
    v35 = v26;
    if (v34)
    {
      v36 = v34;
      v138 = v26;
      v165 = UsoTask.verbString.getter();
      v166 = v37;
      v38._countAndFlagsBits = 14906;
      v38._object = (void *)0xE200000000000000;
      String.append(_:)(v38);
      v39._countAndFlagsBits = UsoTask.baseEntityAsString.getter();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v41 = v165;
      v40 = v166;
      if ((v165 != 0xD000000000000012 || v166 != 0x80000001B4EFED40)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if (v41 == 0xD000000000000016 && v40 == 0x80000001B4EFED60)
        {
          swift_bridgeObjectRelease();
          v71 = v139;
          v72 = v138;
        }
        else
        {
          v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v71 = v139;
          v72 = v138;
          if ((v132 & 1) == 0)
          {
            if (one-time initialization token for executor != -1)
              swift_once();
            v133 = type metadata accessor for Logger();
            __swift_project_value_buffer(v133, (uint64_t)static Logger.executor);
            v134 = Logger.logObject.getter();
            v135 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v134, v135))
            {
              v136 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v136 = 0;
              _os_log_impl(&dword_1B4BE6000, v134, v135, "ReaderAffinityScorer could not find a supported parse or identifiers", v136, 2u);
              MEMORY[0x1B5E44758](v136, -1, -1);
            }

            swift_release();
            (*(void (**)(char *, uint64_t))(v71 + 8))(v148, v72);
            return 1;
          }
        }
        (*(void (**)(char *, uint64_t))(v71 + 8))(v148, v72);
        swift_release();
        return 3;
      }
      if (one-time initialization token for executor != -1)
        swift_once();
      v42 = type metadata accessor for Logger();
      v43 = __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
      swift_bridgeObjectRetain();
      v137[2] = v43;
      v44 = Logger.logObject.getter();
      v45 = static os_log_type_t.debug.getter();
      v46 = os_log_type_enabled(v44, v45);
      v137[3] = v36;
      if (v46)
      {
        v47 = (uint8_t *)swift_slowAlloc();
        v165 = swift_slowAlloc();
        v48 = v165;
        *(_DWORD *)v47 = 136315138;
        v137[1] = v47 + 4;
        swift_bridgeObjectRetain();
        v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v40, &v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B4BE6000, v44, v45, "ReaderAffinityScorer found %s", v47, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v48, -1, -1);
        MEMORY[0x1B5E44758](v47, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v60 = v138;
      v61 = v153;
      v62 = USOParse.userParse.getter();
      v63 = MEMORY[0x1B5E3FA6C](v62);
      (*(void (**)(char *, uint64_t))(v154 + 8))(v61, v155);
      v64 = *(_QWORD *)(v63 + 16);
      v65 = v156;
      if (v64)
      {
        v66 = v63 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
        v67 = *(_QWORD *)(v16 + 72);
        v68 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
        swift_bridgeObjectRetain();
        while (1)
        {
          v68(v18, v66, v15);
          if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
            break;
          (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
          v66 += v67;
          if (!--v64)
          {
            swift_bridgeObjectRelease();
            v69 = 1;
            v60 = v138;
            goto LABEL_27;
          }
        }
        swift_bridgeObjectRelease();
        v70 = (uint64_t)v149;
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v149, v18, v15);
        v69 = 0;
        v60 = v138;
      }
      else
      {
        v69 = 1;
LABEL_27:
        v70 = (uint64_t)v149;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v70, v69, 1, v15);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v70, 1, v15) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v70, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      }
      else
      {
        v73 = v142;
        Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v70, v15);
        v74 = v141;
        Siri_Nlu_External_UserStatedTask.task.getter();
        (*(void (**)(char *, uint64_t))(v143 + 8))(v73, v144);
        (*(void (**)(char *, char *, uint64_t))(v151 + 32))(v150, v74, v152);
        v75 = Siri_Nlu_External_UsoGraph.identifiers.getter();
        v76 = *(_QWORD *)(v75 + 16);
        if (v76)
        {
          v155 = v75 + ((*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80));
          v154 = *(_QWORD *)(v159 + 72);
          v153 = *(char **)(v159 + 16);
          v149 = (char *)v75;
          swift_bridgeObjectRetain();
          v77 = 0;
          v78 = v158;
          while (1)
          {
            ((void (*)(char *, uint64_t, uint64_t))v153)(v78, v155 + v154 * v77, v65);
            if (one-time initialization token for kAppBundleIdMatches != -1)
              swift_once();
            v79 = static ReaderAffinityScorer.kAppBundleIdMatches;
            v80 = Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter();
            v82 = v81;
            if (*(_QWORD *)(v79 + 16))
            {
              v83 = v80;
              Hasher.init(_seed:)();
              String.hash(into:)();
              v84 = Hasher._finalize()();
              v85 = -1 << *(_BYTE *)(v79 + 32);
              v86 = v84 & ~v85;
              v87 = v79 + 56;
              if (((*(_QWORD *)(v79 + 56 + ((v86 >> 3) & 0xFFFFFFFFFFFFF8)) >> v86) & 1) != 0)
              {
                v88 = *(_QWORD *)(v79 + 48);
                v89 = (_QWORD *)(v88 + 16 * v86);
                v90 = *v89 == v83 && v89[1] == v82;
                if (v90 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
LABEL_54:
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, uint64_t))(v159 + 8))(v158, v65);
                  swift_bridgeObjectRelease_n();
                  v96 = Logger.logObject.getter();
                  v97 = static os_log_type_t.debug.getter();
                  if (os_log_type_enabled(v96, v97))
                  {
                    v98 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)v98 = 0;
                    _os_log_impl(&dword_1B4BE6000, v96, v97, "ReaderAffinityScorer found matching identifier", v98, 2u);
                    MEMORY[0x1B5E44758](v98, -1, -1);
                  }

                  swift_release();
                  (*(void (**)(char *, uint64_t))(v151 + 8))(v150, v152);
LABEL_76:
                  (*(void (**)(char *, uint64_t))(v139 + 8))(v148, v138);
                  return 3;
                }
                v91 = ~v85;
                for (i = v86 + 1; ; i = v93 + 1)
                {
                  v93 = i & v91;
                  if (((*(_QWORD *)(v87 + (((i & v91) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v91)) & 1) == 0)
                    break;
                  v94 = (_QWORD *)(v88 + 16 * v93);
                  v95 = *v94 == v83 && v94[1] == v82;
                  if (v95 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    goto LABEL_54;
                }
              }
            }
            ++v77;
            swift_bridgeObjectRelease();
            v78 = v158;
            (*(void (**)(char *, uint64_t))(v159 + 8))(v158, v65);
            if (v77 == v76)
            {
              swift_bridgeObjectRelease_n();
              v60 = v138;
              goto LABEL_58;
            }
          }
        }
        swift_bridgeObjectRelease();
LABEL_58:
        (*(void (**)(char *, uint64_t))(v151 + 8))(v150, v152);
      }
      v100 = v163;
      v99 = v164;
      SiriEnvironment.salientEntitiesProvider.getter();
      v101 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
      swift_release();
      v102 = *(_QWORD *)(v101 + 16);
      if (v102)
      {
        v103 = v101;
        v104 = v101 + ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80));
        v105 = *(_QWORD *)(v99 + 72);
        v106 = *(void (**)(char *, unint64_t, uint64_t))(v99 + 16);
        v159 = v103;
        swift_bridgeObjectRetain();
        v107 = v140;
        v108 = v160;
        while (1)
        {
          v106(v107, v104, v100);
          if (one-time initialization token for kAppBundleIdMatches != -1)
            swift_once();
          v109 = static ReaderAffinityScorer.kAppBundleIdMatches;
          RRCandidate.entity.getter();
          v110 = RREntity.appBundleId.getter();
          v112 = v111;
          (*(void (**)(char *, uint64_t))(v161 + 8))(v108, v162);
          LOBYTE(v110) = specialized Set.contains(_:)(v110, v112, v109);
          swift_bridgeObjectRelease();
          if ((v110 & 1) != 0)
            break;
          v100 = v163;
          v99 = v164;
          (*(void (**)(char *, uint64_t))(v164 + 8))(v107, v163);
          v104 += v105;
          if (!--v102)
          {
            swift_bridgeObjectRelease();
            v114 = 1;
            v60 = v138;
            goto LABEL_68;
          }
        }
        swift_bridgeObjectRelease();
        v100 = v163;
        v99 = v164;
        v113 = (uint64_t)v145;
        (*(void (**)(char *, char *, uint64_t))(v164 + 32))(v145, v107, v163);
        v114 = 0;
        v60 = v138;
      }
      else
      {
        v114 = 1;
LABEL_68:
        v113 = (uint64_t)v145;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56))(v113, v114, 1, v100);
      swift_bridgeObjectRelease();
      v115 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v113, 1, v100);
      v116 = v147;
      v117 = v146;
      if (v115 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v113, &demangling cache variable for type metadata for RRCandidate?);
        SiriEnvironment.salientEntitiesProvider.getter();
        v118 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
        swift_release();
        v119 = specialized ReaderAffinityScorer.supportedAppIsOnScreen(with:)(v118);
        swift_bridgeObjectRelease();
        v120 = v139;
        if ((v119 & 1) != 0)
        {
          v121 = Logger.logObject.getter();
          v122 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v121, v122))
          {
            v123 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v123 = 0;
            _os_log_impl(&dword_1B4BE6000, v121, v122, "ReaderAffinityScorer found commonApp entity with Safari bundle ID", v123, 2u);
            MEMORY[0x1B5E44758](v123, -1, -1);
          }

          swift_release();
          (*(void (**)(char *, uint64_t))(v120 + 8))(v148, v60);
          return 3;
        }
        (*(void (**)(char *, uint64_t))(v139 + 8))(v148, v60);
        swift_release();
        return 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v99 + 32))(v147, v113, v100);
      (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v117, v116, v100);
      v124 = Logger.logObject.getter();
      v125 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v124, v125))
      {
        v126 = (uint8_t *)swift_slowAlloc();
        v163 = swift_slowAlloc();
        v165 = v163;
        *(_DWORD *)v126 = 136315138;
        lazy protocol witness table accessor for type RRCandidate and conformance RRCandidate();
        v127 = dispatch thunk of CustomStringConvertible.description.getter();
        v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v127, v128, &v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v129 = *(void (**)(char *, uint64_t))(v164 + 8);
        v129(v117, v100);
        _os_log_impl(&dword_1B4BE6000, v124, v125, "ReaderAffinityScorer found salient reader entity %s", v126, 0xCu);
        v130 = v163;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v130, -1, -1);
        MEMORY[0x1B5E44758](v126, -1, -1);

        swift_release();
        v129(v116, v100);
        goto LABEL_76;
      }

      swift_release();
      v131 = *(void (**)(char *, uint64_t))(v99 + 8);
      v131(v117, v100);
      v131(v116, v100);
      (*(void (**)(char *, uint64_t))(v139 + 8))(v148, v60);
      return 3;
    }
    else
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v54 = type metadata accessor for Logger();
      __swift_project_value_buffer(v54, (uint64_t)static Logger.executor);
      v55 = Logger.logObject.getter();
      v56 = static os_log_type_t.error.getter();
      v57 = os_log_type_enabled(v55, v56);
      v58 = v139;
      if (v57)
      {
        v59 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v59 = 0;
        _os_log_impl(&dword_1B4BE6000, v55, v56, "ReaderAffinityScorer could not extract usoTask from parse", v59, 2u);
        MEMORY[0x1B5E44758](v59, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v58 + 8))(v148, v35);
      return 0;
    }
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.executor);
    v50 = Logger.logObject.getter();
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v52 = 0;
      _os_log_impl(&dword_1B4BE6000, v50, v51, "ReaderAffinityScorer received an unexpected parse", v52, 2u);
      MEMORY[0x1B5E44758](v52, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
    return 2;
  }
}

ValueMetadata *type metadata accessor for ReaderAffinityScorer()
{
  return &type metadata for ReaderAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type RRCandidate and conformance RRCandidate()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate;
  if (!lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate)
  {
    v1 = type metadata accessor for RRCandidate();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DA3D80], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate);
  }
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;

  v4 = a3;
  v19 = MEMORY[0x1E0DEE9D8];
  if (a3 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v16 = v4 & 0xFFFFFFFFFFFFFF8;
      v17 = v4 & 0xC000000000000001;
      v15 = v4;
      while (v17)
      {
        v9 = (id)MEMORY[0x1B5E43B94](v8, v4);
LABEL_9:
        v10 = v9;
        v11 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v18 = v9;
        v12 = a2;
        v13 = a1(&v18);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          v4 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {

        }
        ++v8;
        if (v11 == v7)
        {
          v12 = v19;
          goto LABEL_20;
        }
      }
      if (v8 < *(_QWORD *)(v16 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7)
        goto LABEL_19;
    }
    v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  v12 = MEMORY[0x1E0DEE9D8];
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t SiriEnvironment.recentDialogs.getter()
{
  uint64_t v0;

  type metadata accessor for RecentDialogsEnvironmentProvider();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider, v0, (uint64_t (*)(uint64_t))type metadata accessor for RecentDialogsEnvironmentProvider, (uint64_t)&protocol conformance descriptor for RecentDialogsEnvironmentProvider);
  return dispatch thunk of SiriEnvironment.subscript.getter();
}

uint64_t RecentDialogTracker.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t (*)(), _QWORD))(v0 + 216))(closure #1 in RecentDialogTracker.init(), 0);
}

uint64_t RecentDialogTracker.__allocating_init(timeProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  RecentDialogTracker.init(timeProvider:)(a1, a2);
  return v4;
}

uint64_t RecentDialogTracker.init(timeProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;

  v3 = v2;
  v6 = v2 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentSessionId;
  v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = (_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestId);
  *v8 = 0;
  v8[1] = 0;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestHasTrackedDialogs) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_recentDialogs) = MEMORY[0x1E0DEE9D8];
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1B4BE6000, v10, v11, "RecentDialogTracker initalized", v12, 2u);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }

  v13 = (_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_timeProvider);
  *v13 = a1;
  v13[1] = a2;
  return v3;
}

uint64_t RecentDialogTracker.clearRecentDialogs()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = v0;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v5 = 134217984;
    v6 = (_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_recentDialogs);
    swift_beginAccess();
    if (*v6 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "RecentDialogTracker: clearing currently tracked %ld dialog(s).", v5, 0xCu);
    MEMORY[0x1B5E44758](v5, -1, -1);

  }
  else
  {

    swift_release();
  }
  v7 = (_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_recentDialogs);
  swift_beginAccess();
  *v7 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  return RecentDialogTracker.updateSiriEnvironment()();
}

Swift::Bool __swiftcall DialogPhase.shouldTrack()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t);
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for DialogPhase();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B5C0];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v12 - v8, v1, v2);
  static DialogPhase.reflection.getter();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type DialogPhase and conformance DialogPhase, 255, v3, MEMORY[0x1E0D9B5D0]);
  LOBYTE(v1) = dispatch thunk of static Equatable.== infix(_:_:)();
  v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v7, v2);
  v10(v9, v2);
  return (v1 & 1) == 0;
}

uint64_t RecentDialogTracker.getRecentDialogs()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;

  v1 = v0;
  RecentDialogTracker.filterExpired()();
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v5 = 134217984;
    v6 = (_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_recentDialogs);
    swift_beginAccess();
    if (*v6 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "RecentDialogTracker: returning %ld recent dialogs.", v5, 0xCu);
    MEMORY[0x1B5E44758](v5, -1, -1);

  }
  else
  {

    swift_release();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t RecentDialogTracker.updateSiriEnvironment()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Bool v21;
  uint64_t v22;
  uint64_t result;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Bool v29;
  uint64_t v30;
  uint64_t v31;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogPhase?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v31 - v6;
  v8 = type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  type metadata accessor for RecentDialogsEnvironmentProvider();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider, v9, (uint64_t (*)(uint64_t))type metadata accessor for RecentDialogsEnvironmentProvider, (uint64_t)&protocol conformance descriptor for RecentDialogsEnvironmentProvider);
  v10 = dispatch thunk of SiriEnvironment.subscript.getter();
  swift_release();
  v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_recentDialogs);
  swift_beginAccess();
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = *(_QWORD *)((*v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 112))(v12);
  swift_release();
  static SiriEnvironment.default.getter();
  v13 = dispatch thunk of SiriEnvironment.subscript.getter();
  swift_release();
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v14 = &selRef_reason;
    if (v22)
      goto LABEL_5;
LABEL_16:
    v21 = 0;
    goto LABEL_17;
  }
  v14 = &selRef_reason;
  if (!*(_QWORD *)((*v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_16;
LABEL_5:
  v15 = *v11;
  if ((*v11 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v16 = (id)MEMORY[0x1B5E43B94](0, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_33:
      swift_bridgeObjectRetain();
      v24 = (id)MEMORY[0x1B5E43B94](1, v15);
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    v16 = *(id *)(v15 + 32);
  }
  v17 = (void *)RecentDialog.addViews.getter();

  v18 = objc_msgSend(v17, sel_dialogPhase);
  if (v18)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  DialogPhase.init(aceValue:)();
  v19 = type metadata accessor for DialogPhase();
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v7, 1, v19) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for DialogPhase?);
    v21 = 0;
  }
  else
  {
    v21 = DialogPhase.canBeReplayed()();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v19);
  }
  v14 = &selRef_reason;
LABEL_17:
  (*(void (**)(Swift::Bool))(*(_QWORD *)v13 + 136))(v21);
  swift_release();
  static SiriEnvironment.default.getter();
  v8 = dispatch thunk of SiriEnvironment.subscript.getter();
  result = swift_release();
  if ((unint64_t)*v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v30 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v30 < 2)
      goto LABEL_26;
  }
  else if (*(uint64_t *)((*v11 & 0xFFFFFFFFFFFFF8) + 0x10) < 2)
  {
    goto LABEL_26;
  }
  v15 = *v11;
  if ((*v11 & 0xC000000000000001) != 0)
    goto LABEL_33;
  if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    v24 = *(id *)(v15 + 40);
LABEL_22:
    v25 = (void *)RecentDialog.addViews.getter();

    v26 = objc_msgSend(v25, v14[337]);
    if (v26)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    DialogPhase.init(aceValue:)();
    v27 = type metadata accessor for DialogPhase();
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v5, 1, v27) != 1)
    {
      v29 = DialogPhase.canBeReplayed()();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v27);
      goto LABEL_28;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for DialogPhase?);
LABEL_26:
    v29 = 0;
LABEL_28:
    (*(void (**)(Swift::Bool))(*(_QWORD *)v8 + 160))(v29);
    return swift_release();
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall DialogPhase.canBeReplayed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t);
  char v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for DialogPhase();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B5C0];
  v4 = *(_QWORD *)(v2 - 8);
  v5 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v13 - v8, v1, v2);
  static DialogPhase.summary.getter();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type DialogPhase and conformance DialogPhase, 255, v3, MEMORY[0x1E0D9B5D0]);
  LOBYTE(v3) = dispatch thunk of static Equatable.== infix(_:_:)();
  v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v7, v2);
  if ((v3 & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    static DialogPhase.completion.getter();
    v11 = dispatch thunk of static Equatable.== infix(_:_:)();
    v10(v7, v2);
  }
  v10(v9, v2);
  return v11 & 1;
}

uint64_t RecentDialogTracker.deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentSessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t RecentDialogTracker.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentSessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t RecentDialogsEnvironmentProvider.numCurrentlyTracked.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

uint64_t (*RecentDialogsEnvironmentProvider.numCurrentlyTracked.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RecentDialogsEnvironmentProvider.hasDialogToRepeat.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t RecentDialogsEnvironmentProvider.hasDialogToRepeat.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 24) = a1;
  return result;
}

uint64_t (*RecentDialogsEnvironmentProvider.hasDialogToRepeat.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RecentDialogsEnvironmentProvider.hasDialogToGoBackTo.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t RecentDialogsEnvironmentProvider.hasDialogToGoBackTo.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 25) = a1;
  return result;
}

uint64_t (*RecentDialogsEnvironmentProvider.hasDialogToGoBackTo.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t RecentDialogsEnvironmentProvider.__allocating_init(storage:)()
{
  uint64_t result;

  swift_release();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_WORD *)(result + 24) = 0;
  return result;
}

uint64_t RecentDialogsEnvironmentProvider.init(storage:)()
{
  uint64_t v0;

  swift_release();
  *(_QWORD *)(v0 + 16) = 0;
  *(_WORD *)(v0 + 24) = 0;
  return v0;
}

uint64_t RecentDialogsEnvironmentProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t RecentDialogsEnvironmentProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for SiriEnvironmentProvider.init(storage:) in conformance RecentDialogsEnvironmentProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance RecentDialogsEnvironmentProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for RecentDialogsEnvironmentProvider();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t base witness table accessor for ObservableObject in RecentDialogsEnvironmentProvider(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider, a2, (uint64_t (*)(uint64_t))type metadata accessor for RecentDialogsEnvironmentProvider, (uint64_t)&protocol conformance descriptor for RecentDialogsEnvironmentProvider);
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in RecentDialogsEnvironmentProvider()
{
  return MEMORY[0x1E0C96020];
}

uint64_t sub_1B4E3F570@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E3F5A0(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 112))(*a1);
}

uint64_t sub_1B4E3F5CC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4E3F600(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 136))(*a1);
}

uint64_t sub_1B4E3F62C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4E3F660(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 160))(*a1);
}

uint64_t ObjC metadata update function for RecentDialogTracker()
{
  return type metadata accessor for RecentDialogTracker();
}

uint64_t type metadata accessor for RecentDialogTracker()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RecentDialogTracker;
  if (!type metadata singleton initialization cache for RecentDialogTracker)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for RecentDialogTracker()
{
  unint64_t v0;

  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for RecentDialogTracker()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RecentDialogTracker.__allocating_init(timeProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of RecentDialogTracker.setCurrentRequest(withRequestId:sessionId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of RecentDialogTracker.handleEndRequest(sessionState:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of RecentDialogTracker.handleSessionEnded()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of RecentDialogTracker.maybeMemorizeDialog(command:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of RecentDialogTracker.getRecentDialogs()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t method lookup function for RecentDialogsEnvironmentProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.numCurrentlyTracked.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.numCurrentlyTracked.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.numCurrentlyTracked.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.hasDialogToRepeat.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.hasDialogToRepeat.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.hasDialogToRepeat.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.hasDialogToGoBackTo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.hasDialogToGoBackTo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.hasDialogToGoBackTo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of RecentDialogsEnvironmentProvider.__allocating_init(storage:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

_QWORD *RemoteConversationClient.__allocating_init(identifier:remoteConversationXPCProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a3 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a3, v7);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  v13 = specialized RemoteConversationClient.__allocating_init(identifier:remoteConversationXPCProvider:)(a1, a2, (uint64_t)v11, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v13;
}

uint64_t RemoteConversationClient.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteConversationClient.remoteConversationXPCProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 128, a1);
}

uint64_t key path setter for RemoteConversationClient.currentRcId : RemoteConversationClient(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 168) = v3;
  *(_QWORD *)(v4 + 176) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t RemoteConversationClient.currentRcId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteConversationClient.currentRcId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 168) = a1;
  *(_QWORD *)(v2 + 176) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*RemoteConversationClient.currentRcId.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

_QWORD *RemoteConversationClient.init(identifier:remoteConversationXPCProvider:)(uint64_t a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v3;

  swift_defaultActor_initialize();
  v3[21] = 0;
  v3[22] = 0;
  v3[14] = a1;
  v3[15] = a2;
  outlined init with take of ReferenceResolutionClientProtocol(a3, (uint64_t)(v3 + 16));
  return v3;
}

void closure #1 in closure #1 in RemoteConversationClient.warmup(refId:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD aBlock[6];

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  v12 = (void *)MEMORY[0x1B5E432E8](a4, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.drainAsyncWork();
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_206;
  v15 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_warmupWithRefId_reply_, v12, v15);
  _Block_release(v15);

}

uint64_t RemoteConversationClient.cancel()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t RemoteConversationClient.reset()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationClient.reset()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationClient.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 40);
    v3 = swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v3;
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    swift_unknownObjectRetain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v4;
    *v4 = v0;
    v4[1] = closure #1 in RemoteConversationClient.cancel();
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v11 = v10;
      *(_DWORD *)v9 = 136446210;
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x29287465736572, 0xE700000000000000, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v7, v8, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v10, -1, -1);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

void closure #1 in closure #1 in RemoteConversationClient.cancel()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, SEL *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD aBlock[6];

  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v16 + v15, (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  aBlock[4] = a5;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = a6;
  v17 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, *a7, v17);
  _Block_release(v17);
}

uint64_t RemoteConversationClient.ensureReady()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, void *, _QWORD, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD **)(v0 + 16);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = v1 + 16;
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v8 = (uint64_t (*)(uint64_t, void *, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v5 + 16)
                                                                                  + *(_QWORD *)(v5 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v6;
  *v6 = v0;
  v6[1] = RemoteConversationClient.ensureReady();
  return v8(v0 + 40, &async function pointer to closure #1 in RemoteConversationClient.ensureReady(), 0, MEMORY[0x1E0DEE9C0] + 8, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in closure #1 in RemoteConversationClient.ensureReady()(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.prepare(bridge:);
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_185;
  v9 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_ensureReadyWithReply_, v9);
  _Block_release(v9);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(void *a1)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  if (a1)
  {
    v2 = a1;
    if (one-time initialization token for executor != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
    v4 = a1;
    v5 = a1;
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v14 = v9;
      *(_DWORD *)v8 = 136315138;
      v10 = a1;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v11 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v6, v7, "Error calling startTurn: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v9, -1, -1);
      MEMORY[0x1B5E44758](v8, -1, -1);
    }
    else
    {

    }
    v14 = (uint64_t)a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async (@guaranteed RemoteConversationXPC) -> (@error @owned Error)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v8 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v8(a2);
}

void closure #1 in closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UserInputResult, Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  aBlock[3] = &block_descriptor_141;
  v14 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_acceptInitialInputWithInputIdentifier_speechData_reply_, isa, a5, v14);
  _Block_release(v14);

}

uint64_t RemoteConversationClient.prepare(bridge:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t RemoteConversationClient.prepare(bridge:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(void);
  __int128 v10;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD **)(v0 + 32);
  v2 = type metadata accessor for Logger();
  v3 = v1 + 16;
  v10 = *(_OWORD *)(v0 + 16);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v6 = swift_allocObject();
  *(_QWORD *)(v0 + 40) = v6;
  *(_OWORD *)(v6 + 16) = v10;
  v9 = (uint64_t (*)(void))(**(int **)(v5 + 8) + *(_QWORD *)(v5 + 8));
  swift_unknownObjectRetain();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v7;
  *v7 = v0;
  v7[1] = RemoteConversationClient.prepare(bridge:);
  return v9();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in RemoteConversationClient.prepare(bridge:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  ObjectType = swift_getObjectType();
  v12 = ServiceBridgeDelegate.xpcWrapper.getter(ObjectType, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v13, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.prepare(bridge:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_130;
  v15 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_prepareWithBridge_reply_, v12, v15);
  _Block_release(v15);
  return swift_unknownObjectRelease();
}

uint64_t RemoteConversationClient.paraphrase()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t RemoteConversationClient.paraphrase()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v9)(_QWORD, void *, _QWORD, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = (_QWORD *)v0[3];
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = v1 + 16;
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v9 = (uint64_t (*)(_QWORD, void *, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v5 + 8)
                                                                                 + *(_QWORD *)(v5 + 8));
  v6 = (_QWORD *)swift_task_alloc();
  v0[4] = v6;
  v7 = type metadata accessor for ConversationParaphraseResult(0);
  *v6 = v0;
  v6[1] = UndoCommand.execute();
  return v9(v0[2], &async function pointer to closure #1 in RemoteConversationClient.paraphrase(), 0, v7, v4, v5);
}

uint64_t closure #1 in RemoteConversationClient.paraphrase()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationClient.paraphrase()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = swift_allocObject();
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  swift_unknownObjectRetain();
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.paraphrase();
  *(_QWORD *)(v2 + 24) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  type metadata accessor for ConversationParaphraseResult(0);
  *v3 = v0;
  v3[1] = closure #1 in RemoteConversationClient.paraphrase();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in closure #1 in RemoteConversationClient.paraphrase()(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationParaphraseResult, Error>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.paraphrase();
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  aBlock[3] = &block_descriptor_119_0;
  v9 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_paraphraseWithReply_, v9);
  _Block_release(v9);
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationClient.paraphrase()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = type metadata accessor for ConversationParaphraseResult(0);
  MEMORY[0x1E0C80A78](v0);
  ConversationParaphraseResultXPC.swiftRepresentation()((uint64_t *)((char *)&v3 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0)));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationParaphraseResult, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t RemoteConversationClient.commit(bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t RemoteConversationClient.commit(bridge:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v10)(_QWORD, void *, uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v11;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD **)(v0 + 40);
  v2 = type metadata accessor for Logger();
  v3 = v1 + 16;
  v11 = *(_OWORD *)(v0 + 24);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v6 = swift_allocObject();
  *(_QWORD *)(v0 + 48) = v6;
  *(_OWORD *)(v6 + 16) = v11;
  v10 = (uint64_t (*)(_QWORD, void *, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v5 + 8)
                                                                                   + *(_QWORD *)(v5 + 8));
  swift_unknownObjectRetain();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v7;
  v8 = type metadata accessor for ConversationCommitResult();
  *v7 = v0;
  v7[1] = RemoteConversationClient.commit(bridge:);
  return v10(*(_QWORD *)(v0 + 16), &async function pointer to partial apply for closure #1 in RemoteConversationClient.commit(bridge:), v6, v8, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in closure #1 in RemoteConversationClient.commit(bridge:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  ObjectType = swift_getObjectType();
  v12 = ServiceBridgeDelegate.xpcWrapper.getter(ObjectType, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v13, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.commit(bridge:);
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  aBlock[3] = &block_descriptor_108;
  v15 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_commitWithBridge_reply_, v12, v15);
  _Block_release(v15);
  return swift_unknownObjectRelease();
}

uint64_t RemoteConversationClient.drainAsyncWork()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationClient.drainAsyncWork()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationClient.drainAsyncWork()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 40);
    v3 = swift_task_alloc();
    *(_QWORD *)(v0 + 48) = v3;
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    swift_unknownObjectRetain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v4;
    *v4 = v0;
    v4[1] = closure #1 in RemoteConversationClient.cancel();
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v11 = v10;
      *(_DWORD *)v9 = 136446210;
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x80000001B4EFAE20, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v7, v8, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v10, -1, -1);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

void closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<FlexibleExecutionSupportOptions, Error>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions();
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  aBlock[3] = &block_descriptor_83;
  v9 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_flexibleExecutionSupportOptionsWithReply_, v9);
  _Block_release(v9);
}

void closure #1 in closure #1 in RemoteConversationClient.isEmpty()(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, SEL *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD aBlock[6];

  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v16 + v15, (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  aBlock[4] = a5;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  aBlock[3] = a6;
  v17 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, *a7, v17);
  _Block_release(v17);
}

uint64_t RemoteConversationClient.invalidate()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  outlined init with copy of ReferenceResolutionClientProtocol(v0[10] + 128, (uint64_t)(v0 + 2));
  v1 = v0[5];
  v2 = v0[6];
  v0[11] = v1;
  v0[12] = v2;
  v0[13] = __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  v0[14] = *(_QWORD *)(v2 + 24);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_BYTE *)(v0 + 120) = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 112))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_BYTE *)(v0 + 120) & 1);
}

uint64_t RemoteConversationClient.description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  _QWORD v6[2];

  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v6, "FlowExtension(");
  HIBYTE(v6[1]) = -18;
  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(void **)(v0 + 120);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v6[0];
}

uint64_t static RemoteConversationClient.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 112) == *(_QWORD *)(a2 + 112) && *(_QWORD *)(a1 + 120) == *(_QWORD *)(a2 + 120))
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t RemoteConversationClient.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t RemoteConversationClient.hashValue.getter()
{
  return String.hashValue.getter();
}

uint64_t RemoteConversationClient.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 128);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t RemoteConversationClient.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance RemoteConversationClient()
{
  return String.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RemoteConversationClient()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RemoteConversationClient()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RemoteConversationClient()
{
  return RemoteConversationClient.description.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RemoteConversationClient(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)a1 + 112) == *(_QWORD *)(*(_QWORD *)a2 + 112)
    && *(_QWORD *)(*(_QWORD *)a1 + 120) == *(_QWORD *)(*(_QWORD *)a2 + 120))
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

_QWORD *specialized RemoteConversationClient.__allocating_init(identifier:remoteConversationXPCProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v11;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v14 = a5;
  v15 = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(boxed_opaque_existential_1, a3, a5);
  type metadata accessor for RemoteConversationClient();
  v11 = (_QWORD *)swift_allocObject();
  swift_defaultActor_initialize();
  v11[21] = 0;
  v11[22] = 0;
  v11[14] = a1;
  v11[15] = a2;
  outlined init with take of ReferenceResolutionClientProtocol(&v13, (uint64_t)(v11 + 16));
  return v11;
}

uint64_t sub_1B4E41A98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for Input();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B4E41B10()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B4E41B34()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;

  v1 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v3 = v2 + v1[7];
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_release();

  v6 = (uint64_t *)(v2 + v1[11]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(*v6, v7);
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B4E41C48()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B4E41C6C()
{
  return objectdestroy_24Tm((uint64_t (*)(_QWORD))MEMORY[0x1E0D9C588]);
}

uint64_t sub_1B4E41C78()
{
  return objectdestroy_24Tm((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

uint64_t objectdestroy_24Tm(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v1 + v4, v2);

  return swift_deallocObject();
}

uint64_t base witness table accessor for Equatable in RemoteConversationClient(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, a2, (uint64_t (*)(uint64_t))type metadata accessor for RemoteConversationClient, (uint64_t)&protocol conformance descriptor for RemoteConversationClient);
}

uint64_t sub_1B4E41D28@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 176);
  *a2 = *(_QWORD *)(v3 + 168);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t method lookup function for RemoteConversationClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteConversationClient.currentRcId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of RemoteConversationClient.currentRcId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of RemoteConversationClient.currentRcId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of RemoteConversationClient.__allocating_init(identifier:remoteConversationXPCProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of RemoteConversationClient.canHandle(input:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 144)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 144));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = dispatch thunk of CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of RemoteConversationClient.warmup(refId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 152) + *(_QWORD *)(*(_QWORD *)v2 + 152));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v8(a1, a2);
}

uint64_t dispatch thunk of RemoteConversationClient.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 160) + *(_QWORD *)(*(_QWORD *)v0 + 160));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t dispatch thunk of RemoteConversationClient.reset()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 168) + *(_QWORD *)(*(_QWORD *)v0 + 168));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t dispatch thunk of RemoteConversationClient.ensureReady()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 176) + *(_QWORD *)(*(_QWORD *)v0 + 176));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t dispatch thunk of RemoteConversationClient.startTurn(turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 184)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 184));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of RemoteConversationClient.accept(input:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 192)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 192));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 200)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 200));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of RemoteConversationClient.prepare(bridge:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 208) + *(_QWORD *)(*(_QWORD *)v2 + 208));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v8(a1, a2);
}

uint64_t dispatch thunk of RemoteConversationClient.paraphrase()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 216) + *(_QWORD *)(*(_QWORD *)v1 + 216));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t dispatch thunk of RemoteConversationClient.commit(bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 224)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 224));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of RemoteConversationClient.isEmpty()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 232) + *(_QWORD *)(*(_QWORD *)v0 + 232));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v4();
}

uint64_t dispatch thunk of RemoteConversationClient.drainAsyncWork()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 240) + *(_QWORD *)(*(_QWORD *)v0 + 240));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t dispatch thunk of RemoteConversationClient.flexibleExecutionSupportOptions()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 248) + *(_QWORD *)(*(_QWORD *)v1 + 248));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t dispatch thunk of RemoteConversationClient.isCorrectable()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 256) + *(_QWORD *)(*(_QWORD *)v0 + 256));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v4();
}

uint64_t dispatch thunk of RemoteConversationClient.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 264) + *(_QWORD *)(*(_QWORD *)v0 + 264));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = dispatch thunk of RemoteConversationClient.invalidate();
  return v4();
}

uint64_t dispatch thunk of RemoteConversationClient.invalidate()(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v1;
  v2 = a1 & 1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v2);
}

uint64_t dispatch thunk of RemoteConversationClient.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of RemoteConversationClient.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of RemoteConversationClient.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.isCorrectable()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in RemoteConversationClient.isEmpty()(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_1E684DB88, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.isCorrectable(), (uint64_t)&block_descriptor_18, (SEL *)&selRef_isCorrectableWithReply_);
}

uint64_t sub_1B4E424E8()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1B4E4252C()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<FlexibleExecutionSupportOptions, Error>);
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.drainAsyncWork()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in RemoteConversationClient.cancel()(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_1E684DC50, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.drainAsyncWork(), (uint64_t)&block_descriptor_90, (SEL *)&selRef_drainAsyncWorkWithReply_);
}

uint64_t sub_1B4E42570()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.isEmpty()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in RemoteConversationClient.isEmpty()(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_1E684DCA0, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.isCorrectable(), (uint64_t)&block_descriptor_97, (SEL *)&selRef_isEmptyWithReply_);
}

uint64_t sub_1B4E425B4()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationClient.commit(bridge:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in RemoteConversationClient.commit(bridge:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1B4E42600()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
}

uint64_t sub_1B4E4260C()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.paraphrase()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in RemoteConversationClient.paraphrase()(a1, *(void **)(v1 + 16));
}

uint64_t sub_1B4E42668()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<ConversationParaphraseResult, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.paraphrase()(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(a1, &demangling cache variable for type metadata for CheckedContinuation<ConversationParaphraseResult, Error>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in RemoteConversationClient.paraphrase());
}

uint64_t objectdestroy_99Tm()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationClient.prepare(bridge:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in RemoteConversationClient.prepare(bridge:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1B4E426F4()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t sub_1B4E42700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  closure #1 in closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1B4E42810()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<UserInputResult, Error>);
}

uint64_t sub_1B4E4281C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for Input();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationClient.accept(input:speechData:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for Input() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #1 in RemoteConversationClient.accept(input:speechData:)(a1, v1 + v4, *(void **)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1B4E42914()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<UserInputResult, Error>);
}

uint64_t sub_1B4E42920()
{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v1 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  v2 = (*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  swift_unknownObjectRelease();
  v3 = v0 + v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v4 = v0 + v2 + v1[7];
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_release();

  v7 = (uint64_t *)(v3 + v1[11]);
  v8 = v7[1];
  if (v8 >> 60 != 15)
    outlined consume of Data._Representation(*v7, v8);
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(a1, *(void **)(v1 + 16), (_QWORD *)(v1 + v4), *v5, v5[1]);
}

uint64_t sub_1B4E42AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  v6 = (v4 + *(unsigned __int8 *)(*((_QWORD *)v5 - 1) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v5 - 1) + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_unknownObjectRelease();
  v7 = v0 + v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v8 = v0 + v6 + v5[7];
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_release();

  v11 = (uint64_t *)(v7 + v5[11]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    outlined consume of Data._Representation(*v11, v12);
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B4E42C04()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(a1, &demangling cache variable for type metadata for CheckedContinuation<(), Error>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:));
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.ensureReady()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in RemoteConversationClient.ensureReady()(a1, *(void **)(v1 + 16));
}

uint64_t sub_1B4E42C3C()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.reset()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in RemoteConversationClient.cancel()(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_1E684E088, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.drainAsyncWork(), (uint64_t)&block_descriptor_192, (SEL *)&selRef_resetWithReply_);
}

uint64_t sub_1B4E42C80()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.cancel()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in RemoteConversationClient.cancel()(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_1E684E0D8, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.drainAsyncWork(), (uint64_t)&block_descriptor_199, (SEL *)&selRef_cancelWithReply_);
}

uint64_t sub_1B4E42CC4()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

void partial apply for closure #1 in closure #1 in RemoteConversationClient.warmup(refId:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in RemoteConversationClient.warmup(refId:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1B4E42CDC()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

uint64_t sub_1B4E42CE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for Input();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for Input() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:)(a1, v1 + v4, *(void **)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1B4E42E08()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<ConversationCanHandleResult, Error>);
}

BOOL static RemoteConversationConnectionInvalidationResult.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void RemoteConversationConnectionInvalidationResult.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int RemoteConversationConnectionInvalidationResult.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RemoteConversationConnectionInvalidationResult(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

unint64_t lazy protocol witness table accessor for type RemoteConversationConnectionInvalidationResult and conformance RemoteConversationConnectionInvalidationResult()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RemoteConversationConnectionInvalidationResult and conformance RemoteConversationConnectionInvalidationResult;
  if (!lazy protocol witness table cache variable for type RemoteConversationConnectionInvalidationResult and conformance RemoteConversationConnectionInvalidationResult)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for RemoteConversationConnectionInvalidationResult, &type metadata for RemoteConversationConnectionInvalidationResult);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RemoteConversationConnectionInvalidationResult and conformance RemoteConversationConnectionInvalidationResult);
  }
  return result;
}

uint64_t dispatch thunk of RemoteConversationConnectionProviding.withRemoteConversationConnection<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a6 + 8)
                                                                                     + *(_QWORD *)(a6 + 8));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of RemoteConversationConnectionProviding.withRemoteConversationConnectionIfValid<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a6 + 16)
                                                                                     + *(_QWORD *)(a6 + 16));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of RemoteConversationConnectionProviding.invalidate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))() & 1;
}

uint64_t storeEnumTagSinglePayload for RemoteConversationConnectionInvalidationResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B4E4311C + 4 * byte_1B4EED2D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B4E43150 + 4 * byte_1B4EED2D0[v4]))();
}

uint64_t sub_1B4E43150(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E43158(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4E43160);
  return result;
}

uint64_t sub_1B4E4316C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4E43174);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B4E43178(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E43180(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RemoteConversationConnectionInvalidationResult()
{
  return &type metadata for RemoteConversationConnectionInvalidationResult;
}

uint64_t _sScG7addTask8priority9operationyScPSg_xyYaYAcntF14SiriKitRuntime24RemoteConversationClientCSg_Tg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];
  _QWORD v21[4];

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v11 = type metadata accessor for TaskPriority();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v13 = dispatch thunk of Actor.unownedExecutor.getter();
      v15 = v14;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v16 = *v4;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationClient?);
  v18 = (_QWORD *)(v15 | v13);
  if (v15 | v13)
  {
    v21[0] = 0;
    v21[1] = 0;
    v18 = v21;
    v21[2] = v13;
    v21[3] = v15;
  }
  v20[1] = 1;
  v20[2] = v18;
  v20[3] = v16;
  swift_task_create();
  return swift_release();
}

uint64_t _sScG7addTask8priority9operationyScPSg_xyYaYAcntFyt_Tg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];
  _QWORD v21[4];

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v11 = type metadata accessor for TaskPriority();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v13 = dispatch thunk of Actor.unownedExecutor.getter();
      v15 = v14;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v16 = *v4;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  v18 = (_QWORD *)(v15 | v13);
  if (v15 | v13)
  {
    v21[0] = 0;
    v21[1] = 0;
    v18 = v21;
    v21[2] = v13;
    v21[3] = v15;
  }
  v20[1] = 1;
  v20[2] = v18;
  v20[3] = v16;
  swift_task_create();
  return swift_release();
}

_QWORD *RemoteConversationService.__allocating_init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v23;

  v14 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  v15 = __swift_mutable_project_boxed_opaque_existential_1(a1, v14);
  v17 = *(_QWORD *)(a4 + 24);
  v16 = *(_QWORD *)(a4 + 32);
  v18 = __swift_mutable_project_boxed_opaque_existential_1(a4, v17);
  v19 = specialized RemoteConversationService.__allocating_init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)(v15, a2, a3, v18, a5, a6, a7, a8, a9, v23, v14, v17, v13, v16);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v19;
}

uint64_t RemoteConversationService.warmup(refId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 1, 1, v14);
  v15 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v15 != -1)
    swift_once();
  v17 = static ConversationActor.shared;
  v18 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v16, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v17;
  v19[3] = v18;
  v19[4] = v5;
  v19[5] = a1;
  v19[6] = a2;
  v19[7] = a3;
  v19[8] = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.warmup(refId:reply:), (uint64_t)v19);
  return swift_release();
}

uint64_t RemoteConversationService.canHandle(inputData:rcId:reply:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v7 = v6;
  v26 = a3;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 1, 1, v17);
  outlined copy of Data._Representation(a1, a2);
  v18 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v18 != -1)
    swift_once();
  v20 = static ConversationActor.shared;
  v21 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v19, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v20;
  v22[3] = v21;
  v22[4] = a1;
  v22[5] = a2;
  v22[6] = a5;
  v22[7] = a6;
  v23 = v26;
  v22[8] = v7;
  v22[9] = v23;
  v22[10] = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:), (uint64_t)v22);
  return swift_release();
}

uint64_t RemoteConversationService.cancel(reply:)(uint64_t a1, uint64_t a2)
{
  return RemoteConversationService.cancel(reply:)(a1, a2, (uint64_t)"cancel(reply:)", 14, (uint64_t)&unk_1E684E360, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.cancel(reply:));
}

uint64_t RemoteConversationService.reset(reply:)(uint64_t a1, uint64_t a2)
{
  return RemoteConversationService.cancel(reply:)(a1, a2, (uint64_t)"reset(reply:)", 13, (uint64_t)&unk_1E684E388, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.reset(reply:));
}

uint64_t RemoteConversationService.cancel(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v8 = v6;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 1, 1, v15);
  v16 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v16 != -1)
    swift_once();
  v18 = static ConversationActor.shared;
  v19 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v17, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v18;
  v20[3] = v19;
  v20[4] = v8;
  v20[5] = a1;
  v20[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, a6, (uint64_t)v20);
  return swift_release();
}

uint64_t RemoteConversationService.ensureReady(reply:)(uint64_t a1, uint64_t a2)
{
  return RemoteConversationService.cancel(reply:)(a1, a2, (uint64_t)"ensureReady(reply:)", 19, (uint64_t)&unk_1E684E3B0, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.ensureReady(reply:));
}

uint64_t RemoteConversationService.startTurn(turnData:bridge:reply:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v5 = v4;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  swift_getObjectType();
  v13 = ServiceBridge.errorHandlingProxy.getter();
  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v11, 1, 1, v14);
  v15 = one-time initialization token for shared;
  swift_retain();
  v16 = a1;
  swift_retain();
  swift_retain();
  if (v15 != -1)
    swift_once();
  v18 = static ConversationActor.shared;
  v19 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v17, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v18;
  v20[3] = v19;
  v20[4] = v5;
  v20[5] = v16;
  v20[6] = v13;
  v20[7] = a3;
  v20[8] = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.startTurn(turnData:bridge:reply:), (uint64_t)v20);
  swift_release();
  return swift_release();
}

uint64_t RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  char *v32;
  id v33;
  uint64_t v34;

  v5 = v4;
  v34 = a3;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v17 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  v18 = a2;
  v32 = v14;
  v33 = v18;
  v20 = v9;
  v21 = a4;
  v22 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v5;
  if (v17 != -1)
    swift_once();
  v24 = static ConversationActor.shared;
  v25 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v19, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v26 = (*(unsigned __int8 *)(v10 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v27 = (v11 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = (char *)swift_allocObject();
  *((_QWORD *)v28 + 2) = v24;
  *((_QWORD *)v28 + 3) = v25;
  v29 = v34;
  *((_QWORD *)v28 + 4) = v23;
  *((_QWORD *)v28 + 5) = v29;
  *((_QWORD *)v28 + 6) = v21;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v28[v26], v22, v20);
  *(_QWORD *)&v28[v27] = v33;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v32, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:), (uint64_t)v28);
  return swift_release();
}

uint64_t RemoteConversationService.accept(inputData:speechData:reply:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;

  v6 = v5;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
  outlined copy of Data._Representation(a1, a2);
  v17 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  v19 = a3;
  if (v17 != -1)
    swift_once();
  v20 = static ConversationActor.shared;
  v21 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v18, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v20;
  v22[3] = v21;
  v22[4] = a1;
  v22[5] = a2;
  v22[6] = a4;
  v22[7] = a5;
  v22[8] = v6;
  v22[9] = v19;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.accept(inputData:speechData:reply:), (uint64_t)v22);
  return swift_release();
}

uint64_t RemoteConversationService.paraphrase(reply:)(uint64_t a1, uint64_t a2)
{
  return RemoteConversationService.cancel(reply:)(a1, a2, (uint64_t)"paraphrase(reply:)", 18, (uint64_t)&unk_1E684E450, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.paraphrase(reply:));
}

uint64_t RemoteConversationService.prepare(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RemoteConversationService.prepare(bridge:reply:)(a1, a2, a3, (uint64_t)"prepare(bridge:reply:)", 22, (uint64_t)&unk_1E684E478, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.prepare(bridge:reply:));
}

uint64_t RemoteConversationService.commit(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RemoteConversationService.prepare(bridge:reply:)(a1, a2, a3, (uint64_t)"commit(bridge:reply:)", 21, (uint64_t)&unk_1E684E4A0, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.commit(bridge:reply:));
}

uint64_t RemoteConversationService.prepare(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  v9 = v7;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
  v17 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v17 != -1)
    swift_once();
  v19 = static ConversationActor.shared;
  v20 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v18, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v19;
  v21[3] = v20;
  v21[4] = v9;
  v21[5] = a2;
  v21[6] = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, a7, (uint64_t)v21);
  return swift_release();
}

uint64_t RemoteConversationService.isEmpty(reply:)(uint64_t a1, uint64_t a2)
{
  return RemoteConversationService.cancel(reply:)(a1, a2, (uint64_t)"isEmpty(reply:)", 15, (uint64_t)&unk_1E684E4C8, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.isEmpty(reply:));
}

uint64_t RemoteConversationService.isCorrectable(reply:)(uint64_t a1, uint64_t a2)
{
  return RemoteConversationService.cancel(reply:)(a1, a2, (uint64_t)"isCorrectable(reply:)", 21, (uint64_t)&unk_1E684E4F0, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.isCorrectable(reply:));
}

uint64_t RemoteConversationService.flexibleExecutionSupportOptions(reply:)(uint64_t a1, uint64_t a2)
{
  return RemoteConversationService.cancel(reply:)(a1, a2, (uint64_t)"flexibleExecutionSupportOptions(reply:)", 39, (uint64_t)&unk_1E684E518, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:));
}

uint64_t RemoteConversationService.drainAsyncWork(reply:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v9 != -1)
    swift_once();
  v11 = static ConversationActor.shared;
  v12 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v10, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v11;
  v13[3] = v12;
  v13[4] = v2;
  v13[5] = a1;
  v13[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.drainAsyncWork(reply:), (uint64_t)v13);
  return swift_release();
}

uint64_t ConversationActor.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  return v0;
}

uint64_t static ConversationActor.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t ConversationActor.deinit()
{
  uint64_t v0;

  swift_defaultActor_destroy();
  return v0;
}

uint64_t ConversationActor.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t ConversationActor.init()()
{
  uint64_t v0;

  swift_defaultActor_initialize();
  return v0;
}

uint64_t ConversationActor.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for static GlobalActor.shared.getter in conformance ConversationActor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t protocol witness for static GlobalActor.sharedUnownedExecutor.getter in conformance ConversationActor()
{
  type metadata accessor for ConversationActor();
  return static GlobalActor.sharedUnownedExecutor.getter();
}

uint64_t one-time initialization function for ensureReadyTimeout()
{
  uint64_t v0;

  v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static RemoteConversationService.ensureReadyTimeout);
  *(_QWORD *)__swift_project_value_buffer(v0, (uint64_t)static RemoteConversationService.ensureReadyTimeout) = 500;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

uint64_t RemoteConversationService.turnDataProvider.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_turnDataProvider);
  swift_retain();
  return v1;
}

_QWORD *RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v32 = a6;
  v29 = a2;
  v30 = a3;
  v14 = *(_QWORD *)(a1 + 24);
  v27 = *(_QWORD *)(a1 + 32);
  v28 = a9;
  v15 = __swift_mutable_project_boxed_opaque_existential_1(a1, v14);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  v19 = *(_QWORD *)(a4 + 24);
  v20 = *(_QWORD *)(a4 + 32);
  v21 = __swift_mutable_project_boxed_opaque_existential_1(a4, v19);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v24 + 16))(v23);
  v25 = specialized RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)((uint64_t)v17, v29, v30, (uint64_t)v23, a5, v32, a7, a8, v28, v31, v14, v19, v27, v20);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v25;
}

uint64_t closure #1 in RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)()
{
  return swift_task_switch();
}

{
  uint64_t v0;

  if (one-time initialization token for shared != -1)
    swift_once();
  *(_QWORD *)(v0 + 16) = static ReactiveUIEventActor.shared;
  return swift_task_switch();
}

{
  uint64_t v0;

  ReactiveUIEventActor.run()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RemoteConversationService.warmup(refId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.warmup(refId:reply:)()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(v0 + 40);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 16) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 40));
  v2 = dispatch thunk of FlowPlugin.warmup(refId:)();
  v1(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v8[26] = v12;
  v8[27] = v13;
  v8[24] = a7;
  v8[25] = a8;
  v8[22] = a5;
  v8[23] = a6;
  v8[21] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v8[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  v9 = type metadata accessor for UUID();
  v8[31] = v9;
  v8[32] = *(_QWORD *)(v9 - 8);
  v8[33] = swift_task_alloc();
  v10 = type metadata accessor for Input();
  v8[34] = v10;
  v8[35] = *(_QWORD *)(v10 - 8);
  v8[36] = swift_task_alloc();
  v8[37] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  objc_class *CanHandleResult;
  _BYTE *v23;
  id v24;
  __int128 v26;
  uint64_t v27;
  void (*v28)(id);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  objc_super *v32;

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type Input and conformance Input, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A0]);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  v1 = (__int128 *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 200);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v2, v3, v4);
  outlined init with copy of ReferenceResolutionClientProtocol(v6 + 16, v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowPlugin);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowPluginExtended);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v7 = *(_QWORD *)(v0 + 296);
    v8 = *(_QWORD *)(v0 + 264);
    v30 = *(_QWORD *)(v0 + 280);
    v32 = *(objc_super **)(v0 + 272);
    v27 = *(_QWORD *)(v0 + 256);
    v29 = *(_QWORD *)(v0 + 248);
    v9 = *(_QWORD *)(v0 + 200);
    v26 = *(_OWORD *)(v0 + 184);
    outlined init with take of ReferenceResolutionClientProtocol(v1, v0 + 16);
    type metadata accessor for ConversationSELFHelper();
    static ConversationSELFHelper.shared.getter();
    Input.identifier.getter();
    v10 = swift_task_alloc();
    *(_QWORD *)(v10 + 16) = v9;
    *(_QWORD *)(v10 + 24) = v0 + 16;
    *(_QWORD *)(v10 + 32) = v7;
    *(_OWORD *)(v10 + 40) = v26;
    dispatch thunk of ConversationSELFHelper.withExecutionFlowPluginFindFlowTime<A>(rcId:hypothesisId:_:)();
    swift_release();
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v8, v29);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    (*(void (**)(uint64_t, objc_super *))(v30 + 8))(v7, v32);
  }
  else
  {
    *(_QWORD *)(v0 + 128) = 0;
    *v1 = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for FlowPluginExtended?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1B4BE6000, v12, v13, "Warning: Old flow plugin that doesn't support findFlowForX. Cannot safely ask it if it will handle input, so assuming it will.", v14, 2u);
      MEMORY[0x1B5E44758](v14, -1, -1);
    }
    v16 = *(_QWORD *)(v0 + 272);
    v15 = *(_QWORD *)(v0 + 280);
    v18 = *(_QWORD *)(v0 + 248);
    v17 = *(_QWORD *)(v0 + 256);
    v20 = *(_QWORD *)(v0 + 232);
    v19 = *(_QWORD *)(v0 + 240);
    v21 = *(_QWORD *)(v0 + 224);
    v31 = *(_QWORD *)(v0 + 296);
    v28 = *(void (**)(id))(v0 + 184);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v19, 1, 1, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v21, 1, 1, v16);
    outlined init with copy of ReferenceResolutionClientProtocol?(v19, v20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    CanHandleResult = (objc_class *)type metadata accessor for ConversationCanHandleResult();
    v23 = objc_allocWithZone(CanHandleResult);
    v23[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
    v23[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
    outlined init with copy of ReferenceResolutionClientProtocol?(v21, (uint64_t)&v23[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v20, (uint64_t)&v23[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
    *(_QWORD *)(v0 + 136) = v23;
    *(_QWORD *)(v0 + 144) = CanHandleResult;
    v24 = objc_msgSendSuper2((objc_super *)(v0 + 136), sel_init);
    outlined destroy of ReferenceResolutionClientProtocol?(v20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?(v21, &demangling cache variable for type metadata for Input?);
    outlined destroy of ReferenceResolutionClientProtocol?(v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v28(v24);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v31, v16);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)(uint64_t a1, char *a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  id *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  objc_class *CanHandleResult;
  _BYTE *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  objc_class *v79;
  _BYTE *v80;
  id v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  objc_class *v94;
  _BYTE *v95;
  void *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  objc_class *v112;
  _BYTE *v113;
  id v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  objc_class *v128;
  _BYTE *v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  objc_class *v145;
  _BYTE *v146;
  id v147;
  uint64_t v149;
  NSObject *v150;
  os_log_type_t v151;
  uint8_t *v152;
  void (*v153)(char *);
  char *v154;
  uint64_t v155;
  void (*v156)(char *, uint64_t);
  id v157;
  id v158;
  id v159;
  NSObject *v160;
  os_log_type_t v161;
  uint8_t *v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  id *v168;
  uint64_t v169;
  uint64_t v170;
  id v171;
  uint64_t v172;
  char *v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void (*v200)(void);
  char *v201;
  char *v202;
  char *v203;
  id *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  objc_super v212;
  objc_super v213;
  objc_super v214;
  objc_super v215;
  objc_super v216;
  objc_super v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220[5];
  char *v221;

  v199 = a5;
  v200 = a4;
  v208 = a3;
  v206 = a2;
  v194 = a1;
  v196 = type metadata accessor for Input();
  v195 = *(_QWORD *)(v196 - 8);
  MEMORY[0x1E0C80A78](v196);
  v175 = (char *)&v172 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = type metadata accessor for Parse();
  v177 = *(_QWORD *)(v178 - 8);
  v6 = MEMORY[0x1E0C80A78](v178);
  v173 = (char *)&v172 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v174 = (char *)&v172 - v9;
  MEMORY[0x1E0C80A78](v8);
  v202 = (char *)&v172 - v10;
  v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Parse, Error>);
  v11 = MEMORY[0x1E0C80A78](v176);
  v201 = (char *)&v172 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v203 = (char *)&v172 - v14;
  MEMORY[0x1E0C80A78](v13);
  v204 = (id *)((char *)&v172 - v15);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment)?);
  MEMORY[0x1E0C80A78](v16);
  v179 = (char *)&v172 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NamedParseTransformer?);
  MEMORY[0x1E0C80A78](v18);
  v184 = (char *)&v172 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Parse, Parse>?);
  MEMORY[0x1E0C80A78](v20);
  v183 = (char *)&v172 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Parse, Parse>);
  v185 = *(_QWORD *)(v186 - 8);
  MEMORY[0x1E0C80A78](v186);
  v180 = (char *)&v172 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1E0C80A78](v23);
  v191 = (char *)&v172 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v26 = MEMORY[0x1E0C80A78](v25);
  v190 = (uint64_t)&v172 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v192 = (char *)&v172 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment)?);
  MEMORY[0x1E0C80A78](v29);
  v182 = (char *)&v172 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = type metadata accessor for UUID();
  v205 = *(_QWORD *)(v209 - 8);
  v31 = MEMORY[0x1E0C80A78](v209);
  v187 = (char *)&v172 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v189 = (char *)&v172 - v33;
  v193 = type metadata accessor for RemoteConversationService.State(0);
  v34 = MEMORY[0x1E0C80A78](v193);
  v188 = (uint64_t)&v172 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v34);
  v181 = (uint64_t)&v172 - v37;
  MEMORY[0x1E0C80A78](v36);
  v39 = (char *)&v172 - v38;
  v40 = type metadata accessor for FlowTraceEvent();
  v41 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v43 = (uint64_t *)((char *)&v172 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = type metadata accessor for FlowSearchResult();
  v197 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v46 = (char *)&v172 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  swift_allocObject();
  v47 = SiriEnvironment.init(parent:)();
  type metadata accessor for UserIdentityProvider();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type UserIdentityProvider and conformance UserIdentityProvider, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C058], MEMORY[0x1E0D9C040]);
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  type metadata accessor for FlowTaskProvider();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type FlowTaskProvider and conformance FlowTaskProvider, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B088], MEMORY[0x1E0D9B078]);
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  type metadata accessor for CallStateEnvironmentProvider();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type CallStateEnvironmentProvider and conformance CallStateEnvironmentProvider, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C3D8], MEMORY[0x1E0D9C3C0]);
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  v210 = v206;
  v211 = v208;
  v207 = v47;
  v198 = v44;
  v48 = v221;
  static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
  v206 = v48;
  v221 = v46;
  v49 = FlowSearchResult.flow.getter();
  if (v49)
  {
    *v43 = v49;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v41 + 104))(v43, *MEMORY[0x1E0D9AFF8], v40);
    static FlowTrace.trace(event:)();
    (*(void (**)(uint64_t *, uint64_t))(v41 + 8))(v43, v40);
  }
  else
  {
    FlowSearchResult.actingFlow.getter();
    if (v219)
    {
      outlined init with take of ReferenceResolutionClientProtocol(&v218, (uint64_t)v220);
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v220, (uint64_t)v43);
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v41 + 104))(v43, *MEMORY[0x1E0D9AFC0], v40);
      static FlowTrace.trace(event:)();
      (*(void (**)(uint64_t *, uint64_t))(v41 + 8))(v43, v40);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v220);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v218, &demangling cache variable for type metadata for ActingFlow?);
    }
  }
  v50 = v204;
  v51 = v203;
  v52 = v202;
  v53 = (uint64_t)v201;
  v220[3] = (uint64_t)&type metadata for EncoreFeatureFlag;
  v220[4] = lazy protocol witness table accessor for type EncoreFeatureFlag and conformance EncoreFeatureFlag();
  v54 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v220);
  if ((v54 & 1) != 0)
  {
    FlowSearchResult.actingFlow.getter();
    if (v219)
    {
      outlined init with take of ReferenceResolutionClientProtocol(&v218, (uint64_t)v220);
      v55 = v194 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
      swift_beginAccess();
      outlined init with copy of ConversationHelperInput(v55, (uint64_t)v39, type metadata accessor for RemoteConversationService.State);
      if (swift_getEnumCaseMultiPayload())
      {
        outlined destroy of CamOutput((uint64_t)v39, type metadata accessor for RemoteConversationService.State);
        if (one-time initialization token for executor != -1)
          swift_once();
        v56 = type metadata accessor for Logger();
        __swift_project_value_buffer(v56, (uint64_t)static Logger.executor);
        v57 = Logger.logObject.getter();
        v58 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v57, v58))
        {
          v59 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v59 = 0;
          _os_log_impl(&dword_1B4BE6000, v57, v58, "canHandle() called while we're not in a turn. This means we cannot keep the provided input in-memory for followup calls to accept().", v59, 2u);
          MEMORY[0x1B5E44758](v59, -1, -1);
        }

        v60 = (uint64_t)v192;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v205 + 56))(v192, 1, 1, v209);
        v61 = (uint64_t)v191;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v191, 1, 1, v196);
        v62 = v190;
        outlined init with copy of ReferenceResolutionClientProtocol?(v60, v190, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        CanHandleResult = (objc_class *)type metadata accessor for ConversationCanHandleResult();
        v64 = objc_allocWithZone(CanHandleResult);
        v64[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
        v64[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
        outlined init with copy of ReferenceResolutionClientProtocol?(v61, (uint64_t)&v64[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
        outlined init with copy of ReferenceResolutionClientProtocol?(v62, (uint64_t)&v64[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v213.receiver = v64;
        v213.super_class = CanHandleResult;
        v65 = objc_msgSendSuper2(&v213, sel_init);
LABEL_34:
        v96 = v65;
        outlined destroy of ReferenceResolutionClientProtocol?(v62, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for Input?);
        outlined destroy of ReferenceResolutionClientProtocol?(v60, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        ((void (*)(void *))v200)(v96);
        swift_release();

LABEL_43:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v220);
        return (*(uint64_t (**)(char *, uint64_t))(v197 + 8))(v221, v198);
      }
      v204 = (id *)*((_QWORD *)v39 + 10);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v39 + 40), &demangling cache variable for type metadata for Conversational?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      v115 = v189;
      UUID.init()();
      v203 = *(char **)(v205 + 16);
      v116 = (uint64_t)v187;
      ((void (*)(char *, char *, uint64_t))v203)(v187, v115, v209);
      v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
      v118 = (uint64_t)v182;
      v119 = (uint64_t)&v182[*(int *)(v117 + 48)];
      v120 = *(int *)(v117 + 64);
      v121 = v195;
      v122 = v196;
      (*(void (**)(char *, uint64_t, uint64_t))(v195 + 16))(v182, v208, v196);
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v220, v119);
      *(_QWORD *)(v118 + v120) = v207;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 56))(v118, 0, 1, v117);
      swift_beginAccess();
      swift_retain();
      specialized Dictionary.subscript.setter(v118, v116);
      swift_endAccess();
      v123 = (uint64_t)v192;
      v124 = v209;
      ((void (*)(char *, char *, uint64_t))v203)(v192, v115, v209);
      v125 = v205;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v205 + 56))(v123, 0, 1, v124);
      v126 = (uint64_t)v191;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v191, 1, 1, v122);
      v127 = v190;
      outlined init with copy of ReferenceResolutionClientProtocol?(v123, v190, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v128 = (objc_class *)type metadata accessor for ConversationCanHandleResult();
      v129 = objc_allocWithZone(v128);
      v129[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
      v129[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
      outlined init with copy of ReferenceResolutionClientProtocol?(v126, (uint64_t)&v129[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v127, (uint64_t)&v129[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v212.receiver = v129;
      v212.super_class = v128;
      v130 = objc_msgSendSuper2(&v212, sel_init);
      outlined destroy of ReferenceResolutionClientProtocol?(v127, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of ReferenceResolutionClientProtocol?(v126, &demangling cache variable for type metadata for Input?);
      outlined destroy of ReferenceResolutionClientProtocol?(v123, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      ((void (*)(id))v200)(v130);

      swift_release();
      goto LABEL_42;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v218, &demangling cache variable for type metadata for ActingFlow?);
  }
  FlowSearchResult.actingFlow.getter();
  if (v219)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v218, (uint64_t)v220);
    v66 = FlowSearchResult.flow.getter();
    swift_release();
    if (!v66)
    {
      v87 = v194 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
      swift_beginAccess();
      v88 = v87;
      v89 = v181;
      outlined init with copy of ConversationHelperInput(v88, v181, type metadata accessor for RemoteConversationService.State);
      if (swift_getEnumCaseMultiPayload())
      {
        outlined destroy of CamOutput(v89, type metadata accessor for RemoteConversationService.State);
        if (one-time initialization token for executor != -1)
          swift_once();
        v90 = type metadata accessor for Logger();
        __swift_project_value_buffer(v90, (uint64_t)static Logger.executor);
        v91 = Logger.logObject.getter();
        v92 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v91, v92))
        {
          v93 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v93 = 0;
          _os_log_impl(&dword_1B4BE6000, v91, v92, "canHandle() called while we're not in a turn. This means we cannot keep the provided input in-memory for followup calls to accept().", v93, 2u);
          MEMORY[0x1B5E44758](v93, -1, -1);
        }

        v60 = (uint64_t)v192;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v205 + 56))(v192, 1, 1, v209);
        v61 = (uint64_t)v191;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v191, 1, 1, v196);
        v62 = v190;
        outlined init with copy of ReferenceResolutionClientProtocol?(v60, v190, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v94 = (objc_class *)type metadata accessor for ConversationCanHandleResult();
        v95 = objc_allocWithZone(v94);
        v95[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
        v95[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
        outlined init with copy of ReferenceResolutionClientProtocol?(v61, (uint64_t)&v95[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
        outlined init with copy of ReferenceResolutionClientProtocol?(v62, (uint64_t)&v95[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v215.receiver = v95;
        v215.super_class = v94;
        v65 = objc_msgSendSuper2(&v215, sel_init);
        goto LABEL_34;
      }
      v204 = *(id **)(v89 + 80);
      outlined destroy of ReferenceResolutionClientProtocol?(v89 + 40, &demangling cache variable for type metadata for Conversational?);
      __swift_destroy_boxed_opaque_existential_1(v89);
      v133 = v189;
      UUID.init()();
      v203 = *(char **)(v205 + 16);
      v134 = (uint64_t)v187;
      ((void (*)(char *, char *, uint64_t))v203)(v187, v133, v209);
      v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
      v136 = (uint64_t)v182;
      v137 = (uint64_t)&v182[*(int *)(v135 + 48)];
      v138 = *(int *)(v135 + 64);
      v139 = v195;
      v140 = v196;
      (*(void (**)(char *, uint64_t, uint64_t))(v195 + 16))(v182, v208, v196);
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v220, v137);
      *(_QWORD *)(v136 + v138) = v207;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 56))(v136, 0, 1, v135);
      swift_beginAccess();
      swift_retain();
      specialized Dictionary.subscript.setter(v136, v134);
      swift_endAccess();
      v141 = (uint64_t)v192;
      v142 = v209;
      ((void (*)(char *, char *, uint64_t))v203)(v192, v133, v209);
      v125 = v205;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v205 + 56))(v141, 0, 1, v142);
      v143 = (uint64_t)v191;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56))(v191, 1, 1, v140);
      v144 = v190;
      outlined init with copy of ReferenceResolutionClientProtocol?(v141, v190, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v145 = (objc_class *)type metadata accessor for ConversationCanHandleResult();
      v146 = objc_allocWithZone(v145);
      v146[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
      v146[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
      outlined init with copy of ReferenceResolutionClientProtocol?(v143, (uint64_t)&v146[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v144, (uint64_t)&v146[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v214.receiver = v146;
      v214.super_class = v145;
      v147 = objc_msgSendSuper2(&v214, sel_init);
      outlined destroy of ReferenceResolutionClientProtocol?(v144, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of ReferenceResolutionClientProtocol?(v143, &demangling cache variable for type metadata for Input?);
      outlined destroy of ReferenceResolutionClientProtocol?(v141, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      ((void (*)(id))v200)(v147);
      swift_release();

LABEL_42:
      swift_release();
      (*(void (**)(char *, uint64_t))(v125 + 8))(v189, v209);
      goto LABEL_43;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v220);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v218, &demangling cache variable for type metadata for ActingFlow?);
  }
  v67 = FlowSearchResult.flow.getter();
  if (v67)
  {
    v68 = (char *)v67;
    v69 = v194 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
    swift_beginAccess();
    v70 = v69;
    v71 = v188;
    outlined init with copy of ConversationHelperInput(v70, v188, type metadata accessor for RemoteConversationService.State);
    if (swift_getEnumCaseMultiPayload())
    {
      outlined destroy of CamOutput(v71, type metadata accessor for RemoteConversationService.State);
      if (one-time initialization token for executor != -1)
        swift_once();
      v72 = type metadata accessor for Logger();
      __swift_project_value_buffer(v72, (uint64_t)static Logger.executor);
      v73 = Logger.logObject.getter();
      v74 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v75 = 0;
        _os_log_impl(&dword_1B4BE6000, v73, v74, "canHandle() called while we're not in a turn. This means we cannot keep the provided input in-memory for followup calls to accept().", v75, 2u);
        MEMORY[0x1B5E44758](v75, -1, -1);
      }

      v76 = (uint64_t)v192;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v205 + 56))(v192, 1, 1, v209);
      v77 = (uint64_t)v191;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v195 + 56))(v191, 1, 1, v196);
      v78 = v190;
      outlined init with copy of ReferenceResolutionClientProtocol?(v76, v190, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v79 = (objc_class *)type metadata accessor for ConversationCanHandleResult();
      v80 = objc_allocWithZone(v79);
      v80[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
      v80[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
      outlined init with copy of ReferenceResolutionClientProtocol?(v77, (uint64_t)&v80[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v78, (uint64_t)&v80[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v217.receiver = v80;
      v217.super_class = v79;
      v81 = objc_msgSendSuper2(&v217, sel_init);
      outlined destroy of ReferenceResolutionClientProtocol?(v78, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of ReferenceResolutionClientProtocol?(v77, &demangling cache variable for type metadata for Input?);
      outlined destroy of ReferenceResolutionClientProtocol?(v76, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      ((void (*)(id))v200)(v81);
      swift_release();
      swift_release();

    }
    else
    {
      v204 = *(id **)(v71 + 80);
      outlined destroy of ReferenceResolutionClientProtocol?(v71 + 40, &demangling cache variable for type metadata for Conversational?);
      __swift_destroy_boxed_opaque_existential_1(v71);
      v97 = v189;
      UUID.init()();
      v202 = *(char **)(v205 + 16);
      v98 = (uint64_t)v187;
      ((void (*)(char *, char *, uint64_t))v202)(v187, v97, v209);
      v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
      v100 = *(int *)(v99 + 48);
      v101 = *(int *)(v99 + 64);
      v102 = v195;
      v103 = (uint64_t)v179;
      v104 = v196;
      (*(void (**)(char *, uint64_t, uint64_t))(v195 + 16))(v179, v208, v196);
      *(_QWORD *)(v103 + v100) = v68;
      v203 = v68;
      *(_QWORD *)(v103 + v101) = v207;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v103, 0, 1, v99);
      swift_beginAccess();
      swift_retain();
      swift_retain();
      specialized Dictionary.subscript.setter(v103, v98);
      swift_endAccess();
      v105 = (uint64_t)v192;
      v106 = v189;
      v107 = v209;
      ((void (*)(char *, char *, uint64_t))v202)(v192, v189, v209);
      v108 = v205;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v205 + 56))(v105, 0, 1, v107);
      v109 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v102 + 56);
      v110 = (uint64_t)v191;
      v109(v191, 1, 1, v104);
      v111 = v190;
      outlined init with copy of ReferenceResolutionClientProtocol?(v105, v190, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v112 = (objc_class *)type metadata accessor for ConversationCanHandleResult();
      v113 = objc_allocWithZone(v112);
      v113[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
      v113[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
      outlined init with copy of ReferenceResolutionClientProtocol?(v110, (uint64_t)&v113[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v111, (uint64_t)&v113[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v216.receiver = v113;
      v216.super_class = v112;
      v114 = objc_msgSendSuper2(&v216, sel_init);
      outlined destroy of ReferenceResolutionClientProtocol?(v111, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined destroy of ReferenceResolutionClientProtocol?(v110, &demangling cache variable for type metadata for Input?);
      outlined destroy of ReferenceResolutionClientProtocol?(v105, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      ((void (*)(id))v200)(v114);
      swift_release();

      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v108 + 8))(v106, v209);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v197 + 8))(v221, v198);
  }
  v82 = v184;
  FlowSearchResult.transformer.getter();
  v83 = (uint64_t)v82;
  v84 = type metadata accessor for NamedParseTransformer();
  v85 = *(_QWORD *)(v84 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v83, (uint64_t *)&demangling cache variable for type metadata for NamedParseTransformer?);
    v86 = (uint64_t)v183;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v185 + 56))(v183, 1, 1, v186);
LABEL_38:
    outlined destroy of ReferenceResolutionClientProtocol?(v86, &demangling cache variable for type metadata for Transformer<Parse, Parse>?);
    if (one-time initialization token for unsupported != -1)
      swift_once();
    ((void (*)(uint64_t))v200)(static ConversationCanHandleResult.unsupported);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v197 + 8))(v221, v198);
  }
  v86 = (uint64_t)v183;
  NamedParseTransformer.resolve()();
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v83, v84);
  v131 = v185;
  v132 = v186;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v185 + 48))(v86, 1, v186) == 1)
    goto LABEL_38;
  (*(void (**)(char *, uint64_t, uint64_t))(v131 + 32))(v180, v86, v132);
  if (one-time initialization token for executor != -1)
    swift_once();
  v149 = type metadata accessor for Logger();
  __swift_project_value_buffer(v149, (uint64_t)static Logger.executor);
  v150 = Logger.logObject.getter();
  v151 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v150, v151))
  {
    v152 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v152 = 0;
    _os_log_impl(&dword_1B4BE6000, v150, v151, "Conversation wants to reform input", v152, 2u);
    MEMORY[0x1B5E44758](v152, -1, -1);
  }

  v153 = (void (*)(char *))Transformer.transform.getter();
  Input.parse.getter();
  v154 = v206;
  v153(v52);
  v206 = v154;
  swift_release();
  v155 = v177;
  v156 = *(void (**)(char *, uint64_t))(v177 + 8);
  v156(v52, v178);
  if (v154)
  {
    *v51 = v206;
    swift_storeEnumTagMultiPayload();
    v206 = 0;
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v53, (uint64_t)v51, &demangling cache variable for type metadata for Result<Parse, Error>);
  }
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v51, (uint64_t)v50, &demangling cache variable for type metadata for Result<Parse, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v157 = *v50;
    v158 = *v50;
    v159 = v157;
    v160 = Logger.logObject.getter();
    v161 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v160, v161))
    {
      v162 = (uint8_t *)swift_slowAlloc();
      v163 = swift_slowAlloc();
      v220[0] = v163;
      *(_DWORD *)v162 = 136315138;
      *(_QWORD *)&v218 = v157;
      v164 = v157;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v165 = String.init<A>(describing:)();
      *(_QWORD *)&v218 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v165, v166, v220);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v160, v161, "Conversation wants to reform input, but got an error in transformation: %s", v162, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v163, -1, -1);
      MEMORY[0x1B5E44758](v162, -1, -1);
    }
    else
    {

    }
    if (one-time initialization token for unsupported != -1)
      swift_once();
    ((void (*)(uint64_t))v200)(static ConversationCanHandleResult.unsupported);
    swift_release();

  }
  else
  {
    v167 = v174;
    v168 = v50;
    v169 = v178;
    (*(void (**)(char *, id *, uint64_t))(v155 + 32))(v174, v168, v178);
    (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v173, v167, v169);
    v170 = (uint64_t)v175;
    Input.init(parse:)();
    v171 = specialized static ConversationCanHandleResult.reformTo(input:)(v170);
    v200();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v195 + 8))(v170, v196);
    v156(v167, v169);
  }
  (*(void (**)(char *, uint64_t))(v197 + 8))(v221, v198);
  return (*(uint64_t (**)(char *, uint64_t))(v185 + 8))(v180, v186);
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for Parse();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  Input.parse.getter();
  dispatch thunk of FlowPluginExtended.findFlowForX(parse:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t RemoteConversationService.FlowAndInputRegistry.register(flow:input:environment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment)?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
  v16 = (uint64_t)&v10[*(int *)(v15 + 48)];
  v17 = *(int *)(v15 + 64);
  v18 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v10, a2, v18);
  outlined init with copy of ReferenceResolutionClientProtocol(a1, v16);
  *(_QWORD *)&v10[v17] = a3;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 0, 1, v15);
  swift_beginAccess();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)v14);
  return swift_endAccess();
}

{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment)?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
  v16 = *(int *)(v15 + 48);
  v17 = *(int *)(v15 + 64);
  v18 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v10, a2, v18);
  *(_QWORD *)&v10[v16] = a1;
  *(_QWORD *)&v10[v17] = a3;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 0, 1, v15);
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)v10, (uint64_t)v14);
  return swift_endAccess();
}

uint64_t closure #1 in RemoteConversationService.cancel(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[7] = a5;
  v6[8] = a6;
  v6[6] = a4;
  v6[9] = type metadata accessor for RemoteConversationService.State(0);
  v6[10] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.cancel(reply:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  void (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v2, v1, type metadata accessor for RemoteConversationService.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v4 = *(_QWORD *)(v0 + 80);
      v5 = *(void (**)(void))(v0 + 56);
      v6 = v4
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                  + 64);
      swift_bridgeObjectRelease();
      SiriKitRuntimeState.invalidateCurrentTurn()();
      v5();
      v7 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      __swift_destroy_boxed_opaque_existential_1(v4 + 40);
      __swift_destroy_boxed_opaque_existential_1(v4);
      goto LABEL_10;
    }
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 80);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v8 + 40, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1(v8);
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v15 = v13;
    *(_DWORD *)v12 = 136315138;
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x72286C65636E6163, 0xEE00293A796C7065, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "No conversation is active, ignoring %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v13, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }

  (*(void (**)(void))(v0 + 56))();
LABEL_10:
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RemoteConversationService.reset(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[30] = a5;
  v6[31] = a6;
  v6[29] = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v6[32] = swift_task_alloc();
  v6[33] = type metadata accessor for RemoteConversationService.State(0);
  v6[34] = swift_task_alloc();
  v6[35] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.reset(reply:)()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v21;

  v1 = (__int128 *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 232) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v3, v2, type metadata accessor for RemoteConversationService.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v5 = *(_QWORD *)(v0 + 280);
      v6 = v5
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                  + 64);
      swift_bridgeObjectRelease();
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v5 + 40), v0 + 16);
      v7 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      __swift_destroy_boxed_opaque_existential_1(v5);
      goto LABEL_10;
    }
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 280);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v8 + 40, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1(v8);
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v21 = v13;
    *(_DWORD *)v12 = 136315138;
    *(_QWORD *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6572287465736572, 0xED0000293A796C70, &v21);
    v1 = (__int128 *)(v0 + 136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "No conversation is active, ignoring %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v13, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }

  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
LABEL_10:
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, (uint64_t)v1, &demangling cache variable for type metadata for Conversational?);
  if (*(_QWORD *)(v0 + 160))
  {
    v14 = *(_QWORD *)(v0 + 256);
    outlined init with take of ReferenceResolutionClientProtocol(v1, v0 + 96);
    v15 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 96, v0 + 56);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 24) = 0;
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), v16 + 32);
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v14, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in RemoteConversationService.reset(reply:), v16);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v14, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v1, &demangling cache variable for type metadata for Conversational?);
  }
  v17 = *(_QWORD *)(v0 + 272);
  v18 = *(void (**)(uint64_t))(v0 + 240);
  SiriKitRuntimeState.invalidateCurrentTurn()();
  SiriKitRuntimeState.taskService.getter();
  TaskService.onTurnInvalidated()();
  swift_release();
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  outlined assign with take of RemoteConversationService.State(v17, v3);
  v19 = swift_endAccess();
  v18(v19);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for Conversational?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.reset(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.reset(reply:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 16);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v3 + 8) + *(_QWORD *)(v3 + 8));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v4;
  *v4 = v0;
  v4[1] = closure #1 in closure #1 in RemoteConversationService.reset(reply:);
  return v6(v2, v3);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in RemoteConversationService.ensureReady(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[32] = a5;
  v6[33] = a6;
  v6[31] = a4;
  v6[34] = type metadata accessor for RemoteConversationService.State(0);
  v6[35] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v6[36] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.ensureReady(reply:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD);
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 248) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v2, v1, type metadata accessor for RemoteConversationService.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v13 = (__int128 *)(v0 + 56);
    v14 = v0 + 136;
    v15 = *(_QWORD *)(v0 + 280) + 40;
    swift_release();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v15, v0 + 136, &demangling cache variable for type metadata for Conversational?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 136, v0 + 56, &demangling cache variable for type metadata for Conversational?);
    if (*(_QWORD *)(v0 + 80))
    {
      outlined init with take of ReferenceResolutionClientProtocol(v13, v0 + 176);
      if (one-time initialization token for executor != -1)
        swift_once();
      v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_1B4BE6000, v17, v18, "startTurn received for conversation which is awaiting input, ensuring ready", v19, 2u);
        MEMORY[0x1B5E44758](v19, -1, -1);
      }

      outlined destroy of ReferenceResolutionClientProtocol?(v14, &demangling cache variable for type metadata for Conversational?);
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 176), v0 + 16);
      goto LABEL_14;
    }
    v31 = *(_QWORD *)(v0 + 280);
    v32 = *(void (**)(_QWORD))(v0 + 256);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for Conversational?);
    v32(0);
    outlined destroy of ReferenceResolutionClientProtocol?(v14, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1(v31);
LABEL_23:
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v34 = v30;
      *(_DWORD *)v29 = 136315138;
      *(_QWORD *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000013, 0x80000001B4EFCEB0, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v27, v28, "No conversation is active, ignoring %s", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v30, -1, -1);
      MEMORY[0x1B5E44758](v29, -1, -1);
    }

    (*(void (**)(_QWORD))(v0 + 256))(0);
    goto LABEL_23;
  }
  v4 = *(_QWORD *)(v0 + 280);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
  swift_bridgeObjectRelease();
  outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v4 + 40), v0 + 96);
  if (one-time initialization token for executor != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1B4BE6000, v7, v8, "startTurn received for conversation which is executing, ensuring ready", v9, 2u);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }
  v10 = *(_QWORD *)(v0 + 280);

  v11 = v10 + *(int *)(v5 + 64);
  outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 96), v0 + 16);
  v12 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
LABEL_14:
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v0 + 280));
  v20 = *(_QWORD *)(v0 + 40);
  v21 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v20);
  if (one-time initialization token for ensureReadyTimeout != -1)
    swift_once();
  v22 = type metadata accessor for DispatchTimeInterval();
  v23 = __swift_project_value_buffer(v22, (uint64_t)static RemoteConversationService.ensureReadyTimeout);
  v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(v21 + 16) + *(_QWORD *)(v21 + 16));
  v24 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 296) = v24;
  *v24 = v0;
  v24[1] = closure #1 in RemoteConversationService.ensureReady(reply:);
  return v33(v23, v20, v21);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 256))(0);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void *);
  id v3;

  v1 = *(void **)(v0 + 304);
  v2 = *(void (**)(void *))(v0 + 256);
  v3 = v1;
  v2(v1);

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  v6 = v5;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 1, 1, v16);
  v17 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_retain();
  if (v17 != -1)
    swift_once();
  v19 = static ConversationActor.shared;
  v20 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v18, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v19;
  v21[3] = v20;
  v21[4] = v6;
  v21[5] = a1;
  v21[6] = a2;
  v21[7] = a3;
  v21[8] = a4;
  v21[9] = a5;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:), (uint64_t)v21);
  return swift_release();
}

uint64_t closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[6] = a8;
  v8[7] = v10;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void (*v15)(_QWORD, _QWORD);

  v1 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 16)
                                                 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_turnDataProvider))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  if (v1)
  {
    v2 = (void *)v1;
    if (one-time initialization token for executor != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "Starting turn from pre-cached turn data", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 48);
    v7 = *(_QWORD *)(v0 + 56);
    v9 = *(_QWORD *)(v0 + 40);

    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = v7;
    swift_retain();
    RemoteConversationService.startTurn(turnData:bridge:reply:)(v2, v9, (uint64_t)partial apply for closure #1 in closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:), v10);

    swift_release();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1B4BE6000, v12, v13, "No pre-cached turn data available, it will need to be re-sent.", v14, 2u);
      MEMORY[0x1B5E44758](v14, -1, -1);
    }
    v15 = *(void (**)(_QWORD, _QWORD))(v0 + 48);

    v15(0, 0);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RemoteConversationService.startTurn(turnData:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[28] = a7;
  v8[29] = a8;
  v8[26] = a5;
  v8[27] = a6;
  v8[25] = a4;
  v9 = type metadata accessor for UUID();
  v8[30] = v9;
  v8[31] = *(_QWORD *)(v9 - 8);
  v8[32] = swift_task_alloc();
  v8[33] = type metadata accessor for RemoteConversationService.State(0);
  v8[34] = swift_task_alloc();
  v8[35] = swift_task_alloc();
  type metadata accessor for RemoteConversationTurnData(0);
  v8[36] = swift_task_alloc();
  v8[37] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v8[38] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.startTurn(turnData:bridge:reply:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t *v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 312) = SiriKitRuntimeState.taskService.getter();
  v2 = *(void **)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_flowTask);
  if (v2)
  {
    v3 = v2;
    TaskService.onExistingXPCTask(_:)(v3);
    TaskService.onNewTurn()();

  }
  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 208)) + 0x98))();
  v4 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 200) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v5, v4, type metadata accessor for RemoteConversationService.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v14 = *(_QWORD *)(v0 + 280);
    v36 = *(_QWORD *)(v14 + 80);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v14 + 40, v0 + 16, &demangling cache variable for type metadata for Conversational?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v16 = *(_QWORD *)(v0 + 288);
    v15 = *(_QWORD *)(v0 + 296);
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
    outlined init with copy of ConversationHelperInput(v15, v16, type metadata accessor for RemoteConversationTurnData);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.debug.getter();
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(uint64_t **)(v0 + 288);
    if (v20)
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      v39 = v35;
      *(_DWORD *)v22 = 136380675;
      v23 = *v21;
      v24 = v21[1];
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of CamOutput((uint64_t)v21, type metadata accessor for RemoteConversationTurnData);
      _os_log_impl(&dword_1B4BE6000, v18, v19, "Multiple StartTurns while awaiting input. New executionRequestId=%{private}s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v35, -1, -1);
      MEMORY[0x1B5E44758](v22, -1, -1);
    }
    else
    {
      outlined destroy of CamOutput(*(_QWORD *)(v0 + 288), type metadata accessor for RemoteConversationTurnData);
    }

    v32 = *(_QWORD **)(v0 + 272);
    v8 = *(_QWORD *)(v0 + 280);
    RemoteConversationService.makeTurn(turnData:bridge:)(*(uint64_t **)(v0 + 296), *(_QWORD *)(v0 + 216), v32);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v0 + 16, (uint64_t)(v32 + 5), &demangling cache variable for type metadata for Conversational?);
    v32[10] = v36;
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of RemoteConversationService.State((uint64_t)v32, v5);
    swift_endAccess();
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v7 = *(uint64_t **)(v0 + 296);
    v9 = *(_QWORD **)(v0 + 272);
    v8 = *(_QWORD *)(v0 + 280);
    v10 = *(_QWORD *)(v0 + 216);
    v37 = v8
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                 + 64);
    swift_bridgeObjectRelease();
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v8 + 40), v0 + 56);
    RemoteConversationService.makeTurn(turnData:bridge:)(v7, v10, v9);
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), (uint64_t)(v9 + 5));
    type metadata accessor for RemoteConversationService.FlowAndInputRegistry();
    v11 = swift_allocObject();
    v12 = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v11 + 16) = MEMORY[0x1E0DEE9E0];
    *(_QWORD *)(v11 + 24) = v12;
    v9[10] = v11;
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of RemoteConversationService.State((uint64_t)v9, v5);
    swift_endAccess();
    v13 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v37, v13);
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1(v8);
    goto LABEL_18;
  }
  v25 = *(_QWORD *)(v0 + 272);
  RemoteConversationService.makeTurn(turnData:bridge:)(*(uint64_t **)(v0 + 296), *(_QWORD *)(v0 + 216), (_QWORD *)v25);
  type metadata accessor for RemoteConversationService.FlowAndInputRegistry();
  *(_OWORD *)(v25 + 40) = 0u;
  *(_OWORD *)(v25 + 56) = 0u;
  *(_QWORD *)(v25 + 72) = 0;
  v26 = swift_allocObject();
  v27 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v26 + 16) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v26 + 24) = v27;
  *(_QWORD *)(v25 + 80) = v26;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  outlined assign with take of RemoteConversationService.State(v25, v5);
  swift_endAccess();
  if (one-time initialization token for executor != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_1B4BE6000, v29, v30, "Turn Started.", v31, 2u);
    MEMORY[0x1B5E44758](v31, -1, -1);
  }

LABEL_18:
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.root.getter();
  *(_QWORD *)(v0 + 320) = SiriEnvironment.callState.getter();
  swift_release();
  v38 = (uint64_t (*)(void))((int)*MEMORY[0x1E0D9C3A8] + MEMORY[0x1E0D9C3A8]);
  v33 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 328) = v33;
  *v33 = v0;
  v33[1] = closure #1 in RemoteConversationService.startTurn(turnData:bridge:reply:);
  return v38();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 240);
  v3 = *(void (**)(_QWORD))(v0 + 224);
  v4 = *(_QWORD *)(v0 + 200);
  type metadata accessor for ConversationSELFHelper();
  swift_bridgeObjectRetain();
  static ConversationSELFHelper.makeUUID(fromExecutionRequestId:)();
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v4 + 120), *(_QWORD *)(v4 + 144));
  dispatch thunk of ReferenceResolutionClientProtocol.inRequest(requestId:)();
  v3(0);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v7);
  outlined destroy of CamOutput(v1, type metadata accessor for RemoteConversationTurnData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RemoteConversationService.makeTurn(turnData:bridge:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _UNKNOWN **v23;

  v19 = a3;
  v20 = a2;
  v4 = type metadata accessor for InvocationStateImpl();
  MEMORY[0x1E0C80A78](v4);
  v6 = (_QWORD **)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  v8 = *(void **)((char *)a1 + v7[10]);
  if (v8)
  {
    v9 = (void *)a1[4];
    v10 = *a1;
    v11 = a1[1];
    v12 = v8;
    v13 = v9;
    swift_bridgeObjectRetain();
    InvocationStateImpl.init(proxiedRequestContext:localRequestContextData:executionRequestId:)(v12, v13, v10, v11, v6);
  }
  else
  {
    v10 = *a1;
    v11 = a1[1];
    v14 = (void *)a1[4];
    v23 = 0;
    v21 = 0u;
    v22 = 0u;
    swift_bridgeObjectRetain();
    v13 = v14;
    InvocationStateImpl.init(executionRequestId:requestContextData:previousInvocationState:)(v10, v11, v13, (uint64_t)&v21, v6);
  }
  v15 = a1[2];
  v16 = a1[3];
  *((_QWORD *)&v22 + 1) = v4;
  v23 = &protocol witness table for InvocationStateImpl;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v21);
  outlined init with copy of ConversationHelperInput((uint64_t)v6, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for InvocationStateImpl);
  SiriKitRuntimeState.makeNewTurn(requestContextData:executionRequestId:rootRequestId:invocationState:conversationLoggingId:bridge:scopedRRData:invokedByPeerToPeerEORR:)(v13, v10, v11, v15, v16, (uint64_t)&v21, (uint64_t)a1 + v7[7], v20, v19, *(uint64_t *)((char *)a1 + v7[11]), *(uint64_t *)((char *)a1 + v7[11] + 8), *((_BYTE *)a1 + v7[9]));
  outlined destroy of CamOutput((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for InvocationStateImpl);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
}

uint64_t RemoteConversationService.FlowAndInputRegistry.__allocating_init()()
{
  uint64_t result;
  uint64_t v1;

  result = swift_allocObject();
  v1 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(result + 24) = v1;
  return result;
}

uint64_t closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[41] = a7;
  v8[42] = a8;
  v8[39] = a5;
  v8[40] = a6;
  v8[38] = a4;
  v9 = type metadata accessor for DispatchTimeInterval();
  v8[43] = v9;
  v8[44] = *(_QWORD *)(v9 - 8);
  v8[45] = swift_task_alloc();
  v8[46] = swift_task_alloc();
  v10 = type metadata accessor for Parse();
  v8[47] = v10;
  v8[48] = *(_QWORD *)(v10 - 8);
  v8[49] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment)?);
  v8[50] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment)?);
  v8[51] = swift_task_alloc();
  v11 = type metadata accessor for Input();
  v8[52] = v11;
  v8[53] = *(_QWORD *)(v11 - 8);
  v8[54] = swift_task_alloc();
  v8[55] = swift_task_alloc();
  v8[56] = type metadata accessor for RemoteConversationService.State(0);
  v8[57] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v8[58] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(id);
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(id);
  void *v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  void (*v19)(id);
  Swift::String v20;
  Swift::String v21;
  void *v22;
  _QWORD *v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(id);
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  void *v35;
  _QWORD *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;

  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 304) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v2, v1, type metadata accessor for RemoteConversationService.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v4 = *(_QWORD *)(v0 + 456);
      v5 = *(_QWORD *)(v0 + 416);
      v6 = *(_QWORD *)(v0 + 424);
      v7 = *(void (**)(id))(v0 + 312);
      v8 = v4
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                  + 64);
      swift_bridgeObjectRelease();
      v86 = 0;
      v87 = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
      v9 = (void *)swift_allocError();
      *v10 = 0xD000000000000058;
      v10[1] = 0x80000001B4EFF710;
      v11 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

      v7(v11);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
      __swift_destroy_boxed_opaque_existential_1(v4 + 40);
      __swift_destroy_boxed_opaque_existential_1(v4);
    }
    else
    {
      v19 = *(void (**)(id))(v0 + 312);
      v86 = 0;
      v87 = 0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v20._object = (void *)0x80000001B4EFF140;
      v20._countAndFlagsBits = 0xD000000000000035;
      String.append(_:)(v20);
      v21._countAndFlagsBits = 0xD000000000000038;
      v21._object = (void *)0x80000001B4EFF770;
      String.append(_:)(v21);
      lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
      v22 = (void *)swift_allocError();
      *v23 = 0;
      v23[1] = 0xE000000000000000;
      v24 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

      v19(v24);
    }
    goto LABEL_8;
  }
  v12 = *(_QWORD *)(v0 + 456);
  v13 = v12 + 40;
  *(_QWORD *)(v0 + 472) = *(_QWORD *)(v12 + 80);
  outlined init with take of ReferenceResolutionClientProtocol((__int128 *)v12, v0 + 56);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v13, v0 + 96, &demangling cache variable for type metadata for Conversational?);
  if (*(_QWORD *)(v0 + 120))
  {
    v14 = *(void (**)(id))(v0 + 312);
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    v15 = (void *)swift_allocError();
    *v16 = 0xD000000000000062;
    v16[1] = 0x80000001B4EFF6A0;
    v17 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

    v14(v17);
    swift_release();
    v18 = v0 + 56;
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1(v18);
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for Conversational?);
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v26 = *(_QWORD *)(v0 + 408);
  RemoteConversationService.FlowAndInputRegistry.getRegisteredActingFlow(uuid:)(*(_QWORD *)(v0 + 328), v26);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
  v85 = v0 + 56;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27) == 1)
  {
    v28 = *(_QWORD *)(v0 + 400);
    v29 = *(_QWORD *)(v0 + 328);
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 408), &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment)?);
    RemoteConversationService.FlowAndInputRegistry.getRegisteredFlow(uuid:)(v29, v28);
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v28, 1, v30) == 1)
    {
      v31 = *(void (**)(id))(v0 + 312);
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 400), &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment)?);
      v86 = 0;
      v87 = 0xE000000000000000;
      _StringGuts.grow(_:)(65);
      v32._countAndFlagsBits = 0xD000000000000020;
      v32._object = (void *)0x80000001B4EFF650;
      String.append(_:)(v32);
      v33._object = (void *)0x80000001B4EFF140;
      v33._countAndFlagsBits = 0xD000000000000035;
      String.append(_:)(v33);
      v34._countAndFlagsBits = 0xD00000000000001FLL;
      v34._object = (void *)0x80000001B4EFF680;
      String.append(_:)(v34);
      lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
      v35 = (void *)swift_allocError();
      *v36 = 0;
      v36[1] = 0xE000000000000000;
      v37 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

      v31(v37);
      swift_release();
      v18 = v0 + 56;
      goto LABEL_6;
    }
    v52 = *(_QWORD *)(v0 + 424);
    v53 = *(_QWORD *)(v0 + 432);
    v55 = *(_QWORD *)(v0 + 392);
    v54 = *(_QWORD *)(v0 + 400);
    v56 = *(_QWORD *)(v0 + 376);
    v57 = *(_QWORD *)(v0 + 384);
    v58 = *(_QWORD *)(v0 + 304);
    v59 = *(_QWORD *)(v54 + *(int *)(v30 + 48));
    *(_QWORD *)(v0 + 504) = v59;
    v60 = *(_QWORD *)(v54 + *(int *)(v30 + 64));
    *(_QWORD *)(v0 + 512) = v60;
    (*(void (**)(uint64_t))(v52 + 32))(v53);
    swift_retain();
    Input.parse.getter();
    v61 = Parse.usoTasks.getter();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v55, v56);
    type metadata accessor for FlowPluginInfo();
    outlined init with copy of ReferenceResolutionClientProtocol(v58 + 80, v0 + 16);
    v62 = FlowPluginInfo.__allocating_init(pluginBundle:)((_QWORD *)(v0 + 16));
    type metadata accessor for FlowAgent();
    swift_allocObject();
    v63 = FlowAgent.init(flow:tasks:pluginInfo:completion:)(v59, v61, v62, 0);
    *(_QWORD *)(v0 + 520) = v63;
    v78 = v63;
    swift_retain();
    v64 = SiriKitRuntimeState.taskService.getter();
    v81 = *(_QWORD *)(v58 + 56);
    v83 = (uint64_t)v64;
    v65 = one-time initialization token for defaultTimeout;
    v79 = *(_QWORD *)(v58 + 64);
    swift_bridgeObjectRetain();
    v84 = v60;
    swift_retain();
    if (v65 != -1)
      swift_once();
    v67 = *(_QWORD *)(v0 + 360);
    v66 = *(_QWORD *)(v0 + 368);
    v69 = *(_QWORD *)(v0 + 344);
    v68 = *(_QWORD *)(v0 + 352);
    v77 = v66;
    v70 = __swift_project_value_buffer(v69, (uint64_t)static JetsamHelper.defaultTimeout);
    v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16);
    v71(v66, v70, v69);
    type metadata accessor for ServerFallbackDisablingUtils();
    v72 = (_QWORD *)swift_allocObject();
    v72[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
    v72[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
    v72[4] = 0;
    type metadata accessor for CorrectionsUndoManager();
    v73 = swift_allocObject();
    *(_OWORD *)(v73 + 40) = 0u;
    *(_QWORD *)(v73 + 56) = 0;
    *(_OWORD *)(v73 + 24) = 0u;
    *(_QWORD *)(v73 + 16) = MEMORY[0x1E0DEE9D8];
    *(_OWORD *)(v0 + 232) = 0u;
    *(_QWORD *)(v0 + 248) = 0;
    *(_OWORD *)(v0 + 216) = 0u;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    outlined assign with take of CorrectingFlow?(v0 + 216, v73 + 24);
    swift_endAccess();
    v71(v67, v66, v69);
    type metadata accessor for Conversation(0);
    v74 = swift_allocObject();
    v75 = specialized Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(v78, v83, v81, v79, v73, v58, (uint64_t)&protocol witness table for RemoteConversationService, v67, v84, (uint64_t)v72, v74);
    *(_QWORD *)(v0 + 528) = v75;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v77, v69);
    swift_release();
    swift_retain();
    v76 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 536) = v76;
    *v76 = v0;
    v76[1] = closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:);
    return specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(v85, v75, *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 336), 0, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 440);
    v39 = *(_QWORD *)(v0 + 424);
    v40 = *(_QWORD *)(v0 + 408);
    v41 = *(_QWORD **)(v0 + 304);
    v42 = (__int128 *)(v40 + *(int *)(v27 + 48));
    v43 = *(_QWORD *)(v40 + *(int *)(v27 + 64));
    *(_QWORD *)(v0 + 480) = v43;
    (*(void (**)(uint64_t))(v39 + 32))(v38);
    outlined init with take of ReferenceResolutionClientProtocol(v42, v0 + 136);
    v44 = *(_QWORD *)(v0 + 160);
    v45 = *(_QWORD *)(v0 + 168);
    v82 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 136), v44);
    type metadata accessor for EncoreConversation(0);
    v46 = v41[8];
    v80 = v41[7];
    type metadata accessor for FlowPluginInfo();
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v41 + 10), v0 + 176);
    swift_bridgeObjectRetain();
    v47 = (void *)FlowPluginInfo.__allocating_init(pluginBundle:)((_QWORD *)(v0 + 176));
    v48 = SiriKitRuntimeState.taskService.getter();
    v49 = v41[20];
    swift_retain();
    swift_retain();
    default argument 7 of EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(&v86);
    swift_retain();
    v50 = specialized EncoreConversation.__allocating_init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)((uint64_t)v82, v80, v46, v47, (uint64_t)v48, (uint64_t)v41, (uint64_t)&protocol witness table for RemoteConversationService, v49, v43, &v86, v44, v45);
    *(_QWORD *)(v0 + 488) = v50;

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v51 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 496) = v51;
    *v51 = v0;
    v51[1] = closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:);
    return specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(v85, (uint64_t)v50, *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 336), 0, *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 424);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for Conversational?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 424);
  v1 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 416);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for Conversational?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RemoteConversationService.FlowAndInputRegistry.getRegisteredActingFlow(uuid:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 24);
  if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
  {
    v8 = v6;
    v9 = *(_QWORD *)(v5 + 56);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
    v11 = *(_QWORD *)(v10 - 8);
    outlined init with copy of ReferenceResolutionClientProtocol?(v9 + *(_QWORD *)(v11 + 72) * v8, a2, &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v10);
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
  return swift_endAccess();
}

uint64_t RemoteConversationService.FlowAndInputRegistry.getRegisteredFlow(uuid:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
  {
    v8 = v6;
    v9 = *(_QWORD *)(v5 + 56);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
    v11 = *(_QWORD *)(v10 - 8);
    outlined init with copy of ReferenceResolutionClientProtocol?(v9 + *(_QWORD *)(v11 + 72) * v8, a2, &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v10);
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
  return swift_endAccess();
}

uint64_t closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v8[137] = v18;
  v8[136] = a8;
  v8[135] = a7;
  v8[134] = a6;
  v8[133] = a5;
  v8[132] = a4;
  v9 = type metadata accessor for DispatchTimeInterval();
  v8[138] = v9;
  v8[139] = *(_QWORD *)(v9 - 8);
  v8[140] = swift_task_alloc();
  v8[141] = swift_task_alloc();
  v10 = type metadata accessor for Parse();
  v8[142] = v10;
  v8[143] = *(_QWORD *)(v10 - 8);
  v8[144] = swift_task_alloc();
  v8[145] = swift_task_alloc();
  v8[146] = swift_task_alloc();
  v8[147] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Parse, Error>);
  v8[148] = swift_task_alloc();
  v8[149] = swift_task_alloc();
  v8[150] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NamedParseTransformer?);
  v8[151] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Parse, Parse>?);
  v8[152] = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<Parse, Parse>);
  v8[153] = v11;
  v8[154] = *(_QWORD *)(v11 - 8);
  v8[155] = swift_task_alloc();
  v12 = type metadata accessor for FlowTraceEvent();
  v8[156] = v12;
  v8[157] = *(_QWORD *)(v12 - 8);
  v8[158] = swift_task_alloc();
  v13 = type metadata accessor for UUID();
  v8[159] = v13;
  v8[160] = *(_QWORD *)(v13 - 8);
  v8[161] = swift_task_alloc();
  v14 = type metadata accessor for FlowSearchResult();
  v8[162] = v14;
  v8[163] = *(_QWORD *)(v14 - 8);
  v8[164] = swift_task_alloc();
  v15 = type metadata accessor for FlexibleExecutionSupportOptions();
  v8[165] = v15;
  v8[166] = *(_QWORD *)(v15 - 8);
  v8[167] = swift_task_alloc();
  v8[168] = swift_task_alloc();
  v8[169] = swift_task_alloc();
  v8[170] = type metadata accessor for RemoteConversationService.State(0);
  v8[171] = swift_task_alloc();
  v16 = type metadata accessor for Input();
  v8[172] = v16;
  v8[173] = *(_QWORD *)(v16 - 8);
  v8[174] = swift_task_alloc();
  v8[175] = swift_task_alloc();
  v8[176] = swift_task_alloc();
  v8[177] = swift_task_alloc();
  v8[178] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v8[179] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(id);
  void *v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  void (*v72)(uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(void);
  char v109;
  objc_class *v110;
  _BYTE *v111;
  id v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t);
  int v136;
  void *v137;
  id v138;
  id v139;
  NSObject *v140;
  os_log_type_t v141;
  uint8_t *v142;
  uint64_t v143;
  id v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(void);
  id v154;
  void (*v155)(uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(void);
  _QWORD *v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 *v197;
  __int128 *v198;
  uint64_t v199;
  __int128 *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t (*v203)(_QWORD, uint64_t, uint64_t);
  uint64_t v204;
  _QWORD *v205;
  _QWORD *v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211[20];

  v1 = v0;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type Input and conformance Input, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A0]);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  v3 = v0[178];
  v4 = v0[177];
  v5 = v0[173];
  v6 = v0[172];
  v7 = v0[171];
  v8 = v0[136];
  swift_release();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  v9(v3, v4, v6);
  v10 = v8 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v10, v7, type metadata accessor for RemoteConversationService.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v12 = v1[176];
      v13 = v1[172];
      v14 = (__int128 *)v1[171];
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
      v16 = (char *)v14 + *(int *)(v15 + 64);
      v17 = (_QWORD *)((char *)v14 + *(int *)(v15 + 80));
      v1[180] = *v17;
      v1[181] = v17[1];
      outlined init with take of ReferenceResolutionClientProtocol(v14, (uint64_t)(v1 + 112));
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)((char *)v14 + 40), (uint64_t)(v1 + 82));
      v9(v12, (uint64_t)v16, v13);
      v18 = v1[85];
      v19 = v1[86];
      __swift_project_boxed_opaque_existential_1(v1 + 82, v18);
      v203 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v19 + 72) + *(_QWORD *)(v19 + 72));
      v20 = (_QWORD *)swift_task_alloc();
      v1[182] = v20;
      *v20 = v1;
      v20[1] = closure #1 in RemoteConversationService.accept(inputData:speechData:reply:);
      return v203(v1[168], v18, v19);
    }
    v29 = v1[178];
    v30 = v1[173];
    v31 = v1[172];
    v32 = (void (*)(id))v1[134];
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    v33 = (void *)swift_allocError();
    *v34 = 0xD000000000000035;
    v34[1] = 0x80000001B4EFF530;
    v35 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

    v32(v35);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
LABEL_2:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return ((uint64_t (*)(void))v1[1])();
  }
  v21 = (uint64_t)(v1 + 7);
  v22 = v1 + 17;
  v23 = (__int128 *)v1[171];
  swift_release();
  outlined init with take of ReferenceResolutionClientProtocol(v23, (uint64_t)(v1 + 7));
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v23 + 40, (uint64_t)(v1 + 12), &demangling cache variable for type metadata for Conversational?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)(v1 + 12), (uint64_t)(v1 + 27), &demangling cache variable for type metadata for Conversational?);
  v24 = v1[30];
  if (v24)
  {
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v1 + 27), (uint64_t)(v1 + 22));
    if (one-time initialization token for executor != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_1B4BE6000, v26, v27, "accept() sending input to active conversation", v28, 2u);
      MEMORY[0x1B5E44758](v28, -1, -1);
    }

    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)v1 + 11, (uint64_t)(v1 + 17));
    goto LABEL_46;
  }
  v178 = (uint64_t)(v1 + 12);
  v182 = (uint64_t)(v1 + 17);
  v185 = (uint64_t)(v1 + 7);
  v36 = v1[178];
  v37 = v1[161];
  v196 = v1[160];
  v204 = v1[159];
  v186 = v1[136];
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v1 + 27), &demangling cache variable for type metadata for Conversational?);
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  swift_allocObject();
  v38 = SiriEnvironment.init(parent:)();
  type metadata accessor for UserIdentityProvider();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type UserIdentityProvider and conformance UserIdentityProvider, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C058], MEMORY[0x1E0D9C040]);
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  type metadata accessor for FlowTaskProvider();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type FlowTaskProvider and conformance FlowTaskProvider, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B088], MEMORY[0x1E0D9B078]);
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  type metadata accessor for CallStateEnvironmentProvider();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type CallStateEnvironmentProvider and conformance CallStateEnvironmentProvider, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C3D8], MEMORY[0x1E0D9C3C0]);
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  Input.identifier.getter();
  v39 = (_QWORD *)swift_task_alloc();
  v184 = v38;
  v39[2] = v38;
  v39[3] = v186;
  v39[4] = v36;
  dispatch thunk of ConversationSELFHelper.withExecutionFlowPluginFindFlowTime<A>(rcId:hypothesisId:_:)();
  swift_release();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v37, v204);
  v40 = FlowSearchResult.flow.getter();
  if (v40)
  {
    v41 = (uint64_t *)v1[158];
    v42 = v1[157];
    v43 = v1[156];
    *v41 = v40;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v42 + 104))(v41, *MEMORY[0x1E0D9AFF8], v43);
    static FlowTrace.trace(event:)();
    (*(void (**)(uint64_t *, uint64_t))(v42 + 8))(v41, v43);
  }
  else
  {
    FlowSearchResult.actingFlow.getter();
    if (v1[40])
    {
      v44 = v1[158];
      v45 = v1[157];
      v46 = v1[156];
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v1 + 37), (uint64_t)(v1 + 32));
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v1 + 32), v44);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v45 + 104))(v44, *MEMORY[0x1E0D9AFC0], v46);
      static FlowTrace.trace(event:)();
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 32));
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v1 + 37), &demangling cache variable for type metadata for ActingFlow?);
    }
  }
  v47 = v1[151];
  FlowSearchResult.transformer.getter();
  v48 = type metadata accessor for NamedParseTransformer();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48);
  v51 = v1[154];
  v52 = v1[153];
  v53 = v1[152];
  v54 = v1[151];
  if (v50 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v1[151], (uint64_t *)&demangling cache variable for type metadata for NamedParseTransformer?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v53, 1, 1, v52);
  }
  else
  {
    NamedParseTransformer.resolve()();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v54, v48);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v53, 1, v52) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[154] + 32))(v1[155], v1[152], v1[153]);
      if (one-time initialization token for executor != -1)
        swift_once();
      v67 = type metadata accessor for Logger();
      __swift_project_value_buffer(v67, (uint64_t)static Logger.executor);
      v68 = Logger.logObject.getter();
      v69 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v70 = 0;
        _os_log_impl(&dword_1B4BE6000, v68, v69, "Conversation wants to reform input", v70, 2u);
        MEMORY[0x1B5E44758](v70, -1, -1);
      }
      v71 = v1[146];

      v72 = (void (*)(uint64_t))Transformer.transform.getter();
      Input.parse.getter();
      v72(v71);
      v73 = v1[149];
      v131 = v1[148];
      v132 = v1[146];
      v133 = v1[143];
      v134 = v1[142];
      swift_release();
      v135 = *(void (**)(uint64_t, uint64_t))(v133 + 8);
      v135(v132, v134);
      swift_storeEnumTagMultiPayload();
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v131, v73, &demangling cache variable for type metadata for Result<Parse, Error>);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v1[149], v1[150], &demangling cache variable for type metadata for Result<Parse, Error>);
      v136 = swift_getEnumCaseMultiPayload();
      if (v136 == 1)
      {
        v137 = *(void **)v1[150];
        v138 = v137;
        v139 = v137;
        v140 = Logger.logObject.getter();
        v141 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v140, v141))
        {
          v142 = (uint8_t *)swift_slowAlloc();
          v143 = swift_slowAlloc();
          *(_DWORD *)v142 = 136315138;
          v211[0] = v143;
          v1[127] = v137;
          v144 = v137;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
          v145 = String.init<A>(describing:)();
          v1[126] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v145, v146, v211);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_1B4BE6000, v140, v141, "Conversation wants to reform input, but got an error in transformation: %s", v142, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v143, -1, -1);
          MEMORY[0x1B5E44758](v142, -1, -1);
        }
        else
        {

        }
        v210 = v1[178];
        v195 = v1[173];
        v202 = v1[172];
        v156 = v1[164];
        v157 = v1[163];
        v158 = v1[162];
        v190 = v1[155];
        v159 = v1[154];
        v160 = v1[153];
        v161 = (void (*)(void))v1[134];
        v162 = v1;
        v163 = specialized static FlowExtensionUserInputResultXPC.error(_:)();
        v161();

        v1 = v162;
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v156, v158);
        outlined destroy of ReferenceResolutionClientProtocol?(v178, &demangling cache variable for type metadata for Conversational?);
        __swift_destroy_boxed_opaque_existential_1(v185);
        (*(void (**)(uint64_t, uint64_t))(v159 + 8))(v190, v160);
        (*(void (**)(uint64_t, uint64_t))(v195 + 8))(v210, v202);
      }
      else
      {
        v209 = v1[178];
        v147 = v1[174];
        v148 = v1[172];
        v173 = v1[173];
        v177 = v1[163];
        v181 = v1[162];
        v183 = v1[164];
        v201 = v1[155];
        v189 = v1[154];
        v194 = v1[153];
        v149 = v1[145];
        v150 = v1[144];
        v151 = v1[143];
        v152 = v1[142];
        v153 = (void (*)(void))v1[134];
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v151 + 32))(v149, v1[150], v152);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 16))(v150, v149, v152);
        Input.init(parse:)();
        v154 = specialized static FlowExtensionUserInputResultXPC.reformedInput(_:)();
        v153();
        swift_release();

        v155 = *(void (**)(uint64_t, uint64_t))(v173 + 8);
        v155(v147, v148);
        v135(v149, v152);
        (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v183, v181);
        outlined destroy of ReferenceResolutionClientProtocol?(v178, &demangling cache variable for type metadata for Conversational?);
        __swift_destroy_boxed_opaque_existential_1(v185);
        (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v201, v194);
        v155(v209, v148);
      }
      goto LABEL_2;
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v1[152], &demangling cache variable for type metadata for Transformer<Parse, Parse>?);
  v1[45] = &type metadata for EncoreFeatureFlag;
  v1[46] = lazy protocol witness table accessor for type EncoreFeatureFlag and conformance EncoreFeatureFlag();
  v55 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 42));
  if ((v55 & 1) == 0)
  {
LABEL_30:
    FlowSearchResult.actingFlow.getter();
    if (v1[55])
    {
      v74 = (uint64_t)(v1 + 47);
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)v1 + 26, (uint64_t)(v1 + 47));
      v75 = FlowSearchResult.flow.getter();
      swift_release();
      if (!v75)
      {
        v200 = (__int128 *)(v1 + 2);
        v180 = v1[163];
        v188 = v1[162];
        v193 = v1[164];
        v113 = (_QWORD *)v1[136];
        v114 = v1[50];
        v115 = v1[51];
        v172 = __swift_project_boxed_opaque_existential_1(v1 + 47, v114);
        v176 = type metadata accessor for EncoreConversation(0);
        v116 = v113[8];
        v169 = v113[7];
        type metadata accessor for FlowPluginInfo();
        outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v113 + 10), (uint64_t)(v1 + 87));
        swift_bridgeObjectRetain();
        v117 = (void *)FlowPluginInfo.__allocating_init(pluginBundle:)(v1 + 87);
        v118 = SiriKitRuntimeState.taskService.getter();
        v208 = v1;
        v119 = v113[20];
        swift_retain();
        swift_retain();
        default argument 7 of EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(v211);
        swift_retain();
        v120 = specialized EncoreConversation.__allocating_init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)((uint64_t)v172, v169, v116, v117, (uint64_t)v118, (uint64_t)v113, (uint64_t)&protocol witness table for RemoteConversationService, v119, v184, v211, v114, v115);

        swift_release();
        swift_release();
        v1 = v208;
        swift_release();
        swift_release();
        v208[5] = v176;
        v208[6] = &protocol witness table for EncoreConversation;
        swift_release();
        v208[2] = v120;
        (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v193, v188);
        v22 = (_QWORD *)v182;
        outlined init with take of ReferenceResolutionClientProtocol(v200, v182);
        v66 = v74;
        goto LABEL_44;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 47));
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v1 + 52), &demangling cache variable for type metadata for ActingFlow?);
    }
    v76 = FlowSearchResult.flow.getter();
    if (!v76)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v100 = type metadata accessor for Logger();
      __swift_project_value_buffer(v100, (uint64_t)static Logger.executor);
      v101 = Logger.logObject.getter();
      v102 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v101, v102))
      {
        v103 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v103 = 0;
        _os_log_impl(&dword_1B4BE6000, v101, v102, "FlowExtension did not find a flow to handle the input", v103, 2u);
        MEMORY[0x1B5E44758](v103, -1, -1);
      }
      v104 = v1[173];
      v199 = v1[172];
      v207 = v1[178];
      v105 = v1[164];
      v106 = v1[163];
      v107 = v1[162];
      v108 = (void (*)(void))v1[134];

      v109 = FlowSearchResult.exclude.getter();
      v110 = (objc_class *)type metadata accessor for FlowExtensionUserInputResultXPC();
      v111 = objc_allocWithZone(v110);
      *(_QWORD *)&v111[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type] = 1;
      *(_QWORD *)&v111[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error] = 0;
      *(_OWORD *)&v111[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData] = xmmword_1B4EED3C0;
      v111[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude] = v109 & 1;
      v1[123] = v111;
      v1[124] = v110;
      v112 = objc_msgSendSuper2((objc_super *)(v1 + 123), sel_init);
      v108();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v105, v107);
      outlined destroy of ReferenceResolutionClientProtocol?(v178, &demangling cache variable for type metadata for Conversational?);
      __swift_destroy_boxed_opaque_existential_1(v185);
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v207, v199);
      goto LABEL_2;
    }
    v77 = v76;
    v198 = (__int128 *)(v1 + 67);
    v78 = (uint64_t)(v1 + 72);
    v79 = v1[145];
    v80 = v1[143];
    v81 = v1[142];
    v82 = v1[136];
    swift_retain();
    Input.parse.getter();
    v83 = Parse.usoTasks.getter();
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
    type metadata accessor for FlowPluginInfo();
    outlined init with copy of ReferenceResolutionClientProtocol(v82 + 80, (uint64_t)(v1 + 62));
    v84 = FlowPluginInfo.__allocating_init(pluginBundle:)(v1 + 62);
    type metadata accessor for FlowAgent();
    swift_allocObject();
    v192 = FlowAgent.init(flow:tasks:pluginInfo:completion:)(v77, v83, v84, 0);
    swift_retain();
    v85 = SiriKitRuntimeState.taskService.getter();
    v86 = *(_QWORD *)(v82 + 64);
    v165 = *(_QWORD *)(v82 + 56);
    v166 = (uint64_t)v85;
    v87 = one-time initialization token for defaultTimeout;
    swift_retain();
    swift_bridgeObjectRetain();
    if (v87 != -1)
      swift_once();
    v168 = v1[163];
    v171 = v1[162];
    v175 = v1[164];
    v88 = v1[141];
    v89 = v1[140];
    v90 = v1[139];
    v164 = v90;
    v206 = v1;
    v91 = v1[138];
    v92 = __swift_project_value_buffer(v91, (uint64_t)static JetsamHelper.defaultTimeout);
    v93 = *(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16);
    v93(v88, v92, v91);
    type metadata accessor for ServerFallbackDisablingUtils();
    v94 = (_QWORD *)swift_allocObject();
    v94[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
    v94[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
    v94[4] = 0;
    type metadata accessor for CorrectionsUndoManager();
    v95 = swift_allocObject();
    *(_OWORD *)(v95 + 40) = 0u;
    *(_QWORD *)(v95 + 56) = 0;
    *(_OWORD *)(v95 + 24) = 0u;
    *(_QWORD *)(v95 + 16) = MEMORY[0x1E0DEE9D8];
    *(_OWORD *)v78 = 0u;
    *(_OWORD *)(v78 + 16) = 0u;
    *(_QWORD *)(v78 + 32) = 0;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    outlined assign with take of CorrectingFlow?(v78, v95 + 24);
    swift_endAccess();
    v93(v89, v88, v91);
    v96 = type metadata accessor for Conversation(0);
    v97 = swift_allocObject();
    v98 = specialized Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(v192, v166, v165, v86, v95, v82, (uint64_t)&protocol witness table for RemoteConversationService, v89, v184, (uint64_t)v94, v97);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v99 = v91;
    v1 = v206;
    (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v88, v99);
    swift_release();
    v206[70] = v96;
    v206[71] = &protocol witness table for Conversation;
    swift_release();
    swift_release();
    swift_release();
    v206[67] = v98;
    (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v175, v171);
    v22 = (_QWORD *)v182;
    outlined init with take of ReferenceResolutionClientProtocol(v198, v182);
    goto LABEL_45;
  }
  FlowSearchResult.actingFlow.getter();
  if (!v1[100])
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v1 + 97), &demangling cache variable for type metadata for ActingFlow?);
    goto LABEL_30;
  }
  v179 = (uint64_t)(v1 + 92);
  v197 = (__int128 *)(v1 + 102);
  v56 = v1 + 107;
  v174 = v1[163];
  v187 = v1[162];
  v191 = v1[164];
  v57 = (_QWORD *)v1[136];
  outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v1 + 97), (uint64_t)(v1 + 92));
  v58 = v1[95];
  v59 = v1[96];
  v170 = __swift_project_boxed_opaque_existential_1(v1 + 92, v58);
  v205 = v1;
  v60 = type metadata accessor for EncoreConversation(0);
  v61 = v57[8];
  v167 = v57[7];
  type metadata accessor for FlowPluginInfo();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v57 + 10), (uint64_t)v56);
  swift_bridgeObjectRetain();
  v62 = (void *)FlowPluginInfo.__allocating_init(pluginBundle:)(v56);
  v63 = SiriKitRuntimeState.taskService.getter();
  v64 = v57[20];
  swift_retain();
  swift_retain();
  default argument 7 of EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(v211);
  swift_retain();
  v65 = specialized EncoreConversation.__allocating_init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)((uint64_t)v170, v167, v61, v62, (uint64_t)v63, (uint64_t)v57, (uint64_t)&protocol witness table for RemoteConversationService, v64, v184, v211, v58, v59);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v205[105] = v60;
  v1 = v205;
  v205[106] = &protocol witness table for EncoreConversation;
  swift_release();
  v205[102] = v65;
  (*(void (**)(uint64_t, uint64_t))(v174 + 8))(v191, v187);
  v22 = (_QWORD *)v182;
  outlined init with take of ReferenceResolutionClientProtocol(v197, v182);
  v66 = v179;
LABEL_44:
  __swift_destroy_boxed_opaque_existential_1(v66);
LABEL_45:
  v21 = v185;
  v24 = 0;
LABEL_46:
  v121 = v24 != 0;
  v122 = v1[20];
  v123 = v1[21];
  v124 = __swift_project_boxed_opaque_existential_1(v22, v122);
  v125 = (_QWORD *)swift_task_alloc();
  v1[185] = v125;
  *v125 = v1;
  v125[1] = closure #1 in RemoteConversationService.accept(inputData:speechData:reply:);
  v126 = v1[178];
  v127 = v1[137];
  v128 = v1[136];
  v129 = v1[135];
  v130 = v1[134];
  v211[18] = v122;
  v211[19] = v123;
  return specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(v21, (uint64_t)v124, v126, v127, v121, v130, v129, v128);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 1464) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(id);
  void *v27;
  _QWORD *v28;
  id v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51[14];

  v1 = v0 + 896;
  v2 = *(_QWORD *)(v0 + 1336);
  v3 = *(_QWORD *)(v0 + 1328);
  v4 = *(_QWORD *)(v0 + 1320);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1344), v4);
  static FlexibleExecutionSupportOptions.inputContinuation.getter();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C460], MEMORY[0x1E0D9C470]);
  v5 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v50 = (_QWORD *)(v0 + 656);
  if ((v5 & 1) != 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v6 = *(_QWORD *)(v0 + 1408);
    v7 = *(_QWORD *)(v0 + 1400);
    v8 = *(_QWORD *)(v0 + 1384);
    v9 = *(_QWORD *)(v0 + 1376);
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 656, v0 + 616);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v9);
    swift_bridgeObjectRetain();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v0 + 1448);
    if (v13)
    {
      v44 = *(_QWORD *)(v0 + 1440);
      v48 = *(_QWORD *)(v0 + 1384);
      v45 = *(_QWORD *)(v0 + 1376);
      v46 = *(_QWORD *)(v0 + 1400);
      v15 = swift_slowAlloc();
      v47 = swift_slowAlloc();
      v51[0] = v47;
      *(_DWORD *)v15 = 136315906;
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 616, v0 + 456);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Conversational);
      v16 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 1024) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v0 + 616);
      *(_WORD *)(v15 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 1032) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v14, v51);
      v1 = v0 + 896;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 22) = 2080;
      static FlexibleExecutionSupportOptions.inputContinuation.getter();
      v18 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 1040) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 32) = 2080;
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
      v20 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 1048) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v45);
      _os_log_impl(&dword_1B4BE6000, v11, v12, "Conversation %s for rcId: %s supports %s on %s. Running accept()", (uint8_t *)v15, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v47, -1, -1);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }
    else
    {
      v32 = *(_QWORD *)(v0 + 1400);
      v33 = *(_QWORD *)(v0 + 1384);
      v34 = *(_QWORD *)(v0 + 1376);
      __swift_destroy_boxed_opaque_existential_1(v0 + 616);
      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    }

    v35 = *(_QWORD *)(v0 + 680);
    v36 = *(_QWORD *)(v0 + 688);
    v37 = __swift_project_boxed_opaque_existential_1(v50, v35);
    v38 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1472) = v38;
    *v38 = v0;
    v38[1] = closure #1 in RemoteConversationService.accept(inputData:speechData:reply:);
    v39 = *(_QWORD *)(v0 + 1408);
    v40 = *(_QWORD *)(v0 + 1096);
    v41 = *(_QWORD *)(v0 + 1088);
    v42 = *(_QWORD *)(v0 + 1080);
    v43 = *(_QWORD *)(v0 + 1072);
    v51[12] = v35;
    v51[13] = v36;
    return specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(v1, (uint64_t)v37, v39, v40, 1, v43, v42, v41);
  }
  else
  {
    swift_bridgeObjectRelease();
    v49 = *(_QWORD *)(v0 + 1464);
    v22 = *(_QWORD *)(v0 + 1424);
    v23 = *(_QWORD *)(v0 + 1408);
    v24 = *(_QWORD *)(v0 + 1384);
    v25 = *(_QWORD *)(v0 + 1376);
    v26 = *(void (**)(id))(v0 + 1072);
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    v27 = (void *)swift_allocError();
    *v28 = 0xD000000000000024;
    v28[1] = 0x80000001B4EFF500;
    v29 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

    v26(v29);
    v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v30(v23, v25);
    __swift_destroy_boxed_opaque_existential_1(v0 + 896);
    v30(v22, v25);
    if (!v49)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1328) + 8))(*(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1320));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(id);
  void *v6;
  _QWORD *v7;
  id v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v11;

  v11 = *(_QWORD *)(v0 + 1464);
  v1 = *(_QWORD *)(v0 + 1424);
  v2 = *(_QWORD *)(v0 + 1408);
  v3 = *(_QWORD *)(v0 + 1384);
  v4 = *(_QWORD *)(v0 + 1376);
  v5 = *(void (**)(id))(v0 + 1072);
  lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  v6 = (void *)swift_allocError();
  *v7 = 0xD000000000000024;
  v7[1] = 0x80000001B4EFF500;
  v8 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

  v5(v8);
  v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v9(v2, v4);
  __swift_destroy_boxed_opaque_existential_1(v0 + 896);
  v9(v1, v4);
  if (!v11)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1328) + 8))(*(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1320));
  __swift_destroy_boxed_opaque_existential_1(v0 + 656);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 1424);
  v2 = *(_QWORD *)(v0 + 1384);
  v3 = *(_QWORD *)(v0 + 1376);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for Conversational?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(id);
  void *v19;
  _QWORD *v20;
  id v21;
  void (*v22)(uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(void **)(v0 + 1464);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 1464);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138412290;
    v11 = v8;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 1000) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_1B4BE6000, v5, v6, "Error %@ while checking if conversation supports flexible execution. Presuming it doesn't support flexible execution", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);

  }
  else
  {

  }
  v13 = *(_QWORD *)(v0 + 1464);
  v14 = *(_QWORD *)(v0 + 1424);
  v15 = *(_QWORD *)(v0 + 1408);
  v16 = *(_QWORD *)(v0 + 1384);
  v17 = *(_QWORD *)(v0 + 1376);
  v18 = *(void (**)(id))(v0 + 1072);
  lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  v19 = (void *)swift_allocError();
  *v20 = 0xD000000000000024;
  v20[1] = 0x80000001B4EFF500;
  v21 = specialized static FlowExtensionUserInputResultXPC.error(_:)();

  v18(v21);
  v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v22(v15, v17);
  __swift_destroy_boxed_opaque_existential_1(v0 + 896);
  v22(v14, v17);
  if (!v13)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1328) + 8))(*(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1320));
  __swift_destroy_boxed_opaque_existential_1(v0 + 656);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)()
{
  type metadata accessor for SiriEnvironment();
  type metadata accessor for FlowSearchResult();
  return static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __int128 v7[2];
  uint64_t v8;
  _BYTE v9[40];
  _QWORD v10[4];

  v2 = type metadata accessor for Parse();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol(a1 + 16, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowPlugin);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowPluginExtended);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of ReferenceResolutionClientProtocol(v7, (uint64_t)v10);
    __swift_project_boxed_opaque_existential_1(v10, v10[3]);
    Input.parse.getter();
    dispatch thunk of FlowPluginExtended.findFlowForX(parse:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for FlowPluginExtended?);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40));
    Input.parse.getter();
    dispatch thunk of FlowPlugin.makeFlowFor(parse:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    static FlowSearchResult.flow(_:)();
    return swift_release();
  }
}

uint64_t RemoteConversationService.makeRequestIdentities(userSpecificInfo:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[102] = a2;
  v2[101] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  v2[103] = swift_task_alloc();
  v3 = type metadata accessor for IdentifiedUser();
  v2[104] = v3;
  v2[105] = *(_QWORD *)(v3 - 8);
  v2[106] = swift_task_alloc();
  v2[107] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v2[108] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t RemoteConversationService.makeRequestIdentities(userSpecificInfo:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;

  if (AFSupportsMultiUser())
  {
    v1 = *(_QWORD *)(v0 + 816);
    v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CFE920]), sel_init);
    *(_QWORD *)(v0 + 872) = v2;
    if (v1)
    {
      v3 = *(char **)(v0 + 816);
      v4 = &v3[OBJC_IVAR___SKEUserSpecificInfo_userId];
      v5 = *(_QWORD *)&v3[OBJC_IVAR___SKEUserSpecificInfo_userId];
      *(_QWORD *)(v0 + 880) = v5;
      v6 = *((_QWORD *)v4 + 1);
      *(_QWORD *)(v0 + 888) = v6;
      v7 = v3;
      swift_bridgeObjectRetain();
      v8 = MEMORY[0x1B5E432E8](v5, v6);
      *(_QWORD *)(v0 + 896) = v8;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 248) = v0 + 760;
      *(_QWORD *)(v0 + 208) = v0;
      *(_QWORD *)(v0 + 216) = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
      *(_QWORD *)(v0 + 616) = swift_continuation_init();
      *(_QWORD *)(v0 + 584) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 592) = 0x40000000;
      *(_QWORD *)(v0 + 600) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFSharedUserInfo?) -> () with result type AFSharedUserInfo?;
      *(_QWORD *)(v0 + 608) = &block_descriptor_253;
      objc_msgSend(v2, sel_getSharedUserInfoForSharedUserID_completion_, v8, v0 + 584);
    }
    else
    {
      *(_QWORD *)(v0 + 120) = v0 + 800;
      *(_QWORD *)(v0 + 80) = v0;
      *(_QWORD *)(v0 + 88) = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
      *(_QWORD *)(v0 + 576) = swift_continuation_init();
      *(_QWORD *)(v0 + 544) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 552) = 0x40000000;
      *(_QWORD *)(v0 + 560) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFPersonalUserSettings?, @unowned NSError?) -> () with result type AFPersonalUserSettings;
      *(_QWORD *)(v0 + 568) = &block_descriptor_19;
      objc_msgSend(v2, sel_getMultiUserSettingsForRecognizedUserWithCompletion_, v0 + 544);
    }
    return swift_continuation_await();
  }
  else
  {
    v9 = *(void **)(v0 + 816);
    v10 = *(_QWORD *)(v0 + 808);
    v11 = v9;
    IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v9, 0, 0, 0, v10);
    v12 = type metadata accessor for SiriRequestIdentities(0);
    *(_QWORD *)(v10 + *(int *)(v12 + 20)) = MEMORY[0x1E0DEE9D8];
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v10, 0, 1, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = (void *)v0[112];
  v2 = v0[111];
  v3 = v0[110];
  v4 = (void *)v0[109];
  v0[113] = v0[95];

  swift_bridgeObjectRetain();
  v5 = MEMORY[0x1B5E432E8](v3, v2);
  v0[114] = v5;
  swift_bridgeObjectRelease();
  v0[23] = v0 + 98;
  v0[18] = v0;
  v0[19] = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
  v0[62] = swift_continuation_init();
  v0[58] = MEMORY[0x1E0C809B0];
  v0[59] = 0x40000000;
  v0[60] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFPersonalUserSettings?, @unowned NSError?) -> () with result type AFPersonalUserSettings;
  v0[61] = &block_descriptor_254;
  objc_msgSend(v4, sel_getMultiUserSettingsForSharedUserID_completion_, v5, v0 + 58);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 920) = *(_QWORD *)(*(_QWORD *)v0 + 176);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  v1 = *(void **)(v0 + 912);

  v2 = *(_QWORD *)(v0 + 784);
  *(_QWORD *)(v0 + 944) = *(_QWORD *)(v0 + 904);
  *(_QWORD *)(v0 + 936) = v2;
  v3 = *(void **)(v0 + 872);
  *(_QWORD *)(v0 + 312) = v0 + 768;
  *(_QWORD *)(v0 + 272) = v0;
  *(_QWORD *)(v0 + 280) = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
  *(_QWORD *)(v0 + 736) = swift_continuation_init();
  *(_QWORD *)(v0 + 704) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v0 + 712) = 0x40000000;
  *(_QWORD *)(v0 + 720) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary, @unowned NSError?) -> () with result type [String : SAPerson];
  *(_QWORD *)(v0 + 728) = &block_descriptor_249;
  objc_msgSend(v3, sel_homeUserIdToNames_, v0 + 704);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 928) = *(_QWORD *)(*(_QWORD *)v0 + 112);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  void *v2;

  v1 = v0[100];
  v0[118] = 0;
  v0[117] = v1;
  v2 = (void *)v0[109];
  v0[39] = v0 + 96;
  v0[34] = v0;
  v0[35] = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
  v0[92] = swift_continuation_init();
  v0[88] = MEMORY[0x1E0C809B0];
  v0[89] = 0x40000000;
  v0[90] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary, @unowned NSError?) -> () with result type [String : SAPerson];
  v0[91] = &block_descriptor_249;
  objc_msgSend(v2, sel_homeUserIdToNames_, v0 + 88);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 952) = *(_QWORD *)(*(_QWORD *)v0 + 304);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 768);
  *(_QWORD *)(v0 + 960) = v1;
  v2 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 1064) = v2;
  v3 = -1;
  v4 = -1 << v2;
  v5 = *(_QWORD *)(v1 + 64);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  *(_QWORD *)(v0 + 968) = MEMORY[0x1E0DEE9D8];
  v6 = v3 & v5;
  if (v6)
  {
    v7 = 0;
    v8 = __clz(__rbit64(v6));
    v9 = (v6 - 1) & v6;
LABEL_5:
    *(_QWORD *)(v0 + 984) = v9;
    *(_QWORD *)(v0 + 976) = v7;
    v10 = *(void **)(v0 + 872);
    v11 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v8);
    v12 = *v11;
    v13 = v11[1];
    v14 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v8);
    *(_QWORD *)(v0 + 992) = v14;
    swift_bridgeObjectRetain();
    v15 = v14;
    v16 = MEMORY[0x1B5E432E8](v12, v13);
    *(_QWORD *)(v0 + 1000) = v16;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 440) = v0 + 744;
    *(_QWORD *)(v0 + 400) = v0;
    *(_QWORD *)(v0 + 408) = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
    *(_QWORD *)(v0 + 536) = swift_continuation_init();
    *(_QWORD *)(v0 + 504) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 512) = 0x40000000;
    *(_QWORD *)(v0 + 520) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSError?) -> () with result type String;
    *(_QWORD *)(v0 + 528) = &block_descriptor_250;
    objc_msgSend(v10, sel_getSharedUserIdForHomeUserId_completion_, v16, v0 + 504);
    return swift_continuation_await();
  }
  v18 = 63 - v4;
  if (v18 > 0x7F)
  {
    v19 = *(_QWORD *)(v1 + 72);
    if (v19)
    {
      v7 = 1;
LABEL_9:
      v9 = (v19 - 1) & v19;
      v8 = __clz(__rbit64(v19)) + (v7 << 6);
      goto LABEL_5;
    }
    if (v18 >= 0xC0)
    {
      v19 = *(_QWORD *)(v1 + 80);
      if (v19)
      {
        v7 = 2;
        goto LABEL_9;
      }
      if (v18 >= 0x100)
      {
        v19 = *(_QWORD *)(v1 + 88);
        if (v19)
        {
          v7 = 3;
          goto LABEL_9;
        }
        if (v18 >= 0x140)
        {
          v19 = *(_QWORD *)(v1 + 96);
          if (v19)
          {
            v7 = 4;
            goto LABEL_9;
          }
          v20 = 0;
          v21 = v18 >> 6;
          if (v21 <= 5)
            v21 = 5;
          v22 = v21 - 5;
          while (v22 != v20)
          {
            v19 = *(_QWORD *)(v1 + 104 + 8 * v20++);
            if (v19)
            {
              v7 = v20 + 4;
              goto LABEL_9;
            }
          }
        }
      }
    }
  }
  v23 = *(void **)(v0 + 872);
  swift_release();

  v24 = *(_QWORD *)(v0 + 968);
  v25 = *(void **)(v0 + 944);
  v26 = *(void **)(v0 + 936);
  v27 = *(void **)(v0 + 816);
  v28 = *(_QWORD *)(v0 + 808);
  v29 = v27;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v27, v25, v26, 0, v28);
  v30 = type metadata accessor for SiriRequestIdentities(0);
  *(_QWORD *)(v28 + *(int *)(v30 + 20)) = v24;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v28, 0, 1, v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;

  v1 = *(void **)(v0 + 952);
  swift_willThrow();

  v2 = MEMORY[0x1E0DEE9D8];
  v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v0 + 960) = v3;
  v4 = *(_BYTE *)(v3 + 32);
  *(_BYTE *)(v0 + 1064) = v4;
  v5 = -1;
  v6 = -1 << v4;
  v7 = *(_QWORD *)(v3 + 64);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  *(_QWORD *)(v0 + 968) = v2;
  v8 = v5 & v7;
  if (v8)
  {
    v9 = 0;
    v10 = __clz(__rbit64(v8));
    v11 = (v8 - 1) & v8;
LABEL_5:
    *(_QWORD *)(v0 + 984) = v11;
    *(_QWORD *)(v0 + 976) = v9;
    v12 = *(void **)(v0 + 872);
    v13 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * v10);
    *(_QWORD *)(v0 + 992) = v16;
    swift_bridgeObjectRetain();
    v17 = v16;
    v18 = MEMORY[0x1B5E432E8](v14, v15);
    *(_QWORD *)(v0 + 1000) = v18;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 440) = v0 + 744;
    *(_QWORD *)(v0 + 400) = v0;
    *(_QWORD *)(v0 + 408) = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
    *(_QWORD *)(v0 + 536) = swift_continuation_init();
    *(_QWORD *)(v0 + 504) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 512) = 0x40000000;
    *(_QWORD *)(v0 + 520) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSError?) -> () with result type String;
    *(_QWORD *)(v0 + 528) = &block_descriptor_250;
    objc_msgSend(v12, sel_getSharedUserIdForHomeUserId_completion_, v18, v0 + 504);
    return swift_continuation_await();
  }
  v20 = 63 - v6;
  if (v20 > 0x7F)
  {
    v21 = *(_QWORD *)(v3 + 72);
    if (v21)
    {
      v9 = 1;
LABEL_9:
      v11 = (v21 - 1) & v21;
      v10 = __clz(__rbit64(v21)) + (v9 << 6);
      goto LABEL_5;
    }
    if (v20 >= 0xC0)
    {
      v21 = *(_QWORD *)(v3 + 80);
      if (v21)
      {
        v9 = 2;
        goto LABEL_9;
      }
      if (v20 >= 0x100)
      {
        v21 = *(_QWORD *)(v3 + 88);
        if (v21)
        {
          v9 = 3;
          goto LABEL_9;
        }
        if (v20 >= 0x140)
        {
          v21 = *(_QWORD *)(v3 + 96);
          if (v21)
          {
            v9 = 4;
            goto LABEL_9;
          }
          v22 = 0;
          v23 = v20 >> 6;
          if (v23 <= 5)
            v23 = 5;
          v24 = v23 - 5;
          while (v24 != v22)
          {
            v21 = *(_QWORD *)(v3 + 104 + 8 * v22++);
            if (v21)
            {
              v9 = v22 + 4;
              goto LABEL_9;
            }
          }
        }
      }
    }
  }
  v25 = *(void **)(v0 + 872);
  swift_release();

  v26 = *(_QWORD *)(v0 + 968);
  v27 = *(void **)(v0 + 944);
  v28 = *(void **)(v0 + 936);
  v29 = *(void **)(v0 + 816);
  v30 = *(_QWORD *)(v0 + 808);
  v31 = v29;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v29, v27, v28, 0, v30);
  v32 = type metadata accessor for SiriRequestIdentities(0);
  *(_QWORD *)(v30 + *(int *)(v32 + 20)) = v26;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v30, 0, 1, v32);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 1008) = *(_QWORD *)(*(_QWORD *)v0 + 432);
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void *)v0[125];
  v2 = (void *)v0[109];
  v3 = v0[93];
  v0[127] = v3;
  v4 = v0[94];
  v0[128] = v4;

  v5 = MEMORY[0x1B5E432E8](v3, v4);
  v0[129] = v5;
  v0[7] = v0 + 99;
  v0[2] = v0;
  v0[3] = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
  v0[82] = swift_continuation_init();
  v0[78] = MEMORY[0x1E0C809B0];
  v0[79] = 0x40000000;
  v0[80] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFSharedUserInfo?) -> () with result type AFSharedUserInfo?;
  v0[81] = &block_descriptor_251;
  objc_msgSend(v2, sel_getSharedUserInfoForSharedUserID_completion_, v5, v0 + 78);
  return swift_continuation_await();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;

  v1 = *(void **)(v0 + 1032);
  v2 = *(_QWORD *)(v0 + 792);
  *(_QWORD *)(v0 + 1040) = v2;

  if (v2)
  {
    v3 = *(void **)(v0 + 872);
    v4 = MEMORY[0x1B5E432E8](*(_QWORD *)(v0 + 1016), *(_QWORD *)(v0 + 1024));
    *(_QWORD *)(v0 + 1048) = v4;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 376) = v0 + 776;
    *(_QWORD *)(v0 + 336) = v0;
    *(_QWORD *)(v0 + 344) = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
    *(_QWORD *)(v0 + 696) = swift_continuation_init();
    *(_QWORD *)(v0 + 664) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 672) = 0x40000000;
    *(_QWORD *)(v0 + 680) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFPersonalUserSettings?, @unowned NSError?) -> () with result type AFPersonalUserSettings;
    *(_QWORD *)(v0 + 688) = &block_descriptor_252;
    objc_msgSend(v3, sel_getMultiUserSettingsForSharedUserID_completion_, v4, v0 + 664);
    return swift_continuation_await();
  }

  result = swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 984);
  v7 = *(_QWORD *)(v0 + 976);
  if (v6)
  {
    v8 = (v6 - 1) & v6;
    v9 = __clz(__rbit64(v6)) | (v7 << 6);
    result = *(_QWORD *)(v0 + 960);
LABEL_5:
    *(_QWORD *)(v0 + 984) = v8;
    *(_QWORD *)(v0 + 976) = v7;
    v10 = *(void **)(v0 + 872);
    v11 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v12 = *v11;
    v13 = v11[1];
    v14 = *(void **)(*(_QWORD *)(result + 56) + 8 * v9);
    *(_QWORD *)(v0 + 992) = v14;
    swift_bridgeObjectRetain();
    v15 = v14;
    v16 = MEMORY[0x1B5E432E8](v12, v13);
    *(_QWORD *)(v0 + 1000) = v16;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 440) = v0 + 744;
    *(_QWORD *)(v0 + 400) = v0;
    *(_QWORD *)(v0 + 408) = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
    *(_QWORD *)(v0 + 536) = swift_continuation_init();
    *(_QWORD *)(v0 + 504) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 512) = 0x40000000;
    *(_QWORD *)(v0 + 520) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSError?) -> () with result type String;
    *(_QWORD *)(v0 + 528) = &block_descriptor_250;
    objc_msgSend(v10, sel_getSharedUserIdForHomeUserId_completion_, v16, v0 + 504);
    return swift_continuation_await();
  }
  v17 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    v18 = (unint64_t)((1 << *(_BYTE *)(v0 + 1064)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 960);
    if (v17 >= v18)
      goto LABEL_21;
    v19 = result + 64;
    v20 = *(_QWORD *)(result + 64 + 8 * v17);
    ++v7;
    if (v20)
    {
LABEL_10:
      v8 = (v20 - 1) & v20;
      v9 = __clz(__rbit64(v20)) + (v7 << 6);
      goto LABEL_5;
    }
    v7 = v17 + 1;
    if (v17 + 1 >= v18)
      goto LABEL_21;
    v20 = *(_QWORD *)(v19 + 8 * v7);
    if (v20)
      goto LABEL_10;
    v7 = v17 + 2;
    if (v17 + 2 >= v18)
      goto LABEL_21;
    v20 = *(_QWORD *)(v19 + 8 * v7);
    if (v20)
      goto LABEL_10;
    v21 = v17 + 3;
    if (v21 >= v18)
    {
LABEL_21:
      v22 = *(void **)(v0 + 872);
      swift_release();

      v23 = *(_QWORD *)(v0 + 968);
      v24 = *(void **)(v0 + 944);
      v25 = *(void **)(v0 + 936);
      v26 = *(void **)(v0 + 816);
      v27 = *(_QWORD *)(v0 + 808);
      v28 = v26;
      IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v26, v24, v25, 0, v27);
      v29 = type metadata accessor for SiriRequestIdentities(0);
      *(_QWORD *)(v27 + *(int *)(v29 + 20)) = v23;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v27, 0, 1, v29);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v20 = *(_QWORD *)(v19 + 8 * v21);
    if (v20)
    {
      v7 = v21;
      goto LABEL_10;
    }
    while (1)
    {
      v7 = v21 + 1;
      if (__OFADD__(v21, 1))
        break;
      if (v7 >= v18)
        goto LABEL_21;
      v20 = *(_QWORD *)(v19 + 8 * v7);
      ++v21;
      if (v20)
        goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 1056) = *(_QWORD *)(*(_QWORD *)v0 + 368);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  void (*v53)(unint64_t, uint64_t, uint64_t);

  v1 = *(void **)(v0 + 776);

  v2 = *(void **)(v0 + 1040);
  v3 = *(void **)(v0 + 992);
  v4 = *(_QWORD *)(v0 + 840);
  v5 = *(_QWORD *)(v0 + 832);
  v6 = *(_QWORD *)(v0 + 824);
  v7 = v1;
  v8 = v3;
  v9 = v2;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)(0, v2, v1, v3, v6);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
  {
    v10 = *(void **)(v0 + 1040);
    v11 = *(void **)(v0 + 992);
    v12 = *(_QWORD *)(v0 + 824);

    result = outlined destroy of ReferenceResolutionClientProtocol?(v12, &demangling cache variable for type metadata for IdentifiedUser?);
    v14 = *(_QWORD *)(v0 + 984);
    v15 = *(_QWORD *)(v0 + 976);
    if (v14)
    {
LABEL_3:
      v16 = (v14 - 1) & v14;
      v17 = __clz(__rbit64(v14)) | (v15 << 6);
      result = *(_QWORD *)(v0 + 960);
LABEL_4:
      *(_QWORD *)(v0 + 984) = v16;
      *(_QWORD *)(v0 + 976) = v15;
      v18 = *(void **)(v0 + 872);
      v19 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v17);
      v20 = *v19;
      v21 = v19[1];
      v22 = *(void **)(*(_QWORD *)(result + 56) + 8 * v17);
      *(_QWORD *)(v0 + 992) = v22;
      swift_bridgeObjectRetain();
      v23 = v22;
      v24 = MEMORY[0x1B5E432E8](v20, v21);
      *(_QWORD *)(v0 + 1000) = v24;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 440) = v0 + 744;
      *(_QWORD *)(v0 + 400) = v0;
      *(_QWORD *)(v0 + 408) = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
      *(_QWORD *)(v0 + 536) = swift_continuation_init();
      *(_QWORD *)(v0 + 504) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 512) = 0x40000000;
      *(_QWORD *)(v0 + 520) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSError?) -> () with result type String;
      *(_QWORD *)(v0 + 528) = &block_descriptor_250;
      objc_msgSend(v18, sel_getSharedUserIdForHomeUserId_completion_, v24, v0 + 504);
      return swift_continuation_await();
    }
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 856);
    v26 = *(_QWORD *)(v0 + 848);
    v27 = *(_QWORD *)(v0 + 840);
    v28 = *(_QWORD *)(v0 + 832);
    v53 = *(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 32);
    v53(v25, *(_QWORD *)(v0 + 824), v28);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 16))(v26, v25, v28);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *(_QWORD *)(v0 + 968);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1, *(_QWORD *)(v0 + 968));
    v32 = *(_QWORD *)(v30 + 16);
    v31 = *(_QWORD *)(v30 + 24);
    v33 = v7;
    if (v32 >= v31 >> 1)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v30);
    v34 = *(void **)(v0 + 1040);
    v35 = *(void **)(v0 + 992);
    v36 = *(_QWORD *)(v0 + 856);
    v37 = *(_QWORD *)(v0 + 848);
    v38 = *(_QWORD *)(v0 + 840);
    v39 = *(_QWORD *)(v0 + 832);
    *(_QWORD *)(v30 + 16) = v32 + 1;
    v53(v30+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v32, v37, v39);

    result = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v36, v39);
    v14 = *(_QWORD *)(v0 + 984);
    v15 = *(_QWORD *)(v0 + 976);
    *(_QWORD *)(v0 + 968) = v30;
    if (v14)
      goto LABEL_3;
  }
  v40 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
  }
  else
  {
    v41 = (unint64_t)((1 << *(_BYTE *)(v0 + 1064)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 960);
    if (v40 >= v41)
      goto LABEL_24;
    v42 = result + 64;
    v43 = *(_QWORD *)(result + 64 + 8 * v40);
    ++v15;
    if (v43)
    {
LABEL_13:
      v16 = (v43 - 1) & v43;
      v17 = __clz(__rbit64(v43)) + (v15 << 6);
      goto LABEL_4;
    }
    v15 = v40 + 1;
    if (v40 + 1 >= v41)
      goto LABEL_24;
    v43 = *(_QWORD *)(v42 + 8 * v15);
    if (v43)
      goto LABEL_13;
    v15 = v40 + 2;
    if (v40 + 2 >= v41)
      goto LABEL_24;
    v43 = *(_QWORD *)(v42 + 8 * v15);
    if (v43)
      goto LABEL_13;
    v44 = v40 + 3;
    if (v44 >= v41)
    {
LABEL_24:
      v45 = *(void **)(v0 + 872);
      swift_release();

      v46 = *(_QWORD *)(v0 + 968);
      v47 = *(void **)(v0 + 944);
      v48 = *(void **)(v0 + 936);
      v49 = *(void **)(v0 + 816);
      v50 = *(_QWORD *)(v0 + 808);
      v51 = v49;
      IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v49, v47, v48, 0, v50);
      v52 = type metadata accessor for SiriRequestIdentities(0);
      *(_QWORD *)(v50 + *(int *)(v52 + 20)) = v46;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v50, 0, 1, v52);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v43 = *(_QWORD *)(v42 + 8 * v44);
    if (v43)
    {
      v15 = v44;
      goto LABEL_13;
    }
    while (1)
    {
      v15 = v44 + 1;
      if (__OFADD__(v44, 1))
        break;
      if (v15 >= v41)
        goto LABEL_24;
      v43 = *(_QWORD *)(v42 + 8 * v15);
      ++v44;
      if (v43)
        goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = (void *)v0[115];
  v2 = (void *)v0[114];
  v3 = (void *)v0[102];
  swift_willThrow();

  v0[118] = v0[113];
  v0[117] = 0;
  v4 = (void *)v0[109];
  v0[39] = v0 + 96;
  v0[34] = v0;
  v0[35] = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
  v0[92] = swift_continuation_init();
  v0[88] = MEMORY[0x1E0C809B0];
  v0[89] = 0x40000000;
  v0[90] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary, @unowned NSError?) -> () with result type [String : SAPerson];
  v0[91] = &block_descriptor_249;
  objc_msgSend(v4, sel_homeUserIdToNames_, v0 + 88);
  return swift_continuation_await();
}

{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 928);
  swift_willThrow();

  *(_OWORD *)(v0 + 936) = 0u;
  v2 = *(void **)(v0 + 872);
  *(_QWORD *)(v0 + 312) = v0 + 768;
  *(_QWORD *)(v0 + 272) = v0;
  *(_QWORD *)(v0 + 280) = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
  *(_QWORD *)(v0 + 736) = swift_continuation_init();
  *(_QWORD *)(v0 + 704) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v0 + 712) = 0x40000000;
  *(_QWORD *)(v0 + 720) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary, @unowned NSError?) -> () with result type [String : SAPerson];
  *(_QWORD *)(v0 + 728) = &block_descriptor_249;
  objc_msgSend(v2, sel_homeUserIdToNames_, v0 + 704);
  return swift_continuation_await();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(unint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;

  v1 = *(void **)(v0 + 1056);
  v2 = *(void **)(v0 + 1048);
  swift_willThrow();

  v3 = *(void **)(v0 + 1040);
  v4 = *(void **)(v0 + 992);
  v5 = *(_QWORD *)(v0 + 840);
  v6 = *(_QWORD *)(v0 + 832);
  v7 = *(_QWORD *)(v0 + 824);
  v8 = v4;
  v9 = v3;
  IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)(0, v3, 0, v4, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v6) == 1)
  {
    v10 = *(void **)(v0 + 1040);
    v11 = *(_QWORD *)(v0 + 824);

    result = outlined destroy of ReferenceResolutionClientProtocol?(v11, &demangling cache variable for type metadata for IdentifiedUser?);
    v13 = *(_QWORD *)(v0 + 984);
    v14 = *(_QWORD *)(v0 + 976);
    if (v13)
    {
LABEL_3:
      v15 = (v13 - 1) & v13;
      v16 = __clz(__rbit64(v13)) | (v14 << 6);
      result = *(_QWORD *)(v0 + 960);
LABEL_4:
      *(_QWORD *)(v0 + 984) = v15;
      *(_QWORD *)(v0 + 976) = v14;
      v17 = *(void **)(v0 + 872);
      v18 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v16);
      v19 = *v18;
      v20 = v18[1];
      v21 = *(void **)(*(_QWORD *)(result + 56) + 8 * v16);
      *(_QWORD *)(v0 + 992) = v21;
      swift_bridgeObjectRetain();
      v22 = v21;
      v23 = MEMORY[0x1B5E432E8](v19, v20);
      *(_QWORD *)(v0 + 1000) = v23;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 440) = v0 + 744;
      *(_QWORD *)(v0 + 400) = v0;
      *(_QWORD *)(v0 + 408) = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
      *(_QWORD *)(v0 + 536) = swift_continuation_init();
      *(_QWORD *)(v0 + 504) = MEMORY[0x1E0C809B0];
      *(_QWORD *)(v0 + 512) = 0x40000000;
      *(_QWORD *)(v0 + 520) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSError?) -> () with result type String;
      *(_QWORD *)(v0 + 528) = &block_descriptor_250;
      objc_msgSend(v17, sel_getSharedUserIdForHomeUserId_completion_, v23, v0 + 504);
      return swift_continuation_await();
    }
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 856);
    v25 = *(_QWORD *)(v0 + 848);
    v26 = *(_QWORD *)(v0 + 840);
    v27 = *(_QWORD *)(v0 + 832);
    v28 = *(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32);
    v28(v24, *(_QWORD *)(v0 + 824), v27);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 16))(v25, v24, v27);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v30 = *(_QWORD *)(v0 + 968);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1, *(_QWORD *)(v0 + 968));
    v32 = *(_QWORD *)(v30 + 16);
    v31 = *(_QWORD *)(v30 + 24);
    if (v32 >= v31 >> 1)
      v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v30);
    v33 = *(void **)(v0 + 1040);
    v34 = *(void **)(v0 + 992);
    v35 = *(_QWORD *)(v0 + 856);
    v36 = *(_QWORD *)(v0 + 848);
    v37 = *(_QWORD *)(v0 + 840);
    v38 = *(_QWORD *)(v0 + 832);
    *(_QWORD *)(v30 + 16) = v32 + 1;
    v28(v30+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v32, v36, v38);

    result = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v35, v38);
    v13 = *(_QWORD *)(v0 + 984);
    v14 = *(_QWORD *)(v0 + 976);
    *(_QWORD *)(v0 + 968) = v30;
    if (v13)
      goto LABEL_3;
  }
  v39 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
  }
  else
  {
    v40 = (unint64_t)((1 << *(_BYTE *)(v0 + 1064)) + 63) >> 6;
    result = *(_QWORD *)(v0 + 960);
    if (v39 >= v40)
      goto LABEL_24;
    v41 = result + 64;
    v42 = *(_QWORD *)(result + 64 + 8 * v39);
    ++v14;
    if (v42)
    {
LABEL_13:
      v15 = (v42 - 1) & v42;
      v16 = __clz(__rbit64(v42)) + (v14 << 6);
      goto LABEL_4;
    }
    v14 = v39 + 1;
    if (v39 + 1 >= v40)
      goto LABEL_24;
    v42 = *(_QWORD *)(v41 + 8 * v14);
    if (v42)
      goto LABEL_13;
    v14 = v39 + 2;
    if (v39 + 2 >= v40)
      goto LABEL_24;
    v42 = *(_QWORD *)(v41 + 8 * v14);
    if (v42)
      goto LABEL_13;
    v43 = v39 + 3;
    if (v43 >= v40)
    {
LABEL_24:
      v44 = *(void **)(v0 + 872);
      swift_release();

      v45 = *(_QWORD *)(v0 + 968);
      v46 = *(void **)(v0 + 944);
      v47 = *(void **)(v0 + 936);
      v48 = *(void **)(v0 + 816);
      v49 = *(_QWORD *)(v0 + 808);
      v50 = v48;
      IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v48, v46, v47, 0, v49);
      v51 = type metadata accessor for SiriRequestIdentities(0);
      *(_QWORD *)(v49 + *(int *)(v51 + 20)) = v45;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v49, 0, 1, v51);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v42 = *(_QWORD *)(v41 + 8 * v43);
    if (v42)
    {
      v14 = v43;
      goto LABEL_13;
    }
    while (1)
    {
      v14 = v43 + 1;
      if (__OFADD__(v43, 1))
        break;
      if (v14 >= v40)
        goto LABEL_24;
      v42 = *(_QWORD *)(v41 + 8 * v14);
      ++v43;
      if (v42)
        goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

void RemoteConversationService.makeRequestIdentities(userSpecificInfo:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;

  v1 = *(void **)(v0 + 1008);
  v2 = *(void **)(v0 + 1000);
  v3 = *(void **)(v0 + 992);
  swift_willThrow();

  v4 = *(_QWORD *)(v0 + 984);
  v5 = *(_QWORD *)(v0 + 976);
  if (v4)
  {
    v6 = (v4 - 1) & v4;
    v7 = __clz(__rbit64(v4)) | (v5 << 6);
    v8 = *(_QWORD *)(v0 + 960);
LABEL_3:
    *(_QWORD *)(v0 + 984) = v6;
    *(_QWORD *)(v0 + 976) = v5;
    v9 = *(void **)(v0 + 872);
    v10 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v7);
    v11 = *v10;
    v12 = v10[1];
    v13 = *(void **)(*(_QWORD *)(v8 + 56) + 8 * v7);
    *(_QWORD *)(v0 + 992) = v13;
    swift_bridgeObjectRetain();
    v14 = v13;
    v15 = MEMORY[0x1B5E432E8](v11, v12);
    *(_QWORD *)(v0 + 1000) = v15;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 440) = v0 + 744;
    *(_QWORD *)(v0 + 400) = v0;
    *(_QWORD *)(v0 + 408) = RemoteConversationService.makeRequestIdentities(userSpecificInfo:);
    *(_QWORD *)(v0 + 536) = swift_continuation_init();
    *(_QWORD *)(v0 + 504) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 512) = 0x40000000;
    *(_QWORD *)(v0 + 520) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSError?) -> () with result type String;
    *(_QWORD *)(v0 + 528) = &block_descriptor_250;
    objc_msgSend(v9, sel_getSharedUserIdForHomeUserId_completion_, v15, v0 + 504);
    swift_continuation_await();
    return;
  }
  v16 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v17 = (unint64_t)((1 << *(_BYTE *)(v0 + 1064)) + 63) >> 6;
    v8 = *(_QWORD *)(v0 + 960);
    if (v16 >= v17)
      goto LABEL_18;
    v18 = v8 + 64;
    v19 = *(_QWORD *)(v8 + 64 + 8 * v16);
    ++v5;
    if (v19)
    {
LABEL_7:
      v6 = (v19 - 1) & v19;
      v7 = __clz(__rbit64(v19)) + (v5 << 6);
      goto LABEL_3;
    }
    v5 = v16 + 1;
    if (v16 + 1 >= v17)
      goto LABEL_18;
    v19 = *(_QWORD *)(v18 + 8 * v5);
    if (v19)
      goto LABEL_7;
    v5 = v16 + 2;
    if (v16 + 2 >= v17)
      goto LABEL_18;
    v19 = *(_QWORD *)(v18 + 8 * v5);
    if (v19)
      goto LABEL_7;
    v20 = v16 + 3;
    if (v20 >= v17)
    {
LABEL_18:
      v21 = *(void **)(v0 + 872);
      swift_release();

      v22 = *(_QWORD *)(v0 + 968);
      v23 = *(void **)(v0 + 944);
      v24 = *(void **)(v0 + 936);
      v25 = *(void **)(v0 + 816);
      v26 = *(_QWORD *)(v0 + 808);
      v27 = v25;
      IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)((char *)v25, v23, v24, 0, v26);
      v28 = type metadata accessor for SiriRequestIdentities(0);
      *(_QWORD *)(v26 + *(int *)(v28 + 20)) = v22;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v26, 0, 1, v28);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      (*(void (**)(void))(v0 + 8))();
      return;
    }
    v19 = *(_QWORD *)(v18 + 8 * v20);
    if (v19)
    {
      v5 = v20;
      goto LABEL_7;
    }
    while (1)
    {
      v5 = v20 + 1;
      if (__OFADD__(v20, 1))
        break;
      if (v5 >= v17)
        goto LABEL_18;
      v19 = *(_QWORD *)(v18 + 8 * v5);
      ++v20;
      if (v19)
        goto LABEL_7;
    }
  }
  __break(1u);
}

uint64_t closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  *(_BYTE *)(v4 + 80) = a4;
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 40) = type metadata accessor for UserInputResult();
  *(_QWORD *)(v4 + 48) = swift_task_alloc();
  *(_QWORD *)(v4 + 56) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[3];
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v3 + 24) + *(_QWORD *)(v3 + 24));
  v4 = (_QWORD *)swift_task_alloc();
  v0[8] = v4;
  *v4 = v0;
  v4[1] = closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  return v6(v0[7], v0[4], v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  _BOOL8 v2;

  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 48), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  v2 = 0;
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    v1 = *(_BYTE *)(v0 + 80);
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 48), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
    if ((v1 & 1) != 0)
      v2 = 1;
  }
  outlined init with take of UserInputResult(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 16));
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v2);
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t closure #1 in RemoteConversationService.prepare(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[12] = a5;
  v6[13] = a6;
  v6[11] = a4;
  v6[14] = type metadata accessor for RemoteConversationService.State(0);
  v6[15] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v6[16] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.prepare(bridge:reply:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  void (*v20)(void);
  void *v21;
  uint64_t *v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 88) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v2, v1, type metadata accessor for RemoteConversationService.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v4 = *(_QWORD *)(v0 + 120);
      *(_DWORD *)(v0 + 152) = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                                        + 64);
      swift_bridgeObjectRelease();
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v4 + 40), v0 + 16);
      v5 = *(_QWORD *)(v0 + 40);
      v6 = *(_QWORD *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v5);
      v23 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v6 + 40) + *(_QWORD *)(v6 + 40));
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 136) = v7;
      *v7 = v0;
      v7[1] = closure #1 in RemoteConversationService.prepare(bridge:reply:);
      return v23(v5, v6);
    }
    v24 = 0;
    v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    v13 = 0xD00000000000003FLL;
    v14 = 0x80000001B4EFF4A0;
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 120);
    swift_release();
    v24 = 0;
    v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v10._countAndFlagsBits = 0x74784520776F6C46;
    v10._object = (void *)0xEF206E6F69736E65;
    String.append(_:)(v10);
    v11._object = (void *)0x80000001B4EFD120;
    v11._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 0xD000000000000023;
    v12._object = (void *)0x80000001B4EFF470;
    String.append(_:)(v12);
    v13 = 0;
    v14 = 0xE000000000000000;
    outlined destroy of ReferenceResolutionClientProtocol?(v9 + 40, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1(v9);
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v24 = v19;
    *(_DWORD *)v18 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v16, v17, "%s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v19, -1, -1);
    MEMORY[0x1B5E44758](v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v20 = *(void (**)(void))(v0 + 96);
  lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  v21 = (void *)swift_allocError();
  *v22 = v13;
  v22[1] = v14;
  v20();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = v1 + *(int *)(v0 + 152);
  (*(void (**)(_QWORD))(v0 + 96))(0);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v3 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(void *);
  uint64_t v4;
  id v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(void (**)(void *))(v0 + 96);
  v4 = v2 + *(int *)(v0 + 152);
  v5 = v1;
  v3(v1);

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v6 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_1(v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RemoteConversationService.paraphrase(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[21] = a5;
  v6[22] = a6;
  v6[20] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  v6[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v6[24] = swift_task_alloc();
  v6[25] = type metadata accessor for RemoteConversationService.State(0);
  v6[26] = swift_task_alloc();
  v6[27] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.paraphrase(reply:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  objc_super *v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(objc_super *);
  uint64_t v29;
  objc_class *v30;
  char *v31;
  uint64_t *v32;
  objc_super *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 160) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v2, v1, type metadata accessor for RemoteConversationService.State);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v3 = *(_QWORD *)(v0 + 216);
    v4 = *(_QWORD *)(v0 + 192);
    v5 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 176);
    v35 = v3
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                 + 64);
    swift_bridgeObjectRelease();
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v3 + 40), v0 + 16);
    v7 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 16, v0 + 56);
    v8 = static ConversationActor.shared;
    v10 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v9, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = v8;
    v11[3] = v10;
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), (uint64_t)(v11 + 4));
    v11[9] = v5;
    v11[10] = v6;
    swift_retain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v4, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:), (uint64_t)v11);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    v12 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v35, v12);
    __swift_destroy_boxed_opaque_existential_1(v3);
  }
  else
  {
    v13 = (objc_super *)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 208);
    v37[0] = 0;
    v37[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    *(_QWORD *)(v0 + 120) = 0;
    *(_QWORD *)(v0 + 128) = 0xE000000000000000;
    v15._countAndFlagsBits = 0x74784520776F6C46;
    v15._object = (void *)0xEF206E6F69736E65;
    String.append(_:)(v15);
    v16._object = (void *)0x80000001B4EFCF00;
    v16._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v16);
    v17._countAndFlagsBits = 0xD000000000000016;
    v17._object = (void *)0x80000001B4EFF4E0;
    String.append(_:)(v17);
    outlined init with copy of ConversationHelperInput(v2, v14, type metadata accessor for RemoteConversationService.State);
    _print_unlocked<A, B>(_:_:)();
    outlined destroy of CamOutput(v14, type metadata accessor for RemoteConversationService.State);
    v18 = *(_QWORD *)(v0 + 120);
    v19 = *(_QWORD *)(v0 + 128);
    if (one-time initialization token for executor != -1)
      swift_once();
    v36 = v18;
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v37[0] = v24;
      *(_DWORD *)v23 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v19, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v21, v22, "%s", v23, 0xCu);
      swift_arrayDestroy();
      v25 = v24;
      v13 = (objc_super *)(v0 + 136);
      MEMORY[0x1B5E44758](v25, -1, -1);
      MEMORY[0x1B5E44758](v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v26 = *(_QWORD *)(v0 + 216);
    v27 = *(_QWORD *)(v0 + 184);
    v28 = *(void (**)(objc_super *))(v0 + 168);
    v29 = type metadata accessor for ActionParaphrase();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v27, 1, 1, v29);
    v30 = (objc_class *)type metadata accessor for ConversationParaphraseResultXPC(0);
    v31 = (char *)objc_allocWithZone(v30);
    outlined init with copy of ReferenceResolutionClientProtocol?(v27, (uint64_t)&v31[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase], &demangling cache variable for type metadata for ActionParaphrase?);
    v32 = (uint64_t *)&v31[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg];
    *v32 = v36;
    v32[1] = v19;
    *(_QWORD *)(v0 + 136) = v31;
    *(_QWORD *)(v0 + 144) = v30;
    swift_bridgeObjectRetain();
    v33 = -[objc_super init](v13, sel_init);
    outlined destroy of ReferenceResolutionClientProtocol?(v27, &demangling cache variable for type metadata for ActionParaphrase?);
    swift_bridgeObjectRelease();
    v28(v33);

    outlined destroy of CamOutput(v26, type metadata accessor for RemoteConversationService.State);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  v6[11] = swift_task_alloc();
  type metadata accessor for ConversationParaphraseResult(0);
  v6[12] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v6[13] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[8];
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v3 + 32) + *(_QWORD *)(v3 + 32));
  v4 = (_QWORD *)swift_task_alloc();
  v0[14] = v4;
  *v4 = v0;
  v4[1] = closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:);
  return v6(v0[12], v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  id v3;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(void (**)(void))(v0 + 72);
  v3 = ConversationParaphraseResult.xpcRepresentation.getter();
  v2();

  outlined destroy of CamOutput(v1, type metadata accessor for ConversationParaphraseResult);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(id);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  char *v9;
  uint64_t *v10;
  id v11;

  v1 = *(void **)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(void (**)(id))(v0 + 72);
  swift_getErrorValue();
  v4 = Error.localizedDescription.getter();
  v6 = v5;
  v7 = type metadata accessor for ActionParaphrase();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
  v8 = (objc_class *)type metadata accessor for ConversationParaphraseResultXPC(0);
  v9 = (char *)objc_allocWithZone(v8);
  outlined init with copy of ReferenceResolutionClientProtocol?(v2, (uint64_t)&v9[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase], &demangling cache variable for type metadata for ActionParaphrase?);
  v10 = (uint64_t *)&v9[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg];
  *v10 = v4;
  v10[1] = v6;
  *(_QWORD *)(v0 + 40) = v9;
  *(_QWORD *)(v0 + 48) = v8;
  swift_bridgeObjectRetain();
  v11 = objc_msgSendSuper2((objc_super *)(v0 + 40), sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for ActionParaphrase?);
  swift_bridgeObjectRelease();
  v3(v11);

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RemoteConversationService.commit(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[12] = a5;
  v6[13] = a6;
  v6[11] = a4;
  type metadata accessor for ConversationCommitResult();
  v6[14] = swift_task_alloc();
  v6[15] = type metadata accessor for RemoteConversationService.State(0);
  v6[16] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v6[17] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.commit(bridge:reply:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  void (*v20)(id);
  void *v21;
  uint64_t *v22;
  id v23;
  uint64_t (*v24)(_QWORD, uint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 88) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v2, v1, type metadata accessor for RemoteConversationService.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v4 = *(_QWORD *)(v0 + 128);
      *(_DWORD *)(v0 + 160) = *(_DWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                                        + 64);
      swift_bridgeObjectRelease();
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v4 + 40), v0 + 16);
      v5 = *(_QWORD *)(v0 + 40);
      v6 = *(_QWORD *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v5);
      v24 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v6 + 48) + *(_QWORD *)(v6 + 48));
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 144) = v7;
      *v7 = v0;
      v7[1] = closure #1 in RemoteConversationService.commit(bridge:reply:);
      return v24(*(_QWORD *)(v0 + 112), v5, v6);
    }
    v25 = 0;
    v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    v14 = 0xD00000000000003ELL;
    v13 = 0x80000001B4EFF430;
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 128);
    swift_release();
    v25 = 0;
    v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v10._countAndFlagsBits = 0x74784520776F6C46;
    v10._object = (void *)0xEF206E6F69736E65;
    String.append(_:)(v10);
    v11._object = (void *)0x80000001B4EFD100;
    v11._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v11);
    v12._countAndFlagsBits = 0xD000000000000023;
    v12._object = (void *)0x80000001B4EFF470;
    String.append(_:)(v12);
    v14 = 0;
    v13 = 0xE000000000000000;
    outlined destroy of ReferenceResolutionClientProtocol?(v9 + 40, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1(v9);
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v25 = v19;
    *(_DWORD *)v18 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v16, v17, "%s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v19, -1, -1);
    MEMORY[0x1B5E44758](v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v20 = *(void (**)(id))(v0 + 96);
  lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  v21 = (void *)swift_allocError();
  *v22 = v14;
  v22[1] = v13;
  v23 = specialized static ConversationCommitResultXPC.error(_:)(v21);

  v20(v23);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(void);
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(void (**)(void))(v0 + 96);
  v4 = v1 + *(int *)(v0 + 160);
  ConversationCommitResult.xpcRepresentation.getter();
  v6 = v5;
  v3();

  outlined destroy of CamOutput(v2, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v7 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
  __swift_destroy_boxed_opaque_existential_1(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void (*v3)(void);
  uint64_t v4;
  id v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(void (**)(void))(v0 + 96);
  v4 = v2 + *(int *)(v0 + 160);
  v5 = specialized static ConversationCommitResultXPC.error(_:)(v1);
  v3();

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v6 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
  __swift_destroy_boxed_opaque_existential_1(v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RemoteConversationService.isEmpty(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[36] = a5;
  v6[37] = a6;
  v6[35] = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v6[38] = swift_task_alloc();
  v6[39] = type metadata accessor for RemoteConversationService.State(0);
  v6[40] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.isEmpty(reply:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(uint64_t);
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 280) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v2, v1, type metadata accessor for RemoteConversationService.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v15 = *(_QWORD *)(v0 + 320) + 40;
    swift_release();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v15, v0 + 56, &demangling cache variable for type metadata for Conversational?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 56, v0 + 16, &demangling cache variable for type metadata for Conversational?);
    v16 = *(_QWORD *)(v0 + 320);
    if (*(_QWORD *)(v0 + 40))
    {
      v18 = *(_QWORD *)(v0 + 296);
      v17 = *(_QWORD *)(v0 + 304);
      v28 = *(_QWORD *)(v0 + 320);
      v19 = *(_QWORD *)(v0 + 288);
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 16), v0 + 96);
      v20 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v17, 1, 1, v20);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 96, v0 + 176);
      v21 = static ConversationActor.shared;
      v23 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v22, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
      v24 = (_QWORD *)swift_allocObject();
      v24[2] = v21;
      v24[3] = v23;
      v24[4] = v19;
      v24[5] = v18;
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 176), (uint64_t)(v24 + 6));
      swift_retain();
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v17, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in RemoteConversationService.isEmpty(reply:), (uint64_t)v24);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v0 + 96);
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for Conversational?);
      v14 = v28;
    }
    else
    {
      v25 = *(void (**)(uint64_t))(v0 + 288);
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for Conversational?);
      v25(1);
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for Conversational?);
      v14 = v16;
    }
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v4 = *(_QWORD *)(v0 + 320);
    v6 = *(_QWORD *)(v0 + 296);
    v5 = *(_QWORD *)(v0 + 304);
    v7 = *(_QWORD *)(v0 + 288);
    v27 = v4
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                 + 64);
    swift_bridgeObjectRelease();
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v4 + 40), v0 + 216);
    v8 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v5, 1, 1, v8);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 216, v0 + 136);
    v9 = static ConversationActor.shared;
    v11 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v10, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v9;
    v12[3] = v11;
    v12[4] = v7;
    v12[5] = v6;
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 136), (uint64_t)(v12 + 6));
    swift_retain();
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:), (uint64_t)v12);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 216);
    v13 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v27, v13);
    v14 = v4;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1(v14);
    goto LABEL_9;
  }
  (*(void (**)(uint64_t))(v0 + 288))(1);
LABEL_9:
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  v6[5] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 32);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v3 + 56) + *(_QWORD *)(v3 + 56));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:);
  return v6(v2, v3);
}

uint64_t closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.drainAsyncWork(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  v6[5] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.drainAsyncWork(reply:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))(**(int **)(**(_QWORD **)(*(_QWORD *)(v0 + 16) + 168) + 216)
                         + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v0 + 16) + 168) + 216));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = closure #1 in RemoteConversationService.drainAsyncWork(reply:);
  return v3();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(void))(v0 + 24))();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[38] = a5;
  v6[39] = a6;
  v6[37] = a4;
  v7 = type metadata accessor for FlexibleExecutionSupportOptions();
  v6[40] = v7;
  v6[41] = *(_QWORD *)(v7 - 8);
  v6[42] = swift_task_alloc();
  v6[43] = swift_task_alloc();
  v6[44] = type metadata accessor for RemoteConversationService.State(0);
  v6[45] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v6[46] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void (*v16)(void);
  objc_class *v17;
  char *v18;
  id v19;
  uint64_t v20;
  void (*v21)(void);
  uint64_t v22;
  uint64_t v23;
  objc_class *v24;
  char *v25;
  id v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 296) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v2, v1, type metadata accessor for RemoteConversationService.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v4 = *(_QWORD *)(v0 + 360);
      *(_QWORD *)(v0 + 376) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
      swift_bridgeObjectRelease();
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v4 + 40), v0 + 16);
      v5 = *(_QWORD *)(v0 + 40);
      v6 = *(_QWORD *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v5);
      v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(v6 + 72) + *(_QWORD *)(v6 + 72));
      v7 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 384) = v7;
      *v7 = v0;
      v7[1] = closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:);
      v8 = *(_QWORD *)(v0 + 344);
      return v27(v8, v5, v6);
    }
    if (one-time initialization token for executor != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "No conversation while idle", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }
    v16 = *(void (**)(void))(v0 + 304);

    v17 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
    v18 = (char *)objc_allocWithZone(v17);
    *(_QWORD *)&v18[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = -1;
    *(_QWORD *)(v0 + 248) = v18;
    *(_QWORD *)(v0 + 256) = v17;
    v19 = objc_msgSendSuper2((objc_super *)(v0 + 248), sel_init);
    v16();

  }
  else
  {
    v9 = *(_QWORD *)(v0 + 360) + 40;
    swift_release();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v9, v0 + 56, &demangling cache variable for type metadata for Conversational?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 56, v0 + 136, &demangling cache variable for type metadata for Conversational?);
    if (*(_QWORD *)(v0 + 160))
    {
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 136), v0 + 96);
      v5 = *(_QWORD *)(v0 + 120);
      v6 = *(_QWORD *)(v0 + 128);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 96), v5);
      v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(v6 + 72) + *(_QWORD *)(v6 + 72));
      v10 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 400) = v10;
      *v10 = v0;
      v10[1] = closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:);
      v8 = *(_QWORD *)(v0 + 336);
      return v27(v8, v5, v6);
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 136, &demangling cache variable for type metadata for Conversational?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v20 = *(_QWORD *)(v0 + 360);
    v21 = *(void (**)(void))(v0 + 304);
    v22 = type metadata accessor for Logger();
    v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
    specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/RemoteConversationService.swift", 46, 2, (uint64_t)"flexibleExecutionSupportOptions(reply:)", 39, 2, v23);
    v24 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
    v25 = (char *)objc_allocWithZone(v24);
    *(_QWORD *)&v25[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = -1;
    *(_QWORD *)(v0 + 200) = v25;
    *(_QWORD *)(v0 + 208) = v24;
    v26 = objc_msgSendSuper2((objc_super *)(v0 + 200), sel_init);
    v21();

    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1(v20);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 392) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  objc_class *v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(void (**)(void))(v0 + 304);
  v5 = FlexibleExecutionSupportOptions.rawValue.getter();
  v6 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  v7 = (char *)objc_allocWithZone(v6);
  *(_QWORD *)&v7[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = v5;
  *(_QWORD *)(v0 + 280) = v7;
  *(_QWORD *)(v0 + 288) = v6;
  v8 = objc_msgSendSuper2((objc_super *)(v0 + 280), sel_init);
  v4();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v9 = *(_QWORD *)(v0 + 360);
  v10 = v9 + *(int *)(*(_QWORD *)(v0 + 376) + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v11 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  __swift_destroy_boxed_opaque_existential_1(v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 408) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  objc_class *v6;
  char *v7;
  id v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 328);
  v1 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 320);
  v4 = *(void (**)(void))(v0 + 304);
  v5 = FlexibleExecutionSupportOptions.rawValue.getter();
  v6 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  v7 = (char *)objc_allocWithZone(v6);
  *(_QWORD *)&v7[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = v5;
  *(_QWORD *)(v0 + 232) = v7;
  *(_QWORD *)(v0 + 240) = v6;
  v8 = objc_msgSendSuper2((objc_super *)(v0 + 232), sel_init);
  v4();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v9 = *(_QWORD *)(v0 + 360);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for Conversational?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(void **)(v0 + 392);
  v2 = *(void (**)(void))(v0 + 304);
  v3 = type metadata accessor for Logger();
  v4 = __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/RemoteConversationService.swift", 46, 2, (uint64_t)"flexibleExecutionSupportOptions(reply:)", 39, 2, v4);
  v5 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  v6 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v6[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = -1;
  *(_QWORD *)(v0 + 264) = v6;
  *(_QWORD *)(v0 + 272) = v5;
  v7 = objc_msgSendSuper2((objc_super *)(v0 + 264), sel_init);
  v2();

  v8 = *(_QWORD *)(v0 + 360);
  v9 = v8 + *(int *)(*(_QWORD *)(v0 + 376) + 64);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v10 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  __swift_destroy_boxed_opaque_existential_1(v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  void (*v6)(void);
  objc_class *v7;
  char *v8;
  id v9;
  uint64_t v10;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "Error in whil querying remote conversation for flexible execution support", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = *(void **)(v0 + 408);
  v6 = *(void (**)(void))(v0 + 304);

  v7 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  v8 = (char *)objc_allocWithZone(v7);
  *(_QWORD *)&v8[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = -1;
  *(_QWORD *)(v0 + 216) = v8;
  *(_QWORD *)(v0 + 224) = v7;
  v9 = objc_msgSendSuper2((objc_super *)(v0 + 216), sel_init);
  v6();

  v10 = *(_QWORD *)(v0 + 360);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for Conversational?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RemoteConversationService.isCorrectable(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v6[18] = swift_task_alloc();
  v6[19] = type metadata accessor for RemoteConversationService.State(0);
  v6[20] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.isCorrectable(reply:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD);
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v2, v1, type metadata accessor for RemoteConversationService.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v4 = *(_QWORD *)(v0 + 160);
      v6 = *(_QWORD *)(v0 + 136);
      v5 = *(_QWORD *)(v0 + 144);
      v7 = *(_QWORD *)(v0 + 128);
      v17 = v4
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                   + 64);
      swift_bridgeObjectRelease();
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v4 + 40), v0 + 16);
      v8 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v5, 1, 1, v8);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 16, v0 + 56);
      v9 = static ConversationActor.shared;
      v11 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v10, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
      v12 = (_QWORD *)swift_allocObject();
      v12[2] = v9;
      v12[3] = v11;
      v12[4] = v7;
      v12[5] = v6;
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), (uint64_t)(v12 + 6));
      swift_retain();
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v5, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:), (uint64_t)v12);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
      v13 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v17, v13);
      __swift_destroy_boxed_opaque_existential_1(v4);
    }
    else
    {
      (*(void (**)(_QWORD))(v0 + 128))(0);
    }
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 160);
    v15 = *(void (**)(_QWORD))(v0 + 128);
    swift_release();
    v15(0);
    outlined destroy of ReferenceResolutionClientProtocol?(v14 + 40, &demangling cache variable for type metadata for Conversational?);
    __swift_destroy_boxed_opaque_existential_1(v14);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  v6[5] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 32);
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v3 + 64) + *(_QWORD *)(v3 + 64));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:);
  return v6(v2, v3);
}

{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 16))(*(unsigned __int8 *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t RemoteConversationService.activeTasksDidChange(activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t RemoteConversationService.activeTasksDidChange(activeTasks:rcId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void (*v7)(unint64_t, unint64_t, void *, _QWORD *);

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v2 + 168);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  v6[5] = v1;
  v7 = *(void (**)(unint64_t, unint64_t, void *, _QWORD *))(*(_QWORD *)v5 + 208);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(0xD000000000000027, 0x80000001B4EFF1D0, &async function pointer to partial apply for closure #1 in RemoteConversationService.activeTasksDidChange(activeTasks:rcId:), v6);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RemoteConversationService.activeTasksDidChange(activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return RemoteConversationService.sendActiveTasks(_:rcId:)(a2, a3, a4);
}

uint64_t RemoteConversationService.sendActiveTasks(_:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t updated;

  v4[22] = a3;
  v4[23] = v3;
  v4[20] = a1;
  v4[21] = a2;
  updated = type metadata accessor for ContextUpdateScope();
  v4[24] = updated;
  v4[25] = *(_QWORD *)(updated - 8);
  v4[26] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  v4[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  v4[28] = swift_task_alloc();
  type metadata accessor for RemoteConversationService.State(0);
  v4[29] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v4[30] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t RemoteConversationService.sendActiveTasks(_:rcId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 184) + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v2, v1, type metadata accessor for RemoteConversationService.State);
  RemoteConversationService.State.activeTurn.getter(v0 + 56);
  outlined destroy of CamOutput(v1, type metadata accessor for RemoteConversationService.State);
  if (*(_QWORD *)(v0 + 80))
  {
    v3 = *(_QWORD *)(v0 + 160);
    v4 = *(_QWORD *)(v0 + 216);
    v5 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 200);
    v6 = *(_QWORD *)(v0 + 208);
    v8 = *(_QWORD *)(v0 + 192);
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), v0 + 16);
    v9 = type metadata accessor for Parse.DirectInvocation();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v5, 1, 1, v9);
    v10 = type metadata accessor for PommesContext();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, *MEMORY[0x1E0D9BD88], v8);
    objc_allocWithZone((Class)type metadata accessor for ExecutionContextUpdate());
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 248) = specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(0, 0, 0, v3, 0, v5, 0, v4, v6, 0, 0);
    if (one-time initialization token for executor != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 256) = __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.debug.getter();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v0 + 176);
    if (v14)
    {
      v29 = *(_QWORD *)(v0 + 168);
      v16 = swift_slowAlloc();
      v30 = swift_slowAlloc();
      v31 = v30;
      *(_DWORD *)v16 = 136315650;
      *(_QWORD *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000018, 0x80000001B4EFF3E0, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v15, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 22) = 2080;
      v17 = type metadata accessor for Siri_Nlu_External_Task();
      v18 = swift_bridgeObjectRetain();
      v19 = MEMORY[0x1B5E434D4](v18, v17);
      v21 = v20;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v12, v13, "RemoteConversationService: %s sending active tasks if rcId='%s' is selected: %s", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v30, -1, -1);
      MEMORY[0x1B5E44758](v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    v27 = *(_QWORD *)(v0 + 40);
    v28 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v27);
    *(_QWORD *)(v0 + 264) = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 48))(v27, v28);
    return swift_task_switch();
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ConversationTurnState?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1B4BE6000, v23, v24, "Cannot send active task list to Execution Bridge: We're not in an active turn", v25, 2u);
      MEMORY[0x1B5E44758](v25, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  _QWORD *v8;

  v1 = v0[33];
  v2 = (void *)v0[31];
  v4 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  v5 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
  swift_bridgeObjectRetain();
  v6 = v2;
  v7 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(0, v2, 0, 0, 0, 0, 0, 0, 0, 0, v4, v3);
  v0[34] = v7;

  v8 = (_QWORD *)swift_task_alloc();
  v0[35] = v8;
  *v8 = v0;
  v8[1] = RemoteConversationService.sendActiveTasks(_:rcId:);
  return AceServiceInvokerImpl.publish(executionOutput:)((uint64_t)v7);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _BOOL4 v3;
  void *v4;
  uint8_t *v5;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  v3 = os_log_type_enabled(v1, v2);
  v4 = *(void **)(v0 + 248);
  if (v3)
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v1, v2, "Sent active task list to SiriRequestDispatcher", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  void *v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v15;

  v1 = *(void **)(v0 + 288);
  swift_release();
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 288);
    v7 = *(void **)(v0 + 248);
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    *(_DWORD *)v8 = 136315138;
    v15 = v9;
    *(_QWORD *)(v0 + 120) = v6;
    v10 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v11 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v4, v5, "Error sending active task list to SiriRequestDispatcher: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);

  }
  else
  {
    v13 = *(void **)(v0 + 288);

  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[18] = a4;
  v5[19] = v4;
  v5[16] = a2;
  v5[17] = a3;
  v5[15] = a1;
  type metadata accessor for RemoteConversationService.State(0);
  v5[20] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void (*v8)(unint64_t, unint64_t, void *, _QWORD *);
  id v9;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 128);
  v11 = *(_QWORD *)(v0 + 136);
  v12 = *(_QWORD *)(v0 + 144);
  v4 = *(void **)(v0 + 120);
  v5 = v2 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v5, v1, type metadata accessor for RemoteConversationService.State);
  RemoteConversationService.State.activeTurn.getter(v0 + 16);
  outlined destroy of CamOutput(v1, type metadata accessor for RemoteConversationService.State);
  v6 = *(_QWORD *)(v2 + 168);
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, v0 + 56, &demangling cache variable for type metadata for ConversationTurnState?);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v4;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v0 + 56, (uint64_t)(v7 + 3), &demangling cache variable for type metadata for ConversationTurnState?);
  v7[8] = v2;
  v7[9] = v3;
  v7[10] = v11;
  v7[11] = v12;
  v8 = *(void (**)(unint64_t, unint64_t, void *, _QWORD *))(*(_QWORD *)v6 + 208);
  v9 = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(0xD000000000000039, 0x80000001B4EFF200, &async function pointer to partial apply for closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:), v7);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for ConversationTurnState?);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RemoteConversationService.State.activeTurn.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t (*v7)(_QWORD);
  int EnumCaseMultiPayload;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13[2];

  v2 = v1;
  v4 = type metadata accessor for RemoteConversationService.State(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (__int128 *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ConversationHelperInput(v2, (uint64_t)v6, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    swift_release();
    outlined init with take of ReferenceResolutionClientProtocol(v6, (uint64_t)v13);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6 + 40, &demangling cache variable for type metadata for Conversational?);
    return outlined init with take of ReferenceResolutionClientProtocol(v13, a1);
  }
  if (EnumCaseMultiPayload == 1)
  {
    v9 = (char *)v6
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                + 64);
    swift_bridgeObjectRelease();
    outlined init with take of ReferenceResolutionClientProtocol(v6, (uint64_t)v13);
    v10 = type metadata accessor for Input();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6 + 40);
    return outlined init with take of ReferenceResolutionClientProtocol(v13, a1);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return outlined destroy of CamOutput((uint64_t)v6, type metadata accessor for RemoteConversationService.State);
}

uint64_t closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 56);
  v7 = *(_OWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  v4 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v4;
  *(_OWORD *)(v3 + 40) = v7;
  *(_QWORD *)(v3 + 56) = v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v5;
  *v5 = v0;
  v5[1] = closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:);
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[27] = a7;
  v8[28] = a8;
  v8[25] = a5;
  v8[26] = a6;
  v8[23] = a3;
  v8[24] = a4;
  v8[22] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v1 = *(void **)(v0 + 184);
  if (v1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 192), v0 + 96, &demangling cache variable for type metadata for ConversationTurnState?);
    if (*(_QWORD *)(v0 + 120))
    {
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 96), v0 + 56);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
      v2 = swift_task_alloc();
      v3 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 56, v0 + 136);
      v4 = one-time initialization token for shared;
      v6 = v1;
      if (v4 != -1)
        swift_once();
      v7 = static ConversationActor.shared;
      v8 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, v5, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
      v9 = (_QWORD *)swift_allocObject();
      v9[2] = v7;
      v9[3] = v8;
      v9[4] = v6;
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 136), (uint64_t)(v9 + 5));
      swift_retain();
      _sScG7addTask8priority9operationyScPSg_xyYaYAcntFyt_Tg5(v2, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:), (uint64_t)v9);

      outlined destroy of ReferenceResolutionClientProtocol?(v2, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
      __swift_destroy_boxed_opaque_existential_1(v0 + 56);
      swift_task_dealloc();
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for ConversationTurnState?);
    }
  }
  v11 = *(_QWORD *)(v0 + 216);
  v10 = *(_QWORD *)(v0 + 224);
  v13 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 208);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v14 = swift_task_alloc();
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v13;
  v16[5] = v12;
  v16[6] = v11;
  v16[7] = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _sScG7addTask8priority9operationyScPSg_xyYaYAcntFyt_Tg5(v14, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:), (uint64_t)v16);
  outlined destroy of ReferenceResolutionClientProtocol?(v14, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  swift_task_dealloc();
  if (!__isPlatformVersionAtLeast(2, 18, 0, 0))
    return swift_task_switch();
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 232) = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<()>);
  *v17 = v0;
  v17[1] = closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:);
  return TaskGroup.awaitAllRemainingTasks(isolation:)();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  return swift_taskGroup_wait_next_throwing();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 240) = v0;
  if (v0 || (*(_BYTE *)(v1 + 248) & 1) == 0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

{
  return swift_unexpectedError();
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a4;
  *(_QWORD *)(v5 + 32) = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(void **)(v0 + 24);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 24);
  if (v6)
  {
    v8 = swift_slowAlloc();
    v15 = (_QWORD *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v17 = v16;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000039, 0x80000001B4EFF200, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    *(_QWORD *)(v0 + 16) = v7;
    v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v15 = v7;

    _os_log_impl(&dword_1B4BE6000, v4, v5, "RemoteConversationService: %s sending loaded flow info to ExecutionBridge: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v15, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v16, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }
  else
  {

  }
  v11 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD **)(v0 + 32);
  v12 = v10[3];
  v13 = v10[4];
  __swift_project_boxed_opaque_existential_1(v10, v12);
  objc_msgSend((id)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 88))(v12, v13), sel_flowPluginWillExecuteWithFlowPluginInfo_, v11);
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v11;
  *v11 = v7;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return RemoteConversationService.sendActiveTasks(_:rcId:)(a5, a6, a7);
}

uint64_t RemoteConversationService.executionDidComplete()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;

  if (one-time initialization token for executor != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))(**(int **)(**(_QWORD **)(*(_QWORD *)(v0 + 16) + 168) + 216)
                         + *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(v0 + 16) + 168) + 216));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = closure #1 in closure #1 in RemoteConversationService.reset(reply:);
  return v3();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFSharedUserInfo?) -> () with result type AFSharedUserInfo?(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v6 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 64) + 40);
  v4 = a2;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v6, v3, &demangling cache variable for type metadata for AFSharedUserInfo?);
  return swift_continuation_resume();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned AFPersonalUserSettings?, @unowned NSError?) -> () with result type AFPersonalUserSettings(uint64_t result, void *a2, void *a3)
{
  _QWORD *v4;
  id v5;
  id v6;

  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(result + 32) + 64) + 40) = a2;
    v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned NSError?) -> () with result type String(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = *(uint64_t **)(*(_QWORD *)(v3 + 64) + 40);
    *v9 = v8;
    v9[1] = v10;
    return swift_continuation_throwingResume();
  }
}

uint64_t RemoteConversationService.FlowAndInputRegistry.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t RemoteConversationService.FlowAndInputRegistry.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t RemoteConversationService.FlowAndInputRegistry.init()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = v0;
  v2 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 24) = v2;
  return result;
}

uint64_t RemoteConversationService.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  swift_release();
  swift_release();
  outlined destroy of CamOutput(v0 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state, type metadata accessor for RemoteConversationService.State);
  swift_release();
  return v0;
}

uint64_t RemoteConversationService.__deallocating_deinit()
{
  RemoteConversationService.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ConversationTaskObservationDelegate.conversationWillExecute(flowPluginInfo:activeTasks:rcId:) in conformance RemoteConversationService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(a1, a2, a3, a4);
}

uint64_t protocol witness for ConversationTaskObservationDelegate.executionDidComplete() in conformance RemoteConversationService()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t protocol witness for ConversationTaskObservationDelegate.activeTasksDidChange(activeTasks:rcId:) in conformance RemoteConversationService(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t protocol witness for ConversationTaskObservationDelegate.activeTasksDidChange(activeTasks:rcId:) in conformance RemoteConversationService()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void (*v7)(unint64_t, unint64_t, void *, _QWORD *);

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v2 + 168);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  v6[5] = v1;
  v7 = *(void (**)(unint64_t, unint64_t, void *, _QWORD *))(*(_QWORD *)v5 + 208);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(0xD000000000000027, 0x80000001B4EFF1D0, &closure #1 in RemoteConversationService.activeTasksDidChange(activeTasks:rcId:)partial apply, v6);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v8 + 144) = a7;
  *(_QWORD *)(v8 + 152) = a8;
  *(_BYTE *)(v8 + 408) = a5;
  *(_QWORD *)(v8 + 128) = a4;
  *(_QWORD *)(v8 + 136) = a6;
  *(_QWORD *)(v8 + 112) = a1;
  *(_QWORD *)(v8 + 120) = a3;
  *(_QWORD *)(v8 + 160) = type metadata accessor for RemoteConversationService.State(0);
  *(_QWORD *)(v8 + 168) = swift_task_alloc();
  v10 = type metadata accessor for UUID();
  *(_QWORD *)(v8 + 176) = v10;
  *(_QWORD *)(v8 + 184) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 192) = swift_task_alloc();
  *(_QWORD *)(v8 + 200) = type metadata accessor for UserInputResult();
  *(_QWORD *)(v8 + 208) = swift_task_alloc();
  *(_QWORD *)(v8 + 216) = swift_task_alloc();
  *(_QWORD *)(v8 + 224) = swift_task_alloc();
  *(_QWORD *)(v8 + 232) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
  *(_QWORD *)(v8 + 240) = swift_task_alloc();
  v11 = type metadata accessor for Input();
  *(_QWORD *)(v8 + 248) = v11;
  *(_QWORD *)(v8 + 256) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 264) = swift_task_alloc();
  *(_QWORD *)(v8 + 272) = type metadata accessor for SiriRequest(0);
  *(_QWORD *)(v8 + 280) = swift_task_alloc();
  v12 = type metadata accessor for RequestPositionInSession();
  *(_QWORD *)(v8 + 288) = v12;
  *(_QWORD *)(v8 + 296) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 304) = swift_task_alloc();
  *(_QWORD *)(v8 + 40) = type metadata accessor for EncoreConversation(0);
  *(_QWORD *)(v8 + 48) = &protocol witness table for EncoreConversation;
  *(_QWORD *)(v8 + 16) = a2;
  v13 = one-time initialization token for shared;
  swift_retain();
  if (v13 != -1)
    swift_once();
  *(_QWORD *)(v8 + 312) = static ConversationActor.shared;
  return swift_task_switch();
}

{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v8 + 144) = a7;
  *(_QWORD *)(v8 + 152) = a8;
  *(_BYTE *)(v8 + 408) = a5;
  *(_QWORD *)(v8 + 128) = a4;
  *(_QWORD *)(v8 + 136) = a6;
  *(_QWORD *)(v8 + 112) = a1;
  *(_QWORD *)(v8 + 120) = a3;
  *(_QWORD *)(v8 + 160) = type metadata accessor for RemoteConversationService.State(0);
  *(_QWORD *)(v8 + 168) = swift_task_alloc();
  v10 = type metadata accessor for UUID();
  *(_QWORD *)(v8 + 176) = v10;
  *(_QWORD *)(v8 + 184) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 192) = swift_task_alloc();
  *(_QWORD *)(v8 + 200) = type metadata accessor for UserInputResult();
  *(_QWORD *)(v8 + 208) = swift_task_alloc();
  *(_QWORD *)(v8 + 216) = swift_task_alloc();
  *(_QWORD *)(v8 + 224) = swift_task_alloc();
  *(_QWORD *)(v8 + 232) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
  *(_QWORD *)(v8 + 240) = swift_task_alloc();
  v11 = type metadata accessor for Input();
  *(_QWORD *)(v8 + 248) = v11;
  *(_QWORD *)(v8 + 256) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 264) = swift_task_alloc();
  *(_QWORD *)(v8 + 272) = type metadata accessor for SiriRequest(0);
  *(_QWORD *)(v8 + 280) = swift_task_alloc();
  v12 = type metadata accessor for RequestPositionInSession();
  *(_QWORD *)(v8 + 288) = v12;
  *(_QWORD *)(v8 + 296) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 304) = swift_task_alloc();
  *(_QWORD *)(v8 + 40) = type metadata accessor for Conversation(0);
  *(_QWORD *)(v8 + 48) = &protocol witness table for Conversation;
  *(_QWORD *)(v8 + 16) = a2;
  v13 = one-time initialization token for shared;
  swift_retain();
  if (v13 != -1)
    swift_once();
  *(_QWORD *)(v8 + 312) = static ConversationActor.shared;
  return swift_task_switch();
}

{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 144) = a7;
  *(_QWORD *)(v8 + 152) = a8;
  *(_BYTE *)(v8 + 408) = a5;
  *(_QWORD *)(v8 + 128) = a4;
  *(_QWORD *)(v8 + 136) = a6;
  *(_QWORD *)(v8 + 112) = a1;
  *(_QWORD *)(v8 + 120) = a3;
  *(_QWORD *)(v8 + 160) = type metadata accessor for RemoteConversationService.State(0);
  *(_QWORD *)(v8 + 168) = swift_task_alloc();
  v10 = type metadata accessor for UUID();
  *(_QWORD *)(v8 + 176) = v10;
  *(_QWORD *)(v8 + 184) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 192) = swift_task_alloc();
  *(_QWORD *)(v8 + 200) = type metadata accessor for UserInputResult();
  *(_QWORD *)(v8 + 208) = swift_task_alloc();
  *(_QWORD *)(v8 + 216) = swift_task_alloc();
  *(_QWORD *)(v8 + 224) = swift_task_alloc();
  *(_QWORD *)(v8 + 232) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
  *(_QWORD *)(v8 + 240) = swift_task_alloc();
  v11 = type metadata accessor for Input();
  *(_QWORD *)(v8 + 248) = v11;
  *(_QWORD *)(v8 + 256) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 264) = swift_task_alloc();
  *(_QWORD *)(v8 + 272) = type metadata accessor for SiriRequest(0);
  *(_QWORD *)(v8 + 280) = swift_task_alloc();
  v12 = type metadata accessor for RequestPositionInSession();
  *(_QWORD *)(v8 + 288) = v12;
  *(_QWORD *)(v8 + 296) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 304) = swift_task_alloc();
  *(_QWORD *)(v8 + 40) = v15;
  *(_QWORD *)(v8 + 48) = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v8 + 16));
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(boxed_opaque_existential_1, a2);
  if (one-time initialization token for shared != -1)
    swift_once();
  *(_QWORD *)(v8 + 312) = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0[37];
  v2 = v0[38];
  v3 = v0[36];
  v22 = v0[31];
  v23 = v0[33];
  v19 = v0[16];
  v20 = v0[32];
  v4 = (_QWORD *)v0[14];
  v21 = v0[15];
  v5 = v4[3];
  v18 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  v7 = v4[3];
  v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v7);
  v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 72))(v7, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, (uint64_t)v8 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession, v3);

  v0[40] = ConversationTurnState.makeCurrentRequestForSiriEnvironment(speechData:positionInSession:)(v19, v2, v5, v18);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  v9 = v19 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId;
  v0[41] = *(_QWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId);
  v0[42] = *(_QWORD *)(v9 + 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  v0[43] = v10;
  v10(v23, v21, v22);
  v11 = v4[3];
  v12 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v11);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 80);
  swift_bridgeObjectRetain();
  swift_retain();
  v0[44] = v13(v11, v12);
  v0[45] = v14;
  v15 = *(_QWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfo);
  v16 = (_QWORD *)swift_task_alloc();
  v0[46] = v16;
  *v16 = v0;
  v16[1] = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  return RemoteConversationService.makeRequestIdentities(userSpecificInfo:)(v0[30], v15);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(_QWORD, _QWORD, _QWORD, _QWORD, void *, uint64_t, _QWORD);

  v2 = *(_QWORD *)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 320);
  v6 = *(int **)(v0 + 272);
  v5 = *(char **)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 264);
  v10 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 248);
  v11 = *(_BYTE *)(v0 + 408);
  *(_QWORD *)v5 = *(_QWORD *)(v0 + 328);
  *((_QWORD *)v5 + 1) = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(&v5[v6[5]], v7, v9);
  *(_QWORD *)&v5[v6[6]] = v4;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v10, (uint64_t)&v5[v6[9]], &demangling cache variable for type metadata for SiriRequestIdentities?);
  v12 = &v5[v6[7]];
  *(_QWORD *)v12 = v2;
  *((_QWORD *)v12 + 1) = v1;
  *(_QWORD *)&v5[v6[8]] = 0;
  type metadata accessor for ConversationSELFHelper();
  *(_QWORD *)(v0 + 376) = static ConversationSELFHelper.shared.getter();
  Input.identifier.getter();
  v13 = swift_task_alloc();
  *(_QWORD *)(v0 + 384) = v13;
  *(_QWORD *)(v13 + 16) = v0 + 16;
  *(_QWORD *)(v13 + 24) = v5;
  *(_BYTE *)(v13 + 32) = v11;
  v16 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, void *, uint64_t, _QWORD))((int)*MEMORY[0x1E0D9C150]
                                                                                        + MEMORY[0x1E0D9C150]);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 392) = v14;
  *v14 = v0;
  v14[1] = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  return v16(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 192), &closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)partial apply, v13, *(_QWORD *)(v0 + 200));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 400) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  BOOL v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  id v26;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = v0 + 16;
  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 216);
  outlined init with take of UserInputResult(*(_QWORD *)(v0 + 224), v1);
  outlined init with copy of ConversationHelperInput(v1, v2, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  LODWORD(v1) = swift_getEnumCaseMultiPayload();
  outlined destroy of CamOutput(v2, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  if ((_DWORD)v1 == 2)
  {
    v3 = *(_QWORD *)(v0 + 336);
    v4 = *(_QWORD *)(v0 + 328);
    v5 = *(_QWORD *)(v0 + 248);
    v6 = *(_QWORD *)(v0 + 168);
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 344);
    v29 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 120);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
    v10 = v6 + *(int *)(v9 + 64);
    v11 = (_QWORD *)(v6 + *(int *)(v9 + 80));
    outlined init with copy of ReferenceResolutionClientProtocol(v8, v6);
    outlined init with copy of ReferenceResolutionClientProtocol(v30, v6 + 40);
    v28(v10, v7, v5);
    *v11 = v4;
    v11[1] = v3;
    swift_storeEnumTagMultiPayload();
    v12 = v29 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_state;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    outlined assign with take of RemoteConversationService.State(v6, v12);
    swift_endAccess();
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v13 = *(_QWORD *)(v0 + 232);
  v14 = *(_QWORD *)(v0 + 208);
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  outlined init with copy of ConversationHelperInput(v13, v14, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  v18 = os_log_type_enabled(v16, v17);
  v19 = *(_QWORD *)(v0 + 208);
  if (v18)
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v31 = v21;
    *(_DWORD *)v20 = 136315138;
    v22 = UserInputResult.description.getter();
    *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v19, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
    _os_log_impl(&dword_1B4BE6000, v16, v17, "FlowExtensionContext: accept() returned %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v21, -1, -1);
    MEMORY[0x1B5E44758](v20, -1, -1);
  }
  else
  {
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 208), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  }

  v24 = *(_QWORD *)(v0 + 232);
  v25 = *(void (**)(void))(v0 + 136);
  v26 = UserInputResult.xpcRepresentation.getter();
  v25();
  swift_release();

  outlined destroy of CamOutput(v24, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 280), type metadata accessor for SiriRequest);
  __swift_destroy_boxed_opaque_existential_1(v30);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void (*v15)(void);
  id v16;
  uint64_t v18;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(void **)(v0 + 400);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 400);
  if (v7)
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v18 = v10;
    *(_DWORD *)v9 = 136315394;
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000061, 0x80000001B4EFF570, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v0 + 88) = v8;
    v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v5, v6, "%s: Error calling conversation.accept: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }
  else
  {

  }
  v14 = *(void **)(v0 + 400);
  v15 = *(void (**)(void))(v0 + 136);
  v16 = specialized static FlowExtensionUserInputResultXPC.error(_:)();
  v15();
  swift_release();

  outlined destroy of CamOutput(*(_QWORD *)(v0 + 280), type metadata accessor for SiriRequest);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0[37];
  v2 = v0[38];
  v3 = v0[36];
  v22 = v0[31];
  v23 = v0[33];
  v19 = v0[16];
  v20 = v0[32];
  v4 = (_QWORD *)v0[14];
  v21 = v0[15];
  v5 = v4[3];
  v18 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  v7 = v4[3];
  v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v7);
  v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 72))(v7, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, (uint64_t)v8 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession, v3);

  v0[40] = ConversationTurnState.makeCurrentRequestForSiriEnvironment(speechData:positionInSession:)(v19, v2, v5, v18);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  v9 = v19 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId;
  v0[41] = *(_QWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId);
  v0[42] = *(_QWORD *)(v9 + 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  v0[43] = v10;
  v10(v23, v21, v22);
  v11 = v4[3];
  v12 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v11);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 80);
  swift_bridgeObjectRetain();
  swift_retain();
  v0[44] = v13(v11, v12);
  v0[45] = v14;
  v15 = *(_QWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfo);
  v16 = (_QWORD *)swift_task_alloc();
  v0[46] = v16;
  *v16 = v0;
  v16[1] = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  return RemoteConversationService.makeRequestIdentities(userSpecificInfo:)(v0[30], v15);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(_QWORD, _QWORD, _QWORD, _QWORD, void *, uint64_t, _QWORD);

  v2 = *(_QWORD *)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 320);
  v6 = *(int **)(v0 + 272);
  v5 = *(char **)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 264);
  v10 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 248);
  v11 = *(_BYTE *)(v0 + 408);
  *(_QWORD *)v5 = *(_QWORD *)(v0 + 328);
  *((_QWORD *)v5 + 1) = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(&v5[v6[5]], v7, v9);
  *(_QWORD *)&v5[v6[6]] = v4;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v10, (uint64_t)&v5[v6[9]], &demangling cache variable for type metadata for SiriRequestIdentities?);
  v12 = &v5[v6[7]];
  *(_QWORD *)v12 = v2;
  *((_QWORD *)v12 + 1) = v1;
  *(_QWORD *)&v5[v6[8]] = 0;
  type metadata accessor for ConversationSELFHelper();
  *(_QWORD *)(v0 + 376) = static ConversationSELFHelper.shared.getter();
  Input.identifier.getter();
  v13 = swift_task_alloc();
  *(_QWORD *)(v0 + 384) = v13;
  *(_QWORD *)(v13 + 16) = v0 + 16;
  *(_QWORD *)(v13 + 24) = v5;
  *(_BYTE *)(v13 + 32) = v11;
  v16 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, void *, uint64_t, _QWORD))((int)*MEMORY[0x1E0D9C150]
                                                                                        + MEMORY[0x1E0D9C150]);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 392) = v14;
  *v14 = v0;
  v14[1] = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  return v16(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 192), &closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)partial apply, v13, *(_QWORD *)(v0 + 200));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 400) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0[37];
  v2 = v0[38];
  v3 = v0[36];
  v22 = v0[31];
  v23 = v0[33];
  v19 = v0[16];
  v20 = v0[32];
  v4 = (_QWORD *)v0[14];
  v21 = v0[15];
  v5 = v4[3];
  v18 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  v7 = v4[3];
  v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v7);
  v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 72))(v7, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, (uint64_t)v8 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession, v3);

  v0[40] = ConversationTurnState.makeCurrentRequestForSiriEnvironment(speechData:positionInSession:)(v19, v2, v5, v18);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  v9 = v19 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId;
  v0[41] = *(_QWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId);
  v0[42] = *(_QWORD *)(v9 + 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  v0[43] = v10;
  v10(v23, v21, v22);
  v11 = v4[3];
  v12 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v11);
  v13 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 80);
  swift_bridgeObjectRetain();
  swift_retain();
  v0[44] = v13(v11, v12);
  v0[45] = v14;
  v15 = *(_QWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfo);
  v16 = (_QWORD *)swift_task_alloc();
  v0[46] = v16;
  *v16 = v0;
  v16[1] = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  return RemoteConversationService.makeRequestIdentities(userSpecificInfo:)(v0[30], v15);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(_QWORD, _QWORD, _QWORD, _QWORD, void *, uint64_t, _QWORD);

  v2 = *(_QWORD *)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 320);
  v6 = *(int **)(v0 + 272);
  v5 = *(char **)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 264);
  v10 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 248);
  v11 = *(_BYTE *)(v0 + 408);
  *(_QWORD *)v5 = *(_QWORD *)(v0 + 328);
  *((_QWORD *)v5 + 1) = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(&v5[v6[5]], v7, v9);
  *(_QWORD *)&v5[v6[6]] = v4;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v10, (uint64_t)&v5[v6[9]], &demangling cache variable for type metadata for SiriRequestIdentities?);
  v12 = &v5[v6[7]];
  *(_QWORD *)v12 = v2;
  *((_QWORD *)v12 + 1) = v1;
  *(_QWORD *)&v5[v6[8]] = 0;
  type metadata accessor for ConversationSELFHelper();
  *(_QWORD *)(v0 + 376) = static ConversationSELFHelper.shared.getter();
  Input.identifier.getter();
  v13 = swift_task_alloc();
  *(_QWORD *)(v0 + 384) = v13;
  *(_QWORD *)(v13 + 16) = v0 + 16;
  *(_QWORD *)(v13 + 24) = v5;
  *(_BYTE *)(v13 + 32) = v11;
  v16 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, void *, uint64_t, _QWORD))((int)*MEMORY[0x1E0D9C150]
                                                                                        + MEMORY[0x1E0D9C150]);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 392) = v14;
  *v14 = v0;
  v14[1] = specialized RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  return v16(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 192), &async function pointer to partial apply for closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:), v13, *(_QWORD *)(v0 + 200));
}

_QWORD *specialized RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49[2];
  uint64_t v50[5];
  uint64_t v51[6];

  v43 = a8;
  v46 = a7;
  v44 = a6;
  v42 = a5;
  v40 = a3;
  v39 = a2;
  v41 = a9;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v16);
  v45 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Logger();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51[3] = a11;
  v51[4] = a13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v51);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a11 - 8) + 32))(boxed_opaque_existential_1, a1, a11);
  v50[3] = a12;
  v50[4] = a14;
  v23 = __swift_allocate_boxed_opaque_existential_1(v50);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a12 - 8) + 32))(v23, a4, a12);
  if (one-time initialization token for executor != -1)
    swift_once();
  v24 = __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v24, v18);
  type metadata accessor for AsyncSerialQueue();
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = MEMORY[0x1E0DEE9D8];
  v25[3] = 0;
  v25[4] = 0;
  v25[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v26 = swift_allocObject();
  *(_DWORD *)(v26 + 16) = 0;
  v25[6] = v26;
  v25[7] = 0xD00000000000002ALL;
  v25[8] = 0x80000001B4EFF400;
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))((uint64_t)v25 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger, v21, v18);
  a10[21] = v25;
  type metadata accessor for RemoteConversationService.State(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v51, (uint64_t)(a10 + 2));
  v27 = v40;
  a10[7] = v39;
  a10[8] = v27;
  a10[9] = v42;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v50, (uint64_t)(a10 + 10));
  a10[20] = v43;
  v28 = v41;
  outlined init with copy of ReferenceResolutionClientProtocol?(v41, (uint64_t)&v47, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  if (v48)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v47, (uint64_t)v49);
    outlined init with take of ReferenceResolutionClientProtocol(v49, (uint64_t)(a10 + 15));
    swift_retain();
    swift_retain();
  }
  else
  {
    swift_retain();
    swift_retain();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v47, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
    v29 = type metadata accessor for ReferenceResolutionClient();
    v30 = ReferenceResolutionClient.__allocating_init()();
    v31 = MEMORY[0x1E0D9C7B0];
    a10[18] = v29;
    a10[19] = v31;
    a10[15] = v30;
  }
  v32 = (_QWORD *)((char *)a10 + OBJC_IVAR____TtC14SiriKitRuntime25RemoteConversationService_turnDataProvider);
  v33 = v46;
  *v32 = v44;
  v32[1] = v33;
  v34 = type metadata accessor for TaskPriority();
  v35 = (uint64_t)v45;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v45, 1, 1, v34);
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = 0;
  *(_QWORD *)(v36 + 24) = 0;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v35, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:), v36);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v28, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  return a10;
}

_QWORD *specialized RemoteConversationService.__allocating_init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a7;
  v32 = a8;
  v29 = a5;
  v30 = a6;
  v27 = a2;
  v28 = a3;
  v25 = a13;
  v26 = a9;
  v16 = *(_QWORD *)(a12 - 8);
  v17 = MEMORY[0x1E0C80A78](a10);
  v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a11 - 8);
  MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (_QWORD *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, a11);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a4, a12);
  return specialized RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)((uint64_t)v22, v27, v28, (uint64_t)v19, v29, v30, v31, v32, v26, v23, a11, a12, v25, a14);
}

uint64_t type metadata accessor for ConversationActor()
{
  return objc_opt_self();
}

uint64_t sub_1B4E568C0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B4E56910()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RemoteConversationService.startTurn(turnData:bridge:reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.startTurn(turnData:bridge:reply:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1B4E569E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = v1[6];
  v11 = (uint64_t)v1 + v5;
  v12 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:)(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1B4E56B48()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1B4E56BA8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in RemoteConversationService.activeTasksDidChange(activeTasks:rcId:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v0[3];
  v4 = v0[4];
  v3 = v0[5];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v6 = (_QWORD *)swift_task_alloc();
  v5[2] = v6;
  *v6 = v5;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return RemoteConversationService.sendActiveTasks(_:rcId:)(v2, v4, v3);
}

uint64_t type metadata accessor for RemoteConversationService.State(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for RemoteConversationService.State);
}

uint64_t sub_1B4E56D30()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 48))
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v5 + 48) = v3;
  *(_QWORD *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v0 + 24;
  return swift_task_switch();
}

uint64_t associated type witness table accessor for GlobalActor.ActorType : Actor in ConversationActor(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, a2, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
}

uint64_t method lookup function for ConversationActor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationActor.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t ObjC metadata update function for RemoteConversationService()
{
  return type metadata accessor for RemoteConversationService(0);
}

uint64_t type metadata accessor for RemoteConversationService(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for RemoteConversationService);
}

uint64_t type metadata completion function for RemoteConversationService()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RemoteConversationService.State(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for RemoteConversationService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteConversationService.__allocating_init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

char *initializeBufferWithCopyOfBuffer for RemoteConversationService.State(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  __int128 v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v13 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v14 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v14;
      (**(void (***)(void *, const void *))(v14 - 8))(a1, a2);
      v15 = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 4) = v15;
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))((uint64_t)(a1 + 40), (uint64_t)(a2 + 40));
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
      v17 = *(int *)(v16 + 64);
      v18 = &a1[v17];
      v19 = &a2[v17];
      v20 = type metadata accessor for Input();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      v21 = *(int *)(v16 + 80);
      v22 = &a1[v21];
      v23 = &a2[v21];
      v24 = *((_QWORD *)v23 + 1);
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *((_QWORD *)v22 + 1) = v24;
      swift_bridgeObjectRetain();
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(void *, const void *))(v8 - 8))(a1, a2);
      v9 = a1 + 40;
      v10 = a2 + 40;
      v11 = *((_QWORD *)a2 + 8);
      if (v11)
      {
        v12 = *((_QWORD *)a2 + 9);
        *((_QWORD *)a1 + 8) = v11;
        *((_QWORD *)a1 + 9) = v12;
        (**(void (***)(_OWORD *, _OWORD *))(v11 - 8))(v9, v10);
      }
      else
      {
        v25 = *(_OWORD *)(a2 + 56);
        *v9 = *v10;
        *(_OWORD *)(a1 + 56) = v25;
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
      }
      *((_QWORD *)a1 + 10) = *((_QWORD *)a2 + 10);
      swift_retain();
      goto LABEL_11;
    }
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for RemoteConversationService.State(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    __swift_destroy_boxed_opaque_existential_1(a1 + 40);
    v3 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String))
                + 64);
    v4 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
    return swift_bridgeObjectRelease();
  }
  else if (!(_DWORD)result)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    if (*(_QWORD *)(a1 + 64))
      __swift_destroy_boxed_opaque_existential_1(a1 + 40);
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for RemoteConversationService.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v12 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1, a2);
    v13 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 64) = v13;
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 40, a2 + 40);
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
    v15 = *(int *)(v14 + 64);
    v16 = a1 + v15;
    v17 = a2 + v15;
    v18 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = *(int *)(v14 + 80);
    v20 = (_QWORD *)(a1 + v19);
    v21 = (_QWORD *)(a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
LABEL_9:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
    v8 = (_OWORD *)(a1 + 40);
    v9 = (_OWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 64);
    if (v10)
    {
      v11 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v10;
      *(_QWORD *)(a1 + 72) = v11;
      (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v8, v9);
    }
    else
    {
      v23 = *(_OWORD *)(a2 + 56);
      *v8 = *v9;
      *(_OWORD *)(a1 + 56) = v23;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    }
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_retain();
    goto LABEL_9;
  }
  memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

uint64_t assignWithCopy for RemoteConversationService.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  _OWORD *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;

  if (a1 != a2)
  {
    outlined destroy of CamOutput(a1, type metadata accessor for RemoteConversationService.State);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v11 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
      v12 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v12;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 40, a2 + 40);
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
      v14 = *(int *)(v13 + 64);
      v15 = a1 + v14;
      v16 = a2 + v14;
      v17 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      v18 = *(int *)(v13 + 80);
      v19 = (_QWORD *)(a1 + v18);
      v20 = (_QWORD *)(a2 + v18);
      *v19 = *v20;
      v19[1] = v20[1];
      swift_bridgeObjectRetain();
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
      v8 = (_OWORD *)(a1 + 40);
      v9 = (__int128 *)(a2 + 40);
      v10 = *(_QWORD *)(a2 + 64);
      if (v10)
      {
        *(_QWORD *)(a1 + 64) = v10;
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        (**(void (***)(_OWORD *, __int128 *))(v10 - 8))(v8, v9);
      }
      else
      {
        v21 = *v9;
        v22 = *(_OWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
        *v8 = v21;
        *(_OWORD *)(a1 + 56) = v22;
      }
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_retain();
      goto LABEL_10;
    }
    memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *initializeWithTake for RemoteConversationService.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
    v8 = *(int *)(v7 + 64);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Input();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    *(_OWORD *)((char *)a1 + *(int *)(v7 + 80)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 80));
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for RemoteConversationService.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for RemoteConversationService.State);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *(_OWORD *)((char *)a1 + 40) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
      *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (turnState: ConversationTurnState, conversation: Conversational, input: Input, rcId: String));
      v8 = *(int *)(v7 + 64);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for Input();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *(_OWORD *)((char *)a1 + *(int *)(v7 + 80)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 80));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for RemoteConversationService.State()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  const char *v3;
  char *v4;

  v3 = "X";
  result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout();
    v4 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for RemoteConversationService.FlowAndInputRegistry()
{
  return objc_opt_self();
}

uint64_t method lookup function for RemoteConversationService.FlowAndInputRegistry()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteConversationService.FlowAndInputRegistry.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_1B4E57778()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool, @unowned NSError?) -> ()(char a1, uint64_t a2)
{
  uint64_t v2;

  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool, @unowned NSError?) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t objectdestroyTm_7()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_63Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v10;

  v5 = *(_QWORD *)(v2 + 16);
  v10 = *(_OWORD *)(v2 + 40);
  v6 = *(_QWORD *)(v2 + 56);
  v7 = swift_task_alloc();
  v8 = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v7 + 224) = v6;
  *(_OWORD *)(v7 + 192) = v8;
  *(_OWORD *)(v7 + 208) = v10;
  *(_QWORD *)(v7 + 176) = a2;
  *(_QWORD *)(v7 + 184) = v5;
  return swift_task_switch();
}

uint64_t sub_1B4E578C4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v0[5];
  v4 = v0[6];
  v3 = v0[7];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v6 = (_QWORD *)swift_task_alloc();
  v5[2] = v6;
  *v6 = v5;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return RemoteConversationService.sendActiveTasks(_:rcId:)(v2, v4, v3);
}

uint64_t sub_1B4E5798C()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in closure #1 in RemoteConversationService.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(a1, v4, v5, v6, (uint64_t)(v1 + 5));
}

uint64_t sub_1B4E57A3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.startTurnFromCache(executionRequestId:bridge:reply:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(1, a1);
}

uint64_t sub_1B4E57A88()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RemoteConversationService.init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in RemoteConversationService.isCorrectable(reply:)(a1, v4, v5, v6, v7, (uint64_t)(v1 + 6));
}

uint64_t partial apply for closure #2 in closure #1 in RemoteConversationService.isEmpty(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:)(a1, v4, v5, v6, v7, (uint64_t)(v1 + 6));
}

uint64_t objectdestroy_220Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in RemoteConversationService.isEmpty(reply:)(a1, v4, v5, v6, v7, (uint64_t)(v1 + 6));
}

uint64_t sub_1B4E57CC4()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v8 = v1[9];
  v7 = v1[10];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in RemoteConversationService.paraphrase(reply:)(a1, v4, v5, v6, v8, v7);
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)()
{
  return closure #1 in closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)();
}

uint64_t specialized Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[5];
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[6];

  v55 = a8;
  v50 = a7;
  v51 = a6;
  v53 = a4;
  v52 = a3;
  v46 = a2;
  v48 = a9;
  v49 = type metadata accessor for DispatchTimeInterval();
  v13 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v47 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61[3] = type metadata accessor for ServerFallbackDisablingUtils();
  v61[4] = &protocol witness table for ServerFallbackDisablingUtils;
  v61[0] = a10;
  v59 = type metadata accessor for CorrectionsUndoManager();
  v60 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type CorrectionsUndoManager and conformance CorrectionsUndoManager, 255, (uint64_t (*)(uint64_t))type metadata accessor for CorrectionsUndoManager, (uint64_t)&protocol conformance descriptor for CorrectionsUndoManager);
  v58[0] = a5;
  swift_defaultActor_initialize();
  type metadata accessor for Conversation.State(0);
  swift_storeEnumTagMultiPayload();
  v15 = a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  *(_QWORD *)(v15 + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_idleTrackerActivity) = 0;
  v16 = (_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  *v16 = 12589;
  v16[1] = 0xE200000000000000;
  v17 = a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  v18 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(_BYTE *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused) = 0;
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow) = 0;
  type metadata accessor for InstrumentedStack(0);
  v19 = (_QWORD *)swift_allocObject();
  v19[5] = MEMORY[0x1E0DEE9E0];
  v19[3] = 0;
  v19[4] = 0;
  v19[2] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>);
  v20 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  swift_weakInit();
  v20[6] = 0;
  v20[2] = a1;
  swift_beginAccess();
  swift_weakAssign();
  v20[4] = MEMORY[0x1E0DEE9D8];
  swift_weakAssign();
  v20[6] = 0;
  swift_retain_n();
  swift_retain();
  swift_release();
  specialized OrderedForest._push(_:)((uint64_t)v20);
  v21 = v20[2];
  type metadata accessor for InstrumentedStack.TrackedFlowAgent(0);
  swift_allocObject();
  v22 = swift_retain();
  v23 = InstrumentedStack.TrackedFlowAgent.init(agent:parent:)(v22, 0);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v57 = v19[5];
  v19[5] = 0x8000000000000000;
  v25 = (uint64_t)v23;
  v26 = v46;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v25, v21, isUniquelyReferenced_nonNull_native);
  v19[5] = v57;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  v27 = v48;
  swift_release();
  swift_release();
  *(_QWORD *)(a11 + 112) = v19;
  v28 = v47;
  v29 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v47, v55, v49);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v30 = static OS_dispatch_queue.main.getter();
  type metadata accessor for JetsamHelper();
  v31 = (char *)swift_allocObject();
  v32 = &v31[OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction];
  *(_QWORD *)v32 = 0;
  *((_QWORD *)v32 + 1) = 0;
  *((_QWORD *)v31 + 2) = 0xD000000000000023;
  *((_QWORD *)v31 + 3) = 0x80000001B4EF8790;
  *((_QWORD *)v31 + 4) = dispatch_semaphore_create(1);
  *((_QWORD *)v31 + 5) = v30;
  v54 = v13;
  v33 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v34 = a1;
  v35 = v29;
  v33(&v31[OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout], v28, v29);
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_jetsamHelper) = v31;
  swift_beginAccess();
  *(_QWORD *)(v15 + 8) = v50;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskService) = v26;
  v36 = (_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginId);
  v37 = v53;
  *v36 = v52;
  v36[1] = v37;
  v38 = *(void **)(v34 + 160);
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginInfo) = v38;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v58, a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v61, a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils);
  if (v27)
  {
    swift_retain();
    v39 = v38;
  }
  else
  {
    type metadata accessor for SiriEnvironment();
    swift_retain();
    v40 = v38;
    static SiriEnvironment.default.getter();
  }
  type metadata accessor for SiriEnvironment();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rootEnvironment) = SiriEnvironment.init(parent:)();
  type metadata accessor for SiriCorrectionsClientProvider();
  swift_allocObject();
  swift_retain();
  SiriCorrectionsClientProvider.init()();
  SiriEnvironment.correctionsClientProvider.setter();
  swift_release();
  SiriEnvironment.correctionsClientProvider.getter();
  v41 = v59;
  v42 = v60;
  v43 = __swift_project_boxed_opaque_existential_1(v58, v59);
  v56[3] = v41;
  v56[4] = *(_QWORD *)(v42 + 8);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v56);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(boxed_opaque_existential_1, v43, v41);
  dispatch thunk of SiriCorrectionsClientProvider.correctionsClient.setter();
  swift_release();
  type metadata accessor for UserIdentityProvider();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type UserIdentityProvider and conformance UserIdentityProvider, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C058], MEMORY[0x1E0D9C040]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for FlowTaskProvider();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type FlowTaskProvider and conformance FlowTaskProvider, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B088], MEMORY[0x1E0D9B078]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for CallStateEnvironmentProvider();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type CallStateEnvironmentProvider and conformance CallStateEnvironmentProvider, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C3D8], MEMORY[0x1E0D9C3C0]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for ScopedReferenceResolutionDataProvider();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ScopedReferenceResolutionDataProvider and conformance ScopedReferenceResolutionDataProvider, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3C80], MEMORY[0x1E0DA3C70]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for AceServiceContextProvider();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AceServiceContextProvider and conformance AceServiceContextProvider, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C308], MEMORY[0x1E0D9C2F8]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  swift_retain();
  dispatch thunk of AnyFlow.siriEnvironment.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v55, v35);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  return a11;
}

uint64_t partial apply for closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:);
  return closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(a1, v4, v5, v6);
}

uint64_t outlined init with take of UserInputResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UserInputResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of RemoteConversationService.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RemoteConversationService.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)(*(_QWORD *)(v0 + 16));
}

uint64_t closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)partial apply(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = dispatch thunk of CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:);
  return closure #1 in RemoteConversationService.doAccept(conversationTurnState:conversation:input:speechData:wasConversationAlreadyActive:reply:)(a1, v4, v5, v6);
}

uint64_t sub_1B4E586CC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.reset(reply:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v2[2] = v0 + 32;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)(*(_QWORD *)(v0 + 16), *(char **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(void))(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)(*(_QWORD **)(v0 + 16));
}

id RemoteConversationSpeechData.__allocating_init(rcId:asrOnDevice:userSpecificInfo:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:asrLocation:nlLocation:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11)
{
  objc_class *v11;
  id v20;

  v20 = objc_allocWithZone(v11);
  return RemoteConversationSpeechData.init(rcId:asrOnDevice:userSpecificInfo:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:asrLocation:nlLocation:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10, *((uint64_t *)&a10 + 1), a11);
}

uint64_t RemoteConversationSpeechData.rcId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteConversationSpeechData.asrOnDevice.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_asrOnDevice);
}

void *RemoteConversationSpeechData.userSpecificInfo.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfo);
  v2 = v1;
  return v1;
}

void *RemoteConversationSpeechData.speechPackage.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_speechPackage);
  v2 = v1;
  return v1;
}

uint64_t RemoteConversationSpeechData.utterance.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_utterance);
}

uint64_t RemoteConversationSpeechData.responseLanguageVariant.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_responseLanguageVariant);
}

uint64_t RemoteConversationSpeechData.requestLanguageVariant.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_requestLanguageVariant);
}

uint64_t RemoteConversationSpeechData.asrLocation.getter@<X0>(uint64_t a1@<X8>)
{
  return RemoteConversationSpeechData.asrLocation.getter(&OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_asrLocation, a1);
}

uint64_t RemoteConversationSpeechData.nlLocation.getter@<X0>(uint64_t a1@<X8>)
{
  return RemoteConversationSpeechData.asrLocation.getter(&OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_nlLocation, a1);
}

uint64_t RemoteConversationSpeechData.asrLocation.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *a1;
  v5 = type metadata accessor for ExecutionLocation();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

id RemoteConversationSpeechData.init(rcId:asrOnDevice:userSpecificInfo:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:asrLocation:nlLocation:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  char *v13;
  char *v14;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  id v30;
  void (*v31)(uint64_t, uint64_t);
  objc_class *ObjectType;
  objc_super v35;

  v14 = v13;
  ObjectType = (objc_class *)swift_getObjectType();
  v22 = &v13[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId];
  *(_QWORD *)v22 = a1;
  *((_QWORD *)v22 + 1) = a2;
  v13[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_asrOnDevice] = a3;
  *(_QWORD *)&v13[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfo] = a4;
  *(_QWORD *)&v13[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_speechPackage] = a5;
  v23 = &v13[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_utterance];
  *(_QWORD *)v23 = a6;
  *((_QWORD *)v23 + 1) = a7;
  v24 = &v13[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_responseLanguageVariant];
  *(_QWORD *)v24 = a8;
  *((_QWORD *)v24 + 1) = a9;
  v25 = &v13[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_requestLanguageVariant];
  *(_QWORD *)v25 = a10;
  *((_QWORD *)v25 + 1) = a11;
  v26 = &v13[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_asrLocation];
  v27 = type metadata accessor for ExecutionLocation();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v29(v26, a12, v27);
  v29(&v14[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_nlLocation], a13, v27);
  v35.receiver = v14;
  v35.super_class = ObjectType;
  v30 = objc_msgSendSuper2(&v35, sel_init);
  v31 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v31(a13, v27);
  v31(a12, v27);
  return v30;
}

uint64_t static RemoteConversationSpeechData.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static RemoteConversationSpeechData.supportsSecureCoding;
}

uint64_t static RemoteConversationSpeechData.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static RemoteConversationSpeechData.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static RemoteConversationSpeechData.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

id RemoteConversationSpeechData.__allocating_init(coder:)(NSObject *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return RemoteConversationSpeechData.init(coder:)(a1);
}

id RemoteConversationSpeechData.init(coder:)(NSObject *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  void *v22;
  unsigned __int8 v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  id v39;
  void *v40;
  char *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  id v62;
  void (*v63)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  char *v77;
  NSObject *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  Class ObjectType;
  id v84;

  ObjectType = (Class)swift_getObjectType();
  v3 = type metadata accessor for ExecutionLocation();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v82 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v81 = (char *)&v65 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v80 = (char *)&v65 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v65 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v65 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v65 - v17;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v19 = v1;
  v20 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v20)
  {

    if (one-time initialization token for executor != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_1B4BE6000, v33, v34, "Could not decode UserInputRequestXPC: Missing rcId", v35, 2u);
      MEMORY[0x1B5E44758](v35, -1, -1);
    }
    goto LABEL_14;
  }
  v21 = v20;
  v84 = v19;
  v79 = v18;
  v22 = (void *)MEMORY[0x1B5E432E8](0x7665446E4F727361, 0xEB00000000656369);
  v23 = -[NSObject containsValueForKey:](a1, sel_containsValueForKey_, v22);

  if ((v23 & 1) == 0)
  {

    if (one-time initialization token for executor != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
    v33 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1B4BE6000, v33, v37, "Could not decode UserInputRequestXPC: Missing asrOnDevice", v38, 2u);
      MEMORY[0x1B5E44758](v38, -1, -1);

    }
    else
    {

      v33 = a1;
      a1 = v21;
    }
LABEL_14:

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v24 = (void *)MEMORY[0x1B5E432E8](0x7665446E4F727361, 0xEB00000000656369);
  v71 = -[NSObject decodeBoolForKey:](a1, sel_decodeBoolForKey_, v24);

  type metadata accessor for UserSpecificInfo();
  v73 = NSCoder.decodeObject<A>(of:forKey:)();
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechPackage);
  v72 = NSCoder.decodeObject<A>(of:forKey:)();
  v76 = (id)NSCoder.decodeObject<A>(of:forKey:)();
  v75 = (id)NSCoder.decodeObject<A>(of:forKey:)();
  v25 = NSCoder.decodeObject<A>(of:forKey:)();
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  v26 = PropertyListDecoder.init()();
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
  v27 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
  v77 = v16;
  v78 = v21;
  v74 = v26;
  if (v27)
  {
    v70 = v4;
    v28 = v27;
    v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v31 = v30;

    lazy protocol witness table accessor for type ExecutionLocation and conformance ExecutionLocation(&lazy protocol witness table cache variable for type ExecutionLocation and conformance ExecutionLocation, MEMORY[0x1E0DA80B8]);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();

    outlined consume of Data._Representation(v29, v31);
    v4 = v70;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v79, v13, v3);
  }
  else
  {
    static ExecutionLocation.unknown.getter();
  }
  v40 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
  v41 = v80;
  if (v40)
  {
    v42 = v40;
    v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v45 = v44;

    lazy protocol witness table accessor for type ExecutionLocation and conformance ExecutionLocation(&lazy protocol witness table cache variable for type ExecutionLocation and conformance ExecutionLocation, MEMORY[0x1E0DA80B8]);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();

    outlined consume of Data._Representation(v43, v45);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v77, v41, v3);
  }
  else
  {
    static ExecutionLocation.unknown.getter();
  }

  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v69 = v47;
  v70 = v46;
  if (v76)
  {
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v67 = v49;
    v68 = v48;
  }
  else
  {
    v67 = 0;
    v68 = 0;
  }
  v50 = v4;
  if (v75)
  {
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v65 = v52;
    v66 = v51;
  }
  else
  {
    v65 = 0;
    v66 = 0;
  }
  v80 = (char *)a1;
  v53 = (void *)v25;
  if (v25)
  {
    v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v56 = v55;
  }
  else
  {
    v54 = 0;
    v56 = 0;
  }
  v57 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v58 = (uint64_t)v81;
  v59 = v79;
  v57(v81, v79, v3);
  v60 = (uint64_t)v82;
  v61 = v77;
  v57(v82, v77, v3);
  v62 = objc_allocWithZone(ObjectType);
  v39 = RemoteConversationSpeechData.init(rcId:asrOnDevice:userSpecificInfo:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:asrLocation:nlLocation:)(v70, v69, v71, v73, v72, v68, v67, v66, v65, v54, v56, v58, v60);

  swift_release();
  v63 = *(void (**)(char *, uint64_t))(v50 + 8);
  v63(v61, v3);
  v63(v59, v3);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v39;
}

id RemoteConversationSpeechData.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void RemoteConversationSpeechData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id RemoteConversationSpeechData.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for RemoteConversationSpeechData()
{
  return type metadata accessor for RemoteConversationSpeechData();
}

uint64_t type metadata completion function for RemoteConversationSpeechData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ExecutionLocation();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for RemoteConversationSpeechData()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteConversationSpeechData.__allocating_init(rcId:asrOnDevice:userSpecificInfo:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:asrLocation:nlLocation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of RemoteConversationSpeechData.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

id ProxiedRequestContext.__allocating_init(rske:executionRequestId:resultCandidateId:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6;

  v6 = specialized ProxiedRequestContext.__allocating_init(rske:executionRequestId:resultCandidateId:)(a1, a2, a3, a4, a5);

  return v6;
}

uint64_t RemoteConversationTurnData.init(executionRequestId:rootRequestId:requestContextData:conversationLoggingId:flowTask:scopedRRData:invokedByPeerToPeerEORR:proxiedRequestContext:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, char a11, uint64_t a12)
{
  int *v16;
  uint64_t result;
  _QWORD *v18;

  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  v16 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a6, (uint64_t)a9 + v16[7], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(_QWORD *)((char *)a9 + v16[8]) = a7;
  v18 = (_QWORD *)((char *)a9 + v16[11]);
  *v18 = a8;
  v18[1] = a10;
  *((_BYTE *)a9 + v16[9]) = a11;
  *(_QWORD *)((char *)a9 + v16[10]) = a12;
  return result;
}

uint64_t RemoteConversationTurnData.executionRequestId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteConversationTurnData.rootRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

id RemoteConversationTurnData.requestContextData.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t RemoteConversationTurnData.conversationLoggingId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for RemoteConversationTurnData(0);
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 28), a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t RemoteConversationTurnData.flowTask.getter()
{
  type metadata accessor for RemoteConversationTurnData(0);
  return swift_retain();
}

uint64_t RemoteConversationTurnData.invokedByPeerToPeerEORR.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for RemoteConversationTurnData(0) + 36));
}

void *RemoteConversationTurnData.proxiedRequestContext.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for RemoteConversationTurnData(0) + 40));
  v2 = v1;
  return v1;
}

uint64_t RemoteConversationTurnData.scopedRRData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for RemoteConversationTurnData(0) + 44);
  v2 = *(_QWORD *)v1;
  outlined copy of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t RemoteConversationTurnData.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  int *v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = 0;
  v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(237);
  v5._countAndFlagsBits = 0xD000000000000034;
  v5._object = (void *)0x80000001B4EFF900;
  String.append(_:)(v5);
  v6 = *(_QWORD *)v0;
  v7 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD000000000000015;
  v9._object = (void *)0x80000001B4EFF940;
  String.append(_:)(v9);
  if (*(_QWORD *)(v0 + 24))
  {
    v10 = *(_QWORD *)(v0 + 16);
    v11 = *(void **)(v0 + 24);
  }
  else
  {
    v11 = (void *)0xE500000000000000;
    v10 = 0x3E6C696E3CLL;
  }
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0xD00000000000001ALL;
  v13._object = (void *)0x80000001B4EFF960;
  String.append(_:)(v13);
  v14 = objc_msgSend(*(id *)(v0 + 32), sel_debugDescription);
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;

  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._object = (void *)0x80000001B4EFF980;
  v19._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v19);
  v20 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + v20[7], (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v21._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0x6C6620202020202CLL;
  v22._object = (void *)0xEF3D6B736154776FLL;
  String.append(_:)(v22);
  v37 = *(_QWORD *)(v1 + v20[8]);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTask?);
  v23._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0xD000000000000013;
  v24._object = (void *)0x80000001B4EFF9A0;
  String.append(_:)(v24);
  if (*(_QWORD *)(v1 + v20[11] + 8) >> 60 == 15)
    v25 = 28526;
  else
    v25 = 7562617;
  if (*(_QWORD *)(v1 + v20[11] + 8) >> 60 == 15)
    v26 = 0xE200000000000000;
  else
    v26 = 0xE300000000000000;
  v27 = v26;
  String.append(_:)(*(Swift::String *)&v25);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0xD00000000000001ELL;
  v28._object = (void *)0x80000001B4EFF9C0;
  String.append(_:)(v28);
  if (*(_BYTE *)(v1 + v20[9]))
    v29 = 1702195828;
  else
    v29 = 0x65736C6166;
  if (*(_BYTE *)(v1 + v20[9]))
    v30 = 0xE400000000000000;
  else
    v30 = 0xE500000000000000;
  v31 = v30;
  String.append(_:)(*(Swift::String *)&v29);
  swift_bridgeObjectRelease();
  v32._object = (void *)0x80000001B4EFF9E0;
  v32._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v32);
  v37 = *(_QWORD *)(v1 + v20[10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ProxiedRequestContext?);
  v33._countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 32010;
  v34._object = (void *)0xE200000000000000;
  String.append(_:)(v34);
  return v38;
}

uint64_t static ConversationTurnDataXPC.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t ConversationTurnDataXPC.executionRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationTurnDataXPC.rootRequestId.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKRConversationTurnDataXPC_rootRequestId);
}

id ConversationTurnDataXPC.requestContextData.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_requestContextData);
}

void *ConversationTurnDataXPC.conversationLoggingId.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_conversationLoggingId);
  v2 = v1;
  return v1;
}

void *ConversationTurnDataXPC.flowTask.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_flowTask);
  v2 = v1;
  return v1;
}

uint64_t ConversationTurnDataXPC.invokedByPeerToPeerEORR.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_invokedByPeerToPeerEORR);
}

void *ConversationTurnDataXPC.scopedRRData.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_scopedRRData);
  v2 = v1;
  return v1;
}

void *ConversationTurnDataXPC.proxiedRequestContext.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___SKRConversationTurnDataXPC_proxiedRequestContext);
  v2 = v1;
  return v1;
}

id ConversationTurnDataXPC.swiftRepresentation()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v18)(uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;
  int *v31;
  uint64_t *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char *v38;

  v3 = v2;
  v4 = v1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId);
  v10 = *(_QWORD *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId + 8);
  v11 = *(_QWORD *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_rootRequestId);
  v12 = *(_QWORD *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_rootRequestId + 8);
  v13 = *(void **)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_requestContextData);
  v14 = *(_QWORD *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_conversationLoggingId);
  v38 = v8;
  v36 = v11;
  if (v14)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = type metadata accessor for UUID();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v8, 0, 1, v15);
  }
  else
  {
    v16 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
  }
  v17 = *(_QWORD **)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_flowTask);
  if (v17)
  {
    v18 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v17) + 0x78);
    swift_bridgeObjectRetain();
    v19 = v13;
    v20 = swift_bridgeObjectRetain();
    v21 = v18(v20);
    if (v2)
    {

      v35 = 0;
      v3 = 0;
    }
    else
    {
      v35 = v21;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v22 = v13;
    swift_bridgeObjectRetain();
    v35 = 0;
  }
  v23 = *(_QWORD *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_scopedRRData);
  v37 = v3;
  if (v23)
  {
    v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v25;
  }
  else
  {
    v24 = 0;
    v26 = 0xF000000000000000;
  }
  v27 = v9;
  v28 = v36;
  v29 = *(_BYTE *)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_invokedByPeerToPeerEORR);
  v30 = *(void **)(v4 + OBJC_IVAR___SKRConversationTurnDataXPC_proxiedRequestContext);
  *a1 = v27;
  a1[1] = v10;
  a1[2] = v28;
  a1[3] = v12;
  a1[4] = v13;
  v31 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v38, (uint64_t)a1 + v31[7], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(_QWORD *)((char *)a1 + v31[8]) = v35;
  v32 = (_QWORD *)((char *)a1 + v31[11]);
  *v32 = v24;
  v32[1] = v26;
  *((_BYTE *)a1 + v31[9]) = v29;
  *(_QWORD *)((char *)a1 + v31[10]) = v30;
  return v30;
}

uint64_t ConversationTurnDataXPC.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4E59F74 + 4 * byte_1B4EED610[a1]))(0xD000000000000012, 0x80000001B4EF4CE0);
}

uint64_t sub_1B4E59F74()
{
  return 0x75716552746F6F72;
}

id ConversationTurnDataXPC.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ConversationTurnDataXPC.init(coder:)(a1);
}

id ConversationTurnDataXPC.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  objc_class *v29;
  _BYTE *v30;
  uint64_t *v31;
  uint64_t *v32;
  id v33;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  objc_super v39;

  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v3 = v1;
  v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v4)
  {

    if (one-time initialization token for executor != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1B4BE6000, v22, v23, "Error decoding ConversationTurnDataXPC: executionRequestId not present", v24, 2u);
      MEMORY[0x1B5E44758](v24, -1, -1);
    }

    goto LABEL_24;
  }
  v5 = (void *)v4;
  v6 = NSCoder.decodeObject<A>(of:forKey:)();
  type metadata accessor for RequestContextData(0);
  v7 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v7)
  {

    if (one-time initialization token for executor != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_1B4BE6000, v26, v27, "Error decoding ConversationTurnDataXPC: requestContextData not present", v28, 2u);
      MEMORY[0x1B5E44758](v28, -1, -1);

    }
    else
    {

    }
    a1 = (void *)v6;
LABEL_24:

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v38 = v7;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSUUID);
  v37 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v37)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1B4BE6000, v9, v10, "No conversation logging ID found when decoding ConversationTurnData", v11, 2u);
      MEMORY[0x1B5E44758](v11, -1, -1);
    }

  }
  type metadata accessor for FlowTaskXPC(0);
  v36 = NSCoder.decodeObject<A>(of:forKey:)();
  v12 = (void *)MEMORY[0x1B5E432E8](0xD000000000000017, 0x80000001B4EF50A0);
  v35 = objc_msgSend(a1, sel_decodeBoolForKey_, v12);

  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
  v13 = NSCoder.decodeObject<A>(of:forKey:)();
  type metadata accessor for ProxiedRequestContext(0);
  v14 = NSCoder.decodeObject<A>(of:forKey:)();

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v16;
  if (v6)
  {
    v18 = (void *)v6;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = v19;
  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v29 = (objc_class *)type metadata accessor for ConversationTurnDataXPC();
  v30 = objc_allocWithZone(v29);
  v31 = (uint64_t *)&v30[OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId];
  *v31 = v15;
  v31[1] = v17;
  v32 = (uint64_t *)&v30[OBJC_IVAR___SKRConversationTurnDataXPC_rootRequestId];
  *v32 = v6;
  v32[1] = v20;
  *(_QWORD *)&v30[OBJC_IVAR___SKRConversationTurnDataXPC_requestContextData] = v38;
  *(_QWORD *)&v30[OBJC_IVAR___SKRConversationTurnDataXPC_conversationLoggingId] = v37;
  *(_QWORD *)&v30[OBJC_IVAR___SKRConversationTurnDataXPC_flowTask] = v36;
  *(_QWORD *)&v30[OBJC_IVAR___SKRConversationTurnDataXPC_scopedRRData] = v13;
  v30[OBJC_IVAR___SKRConversationTurnDataXPC_invokedByPeerToPeerEORR] = v35;
  *(_QWORD *)&v30[OBJC_IVAR___SKRConversationTurnDataXPC_proxiedRequestContext] = v14;
  v39.receiver = v30;
  v39.super_class = v29;
  v33 = objc_msgSendSuper2(&v39, sel_init);

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v33;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationTurnDataXPC.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceUsoEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t))ConversationTurnDataXPC.CodingKeys.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationTurnDataXPC.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnnounceUsoEntity(a1, a2, (void (*)(uint64_t))ConversationTurnDataXPC.CodingKeys.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationTurnDataXPC.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AnnounceUsoEntity(a1, a2, a3, (void (*)(_QWORD))ConversationTurnDataXPC.CodingKeys.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationTurnDataXPC.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceUsoEntity(a1, a2, a3, (void (*)(uint64_t))ConversationTurnDataXPC.CodingKeys.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationTurnDataXPC.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ConversationTurnDataXPC.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConversationTurnDataXPC.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ConversationTurnDataXPC.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void ConversationTurnDataXPC.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ConversationTurnDataXPC.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationTurnDataXPC();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for XPCRepresentation.swiftRepresentation() in conformance ConversationTurnDataXPC()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

char *ProxiedRequestContext.supportsSecureCoding.unsafeMutableAddressor()
{
  return &static ProxiedRequestContext.supportsSecureCoding;
}

uint64_t static ProxiedRequestContext.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static ProxiedRequestContext.supportsSecureCoding;
}

uint64_t static ProxiedRequestContext.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static ProxiedRequestContext.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ProxiedRequestContext.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ProxiedRequestContext.aceId.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceId);
}

uint64_t ProxiedRequestContext.refId.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId);
}

uint64_t ProxiedRequestContext.interactionType.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionType, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA8038], a1);
}

uint64_t ProxiedRequestContext.inputOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_inputOrigin, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA7D50], a1);
}

void *ProxiedRequestContext.aceMeCard.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceMeCard);
  v2 = v1;
  return v1;
}

uint64_t ProxiedRequestContext.sessionHandoffContinuityId.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_sessionHandoffContinuityId);
}

uint64_t ProxiedRequestContext.isMultiUserEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isMultiUserEnabled);
}

uint64_t ProxiedRequestContext.requiresConditionalMultiUserGrounding.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_requiresConditionalMultiUserGrounding);
}

uint64_t ProxiedRequestContext.isEyesFree.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isEyesFree);
}

uint64_t ProxiedRequestContext.isVoiceTriggerEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isVoiceTriggerEnabled);
}

uint64_t ProxiedRequestContext.isTextToSpeechEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isTextToSpeechEnabled);
}

uint64_t ProxiedRequestContext.isDirectAction.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isDirectAction);
}

uint64_t ProxiedRequestContext.interactionId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ProxiedRequestContext.bargeInContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_bargeInContext, a1, (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
}

void *ProxiedRequestContext.aceRemoteExecution.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution);
  v2 = v1;
  return v1;
}

uint64_t ProxiedRequestContext.resultCandidateId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_resultCandidateId);
  swift_bridgeObjectRetain();
  return v1;
}

id ProxiedRequestContext.__allocating_init(aceId:refId:interactionType:inputOrigin:aceMeCard:sessionHandoffContinuityId:isMultiUserEnabled:requiresConditionalMultiUserGrounding:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:interactionId:bargeInContext:aceRemoteExecution:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, char a15, __int128 a16, __int128 a17, uint64_t a18, uint64_t a19)
{
  objc_class *v19;
  id v20;

  v20 = objc_allocWithZone(v19);
  return ProxiedRequestContext.init(aceId:refId:interactionType:inputOrigin:aceMeCard:sessionHandoffContinuityId:isMultiUserEnabled:requiresConditionalMultiUserGrounding:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:interactionId:bargeInContext:aceRemoteExecution:resultCandidateId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, *((uint64_t *)&a16 + 1), a17, *((uint64_t *)&a17 + 1),
           a18,
           a19);
}

id ProxiedRequestContext.init(aceId:refId:interactionType:inputOrigin:aceMeCard:sessionHandoffContinuityId:isMultiUserEnabled:requiresConditionalMultiUserGrounding:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:interactionId:bargeInContext:aceRemoteExecution:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _BYTE *v21;
  _BYTE *v22;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  id v40;
  objc_class *ObjectType;
  objc_super v46;

  v22 = v21;
  ObjectType = (objc_class *)swift_getObjectType();
  v29 = &v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceId];
  *v29 = a1;
  v29[1] = a2;
  v30 = &v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId];
  *v30 = a3;
  v30[1] = a4;
  v31 = &v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionType];
  v32 = type metadata accessor for InteractionType();
  v33 = *(_QWORD *)(v32 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v31, a5, v32);
  v34 = &v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_inputOrigin];
  v35 = type metadata accessor for InputOrigin();
  v36 = *(_QWORD *)(v35 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v34, a6, v35);
  *(_QWORD *)&v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceMeCard] = a7;
  v37 = &v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_sessionHandoffContinuityId];
  *v37 = a8;
  v37[1] = a9;
  v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isMultiUserEnabled] = a10;
  v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_requiresConditionalMultiUserGrounding] = a11;
  v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isEyesFree] = a12;
  v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isVoiceTriggerEnabled] = a13;
  v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isTextToSpeechEnabled] = a14;
  v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isDirectAction] = a15;
  v38 = &v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionId];
  *v38 = a16;
  v38[1] = a17;
  outlined init with copy of ReferenceResolutionClientProtocol?(a18, (uint64_t)&v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_bargeInContext], (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
  *(_QWORD *)&v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution] = a19;
  v39 = &v22[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_resultCandidateId];
  *v39 = a20;
  v39[1] = a21;
  v46.receiver = v22;
  v46.super_class = ObjectType;
  v40 = objc_msgSendSuper2(&v46, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?(a18, (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(a6, v35);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(a5, v32);
  return v40;
}

uint64_t ProxiedRequestContext.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4E5AD84 + 4 * byte_1B4EED618[a1]))(0x6449656361, 0xE500000000000000);
}

uint64_t sub_1B4E5AD84()
{
  return 0x6449666572;
}

uint64_t sub_1B4E5AD94()
{
  return 0x7463617265746E69;
}

uint64_t sub_1B4E5AEB4()
{
  return 0x4D6E496567726162;
}

unint64_t sub_1B4E5AED4()
{
  return 0xD000000000000012;
}

void sub_1B4E5AEFC()
{
  JUMPOUT(0x1B4E5AF10);
}

id ProxiedRequestContext.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ProxiedRequestContext.init(coder:)(a1);
}

id ProxiedRequestContext.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint8_t *v43;
  int v44;
  int v45;
  int v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  void *v54;
  id v55;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  void *v64;
  unsigned __int8 v65;
  void *v66;
  unsigned __int8 v67;
  void *v68;
  unsigned __int8 v69;
  void *v70;
  unsigned __int8 v71;
  void *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  void *v80;
  void *v81;
  void *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  os_log_type_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  os_log_type_t v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  objc_class *ObjectType;
  uint64_t v108;
  uint64_t v109;
  objc_super v110;

  ObjectType = (objc_class *)swift_getObjectType();
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v3);
  v102 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BargeInMode();
  MEMORY[0x1E0C80A78](v5);
  v100 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
  MEMORY[0x1E0C80A78](v7);
  v101 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for InputOrigin();
  v103 = *(_QWORD *)(v12 - 8);
  v104 = v12;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for InteractionType();
  v108 = *(_QWORD *)(v18 - 8);
  v109 = v18;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v21 = v1;
  v22 = a1;
  v23 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v23)
  {
    v24 = (void *)v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

  }
  else
  {
    v25 = 0;
    v27 = 0;
  }
  v28 = (uint64_t *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceId];
  *v28 = v25;
  v28[1] = v27;
  v105 = v28;
  v29 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v29)
  {
    v30 = (void *)v29;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v32;

  }
  else
  {
    v31 = 0;
    v33 = 0;
  }
  v34 = (uint64_t *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId];
  *v34 = v31;
  v34[1] = v33;
  v106 = v34;
  v35 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v35)
    goto LABEL_10;
  v36 = (void *)v35;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  InteractionType.init(rawValue:)();
  v37 = v108;
  v38 = v109;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v17, 1, v109) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, &demangling cache variable for type metadata for InteractionType?);
LABEL_10:
    if (one-time initialization token for executor != -1)
      swift_once();
    v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.executor);
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    v42 = os_log_type_enabled(v40, v41);
    v38 = v109;
    if (!v42)
    {
      v44 = 0;
      v45 = 0;
      v46 = 0;
      goto LABEL_23;
    }
    v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v43 = 0;
    _os_log_impl(&dword_1B4BE6000, v40, v41, "Unknown interactionType when decoding ProxiedRequestContext, returning nil", v43, 2u);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    goto LABEL_22;
  }
  v47 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
  v47(v20, v17, v38);
  v47(&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionType], v20, v38);
  v48 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v48)
    goto LABEL_18;
  v49 = (void *)v48;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  InputOrigin.init(rawValue:)();
  v50 = v103;
  v51 = v104;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v11, 1, v104) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for InputOrigin?);
LABEL_18:
    if (one-time initialization token for executor != -1)
      swift_once();
    v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.executor);
    v40 = Logger.logObject.getter();
    v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v53))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_1B4BE6000, v40, v53, "Unknown input origin when decoding ProxiedRequestContext, returning nil", v43, 2u);
      v45 = 0;
      v46 = 0;
      v44 = 1;
LABEL_22:
      MEMORY[0x1B5E44758](v43, -1, -1);
      goto LABEL_23;
    }
    v45 = 0;
    v46 = 0;
    v44 = 1;
    goto LABEL_23;
  }
  v57 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
  v57(v14, v11, v51);
  v57(&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_inputOrigin], v14, v51);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAPerson);
  *(_QWORD *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceMeCard] = NSCoder.decodeObject<A>(of:forKey:)();
  v58 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v58)
  {
    v59 = (void *)v58;
    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v62 = v61;

  }
  else
  {
    v60 = 0;
    v62 = 0;
  }
  v63 = (uint64_t *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_sessionHandoffContinuityId];
  *v63 = v60;
  v63[1] = v62;
  v64 = (void *)MEMORY[0x1B5E432E8](0xD000000000000012, 0x80000001B4EF5110);
  v65 = objc_msgSend(v22, sel_decodeBoolForKey_, v64);

  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isMultiUserEnabled] = v65;
  v66 = (void *)MEMORY[0x1B5E432E8](0xD000000000000025, 0x80000001B4EF5130);
  v67 = objc_msgSend(v22, sel_decodeBoolForKey_, v66);

  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_requiresConditionalMultiUserGrounding] = v67;
  v68 = (void *)MEMORY[0x1B5E432E8](0x7246736579457369, 0xEA00000000006565);
  v69 = objc_msgSend(v22, sel_decodeBoolForKey_, v68);

  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isEyesFree] = v69;
  v70 = (void *)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4EF5160);
  v71 = objc_msgSend(v22, sel_decodeBoolForKey_, v70);

  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isVoiceTriggerEnabled] = v71;
  v72 = (void *)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4EF5180);
  LOBYTE(v70) = objc_msgSend(v22, sel_decodeBoolForKey_, v72);

  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isTextToSpeechEnabled] = (_BYTE)v70;
  v73 = (void *)MEMORY[0x1B5E432E8](0x7463657269447369, 0xEE006E6F69746341);
  LOBYTE(v70) = objc_msgSend(v22, sel_decodeBoolForKey_, v73);

  v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isDirectAction] = (_BYTE)v70;
  v74 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v74)
  {
    v75 = (void *)v74;
    v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v78 = v77;

    v79 = (uint64_t *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionId];
    *v79 = v76;
    v79[1] = v78;
    v80 = (void *)MEMORY[0x1B5E432E8](0x4D6E496567726162, 0xEB0000000065646FLL);
    LOBYTE(v76) = objc_msgSend(v22, sel_containsValueForKey_, v80);

    if ((v76 & 1) != 0)
    {
      v81 = (void *)MEMORY[0x1B5E432E8](0x4D6E496567726162, 0xEB0000000065646FLL);
      objc_msgSend(v22, sel_decodeIntegerForKey_, v81);

      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSDateInterval);
      v82 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
      BargeInMode.init(rawValue:)();
      if (v82)
      {
        v83 = v102;
        static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();
        v84 = type metadata accessor for DateInterval();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v83, 0, 1, v84);
      }
      else
      {
        v89 = type metadata accessor for DateInterval();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v102, 1, 1, v89);
      }
      v90 = (uint64_t)v101;
      BargeInContext.init(mode:approximatePreviousTTSInterval:)();

      v91 = type metadata accessor for BargeInContext();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v90, 0, 1, v91);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v90, (uint64_t)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_bargeInContext], (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
    }
    else
    {
      v87 = &v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_bargeInContext];
      v88 = type metadata accessor for BargeInContext();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v87, 1, 1, v88);
    }
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupSiriKitRemoteExecution);
    *(_QWORD *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution] = NSCoder.decodeObject<A>(of:forKey:)();
    v92 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v92)
    {
      v93 = (void *)v92;
      v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v96 = v95;

      v97 = (uint64_t *)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_resultCandidateId];
      *v97 = v94;
      v97[1] = v96;

      v110.receiver = v21;
      v110.super_class = ObjectType;
      v55 = objc_msgSendSuper2(&v110, sel_init);

      return v55;
    }
    if (one-time initialization token for executor != -1)
      swift_once();
    v98 = type metadata accessor for Logger();
    __swift_project_value_buffer(v98, (uint64_t)static Logger.executor);
    v40 = Logger.logObject.getter();
    v99 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v99))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_1B4BE6000, v40, v99, "Unknown resultCandidateId when decoding ProxiedRequestContext, returning nil", v43, 2u);
      v44 = 1;
      v45 = 1;
      v46 = 1;
      goto LABEL_22;
    }
    v44 = 1;
    v45 = 1;
    v46 = 1;
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v85 = type metadata accessor for Logger();
    __swift_project_value_buffer(v85, (uint64_t)static Logger.executor);
    v40 = Logger.logObject.getter();
    v86 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v86))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_1B4BE6000, v40, v86, "Unknown interactionId when decoding ProxiedRequestContext, returning nil", v43, 2u);
      v46 = 0;
      v44 = 1;
      v45 = 1;
      goto LABEL_22;
    }
    v46 = 0;
    v44 = 1;
    v45 = 1;
  }
LABEL_23:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v44)
  {
    if (!v45)
      goto LABEL_25;
LABEL_30:
    (*(void (**)(_BYTE *, uint64_t))(v103 + 8))(&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_inputOrigin], v104);

    swift_bridgeObjectRelease();
    v54 = v21;
    if (!v46)
      goto LABEL_27;
    goto LABEL_26;
  }
  (*(void (**)(_BYTE *, uint64_t))(v108 + 8))(&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionType], v38);
  if (v45)
    goto LABEL_30;
LABEL_25:
  v54 = v21;
  if (v46)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_bargeInContext], (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
    v54 = *(void **)&v21[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution];

  }
LABEL_27:

  swift_deallocPartialClassInstance();
  return 0;
}

SiriKitRuntime::ProxiedRequestContext::CodingKeys_optional __swiftcall ProxiedRequestContext.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriKitRuntime::ProxiedRequestContext::CodingKeys_optional)17;
}

uint64_t ProxiedRequestContext.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ProxiedRequestContext.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4E5BCF8 + 4 * byte_1B4EED629[a1]))(0x6449656361, 0xE500000000000000);
}

uint64_t sub_1B4E5BCF8()
{
  return 0x6449666572;
}

uint64_t sub_1B4E5BD08()
{
  return 0x7463617265746E69;
}

uint64_t sub_1B4E5BE28()
{
  return 0x4D6E496567726162;
}

unint64_t sub_1B4E5BE48()
{
  return 0xD000000000000012;
}

void sub_1B4E5BE70()
{
  JUMPOUT(0x1B4E5BE84);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ProxiedRequestContext.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance AnnounceUsoEntity(a1, a2, a3, a4, (uint64_t (*)(uint64_t))ProxiedRequestContext.CodingKeys.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ProxiedRequestContext.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AnnounceUsoEntity(a1, a2, (void (*)(uint64_t))ProxiedRequestContext.CodingKeys.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ProxiedRequestContext.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance AnnounceUsoEntity(a1, a2, a3, (void (*)(_QWORD))ProxiedRequestContext.CodingKeys.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ProxiedRequestContext.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AnnounceUsoEntity(a1, a2, a3, (void (*)(uint64_t))ProxiedRequestContext.CodingKeys.rawValue.getter);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ProxiedRequestContext.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized ProxiedRequestContext.CodingKeys.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ProxiedRequestContext.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ProxiedRequestContext.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ProxiedRequestContext.CodingKeys()
{
  unsigned __int8 *v0;

  return ProxiedRequestContext.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ProxiedRequestContext.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized ProxiedRequestContext.CodingKeys.init(rawValue:)();
  *a1 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ProxiedRequestContext.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 17;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ProxiedRequestContext.CodingKeys()
{
  lazy protocol witness table accessor for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ProxiedRequestContext.CodingKeys()
{
  lazy protocol witness table accessor for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id ProxiedRequestContext.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ProxiedRequestContext.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ProxiedRequestContext.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized ProxiedRequestContext.__allocating_init(rske:executionRequestId:resultCandidateId:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  char v44;
  char v45;
  char v46;
  id v47;
  void *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
  MEMORY[0x1E0C80A78](v10);
  v67 = (uint64_t)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for InputOrigin();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v73 = (uint64_t)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for InteractionType();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v72 = (uint64_t)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend(a1, sel_aceId);
  if (v18)
  {
    v19 = v18;
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v66 = v20;

  }
  else
  {
    v61 = 0;
    v66 = 0;
  }
  v21 = objc_msgSend(a1, sel_refId);
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v64 = v24;
    v65 = v23;

  }
  else
  {
    v64 = 0;
    v65 = 0;
  }
  v25 = objc_msgSend(a1, sel_interactionType);
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

    static SiriKitExecutorRunUtils.interactionTypeFrom(aceValue:)(v27, v29, v72);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v72, *MEMORY[0x1E0DA8010], v15);
  }
  v30 = objc_msgSend(a1, sel_inputOrigin);
  if (v30)
  {
    v31 = v30;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

    static SiriKitExecutorRunUtils.inputOriginFrom(aceValue:)(v32, v34, v73);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v73, *MEMORY[0x1E0DA7CE0], v12);
  }
  v35 = objc_msgSend(a1, sel_identifiedUserMeCard);
  v36 = objc_msgSend(a1, sel_sessionHandOffContinuityID);
  v60 = a2;
  v71 = (uint64_t)v35;
  if (v36)
  {
    v37 = v36;
    v38 = a3;
    v39 = a5;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v62 = v41;
    v63 = v40;

  }
  else
  {
    v38 = a3;
    v39 = a5;
    v62 = 0;
    v63 = 0;
  }
  v42 = objc_msgSend(a1, sel_multiUser);
  v43 = objc_msgSend(a1, sel_requiresConditionalMultiUserGrounding);
  v44 = objc_msgSend(a1, sel_eyesFree);
  v45 = objc_msgSend(a1, sel_voiceTriggerEnabled);
  v46 = objc_msgSend(a1, sel_textToSpeechEnabled);
  v68 = objc_msgSend(a1, sel_directAction);
  v47 = objc_msgSend(a1, sel_siriKitMetrics);
  v69 = v43;
  v70 = v42;
  if (!v47)
    goto LABEL_20;
  v48 = v47;
  v49 = a4;
  v50 = objc_msgSend(v47, sel_interactionId);

  if (!v50)
  {
    a4 = v49;
LABEL_20:
    v51 = v60;
    goto LABEL_21;
  }
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v53 = v52;
  swift_bridgeObjectRelease();

  v38 = v53;
  a4 = v49;
LABEL_21:
  v54 = v67;
  v55 = v61;
  static SiriKitExecutorRunUtils.bargeInContextFrom(command:)(a1, v67);
  v56 = objc_msgSend(a1, sel_remoteExecution);
  v57 = objc_allocWithZone((Class)type metadata accessor for ProxiedRequestContext(0));
  return ProxiedRequestContext.init(aceId:refId:interactionType:inputOrigin:aceMeCard:sessionHandoffContinuityId:isMultiUserEnabled:requiresConditionalMultiUserGrounding:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:interactionId:bargeInContext:aceRemoteExecution:resultCandidateId:)(v55, v66, v65, v64, v72, v73, v71, v63, v62, v70, v69, v44, v45, v46, v68, v51, v38, v54, (uint64_t)v56,
           a4,
           v39);
}

unint64_t lazy protocol witness table accessor for type DefaultMeCardProxy and conformance DefaultMeCardProxy()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DefaultMeCardProxy and conformance DefaultMeCardProxy;
  if (!lazy protocol witness table cache variable for type DefaultMeCardProxy and conformance DefaultMeCardProxy)
  {
    v1 = type metadata accessor for DefaultMeCardProxy();
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for DefaultMeCardProxy, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultMeCardProxy and conformance DefaultMeCardProxy);
  }
  return result;
}

unint64_t specialized ConversationTurnDataXPC.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationTurnDataXPC.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t specialized ProxiedRequestContext.CodingKeys.init(rawValue:)()
{
  unint64_t v0;

  v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x11)
    return 17;
  else
    return v0;
}

unint64_t lazy protocol witness table accessor for type ConversationTurnDataXPC.CodingKeys and conformance ConversationTurnDataXPC.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationTurnDataXPC.CodingKeys and conformance ConversationTurnDataXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationTurnDataXPC.CodingKeys and conformance ConversationTurnDataXPC.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationTurnDataXPC.CodingKeys, &type metadata for ConversationTurnDataXPC.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationTurnDataXPC.CodingKeys and conformance ConversationTurnDataXPC.CodingKeys);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for XPCRepresentation.SwiftRepresentation : XPCConvertible in ConversationTurnDataXPC()
{
  return &protocol witness table for RemoteConversationTurnData;
}

unint64_t lazy protocol witness table accessor for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ProxiedRequestContext.CodingKeys, &type metadata for ProxiedRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ProxiedRequestContext.CodingKeys, &type metadata for ProxiedRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ProxiedRequestContext.CodingKeys, &type metadata for ProxiedRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ProxiedRequestContext.CodingKeys, &type metadata for ProxiedRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProxiedRequestContext.CodingKeys and conformance ProxiedRequestContext.CodingKeys);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for RemoteConversationTurnData(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  _OWORD *v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = (void *)a2[4];
    v10 = a3[7];
    __dst = (char *)a1 + v10;
    v11 = (char *)a2 + v10;
    a1[4] = v9;
    v12 = type metadata accessor for UUID();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15 = v9;
    if (v14(v11, 1, v12))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v18 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    *((_BYTE *)v4 + v18) = *((_BYTE *)a2 + v18);
    v19 = a3[10];
    v20 = a3[11];
    v21 = *(void **)((char *)a2 + v19);
    *(_QWORD *)((char *)v4 + v19) = v21;
    v22 = (char *)v4 + v20;
    v23 = (_OWORD *)((char *)a2 + v20);
    v24 = *(_QWORD *)((char *)a2 + v20 + 8);
    swift_retain();
    v25 = v21;
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)v22 = *v23;
    }
    else
    {
      v26 = *(_QWORD *)v23;
      outlined copy of Data._Representation(v26, v24);
      *(_QWORD *)v22 = v26;
      *((_QWORD *)v22 + 1) = v24;
    }
  }
  return v4;
}

_QWORD *assignWithCopy for RemoteConversationTurnData(_QWORD *a1, _QWORD *a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (void *)a2[4];
  v7 = (void *)a1[4];
  a1[4] = v6;
  v8 = v6;

  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v18 = a3[10];
  v19 = *(void **)((char *)a1 + v18);
  v20 = *(void **)((char *)a2 + v18);
  *(_QWORD *)((char *)a1 + v18) = v20;
  v21 = v20;

  v22 = a3[11];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  v25 = *(_QWORD *)((char *)a2 + v22 + 8);
  if (*(_QWORD *)((char *)a1 + v22 + 8) >> 60 != 15)
  {
    if (v25 >> 60 != 15)
    {
      v27 = *v24;
      outlined copy of Data._Representation(v27, v25);
      v28 = *v23;
      v29 = v23[1];
      *v23 = v27;
      v23[1] = v25;
      outlined consume of Data._Representation(v28, v29);
      return a1;
    }
    outlined destroy of Data((uint64_t)v23);
    goto LABEL_12;
  }
  if (v25 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v23 = *(_OWORD *)v24;
    return a1;
  }
  v26 = *v24;
  outlined copy of Data._Representation(v26, v25);
  *v23 = v26;
  v23[1] = v25;
  return a1;
}

uint64_t initializeWithTake for RemoteConversationTurnData(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = a3[7];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  return a1;
}

_QWORD *assignWithTake for RemoteConversationTurnData(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = (void *)a1[4];
  a1[4] = a2[4];

  v9 = a3[7];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_release();
  v18 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v19 = *(void **)((char *)a1 + v18);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);

  v20 = a3[11];
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v23 = *(_QWORD *)((char *)a1 + v20 + 8);
  if (v23 >> 60 != 15)
  {
    v24 = v22[1];
    if (v24 >> 60 != 15)
    {
      v25 = *v21;
      *v21 = *v22;
      v21[1] = v24;
      outlined consume of Data._Representation(v25, v23);
      return a1;
    }
    outlined destroy of Data((uint64_t)v21);
  }
  *(_OWORD *)v21 = *(_OWORD *)v22;
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoteConversationTurnData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4E5CD10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RemoteConversationTurnData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4E5CD9C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

void type metadata completion function for RemoteConversationTurnData()
{
  unint64_t v0;

  type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t method lookup function for ConversationTurnDataXPC()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationTurnDataXPC.swiftRepresentation()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ConversationTurnDataXPC.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ConversationTurnDataXPC.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t storeEnumTagSinglePayload for ConversationTurnDataXPC.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B4E5CF78 + 4 * byte_1B4EED63F[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B4E5CFAC + 4 * byte_1B4EED63A[v4]))();
}

uint64_t sub_1B4E5CFAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E5CFB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4E5CFBCLL);
  return result;
}

uint64_t sub_1B4E5CFC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4E5CFD0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B4E5CFD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E5CFDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationTurnDataXPC.CodingKeys()
{
  return &type metadata for ConversationTurnDataXPC.CodingKeys;
}

uint64_t ObjC metadata update function for ProxiedRequestContext()
{
  return type metadata accessor for ProxiedRequestContext(0);
}

void type metadata completion function for ProxiedRequestContext()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for InteractionType();
  if (v0 <= 0x3F)
  {
    type metadata accessor for InputOrigin();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Input?(319, &lazy cache variable for type metadata for BargeInContext?, (void (*)(uint64_t))MEMORY[0x1E0DA7F90]);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for ProxiedRequestContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ProxiedRequestContext.__allocating_init(aceId:refId:interactionType:inputOrigin:aceMeCard:sessionHandoffContinuityId:isMultiUserEnabled:requiresConditionalMultiUserGrounding:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:interactionId:bargeInContext:aceRemoteExecution:resultCandidateId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of ProxiedRequestContext.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t getEnumTagSinglePayload for ProxiedRequestContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ProxiedRequestContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1B4E5D238 + 4 * byte_1B4EED649[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1B4E5D26C + 4 * byte_1B4EED644[v4]))();
}

uint64_t sub_1B4E5D26C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E5D274(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4E5D27CLL);
  return result;
}

uint64_t sub_1B4E5D288(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4E5D290);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1B4E5D294(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E5D29C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ProxiedRequestContext.CodingKeys()
{
  return &type metadata for ProxiedRequestContext.CodingKeys;
}

uint64_t thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ConversationCanHandleResult) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t SendableRemoteConversationXPCWrapper.__allocating_init(wrapping:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t SendableRemoteConversationXPCWrapper.wrapped.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t SendableRemoteConversationXPCWrapper.init(wrapping:)(uint64_t a1)
{
  uint64_t v1;

  swift_getObjectType();
  return specialized SendableRemoteConversationXPCWrapper.init(wrapping:)(a1, v1);
}

void SendableRemoteConversationXPCWrapper.warmup(refId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[6];

  v7 = *(void **)(v4 + 16);
  v8 = (void *)MEMORY[0x1B5E432E8]();
  v10[4] = a3;
  v10[5] = a4;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v10[3] = &block_descriptor_20;
  v9 = _Block_copy(v10);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_warmupWithRefId_reply_, v8, v9);
  _Block_release(v9);

}

void SendableRemoteConversationXPCWrapper.canHandle(inputData:rcId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  void *v11;
  Class isa;
  void *v13;
  void *v14;
  _QWORD v15[6];

  v11 = *(void **)(v6 + 16);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v13 = (void *)MEMORY[0x1B5E432E8](a3, a4);
  v15[4] = a5;
  v15[5] = a6;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  v15[3] = &block_descriptor_3_2;
  v14 = _Block_copy(v15);
  swift_retain();
  swift_release();
  objc_msgSend(v11, sel_canHandleWithInputData_rcId_reply_, isa, v13, v14);
  _Block_release(v14);

}

void SendableRemoteConversationXPCWrapper.cancel(reply:)(uint64_t a1, uint64_t a2)
{
  AceServiceInvokerImpl.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> (), (uint64_t)&block_descriptor_6_2, (SEL *)&selRef_cancelWithReply_);
}

void SendableRemoteConversationXPCWrapper.reset(reply:)(uint64_t a1, uint64_t a2)
{
  AceServiceInvokerImpl.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> (), (uint64_t)&block_descriptor_9_2, (SEL *)&selRef_resetWithReply_);
}

void SendableRemoteConversationXPCWrapper.ensureReady(reply:)(uint64_t a1, uint64_t a2)
{
  AceServiceInvokerImpl.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> (), (uint64_t)&block_descriptor_12, (SEL *)&selRef_ensureReadyWithReply_);
}

void SendableRemoteConversationXPCWrapper.startTurn(turnData:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v7;
  void *v8;
  _QWORD v9[6];

  v7 = *(void **)(v4 + 16);
  v9[4] = a3;
  v9[5] = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
  v9[3] = &block_descriptor_15;
  v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_startTurnWithTurnData_bridge_reply_, a1, a2, v8);
  _Block_release(v8);
}

void SendableRemoteConversationXPCWrapper.startTurnFromCache(executionRequestId:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  SendableRemoteConversationXPCWrapper.startTurnFromCache(executionRequestId:bridge:reply:)(a1, a2, a3, a4, a5, MEMORY[0x1E0CB1940], (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> (), (uint64_t)&block_descriptor_18, (SEL *)&selRef_startTurnFromCacheWithExecutionRequestId_bridge_reply_);
}

void SendableRemoteConversationXPCWrapper.accept(inputData:speechData:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  SendableRemoteConversationXPCWrapper.startTurnFromCache(executionRequestId:bridge:reply:)(a1, a2, a3, a4, a5, MEMORY[0x1E0CB01F0], (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> (), (uint64_t)&block_descriptor_21, (SEL *)&selRef_acceptWithInputData_speechData_reply_);
}

void SendableRemoteConversationXPCWrapper.startTurnFromCache(executionRequestId:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t a7, uint64_t a8, SEL *a9)
{
  uint64_t v9;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[6];

  v15 = *(void **)(v9 + 16);
  v16 = (void *)a6();
  v18[4] = a4;
  v18[5] = a5;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1107296256;
  v18[2] = a7;
  v18[3] = a8;
  v17 = _Block_copy(v18);
  swift_retain();
  swift_release();
  objc_msgSend(v15, *a9, v16, a3, v17);
  _Block_release(v17);

}

void SendableRemoteConversationXPCWrapper.acceptInitialInput(inputIdentifier:speechData:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v8;
  Class isa;
  void *v10;
  _QWORD v11[6];

  v8 = *(void **)(v4 + 16);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v11[4] = a3;
  v11[5] = a4;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
  v11[3] = &block_descriptor_24;
  v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_acceptInitialInputWithInputIdentifier_speechData_reply_, isa, a2, v10);
  _Block_release(v10);

}

void SendableRemoteConversationXPCWrapper.prepare(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  SendableRemoteConversationXPCWrapper.prepare(bridge:reply:)(a1, a2, a3, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> (), (uint64_t)&block_descriptor_27, (SEL *)&selRef_prepareWithBridge_reply_);
}

void SendableRemoteConversationXPCWrapper.paraphrase(reply:)(uint64_t a1, uint64_t a2)
{
  AceServiceInvokerImpl.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> (), (uint64_t)&block_descriptor_30, (SEL *)&selRef_paraphraseWithReply_);
}

void SendableRemoteConversationXPCWrapper.commit(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  SendableRemoteConversationXPCWrapper.prepare(bridge:reply:)(a1, a2, a3, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> (), (uint64_t)&block_descriptor_33, (SEL *)&selRef_commitWithBridge_reply_);
}

void SendableRemoteConversationXPCWrapper.prepare(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v6;
  void *v9;
  void *v10;
  _QWORD v11[6];

  v9 = *(void **)(v6 + 16);
  v11[4] = a2;
  v11[5] = a3;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = a4;
  v11[3] = a5;
  v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v9, *a6, a1, v10);
  _Block_release(v10);
}

void SendableRemoteConversationXPCWrapper.drainAsyncWork(reply:)(uint64_t a1, uint64_t a2)
{
  AceServiceInvokerImpl.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> (), (uint64_t)&block_descriptor_36, (SEL *)&selRef_drainAsyncWorkWithReply_);
}

void SendableRemoteConversationXPCWrapper.isEmpty(reply:)(uint64_t a1, uint64_t a2)
{
  AceServiceInvokerImpl.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> (), (uint64_t)&block_descriptor_39, (SEL *)&selRef_isEmptyWithReply_);
}

void SendableRemoteConversationXPCWrapper.isCorrectable(reply:)(uint64_t a1, uint64_t a2)
{
  AceServiceInvokerImpl.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> (), (uint64_t)&block_descriptor_42, (SEL *)&selRef_isCorrectableWithReply_);
}

void SendableRemoteConversationXPCWrapper.flexibleExecutionSupportOptions(reply:)(uint64_t a1, uint64_t a2)
{
  AceServiceInvokerImpl.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> (), (uint64_t)&block_descriptor_45, (SEL *)&selRef_flexibleExecutionSupportOptionsWithReply_);
}

uint64_t SendableRemoteConversationXPCWrapper.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

id one-time initialization function for remoteConversationXPCInterface()
{
  id v0;
  uint64_t v1;
  id result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EF0F5AF0);
  if (one-time initialization token for executionBridgeXPCInterface != -1)
    swift_once();
  v1 = static ServiceBridgeHelper.executionBridgeXPCInterface;
  objc_msgSend(v0, sel_setInterface_forSelector_argumentIndex_ofReply_, static ServiceBridgeHelper.executionBridgeXPCInterface, sel_startTurnWithTurnData_bridge_reply_, 1, 0);
  objc_msgSend(v0, sel_setInterface_forSelector_argumentIndex_ofReply_, v1, sel_startTurnFromCacheWithExecutionRequestId_bridge_reply_, 1, 0);
  objc_msgSend(v0, sel_setInterface_forSelector_argumentIndex_ofReply_, v1, sel_prepareWithBridge_reply_, 0, 0);
  result = objc_msgSend(v0, sel_setInterface_forSelector_argumentIndex_ofReply_, v1, sel_commitWithBridge_reply_, 0, 0);
  static RemoteConversationXPCHelper.remoteConversationXPCInterface = (uint64_t)v0;
  return result;
}

id static RemoteConversationXPCHelper.remoteConversationXPCInterface.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for remoteConversationXPCInterface, (id *)&static RemoteConversationXPCHelper.remoteConversationXPCInterface);
}

id one-time initialization function for remoteConversationHostXPCInterface()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EF0F5D60);
  static RemoteConversationXPCHelper.remoteConversationHostXPCInterface = (uint64_t)result;
  return result;
}

id static RemoteConversationXPCHelper.remoteConversationHostXPCInterface.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for remoteConversationHostXPCInterface, (id *)&static RemoteConversationXPCHelper.remoteConversationHostXPCInterface);
}

uint64_t specialized SendableRemoteConversationXPCWrapper.init(wrapping:)(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 16) = a1;
  return a2;
}

uint64_t method lookup function for SendableRemoteConversationXPCWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.__allocating_init(wrapping:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.warmup(refId:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.canHandle(inputData:rcId:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.cancel(reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.reset(reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.ensureReady(reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.startTurn(turnData:bridge:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.startTurnFromCache(executionRequestId:bridge:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.accept(inputData:speechData:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.acceptInitialInput(inputIdentifier:speechData:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.prepare(bridge:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.paraphrase(reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.commit(bridge:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.drainAsyncWork(reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.isEmpty(reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.isCorrectable(reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of SendableRemoteConversationXPCWrapper.flexibleExecutionSupportOptions(reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

ValueMetadata *type metadata accessor for RemoteConversationXPCHelper()
{
  return &type metadata for RemoteConversationXPCHelper;
}

uint64_t sub_1B4E5DFF8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t _s14SiriKitRuntime27ConversationCanHandleResultCIeyBhy_ACIeghg_TRTA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t RemoteFlowPluginBundleConversationHandler.bundlePath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteFlowPluginBundleConversationHandler.sharedFlowPluginServiceClient.getter()
{
  return swift_retain();
}

uint64_t RemoteFlowPluginBundleConversationHandler.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteFlowPluginBundleConversationHandler.affinityScorer.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 56, a1);
}

uint64_t RemoteFlowPluginBundleConversationHandler.remoteConversationClient.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t RemoteFlowPluginBundleConversationHandler.remoteConversationClient.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 96) = a1;
  return swift_release();
}

uint64_t (*RemoteFlowPluginBundleConversationHandler.remoteConversationClient.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RemoteFlowPluginBundleConversationHandler.loadRemoteConversationTask.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t RemoteFlowPluginBundleConversationHandler.loadRemoteConversationTask.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 104) = a1;
  return swift_release();
}

uint64_t (*RemoteFlowPluginBundleConversationHandler.loadRemoteConversationTask.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

void RemoteFlowPluginBundleConversationHandler.__allocating_init()()
{
  specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000065, 0x80000001B4EFFB80, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/ConversationHandler/RemoteFlowPluginBundleConversationHandler.swift", 136, 2, 26);
  __break(1u);
}

void RemoteFlowPluginBundleConversationHandler.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0;
  specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000065, 0x80000001B4EFFB80, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/ConversationHandler/RemoteFlowPluginBundleConversationHandler.swift", 136, 2, 26);
  __break(1u);
}

_QWORD *RemoteFlowPluginBundleConversationHandler.__allocating_init(bundleId:bundlePath:affinityScorer:sharedFlowPluginServiceClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  _QWORD *v12;

  v12 = (_QWORD *)swift_allocObject();
  v12[12] = 0;
  v12[13] = 0;
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  v12[5] = a4;
  outlined init with take of ReferenceResolutionClientProtocol(a5, (uint64_t)(v12 + 7));
  v12[6] = a6;
  return v12;
}

_QWORD *RemoteFlowPluginBundleConversationHandler.init(bundleId:bundlePath:affinityScorer:sharedFlowPluginServiceClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  _QWORD *v6;

  v6[12] = 0;
  v6[13] = 0;
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  v6[5] = a4;
  outlined init with take of ReferenceResolutionClientProtocol(a5, (uint64_t)(v6 + 7));
  v6[6] = a6;
  return v6;
}

uint64_t closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[14] = a6;
  v7[15] = a7;
  v7[12] = a4;
  v7[13] = a5;
  v7[11] = a1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v7[16] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (_QWORD *)v0[12];
  v2 = v1[5];
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = (_QWORD *)swift_task_alloc();
  v0[17] = v6;
  *v6 = v0;
  v6[1] = closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:);
  return SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(v3, v4, v5, v2, v0[13], v0[14], v0[15]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 144);
  swift_release();
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 144);
    v3 = *(_QWORD *)(v0 + 96);
    swift_beginAccess();
    *(_QWORD *)(v3 + 96) = v2;
    swift_retain();
    swift_release();
    swift_beginAccess();
    *(_QWORD *)(v3 + 104) = 0;
    swift_release();
  }
  **(_QWORD **)(v0 + 88) = *(_QWORD *)(v0 + 144);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 144) = a1;
  *(_QWORD *)(v3 + 152) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t RemoteFlowPluginBundleConversationHandler.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();
  return v0;
}

void protocol witness for Plugin.init() in conformance RemoteFlowPluginBundleConversationHandler()
{
  specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000065, 0x80000001B4EFFB80, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/ConversationHandler/RemoteFlowPluginBundleConversationHandler.swift", 136, 2, 26);
  __break(1u);
}

uint64_t protocol witness for Identifiable.id.getter in conformance RemoteFlowPluginBundleConversationHandler@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B4E5EB14()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t instantiation function for generic protocol witness table for RemoteFlowPluginBundleConversationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, a2, (uint64_t (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler, (uint64_t)&protocol conformance descriptor for RemoteFlowPluginBundleConversationHandler);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t method lookup function for RemoteFlowPluginBundleConversationHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteFlowPluginBundleConversationHandler.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of RemoteFlowPluginBundleConversationHandler.__allocating_init(bundleId:bundlePath:affinityScorer:sharedFlowPluginServiceClient:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_1B4E5EB90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                                      - 8)
                          + 80);
  v2 = (v1 + 56) & ~v1;
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                                      - 8)
                          + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  v10 = (uint64_t)v1 + ((v4 + 56) & ~v4);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t RemoteFlowPluginPackage.__allocating_init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;

  v14 = swift_allocObject();
  RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

uint64_t FlowPluginPackageFinder.__allocating_init(wrapping:sharedFlowPluginServiceClient:)(__int128 *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(a1, v4 + 16);
  *(_QWORD *)(v4 + 56) = a2;
  return v4;
}

uint64_t RemoteFlowPluginPackage.bundleId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteFlowPluginPackage.sharedFlowPluginServiceClient.getter()
{
  return swift_retain();
}

uint64_t RemoteFlowPluginPackage.supportedTopics.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RemoteFlowPluginPackage.bundlePath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RemoteFlowPluginPackage.__allocating_init(bundle:sharedFlowPluginServiceClient:)(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = specialized RemoteFlowPluginPackage.__allocating_init(bundle:sharedFlowPluginServiceClient:)(a1, a2);

  return v3;
}

uint64_t RemoteFlowPluginPackage.__allocating_init(path:sharedFlowPluginServiceClient:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v21[2];
  uint64_t v22;

  v6 = objc_allocWithZone(MEMORY[0x1E0CB34D0]);
  v7 = (void *)MEMORY[0x1B5E432E8](a1, a2);
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v6, sel_initWithPath_, v7);

  if (v8)
  {
    v9 = objc_msgSend(v8, sel_infoDictionary);
    if (v9)
    {
      v10 = v9;
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    }
    v12 = static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
    swift_bridgeObjectRelease();
    v13 = NSBundle.packageId.getter();
    v15 = v14;
    v16 = objc_msgSend(v8, sel_bundlePath);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

    v22 = 0;
    memset(v21, 0, sizeof(v21));
    v11 = swift_allocObject();
    RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(v13, v15, v17, v19, v12, a3, (uint64_t)v21);

  }
  else
  {
    swift_release();
    return 0;
  }
  return v11;
}

_QWORD *RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  __int128 v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18[2];

  v7[2] = a1;
  v7[3] = a2;
  v7[6] = a3;
  v7[7] = a4;
  v7[4] = a6;
  v7[5] = a5;
  outlined init with copy of AffinityScorer?(a7, (uint64_t)&v16);
  if (v17)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a7, (uint64_t *)&demangling cache variable for type metadata for AffinityScorer?);
    outlined init with take of ReferenceResolutionClientProtocol(&v16, (uint64_t)v18);
  }
  else
  {
    *(_QWORD *)&v18[0] = 0;
    *((_QWORD *)&v18[0] + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    swift_retain();
    _StringGuts.grow(_:)(52);
    v11._countAndFlagsBits = 0xD000000000000022;
    v11._object = (void *)0x80000001B4EFFD50;
    String.append(_:)(v11);
    v12._countAndFlagsBits = a1;
    v12._object = a2;
    String.append(_:)(v12);
    v13._object = (void *)0x80000001B4EFFD80;
    v13._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v13);
    v14 = v18[0];
    swift_bridgeObjectRetain();
    specialized logAction<A>(label:_:)(v14, *((unint64_t *)&v14 + 1), a1, (unint64_t)a2, (uint64_t)v18);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(a7, (uint64_t *)&demangling cache variable for type metadata for AffinityScorer?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v16, (uint64_t *)&demangling cache variable for type metadata for AffinityScorer?);
  }
  outlined init with take of ReferenceResolutionClientProtocol(v18, (uint64_t)(v7 + 8));
  return v7;
}

uint64_t closure #1 in implicit closure #1 in RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[5];

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v6 = static AmbiguityFeatureFlags.forceEnabled;
  if (!*(_QWORD *)(static AmbiguityFeatureFlags.forceEnabled + 16)
    || (v7 = specialized __RawDictionaryStorage.find<A>(_:)(0), (v8 & 1) == 0))
  {
    v21[3] = (uint64_t)&type metadata for AmbiguityFeatureFlags;
    v21[4] = lazy protocol witness table accessor for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags();
    LOBYTE(v21[0]) = 0;
    v14 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    if ((v14 & 1) == 0)
      goto LABEL_6;
LABEL_11:
    static AffinityScorerManager.affinityScorer(for:)(a1, a2, (uint64_t)v21);
    v15 = type metadata accessor for AffinityScoringAdapter();
    a3[3] = v15;
    a3[4] = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AffinityScoringAdapter and conformance AffinityScoringAdapter, 255, (uint64_t (*)(uint64_t))type metadata accessor for AffinityScoringAdapter, (uint64_t)&protocol conformance descriptor for AffinityScoringAdapter);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v21, (uint64_t)boxed_opaque_existential_1 + *(int *)(v15 + 20));
    UUID.init()();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  if (*(_BYTE *)(*(_QWORD *)(v6 + 56) + v7) == 1)
    goto LABEL_11;
LABEL_6:
  if (one-time initialization token for executor != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v21[0] = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "loadAffinityScorer Error loading affinity scorer for plugin %s, affinity scoring v2 is not enabled", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v13, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v18 = type metadata accessor for FixedAffinityScorer(0);
  v19 = swift_allocObject();
  UUID.init()();
  v20 = v19 + OBJC_IVAR____TtC14SiriKitRuntime19FixedAffinityScorer_score;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 0;
  a3[3] = v18;
  result = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type FixedAffinityScorer and conformance FixedAffinityScorer, 255, type metadata accessor for FixedAffinityScorer, (uint64_t)&protocol conformance descriptor for FixedAffinityScorer);
  a3[4] = result;
  *a3 = v19;
  return result;
}

uint64_t static RemoteFlowPluginPackage.from(id:sharedFlowPluginServiceClient:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t static RemoteFlowPluginPackage.from(id:sharedFlowPluginServiceClient:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  v3 = (void *)MEMORY[0x1B5E432E8](v1, v2);
  swift_bridgeObjectRelease();
  v4 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v3);

  if (!v4)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  swift_retain();
  v5 = objc_msgSend(v4, sel_infoDictionary);
  if (v5)
  {
    v6 = v5;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  }
  v8 = *(_QWORD *)(v0 + 32);
  v9 = static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
  swift_bridgeObjectRelease();
  v10 = NSBundle.packageId.getter();
  v12 = v11;
  v13 = objc_msgSend(v4, sel_bundlePath);
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = swift_allocObject();
  RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(v10, v12, v14, v16, v9, v8, (uint64_t)v18);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v17);
}

uint64_t RemoteFlowPluginPackage.isLoaded.getter()
{
  return 0;
}

uint64_t static RemoteFlowPluginPackage.packageFrom(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;

  v4 = v3;
  if (one-time initialization token for lastSeenFlowPluginServiceClient != -1)
    swift_once();
  v8 = static ConversationHandlerLocator.lastSeenFlowPluginServiceClient;
  v9 = (os_unfair_lock_s *)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 24));
  v10 = *(_QWORD *)(v8 + 16);
  swift_retain();
  os_unfair_lock_unlock(v9);
  if (v10)
  {
    v11 = objc_allocWithZone(MEMORY[0x1E0CB34D0]);
    swift_bridgeObjectRetain();
    swift_retain();
    v12 = (void *)MEMORY[0x1B5E432E8](a1, a2);
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v11, sel_initWithPath_, v12);

    if (v13)
    {
      v14 = objc_msgSend(v13, sel_infoDictionary);
      if (v14)
      {
        v15 = v14;
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      }
      else
      {
        specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      }
      v17 = static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
      swift_bridgeObjectRelease();
      v18 = NSBundle.packageId.getter();
      v20 = v19;
      v21 = objc_msgSend(v13, sel_bundlePath);
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v24 = v23;

      v28 = 0;
      memset(v27, 0, sizeof(v27));
      v25 = swift_allocObject();
      RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(v18, v20, v22, v24, v17, v10, (uint64_t)v27);

      *(_QWORD *)(a3 + 24) = v4;
      *(_QWORD *)(a3 + 32) = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage, v26, (uint64_t (*)(uint64_t))type metadata accessor for RemoteFlowPluginPackage, (uint64_t)&protocol conformance descriptor for RemoteFlowPluginPackage);
      result = swift_release();
      *(_QWORD *)a3 = v25;
    }
    else
    {
      swift_release();
      *(_QWORD *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return swift_release();
    }
  }
  else
  {
    result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000008CLL, 0x80000001B4EFFDA0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/ConversationHandler/RemoteFlowPluginPackage.swift", 118, 2, 102);
    __break(1u);
  }
  return result;
}

_QWORD *RemoteFlowPluginPackage.loadPlugin()()
{
  _QWORD *v0;

  v0 = RemoteFlowPluginPackage.loadRemoteConversationHandler()();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, 255, (uint64_t (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler, (uint64_t)&protocol conformance descriptor for RemoteFlowPluginBundleConversationHandler);
  return v0;
}

uint64_t RemoteFlowPluginPackage.exposedCapabilities()()
{
  return swift_bridgeObjectRetain();
}

uint64_t RemoteFlowPluginPackage.get(capability:)@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  v2 = RemoteFlowPluginPackage.loadRemoteConversationHandler()();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, 255, (uint64_t (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler, (uint64_t)&protocol conformance descriptor for RemoteFlowPluginBundleConversationHandler);
  result = swift_getObjectType();
  a1[3] = result;
  *a1 = v2;
  return result;
}

uint64_t RemoteFlowPluginPackage.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0x3A656C646E7562;
}

unint64_t RemoteFlowPluginPackage.affinityScore(for:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_signpost_type_t v23;
  os_signpost_id_t v24;
  char v25;
  os_signpost_type_t v26;
  os_signpost_id_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  os_log_type_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v2 = v1;
  v64 = a1;
  v3 = type metadata accessor for Input();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v57 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v54 - v7;
  v9 = type metadata accessor for OSSignpostID();
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OSSignposter();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v56 = v8;
  v61 = v4;
  v62 = v3;
  v16 = __swift_project_value_buffer(v12, (uint64_t)static Signposter.executor);
  v58 = v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  if (one-time initialization token for executor != -1)
    swift_once();
  v17 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  swift_retain();
  v18 = (uint8_t *)swift_slowAlloc();
  v19 = swift_slowAlloc();
  v66 = v19;
  *(_DWORD *)v18 = 136315138;
  v21 = v2[2];
  v20 = v2[3];
  swift_bridgeObjectRetain();
  v54 = v21;
  v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, &v66);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  v55 = v20;
  swift_bridgeObjectRelease();
  v22 = OSSignposter.logHandle.getter();
  v23 = static os_signpost_type_t.begin.getter();
  v24 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v22, v23, v24, "RunAffinityScorer", "AffinityScorer=%s", v18, 0xCu);
  __swift_project_boxed_opaque_existential_1(v2 + 8, v2[11]);
  v63 = AffinityScorer.score(for:)();
  LODWORD(v21) = v25 & 1;
  v26 = static os_signpost_type_t.end.getter();
  v27 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v22, v26, v27, "RunAffinityScorer", "AffinityScorer=%s", v18, 0xCu);

  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v19, -1, -1);
  MEMORY[0x1B5E44758](v18, -1, -1);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v11, v60);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v15, v12);
  v28 = v21;
  if ((v21 & 1) != 0)
  {
    v30 = v61;
    v29 = v62;
    if (one-time initialization token for executor != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.executor);
    v32 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v57, v64, v29);
    swift_retain();
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v33, v34))
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v29);
      goto LABEL_17;
    }
    v35 = swift_slowAlloc();
    v36 = swift_slowAlloc();
    v66 = v36;
    *(_DWORD *)v35 = 136315394;
    v37 = v55;
    swift_bridgeObjectRetain();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v37, &v66);
    LODWORD(v64) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
    v38 = v57;
    v39 = dispatch thunk of CustomStringConvertible.description.getter();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v38, v29);
    _os_log_impl(&dword_1B4BE6000, v33, v34, "[%s] Missing affinity for input %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    v41 = v36;
  }
  else
  {
    v43 = v61;
    v42 = v62;
    if (one-time initialization token for executor != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
    v45 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v56, v64, v42);
    swift_retain();
    v33 = Logger.logObject.getter();
    v46 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v33, v46))
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
      goto LABEL_17;
    }
    v35 = swift_slowAlloc();
    v64 = swift_slowAlloc();
    v66 = v64;
    *(_DWORD *)v35 = 136315650;
    v47 = v55;
    swift_bridgeObjectRetain();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v47, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2080;
    LOBYTE(v65) = specialized Affinity.init(rawValue:)(v63);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Affinity?);
    v48 = String.init<A>(describing:)();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 22) = 2080;
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
    v50 = dispatch thunk of CustomStringConvertible.description.getter();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v45, v42);
    _os_log_impl(&dword_1B4BE6000, v33, v46, "[%s] Affinity: %s for input %s", (uint8_t *)v35, 0x20u);
    v52 = v64;
    swift_arrayDestroy();
    v41 = v52;
  }
  MEMORY[0x1B5E44758](v41, -1, -1);
  MEMORY[0x1B5E44758](v35, -1, -1);
LABEL_17:

  return v63;
}

uint64_t RemoteFlowPluginPackage.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return v0;
}

uint64_t RemoteFlowPluginPackage.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PluginPackage.configData.getter in conformance RemoteFlowPluginPackage()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for PluginCapabilityExposing.advertisedCapabilities() in conformance RemoteFlowPluginPackage()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for PluginCapabilityExposing.get(capability:) in conformance RemoteFlowPluginPackage@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  v2 = RemoteFlowPluginPackage.loadRemoteConversationHandler()();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, 255, (uint64_t (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler, (uint64_t)&protocol conformance descriptor for RemoteFlowPluginBundleConversationHandler);
  result = swift_getObjectType();
  a1[3] = result;
  *a1 = v2;
  return result;
}

uint64_t FlowPluginPackageFinder.wrapped.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 16, a1);
}

uint64_t FlowPluginPackageFinder.sharedFlowPluginServiceClient.getter()
{
  return swift_retain();
}

uint64_t FlowPluginPackageFinder.init(wrapping:sharedFlowPluginServiceClient:)(__int128 *a1, uint64_t a2)
{
  uint64_t v2;

  outlined init with take of ReferenceResolutionClientProtocol(a1, v2 + 16);
  *(_QWORD *)(v2 + 56) = a2;
  return v2;
}

_QWORD *FlowPluginPackageFinder.findAllPackages()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  v2 = dispatch thunk of PluginFinder.findAllPackages()();
  swift_retain();
  v3 = specialized Sequence.compactMap<A>(_:)(v2, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return v3;
}

uint64_t FlowPluginPackageFinder.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return v0;
}

uint64_t FlowPluginPackageFinder.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return swift_deallocClassInstance();
}

_QWORD *protocol witness for PluginFinder.findAllPackages() in conformance FlowPluginPackageFinder()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *v0;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*v0 + 16), *(_QWORD *)(*v0 + 40));
  v2 = dispatch thunk of PluginFinder.findAllPackages()();
  swift_retain();
  v3 = specialized Sequence.compactMap<A>(_:)(v2, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return v3;
}

uint64_t specialized RemoteFlowPluginPackage.__allocating_init(bundle:sharedFlowPluginServiceClient:)(void *a1, uint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v16[2];
  uint64_t v17;

  v4 = objc_msgSend(a1, sel_infoDictionary);
  if (v4)
  {
    v5 = v4;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  }
  v6 = static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
  swift_bridgeObjectRelease();
  v7 = NSBundle.packageId.getter();
  v9 = v8;
  v10 = objc_msgSend(a1, sel_bundlePath);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;

  type metadata accessor for RemoteFlowPluginPackage();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  v14 = swift_allocObject();
  RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(v7, v9, v11, v13, v6, a2, (uint64_t)v16);
  return v14;
}

uint64_t associated type witness table accessor for PluginCapabilityExposing.PluginCapability : Decodable in RemoteFlowPluginPackage()
{
  return lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B648], MEMORY[0x1E0D9B670]);
}

uint64_t associated type witness table accessor for PluginCapabilityExposing.PluginCapability : Encodable in RemoteFlowPluginPackage()
{
  return lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B648], MEMORY[0x1E0D9B658]);
}

uint64_t associated type witness table accessor for PluginCapabilityExposing.PluginCapability : Hashable in RemoteFlowPluginPackage()
{
  return lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B648], MEMORY[0x1E0D9B660]);
}

uint64_t method lookup function for RemoteFlowPluginPackage()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RemoteFlowPluginPackage.__allocating_init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t type metadata accessor for FlowPluginPackageFinder()
{
  return objc_opt_self();
}

uint64_t method lookup function for FlowPluginPackageFinder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FlowPluginPackageFinder.__allocating_init(wrapping:sharedFlowPluginServiceClient:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

unint64_t type metadata accessor for NSBundle()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSBundle;
  if (!lazy cache variable for type metadata for NSBundle)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
  }
  return result;
}

unint64_t RepeatRecentDialogIntent.debugDescription.getter()
{
  return 0xD00000000000002ALL;
}

BOOL static RepeatRecentDialogIntent.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void RepeatRecentDialogIntent.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int RepeatRecentDialogIntent.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

unint64_t specialized static RepeatRecentDialogIntent.fromParse(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  char *v38;
  unint64_t result;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[4];
  __int128 v72;
  uint64_t v73;
  _OWORD v74[3];

  v69 = a1;
  v59 = type metadata accessor for UsoEntity_common_Interjection.DefinedValues();
  v62 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v58 = (char *)&v56 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Interjection.DefinedValues?, UsoEntity_common_Interjection.DefinedValues?));
  MEMORY[0x1E0C80A78](v60);
  v63 = (uint64_t)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v65 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v61 = (uint64_t)&v56 - v7;
  MEMORY[0x1E0C80A78](v6);
  v64 = (uint64_t)&v56 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v13 = *(_QWORD *)(v12 - 8);
  v67 = v12;
  v68 = v13;
  MEMORY[0x1E0C80A78](v12);
  v66 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Siri_Nlu_External_UserParse();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Parse();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for USOParse();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v69, v19);
  if ((*(unsigned int (**)(char *, uint64_t))(v20 + 88))(v22, v19) != *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    return 3;
  }
  (*(void (**)(char *, uint64_t))(v20 + 96))(v22, v19);
  v27 = v24;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v22, v23);
  v28 = USOParse.userParse.getter();
  v29 = MEMORY[0x1B5E3FA6C](v28);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v30 = v23;
  v31 = v26;
  if (*(_QWORD *)(v29 + 16))
  {
    v32 = v67;
    v33 = v68;
    (*(void (**)(char *, unint64_t, uint64_t))(v68 + 16))(v11, v29 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80)), v67);
    v34 = 0;
    v35 = (uint64_t)v65;
    v36 = v66;
  }
  else
  {
    v34 = 1;
    v36 = v66;
    v32 = v67;
    v35 = (uint64_t)v65;
    v33 = v68;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v11, v34, 1, v32);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v11, 1, v32) == 1)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v30);
    v37 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
    v38 = v11;
LABEL_8:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v38, v37);
    return 3;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v36, v11, v32);
  if ((Siri_Nlu_External_UserDialogAct.hasWantedToRepeat.getter() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v32);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v30);
    return 0;
  }
  result = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  v40 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v55 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    v41 = v27;
    if (!v55)
    {
LABEL_17:
      swift_bridgeObjectRelease();
      static UsoTask_CodegenConverter.convert(task:)();
      swift_release();
      if (!v73)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v32);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v30);
        v37 = (uint64_t *)&demangling cache variable for type metadata for Any?;
        v38 = (char *)&v72;
        goto LABEL_8;
      }
      outlined init with take of Any(&v72, v74);
      outlined init with copy of Any((uint64_t)v74, (uint64_t)&v72);
      type metadata accessor for UsoTask_repeat_uso_NoEntity();
      if (swift_dynamicCast())
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v32);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v30);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
        return 0;
      }
      type metadata accessor for UsoTask_skipBackward_uso_NoEntity();
      if (swift_dynamicCast())
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v32);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v30);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
        return 1;
      }
      type metadata accessor for UsoTask_noVerb_common_Interjection();
      if (swift_dynamicCast()
        && (swift_release(),
            outlined init with copy of Any((uint64_t)v74, (uint64_t)v71),
            swift_dynamicCast()))
      {
        v42 = v70;
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        v69 = v42;
        v43 = swift_release();
        v57 = v31;
        if (v71[0])
        {
          MEMORY[0x1B5E404C8](v43);
          swift_release();
          v44 = v59;
          v45 = v63;
          v46 = v62;
        }
        else
        {
          v46 = v62;
          v44 = v59;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v64, 1, 1, v59);
          v45 = v63;
        }
        v47 = v61;
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v46 + 104))(v61, *MEMORY[0x1E0DA1980], v44);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v47, 0, 1, v44);
        v48 = v45 + *(int *)(v60 + 48);
        outlined init with copy of UsoEntity_common_Interjection.DefinedValues?(v64, v45);
        v67 = v48;
        outlined init with copy of UsoEntity_common_Interjection.DefinedValues?(v47, v48);
        v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
        if (v49(v45, 1, v44) == 1)
        {
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v47, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v64, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
          (*(void (**)(char *, uint64_t))(v68 + 8))(v36, v32);
          (*(void (**)(char *, uint64_t))(v27 + 8))(v57, v30);
          if (v49(v67, 1, v44) == 1)
          {
            outlined destroy of ReferenceResolutionClientProtocol?(v63, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
LABEL_37:
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
            return 2;
          }
          goto LABEL_35;
        }
        outlined init with copy of UsoEntity_common_Interjection.DefinedValues?(v45, v35);
        v50 = v67;
        if (v49(v67, 1, v44) == 1)
        {
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v64, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
          (*(void (**)(char *, uint64_t))(v68 + 8))(v36, v32);
          (*(void (**)(char *, uint64_t))(v27 + 8))(v57, v30);
          (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v35, v44);
LABEL_35:
          outlined destroy of ReferenceResolutionClientProtocol?(v63, &demangling cache variable for type metadata for (UsoEntity_common_Interjection.DefinedValues?, UsoEntity_common_Interjection.DefinedValues?));
          goto LABEL_28;
        }
        v51 = v35;
        v52 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v58, v50, v44);
        lazy protocol witness table accessor for type UsoEntity_common_Interjection.DefinedValues and conformance UsoEntity_common_Interjection.DefinedValues();
        v53 = v51;
        LODWORD(v67) = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        v54 = *(void (**)(char *, uint64_t))(v62 + 8);
        v54(v52, v44);
        outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?(v64, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v36, v32);
        (*(void (**)(char *, uint64_t))(v27 + 8))(v57, v30);
        v54((char *)v53, v44);
        outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
        if ((v67 & 1) != 0)
          goto LABEL_37;
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v36, v32);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v30);
      }
LABEL_28:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v72);
      return 3;
    }
  }
  else
  {
    v41 = v27;
    if (!*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_17;
  }
  if ((v40 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v40);
    goto LABEL_17;
  }
  if (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type RepeatRecentDialogIntent and conformance RepeatRecentDialogIntent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RepeatRecentDialogIntent and conformance RepeatRecentDialogIntent;
  if (!lazy protocol witness table cache variable for type RepeatRecentDialogIntent and conformance RepeatRecentDialogIntent)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for RepeatRecentDialogIntent, &type metadata for RepeatRecentDialogIntent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepeatRecentDialogIntent and conformance RepeatRecentDialogIntent);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RepeatRecentDialogIntent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B4E61208 + 4 * byte_1B4EEDD25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B4E6123C + 4 * byte_1B4EEDD20[v4]))();
}

uint64_t sub_1B4E6123C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E61244(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4E6124CLL);
  return result;
}

uint64_t sub_1B4E61258(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4E61260);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B4E61264(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E6126C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RepeatRecentDialogIntent()
{
  return &type metadata for RepeatRecentDialogIntent;
}

uint64_t outlined init with copy of UsoEntity_common_Interjection.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Interjection.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_Interjection.DefinedValues and conformance UsoEntity_common_Interjection.DefinedValues()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UsoEntity_common_Interjection.DefinedValues and conformance UsoEntity_common_Interjection.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_Interjection.DefinedValues and conformance UsoEntity_common_Interjection.DefinedValues)
  {
    v1 = type metadata accessor for UsoEntity_common_Interjection.DefinedValues();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DA19A0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_Interjection.DefinedValues and conformance UsoEntity_common_Interjection.DefinedValues);
  }
  return result;
}

uint64_t RequestContextData.__allocating_init(startRequest:assistantId:didPreviouslyFallbackToServer:isRecognizeMyVoiceEnabled:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized RequestContextData.__allocating_init(startRequest:assistantId:didPreviouslyFallbackToServer:isRecognizeMyVoiceEnabled:)(a1, a3, a4, a5, a6, v6, ObjectType, a2);
}

uint64_t static RequestContextData.builder.getter()
{
  uint64_t v0;

  type metadata accessor for RequestContextData.Builder(0);
  v0 = swift_allocObject();
  RequestContextData.Builder.init()();
  return v0;
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t static RequestContextData.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static RequestContextData.supportsSecureCoding;
}

uint64_t static RequestContextData.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static RequestContextData.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static RequestContextData.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t RequestContextData.inputOrigin.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestContextData.audioSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioSource, a1, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
}

uint64_t RequestContextData.audioDestination.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioDestination, a1, &demangling cache variable for type metadata for AudioDestination?);
}

uint64_t RequestContextData.responseMode.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_responseMode, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA7DE8], a1);
}

uint64_t RequestContextData.isEyesFree.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isEyesFree);
}

{
  return MEMORY[0x1E0D9EBF8]();
}

uint64_t RequestContextData.isDirectAction.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDirectAction);
}

uint64_t RequestContextData.isVoiceTriggerEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isVoiceTriggerEnabled);
}

{
  return MEMORY[0x1E0D9EC58]();
}

uint64_t RequestContextData.isTextToSpeechEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled);
}

{
  return MEMORY[0x1E0D9EC48]();
}

void *RequestContextData.peerInfo.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
  v2 = v1;
  return v1;
}

void *RequestContextData.endpointInfo.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo);
  v2 = v1;
  return v1;
}

void *RequestContextData.instanceInfo.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_instanceInfo);
  v2 = v1;
  return v1;
}

uint64_t RequestContextData.bargeInModes.getter()
{
  return swift_bridgeObjectRetain();
}

{
  return MEMORY[0x1E0D9EC10]();
}

uint64_t RequestContextData.approximatePreviousTTSInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_approximatePreviousTTSInterval, a1, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
}

uint64_t RequestContextData.restrictions.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_restrictions, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA7E38], a1);
}

void *RequestContextData.originatingHome.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_originatingHome);
  v2 = v1;
  return v1;
}

uint64_t RequestContextData.currentDeviceAssistantId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestContextData.isTriggerlessFollowup.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup);
}

{
  return MEMORY[0x1E0D9EC50]();
}

uint64_t RequestContextData.didPreviouslyFallbackToServer.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_didPreviouslyFallbackToServer);
}

uint64_t RequestContextData.isSpeechRequest.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSpeechRequest);
}

uint64_t RequestContextData.isUserOnActivePhoneCall.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isUserOnActivePhoneCall);
}

uint64_t RequestContextData.voiceTriggerEventInfo.getter()
{
  return swift_bridgeObjectRetain();
}

{
  return MEMORY[0x1E0D9EC60]();
}

uint64_t RequestContextData.isRecognizeMyVoiceEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled);
}

uint64_t RequestContextData.voiceAudioSessionId.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId);
}

{
  return MEMORY[0x1E0D9EC40]();
}

uint64_t RequestContextData.isSystemApertureEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled);
}

{
  return MEMORY[0x1E0D9EC68]();
}

uint64_t RequestContextData.isLiveActivitiesSupported.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported);
}

{
  return MEMORY[0x1E0D9EC78]();
}

uint64_t RequestContextData.isInAmbient.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient);
}

{
  return MEMORY[0x1E0D9EC08]();
}

uint64_t RequestContextData.positionInSession.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession, (uint64_t (*)(_QWORD))MEMORY[0x1E0D98440], a1);
}

void *RequestContextData.conjunctionInfo.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo);
  v2 = v1;
  return v1;
}

uint64_t RequestContextData.isDeviceShowingLockScreen.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceShowingLockScreen);
}

{
  return MEMORY[0x1E0D9EC70]();
}

uint64_t RequestContextData.isDeviceLocked.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceLocked);
}

{
  return MEMORY[0x1E0D9EC20]();
}

id RequestContextData.__allocating_init(inputOrigin:audioSource:audioDestination:responseMode:isEyesFree:isDirectAction:isVoiceTriggerEnabled:isTextToSpeechEnabled:peerInfo:endpointInfo:instanceInfo:bargeInModes:approximatePreviousTTSInterval:restrictions:originatingHome:currentDeviceAssistantId:isTriggerlessFollowup:didPreviouslyFallbackToServer:isSpeechRequest:isUserOnActivePhoneCall:voiceTriggerEventInfo:isRecognizeMyVoiceEnabled:voiceAudioSessionId:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:positionInSession:conjunctionInfo:isDeviceShowingLockScreen:isDeviceLocked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, char a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, uint64_t a14, char a15, char a16, char a17, char a18, uint64_t a19, char a20,int a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,char a28)
{
  objc_class *v28;
  id v29;

  v29 = objc_allocWithZone(v28);
  return RequestContextData.init(inputOrigin:audioSource:audioDestination:responseMode:isEyesFree:isDirectAction:isVoiceTriggerEnabled:isTextToSpeechEnabled:peerInfo:endpointInfo:instanceInfo:bargeInModes:approximatePreviousTTSInterval:restrictions:originatingHome:currentDeviceAssistantId:isTriggerlessFollowup:didPreviouslyFallbackToServer:isSpeechRequest:isUserOnActivePhoneCall:voiceTriggerEventInfo:isRecognizeMyVoiceEnabled:voiceAudioSessionId:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:positionInSession:conjunctionInfo:isDeviceShowingLockScreen:isDeviceLocked:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, *((uint64_t *)&a10 + 1), a11, *((uint64_t *)&a11 + 1), a12, *((uint64_t *)&a12 + 1), a13, *((uint64_t *)&a13 + 1), a14, a15,
           a16,
           a17,
           a18,
           a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28);
}

id RequestContextData.init(inputOrigin:audioSource:audioDestination:responseMode:isEyesFree:isDirectAction:isVoiceTriggerEnabled:isTextToSpeechEnabled:peerInfo:endpointInfo:instanceInfo:bargeInModes:approximatePreviousTTSInterval:restrictions:originatingHome:currentDeviceAssistantId:isTriggerlessFollowup:didPreviouslyFallbackToServer:isSpeechRequest:isUserOnActivePhoneCall:voiceTriggerEventInfo:isRecognizeMyVoiceEnabled:voiceAudioSessionId:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:positionInSession:conjunctionInfo:isDeviceShowingLockScreen:isDeviceLocked:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, char a20,char a21,char a22,uint64_t a23,char a24,int a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31,char a32)
{
  _BYTE *v32;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v51;
  objc_super v54;

  v35 = &v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin];
  *v35 = a1;
  v35[1] = a2;
  outlined init with copy of ReferenceResolutionClientProtocol?(a3, (uint64_t)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioSource], (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  outlined init with copy of ReferenceResolutionClientProtocol?(a4, (uint64_t)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioDestination], &demangling cache variable for type metadata for AudioDestination?);
  v36 = &v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_responseMode];
  v37 = type metadata accessor for ResponseMode();
  v51 = *(_QWORD *)(v37 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v36, a5, v37);
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isEyesFree] = a6;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDirectAction] = a7;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isVoiceTriggerEnabled] = a8;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled] = a9;
  *(_QWORD *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo] = a10;
  *(_QWORD *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo] = a11;
  *(_QWORD *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_instanceInfo] = a12;
  *(_QWORD *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_bargeInModes] = a13;
  outlined init with copy of ReferenceResolutionClientProtocol?(a14, (uint64_t)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_approximatePreviousTTSInterval], (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  v38 = &v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_restrictions];
  v39 = type metadata accessor for Restrictions();
  v40 = *(_QWORD *)(v39 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v38, a15, v39);
  *(_QWORD *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_originatingHome] = a16;
  v41 = &v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId];
  *v41 = a17;
  v41[1] = a18;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup] = a19;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_didPreviouslyFallbackToServer] = a20;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSpeechRequest] = a21;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isUserOnActivePhoneCall] = a22;
  *(_QWORD *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceTriggerEventInfo] = a23;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled] = a24;
  *(_DWORD *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId] = a25;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled] = a26;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported] = a27;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient] = a28;
  v42 = &v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession];
  v43 = type metadata accessor for RequestPositionInSession();
  v44 = *(_QWORD *)(v43 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v42, a29, v43);
  *(_QWORD *)&v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo] = a30;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceShowingLockScreen] = a31;
  v32[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceLocked] = a32;
  v54.receiver = v32;
  v54.super_class = (Class)type metadata accessor for RequestContextData(0);
  v45 = objc_msgSendSuper2(&v54, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(a29, v43);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(a15, v39);
  outlined destroy of ReferenceResolutionClientProtocol?(a14, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(a5, v37);
  outlined destroy of ReferenceResolutionClientProtocol?(a4, &demangling cache variable for type metadata for AudioDestination?);
  outlined destroy of ReferenceResolutionClientProtocol?(a3, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  return v45;
}

uint64_t RequestContextData.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return RequestContextData.init(coder:)(a1);
}

uint64_t RequestContextData.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  unsigned __int8 v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unsigned int v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  unsigned int v70;
  void *v71;
  unsigned int v72;
  void *v73;
  unsigned int v74;
  void *v75;
  unsigned int v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  id v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  void (*v96)(char *, uint64_t);
  void *v97;
  void *v98;
  unsigned __int8 v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  void *v103;
  char *v104;
  uint64_t v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  NSObject *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  os_log_type_t v119;
  uint8_t *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  void *v128;
  void *v129;
  unsigned int v130;
  void *v131;
  unint64_t v132;
  void *v133;
  unsigned int v134;
  void *v135;
  unsigned int v136;
  uint64_t v137;
  NSObject *v138;
  os_log_type_t v139;
  uint8_t *v140;
  void *v141;
  unsigned int v142;
  void *v143;
  uint64_t v144;
  NSObject *v145;
  os_log_type_t v146;
  uint8_t *v147;
  void *v148;
  unsigned int v149;
  void *v150;
  unsigned int v151;
  uint64_t v152;
  NSObject *v153;
  os_log_type_t v154;
  uint8_t *v155;
  void (**v156)(_QWORD, _QWORD, _QWORD);
  void *v157;
  uint64_t v158;
  uint64_t v159;
  void (**v160)(_QWORD, _QWORD, _QWORD);
  uint64_t v161;
  void *v162;
  uint64_t ObjectType;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  void (*v168)(char *, char *, uint64_t);
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t result;
  int v173;
  uint64_t v174;
  int v175;
  __int16 v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  char *v203;
  void (**v204)(_QWORD, _QWORD, _QWORD);
  id v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  _BYTE v221[4];
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  uint64_t v226;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  MEMORY[0x1E0C80A78](v3);
  v201 = (char *)&v177 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RequestPositionInSession();
  v204 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v203 = (char *)&v177 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v177 - v8;
  v196 = (_QWORD *)type metadata accessor for DeviceRestrictions();
  v195 = *(v196 - 1);
  v10 = MEMORY[0x1E0C80A78](v196);
  v194 = (char *)&v177 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v193 = (char *)&v177 - v12;
  v13 = type metadata accessor for Restrictions();
  v210 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v202 = (char *)&v177 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v217 = (char *)&v177 - v16;
  v220 = type metadata accessor for NSFastEnumerationIterator();
  v197 = *(_QWORD *)(v220 - 8);
  v17 = MEMORY[0x1E0C80A78](v220);
  v219 = (char *)&v177 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v177 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  v22 = MEMORY[0x1E0C80A78](v21);
  v200 = (uint64_t)&v177 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v177 - v25;
  MEMORY[0x1E0C80A78](v24);
  v216 = (uint64_t)&v177 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v177 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for ResponseMode();
  v214 = *(_QWORD *)(v31 - 8);
  v215 = v31;
  v32 = MEMORY[0x1E0C80A78](v31);
  v199 = (char *)&v177 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v213 = (char *)&v177 - v34;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  v36 = MEMORY[0x1E0C80A78](v35);
  v198 = (uint64_t)&v177 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36);
  v212 = (uint64_t)&v177 - v38;
  v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  v40 = MEMORY[0x1E0C80A78](v39);
  v209 = (uint64_t)&v177 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40);
  v211 = (uint64_t)&v177 - v42;
  v43 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  v44 = v1;
  v218 = v43;
  v45 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v45)
  {

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  v46 = (void *)v45;
  v205 = v44;
  v208 = v5;
  v192 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v191 = v47;

  v48 = (void *)MEMORY[0x1B5E432E8](0x756F536F69647561, 0xEB00000000656372);
  v49 = objc_msgSend(a1, sel_containsValueForKey_, v48);

  v207 = v9;
  v206 = v13;
  if ((v49 & 1) != 0)
  {
    v50 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v50)
    {
      v51 = (void *)v50;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    AudioSource.init(aceValue:)();
  }
  else
  {
    v53 = type metadata accessor for AudioSource();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v211, 1, 1, v53);
  }
  v54 = (void *)MEMORY[0x1B5E432E8](0xD000000000000010, 0x80000001B4EFFF20);
  v55 = objc_msgSend(a1, sel_containsValueForKey_, v54);

  if (v55)
  {
    v56 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v56)
    {
      v57 = (void *)v56;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    AudioDestination.init(aceValue:)();
  }
  else
  {
    v58 = type metadata accessor for AudioDestination();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v212, 1, 1, v58);
  }
  v59 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v59)
  {
    v60 = (void *)v59;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  ResponseMode.init(aceValue:)();
  v62 = v214;
  v61 = v215;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v214 + 48))(v30, 1, v215) == 1)
  {
    static ResponseMode.displayForward.getter();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v213, v30, v61);
  }
  v63 = (void *)MEMORY[0x1B5E432E8](0x7246736579457369, 0xEA00000000006565);
  v190 = objc_msgSend(a1, sel_decodeBoolForKey_, v63);

  v64 = (void *)MEMORY[0x1B5E432E8](0x7463657269447369, 0xEE006E6F69746341);
  v189 = objc_msgSend(a1, sel_decodeBoolForKey_, v64);

  v65 = (void *)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4EF5160);
  v188 = objc_msgSend(a1, sel_decodeBoolForKey_, v65);

  v66 = (void *)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4EF5180);
  v187 = objc_msgSend(a1, sel_decodeBoolForKey_, v66);

  v67 = (void *)MEMORY[0x1B5E432E8](0xD000000000000019, 0x80000001B4EFFF40);
  v186 = objc_msgSend(a1, sel_decodeBoolForKey_, v67);

  v68 = (void *)MEMORY[0x1B5E432E8](0x6563697665447369, 0xEE0064656B636F4CLL);
  v185 = objc_msgSend(a1, sel_decodeBoolForKey_, v68);

  v69 = (void *)MEMORY[0x1B5E432E8](0x6F666E4972656570, 0xE800000000000000);
  v70 = objc_msgSend(a1, sel_containsValueForKey_, v69);

  if (v70)
  {
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFPeerInfo);
    v184 = NSCoder.decodeObject<A>(of:forKey:)();
  }
  else
  {
    v184 = 0;
  }
  v71 = (void *)MEMORY[0x1B5E432E8](0x746E696F70646E65, 0xEC0000006F666E49);
  v72 = objc_msgSend(a1, sel_containsValueForKey_, v71);

  if (v72)
  {
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFEndpointInfo);
    v183 = NSCoder.decodeObject<A>(of:forKey:)();
  }
  else
  {
    v183 = 0;
  }
  v73 = (void *)MEMORY[0x1B5E432E8](0x65636E6174736E69, 0xEC0000006F666E49);
  v74 = objc_msgSend(a1, sel_containsValueForKey_, v73);

  if (v74)
  {
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFInstanceInfo);
    v182 = NSCoder.decodeObject<A>(of:forKey:)();
  }
  else
  {
    v182 = 0;
  }
  v75 = (void *)MEMORY[0x1B5E432E8](0xD00000000000001ELL, 0x80000001B4EFFF60);
  v76 = objc_msgSend(a1, sel_containsValueForKey_, v75);

  if (v76)
  {
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSDateInterval);
    v77 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v77)
    {
      v78 = (void *)v77;
      static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

      v79 = type metadata accessor for DateInterval();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v26, 0, 1, v79);
    }
    else
    {
      v81 = type metadata accessor for DateInterval();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v26, 1, 1, v81);
    }
    outlined init with take of DateInterval?((uint64_t)v26, v216);
  }
  else
  {
    v80 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v216, 1, 1, v80);
  }
  v82 = (void *)MEMORY[0x1B5E432E8](0x74616E696769726FLL, 0xEF656D6F48676E69);
  v83 = objc_msgSend(a1, sel_containsValueForKey_, v82);

  if (v83)
  {
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFHomeInfo);
    v181 = NSCoder.decodeObject<A>(of:forKey:)();
  }
  else
  {
    v181 = 0;
  }
  v178 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  v84 = swift_allocObject();
  v177 = xmmword_1B4EE3BA0;
  *(_OWORD *)(v84 + 16) = xmmword_1B4EE3BA0;
  v85 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSArray);
  v86 = v218;
  *(_QWORD *)(v84 + 32) = v85;
  *(_QWORD *)(v84 + 40) = v86;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (v226)
  {
    if (swift_dynamicCast())
    {
      v87 = (void *)v224;
      goto LABEL_41;
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v225, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v87 = (void *)MEMORY[0x1B5E43918](MEMORY[0x1E0DEE9D8]);
LABEL_41:
  v179 = v85;
  v88 = a1;
  v89 = v87;
  NSArray.makeIterator()();
  v180 = v89;

  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFB58], MEMORY[0x1E0CAFB80]);
  dispatch thunk of IteratorProtocol.next()();
  if (v226)
  {
    v90 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      outlined init with take of Any(&v225, &v224);
      outlined init with copy of Any((uint64_t)&v224, (uint64_t)v221);
      if ((swift_dynamicCast() & 1) == 0)
      {
        v222 = 0;
        v223 = 0;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v224);
      v92 = v223;
      if (v223)
      {
        v93 = v222;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v90[2] + 1, 1, v90);
        v95 = v90[2];
        v94 = v90[3];
        if (v95 >= v94 >> 1)
          v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v94 > 1), v95 + 1, 1, v90);
        v90[2] = v95 + 1;
        v91 = &v90[2 * v95];
        v91[4] = v93;
        v91[5] = v92;
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v226);
  }
  else
  {
    v90 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v96 = *(void (**)(char *, uint64_t))(v197 + 8);
  v96(v20, v220);

  v97 = (void *)MEMORY[0x1B5E432E8](0x7463697274736572, 0xEC000000736E6F69);
  v98 = v88;
  v99 = objc_msgSend(v88, sel_containsValueForKey_, v97);

  if ((v99 & 1) == 0)
  {
    v103 = (void *)MEMORY[0x1B5E432E8](0xD000000000000012, 0x80000001B4EFFF80);
    objc_msgSend(v88, sel_decodeIntegerForKey_, v103);

    v104 = v193;
    DeviceRestrictions.init(rawValue:)();
    v105 = v195;
    v106 = v196;
    (*(void (**)(char *, char *, _QWORD *))(v195 + 16))(v194, v104, v196);
    Restrictions.init(deviceRestrictions:)();
    (*(void (**)(char *, _QWORD *))(v105 + 8))(v104, v106);
    goto LABEL_72;
  }
  v100 = swift_allocObject();
  *(_OWORD *)(v100 + 16) = v177;
  v101 = v218;
  *(_QWORD *)(v100 + 32) = v179;
  *(_QWORD *)(v100 + 40) = v101;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!v226)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v225, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_59;
  }
  if (!swift_dynamicCast())
  {
LABEL_59:
    v102 = (void *)MEMORY[0x1B5E43918](MEMORY[0x1E0DEE9D8]);
    goto LABEL_60;
  }
  v102 = (void *)v224;
LABEL_60:
  v197 = (unint64_t)v96;
  v107 = v102;
  NSArray.makeIterator()();
  v196 = v107;

  dispatch thunk of IteratorProtocol.next()();
  if (v226)
  {
    v108 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      outlined init with take of Any(&v225, &v224);
      outlined init with copy of Any((uint64_t)&v224, (uint64_t)v221);
      if ((swift_dynamicCast() & 1) == 0)
      {
        v222 = 0;
        v223 = 0;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v224);
      v110 = v223;
      if (v223)
      {
        v111 = v222;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v108[2] + 1, 1, v108);
        v113 = v108[2];
        v112 = v108[3];
        if (v113 >= v112 >> 1)
          v108 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v112 > 1), v113 + 1, 1, v108);
        v108[2] = v113 + 1;
        v109 = &v108[2 * v113];
        v109[4] = v111;
        v109[5] = v110;
      }
      dispatch thunk of IteratorProtocol.next()();
      v98 = v88;
    }
    while (v226);
  }
  ((void (*)(char *, uint64_t))v197)(v219, v220);

  Restrictions.init(aceValue:)();
LABEL_72:
  v114 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v114)
  {
    v115 = v114;
    v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v197 = v117;
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v118 = type metadata accessor for Logger();
    __swift_project_value_buffer(v118, (uint64_t)static Logger.executor);
    v115 = Logger.logObject.getter();
    v119 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v115, v119))
    {
      v120 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v120 = 0;
      _os_log_impl(&dword_1B4BE6000, v115, v119, "Could not decode currentDeviceAssistantId, setting to empty string", v120, 2u);
      MEMORY[0x1B5E44758](v120, -1, -1);
    }
    v116 = 0;
    v197 = 0xE000000000000000;
  }

  v121 = (void *)MEMORY[0x1B5E432E8](0xD00000000000001DLL, 0x80000001B4EFBD90);
  LODWORD(v196) = objc_msgSend(v98, sel_decodeBoolForKey_, v121);

  v122 = (void *)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4EF7130);
  LODWORD(v195) = objc_msgSend(v98, sel_decodeBoolForKey_, v122);

  v123 = (void *)MEMORY[0x1B5E432E8](0x6863656570537369, 0xEF74736575716552);
  LODWORD(v194) = objc_msgSend(v98, sel_decodeBoolForKey_, v123);

  v124 = (void *)MEMORY[0x1B5E432E8](0xD000000000000017, 0x80000001B4EFD8A0);
  LODWORD(v193) = objc_msgSend(v98, sel_decodeBoolForKey_, v124);

  v125 = NSCoder.decodeDictionary<A, B>(withKeyClass:objectClass:forKey:)();
  if (v125)
  {
    *(_QWORD *)&v225 = v125;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [NSString : NSString]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : String]);
    v126 = swift_dynamicCast();
    v127 = v224;
    if (!v126)
      v127 = 0;
    v218 = v127;
  }
  else
  {
    v218 = 0;
  }
  v128 = (void *)MEMORY[0x1B5E432E8](0xD000000000000019, 0x80000001B4EFFFE0);
  LODWORD(v180) = objc_msgSend(v98, sel_decodeBoolForKey_, v128);

  v129 = (void *)MEMORY[0x1B5E432E8](0xD000000000000013, 0x80000001B4F00000);
  v130 = objc_msgSend(v98, sel_containsValueForKey_, v129);

  v219 = (char *)v116;
  if (!v130)
  {
    v179 = 0;
    goto LABEL_89;
  }
  v131 = (void *)MEMORY[0x1B5E432E8](0xD000000000000013, 0x80000001B4F00000);
  v132 = (unint64_t)objc_msgSend(v98, sel_decodeInt64ForKey_, v131);

  if ((v132 & 0x8000000000000000) == 0 && !HIDWORD(v132))
  {
    v179 = v132;
LABEL_89:
    v133 = (void *)MEMORY[0x1B5E432E8](0xD000000000000017, 0x80000001B4F00020);
    v134 = objc_msgSend(v98, sel_containsValueForKey_, v133);

    if (v134)
    {
      v135 = (void *)MEMORY[0x1B5E432E8](0xD000000000000017, 0x80000001B4F00020);
      v136 = objc_msgSend(v98, sel_decodeBoolForKey_, v135);

      if (one-time initialization token for executor != -1)
        swift_once();
      v137 = type metadata accessor for Logger();
      __swift_project_value_buffer(v137, (uint64_t)static Logger.executor);
      v138 = Logger.logObject.getter();
      v139 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v138, v139))
      {
        v140 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v140 = 67109120;
        LODWORD(v225) = v136;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v138, v139, "#jindoRF SKE ReqContextData - Got isSystemUI %{BOOL}d", v140, 8u);
        MEMORY[0x1B5E44758](v140, -1, -1);
      }
      LODWORD(v178) = v136;

    }
    else
    {
      LODWORD(v178) = 0;
    }
    v141 = (void *)MEMORY[0x1B5E432E8](0xD000000000000019, 0x80000001B4F00040);
    v142 = objc_msgSend(v98, sel_containsValueForKey_, v141);

    if (v142)
    {
      v143 = (void *)MEMORY[0x1B5E432E8](0xD000000000000019, 0x80000001B4F00040);
      LODWORD(v220) = objc_msgSend(v98, sel_decodeBoolForKey_, v143);

      if (one-time initialization token for executor != -1)
        swift_once();
      v144 = type metadata accessor for Logger();
      __swift_project_value_buffer(v144, (uint64_t)static Logger.executor);
      v145 = Logger.logObject.getter();
      v146 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v145, v146))
      {
        v147 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v147 = 67109120;
        LODWORD(v225) = v220;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v145, v146, "#liveActivitiesSupported SKE ReqContextData - Got isLiveActivitiesSupported %{BOOL}d", v147, 8u);
        MEMORY[0x1B5E44758](v147, -1, -1);
      }

    }
    else
    {
      LODWORD(v220) = 0;
    }
    v148 = (void *)MEMORY[0x1B5E432E8](0x69626D416E497369, 0xEB00000000746E65);
    v149 = objc_msgSend(v98, sel_containsValueForKey_, v148);

    if (v149)
    {
      v150 = (void *)MEMORY[0x1B5E432E8](0x69626D416E497369, 0xEB00000000746E65);
      v151 = objc_msgSend(v98, sel_decodeBoolForKey_, v150);

      if (one-time initialization token for executor != -1)
        swift_once();
      v152 = type metadata accessor for Logger();
      __swift_project_value_buffer(v152, (uint64_t)static Logger.executor);
      v153 = Logger.logObject.getter();
      v154 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v153, v154))
      {
        v155 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v155 = 67109120;
        LODWORD(v225) = v151;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v153, v154, "#ambientRF SKE ReqContextData - Got isInAmbient %{BOOL}d", v155, 8u);
        MEMORY[0x1B5E44758](v155, -1, -1);
      }
      LODWORD(v177) = v151;

    }
    else
    {
      LODWORD(v177) = 0;
    }
    v156 = v204;
    v157 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4F00060);
    objc_msgSend(v98, sel_decodeIntegerForKey_, v157);

    v158 = (uint64_t)v201;
    RequestPositionInSession.init(rawValue:)();
    v159 = v208;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v156[6])(v158, 1, v208) == 1)
    {
      ((void (**)(char *, _QWORD, uint64_t))v156)[13](v207, *MEMORY[0x1E0D98420], v159);
      outlined destroy of ReferenceResolutionClientProtocol?(v158, &demangling cache variable for type metadata for RequestPositionInSession?);
    }
    else
    {
      ((void (**)(char *, uint64_t, uint64_t))v156)[4](v207, v158, v159);
    }
    v160 = v156;
    v161 = v214;
    type metadata accessor for RequestConjunctionInfo();
    v201 = (char *)NSCoder.decodeObject<A>(of:forKey:)();
    v162 = v205;
    ObjectType = swift_getObjectType();

    outlined init with copy of ReferenceResolutionClientProtocol?(v211, v209, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    v164 = v198;
    outlined init with copy of ReferenceResolutionClientProtocol?(v212, v198, &demangling cache variable for type metadata for AudioDestination?);
    v165 = v199;
    (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v199, v213, v215);
    v204 = (void (**)(_QWORD, _QWORD, _QWORD))v98;
    v166 = v200;
    outlined init with copy of ReferenceResolutionClientProtocol?(v216, v200, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
    v167 = v202;
    (*(void (**)(char *, char *, uint64_t))(v210 + 16))(v202, v217, v206);
    v168 = (void (*)(char *, char *, uint64_t))v156[2];
    v169 = v203;
    v170 = v207;
    v171 = v208;
    v168(v203, v207, v208);
    HIBYTE(v176) = v185;
    LOBYTE(v176) = v186;
    BYTE2(v175) = v177;
    BYTE1(v175) = v220;
    LOBYTE(v175) = v178;
    HIDWORD(v174) = v179;
    LOBYTE(v174) = (_BYTE)v180;
    HIBYTE(v173) = (_BYTE)v193;
    BYTE2(v173) = (_BYTE)v194;
    BYTE1(v173) = (_BYTE)v196;
    LOBYTE(v173) = v195;
    v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, _QWORD, _QWORD, _QWORD, _BYTE, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, char *, uint64_t, char *, unint64_t, int, uint64_t, uint64_t, int, char *, char *, __int16))(ObjectType + 344))(v192, v191, v209, v164, v165, v190, v189, v188, v187, v184, v183, v182, v90, v166, v167, v181, v219, v197, v173,
            v218,
            v174,
            v175,
            v169,
            v201,
            v176);

    ((void (*)(char *, uint64_t))v160[1])(v170, v171);
    (*(void (**)(char *, uint64_t))(v210 + 8))(v217, v206);
    outlined destroy of ReferenceResolutionClientProtocol?(v216, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
    (*(void (**)(char *, uint64_t))(v214 + 8))(v213, v215);
    outlined destroy of ReferenceResolutionClientProtocol?(v212, &demangling cache variable for type metadata for AudioDestination?);
    outlined destroy of ReferenceResolutionClientProtocol?(v211, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    swift_deallocPartialClassInstance();
    return v52;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t RequestContextData.Builder.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  RequestContextData.Builder.init()();
  return v0;
}

uint64_t key path setter for RequestContextData.Builder.audioSource : RequestContextData.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 352))(v6);
}

uint64_t (*RequestContextData.Builder.audioSource.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for RequestContextData.Builder.audioDestination : RequestContextData.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, &demangling cache variable for type metadata for AudioDestination?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 376))(v6);
}

uint64_t (*RequestContextData.Builder.audioDestination.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for RequestContextData.Builder.responseMode : RequestContextData.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 400))(v6);
}

uint64_t (*RequestContextData.Builder.responseMode.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isEyesFree.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isDirectAction.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isVoiceTriggerEnabled.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isTextToSpeechEnabled.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.peerInfo.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.endpointInfo.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.instanceInfo.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.bargeInModes.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for RequestContextData.Builder.approximatePreviousTTSInterval : RequestContextData.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 616))(v6);
}

uint64_t (*RequestContextData.Builder.approximatePreviousTTSInterval.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for RequestContextData.Builder.restrictions : RequestContextData.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Restrictions?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Restrictions?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 640))(v6);
}

uint64_t (*RequestContextData.Builder.restrictions.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.originatingHome.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.currentDeviceAssistantId.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isTriggerlessFollowup.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.didPreviouslyFallbackToServer.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isSpeechRequest.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isUserOnActivePhoneCall.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.voiceTriggerEventInfo.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isRecognizeMyVoiceEnabled.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.voiceAudioSessionId.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RequestContextData.Builder.isSystemApertureEnabled.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RequestContextData.Builder.isLiveActivitiesSupported.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isLiveActivitiesSupported);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isLiveActivitiesSupported.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isLiveActivitiesSupported);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*RequestContextData.Builder.isLiveActivitiesSupported.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RequestContextData.Builder.isInAmbient.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isInAmbient);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isInAmbient.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isInAmbient);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*RequestContextData.Builder.isInAmbient.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for RequestContextData.Builder.positionInSession : RequestContextData.Builder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, &demangling cache variable for type metadata for RequestPositionInSession?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 952))(v6);
}

uint64_t (*RequestContextData.Builder.positionInSession.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

void *RequestContextData.Builder.conjunctionInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_conjunctionInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void RequestContextData.Builder.conjunctionInfo.setter(void *a1)
{
  RequestContextData.Builder.peerInfo.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_conjunctionInfo);
}

uint64_t (*RequestContextData.Builder.conjunctionInfo.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RequestContextData.Builder.isDeviceShowingLockScreen.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDeviceShowingLockScreen);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isDeviceShowingLockScreen.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDeviceShowingLockScreen);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*RequestContextData.Builder.isDeviceShowingLockScreen.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RequestContextData.Builder.isDeviceLocked.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDeviceLocked);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isDeviceLocked.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDeviceLocked);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*RequestContextData.Builder.isDeviceLocked.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RequestContextData.Builder.isLiveActivitiesSupported(_:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 904))();
  return swift_retain();
}

uint64_t RequestContextData.Builder.isInAmbient(_:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 928))();
  return swift_retain();
}

uint64_t RequestContextData.Builder.conjunctionInfo(_:)(void *a1)
{
  uint64_t v1;
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(*(_QWORD *)v1 + 976);
  v4 = a1;
  v3(a1);
  return swift_retain();
}

uint64_t RequestContextData.Builder.isDeviceShowingLockScreen(_:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 1000))();
  return swift_retain();
}

uint64_t RequestContextData.Builder.isDeviceLocked(_:)()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 1024))();
  return swift_retain();
}

id RequestContextData.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void RequestContextData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id RequestContextData.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RequestContextData(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
}

{
  return specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
}

{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for RRCandidate();
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack();
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized RequestContextData.__allocating_init(startRequest:assistantId:didPreviouslyFallbackToServer:isRecognizeMyVoiceEnabled:)(void *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  void *v45;
  uint8_t *v46;
  uint64_t v47;
  int v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  char v53;
  char v54;
  char *v55;
  int v57;
  uint64_t v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  _BOOL4 v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;

  v78 = a2;
  v79 = a6;
  v76 = a5;
  v77 = a4;
  v81 = a3;
  v11 = type metadata accessor for RequestPositionInSession();
  v73 = *(_QWORD *)(v11 - 8);
  v74 = v11;
  MEMORY[0x1E0C80A78](v11);
  v75 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Restrictions();
  MEMORY[0x1E0C80A78](v13);
  v84 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v15);
  v83 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for ResponseMode();
  v71 = *(_QWORD *)(v20 - 8);
  v72 = v20;
  MEMORY[0x1E0C80A78](v20);
  v82 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for InputOrigin();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v31 = (char *)&v61 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a7;
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 8))(a7, a8);
  if (v33)
  {
    v34 = (void *)v33;
    v35 = *(void (**)(uint64_t, uint64_t))(a8 + 24);
    v80 = a1;
    v35(v32, a8);
    v36 = InputOrigin.aceInputOrigin.getter();
    v67 = v37;
    v68 = v36;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
    RequestContextData.audioSource.getter();
    AudioSource.init(aceValue:)();
    RequestContextData.audioDestination.getter();
    AudioDestination.init(aceValue:)();
    RequestContextData.responseMode.getter();
    ResponseMode.init(aceValue:)();
    v39 = v71;
    v38 = v72;
    v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48))(v19, 1, v72);
    v69 = v27;
    v70 = v24;
    if (v40 == 1)
    {
      static ResponseMode.displayForward.getter();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v82, v19, v38);
    }
    LODWORD(v72) = RequestContextData.isEyesFree.getter();
    type metadata accessor for StartDirectActionRequestMessage();
    LODWORD(v71) = swift_dynamicCastClass() != 0;
    v66 = RequestContextData.isVoiceTriggerEnabled.getter();
    v65 = RequestContextData.isTextToSpeechEnabled.getter();
    v64 = RequestContextData.bargeInModes.getter();
    RequestContextData.approximatePreviousTTSInterval.getter();
    RequestContextData.deviceRestrictions.getter();
    Restrictions.init(aceValue:)();
    v63 = RequestContextData.isTriggerlessFollowup.getter();
    type metadata accessor for StartSpeechRequestMessage();
    v62 = swift_dynamicCastClass() != 0;
    v61 = RequestContextData.voiceTriggerEventInfo.getter();
    v48 = RequestContextData.voiceAudioSessionId.getter();
    v49 = RequestContextData.isSystemApertureEnabled.getter() & 1;
    v50 = RequestContextData.isLiveActivitiesSupported.getter() & 1;
    v51 = RequestContextData.isInAmbient.getter() & 1;
    v52 = RequestContextData.conjunctionInfo.getter();
    v53 = RequestContextData.isDeviceShowingLockScreen.getter();
    v54 = RequestContextData.isDeviceLocked.getter();
    v55 = v75;
    (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v75, *MEMORY[0x1E0D98420], v74);
    HIBYTE(v60) = v54 & 1;
    LOBYTE(v60) = v53 & 1;
    BYTE2(v59) = v51;
    BYTE1(v59) = v50;
    LOBYTE(v59) = v49;
    HIDWORD(v58) = v48;
    LOBYTE(v58) = v76 & 1;
    HIWORD(v57) = v62;
    BYTE1(v57) = v77 & 1;
    LOBYTE(v57) = v63 & 1;
    v47 = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, char *, uint64_t, _QWORD, _QWORD, _BYTE, _QWORD, _QWORD, _QWORD, uint64_t, char *, char *, _QWORD, uint64_t, uint64_t, int, uint64_t, uint64_t, int, char *, uint64_t, __int16))(v79 + 344))(v68, v67, v69, v70, v82, v72 & 1, v71, v66 & 1, v65 & 1, 0, 0, 0, v64, v83, v84, 0, v78, v81, v57,
            v61,
            v58,
            v59,
            v55,
            v52,
            v60);

  }
  else
  {
    v41 = a1;
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    v45 = v41;
    if (os_log_type_enabled(v43, v44))
    {
      v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v46 = 0;
      _os_log_impl(&dword_1B4BE6000, v43, v44, "RequestContextData.init(startSpeechRequest: StartSpeechRequestMessage) - missing requestContextData", v46, 2u);
      MEMORY[0x1B5E44758](v46, -1, -1);
    }

    return 0;
  }
  return v47;
}

uint64_t outlined init with take of DateInterval?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B4E65E1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 320))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4E65E4C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 328);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4E65E90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 344))();
}

uint64_t sub_1B4E65EBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 368))();
}

uint64_t sub_1B4E65EE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 392))();
}

uint64_t sub_1B4E65F14@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 416))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E65F44(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 424))(*a1);
}

uint64_t sub_1B4E65F70@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 440))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E65FA0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 448))(*a1);
}

uint64_t sub_1B4E65FCC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 464))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E65FFC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 472))(*a1);
}

uint64_t sub_1B4E66028@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 488))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E66058(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 496))(*a1);
}

uint64_t sub_1B4E66084@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 512))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E660B4(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 520);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B4E660F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 536))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E66120(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 544);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B4E6615C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 560))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E6618C(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 568);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B4E661C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 584))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E661F8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 592);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B4E66228(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 608))();
}

uint64_t sub_1B4E66254(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 632))();
}

uint64_t sub_1B4E66280@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 656))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E662B0(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 664);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B4E662EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 680))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4E6631C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 688);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4E66360@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 704))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E66390(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 712))(*a1);
}

uint64_t sub_1B4E663BC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 728))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E663EC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 736))(*a1);
}

uint64_t sub_1B4E66418@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 752))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E66448(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 760))(*a1);
}

uint64_t sub_1B4E66474@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 776))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E664A4(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 784))(*a1);
}

uint64_t sub_1B4E664D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 800))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E66500(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 808);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B4E66530@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 824))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E66560(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 832))(*a1);
}

uint64_t sub_1B4E6658C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 848))();
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_1B4E665C4(unsigned int *a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(**(_QWORD **)a2 + 856))(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

uint64_t sub_1B4E66608@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 872))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E66638(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 880))(*a1);
}

uint64_t sub_1B4E66664@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 896))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E66694(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 904))(*a1);
}

uint64_t sub_1B4E666C0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 920))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E666F0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 928))(*a1);
}

uint64_t sub_1B4E6671C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 944))();
}

uint64_t sub_1B4E66748@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 968))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E66778(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 976);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B4E667B4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 992))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E667E4(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 1000))(*a1);
}

uint64_t sub_1B4E66810@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1016))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E66840(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 1024))(*a1);
}

uint64_t ObjC metadata update function for RequestContextData()
{
  return type metadata accessor for RequestContextData(0);
}

void type metadata completion function for RequestContextData()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for AudioSource?, (void (*)(uint64_t))MEMORY[0x1E0DA7B88]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, &lazy cache variable for type metadata for AudioDestination?, (void (*)(uint64_t))MEMORY[0x1E0DA8070]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for ResponseMode();
      if (v2 <= 0x3F)
      {
        type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for DateInterval?, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Restrictions();
          if (v4 <= 0x3F)
          {
            type metadata accessor for RequestPositionInSession();
            if (v5 <= 0x3F)
              swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t method lookup function for RequestContextData()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RequestContextData.isDeviceInStarkMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of RequestContextData.isDeviceInCarDND.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of RequestContextData.deviceRestrictions.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of RequestContextData.__allocating_init(inputOrigin:audioSource:audioDestination:responseMode:isEyesFree:isDirectAction:isVoiceTriggerEnabled:isTextToSpeechEnabled:peerInfo:endpointInfo:instanceInfo:bargeInModes:approximatePreviousTTSInterval:restrictions:originatingHome:currentDeviceAssistantId:isTriggerlessFollowup:didPreviouslyFallbackToServer:isSpeechRequest:isUserOnActivePhoneCall:voiceTriggerEventInfo:isRecognizeMyVoiceEnabled:voiceAudioSessionId:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:positionInSession:conjunctionInfo:isDeviceShowingLockScreen:isDeviceLocked:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 344))();
}

uint64_t dispatch thunk of RequestContextData.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 352))();
}

uint64_t dispatch thunk of RequestContextData.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of RequestContextData.makeBuilder()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t ObjC metadata update function for RequestContextData.Builder()
{
  return type metadata accessor for RequestContextData.Builder(0);
}

void type metadata completion function for RequestContextData.Builder()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for AudioSource?, (void (*)(uint64_t))MEMORY[0x1E0DA7B88]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, &lazy cache variable for type metadata for AudioDestination?, (void (*)(uint64_t))MEMORY[0x1E0DA8070]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Input?(319, &lazy cache variable for type metadata for ResponseMode?, (void (*)(uint64_t))MEMORY[0x1E0DA7DE8]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for DateInterval?, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Input?(319, &lazy cache variable for type metadata for Restrictions?, (void (*)(uint64_t))MEMORY[0x1E0DA7E38]);
          if (v4 <= 0x3F)
          {
            type metadata accessor for Input?(319, &lazy cache variable for type metadata for RequestPositionInSession?, (void (*)(uint64_t))MEMORY[0x1E0D98440]);
            if (v5 <= 0x3F)
              swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t method lookup function for RequestContextData.Builder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RequestContextData.Builder.inputOrigin.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of RequestContextData.Builder.inputOrigin.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of RequestContextData.Builder.inputOrigin.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioSource.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioSource.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioSource.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioDestination.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioDestination.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioDestination.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of RequestContextData.Builder.responseMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of RequestContextData.Builder.responseMode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of RequestContextData.Builder.responseMode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isEyesFree.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isEyesFree.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isEyesFree.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDirectAction.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDirectAction.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDirectAction.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isVoiceTriggerEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isVoiceTriggerEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isVoiceTriggerEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTextToSpeechEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTextToSpeechEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTextToSpeechEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of RequestContextData.Builder.peerInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of RequestContextData.Builder.peerInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of RequestContextData.Builder.peerInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of RequestContextData.Builder.endpointInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t dispatch thunk of RequestContextData.Builder.endpointInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of RequestContextData.Builder.endpointInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t dispatch thunk of RequestContextData.Builder.instanceInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

uint64_t dispatch thunk of RequestContextData.Builder.instanceInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of RequestContextData.Builder.instanceInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of RequestContextData.Builder.bargeInModes.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of RequestContextData.Builder.bargeInModes.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of RequestContextData.Builder.bargeInModes.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of RequestContextData.Builder.approximatePreviousTTSInterval.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of RequestContextData.Builder.approximatePreviousTTSInterval.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of RequestContextData.Builder.approximatePreviousTTSInterval.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t dispatch thunk of RequestContextData.Builder.restrictions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of RequestContextData.Builder.restrictions.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of RequestContextData.Builder.restrictions.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of RequestContextData.Builder.originatingHome.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))();
}

uint64_t dispatch thunk of RequestContextData.Builder.originatingHome.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 664))();
}

uint64_t dispatch thunk of RequestContextData.Builder.originatingHome.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 672))();
}

uint64_t dispatch thunk of RequestContextData.Builder.currentDeviceAssistantId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 680))();
}

uint64_t dispatch thunk of RequestContextData.Builder.currentDeviceAssistantId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 688))();
}

uint64_t dispatch thunk of RequestContextData.Builder.currentDeviceAssistantId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 696))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTriggerlessFollowup.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 704))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTriggerlessFollowup.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 712))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTriggerlessFollowup.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 720))();
}

uint64_t dispatch thunk of RequestContextData.Builder.didPreviouslyFallbackToServer.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 728))();
}

uint64_t dispatch thunk of RequestContextData.Builder.didPreviouslyFallbackToServer.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 736))();
}

uint64_t dispatch thunk of RequestContextData.Builder.didPreviouslyFallbackToServer.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 744))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isSpeechRequest.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 752))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isSpeechRequest.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 760))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isSpeechRequest.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 768))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isUserOnActivePhoneCall.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 776))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isUserOnActivePhoneCall.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 784))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isUserOnActivePhoneCall.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 792))();
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceTriggerEventInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 800))();
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceTriggerEventInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 808))();
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceTriggerEventInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 816))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isRecognizeMyVoiceEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 824))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isRecognizeMyVoiceEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 832))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isRecognizeMyVoiceEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 840))();
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceAudioSessionId.getter()
{
  uint64_t v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 848))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceAudioSessionId.setter(unint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v1 + 856))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceAudioSessionId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 864))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isSystemApertureEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 872))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isSystemApertureEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 880))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isSystemApertureEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 888))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isLiveActivitiesSupported.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 896))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isLiveActivitiesSupported.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 904))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isLiveActivitiesSupported.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 912))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isInAmbient.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 920))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isInAmbient.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 928))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isInAmbient.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 936))();
}

uint64_t dispatch thunk of RequestContextData.Builder.positionInSession.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 944))();
}

uint64_t dispatch thunk of RequestContextData.Builder.positionInSession.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 952))();
}

uint64_t dispatch thunk of RequestContextData.Builder.positionInSession.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 960))();
}

uint64_t dispatch thunk of RequestContextData.Builder.conjunctionInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 968))();
}

uint64_t dispatch thunk of RequestContextData.Builder.conjunctionInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 976))();
}

uint64_t dispatch thunk of RequestContextData.Builder.conjunctionInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 984))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceShowingLockScreen.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 992))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceShowingLockScreen.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1000))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceShowingLockScreen.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1008))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceLocked.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1016))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceLocked.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1024))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceLocked.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1032))();
}

uint64_t dispatch thunk of RequestContextData.Builder.inputOrigin(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1040))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioSource(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1048))();
}

uint64_t dispatch thunk of RequestContextData.Builder.audioDestination(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1056))();
}

uint64_t dispatch thunk of RequestContextData.Builder.responseMode(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1064))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isEyesFree(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1072))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDirectAction(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1080))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isVoiceTriggerEnabled(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1088))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTextToSpeechEnabled(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1096))();
}

uint64_t dispatch thunk of RequestContextData.Builder.peerInfo(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1104))();
}

uint64_t dispatch thunk of RequestContextData.Builder.endpointInfo(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1112))();
}

uint64_t dispatch thunk of RequestContextData.Builder.instanceInfo(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1120))();
}

uint64_t dispatch thunk of RequestContextData.Builder.bargeInModes(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1128))();
}

uint64_t dispatch thunk of RequestContextData.Builder.approximatePreviousTTSInterval(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1136))();
}

uint64_t dispatch thunk of RequestContextData.Builder.restrictions(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1144))();
}

uint64_t dispatch thunk of RequestContextData.Builder.originatingHome(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1152))();
}

uint64_t dispatch thunk of RequestContextData.Builder.currentDeviceAssistantId(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1160))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isTriggerlessFollowup(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1168))();
}

uint64_t dispatch thunk of RequestContextData.Builder.didPreviouslyFallbackToServer(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1176))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isSpeechRequest(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1184))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isUserOnActivePhoneCall(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1192))();
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceTriggerEventInfo(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1200))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isRecognizeMyVoiceEnabled(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1208))();
}

uint64_t dispatch thunk of RequestContextData.Builder.voiceAudioSessionId(_:)(unint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v1 + 1216))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of RequestContextData.Builder.isSystemApertureEnabled(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1224))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isLiveActivitiesSupported(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1232))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isInAmbient(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1240))();
}

uint64_t dispatch thunk of RequestContextData.Builder.positionInSession(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1248))();
}

uint64_t dispatch thunk of RequestContextData.Builder.conjunctionInfo(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1256))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceShowingLockScreen(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1264))();
}

uint64_t dispatch thunk of RequestContextData.Builder.isDeviceLocked(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1272))();
}

uint64_t dispatch thunk of RequestContextData.Builder.build()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1280))();
}

uint64_t dispatch thunk of RequestContextData.Builder.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1288))();
}

ValueMetadata *type metadata accessor for ResponseTextExtractionUtil()
{
  return &type metadata for ResponseTextExtractionUtil;
}

uint64_t TTResponseMessage.MitigationDecision.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  unsigned int v8;
  uint64_t v9;

  v1 = v0;
  v2 = type metadata accessor for TTResponseMessage.MitigationDecision();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E0D9C968])
    return 0x64657463656C6573;
  if (v6 == *MEMORY[0x1E0D9C970])
    return 0x657461676974696DLL;
  if (v6 == *MEMORY[0x1E0D9C958])
  {
    v8 = 1652121965;
    return v8 | 0x74694D6500000000;
  }
  if (v6 == *MEMORY[0x1E0D9C950])
  {
    v8 = 1668444006;
    return v8 | 0x74694D6500000000;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

uint64_t SpeechContext.__allocating_init(speechPackage:)(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 1;
  *(_QWORD *)(v2 + 16) = a1;
  v3 = a1;
  v4 = objc_msgSend(v3, sel_recognition);
  v5 = objc_msgSend(v4, sel_aceRecognition);

  *(_QWORD *)(v2 + 24) = v5;
  return v2;
}

uint64_t ResultCandidateState.__allocating_init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v18;
  uint64_t v19;

  v18 = a7 & 1;
  v19 = swift_allocObject();
  ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:)(a1, a2, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32), a6, v18, a8 | ((HIDWORD(a8) & 1) << 32), a9, a10, a11);
  return v19;
}

void __swiftcall TextContext.init(utterance:trpId:tcuId:)(SiriKitRuntime::TextContext *__return_ptr retstr, Swift::String utterance, Swift::String_optional trpId, Swift::String_optional tcuId)
{
  retstr->utterance = utterance;
  retstr->trpId = trpId;
  retstr->tcuId = tcuId;
}

id TRPContext.__allocating_init(requestMessage:)(void *a1)
{
  swift_allocObject();
  return TRPContext.init(requestMessage:)(a1);
}

uint64_t specialized RangeReplaceableCollection<>.removeLast()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  v1 = v0[1];
  if ((v1 & 0x2000000000000000) == 0)
  {
    if ((*v0 & 0xFFFFFFFFFFFFLL) != 0)
    {
LABEL_5:
      String.index(before:)();
      return String.remove(at:)();
    }
    __break(1u);
  }
  if ((v1 & 0xF00000000000000) != 0)
    goto LABEL_5;
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  String.index(before:)();
  return String.subscript.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ResultCandidateProcessingStatus(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = ResultCandidateProcessingStatus.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == ResultCandidateProcessingStatus.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ResultCandidateProcessingStatus()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  ResultCandidateProcessingStatus.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ResultCandidateProcessingStatus()
{
  unsigned __int8 *v0;

  ResultCandidateProcessingStatus.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ResultCandidateProcessingStatus()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  ResultCandidateProcessingStatus.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ResultCandidateProcessingStatus@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ResultCandidateProcessingStatus.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ResultCandidateProcessingStatus@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ResultCandidateProcessingStatus.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ResultCandidateState.resultCandidateId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ResultCandidateState.resultCandidateType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ResultCandidateType(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, a1);
}

uint64_t ResultCandidateState.userId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
  v4 = type metadata accessor for UserID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ResultCandidateState.asrLocation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation, a1, (uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
}

uint64_t (*ResultCandidateState.nlUserParses.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ResultCandidateState.nlLanguageVariantResult : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 312))(v6);
}

uint64_t (*ResultCandidateState.nlLanguageVariantResult.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ResultCandidateState.nlResponseVariantResult.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlResponseVariantResult);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t ResultCandidateState.nlResponseVariantResult.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlResponseVariantResult);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*ResultCandidateState.nlResponseVariantResult.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ResultCandidateState.pommesInfo.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t ResultCandidateState.pommesInfo.setter(uint64_t a1)
{
  return ResultCandidateState.nlUserParses.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_pommesInfo, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEEE30]);
}

uint64_t (*ResultCandidateState.pommesInfo.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.processingStatus.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.flowOutputList.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.serverContextUpdateCandidate.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.selected.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.preExecutionDecision.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ResultCandidateState.preExcutionRuleType.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_preExcutionRuleType);
  swift_beginAccess();
  return *v1;
}

uint64_t (*ResultCandidateState.preExcutionRuleType.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ResultCandidateState.mitigationDecision : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 528))(v6);
}

uint64_t (*ResultCandidateState.mitigationDecision.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ResultCandidateState.nlResponseStatusCode : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 552))(v6);
}

uint64_t (*ResultCandidateState.nlResponseStatusCode.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.overrideFTMAsPerServer.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.serverFallback.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ResultCandidateState.infoDomainFallback.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_infoDomainFallback);
  swift_beginAccess();
  return *v1;
}

uint64_t ResultCandidateState.infoDomainFallback.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_infoDomainFallback);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ResultCandidateState.infoDomainFallback.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ResultCandidateState.fallbackParse : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 648))(v6);
}

uint64_t (*ResultCandidateState.fallbackParse.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ResultCandidateState.serverFallbackReason : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, &demangling cache variable for type metadata for ServerFallbackReason?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 672))(v6);
}

uint64_t ResultCandidateState.serverFallbackReason.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
}

uint64_t (*ResultCandidateState.serverFallbackReason.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ResultCandidateState.voiceIdScore.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ResultCandidateState.voiceIdClassification.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_voiceIdClassification;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t ResultCandidateState.voiceIdClassification.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_voiceIdClassification;
  result = swift_beginAccess();
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  return result;
}

uint64_t (*ResultCandidateState.voiceIdClassification.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

unint64_t ResultCandidateState.lowScoreThreshold.getter()
{
  return ResultCandidateState.voiceIdScore.getter(&OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_lowScoreThreshold);
}

unint64_t ResultCandidateState.voiceIdScore.getter(_QWORD *a1)
{
  uint64_t v1;
  unsigned int *v2;

  v2 = (unsigned int *)(v1 + *a1);
  swift_beginAccess();
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t ResultCandidateState.lowScoreThreshold.setter(uint64_t a1)
{
  return ResultCandidateState.voiceIdScore.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_lowScoreThreshold);
}

uint64_t ResultCandidateState.voiceIdScore.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = v2 + *a2;
  result = swift_beginAccess();
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*ResultCandidateState.lowScoreThreshold.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)(v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlUserParses) = 0;
  v16 = v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlLanguageVariantResult;
  v17 = type metadata accessor for Siri_Nlu_External_LanguageVariantResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = (_QWORD *)(v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlResponseVariantResult);
  *v18 = 0;
  v18[1] = 0;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_pommesInfo) = 0;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_flowOutputList) = 0;
  *(_QWORD *)(v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverContextUpdateCandidate) = 0;
  v19 = v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_mitigationDecision;
  v20 = type metadata accessor for TTResponseMessage.MitigationDecision();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  *(_BYTE *)(v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_overrideFTMAsPerServer) = 0;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallback) = 0;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_infoDomainFallback) = 0;
  v21 = v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_fallbackParse;
  v22 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallbackReason;
  v24 = type metadata accessor for ServerFallbackReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_voiceIdScore;
  *(_DWORD *)v25 = 0;
  *(_BYTE *)(v25 + 4) = 1;
  v26 = v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_voiceIdClassification;
  *(_QWORD *)v26 = 0;
  *(_BYTE *)(v26 + 8) = 1;
  v27 = v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_lowScoreThreshold;
  *(_DWORD *)v27 = 0;
  *(_BYTE *)(v27 + 4) = 1;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  outlined init with take of ResultCandidateType(a3, v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType);
  *(_BYTE *)(v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_processingStatus) = 0;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_selected) = 0;
  *(_BYTE *)(v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_preExecutionDecision) = 11;
  v28 = v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlResponseStatusCode;
  v29 = *MEMORY[0x1E0D9F518];
  v30 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v28, v29, v30);
  *(_BYTE *)(v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_preExcutionRuleType) = 7;
  v31 = v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata;
  v32 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v31, 1, 1, v32);
  v33 = v31 + *(int *)(type metadata accessor for ResultCandidateState.LoggingMetadata(0) + 20);
  v34 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
  v35 = v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
  v36 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v35, a4, v36);
  swift_beginAccess();
  *(_QWORD *)v26 = a6;
  *(_BYTE *)(v26 + 8) = a7 & 1;
  swift_beginAccess();
  *(_DWORD *)v25 = a5;
  *(_BYTE *)(v25 + 4) = BYTE4(a5) & 1;
  swift_beginAccess();
  *(_DWORD *)v27 = a8;
  *(_BYTE *)(v27 + 4) = BYTE4(a8) & 1;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a9, v21, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_endAccess();
  outlined init with take of ExecutionLocation?(a10, v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation);
  v37 = v11 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallbackReason;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a11, v37, &demangling cache variable for type metadata for ServerFallbackReason?);
  swift_endAccess();
  return v11;
}

uint64_t key path setter for ResultCandidateState.serverFallbackContextId : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 816))(v6);
}

void (*ResultCandidateState.serverFallbackContextId.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                             - 8)
                 + 64);
  v3[10] = malloc(v4);
  v5 = malloc(v4);
  v6 = OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata;
  v3[11] = v5;
  v3[12] = v6;
  v7 = v1 + v6;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v7, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return ResultCandidateState.serverFallbackContextId.modify;
}

void ResultCandidateState.serverFallbackContextId.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 88);
  v4 = *(void **)(*(_QWORD *)a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 72) + *(_QWORD *)(*(_QWORD *)a1 + 96);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(*(_QWORD *)a1 + 88), (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_beginAccess();
    outlined assign with copy of ReferenceResolutionClientProtocol?((uint64_t)v4, v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_endAccess();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    swift_beginAccess();
    outlined assign with copy of ReferenceResolutionClientProtocol?((uint64_t)v3, v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_endAccess();
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  free(v3);
  free(v4);
  free(v2);
}

uint64_t key path setter for ResultCandidateState.commitSignpostID : ResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, &demangling cache variable for type metadata for OSSignpostID?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 840))(v6);
}

void (*ResultCandidateState.commitSignpostID.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x70uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?)
                             - 8)
                 + 64);
  v3[10] = malloc(v4);
  v5 = malloc(v4);
  v6 = OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata;
  v3[11] = v5;
  v3[12] = v6;
  v7 = v1 + v6;
  swift_beginAccess();
  v8 = type metadata accessor for ResultCandidateState.LoggingMetadata(0);
  v3[13] = v8;
  outlined init with copy of ReferenceResolutionClientProtocol?(v7 + *(int *)(v8 + 20), (uint64_t)v5, &demangling cache variable for type metadata for OSSignpostID?);
  return ResultCandidateState.commitSignpostID.modify;
}

void ResultCandidateState.commitSignpostID.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v4 = *(void **)(*(_QWORD *)a1 + 80);
  v5 = *(void **)(*(_QWORD *)a1 + 88);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 72) + *(_QWORD *)(*(_QWORD *)a1 + 96);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(*(_QWORD *)a1 + 88), (uint64_t)v4, &demangling cache variable for type metadata for OSSignpostID?);
    swift_beginAccess();
    outlined assign with copy of ReferenceResolutionClientProtocol?((uint64_t)v4, v6 + *(int *)(v3 + 20), &demangling cache variable for type metadata for OSSignpostID?);
    swift_endAccess();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for OSSignpostID?);
  }
  else
  {
    swift_beginAccess();
    outlined assign with copy of ReferenceResolutionClientProtocol?((uint64_t)v5, v6 + *(int *)(v3 + 20), &demangling cache variable for type metadata for OSSignpostID?);
    swift_endAccess();
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for OSSignpostID?);
  free(v5);
  free(v4);
  free(v2);
}

uint64_t ResultCandidateState.speechContextIfApplicable.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v1 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ResultCandidateType(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, (uint64_t)v3);
  if (!swift_getEnumCaseMultiPayload())
    return *(_QWORD *)v3;
  outlined destroy of CamOutput((uint64_t)v3, type metadata accessor for ResultCandidateType);
  return 0;
}

uint64_t ResultCandidateState.trpContextIfApplicable.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t v5;

  v1 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ResultCandidateType(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of CamOutput((uint64_t)v3, type metadata accessor for ResultCandidateType);
    return 0;
  }
  type metadata accessor for TRPContext();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_release();
    return 0;
  }
  return result;
}

uint64_t ResultCandidateState.directActionContextIfApplicable.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v1 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ResultCandidateType(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload() == 2)
    return *(_QWORD *)v3;
  outlined destroy of CamOutput((uint64_t)v3, type metadata accessor for ResultCandidateType);
  return 0;
}

uint64_t ResultCandidateState.__deallocating_deinit()
{
  ResultCandidateState.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ResultCandidateState()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 800))();
}

id SpeechContext.defaultSpeechPackage.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id SpeechContext.speechPackage.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

void *SpeechContext.aceRecognition.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  v2 = v1;
  return v1;
}

uint64_t SpeechContext.repetitionResults.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t SpeechContext.repetitionResults.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SpeechContext.repetitionResults.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SpeechContext.endpointMode.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 40);
}

uint64_t SpeechContext.endpointMode.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v2 + 40) = a1;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*SpeechContext.endpointMode.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SpeechContext.init(speechPackage:)(void *a1)
{
  uint64_t v1;
  id v2;
  id v3;
  id v4;

  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 48) = 1;
  *(_QWORD *)(v1 + 16) = a1;
  v2 = a1;
  v3 = objc_msgSend(v2, sel_recognition);
  v4 = objc_msgSend(v3, sel_aceRecognition);

  *(_QWORD *)(v1 + 24) = v4;
  return v1;
}

uint64_t SpeechContext.utterance.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 112))(v2);
  v6 = objc_msgSend(v5, sel_recognition);

  if (v6)
  {
    v7 = AFSpeechRecognition.toAsrHypotheses()();

    v8 = *(_QWORD *)(v7 + 16);
    v9 = type metadata accessor for Siri_Nlu_External_AsrHypothesis();
    v10 = *(_QWORD *)(v9 - 8);
    if (v8)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v4, v7 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
      v11 = 0;
    }
    else
    {
      v11 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v4, v11, 1, v9);
    swift_bridgeObjectRelease();
    type metadata accessor for Siri_Nlu_External_AsrHypothesis();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v9) != 1)
    {
      v12 = Siri_Nlu_External_AsrHypothesis.utterance.getter();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v9);
      return v12;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
  }
  return 0;
}

uint64_t AFSpeechRecognition.toAsrHypotheses()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  BOOL v24;
  unint64_t v25;
  id v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  unint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  id v63;
  void *v64;
  Swift::String v65;
  id v66;
  void *v67;
  id v68;
  void *v69;
  int v70;
  id v71;
  void *v72;
  unint64_t v73;
  Swift::String v75;
  double v76;
  double v77;
  double v78;
  double v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint64_t result;
  _QWORD v116[2];
  uint64_t v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  id *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  id v146;
  unint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;

  v128 = type metadata accessor for UUID();
  v127 = *(_QWORD *)(v128 - 8);
  MEMORY[0x1E0C80A78](v128);
  v126 = (char *)v116 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v116 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Siri_Nlu_External_UUID();
  v125 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v124 = (char *)v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for CharacterSet();
  v122 = *(_QWORD *)(v123 - 8);
  MEMORY[0x1E0C80A78](v123);
  v121 = (char *)v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for Siri_Nlu_External_AsrHypothesis();
  v135 = *(_QWORD *)(v136 - 8);
  v8 = MEMORY[0x1E0C80A78](v136);
  v134 = (char *)v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v131 = (char *)v116 - v10;
  v157 = type metadata accessor for Siri_Nlu_External_AsrTokenInformation();
  v155 = *(_QWORD *)(v157 - 8);
  v11 = MEMORY[0x1E0C80A78](v157);
  v156 = (char *)v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v116 - v13;
  v15 = objc_msgSend(v0, sel_utterances);
  if (!v15)
  {
LABEL_123:
    if (one-time initialization token for conversationBridge != -1)
      goto LABEL_147;
    goto LABEL_124;
  }
  v16 = v15;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechUtterance);
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v18 = objc_msgSend(v0, sel_phrases);
  if (!v18)
  {
    swift_bridgeObjectRelease();
    goto LABEL_123;
  }
  v19 = v18;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechPhrase);
  v149 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v140 = v17;
  if (!(v17 >> 62))
  {
    v20 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v20)
      goto LABEL_5;
LABEL_149:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v17 = v140;
  v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v20)
    goto LABEL_149;
LABEL_5:
  v139 = v17 & 0xC000000000000001;
  v120 = v17 & 0xFFFFFFFFFFFFFF8;
  v119 = v17 + 32;
  v21 = v149 & 0xFFFFFFFFFFFFFF8;
  v142 = v149 & 0xFFFFFFFFFFFFFF8;
  if (v149 < 0)
    v21 = v149;
  v116[1] = v21;
  v145 = v149 & 0xC000000000000001;
  v137 = (id *)(v149 + 32);
  v130 = MEMORY[0x1E0DEE9D8];
  v118 = v4;
  v117 = v5;
  v138 = v20;
  v22 = 0;
  while (1)
  {
    if (v139)
    {
      v23 = (id)MEMORY[0x1B5E43B94](v22, v17);
      v24 = __OFADD__(v22, 1);
      v25 = v22 + 1;
      if (v24)
        goto LABEL_140;
    }
    else
    {
      if (v22 >= *(_QWORD *)(v120 + 16))
        goto LABEL_145;
      v23 = *(id *)(v119 + 8 * v22);
      v24 = __OFADD__(v22, 1);
      v25 = v22 + 1;
      if (v24)
      {
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        swift_once();
LABEL_124:
        v111 = type metadata accessor for Logger();
        __swift_project_value_buffer(v111, (uint64_t)static Logger.conversationBridge);
        v112 = Logger.logObject.getter();
        v113 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v112, v113))
        {
          v114 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v114 = 0;
          _os_log_impl(&dword_1B4BE6000, v112, v113, "AFSpeechRecognition utterances/phrases is nil", v114, 2u);
          MEMORY[0x1B5E44758](v114, -1, -1);
        }

        return MEMORY[0x1E0DEE9D8];
      }
    }
    v148 = v23;
    v26 = objc_msgSend(v23, sel_interpretationIndices);
    v147 = v25;
    if (!v26)
      goto LABEL_106;
    v27 = v26;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v29 = v28 >> 62;
    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      v150 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v150 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if ((unint64_t)v149 >> 62)
    {
      swift_bridgeObjectRetain();
      v92 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v150 != v92)
      {
LABEL_105:
        swift_bridgeObjectRelease();
LABEL_106:
        if (one-time initialization token for executor != -1)
          swift_once();
        v93 = type metadata accessor for Logger();
        __swift_project_value_buffer(v93, (uint64_t)static Logger.executor);
        v94 = Logger.logObject.getter();
        v95 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v94, v95))
        {
          v96 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v96 = 0;
          _os_log_impl(&dword_1B4BE6000, v94, v95, "Phrase length is not the same as interpretationIndices.", v96, 2u);
          MEMORY[0x1B5E44758](v96, -1, -1);
        }

        goto LABEL_9;
      }
      v164 = 0;
      v165 = 0xE000000000000000;
      swift_bridgeObjectRetain_n();
      v150 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v150)
      {
LABEL_104:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_113;
      }
    }
    else
    {
      if (v150 != *(_QWORD *)(v142 + 16))
        goto LABEL_105;
      v164 = 0;
      v165 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      if (!v150)
        goto LABEL_104;
    }
    if (v145)
    {
      v30 = (id)MEMORY[0x1B5E43B94](0, v149);
      if (!v29)
        goto LABEL_25;
    }
    else
    {
      if (!*(_QWORD *)(v142 + 16))
        goto LABEL_146;
      v30 = *v137;
      if (!v29)
      {
LABEL_25:
        v31 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
        v32 = v30;
        if (v31)
          break;
        goto LABEL_112;
      }
    }
    swift_bridgeObjectRetain();
    v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v32 = v30;
    if (v31)
      break;
LABEL_112:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_113:
    v36 = MEMORY[0x1E0DEE9D8];
LABEL_114:
    Siri_Nlu_External_AsrHypothesis.init()();
    v162 = v164;
    v163 = v165;
    v160 = 0x2B5D735C5BLL;
    v161 = 0xE500000000000000;
    v158 = 32;
    v159 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    v162 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v163 = v97;
    v98 = v121;
    static CharacterSet.whitespacesAndNewlines.getter();
    StringProtocol.trimmingCharacters(in:)();
    (*(void (**)(char *, uint64_t))(v122 + 8))(v98, v123);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v99 = v131;
    Siri_Nlu_External_AsrHypothesis.utterance.setter();
    objc_msgSend(v148, sel_confidenceScore);
    Siri_Nlu_External_AsrHypothesis.probability.setter();
    MEMORY[0x1B5E3FAF0](v36);
    v100 = v126;
    UUID.init()();
    v101 = (uint64_t)v118;
    static ConversionUtils.convertUuidToProto(uuid:)();
    (*(void (**)(char *, uint64_t))(v127 + 8))(v100, v128);
    v102 = v125;
    v103 = v117;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v101, 1, v117) == 1)
    {
      Siri_Nlu_External_UUID.init()();
      outlined destroy of ReferenceResolutionClientProtocol?(v101, &demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 32))(v124, v101, v103);
    }
    Siri_Nlu_External_AsrHypothesis.id.setter();
    (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v134, v99, v136);
    v104 = v130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v104 + 16) + 1, 1, v104);
    v106 = *(_QWORD *)(v104 + 16);
    v105 = *(_QWORD *)(v104 + 24);
    if (v106 >= v105 >> 1)
      v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1, v106 + 1, 1, v104);
    *(_QWORD *)(v104 + 16) = v106 + 1;
    v107 = v104;
    v108 = v135;
    v109 = (*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
    v130 = v107;
    v110 = v136;
    (*(void (**)(unint64_t, char *, uint64_t))(v135 + 32))(v107 + v109 + *(_QWORD *)(v135 + 72) * v106, v134, v136);

    (*(void (**)(char *, uint64_t))(v108 + 8))(v99, v110);
LABEL_9:
    v22 = v147;
    v17 = v140;
    if (v147 == v138)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v130;
    }
  }
  v143 = v31;
  v33 = 0;
  v34 = 0;
  v144 = v28 & 0xC000000000000001;
  v133 = v28 & 0xFFFFFFFFFFFFFF8;
  v132 = v28 + 32;
  v35 = 1;
  v36 = MEMORY[0x1E0DEE9D8];
  v141 = v28;
  while (1)
  {
    if (v144)
    {
      v37 = v35;
      v38 = (id)MEMORY[0x1B5E43B94](v34, v28);
    }
    else
    {
      if (v34 >= *(_QWORD *)(v133 + 16))
        goto LABEL_141;
      v37 = v35;
      v38 = *(id *)(v132 + 8 * v34);
    }
    v151 = v38;
    v39 = objc_msgSend(v32, sel_interpretations);
    if (v39)
      break;
    v84 = v32;
    v85 = v151;
LABEL_89:
    v45 = v37;
LABEL_90:

    if (v45 == v150)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_114;
    }
    if (v145)
    {
      v91 = (id)MEMORY[0x1B5E43B94](v45, v149);
    }
    else
    {
      if (v45 >= *(_QWORD *)(v142 + 16))
        goto LABEL_142;
      v91 = v137[v45];
    }
    v32 = v91;
    if (__OFADD__(v45, 1))
    {
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }
    v34 = v45;
    v35 = v45 + 1;
    if (v45 == v143)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_114;
    }
  }
  v40 = v39;
  v146 = v32;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechInterpretation);
  v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v42 = objc_msgSend(v151, sel_integerValue);
  v43 = (uint64_t)v42;
  if (!(v41 >> 62))
  {
    if ((uint64_t)v42 < *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_34;
    goto LABEL_84;
  }
  swift_bridgeObjectRetain();
  v86 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v43 >= v86)
  {
LABEL_84:
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v87 = type metadata accessor for Logger();
    __swift_project_value_buffer(v87, (uint64_t)static Logger.conversationBridge);
    v88 = Logger.logObject.getter();
    v89 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v90 = 0;
      _os_log_impl(&dword_1B4BE6000, v88, v89, "Invalid interpretation index.", v90, 2u);
      MEMORY[0x1B5E44758](v90, -1, -1);
    }

    v84 = v146;
    v85 = v151;
    v28 = v141;
    goto LABEL_89;
  }
LABEL_34:
  v44 = (unint64_t)objc_msgSend(v151, sel_integerValue);
  v28 = v141;
  v45 = v37;
  if ((v41 & 0xC000000000000001) != 0)
  {
    v46 = (id)MEMORY[0x1B5E43B94](v44, v41);
  }
  else
  {
    if ((v44 & 0x8000000000000000) != 0)
      goto LABEL_143;
    if (v44 >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_144;
    v46 = *(id *)(v41 + 8 * v44 + 32);
  }
  v47 = v46;
  swift_bridgeObjectRelease();
  v48 = objc_msgSend(v47, sel_tokens);
  if (!v48)
  {

    v84 = v151;
    v85 = v47;
    goto LABEL_90;
  }
  v49 = v48;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechToken);
  v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v50 >> 62)
  {
    swift_bridgeObjectRetain();
    v51 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v129 = v45;
  if (!v51)
  {
LABEL_81:

    swift_bridgeObjectRelease();
    v84 = v47;
    v28 = v141;
    v85 = v146;
    v45 = v129;
    goto LABEL_90;
  }
  v153 = v50;
  v154 = v50 & 0xC000000000000001;
  v52 = 4;
  v152 = v51;
  while (1)
  {
    if (v154)
      v53 = (id)MEMORY[0x1B5E43B94](v52 - 4, v50);
    else
      v53 = *(id *)(v50 + 8 * v52);
    v54 = v53;
    v55 = v52 - 3;
    if (__OFADD__(v52 - 4, 1))
    {
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    v56 = v47;
    Siri_Nlu_External_AsrTokenInformation.init()();
    objc_msgSend(v54, sel_removeSpaceBefore);
    Siri_Nlu_External_AsrTokenInformation.removeSpaceBefore.setter();
    if ((Siri_Nlu_External_AsrTokenInformation.removeSpaceBefore.getter() & 1) != 0)
    {
      v57 = v164;
      v58 = v165;
      swift_bridgeObjectRetain();
      v59 = specialized BidirectionalCollection.last.getter(v57, v58);
      v61 = v60;
      swift_bridgeObjectRelease();
      if (v61)
      {
        if (v59 == 32 && v61 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v62 & 1) == 0)
            goto LABEL_55;
        }
        if (!v33)
          goto LABEL_139;
        specialized RangeReplaceableCollection<>.removeLast()();
        swift_bridgeObjectRelease();
      }
    }
LABEL_55:
    v63 = objc_msgSend(v54, sel_text);
    if (v63)
    {
      v64 = v63;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    Siri_Nlu_External_AsrTokenInformation.postItnText.setter();
    v65._countAndFlagsBits = Siri_Nlu_External_AsrTokenInformation.postItnText.getter();
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    v66 = objc_msgSend(v54, sel_phoneSequence);
    if (v66)
    {
      v67 = v66;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    Siri_Nlu_External_AsrTokenInformation.phoneSequence.setter();
    v68 = objc_msgSend(v54, sel_ipaPhoneSequence);
    if (v68)
    {
      v69 = v68;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    Siri_Nlu_External_AsrTokenInformation.ipaPhoneSequence.setter();
    objc_msgSend(v54, sel_removeSpaceAfter);
    Siri_Nlu_External_AsrTokenInformation.removeSpaceAfter.setter();
    Siri_Nlu_External_AsrTokenInformation.removeSpaceAfter.getter();
    Siri_Nlu_External_AsrTokenInformation.addSpaceAfter.setter();
    objc_msgSend(v54, sel_confidenceScore);
    Siri_Nlu_External_AsrTokenInformation.confidenceScore.setter();
    Siri_Nlu_External_AsrTokenInformation.beginIndex.setter();
    v70 = Siri_Nlu_External_AsrTokenInformation.beginIndex.getter();
    v71 = objc_msgSend(v54, sel_text);
    if (!v71)
      break;
    v72 = v71;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v73 = String.count.getter();
    swift_bridgeObjectRelease();
    if ((v73 & 0x8000000000000000) != 0 || HIDWORD(v73))
      goto LABEL_151;
    if (__CFADD__(v70, (_DWORD)v73))
      goto LABEL_130;
    Siri_Nlu_External_AsrTokenInformation.endIndex.setter();
    v33 = Siri_Nlu_External_AsrTokenInformation.endIndex.getter();
    if ((Siri_Nlu_External_AsrTokenInformation.addSpaceAfter.getter() & 1) != 0)
    {
      if (__CFADD__(v33++, 1))
        goto LABEL_137;
      v75._countAndFlagsBits = 32;
      v75._object = (void *)0xE100000000000000;
      String.append(_:)(v75);
    }
    objc_msgSend(v54, sel_startTime);
    v77 = v76 * 1000.0;
    if ((~*(_QWORD *)&v77 & 0x7FF0000000000000) == 0)
      goto LABEL_131;
    if (v77 <= -2147483650.0)
      goto LABEL_132;
    if (v77 >= 2147483650.0)
      goto LABEL_133;
    Siri_Nlu_External_AsrTokenInformation.startMilliSeconds.setter();
    objc_msgSend(v54, sel_endTime);
    v79 = v78 * 1000.0;
    if ((~*(_QWORD *)&v79 & 0x7FF0000000000000) == 0)
      goto LABEL_134;
    if (v79 <= -2147483650.0)
      goto LABEL_135;
    if (v79 >= 2147483650.0)
      goto LABEL_136;
    Siri_Nlu_External_AsrTokenInformation.endMilliSeconds.setter();
    (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v156, v14, v157);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
    v81 = *(_QWORD *)(v36 + 16);
    v80 = *(_QWORD *)(v36 + 24);
    if (v81 >= v80 >> 1)
      v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1, v36);
    *(_QWORD *)(v36 + 16) = v81 + 1;
    v82 = v155;
    v83 = v157;
    (*(void (**)(unint64_t, char *, uint64_t))(v155 + 32))(v36+ ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))+ *(_QWORD *)(v155 + 72) * v81, v156, v157);

    (*(void (**)(char *, uint64_t))(v82 + 8))(v14, v83);
    ++v52;
    v47 = v56;
    v50 = v153;
    if (v55 == v152)
      goto LABEL_81;
  }
  __break(1u);
LABEL_151:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SpeechContext.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SpeechContext.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t TRPContext.selectedTCUId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TRPContext.selectedTCUId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*TRPContext.selectedTCUId.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t TRPContext.pommesTCUId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TRPContext.pommesTCUId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*TRPContext.pommesTCUId.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

id TRPContext.speechPackage.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  _BYTE v35[40];
  _OWORD v36[3];
  id v37[2];
  __int128 v38;
  __int128 v39;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))(*v0 + 216))();
  if (!v3)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
    swift_retain();
    v17 = Logger.logObject.getter();
    v18 = v1;
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = (void *)swift_slowAlloc();
      v37[0] = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = v18[7];
      v23 = v18[8];
      swift_bridgeObjectRetain();
      *(_QWORD *)&v36[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v17, v19, "Warning: Selected TCU is not known for TRP Candidate %s, falling back on last TCU in the list for speechPackage.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v21, -1, -1);
      MEMORY[0x1B5E44758](v20, -1, -1);

      return (id)v18[2];
    }
    else
    {

      swift_release();
      return (id)v18[2];
    }
  }
  v4 = v3;
  v34 = v2;
  v5 = v0[9];
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
    swift_bridgeObjectRetain();
LABEL_20:
    v38 = 0u;
    v39 = 0u;
    *(_OWORD *)v37 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  v7 = v5 + 32;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v7, (uint64_t)v36, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState));
    v8 = *(void **)&v36[0];
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v36 + 8, (uint64_t)v35);
    v9 = objc_msgSend(v8, sel_tcuId);
    if (!v9)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
      goto LABEL_5;
    }
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    if (v11 == v34 && v4 == v13)
      break;
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    if ((v15 & 1) != 0)
      goto LABEL_29;
LABEL_5:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v36, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState));
    v7 += 48;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
LABEL_29:
  swift_bridgeObjectRelease();
  *(_OWORD *)v37 = v36[0];
  v38 = v36[1];
  v39 = v36[2];
  swift_bridgeObjectRelease();
  v32 = v37[0];
  if (!v37[0])
  {
LABEL_21:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v37, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState)?);
    goto LABEL_22;
  }
  v33 = objc_msgSend(v37[0], sel_speechPackage);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v37[1]);
  if (v33)
  {
    swift_bridgeObjectRelease();
    return v33;
  }
LABEL_22:
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  swift_bridgeObjectRetain();
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc();
    v29 = (void *)swift_slowAlloc();
    v37[0] = v29;
    *(_DWORD *)v28 = 136315394;
    v30 = v1[7];
    v31 = v1[8];
    swift_bridgeObjectRetain();
    *(_QWORD *)&v36[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v36[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v4, (uint64_t *)v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v26, v27, "Warning: TRP Candidate %s does not contain speech info for selected TCU ID %s, falling back on last TCU in the list for speechPackage.", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v29, -1, -1);
    MEMORY[0x1B5E44758](v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  return (id)v1[2];
}

uint64_t TRPContext.selectedTCUPackage.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  _BYTE v17[40];
  _OWORD v18[3];
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v1 = (*(uint64_t (**)(void))(*v0 + 216))();
  v3 = v2;
  if (!v2)
    return v3;
  v4 = v0[9];
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    swift_bridgeObjectRetain();
LABEL_15:
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v6 = v1;
  v7 = v4 + 32;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v7, (uint64_t)v18, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState));
    v8 = *(void **)&v18[0];
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v18 + 8, (uint64_t)v17);
    v9 = objc_msgSend(v8, sel_tcuId);
    if (!v9)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      goto LABEL_5;
    }
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    if (v11 == v6 && v3 == v13)
      break;
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    if ((v15 & 1) != 0)
      goto LABEL_18;
LABEL_5:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState));
    v7 += 48;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
LABEL_18:
  swift_bridgeObjectRelease();
  v19 = v18[0];
  v20 = v18[1];
  v21 = v18[2];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = v19;
  if ((_QWORD)v19)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19 + 8);
    return v3;
  }
LABEL_16:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v19, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState)?);
  return 0;
}

id TRPContext.init(requestMessage:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _OWORD v19[3];

  v2 = v1;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  swift_retain();
  v4 = TRPCandidateRequestMessage.tcuToContextList.getter();
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    memset(v19, 0, sizeof(v19));
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v4 + 48 * v5 - 16, (uint64_t)v19, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState));
  swift_bridgeObjectRelease();
  v6 = *(void **)&v19[0];
  if (!*(_QWORD *)&v19[0])
  {
LABEL_6:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, &demangling cache variable for type metadata for (SMTTCUPackage, ImmutableConversationSessionState)?);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B4BE6000, v16, v17, "Could not build TRPContext from TRPCandidateRequestMessage: No TCU's found", v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);
    }

    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for TRPContext();
    swift_deallocPartialClassInstance();
    return 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19 + 8);
  v7 = a1;
  v8 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  v10 = v9;

  *(_QWORD *)(v2 + 56) = v8;
  *(_QWORD *)(v2 + 64) = v10;
  *(_QWORD *)(v2 + 72) = TRPCandidateRequestMessage.tcuToContextList.getter();
  swift_release();
  result = objc_msgSend(v6, sel_speechPackage);
  if (result)
  {
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_BYTE *)(v2 + 48) = 1;
    *(_QWORD *)(v2 + 16) = result;
    v12 = result;
    v13 = objc_msgSend(v12, sel_recognition);
    v14 = objc_msgSend(v13, sel_aceRecognition);

    *(_QWORD *)(v2 + 24) = v14;
    return (id)v2;
  }
  __break(1u);
  return result;
}

void TRPContext.__allocating_init(speechPackage:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void TRPContext.init(speechPackage:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t TRPContext.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t TRPContext.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TRPContext.__deallocating_deinit()
{
  TRPContext.deinit();
  return swift_deallocClassInstance();
}

uint64_t DirectActionContext.directAction.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t DirectActionContext.requestExecutionParameters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TextContext.utterance.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TextContext.trpId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TextContext.tcuId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

Swift::String __swiftcall String.sanitize()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String result;
  _QWORD v15[4];
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v3 = v0;
  v4 = type metadata accessor for CharacterSet();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v3;
  v17 = v2;
  v15[2] = 0x2B5D735C5BLL;
  v15[3] = 0xE500000000000000;
  v15[0] = 32;
  v15[1] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v16 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v17 = v8;
  static CharacterSet.whitespacesAndNewlines.getter();
  v9 = StringProtocol.trimmingCharacters(in:)();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease();
  v12 = v9;
  v13 = v11;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

unint64_t specialized ResultCandidateProcessingStatus.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ResultCandidateProcessingStatus.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0x10)
    return 16;
  else
    return v3;
}

uint64_t type metadata accessor for ResultCandidateType(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ResultCandidateType);
}

uint64_t outlined init with take of ResultCandidateType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ResultCandidateType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ExecutionLocation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TRPContext()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type ResultCandidateProcessingStatus and conformance ResultCandidateProcessingStatus()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResultCandidateProcessingStatus and conformance ResultCandidateProcessingStatus;
  if (!lazy protocol witness table cache variable for type ResultCandidateProcessingStatus and conformance ResultCandidateProcessingStatus)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ResultCandidateProcessingStatus, &type metadata for ResultCandidateProcessingStatus);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResultCandidateProcessingStatus and conformance ResultCandidateProcessingStatus);
  }
  return result;
}

uint64_t sub_1B4E6B660@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 280))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E6B690(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 288);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B4E6B6C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 304))();
}

uint64_t sub_1B4E6B6EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 328))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4E6B71C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 336);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4E6B760@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 352))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E6B790(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 360);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B4E6B7C0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 376))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E6B7F0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 384))(*a1);
}

uint64_t sub_1B4E6B81C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 400))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E6B84C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 408);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B4E6B87C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 424))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E6B8AC(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 432);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B4E6B8E8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 448))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4E6B91C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 456))(*a1);
}

uint64_t sub_1B4E6B948@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 472))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E6B978(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 480))(*a1);
}

uint64_t sub_1B4E6B9A4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 496))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E6B9D4(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 504))(*a1);
}

uint64_t sub_1B4E6BA00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 520))();
}

uint64_t sub_1B4E6BA2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 544))();
}

uint64_t sub_1B4E6BA58@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 568))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4E6BA8C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 576))(*a1);
}

uint64_t sub_1B4E6BAB8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 592))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4E6BAEC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 600))(*a1);
}

uint64_t sub_1B4E6BB18@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 616))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4E6BB4C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 624))(*a1);
}

uint64_t sub_1B4E6BB78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 640))();
}

uint64_t sub_1B4E6BBA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 664))();
}

uint64_t sub_1B4E6BBD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 712))();
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_1B4E6BC08(unsigned int *a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(**(_QWORD **)a2 + 720))(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

uint64_t sub_1B4E6BC4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 736))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B4E6BC84(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a2 + 744))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1B4E6BCBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 760))();
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_1B4E6BCF4(unsigned int *a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(**(_QWORD **)a2 + 768))(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

uint64_t sub_1B4E6BD38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 808))();
}

uint64_t sub_1B4E6BD64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 832))();
}

uint64_t sub_1B4E6BD90@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E6BDC0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 128);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B4E6BDF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B4E6BE28(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)a2 + 152))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1B4E6BE60@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 216))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4E6BE90(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 224);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4E6BED4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 240))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4E6BF04(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 248);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t getEnumTagSinglePayload for ResultCandidateProcessingStatus(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ResultCandidateProcessingStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_1B4E6C024 + 4 * byte_1B4EEDEE9[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_1B4E6C058 + 4 * byte_1B4EEDEE4[v4]))();
}

uint64_t sub_1B4E6C058(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E6C060(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4E6C068);
  return result;
}

uint64_t sub_1B4E6C074(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4E6C07CLL);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_1B4E6C080(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E6C088(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResultCandidateProcessingStatus()
{
  return &type metadata for ResultCandidateProcessingStatus;
}

uint64_t initializeBufferWithCopyOfBuffer for ResultCandidateType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1B4E6C0F4 + 4 * byte_1B4EEDEEE[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for ResultCandidateType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      result = swift_release();
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2:
      swift_bridgeObjectRelease();
LABEL_5:
      result = swift_bridgeObjectRelease();
      break;
    case 3:
      v3 = type metadata accessor for GestureInput();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for ResultCandidateType()
{
  char *v0;

  v0 = (char *)sub_1B4E6C2C8 + 4 * byte_1B4EEDEF6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_1B4E6C2C8()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  swift_retain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for ResultCandidateType(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of CamOutput(result, type metadata accessor for ResultCandidateType);
    v2 = (char *)&loc_1B4E6C3EC + 4 * byte_1B4EEDEFA[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

void *initializeWithTake for ResultCandidateType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v6 = type metadata accessor for GestureInput();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ResultCandidateType(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for ResultCandidateType);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      v6 = type metadata accessor for GestureInput();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for ResultCandidateType()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GestureInput();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for ResultCandidateState()
{
  return type metadata accessor for ResultCandidateState(0);
}

uint64_t type metadata accessor for ResultCandidateState(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ResultCandidateState);
}

void type metadata completion function for ResultCandidateState()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  type metadata accessor for ResultCandidateType(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UserID();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Input?(319, &lazy cache variable for type metadata for ExecutionLocation?, (void (*)(uint64_t))MEMORY[0x1E0DA80A0]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?, (void (*)(uint64_t))MEMORY[0x1E0D9F8A8]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for TTResponseMessage.MitigationDecision?, (void (*)(uint64_t))MEMORY[0x1E0D9C978]);
          if (v4 <= 0x3F)
          {
            type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
            if (v5 <= 0x3F)
            {
              type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?, (void (*)(uint64_t))MEMORY[0x1E0D9F8F8]);
              if (v6 <= 0x3F)
              {
                type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for ServerFallbackReason?, (void (*)(uint64_t))MEMORY[0x1E0D9ED60]);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for ResultCandidateState.LoggingMetadata(319);
                  if (v8 <= 0x3F)
                    swift_updateClassMetadata2();
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t method lookup function for ResultCandidateState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ResultCandidateState.nlUserParses.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of ResultCandidateState.nlUserParses.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of ResultCandidateState.nlUserParses.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of ResultCandidateState.nlLanguageVariantResult.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of ResultCandidateState.nlLanguageVariantResult.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of ResultCandidateState.nlLanguageVariantResult.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of ResultCandidateState.nlResponseVariantResult.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of ResultCandidateState.nlResponseVariantResult.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of ResultCandidateState.nlResponseVariantResult.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of ResultCandidateState.pommesInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of ResultCandidateState.pommesInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of ResultCandidateState.pommesInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of ResultCandidateState.processingStatus.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of ResultCandidateState.processingStatus.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of ResultCandidateState.processingStatus.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of ResultCandidateState.flowOutputList.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of ResultCandidateState.flowOutputList.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of ResultCandidateState.flowOutputList.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of ResultCandidateState.serverContextUpdateCandidate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of ResultCandidateState.serverContextUpdateCandidate.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of ResultCandidateState.serverContextUpdateCandidate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of ResultCandidateState.selected.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of ResultCandidateState.selected.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of ResultCandidateState.selected.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of ResultCandidateState.preExecutionDecision.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of ResultCandidateState.preExecutionDecision.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of ResultCandidateState.preExecutionDecision.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t dispatch thunk of ResultCandidateState.preExcutionRuleType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t dispatch thunk of ResultCandidateState.preExcutionRuleType.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of ResultCandidateState.preExcutionRuleType.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of ResultCandidateState.mitigationDecision.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of ResultCandidateState.mitigationDecision.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of ResultCandidateState.mitigationDecision.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t dispatch thunk of ResultCandidateState.nlResponseStatusCode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of ResultCandidateState.nlResponseStatusCode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t dispatch thunk of ResultCandidateState.nlResponseStatusCode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

uint64_t dispatch thunk of ResultCandidateState.overrideFTMAsPerServer.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of ResultCandidateState.overrideFTMAsPerServer.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of ResultCandidateState.overrideFTMAsPerServer.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallback.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallback.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallback.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of ResultCandidateState.infoDomainFallback.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of ResultCandidateState.infoDomainFallback.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t dispatch thunk of ResultCandidateState.infoDomainFallback.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of ResultCandidateState.fallbackParse.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of ResultCandidateState.fallbackParse.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of ResultCandidateState.fallbackParse.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallbackReason.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 664))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallbackReason.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 672))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallbackReason.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 680))();
}

uint64_t dispatch thunk of ResultCandidateState.voiceIdScore.getter()
{
  uint64_t v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 712))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ResultCandidateState.voiceIdScore.setter(unint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v1 + 720))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ResultCandidateState.voiceIdScore.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 728))();
}

uint64_t dispatch thunk of ResultCandidateState.voiceIdClassification.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 736))();
}

uint64_t dispatch thunk of ResultCandidateState.voiceIdClassification.setter(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 744))(a1, a2 & 1);
}

uint64_t dispatch thunk of ResultCandidateState.voiceIdClassification.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 752))();
}

uint64_t dispatch thunk of ResultCandidateState.lowScoreThreshold.getter()
{
  uint64_t v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 760))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ResultCandidateState.lowScoreThreshold.setter(unint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v1 + 768))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of ResultCandidateState.lowScoreThreshold.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 776))();
}

uint64_t dispatch thunk of ResultCandidateState.__allocating_init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7, unint64_t a8)
{
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, unint64_t))(v8 + 792))(a1, a2, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32), a6, a7 & 1, a8 | ((HIDWORD(a8) & 1) << 32));
}

uint64_t dispatch thunk of ResultCandidateState.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 800))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallbackContextId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 808))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallbackContextId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 816))();
}

uint64_t dispatch thunk of ResultCandidateState.serverFallbackContextId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 824))();
}

uint64_t dispatch thunk of ResultCandidateState.commitSignpostID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 832))();
}

uint64_t dispatch thunk of ResultCandidateState.commitSignpostID.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 840))();
}

uint64_t dispatch thunk of ResultCandidateState.commitSignpostID.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 848))();
}

uint64_t dispatch thunk of ResultCandidateState.utteranceIfAvailable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 856))();
}

uint64_t dispatch thunk of ResultCandidateState.speechContextIfApplicable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 864))();
}

uint64_t dispatch thunk of ResultCandidateState.trpContextIfApplicable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 872))();
}

uint64_t dispatch thunk of ResultCandidateState.directActionContextIfApplicable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 880))();
}

uint64_t type metadata accessor for SpeechContext()
{
  return objc_opt_self();
}

uint64_t method lookup function for SpeechContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SpeechContext.speechPackage.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of SpeechContext.repetitionResults.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of SpeechContext.repetitionResults.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of SpeechContext.repetitionResults.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of SpeechContext.endpointMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SpeechContext.endpointMode.setter(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 152))(a1, a2 & 1);
}

uint64_t dispatch thunk of SpeechContext.endpointMode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SpeechContext.__allocating_init(speechPackage:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of SpeechContext.utterance.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t method lookup function for TRPContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TRPContext.selectedTCUId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of TRPContext.selectedTCUId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of TRPContext.selectedTCUId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of TRPContext.pommesTCUId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of TRPContext.pommesTCUId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of TRPContext.pommesTCUId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of TRPContext.selectedTCUPackage.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of TRPContext.__allocating_init(requestMessage:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t destroy for DirectActionContext()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for DirectActionContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DirectActionContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DirectActionContext(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DirectActionContext(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DirectActionContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DirectActionContext()
{
  return &type metadata for DirectActionContext;
}

uint64_t destroy for TextContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for TextContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TextContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for TextContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TextContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextContext()
{
  return &type metadata for TextContext;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResultCandidateState.LoggingMetadata(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for OSSignpostID();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t destroy for ResultCandidateState.LoggingMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for OSSignpostID();
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

char *initializeWithCopy for ResultCandidateState.LoggingMetadata(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for OSSignpostID();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithCopy for ResultCandidateState.LoggingMetadata(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for OSSignpostID();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

char *initializeWithTake for ResultCandidateState.LoggingMetadata(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for OSSignpostID();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithTake for ResultCandidateState.LoggingMetadata(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for OSSignpostID();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResultCandidateState.LoggingMetadata()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4E6D9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ResultCandidateState.LoggingMetadata()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4E6DA5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for ResultCandidateState.LoggingMetadata()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, &lazy cache variable for type metadata for OSSignpostID?, (void (*)(uint64_t))MEMORY[0x1E0DF2118]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t RunLocation.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6F69747563657845;
  else
    return 0xD000000000000010;
}

uint64_t static RunLocation.convert(aceRunLocation:)(uint64_t a1, void *a2)
{
  return specialized static RunLocation.convert(aceRunLocation:)(a1, a2) & 1;
}

SiriKitRuntime::RunLocation_optional __swiftcall RunLocation.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  SiriKitRuntime::RunLocation_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RunLocation.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = SiriKitRuntime_RunLocation_executionDevice;
  else
    v4.value = SiriKitRuntime_RunLocation_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RunLocation(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x6F69747563657845;
  else
    v3 = 0xD000000000000010;
  if (v2)
    v4 = 0x80000001B4EF4940;
  else
    v4 = 0xEF6563697665446ELL;
  if (*a2)
    v5 = 0x6F69747563657845;
  else
    v5 = 0xD000000000000010;
  if (*a2)
    v6 = 0xEF6563697665446ELL;
  else
    v6 = 0x80000001B4EF4940;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RunLocation()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RunLocation()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RunLocation()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance RunLocation@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RunLocation.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RunLocation(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0xD000000000000010;
  if (*v1)
    v2 = 0x6F69747563657845;
  v3 = 0x80000001B4EF4940;
  if (*v1)
    v3 = 0xEF6563697665446ELL;
  *a1 = v2;
  a1[1] = v3;
}

unint64_t lazy protocol witness table accessor for type RunLocation and conformance RunLocation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RunLocation and conformance RunLocation;
  if (!lazy protocol witness table cache variable for type RunLocation and conformance RunLocation)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for RunLocation, &type metadata for RunLocation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RunLocation and conformance RunLocation);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for RunLocation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B4E6DFB4 + 4 * byte_1B4EEE255[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B4E6DFE8 + 4 * asc_1B4EEE250[v4]))();
}

uint64_t sub_1B4E6DFE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E6DFF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4E6DFF8);
  return result;
}

uint64_t sub_1B4E6E004(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4E6E00CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B4E6E010(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E6E018(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RunLocation()
{
  return &type metadata for RunLocation;
}

uint64_t RunSiriKitExecutorProcessor.__allocating_init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v26;

  swift_allocObject();
  v26 = specialized RunSiriKitExecutorProcessor.init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(a3);

  return v26;
}

uint64_t RSKESource.rawValue.getter(char a1)
{
  if (!a1)
    return 0x6C61636F6CLL;
  if (a1 == 1)
    return 0x65746F6D6572;
  return 0x726576726573;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RSKESource(_BYTE *a1, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  v2 = *a1;
  v3 = 0x65746F6D6572;
  if (v2 != 1)
    v3 = 0x726576726573;
  if (*a1)
    v4 = v3;
  else
    v4 = 0x6C61636F6CLL;
  if (v2)
    v5 = 0xE600000000000000;
  else
    v5 = 0xE500000000000000;
  v6 = 0x65746F6D6572;
  if (*a2 != 1)
    v6 = 0x726576726573;
  if (*a2)
    v7 = v6;
  else
    v7 = 0x6C61636F6CLL;
  if (*a2)
    v8 = 0xE600000000000000;
  else
    v8 = 0xE500000000000000;
  if (v4 == v7 && v5 == v8)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RSKESource()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RSKESource()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RSKESource()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance RSKESource@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized RSKESource.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RSKESource(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0x65746F6D6572;
  if (v2 != 1)
    v4 = 0x726576726573;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x6C61636F6CLL;
  if (!v5)
    v3 = 0xE600000000000000;
  *a1 = v6;
  a1[1] = v3;
}

id RunSiriKitExecutorProcessor.command.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id RunSiriKitExecutorProcessor.executionContext.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

uint64_t RunSiriKitExecutorProcessor.reply.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(v1);
  return v1;
}

uint64_t RunSiriKitExecutorProcessor.executionOutputSubmitter.getter()
{
  return swift_retain();
}

uint64_t RunSiriKitExecutorProcessor.executionClient.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 56, a1);
}

uint64_t RunSiriKitExecutorProcessor.contextUpdater.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + 96, a1, &demangling cache variable for type metadata for ContextUpdating?);
}

uint64_t RunSiriKitExecutorProcessor.requestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RunSiriKitExecutorProcessor.assistantId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RunSiriKitExecutorProcessor.source.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 168);
}

uint64_t RunSiriKitExecutorProcessor.requestDispatcherServiceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RunSiriKitExecutorProcessor.instrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t RunSiriKitExecutorProcessor.requestType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestType;
  v4 = type metadata accessor for RequestType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RunSiriKitExecutorProcessor.sessionId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_sessionId, a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t RunSiriKitExecutorProcessor.messagePublisher.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_messagePublisher, a1);
}

uint64_t RunSiriKitExecutorProcessor.isMuxEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_isMuxEnabled);
}

uint64_t RunSiriKitExecutorProcessor.plannerInvocationId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_plannerInvocationId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for RunSiriKitExecutorProcessor.userId : RunSiriKitExecutorProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 280))(v6);
}

uint64_t RunSiriKitExecutorProcessor.userId.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userId;
  swift_beginAccess();
  outlined assign with take of UserID?(a1, v3);
  return swift_endAccess();
}

uint64_t (*RunSiriKitExecutorProcessor.userId.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RunSiriKitExecutorProcessor.outputCounter.setter(int a1)
{
  uint64_t v1;
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_outputCounter);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*RunSiriKitExecutorProcessor.loggedStartOfCall.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t RunSiriKitExecutorProcessor.resultCandidateId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_resultCandidateId);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*RunSiriKitExecutorProcessor.resultCandidateId.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*RunSiriKitExecutorProcessor.requestFinished.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

void key path setter for RunSiriKitExecutorProcessor.flowPluginInfo : RunSiriKitExecutorProcessor(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_flowPluginInfo);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

uint64_t RunSiriKitExecutorProcessor.asyncWork.getter()
{
  return swift_retain();
}

uint64_t RunSiriKitExecutorProcessor.init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v27;

  v27 = specialized RunSiriKitExecutorProcessor.init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(a3);

  return v27;
}

uint64_t RunSiriKitExecutorProcessor.isGestureInvocation(rske:)(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;

  v1 = objc_msgSend(a1, sel_parse);
  if (v1
    && (v2 = v1, v3 = objc_msgSend(v1, sel_directInvocation), v2, v3)
    && (v4 = objc_msgSend(v3, sel_invocationIdentifier), v3, v4))
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

    if (v5 == static SiriKitDirectInvocationPayloads.headGestureIdentifier.getter() && v7 == v8)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    else
    {
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "Unable to get the payload identifier, not a gesture invocation", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    return 0;
  }
}

Swift::Void __swiftcall RunSiriKitExecutorProcessor.handleCancel()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *oslog;
  uint64_t v22;

  v1 = v0;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "Cancelling RSKE..", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  if (((*(uint64_t (**)(void))(*v1 + 368))() & 1) != 0)
  {
    oslog = Logger.logObject.getter();
    v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1B4BE6000, oslog, v6, "RSKE request already finished. Ignoring cancellation..", v7, 2u);
      MEMORY[0x1B5E44758](v7, -1, -1);
    }

  }
  else
  {
    if (v1[18])
    {
      v8 = v1[17];
      v9 = v1[18];
    }
    else
    {
      v8 = 0;
      v9 = 0xE000000000000000;
    }
    type metadata accessor for CancelExecutionTurn();
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = v9;
    v11 = v1[10];
    v12 = v1[11];
    __swift_project_boxed_opaque_existential_1(v1 + 7, v11);
    v13 = *(_QWORD *)((char *)v1
                    + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_rskeProcessorExecutionDelegate);
    v14 = *(void (**)(uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v12 + 40);
    swift_bridgeObjectRetain();
    v14(v10, v13, &protocol witness table for RunSiriKitExecutorProcessorExecutionDelegate, v11, v12);
    swift_retain_n();
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v22 = v18;
      *(_DWORD *)v17 = 136315138;
      v19 = CancelExecutionTurn.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v15, v16, "Successfully sent: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v18, -1, -1);
      MEMORY[0x1B5E44758](v17, -1, -1);
      swift_release();

    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(uint64_t))(*v1 + 376))(1);
  }
}

Swift::Void __swiftcall RunSiriKitExecutorProcessor.handleRuntimeError(error:)(NSError *error)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void (*v10)(_QWORD, NSError *);
  NSObject *oslog;

  v2 = v1;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Handling Runtime error for RSKE", v7, 2u);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  if (((*(uint64_t (**)(void))(*v2 + 368))() & 1) != 0)
  {
    oslog = Logger.logObject.getter();
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1B4BE6000, oslog, v8, "RSKE request already finished. Ignoring runtime error..", v9, 2u);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

  }
  else
  {
    v10 = (void (*)(_QWORD, NSError *))v2[4];
    if (v10)
      v10(0, error);
    (*(void (**)(uint64_t))(*v2 + 376))(1);
  }
}

uint64_t closure #1 in closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[13] = a8;
  v8[14] = v10;
  v8[11] = a6;
  v8[12] = a7;
  v8[9] = a4;
  v8[10] = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD);
  _DWORD *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  v1 = *(_QWORD **)(v0 + 72);
  v2 = v1[18];
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 80);
    v3 = *(_QWORD *)(v0 + 88);
    v5 = v1[17];
    v6 = v1[23];
    v7 = (*(uint64_t (**)(void))(*v1 + 296))();
    (*(void (**)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v6 + 160))(v7, 1, v4 != 0, v5, v2, 0, 0, v3);
    v8 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))(*v1 + 312))(v0 + 16);
    if (!__OFADD__(*v9, 1))
    {
      ++*v9;
      v8(v0 + 16, 0);
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_10;
  }
  if (one-time initialization token for conversationBridge != -1)
LABEL_10:
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1B4BE6000, v11, v12, "Failed to find requestId for logging self message", v13, 2u);
    MEMORY[0x1B5E44758](v13, -1, -1);
  }

LABEL_8:
  (*(void (**)(_QWORD, _QWORD))(v0 + 96))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t RunSiriKitExecutorProcessor.acquireConversationUserInput(forUserId:requestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v12 = v10;
    *(_DWORD *)v9 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000038, 0x80000001B4EF8A60, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v7, v8, "Cannot do %s for RSKE initiated execution", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }

  return a5(0);
}

uint64_t RunSiriKitExecutorProcessor.close(withExecutionOutput:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 488))(a1, 0);
}

void RunSiriKitExecutorProcessor.close(withExecutionOutput:errorString:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v23 = v4;
    v12 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v24 = v21;
    *(_DWORD *)v12 = 136315138;
    v22 = a3;
    v13 = a2;
    v14 = objc_msgSend(v9, sel_debugDescription);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;

    a2 = v13;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v24);
    a3 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v4 = v23;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "<<<--- %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v21, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);

  }
  else
  {

  }
  if (((*(uint64_t (**)(void))(*(_QWORD *)v4 + 368))() & 1) != 0)
  {
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1B4BE6000, v18, v19, "Ignoring close() because request already finished", v20, 2u);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }

  }
  else
  {
    RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(v9, a2, a3, 0);
  }
}

uint64_t RunSiriKitExecutorProcessor.fallbackToServer(forResultCandidateId:serverFallbackReason:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = v0;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "Execution requested server fallback from an RSKE. Returning a RunSiriKitExecutorCompleted with needsServerExecution=true", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  specialized static RunSiriKitExecutorProcessor.replyRunSiriKitExecutorCompleted(forCommand:needsUserInput:needsServerExecution:replyHandler:)(*(void **)(v1 + 16), 0, 1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 376))(1);
  return (*(uint64_t (**)(void))(*(_QWORD *)v1 + 552))();
}

Swift::Void __swiftcall RunSiriKitExecutorProcessor.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v2 = v1;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1B4BE6000, v4, v5, "Execution requested fallback to info domain from an RSKE. Returning a RunSiriKitExecutorCompleted with needsServerExecution=true", v6, 2u);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }

  specialized static RunSiriKitExecutorProcessor.replyRunSiriKitExecutorCompleted(forCommand:needsUserInput:needsServerExecution:replyHandler:)(*(void **)(v2 + 16), 0, 1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 376))(1);
  (*(void (**)(void))(*(_QWORD *)v2 + 552))();
}

uint64_t closure #1 in RunSiriKitExecutorProcessor.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *MEMORY[0x1E0D9E668];
  v10 = type metadata accessor for MessageSource();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  FlowPluginInfoMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  FlowPluginInfoMessage.Builder.assistantId.setter();
  outlined init with copy of ReferenceResolutionClientProtocol?(a2 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_sessionId, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  FlowPluginInfoMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  FlowPluginInfoMessage.Builder.requestId.setter();
  FlowPluginInfoMessage.Builder.resultCandidateId.setter();
  FlowPluginInfoMessage.Builder.supportsOnDeviceNL.setter();
  return FlowPluginInfoMessage.Builder.isPersonalRequest.setter();
}

uint64_t closure #1 in closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[12] = a7;
  v8[13] = a8;
  v8[10] = a5;
  v8[11] = a6;
  v8[9] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

void (*closure #1 in closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)())(uint64_t, _QWORD)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void (*result)(uint64_t, _QWORD);
  _DWORD *v9;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD **)(v0 + 72);
  v6 = v5[23];
  v7 = (*(uint64_t (**)(void))(*v5 + 296))();
  (*(void (**)(uint64_t, uint64_t, BOOL, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v6 + 160))(v7, 1, v4 != 0, v3, v2, 0, 0, v1);
  result = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))(*v5 + 312))(v0 + 16);
  if (__OFADD__(*v9, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v9;
    result(v0 + 16, 0);
    return (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t closure #1 in RunSiriKitExecutorProcessor.safelyCloseContextUpdater()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 120) = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v4 + 128) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in RunSiriKitExecutorProcessor.safelyCloseContextUpdater()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 120) + 96, v0 + 56, &demangling cache variable for type metadata for ContextUpdating?);
  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(_QWORD *)(v0 + 120);
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), v0 + 16);
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
    *(_QWORD *)(v0 + 136) = v2;
    v5 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v2 + 136) + *(_QWORD *)(*(_QWORD *)v2 + 136));
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v3;
    *v3 = v0;
    v3[1] = closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater();
    return v5();
  }
  else
  {
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ContextUpdating?);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t specialized RunSiriKitExecutorProcessor.init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v30;
  _QWORD *v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  void *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t Strong;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v54;

  v25 = v24;
  v54 = v24 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_userId;
  v30 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v54, 1, 1, v30);
  *(_BYTE *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_loggedStartOfCall) = 0;
  v31 = (_QWORD *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_resultCandidateId);
  *v31 = 0;
  v31[1] = 0;
  *(_BYTE *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestFinished) = 0;
  v32 = (void **)(v24 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_flowPluginInfo);
  *v32 = 0;
  v33 = OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_asyncWork;
  type metadata accessor for ConcurrentTaskPool();
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v35 = swift_allocObject();
  *(_DWORD *)(v35 + 16) = 0;
  *(_QWORD *)(v34 + 24) = v35;
  *(_QWORD *)(v25 + v33) = v34;
  *(_QWORD *)(v25 + 16) = a1;
  *(_QWORD *)(v25 + 24) = a2;
  *(_QWORD *)(v25 + 32) = a3;
  *(_QWORD *)(v25 + 40) = a4;
  *(_QWORD *)(v25 + 48) = a5;
  outlined init with copy of ReferenceResolutionClientProtocol(a6, v25 + 56);
  outlined init with copy of ReferenceResolutionClientProtocol?(a7, v25 + 96, &demangling cache variable for type metadata for ContextUpdating?);
  *(_BYTE *)(v25 + 168) = a10;
  *(_QWORD *)(v25 + 152) = a8;
  *(_QWORD *)(v25 + 160) = a9;
  *(_QWORD *)(v25 + 136) = a11;
  *(_QWORD *)(v25 + 144) = a12;
  *(_DWORD *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_outputCounter) = 0;
  *(_QWORD *)(v25 + 176) = a14;
  *(_QWORD *)(v25 + 184) = a13;
  swift_beginAccess();
  *v31 = a15;
  v31[1] = a16;
  v36 = a1;
  v37 = a2;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(a3);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v38 = *v32;
  *v32 = a17;
  v39 = a17;

  v40 = v25 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_requestType;
  v41 = type metadata accessor for RequestType();
  v42 = *(_QWORD *)(v41 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v40, a18, v41);
  swift_beginAccess();
  outlined assign with copy of UserID?(a19, v54);
  swift_endAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(a20, v25 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_sessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v43 = (_QWORD *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_plannerInvocationId);
  *v43 = a21;
  v43[1] = a22;
  outlined init with copy of ReferenceResolutionClientProtocol(a23, v25 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_messagePublisher);
  *(_BYTE *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_isMuxEnabled) = a24;
  type metadata accessor for RunSiriKitExecutorProcessorExecutionDelegate();
  v44 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v44 + 24) = a14;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime27RunSiriKitExecutorProcessor_rskeProcessorExecutionDelegate) = v44;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  swift_unknownObjectRetain();
  swift_release();
  if (Strong)
  {
    v46 = v42;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.conversationBridge);
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v50 = 0;
      _os_log_impl(&dword_1B4BE6000, v48, v49, "rskeProcessor was already set on RunSiriKitExecutorProcessorExecutionDelegate ignoring this operation", v50, 2u);
      MEMORY[0x1B5E44758](v50, -1, -1);
    }

    v39 = v48;
    v42 = v46;
  }
  else
  {
    swift_weakAssign();
  }

  __swift_destroy_boxed_opaque_existential_1(a23);
  outlined destroy of ReferenceResolutionClientProtocol?(a20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?(a19, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(a18, v41);
  outlined destroy of ReferenceResolutionClientProtocol?(a7, &demangling cache variable for type metadata for ContextUpdating?);
  __swift_destroy_boxed_opaque_existential_1(a6);
  return v25;
}

unint64_t specialized RSKESource.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RSKESource.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t outlined assign with take of UserID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B4E702F4()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RunSiriKitExecutorProcessor.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in RunSiriKitExecutorProcessor.flowPluginWillExecute(flowPluginInfo:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1B4E70330()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RunSiriKitExecutorProcessor.safelyCloseContextUpdater()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RunSiriKitExecutorProcessor.safelyCloseContextUpdater()(a1, v4, v5, v6);
}

unint64_t lazy protocol witness table accessor for type RSKESource and conformance RSKESource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RSKESource and conformance RSKESource;
  if (!lazy protocol witness table cache variable for type RSKESource and conformance RSKESource)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for RSKESource, &type metadata for RSKESource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RSKESource and conformance RSKESource);
  }
  return result;
}

uint64_t sub_1B4E70410(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 272))();
}

uint64_t sub_1B4E7043C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 296))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E7046C(unsigned int *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 304))(*a1);
}

uint64_t sub_1B4E70498@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 320))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4E704CC(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 328))(*a1);
}

uint64_t sub_1B4E704F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 344))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4E70528(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 352);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4E7056C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 368))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4E705A0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 376))(*a1);
}

uint64_t sub_1B4E705CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 392))();
  *a2 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for RSKESource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B4E7064C + 4 * byte_1B4EEE315[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B4E70680 + 4 * asc_1B4EEE310[v4]))();
}

uint64_t sub_1B4E70680(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E70688(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4E70690);
  return result;
}

uint64_t sub_1B4E7069C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4E706A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B4E706A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E706B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RSKESource()
{
  return &type metadata for RSKESource;
}

uint64_t ObjC metadata update function for RunSiriKitExecutorProcessor()
{
  return type metadata accessor for RunSiriKitExecutorProcessor();
}

void type metadata completion function for RunSiriKitExecutorProcessor()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for RequestType();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for UserID?, (void (*)(uint64_t))MEMORY[0x1E0D9EF80]);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for RunSiriKitExecutorProcessor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.userId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.userId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.userId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.outputCounter.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.outputCounter.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.outputCounter.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.loggedStartOfCall.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.loggedStartOfCall.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.loggedStartOfCall.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.resultCandidateId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.resultCandidateId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.resultCandidateId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.requestFinished.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.requestFinished.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.requestFinished.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.flowPluginInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.__allocating_init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 416))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.isGestureInvocation(rske:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.handle(sendStartExecutionTurn:overrideRequestContextData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.handleCancel()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.handleRuntimeError(error:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.logStartOfExecutionForRSKE(requestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.submit(executionOutput:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.acquireConversationUserInput(forUserId:requestId:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.close(withExecutionOutput:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.close(withExecutionOutput:needsUserInput:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.close(withExecutionOutput:errorString:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.fallbackToServer(forResultCandidateId:serverFallbackReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.fallbackToInfoDomainResults(forResultCandidateId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.fetchSpeechInfo(reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.flowPluginWillExecute(flowPluginInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.makeRequestContextData()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessor.safelyCloseContextUpdater()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t sub_1B4E70A10()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1B4E70A3C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in RunSiriKitExecutorProcessor.synchronizedClose(executionOutput:errorString:needsUserInput:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1B4E70B14()
{
  id *v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in RunSiriKitExecutorProcessor.submit(executionOutput:completion:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.__allocating_init(requestDispatcherServiceHelper:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v2 + 24) = a1;
  return v2;
}

void RunSiriKitExecutorProcessorExecutionDelegate.setRSKEProcessor(rskeProcessor:)()
{
  uint64_t Strong;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  swift_release();
  if (Strong)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1B4BE6000, v2, v3, "rskeProcessor was already set on RunSiriKitExecutorProcessorExecutionDelegate ignoring this operation", v4, 2u);
      MEMORY[0x1B5E44758](v4, -1, -1);
    }

  }
  else
  {
    swift_weakAssign();
  }
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.rskeProcessor.getter()
{
  swift_beginAccess();
  return swift_weakLoadStrong();
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.init(requestDispatcherServiceHelper:)(uint64_t a1)
{
  uint64_t v1;

  swift_weakInit();
  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

void RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:)(void *a1)
{
  uint64_t Strong;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *))(*(_QWORD *)Strong + 480))(a1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    v4 = a1;
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v11 = v8;
      *(_DWORD *)v7 = 136315138;
      v9 = *(_QWORD *)&v4[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      v10 = *(_QWORD *)&v4[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v5, v6, "RunSiriKitExecutorProcessor already released, ignoring close of %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v7, -1, -1);

    }
    else
    {

    }
  }
}

void RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:errorString:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t Strong;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)Strong + 496))(a1, a2, a3);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    v8 = a1;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v15 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = *(_QWORD *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      v14 = *(_QWORD *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v9, v10, "RunSiriKitExecutorProcessor already released, ignoring close of %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v12, -1, -1);
      MEMORY[0x1B5E44758](v11, -1, -1);

    }
    else
    {

    }
  }
}

void RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)()
{
  specialized RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)(0xD000000000000039, 0x80000001B4EF8A00, "%s for RSKE initiated execution not supported");
}

void RunSiriKitExecutorProcessorExecutionDelegate.fallbackToServer(forResultCandidateId:serverFallbackReason:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t Strong;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)Strong + 504))(a1, a2, a3);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v13 = v11;
      *(_DWORD *)v10 = 136315138;
      if (a2)
      {
        v12 = a2;
      }
      else
      {
        a1 = 7104878;
        v12 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v8, v9, "RunSiriKitExecutorProcessor already released, ignoring fallbackToServer of %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v11, -1, -1);
      MEMORY[0x1B5E44758](v10, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

Swift::Void __swiftcall RunSiriKitExecutorProcessorExecutionDelegate.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t Strong;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  object = forResultCandidateId.value._object;
  countAndFlagsBits = forResultCandidateId.value._countAndFlagsBits;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, void *))(*(_QWORD *)Strong + 512))(countAndFlagsBits, object);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v10 = v8;
      *(_DWORD *)v7 = 136315138;
      if (object)
      {
        v9 = (unint64_t)object;
      }
      else
      {
        countAndFlagsBits = 7104878;
        v9 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v5, v6, "RunSiriKitExecutorProcessor already released, ignoring fallbackToInfoDomainResults of %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v7, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void RunSiriKitExecutorProcessorExecutionDelegate.fallbackToIntelligenceFlow(prescribedTool:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "RunSiriKitExecutorProcessor does not support fallbackToIntelligenceFlow", v2, 2u);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

}

void RunSiriKitExecutorProcessorExecutionDelegate.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  static ServiceBridgeDelegate.prepareForAudioHandoffDefault(_:completion:)(*(void **)(v2 + 24), a1, a2, *(_QWORD *)v2, (uint64_t)&protocol witness table for RunSiriKitExecutorProcessorExecutionDelegate);
}

void RunSiriKitExecutorProcessorExecutionDelegate.prepareForAudioHandoffFailed(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  static ServiceBridgeDelegate.prepareForAudioHandoffFailedDefault(_:completion:)(*(void **)(v2 + 24), a1, a2, *(_QWORD *)v2, (uint64_t)&protocol witness table for RunSiriKitExecutorProcessorExecutionDelegate);
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD))
{
  return specialized RunSiriKitExecutorProcessorExecutionDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(a7);
}

Swift::Void __swiftcall RunSiriKitExecutorProcessorExecutionDelegate.closeServerRequest(forExecutionRequestId:)(Swift::String forExecutionRequestId)
{
  specialized RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)(0xD00000000000002ALL, 0x80000001B4EF8B10, "Need not do %s for RSKE initiated execution");
}

Swift::Void __swiftcall RunSiriKitExecutorProcessorExecutionDelegate.actionCandidatesGenerated(_:rcId:)(Swift::OpaquePointer _, Swift::String rcId)
{
  specialized RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)(0xD000000000000022, 0x80000001B4EF8B60, "Need not do %s for RSKE initiated execution");
}

void RunSiriKitExecutorProcessorExecutionDelegate.willExecute(executionInputInfo:)()
{
  specialized RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)(0xD000000000000020, 0x80000001B4EF8B90, "Need not do %s for RSKE initiated execution");
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return static ServiceBridgeDelegate.defaultSubmitExternalActivationRequest(withRequestInfo:serviceHelper:completion:)(a1, *(id *)(v3 + 24), a2, a3);
}

uint64_t RunSiriKitExecutorProcessorExecutionDelegate.deinit()
{
  uint64_t v0;

  swift_weakDestroy();
  swift_unknownObjectRelease();
  return v0;
}

void protocol witness for ServiceBridgeDelegate.close(withExecutionOutput:errorString:shouldFailRequest:) in conformance RunSiriKitExecutorProcessorExecutionDelegate()
{
  specialized RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)(0xD000000000000039, 0x80000001B4EF8A00, "%s for RSKE initiated execution not supported");
}

void protocol witness for ServiceBridgeDelegate.fallbackToIntelligenceFlow(prescribedTool:) in conformance RunSiriKitExecutorProcessorExecutionDelegate()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "RunSiriKitExecutorProcessor does not support fallbackToIntelligenceFlow", v2, 2u);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

}

void protocol witness for ServiceBridgeDelegate.prepareForAudioHandoff(completion:) in conformance RunSiriKitExecutorProcessorExecutionDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  static ServiceBridgeDelegate.prepareForAudioHandoffDefault(_:completion:)(*(void **)(v2 + 24), a1, a2, *(_QWORD *)v2, (uint64_t)&protocol witness table for RunSiriKitExecutorProcessorExecutionDelegate);
}

void protocol witness for ServiceBridgeDelegate.prepareForAudioHandoffFailed(completion:) in conformance RunSiriKitExecutorProcessorExecutionDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  static ServiceBridgeDelegate.prepareForAudioHandoffFailedDefault(_:completion:)(*(void **)(v2 + 24), a1, a2, *(_QWORD *)v2, (uint64_t)&protocol witness table for RunSiriKitExecutorProcessorExecutionDelegate);
}

uint64_t protocol witness for ServiceBridgeDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:) in conformance RunSiriKitExecutorProcessorExecutionDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD))
{
  return specialized RunSiriKitExecutorProcessorExecutionDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(a7);
}

void protocol witness for ServiceBridgeDelegate.actionCandidatesGenerated(_:rcId:) in conformance RunSiriKitExecutorProcessorExecutionDelegate()
{
  specialized RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)(0xD000000000000022, 0x80000001B4EF8B60, "Need not do %s for RSKE initiated execution");
}

void protocol witness for ServiceBridgeDelegate.willExecute(executionInputInfo:) in conformance RunSiriKitExecutorProcessorExecutionDelegate()
{
  specialized RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)(0xD000000000000020, 0x80000001B4EF8B90, "Need not do %s for RSKE initiated execution");
}

uint64_t protocol witness for ServiceBridgeDelegate.submitExternalActivationRequest(withRequestInfo:completion:) in conformance RunSiriKitExecutorProcessorExecutionDelegate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return static ServiceBridgeDelegate.defaultSubmitExternalActivationRequest(withRequestInfo:serviceHelper:completion:)(a1, *(id *)(v3 + 24), a2, a3);
}

uint64_t specialized RunSiriKitExecutorProcessorExecutionDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t (*a1)(_QWORD))
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v8;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v8 = v6;
    *(_DWORD *)v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000060, 0x80000001B4EF8AA0, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "Cannot do %s for RSKE initiated execution", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  return a1(0);
}

uint64_t specialized RunSiriKitExecutorProcessorExecutionDelegate.fetchSelfReflectionDecision(reply:)(uint64_t (*a1)(uint64_t *))
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v8;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v8 = v6;
    *(_DWORD *)v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x80000001B4EF8BC0, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "Need not do %s for RSKE initiated execution", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  LOBYTE(v8) = 2;
  return a1(&v8);
}

void specialized RunSiriKitExecutorProcessorExecutionDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)(uint64_t a1, unint64_t a2, const char *a3)
{
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *oslog;
  uint64_t v11;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v11 = v9;
    *(_DWORD *)v8 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, oslog, v7, a3, v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);

  }
  else
  {

  }
}

uint64_t specialized RunSiriKitExecutorProcessorExecutionDelegate.fetchRecentDialogs(reply:)(uint64_t (*a1)(_QWORD))
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v8;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v8 = v6;
    *(_DWORD *)v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x80000001B4EF8B40, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "Need not do %s for RSKE initiated execution", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  return a1(MEMORY[0x1E0DEE9D8]);
}

uint64_t sub_1B4E720AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_1B4E720F8()
{
  swift_beginAccess();
  return swift_weakAssign();
}

uint64_t method lookup function for RunSiriKitExecutorProcessorExecutionDelegate()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RunSiriKitExecutorProcessorExecutionDelegate.__allocating_init(requestDispatcherServiceHelper:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t NonUnderstandingError.message.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NonUnderstandingError.input.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 28));
}

uint64_t NonUnderstandingError.localizedDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NonUnderstandingError.init(message:input:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v7;

  *a5 = a1;
  a5[1] = a2;
  v7 = (char *)a5 + *(int *)(type metadata accessor for NonUnderstandingError(0, a4, a3, a4) + 28);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v7, a3, a4);
}

uint64_t type metadata accessor for NonUnderstandingError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NonUnderstandingError);
}

uint64_t RequestPaused.message.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t RequestPaused.localizedDescription.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t RequestPaused.errorDescription.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

void base witness table accessor for Error in NonUnderstandingError<A>()
{
  JUMPOUT(0x1B5E44668);
}

unint64_t lazy protocol witness table accessor for type RequestPaused and conformance RequestPaused()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPaused and conformance RequestPaused;
  if (!lazy protocol witness table cache variable for type RequestPaused and conformance RequestPaused)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for RequestPaused, &type metadata for RequestPaused);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPaused and conformance RequestPaused);
  }
  return result;
}

ValueMetadata *type metadata accessor for IllegalStateError()
{
  return &type metadata for IllegalStateError;
}

uint64_t type metadata completion function for NonUnderstandingError()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NonUnderstandingError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t destroy for NonUnderstandingError(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for NonUnderstandingError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  return a1;
}

_QWORD *assignWithCopy for NonUnderstandingError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *initializeWithTake for NonUnderstandingError(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *assignWithTake for NonUnderstandingError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for NonUnderstandingError(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B4E72734 + 4 * byte_1B4EEE5A0[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for NonUnderstandingError(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

ValueMetadata *type metadata accessor for TimedOutError()
{
  return &type metadata for TimedOutError;
}

ValueMetadata *type metadata accessor for CancelledError()
{
  return &type metadata for CancelledError;
}

ValueMetadata *type metadata accessor for RequestPaused()
{
  return &type metadata for RequestPaused;
}

id SABaseCommand.forcedBargeInResult<A>(forExpectedResponseType:)(uint64_t a1)
{
  uint64_t v2;

  objc_opt_self();
  if (swift_dynamicCastObjCClass()
    || (objc_opt_self(), swift_dynamicCastObjCClass())
    || (objc_opt_self(), swift_dynamicCastObjCClass())
    || (objc_opt_self(), swift_dynamicCastObjCClass()))
  {
    if (!a1)
      type metadata accessor for SABaseCommand();
    return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  }
  else
  {
    type metadata accessor for BargeInError();
    lazy protocol witness table accessor for type BargeInError and conformance BargeInError();
    v2 = swift_allocError();
    BargeInError.init(rawError:)();
  }
  return (id)v2;
}

BOOL SABaseCommand.isSuccessfulOnBargeIn.getter()
{
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
    return 1;
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
    return 1;
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
    return 1;
  objc_opt_self();
  return swift_dynamicCastObjCClass() != 0;
}

unint64_t lazy protocol witness table accessor for type BargeInError and conformance BargeInError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type BargeInError and conformance BargeInError;
  if (!lazy protocol witness table cache variable for type BargeInError and conformance BargeInError)
  {
    v1 = type metadata accessor for BargeInError();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0D9B718], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BargeInError and conformance BargeInError);
  }
  return result;
}

uint64_t SABaseCommand.isConfirmation.getter()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t result;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    v2 = (void *)v1;
    v3 = v0;
    v4 = objc_msgSend(v2, sel_dialogPhase);
    if (v4)
    {
      v5 = v4;
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v7;

      if (v6 != 0x616D7269666E6F43 || v8 != 0xEC0000006E6F6974)
      {
        v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();

        return v10 & 1;
      }
      swift_bridgeObjectRelease();

      return 1;
    }

    return 0;
  }
  objc_opt_self();
  v12 = swift_dynamicCastObjCClass();
  if (!v12)
    return 0;
  v13 = (void *)v12;
  v14 = v0;
  v15 = objc_msgSend(v13, sel_callbacks);
  if (v15)
  {
    v16 = v15;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAResultCallback);
    v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v17 >> 62))
      goto LABEL_11;
LABEL_41:
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    if (v18)
      goto LABEL_12;
LABEL_42:

LABEL_43:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v18;
  }
  v17 = MEMORY[0x1E0DEE9D8];
  if (MEMORY[0x1E0DEE9D8] >> 62)
    goto LABEL_41;
LABEL_11:
  v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v18)
    goto LABEL_42;
LABEL_12:
  v19 = 0;
  v32 = v17;
  v33 = v17 & 0xC000000000000001;
  v30 = v17 + 32;
  v31 = v18;
  while (1)
  {
    result = v33 ? MEMORY[0x1B5E43B94](v19, v32) : (uint64_t)*(id *)(v30 + 8 * v19);
    v20 = (void *)result;
    if (__OFADD__(v19++, 1))
      break;
    v22 = objc_msgSend((id)result, sel_commands);
    if (v22)
    {
      v23 = v22;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
      v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(v24 >> 62))
        goto LABEL_20;
    }
    else
    {
      v24 = MEMORY[0x1E0DEE9D8];
      if (!(MEMORY[0x1E0DEE9D8] >> 62))
      {
LABEL_20:
        v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v25)
          goto LABEL_21;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRetain_n();
    v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v25)
    {
LABEL_21:
      v26 = 4;
      v27 = 0;
      if ((v24 & 0xC000000000000001) != 0)
      {
LABEL_22:
        result = MEMORY[0x1B5E43B94](v27, v24);
        v28 = v27 + 1;
        if (!__OFADD__(v27, 1))
          goto LABEL_26;
      }
      else
      {
        while (1)
        {
          result = swift_unknownObjectRetain();
          v28 = v27 + 1;
          if (__OFADD__(v27, 1))
            break;
LABEL_26:
          objc_opt_self();
          if (swift_dynamicCastObjCClass())
          {
            v29 = SABaseCommand.isConfirmation.getter();
            swift_unknownObjectRelease();
            if ((v29 & 1) != 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v18 = 1;
              goto LABEL_43;
            }
            if (v28 == v25)
              goto LABEL_13;
          }
          else
          {
            swift_unknownObjectRelease();
            if (v28 == v25)
              goto LABEL_13;
          }
          v27 = ++v26 - 4;
          if ((v24 & 0xC000000000000001) != 0)
            goto LABEL_22;
        }
      }
      __break(1u);
      break;
    }
LABEL_13:
    swift_bridgeObjectRelease_n();

    if (v19 == v31)
    {

      v18 = 0;
      goto LABEL_43;
    }
  }
  __break(1u);
  return result;
}

id SAIntentGroupRunSiriKitExecutor.confirmationStateAsEnum.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  id result;
  void *v5;
  uint64_t v6;

  v3 = objc_msgSend(v1, sel_confirmationState);
  if (v3)
  {

    result = objc_msgSend(v1, sel_confirmationState);
    if (result)
    {
      v5 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      return (id)SiriKitConfirmationState.init(rawValue:)();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v6 = type metadata accessor for SiriKitConfirmationState();
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 1, 1, v6);
  }
  return result;
}

uint64_t SAIntentGroupSiriKitParameterMetadata.confirmationStatesAsEnum.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  Swift::String v18;
  Swift::String v19;
  _QWORD v20[3];
  uint64_t v21;
  unint64_t v22;
  _BYTE v23[32];
  uint64_t v24;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitConfirmationState?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SiriKitConfirmationState();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(v0, sel_confirmationStates);
  v9 = MEMORY[0x1E0DEE9D8];
  if (!v8)
    return v9;
  v10 = v8;
  v20[2] = MEMORY[0x1E0DEE9B8] + 8;
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return v9;
  }
  v24 = v9;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
  v20[1] = v11;
  v13 = v11 + 32;
  while (1)
  {
    outlined init with copy of Any(v13, (uint64_t)v23);
    outlined init with copy of Any((uint64_t)v23, (uint64_t)&v21);
    if (!swift_dynamicCast())
      break;
    SiriKitConfirmationState.init(rawValue:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
      goto LABEL_14;
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v14(v7, v3, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    v9 = v24;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1);
      v9 = v24;
    }
    v16 = *(_QWORD *)(v9 + 16);
    v15 = *(_QWORD *)(v9 + 24);
    if (v16 >= v15 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v9 = v24;
    }
    *(_QWORD *)(v9 + 16) = v16 + 1;
    v14((char *)(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v16), v7, v4);
    v24 = v9;
    v13 += 32;
    if (!--v12)
      goto LABEL_11;
  }
  v21 = 0;
  v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v18._object = (void *)0x80000001B4F00BD0;
  v18._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v18);
  _print_unlocked<A, B>(_:_:)();
  specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Extensions/SAIntentGroupSiriKitConfirmationState+Enum.swift", 128, 2, 38);
  __break(1u);
LABEL_14:
  outlined destroy of SiriKitConfirmationState?((uint64_t)v3);
  v21 = 0;
  v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v19._countAndFlagsBits = 0xD00000000000002CLL;
  v19._object = (void *)0x80000001B4F00C90;
  String.append(_:)(v19);
  _print_unlocked<A, B>(_:_:)();
  result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Extensions/SAIntentGroupSiriKitConfirmationState+Enum.swift", 128, 2, 42);
  __break(1u);
  return result;
}

uint64_t outlined destroy of SiriKitConfirmationState?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitConfirmationState?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id SAPerson.contact.getter()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C97360]), sel_init);
  v2 = objc_msgSend(v0, sel_firstName);
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

  }
  else
  {
    v4 = 0;
    v6 = 0xE000000000000000;
  }
  v7 = (void *)MEMORY[0x1B5E432E8](v4, v6);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setGivenName_, v7);

  v8 = objc_msgSend(v0, sel_firstNamePhonetic);
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0xE000000000000000;
  }
  v13 = (void *)MEMORY[0x1B5E432E8](v10, v12);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setPhoneticGivenName_, v13);

  v14 = objc_msgSend(v0, sel_middleName);
  if (v14)
  {
    v15 = v14;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

  }
  else
  {
    v16 = 0;
    v18 = 0xE000000000000000;
  }
  v19 = (void *)MEMORY[0x1B5E432E8](v16, v18);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setMiddleName_, v19);

  v20 = objc_msgSend(v0, sel_lastName);
  if (v20)
  {
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v23;

  }
  else
  {
    v22 = 0;
    v24 = 0xE000000000000000;
  }
  v25 = (void *)MEMORY[0x1B5E432E8](v22, v24);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setFamilyName_, v25);

  v26 = objc_msgSend(v0, sel_lastNamePhonetic);
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = v29;

  }
  else
  {
    v28 = 0;
    v30 = 0xE000000000000000;
  }
  v31 = (void *)MEMORY[0x1B5E432E8](v28, v30);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setPhoneticFamilyName_, v31);

  v32 = objc_msgSend(v0, sel_nickName);
  if (v32)
  {
    v33 = v32;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v36 = v35;

  }
  else
  {
    v34 = 0;
    v36 = 0xE000000000000000;
  }
  v37 = (void *)MEMORY[0x1B5E432E8](v34, v36);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setNickname_, v37);

  return v1;
}

void one-time initialization function for blockListDialogID()
{
  static SayMetricsLogger.blockListDialogID = (uint64_t)&outlined read-only object #0 of one-time initialization function for blockListDialogID;
}

{
  static ViewMetricsLogger.blockListDialogID = (uint64_t)&outlined read-only object #0 of one-time initialization function for blockListDialogID;
}

uint64_t *SayMetricsLogger.blockListDialogID.unsafeMutableAddressor()
{
  if (one-time initialization token for blockListDialogID != -1)
    swift_once();
  return &static SayMetricsLogger.blockListDialogID;
}

uint64_t static SayMetricsLogger.blockListDialogID.getter()
{
  if (one-time initialization token for blockListDialogID != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

id specialized static SayMetricsLogger.getSparseCommand(command:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v6 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D885A0]), sel_init);
  v8 = objc_msgSend(a1, sel_listenAfterSpeaking);
  objc_msgSend(v7, sel_setListenAfterSpeaking_, v8);

  v9 = objc_msgSend(a1, sel_dialogIdentifier);
  objc_msgSend(v7, sel_setDialogIdentifier_, v9);

  v10 = objc_msgSend(a1, sel_languageCode);
  objc_msgSend(v7, sel_setLanguageCode_, v10);

  objc_msgSend(v7, sel_setCanUseServerTTS_, objc_msgSend(a1, sel_canUseServerTTS));
  objc_msgSend(v7, sel_setRepeatable_, objc_msgSend(a1, sel_repeatable));
  v11 = objc_msgSend(a1, sel_dialogIdentifier);
  if (!v11)
    goto LABEL_12;
  v12 = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;

  if (one-time initialization token for blockListDialogID != -1)
    swift_once();
  v16 = static SayMetricsLogger.blockListDialogID;
  v17 = *(_QWORD *)(static SayMetricsLogger.blockListDialogID + 16);
  if (!v17)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    v21 = objc_msgSend(a1, sel_message);
    objc_msgSend(v7, sel_setMessage_, v21);

    goto LABEL_13;
  }
  v24 = v5;
  v25 = v3;
  v26 = v2;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  v18 = (uint64_t *)(v16 + 40);
  while (1)
  {
    v20 = *(v18 - 1);
    v19 = *v18;
    v29 = v13;
    v30 = v15;
    v27 = v20;
    v28 = v19;
    if ((StringProtocol.contains<A>(_:)() & 1) != 0)
      break;
    v18 += 2;
    if (!--v17)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = v25;
      v2 = v26;
      v5 = v24;
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = v25;
  v2 = v26;
  v5 = v24;
LABEL_13:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

uint64_t specialized static SayMetricsLogger.logAnalytics(command:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  _QWORD *v15;
  unint64_t v16;
  id v17;
  id v18;
  id v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _OWORD v26[2];
  __int128 v27;
  unint64_t v28;
  unint64_t v29;

  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v6 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.instrumentation);
  v8 = a1;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v24 = v2;
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v23 = v3;
    v13 = (_QWORD *)v12;
    *(_DWORD *)v11 = 138412290;
    *(_QWORD *)&v27 = v8;
    v14 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v13 = v8;

    v2 = v24;
    _os_log_impl(&dword_1B4BE6000, v9, v10, "Logging SayIt to AFAnalytics : %@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v15 = v13;
    v3 = v23;
    MEMORY[0x1B5E44758](v15, -1, -1);
    MEMORY[0x1B5E44758](v11, -1, -1);
  }
  else
  {

    v9 = v8;
  }

  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v29 = v16;
  v17 = specialized static SayMetricsLogger.getSparseCommand(command:)(v8);
  v18 = objc_msgSend(v17, sel_dictionary);
  if (v18)
  {
    v19 = v18;
    v28 = type metadata accessor for NSMutableDictionary();
    *(_QWORD *)&v27 = v19;
    outlined init with take of Any(&v27, v26);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v16;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v26, 0x6C46746E65696C43, 0xEE0077656956776FLL, isUniquelyReferenced_nonNull_native);
    v21 = v25;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0x6C46746E65696C43, 0xEE0077656956776FLL, &v27);
    outlined destroy of Any?((uint64_t)&v27);
    v21 = v29;
  }
  specialized static Log.logAFAnalytics(eventType:eventContext:)(3700, v21);

  swift_bridgeObjectRelease();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

ValueMetadata *type metadata accessor for SayMetricsLogger()
{
  return &type metadata for SayMetricsLogger;
}

void SelfReflectionAgent.createAskToRepeatAction(revealSpeech:_:)(char a1, void (*a2)(_QWORD, _QWORD, _QWORD, void *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  double v18;
  double v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  uint64_t ObjCClassFromMetadata;
  id v24;
  id v25;
  void *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  void *v33;
  void *v34;
  Class isa;
  uint64_t v36;
  void *v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  char v50;
  void (*v51)(_QWORD, _QWORD, _QWORD, void *);
  uint64_t aBlock;
  unint64_t v53;
  void (*v54)(uint64_t, void *, void *);
  void *v55;
  void (*v56)(void *, void *);
  uint64_t v57;
  uint64_t v58;

  v4 = v3;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  v51 = a2;
  v50 = a1;
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    aBlock = v12;
    *(_DWORD *)v11 = 136315138;
    v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001B4F00D50, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v9, v10, "SelfReflectionAgent.%s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v12, -1, -1);
    MEMORY[0x1B5E44758](v11, -1, -1);
  }

  v13 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 224))();
  if (v13)
  {
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 864))();
    if (v14)
    {
      v15 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 112))();
      swift_release();
      swift_release();
      v16 = objc_msgSend(v15, sel_audioAnalytics);
      if (v16)
      {
        v17 = v16;
        objc_msgSend(v16, sel_snr);
        v19 = v18;

        if (v19 <= 0.0)
        {
          v20 = 0xD000000000000029;
          v21 = "ASRUncertainty#AskToRepeatNoisyBackground";
          goto LABEL_13;
        }
      }
      else
      {

      }
    }
    else
    {
      swift_release();
    }
  }
  v20 = 0xD00000000000001ALL;
  v21 = "ASRUncertainty#AskToRepeat";
LABEL_13:
  v22 = (unint64_t)(v21 - 32) | 0x8000000000000000;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v24 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v25 = SelfReflectionAgent.createCATContext()();
  if (v25)
  {
    v26 = v25;
    v49 = v24;
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v47 = v20;
      v29 = (uint8_t *)swift_slowAlloc();
      v48 = a3;
      v30 = swift_slowAlloc();
      aBlock = v30;
      *(_DWORD *)v29 = 136315138;
      v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001B4F00D50, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v27, v28, "SelfReflectionAgent.%s CAT executing", v29, 0xCu);
      swift_arrayDestroy();
      v31 = v30;
      a3 = v48;
      MEMORY[0x1B5E44758](v31, -1, -1);
      v32 = v29;
      v20 = v47;
      MEMORY[0x1B5E44758](v32, -1, -1);
    }

    v33 = (void *)objc_opt_self();
    v34 = (void *)MEMORY[0x1B5E432E8](v20, v22);
    swift_bridgeObjectRelease();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = v51;
    *(_QWORD *)(v36 + 24) = a3;
    *(_QWORD *)(v36 + 32) = v4;
    *(_BYTE *)(v36 + 40) = v50 & 1;
    v56 = partial apply for closure #1 in SelfReflectionAgent.createAskToRepeatAction(revealSpeech:_:);
    v57 = v36;
    aBlock = MEMORY[0x1E0C809B0];
    v53 = 1107296256;
    v54 = thunk for @escaping @callee_guaranteed (@guaranteed CATResult, @guaranteed Error?) -> ();
    v55 = &block_descriptor_21;
    v37 = _Block_copy(&aBlock);
    v38 = v26;
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v33, sel_execute_catId_parameters_globals_completion_, v49, v34, isa, v38, v37);
    _Block_release(v37);

    v24 = v38;
  }
  else
  {
    swift_bridgeObjectRelease();
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc();
      v42 = swift_slowAlloc();
      v58 = v42;
      *(_DWORD *)v41 = 136315394;
      aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001B4F00D50, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v41 + 12) = 2080;
      aBlock = 0xD000000000000028;
      v53 = 0x80000001B4F00D20;
      lazy protocol witness table accessor for type SelfReflectionError and conformance SelfReflectionError();
      v43 = Error.localizedDescription.getter();
      aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v39, v40, "SelfReflectionAgent.%s error: %s", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v42, -1, -1);
      MEMORY[0x1B5E44758](v41, -1, -1);
    }

    lazy protocol witness table accessor for type SelfReflectionError and conformance SelfReflectionError();
    v45 = (void *)swift_allocError();
    *v46 = 0xD000000000000028;
    v46[1] = 0x80000001B4F00D20;
    v51(0, 0, 0, v45);

  }
}

uint64_t SelfReflectionAgent.createSiriDismissalAction()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v6;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = SelfReflectionAgent.createCloseAssitantAction(closeAssistantReason:)(v0, v1);
  swift_bridgeObjectRelease();
  v3 = SelfReflectionAgent.createCancelRequestAction()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B4EE7750;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v3;
  v6 = v4;
  specialized Array._endMutation()();
  return v6;
}

void SelfReflectionAgent.createRevealRecognizedSpeech()()
{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88590]), sel_init);
  v2 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 224);
  v3 = v2();
  v4 = (id)v3;
  if (v3)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 864))(v3);
    if (v5)
    {
      v6 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 112))(v5);
      swift_release();
      swift_release();
      v7 = objc_msgSend(v6, sel_recognition);

      if (!v7)
      {
        __break(1u);
        return;
      }
      v4 = objc_msgSend(v7, sel_aceRecognition);

    }
    else
    {
      swift_release();
      v4 = 0;
    }
  }
  objc_msgSend(v1, sel_setRecognition_, v4);

  v8 = v2();
  v9 = (void *)v8;
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    v9 = (void *)MEMORY[0x1B5E432E8](v10, v11);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v1, sel_setSpeechRecognizedAceId_, v9);

}

void thunk for @escaping @callee_guaranteed (@guaranteed CATResult, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(id, void *);
  id v6;
  id v7;

  v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(v7, a3);
  swift_release();

}

unint64_t SelfReflectionError.description.getter(uint64_t a1, void *a2)
{
  Swift::String v4;

  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  return 0xD000000000000018;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionError()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;

  v1 = *v0;
  v2 = (void *)v0[1];
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  return 0xD000000000000018;
}

id SelfReflectionAgent.createCATContext()()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v25;

  v1 = *(void **)(v0 + 32);
  v2 = objc_msgSend(v1, sel_languageCode);
  if (!v2)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19))
      goto LABEL_14;
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v25 = v21;
    *(_DWORD *)v20 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x80000001B4F00E00, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v22 = "SelfReflectionAgent.%s Unable to retrieve input language code";
    goto LABEL_13;
  }
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7 = objc_msgSend(v1, sel_outputVoice);
  if (!v7
    || (v8 = v7, v9 = objc_msgSend(v7, sel_languageCode), v8, !v9))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19))
      goto LABEL_14;
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v25 = v21;
    *(_DWORD *)v20 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x80000001B4F00E00, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v22 = "SelfReflectionAgent.%s Unable to retrieve outputVoice language code";
LABEL_13:
    _os_log_impl(&dword_1B4BE6000, v18, v19, v22, v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v21, -1, -1);
    MEMORY[0x1B5E44758](v20, -1, -1);
LABEL_14:

    return 0;
  }
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  v13 = objc_allocWithZone(MEMORY[0x1E0D1D290]);
  v14 = (void *)MEMORY[0x1B5E432E8](v4, v6);
  swift_bridgeObjectRelease();
  v15 = (void *)MEMORY[0x1B5E432E8](v10, v12);
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v13, sel_initWithInputLocale_outputVoiceLocale_, v14, v15);

  return v16;
}

void closure #1 in SelfReflectionAgent.createAskToRepeatAction(revealSpeech:_:)(void *a1, void *a2, void (*a3)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (**v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  id v28;
  id v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t (*v52)(void);
  id v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  void *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  id v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  id v78;
  Class isa;
  id v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  id v90;
  id v91;
  _QWORD *v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void (**v106)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  id v108;
  Class v109;
  void *v110;
  void *v111;
  id v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  id v115;
  uint64_t v116;
  char *v117;
  unsigned __int8 *v118;
  void (*v119)(_QWORD, _QWORD, _QWORD, _QWORD);
  char *v120;
  int v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  uint64_t v128[2];
  uint64_t v129[2];

  v121 = a6;
  v126 = a5;
  v127 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x1E0C80A78](v9);
  v120 = (char *)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NLContextUpdate();
  v124 = *(_QWORD *)(v11 - 8);
  v125 = v11;
  MEMORY[0x1E0C80A78](v11);
  v123 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_SystemDialogAct?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v17 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v122 = (char *)&v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v117 = v15;
    v22 = swift_slowAlloc();
    v118 = (unsigned __int8 *)v17;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc();
    v119 = a3;
    v25 = v24;
    v128[0] = v24;
    *(_DWORD *)v23 = 136315138;
    v129[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001B4F00D50, v128);
    v15 = v117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v20, v21, "SelfReflectionAgent.%s CAT result", v23, 0xCu);
    swift_arrayDestroy();
    v26 = v25;
    a3 = v119;
    MEMORY[0x1B5E44758](v26, -1, -1);
    v27 = v23;
    v17 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v118;
    MEMORY[0x1B5E44758](v27, -1, -1);
  }

  if (a2)
  {
    v28 = a2;
    v29 = a2;
    v30 = a2;
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc();
      v34 = swift_slowAlloc();
      v128[0] = v34;
      *(_DWORD *)v33 = 136315394;
      v129[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001B4F00D50, v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2080;
      swift_getErrorValue();
      v35 = Error.localizedDescription.getter();
      v129[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v31, v32, "SelfReflectionAgent.%s failed to produce dialog. error: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v34, -1, -1);
      MEMORY[0x1B5E44758](v33, -1, -1);
    }
    else
    {

    }
    v57 = a2;
    a3(0, 0, 0, a2);

    v58 = a2;
LABEL_20:

    return;
  }
  if (!static SystemDialogActHelper.systemAskedUserToRepeat()())
  {
    v17[7](v15, 1, 1, v16);
    goto LABEL_17;
  }
  swift_getObjectType();
  SIRINLUSystemDialogAct.toNluSystemDialogAct()();
  swift_unknownObjectRelease();
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v17[6])(v15, 1, v16) == 1)
  {
LABEL_17:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for Siri_Nlu_External_SystemDialogAct?);
    v59 = Logger.logObject.getter();
    v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = swift_slowAlloc();
      v62 = swift_slowAlloc();
      v129[0] = v62;
      *(_DWORD *)v61 = 136315394;
      v128[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001B4F00D50, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v61 + 12) = 2080;
      v128[0] = 0xD000000000000020;
      v128[1] = 0x80000001B4F00DD0;
      lazy protocol witness table accessor for type SelfReflectionError and conformance SelfReflectionError();
      v63 = Error.localizedDescription.getter();
      v128[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v59, v60, "SelfReflectionAgent.%s failed to produce dialog. error: %s", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v62, -1, -1);
      MEMORY[0x1B5E44758](v61, -1, -1);
    }

    lazy protocol witness table accessor for type SelfReflectionError and conformance SelfReflectionError();
    v65 = swift_allocError();
    *v66 = 0xD000000000000020;
    v66[1] = 0x80000001B4F00DD0;
    a3(0, 0, 0, v65);
    v58 = (void *)v65;
    goto LABEL_20;
  }
  v37 = v122;
  ((void (*)(char *, char *, uint64_t))v17[4])(v122, v15, v16);
  v38 = v123;
  NLContextUpdate.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  v39 = (*((unsigned __int8 *)v17 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v17 + 80);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1B4EE3F50;
  v41 = v17[2];
  v119 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v16;
  ((void (*)(unint64_t, char *, uint64_t))v41)(v40 + v39, v37, v16);
  NLContextUpdate.nluSystemDialogActs.setter();
  v42 = v124;
  v43 = (uint64_t)v120;
  v44 = v38;
  v45 = v125;
  (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v120, v44, v125);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v43, 0, 1, v45);
  v118 = (unsigned __int8 *)specialized static ExecutionContextUpdate.convertFromFlowContextUpdate(_:nluActiveTasks:nluCompletedTasks:populateLegacyProvideContext:)(v43, 0, 0, 0);
  outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for NLContextUpdate?);
  v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88508]), sel_init);
  v47 = objc_allocWithZone(MEMORY[0x1E0CB3A28]);
  v48 = v46;
  v49 = objc_msgSend(v47, sel_init);
  v50 = objc_msgSend(v49, sel_UUIDString);

  if (!v50)
  {
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v50 = (id)MEMORY[0x1B5E432E8](v51);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v48, sel_setAceId_, v50);

  v52 = *(uint64_t (**)(void))(*(_QWORD *)v126 + 200);
  v53 = v48;
  v54 = v52();
  v116 = a4;
  if (v55)
  {
    v56 = (void *)MEMORY[0x1B5E432E8](v54);
    swift_bridgeObjectRelease();
  }
  else
  {
    v56 = 0;
  }
  objc_msgSend(v53, sel_setRefId_, v56, v116);

  v67 = objc_msgSend(v127, sel_print);
  v68 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v69 = v126;
  if (v68[2])
  {
    v70 = v68[4];
    v71 = v68[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v72 = (void *)MEMORY[0x1B5E432E8](v70, v71);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v72 = 0;
  }
  objc_msgSend(v53, sel_setText_, v72);

  v73 = objc_msgSend(v127, sel_dialogId);
  v74 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v74[2])
  {
    v75 = v74[4];
    v76 = v74[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v77 = (void *)MEMORY[0x1B5E432E8](v75, v76);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v77 = 0;
  }
  objc_msgSend(v53, sel_setDialogIdentifier_, v77);

  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v78 = v53;
  isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  objc_msgSend(v78, sel_setListenAfterSpeaking_, isa);

  v80 = objc_msgSend(v127, sel_meta);
  v81 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(_QWORD *)(v81 + 16)
    && (v82 = specialized __RawDictionaryStorage.find<A>(_:)(0x79726F6765746163, 0xE800000000000000), (v83 & 1) != 0))
  {
    v84 = (uint64_t *)(*(_QWORD *)(v81 + 56) + 16 * v82);
    v85 = *v84;
    v86 = v84[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v87 = (void *)MEMORY[0x1B5E432E8](v85, v86);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v87 = 0;
  }
  objc_msgSend(v78, sel_setDialogCategory_, v87);

  v88 = (*(uint64_t (**)(void))(*(_QWORD *)v69 + 272))();
  if (v88)
  {
    v89 = (void *)v88;
    if (*(_BYTE *)(v88 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled) == 1)
    {
      v90 = v78;
      v91 = objc_msgSend(v127, sel_speak);
      v92 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v92[2])
      {
        v93 = (unsigned __int8 *)v17;
        v94 = v92[4];
        v95 = v92[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v96 = MEMORY[0x1B5E432E8](v94, v95);
        v17 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v93;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v96 = 0;
      }
      objc_msgSend(v90, sel_setSpeakableText_, v96);

      v89 = (void *)v96;
    }

  }
  v97 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D884F8]), sel_init);
  v98 = objc_allocWithZone(MEMORY[0x1E0CB3A28]);
  v99 = v97;
  v100 = objc_msgSend(v98, sel_init);
  v101 = objc_msgSend(v100, sel_UUIDString);

  if (!v101)
  {
    v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v101 = (id)MEMORY[0x1B5E432E8](v102);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v99, sel_setAceId_, v101);

  v103 = v52();
  if (v104)
  {
    v105 = (void *)MEMORY[0x1B5E432E8](v103);
    swift_bridgeObjectRelease();
  }
  else
  {
    v105 = 0;
  }
  v106 = v17;
  objc_msgSend(v99, sel_setRefId_, v105);

  objc_msgSend(v99, sel_setDialogPhase_, *MEMORY[0x1E0D89218]);
  objc_msgSend(v99, sel_setDisplayTarget_, *MEMORY[0x1E0D89258]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v107 = swift_allocObject();
  *(_OWORD *)(v107 + 16) = xmmword_1B4EEBC90;
  *(_QWORD *)(v107 + 32) = v78;
  v128[0] = v107;
  specialized Array._endMutation()();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  v108 = v78;
  v109 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v99, sel_setViews_, v109);

  v110 = 0;
  if ((v121 & 1) != 0)
  {
    SelfReflectionAgent.createRevealRecognizedSpeech()();
    v110 = v111;
  }
  v112 = v110;
  v113 = v118;
  v114 = v118;
  v115 = v99;
  a3(v99, v110, v113, 0);

  (*(void (**)(char *, uint64_t))(v124 + 8))(v123, v125);
  ((void (*)(char *, void (*)(_QWORD, _QWORD, _QWORD, _QWORD)))v106[1])(v122, v119);
}

id SelfReflectionAgent.createCloseAssitantAction(closeAssistantReason:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t (*v15)(void);
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v22;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88518]), sel_init);
  UUID.init()();
  v11 = UUID.uuidString.getter();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v14 = (void *)MEMORY[0x1B5E432E8](v11, v13);
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setAceId_, v14);

  v15 = *(uint64_t (**)(void))(*(_QWORD *)v3 + 200);
  v16 = v10;
  v17 = v15();
  if (v18)
  {
    v19 = (void *)MEMORY[0x1B5E432E8](v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = 0;
  }
  objc_msgSend(v16, sel_setRefId_, v19);

  v20 = (void *)MEMORY[0x1B5E432E8](a1, a2);
  objc_msgSend(v16, sel_setReason_, v20);

  return v16;
}

id SelfReflectionAgent.createCancelRequestAction()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)(void);
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D87FD0]), sel_init);
  UUID.init()();
  v7 = UUID.uuidString.getter();
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v10 = (void *)MEMORY[0x1B5E432E8](v7, v9);
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_setAceId_, v10);

  v11 = *(uint64_t (**)(void))(*(_QWORD *)v1 + 200);
  v12 = v6;
  v13 = v11();
  if (v14)
  {
    v15 = (void *)MEMORY[0x1B5E432E8](v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = 0;
  }
  objc_msgSend(v12, sel_setRefId_, v15);

  return v12;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionError and conformance SelfReflectionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionError and conformance SelfReflectionError;
  if (!lazy protocol witness table cache variable for type SelfReflectionError and conformance SelfReflectionError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionError, &type metadata for SelfReflectionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionError and conformance SelfReflectionError);
  }
  return result;
}

uint64_t sub_1B4E75C78()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in SelfReflectionAgent.createAskToRepeatAction(revealSpeech:_:)(void *a1, void *a2)
{
  uint64_t v2;

  closure #1 in SelfReflectionAgent.createAskToRepeatAction(revealSpeech:_:)(a1, a2, *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(unsigned __int8 *)(v2 + 40));
}

ValueMetadata *type metadata accessor for SelfReflectionError()
{
  return &type metadata for SelfReflectionError;
}

BOOL SelfReflectionAgentDecision.shouldMitigate.getter()
{
  unsigned __int8 *v0;

  return *v0 != 2;
}

uint64_t SelfReflectionAgent.__allocating_init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;

  v23 = a7;
  v13 = swift_allocObject();
  v15 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a5 + 32);
  v16 = __swift_mutable_project_boxed_opaque_existential_1(a5, v15);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  v20 = specialized SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(a1, a2, a3, a4, (uint64_t)v18, a6, v23, v13, v15, v14);
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v20;
}

uint64_t ResultCandidateState.speechpackage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 864))();
  if (!v1)
    return 0;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 112))(v1);
  swift_release();
  return v2;
}

id AFSpeechPackage.snr.getter()
{
  void *v0;
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  result = objc_msgSend(v0, sel_audioAnalytics);
  v2 = result;
  if (result)
  {
    objc_msgSend(result, sel_snr);
    v4 = v3;

    return (id)v4;
  }
  return result;
}

unint64_t SelfReflectionAgentDecision.description.getter()
{
  char *v0;
  char v1;
  unint64_t result;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  _QWORD v7[2];

  v1 = *v0;
  result = 1701736302;
  switch(*v0)
  {
    case 2:
      return result;
    case 3:
      result = 0x65726F6E6769;
      break;
    case 4:
      result = 0x557373696D736964;
      break;
    case 5:
      result = 0x7469646532706174;
      break;
    case 6:
      result = 0xD00000000000001ALL;
      break;
    default:
      strcpy((char *)v7, "askToRepeat(");
      BYTE5(v7[1]) = 0;
      HIWORD(v7[1]) = -5120;
      if ((v1 & 1) != 0)
        v3 = 1702195828;
      else
        v3 = 0x65736C6166;
      if ((v1 & 1) != 0)
        v4 = 0xE400000000000000;
      else
        v4 = 0xE500000000000000;
      v5 = v4;
      String.append(_:)(*(Swift::String *)&v3);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = 41;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      result = v7[0];
      break;
  }
  return result;
}

BOOL SelfReflectionAgentDecision.isAskToRepeat.getter()
{
  unsigned __int8 *v0;

  return *v0 - 7 < 0xFFFFFFFB;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys()
{
  return 0x70536C6165766572;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x70536C6165766572 && a2 == 0xEC00000068636565)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys()
{
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys()
{
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SelfReflectionAgentDecision.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4E76110 + 4 * byte_1B4EEE9F5[*v0]))(1701736302, 0xE400000000000000);
}

uint64_t sub_1B4E76110()
{
  return 0x65726F6E6769;
}

uint64_t sub_1B4E76124()
{
  return 0x7065526F546B7361;
}

uint64_t sub_1B4E76144()
{
  return 0x557373696D736964;
}

uint64_t sub_1B4E76160()
{
  return 0x7469646532706174;
}

unint64_t sub_1B4E76178()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SelfReflectionAgentDecision.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SelfReflectionAgentDecision.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SelfReflectionAgentDecision.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionAgentDecision.CodingKeys()
{
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelfReflectionAgentDecision.CodingKeys()
{
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SelfReflectionAgentDecision.DismissUICodingKeys()
{
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionAgentDecision.DismissUICodingKeys()
{
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelfReflectionAgentDecision.DismissUICodingKeys()
{
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys()
{
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys()
{
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionAgentDecision.IgnoreCodingKeys()
{
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelfReflectionAgentDecision.IgnoreCodingKeys()
{
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SelfReflectionAgentDecision.NoneCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionAgentDecision.NoneCodingKeys()
{
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelfReflectionAgentDecision.NoneCodingKeys()
{
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionAgentDecision.Tap2editCodingKeys()
{
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelfReflectionAgentDecision.Tap2editCodingKeys()
{
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SelfReflectionAgentDecision.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys>);
  v45 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  MEMORY[0x1E0C80A78](v3);
  v44 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelfReflectionAgentDecision.Tap2editCodingKeys>);
  v42 = *(_QWORD *)(v5 - 8);
  v43 = v5;
  MEMORY[0x1E0C80A78](v5);
  v41 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelfReflectionAgentDecision.DismissUICodingKeys>);
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  MEMORY[0x1E0C80A78](v7);
  v38 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelfReflectionAgentDecision.AskToRepeatCodingKeys>);
  v36 = *(_QWORD *)(v9 - 8);
  v37 = v9;
  MEMORY[0x1E0C80A78](v9);
  v35 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelfReflectionAgentDecision.IgnoreCodingKeys>);
  v33 = *(_QWORD *)(v11 - 8);
  v34 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelfReflectionAgentDecision.NoneCodingKeys>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelfReflectionAgentDecision.CodingKeys>);
  v47 = *(_QWORD *)(v18 - 8);
  v48 = v18;
  MEMORY[0x1E0C80A78](v18);
  v20 = *v1;
  v21 = a1[3];
  v22 = a1;
  v23 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v22, v21);
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v20)
  {
    case 2:
      v49 = 0;
      lazy protocol witness table accessor for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys();
      v24 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      goto LABEL_9;
    case 3:
      v50 = 1;
      lazy protocol witness table accessor for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys();
      v24 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v34);
      goto LABEL_9;
    case 4:
      v52 = 3;
      lazy protocol witness table accessor for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys();
      v29 = v38;
      v24 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v31 = v39;
      v30 = v40;
      goto LABEL_8;
    case 5:
      v53 = 4;
      lazy protocol witness table accessor for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys();
      v29 = v41;
      v24 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v31 = v42;
      v30 = v43;
      goto LABEL_8;
    case 6:
      v54 = 5;
      lazy protocol witness table accessor for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys();
      v29 = v44;
      v24 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v31 = v45;
      v30 = v46;
LABEL_8:
      (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v30);
LABEL_9:
      result = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v23, v24);
      break;
    default:
      v51 = 2;
      lazy protocol witness table accessor for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys();
      v25 = v35;
      v26 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v27 = v37;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v27);
      result = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v23, v26);
      break;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SelfReflectionAgentDecision(_QWORD *a1)
{
  return SelfReflectionAgentDecision.encode(to:)(a1);
}

void SelfReflectionResponse.decision.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t SelfReflectionResponse.hasCantUnderstandDialog.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t SelfReflectionResponse.hasCantUnderstandDialog.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*SelfReflectionResponse.hasCantUnderstandDialog.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.hasCantDoDialog.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t SelfReflectionResponse.hasCantDoDialog.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*SelfReflectionResponse.hasCantDoDialog.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.isWebSearchFallback.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 3);
}

uint64_t SelfReflectionResponse.isWebSearchFallback.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 3) = result;
  return result;
}

uint64_t (*SelfReflectionResponse.isWebSearchFallback.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.isFlexibleFollowUp.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t SelfReflectionResponse.isFlexibleFollowUp.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

uint64_t (*SelfReflectionResponse.isFlexibleFollowUp.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.isVoiceTrigger.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 5);
}

uint64_t SelfReflectionResponse.isVoiceTrigger.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 5) = result;
  return result;
}

uint64_t (*SelfReflectionResponse.isVoiceTrigger.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.sentenceConfidence.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t SelfReflectionResponse.sentenceConfidence.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*SelfReflectionResponse.sentenceConfidence.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.snr.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t SelfReflectionResponse.snr.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*SelfReflectionResponse.snr.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.isSingleWord.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t SelfReflectionResponse.isSingleWord.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = result;
  return result;
}

uint64_t (*SelfReflectionResponse.isSingleWord.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.catIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SelfReflectionResponse.catIdentifiers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*SelfReflectionResponse.catIdentifiers.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.catCategories.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SelfReflectionResponse.catCategories.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*SelfReflectionResponse.catCategories.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t default argument 1 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 2;
}

uint64_t default argument 2 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 2;
}

uint64_t default argument 3 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 2;
}

uint64_t default argument 4 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 2;
}

uint64_t default argument 5 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 2;
}

uint64_t default argument 6 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 0;
}

uint64_t default argument 7 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 0;
}

uint64_t default argument 8 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 2;
}

uint64_t default argument 9 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 0;
}

uint64_t default argument 10 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 0;
}

_BYTE *SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)@<X0>(_BYTE *result@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, char a12, uint64_t a13, uint64_t a14)
{
  *(_BYTE *)a9 = *result;
  *(_BYTE *)(a9 + 1) = a2;
  *(_BYTE *)(a9 + 2) = a3;
  *(_BYTE *)(a9 + 3) = a4;
  *(_BYTE *)(a9 + 4) = a5;
  *(_BYTE *)(a9 + 5) = a6;
  *(_QWORD *)(a9 + 8) = a7;
  *(_BYTE *)(a9 + 16) = a8 & 1;
  *(_QWORD *)(a9 + 24) = a10;
  *(_BYTE *)(a9 + 32) = a11 & 1;
  *(_BYTE *)(a9 + 33) = a12;
  *(_QWORD *)(a9 + 40) = a13;
  *(_QWORD *)(a9 + 48) = a14;
  return result;
}

uint64_t SelfReflectionAgent.instrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t SelfReflectionAgent.networkAvailabilityProvider.getter()
{
  return swift_retain();
}

id SelfReflectionAgent.preferences.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t SelfReflectionAgent.isSystemAssistantExperienceEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t SelfReflectionAgent.trialExperimentManager.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 48, a1);
}

uint64_t SelfReflectionAgent.curareDonator.getter()
{
  return swift_retain();
}

uint64_t SelfReflectionAgent.isUndesiredResponseSuppressionEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t SelfReflectionAgent.tagger.getter()
{
  return swift_retain();
}

uint64_t SelfReflectionAgent.requestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SelfReflectionAgent.requestId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SelfReflectionAgent.requestId.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SelfReflectionAgent.resultCandidateState.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t SelfReflectionAgent.resultCandidateState.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 128) = a1;
  return swift_release();
}

uint64_t (*SelfReflectionAgent.resultCandidateState.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

void *SelfReflectionAgent.executionInputInfo.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 136);
  v2 = v1;
  return v1;
}

void SelfReflectionAgent.executionInputInfo.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 136);
  *(_QWORD *)(v1 + 136) = a1;

}

uint64_t (*SelfReflectionAgent.executionInputInfo.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

void *SelfReflectionAgent.requestContextData.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 144);
  v2 = v1;
  return v1;
}

void SelfReflectionAgent.requestContextData.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 144);
  *(_QWORD *)(v1 + 144) = a1;

}

uint64_t (*SelfReflectionAgent.requestContextData.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

double key path getter for SelfReflectionAgent.previousTurnMitigationResponse : SelfReflectionAgent@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  double result;
  _QWORD v10[2];
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  __int128 v15;

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 296))(v10);
  v3 = WORD2(v10[0]);
  v4 = v10[1];
  v5 = v11;
  v6 = v12;
  v7 = v13;
  v8 = v14;
  *(_DWORD *)a2 = v10[0];
  *(_WORD *)(a2 + 4) = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 32) = v7;
  *(_BYTE *)(a2 + 33) = v8;
  result = *(double *)&v15;
  *(_OWORD *)(a2 + 40) = v15;
  return result;
}

uint64_t key path setter for SelfReflectionAgent.previousTurnMitigationResponse : SelfReflectionAgent(int *a1, uint64_t *a2)
{
  __int16 v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(int *);
  int v13;
  __int16 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *((_WORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_BYTE *)a1 + 16);
  v5 = *((_QWORD *)a1 + 3);
  v6 = *((_BYTE *)a1 + 32);
  v7 = *((_BYTE *)a1 + 33);
  v9 = *((_QWORD *)a1 + 5);
  v8 = *((_QWORD *)a1 + 6);
  v10 = *a2;
  v13 = *a1;
  v14 = v2;
  v15 = v3;
  v16 = v4;
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v9;
  v21 = v8;
  v11 = *(uint64_t (**)(int *))(*(_QWORD *)v10 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v11(&v13);
}

uint64_t SelfReflectionAgent.previousTurnMitigationResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  swift_beginAccess();
  v3 = *(_WORD *)(v1 + 156);
  v4 = *(_QWORD *)(v1 + 160);
  v5 = *(_BYTE *)(v1 + 168);
  v6 = *(_QWORD *)(v1 + 176);
  v7 = *(_BYTE *)(v1 + 184);
  v8 = *(_BYTE *)(v1 + 185);
  v10 = *(_QWORD *)(v1 + 192);
  v9 = *(_QWORD *)(v1 + 200);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 152);
  *(_WORD *)(a1 + 4) = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 33) = v8;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v9;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t SelfReflectionAgent.previousTurnMitigationResponse.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  __int16 v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_BYTE *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 33);
  v11 = *(_WORD *)(a1 + 4);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  swift_beginAccess();
  *(_DWORD *)(v1 + 152) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 156) = v11;
  *(_QWORD *)(v1 + 160) = v3;
  *(_BYTE *)(v1 + 168) = v4;
  *(_QWORD *)(v1 + 176) = v5;
  *(_BYTE *)(v1 + 184) = v6;
  *(_BYTE *)(v1 + 185) = v10;
  *(_QWORD *)(v1 + 192) = v7;
  *(_QWORD *)(v1 + 200) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*SelfReflectionAgent.previousTurnMitigationResponse.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

double key path getter for SelfReflectionAgent.currentMitigationResponse : SelfReflectionAgent@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  double result;
  _QWORD v10[2];
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  __int128 v15;

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)a1 + 320))(v10);
  v3 = WORD2(v10[0]);
  v4 = v10[1];
  v5 = v11;
  v6 = v12;
  v7 = v13;
  v8 = v14;
  *(_DWORD *)a2 = v10[0];
  *(_WORD *)(a2 + 4) = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_BYTE *)(a2 + 32) = v7;
  *(_BYTE *)(a2 + 33) = v8;
  result = *(double *)&v15;
  *(_OWORD *)(a2 + 40) = v15;
  return result;
}

uint64_t key path setter for SelfReflectionAgent.currentMitigationResponse : SelfReflectionAgent(int *a1, uint64_t *a2)
{
  __int16 v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(int *);
  int v13;
  __int16 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *((_WORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_BYTE *)a1 + 16);
  v5 = *((_QWORD *)a1 + 3);
  v6 = *((_BYTE *)a1 + 32);
  v7 = *((_BYTE *)a1 + 33);
  v9 = *((_QWORD *)a1 + 5);
  v8 = *((_QWORD *)a1 + 6);
  v10 = *a2;
  v13 = *a1;
  v14 = v2;
  v15 = v3;
  v16 = v4;
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v20 = v9;
  v21 = v8;
  v11 = *(uint64_t (**)(int *))(*(_QWORD *)v10 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v11(&v13);
}

uint64_t SelfReflectionAgent.currentMitigationResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  swift_beginAccess();
  v3 = *(_WORD *)(v1 + 212);
  v4 = *(_QWORD *)(v1 + 216);
  v5 = *(_BYTE *)(v1 + 224);
  v6 = *(_QWORD *)(v1 + 232);
  v7 = *(_BYTE *)(v1 + 240);
  v8 = *(_BYTE *)(v1 + 241);
  v10 = *(_QWORD *)(v1 + 248);
  v9 = *(_QWORD *)(v1 + 256);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 208);
  *(_WORD *)(a1 + 4) = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 33) = v8;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v9;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t SelfReflectionAgent.currentMitigationResponse.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  __int16 v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_BYTE *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 33);
  v11 = *(_WORD *)(a1 + 4);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  swift_beginAccess();
  *(_DWORD *)(v1 + 208) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 212) = v11;
  *(_QWORD *)(v1 + 216) = v3;
  *(_BYTE *)(v1 + 224) = v4;
  *(_QWORD *)(v1 + 232) = v5;
  *(_BYTE *)(v1 + 240) = v6;
  *(_BYTE *)(v1 + 241) = v10;
  *(_QWORD *)(v1 + 248) = v7;
  *(_QWORD *)(v1 + 256) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*SelfReflectionAgent.currentMitigationResponse.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SelfReflectionAgent.isRequestCompleted.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 264);
}

uint64_t SelfReflectionAgent.isRequestCompleted.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 264) = a1;
  return result;
}

uint64_t (*SelfReflectionAgent.isRequestCompleted.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22[2];

  v15 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a5 + 32);
  v16 = __swift_mutable_project_boxed_opaque_existential_1(a5, v15);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  v20 = specialized SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(a1, a2, a3, a4, (uint64_t)v18, a6, a7, v22[1], v15, v14);
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v20;
}

Swift::Void __swiftcall SelfReflectionAgent.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  char v9;
  uint64_t v10;
  __int16 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  __int16 v17;
  __int128 v18;

  v1 = v0;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    v8[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x29287465736572, 0xE700000000000000, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "SelfReflectionAgent.%s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v1 + 208))(0, 0);
  (*(void (**)(_QWORD))(*(_QWORD *)v1 + 232))(0);
  (*(void (**)(_QWORD))(*(_QWORD *)v1 + 256))(0);
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 280))(0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1 + 320))(&v13, v7);
  LODWORD(v8[0]) = v13;
  WORD2(v8[0]) = WORD2(v13);
  v8[1] = v14;
  v9 = v15;
  v10 = v16;
  v11 = v17;
  v12 = v18;
  (*(void (**)(_QWORD *))(*(_QWORD *)v1 + 304))(v8);
  WORD2(v13) = 514;
  LODWORD(v13) = 33686018;
  v14 = 0;
  v15 = 1;
  v16 = 0;
  v17 = 513;
  v18 = 0uLL;
  (*(void (**)(uint64_t *))(*(_QWORD *)v1 + 328))(&v13);
  (*(void (**)(_QWORD))(*(_QWORD *)v1 + 352))(0);
}

Swift::Void __swiftcall SelfReflectionAgent.setRequestId(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, void *);
  uint64_t v11;

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v11 = v9;
    *(_DWORD *)v8 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x80000001B4F00E20, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v6, v7, "SelfReflectionAgent.%s requestId: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v10 = *(void (**)(uint64_t, void *))(*(_QWORD *)v2 + 208);
  swift_bridgeObjectRetain();
  v10(countAndFlagsBits, object);
}

uint64_t SelfReflectionAgent.setResultCandidateState(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v17;

  v2 = v1;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v17 = v8;
    *(_DWORD *)v7 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x80000001B4F00E40, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2080;
    v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 800);
    v10 = swift_retain();
    v11 = v9(v10);
    v13 = v12;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "SelfReflectionAgent.%s resultCandidateState: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 232);
  v15 = swift_retain();
  return v14(v15);
}

uint64_t SelfReflectionAgent.setExecutionInputInfo(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t (*v13)(id);
  id v14;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    v16 = v2;
    v10 = swift_slowAlloc();
    v17 = v10;
    *(_DWORD *)v8 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x80000001B4F00E60, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    v11 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v5;

    _os_log_impl(&dword_1B4BE6000, v6, v7, "SelfReflectionAgent.%s executionInputInfo: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    swift_arrayDestroy();
    v12 = v10;
    v2 = v16;
    MEMORY[0x1B5E44758](v12, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);

  }
  else
  {

  }
  v13 = *(uint64_t (**)(id))(*(_QWORD *)v2 + 256);
  v14 = v5;
  return v13(v5);
}

uint64_t SelfReflectionAgent.setRequestContextData(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t (*v13)(id);
  id v14;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    v16 = v2;
    v10 = swift_slowAlloc();
    v17 = v10;
    *(_DWORD *)v8 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x80000001B4F00E80, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    v11 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v5;

    _os_log_impl(&dword_1B4BE6000, v6, v7, "SelfReflectionAgent.%s requestContextData: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    swift_arrayDestroy();
    v12 = v10;
    v2 = v16;
    MEMORY[0x1B5E44758](v12, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);

  }
  else
  {

  }
  v13 = *(uint64_t (**)(id))(*(_QWORD *)v2 + 280);
  v14 = v5;
  return v13(v5);
}

Swift::Void __swiftcall SelfReflectionAgent.requestCompleted()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = v0;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_QWORD *)&v29 = v6;
    *(_DWORD *)v5 = 136315138;
    *(_QWORD *)&v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x80000001B4F00EA0, (uint64_t *)&v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "SelfReflectionAgent.%s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  if (((*(uint64_t (**)(void))(*(_QWORD *)v1 + 344))() & 1) != 0)
  {
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      *(_QWORD *)&v29 = v10;
      *(_DWORD *)v9 = 136315138;
      *(_QWORD *)&v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x80000001B4F00EA0, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v7, v8, "SelfReflectionAgent.%s called more than once", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v10, -1, -1);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 352))(1);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      *(_QWORD *)&v29 = v14;
      *(_DWORD *)v13 = 136315138;
      *(_QWORD *)&v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x80000001B4F00EA0, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v11, v12, "SelfReflectionAgent.%s donating to curare", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v14, -1, -1);
      MEMORY[0x1B5E44758](v13, -1, -1);
    }

    v15 = 7104846;
    v16 = (*(_QWORD *(**)(__int128 *__return_ptr))(*(_QWORD *)v1 + 320))(&v29);
    LODWORD(v23) = v29;
    WORD2(v23) = WORD2(v29);
    *((_QWORD *)&v23 + 1) = *((_QWORD *)&v29 + 1);
    v24 = v30;
    v25 = *((_QWORD *)&v30 + 1);
    v26 = v31;
    v27 = v32;
    v28 = v33;
    v17 = (*(uint64_t (**)(_QWORD *))(*(_QWORD *)v1 + 200))(v16);
    if (v18)
      v19 = v17;
    else
      v19 = 7104846;
    v20 = 0xE300000000000000;
    if (v18)
      v21 = v18;
    else
      v21 = 0xE300000000000000;
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 224))(v17);
    if (v22)
    {
      v15 = *(_QWORD *)(v22 + 16);
      v20 = *(_QWORD *)(v22 + 24);
      swift_bridgeObjectRetain();
      swift_release();
    }
    SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:)(&v23, v19, v21, v15, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = 0;
    v29 = 0u;
    v30 = 0u;
    (*(void (**)(__int128 *))(*(_QWORD *)v1 + 448))(&v29);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v29, &demangling cache variable for type metadata for Tagger?);
  }
}

void SelfReflectionAgent.check(executionOutput:)(char *a1@<X8>)
{
  _QWORD *v1;
  void (*v3)(uint64_t *__return_ptr);
  int v4;
  uint64_t v5;
  uint8x8_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  __int128 v50;
  int16x8_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;
  __int128 v59;

  v3 = *(void (**)(uint64_t *__return_ptr))(*v1 + 320);
  v3(&v53);
  v4 = v53;
  swift_bridgeObjectRelease();
  v5 = swift_bridgeObjectRelease();
  if (v4 == 2)
  {
    SelfReflectionAgent.determineMitigateResult(from:)((uint64_t)&v53);
    v6.i32[0] = v53;
    v7 = BYTE4(v53);
    v8 = BYTE5(v53);
    v49 = v54;
    v48 = v55;
    v47 = v56;
    v45 = v58;
    v46 = v57;
    v50 = v59;
    v51 = (int16x8_t)vmovl_u8(v6);
    if (v51.u16[0] == 3)
    {
      v9 = v1[2];
      v10 = *(uint64_t (**)(void))(*v1 + 200);
      v11 = v10();
      if (v12)
        v13 = v11;
      else
        v13 = 0;
      if (v12)
        v14 = v12;
      else
        v14 = 0xE000000000000000;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 192))(2, v13, v14);
      v15 = swift_bridgeObjectRelease();
      v16 = ((uint64_t (*)(uint64_t))v10)(v15);
      if (v17)
        v18 = v16;
      else
        v18 = 0;
      if (v17)
        v19 = v17;
      else
        v19 = 0xE000000000000000;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v9 + 232))(5, v18, v19);
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v20 = v51.i8[0];
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc();
      v44 = swift_slowAlloc();
      v53 = v44;
      *(_DWORD *)v24 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000001B4F00EC0, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2080;
      v25 = SelfReflectionAgentDecision.description.getter();
      v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v22, v23, "SelfReflectionAgent.%s mitigation result: %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v44, -1, -1);
      MEMORY[0x1B5E44758](v24, -1, -1);
    }

    LODWORD(v53) = vmovn_s16(v51).u32[0];
    BYTE4(v53) = v7;
    BYTE5(v53) = v8;
    v54 = v49;
    v55 = v48;
    v56 = v47;
    v57 = v46;
    v58 = v45;
    v59 = v50;
    (*(void (**)(uint64_t *))(*v1 + 328))(&v53);
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, uint64_t))v3)(&v53, v5);
    v27 = v53;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v27 == 5)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
      swift_retain_n();
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = swift_slowAlloc();
        v32 = swift_slowAlloc();
        v52 = v32;
        *(_DWORD *)v31 = 136315394;
        v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000001B4F00EC0, &v52);
        v33 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v31 + 12) = 2080;
        ((void (*)(uint64_t *__return_ptr, uint64_t))v3)(&v53, v33);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34 = SelfReflectionAgentDecision.description.getter();
        v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v20 = 2;
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v29, v30, "SelfReflectionAgent.%s returned %s for current turn. The rest of ExecutionOutputs should be unchanged.", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v32, -1, -1);
        MEMORY[0x1B5E44758](v31, -1, -1);

      }
      else
      {

        v20 = 2;
        swift_release_n();
      }
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.conversationBridge);
      swift_retain_n();
      v37 = Logger.logObject.getter();
      v38 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = swift_slowAlloc();
        v40 = swift_slowAlloc();
        v52 = v40;
        *(_DWORD *)v39 = 136315394;
        v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000001B4F00EC0, &v52);
        v41 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v39 + 12) = 2080;
        ((void (*)(uint64_t *__return_ptr, uint64_t))v3)(&v53, v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v42 = SelfReflectionAgentDecision.description.getter();
        v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v37, v38, "SelfReflectionAgent.%s already mitigated for current turn %s. Ignoring the rest of ExecutionOutputs.", (uint8_t *)v39, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v40, -1, -1);
        MEMORY[0x1B5E44758](v39, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v20 = 3;
    }
  }
  *a1 = v20;
}

void SelfReflectionAgent.determineMitigateResult(from:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  NSObject *v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  int v49;
  void *v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  NSObject *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  os_log_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t (*v81)(void);
  uint64_t v82;
  void *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(void);
  uint64_t v87;
  void *v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  void *v95;
  unint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  char v100;
  char v101;
  id v102;
  uint64_t v103;
  _BYTE *v104;
  id v105;
  void *v106;
  id v107;
  unint64_t v108;
  uint64_t v109;
  _BOOL4 v110;
  NSObject *v111;
  os_log_type_t v112;
  _BOOL4 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  Swift::String v123;
  Swift::String_optional v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  _QWORD *v129;
  void *v130;
  Swift::String v131;
  Swift::String_optional v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  Swift::String v157;
  int64_t v158;
  unint64_t v159;
  int64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  Swift::String v181;
  int64_t v182;
  unint64_t v183;
  int64_t v184;
  _BYTE *v185;
  _BYTE *v186;
  uint64_t v187;
  void (*v188)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v189;
  _BYTE *v190;
  _BYTE *v191;
  NSObject *v192;
  os_log_type_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  _BYTE *v200;
  uint64_t v201;
  unint64_t v202;
  char v203;
  char v204;
  int v205;
  int v206;
  _BYTE *v207;
  uint64_t v208;
  _BYTE *v209;
  char v210;
  uint64_t v211;
  _BYTE *v212;
  NSObject *v213;
  os_log_type_t v214;
  uint64_t v215;
  uint64_t v216;
  _BYTE *v217;
  char v218;
  NSObject *v219;
  os_log_type_t v220;
  uint8_t *v221;
  NSObject *v222;
  os_log_type_t v223;
  uint8_t *v224;
  uint64_t v225;
  uint64_t v226;
  int64_t v227;
  uint64_t v228;
  int64_t v229;
  _BYTE v230[4];
  int v231;
  uint64_t v232;
  int v233;
  uint64_t v234;
  _BYTE *v235;
  uint64_t (*v236)(uint64_t);
  _BYTE *v237;
  os_log_t v238;
  void (*v239)(_BYTE *, uint64_t, uint64_t);
  uint64_t v240;
  void *v241;
  uint64_t v242;
  int64_t v243;
  int v244;
  _BYTE *v245;
  _BYTE *v246;
  _BYTE *v247;
  _BYTE *v248;
  _BYTE *v249;
  uint64_t v250;
  uint64_t v251;
  _BYTE *v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  BOOL v260;
  uint64_t v261;
  uint64_t v262;

  v256 = a1;
  v255 = type metadata accessor for NetworkAvailability.Status();
  v251 = *(_QWORD *)(v255 - 8);
  v3 = MEMORY[0x1E0C80A78](v255);
  v5 = &v230[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = MEMORY[0x1E0C80A78](v3);
  v249 = &v230[-v7];
  v8 = MEMORY[0x1E0C80A78](v6);
  v248 = &v230[-v9];
  v10 = MEMORY[0x1E0C80A78](v8);
  v247 = &v230[-v11];
  MEMORY[0x1E0C80A78](v10);
  v13 = &v230[-v12];
  v14 = type metadata accessor for Logger();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = &v230[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = MEMORY[0x1E0C80A78](v16);
  v252 = &v230[-v20];
  v21 = MEMORY[0x1E0C80A78](v19);
  v245 = &v230[-v22];
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (unint64_t)&v230[-v24];
  v26 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 200);
  v27 = v26(v23);
  if (!v28)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    v52 = Logger.logObject.getter();
    v53 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v52, v53))
      goto LABEL_21;
    v54 = (uint8_t *)swift_slowAlloc();
    v55 = swift_slowAlloc();
    v259 = v55;
    *(_DWORD *)v54 = 136315138;
    v262 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001B4F01040, &v259);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v56 = "SelfReflectionAgent.%s requestId was not set";
    goto LABEL_20;
  }
  v29 = v28;
  v237 = v5;
  v235 = v18;
  v240 = v27;
  v30 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 224))();
  if (!v30)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    v52 = Logger.logObject.getter();
    v53 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v52, v53))
      goto LABEL_21;
    v54 = (uint8_t *)swift_slowAlloc();
    v55 = swift_slowAlloc();
    v259 = v55;
    *(_DWORD *)v54 = 136315138;
    v262 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001B4F01040, &v259);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v56 = "SelfReflectionAgent.%s resultCandidateState was not set";
LABEL_20:
    _os_log_impl(&dword_1B4BE6000, v52, v53, v56, v54, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v55, -1, -1);
    MEMORY[0x1B5E44758](v54, -1, -1);
LABEL_21:

    v57 = v256;
    *(_WORD *)(v256 + 4) = 514;
    *(_DWORD *)v57 = 33686018;
    *(_QWORD *)(v57 + 8) = 0;
    *(_BYTE *)(v57 + 16) = 1;
    *(_QWORD *)(v57 + 24) = 0;
    *(_WORD *)(v57 + 32) = 513;
    *(_QWORD *)(v57 + 40) = 0;
    *(_QWORD *)(v57 + 48) = 0;
    return;
  }
  v31 = v30;
  v258 = v1;
  v241 = v29;
  v246 = v13;
  v253 = ExecutionOutput.hasCantUnderstandDialog.getter();
  v244 = ExecutionOutput.hasCantDoDialog.getter();
  v233 = ExecutionOutput.hasUnsupportedDialog.getter();
  v32 = ExecutionOutput.catIdentifiers.getter();
  v33 = ExecutionOutput.catCategories.getter();
  if (one-time initialization token for conversationBridge != -1)
    goto LABEL_226;
  while (1)
  {
    v34 = __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    v35 = *(void (**)(_QWORD))(v15 + 16);
    v242 = v34;
    v239 = (void (*)(_BYTE *, uint64_t, uint64_t))v35;
    v35(v25);
    swift_retain_n();
    v36 = v14;
    v37 = v258;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v38 = v33;
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.debug.getter();
    v41 = os_log_type_enabled(v39, (os_log_type_t)v40);
    v254 = v32;
    v250 = v31;
    v257 = v36;
    v243 = v38;
    if (v41)
    {
      LODWORD(v236) = v40;
      v238 = v39;
      v40 = swift_slowAlloc();
      v234 = swift_slowAlloc();
      v262 = v234;
      *(_DWORD *)v40 = 136317442;
      v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001B4F01040, &v262);
      v42 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v40 + 12) = 2080;
      v43 = v26(v42);
      if (v44)
      {
        v45 = v44;
      }
      else
      {
        v43 = 0;
        v45 = 0xE000000000000000;
      }
      v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, &v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 22) = 1024;
      LODWORD(v259) = v253 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v40 + 28) = 1024;
      LODWORD(v259) = v244 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v40 + 34) = 1024;
      LODWORD(v259) = v233 & 1;
      v46 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v40 + 40) = 1024;
      v47 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 872);
      v48 = v47(v46);
      v49 = v48;
      if (v48)
      {
        v50 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 264))(v48);
        swift_release();
        if (v50
          && (v51 = (char *)objc_msgSend(v50, sel_speechEvent), v50, (unint64_t)(v51 - 30) <= 5))
        {
          v49 = dword_1B4EEF1EC[(_QWORD)(v51 - 30)];
        }
        else
        {
          v49 = 0;
        }
      }
      swift_release();
      LODWORD(v259) = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v61 = swift_release();
      *(_WORD *)(v40 + 46) = 1024;
      v62 = v47(v61);
      if (v62)
      {
        v63 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v62 + 264))();
        swift_release();
        if (v63)
        {
          v64 = (unint64_t)objc_msgSend(v63, sel_speechEvent);

          LODWORD(v63) = v64 <= 0x10 && ((1 << v64) & 0x18100) != 0;
        }
      }
      else
      {
        LODWORD(v63) = 0;
      }
      swift_release();
      LODWORD(v259) = (_DWORD)v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v40 + 52) = 2080;
      v65 = v254;
      swift_bridgeObjectRetain();
      v66 = Set.description.getter();
      v68 = v67;
      swift_bridgeObjectRelease();
      v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v68, &v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 62) = 2080;
      swift_bridgeObjectRetain();
      v69 = Set.description.getter();
      v71 = v70;
      swift_bridgeObjectRelease();
      v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v71, &v262);
      v31 = v250;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v72 = swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 72) = 2080;
      v32 = v65;
      v37 = v258;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v258 + 296))(&v259, v72);
      v73 = v259;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v261) = v73;
      v74 = SelfReflectionAgentDecision.description.getter();
      v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, &v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v76 = v238;
      _os_log_impl(&dword_1B4BE6000, v238, (os_log_type_t)v236, "SelfReflectionAgent.%s requestId: %s hasCantUnderstandDialog: %{BOOL}d hasCantDoDialog: %{BOOL}d hasUnsupportedDialog: %{BOOL}d isFlexibleFollowUp: %{BOOL}d isVoiceTrigger: %{BOOL}d catIdentifiers: %s catCategories: %s previous mitigation result: %s", (uint8_t *)v40, 0x52u);
      v77 = v234;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v77, -1, -1);
      MEMORY[0x1B5E44758](v40, -1, -1);

      v58 = *(NSObject **)(v15 + 8);
      v59 = v25;
      v60 = v257;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();
      v58 = *(NSObject **)(v15 + 8);
      v59 = v25;
      v60 = v36;
    }
    v238 = v58;
    v78 = ((uint64_t (*)(unint64_t, uint64_t))v58)(v59, v60);
    v236 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 248);
    v79 = v236(v78);
    if (!v79)
      goto LABEL_43;
    v80 = (void *)v79;
    if (*(_BYTE *)(v79 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes) != 1
      || !(*(uint64_t (**)(void))(*(_QWORD *)v31 + 352))())
    {

LABEL_43:
      if ((v253 & 1) == 0)
        goto LABEL_63;
LABEL_44:
      if (*(_BYTE *)(v258 + 96) == 1)
      {
        v86 = *(uint64_t (**)(void))(*(_QWORD *)v31 + 872);
        v87 = v86();
        if (v87)
        {
          v88 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v87 + 264))();
          swift_release();
          if (v88)
          {
            v89 = (unint64_t)objc_msgSend(v88, sel_speechEvent);

            if (v89 <= 0x23 && ((1 << v89) & 0xC40000000) != 0)
            {
              (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(**(_QWORD **)(v258 + 16) + 240))(v240, v241, 1, 7);
              swift_bridgeObjectRelease();
              swift_release();
              v85 = v256;
              *(_DWORD *)v256 = 33685763;
              *(_WORD *)(v85 + 4) = 1;
              *(_QWORD *)(v85 + 8) = 0;
              *(_BYTE *)(v85 + 16) = 1;
              goto LABEL_56;
            }
          }
        }
        v90 = v86();
        if (v90)
        {
          v91 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v90 + 264))();
          swift_release();
          if (v91)
          {
            v92 = (unint64_t)objc_msgSend(v91, sel_speechEvent);

            if (v92 <= 0x10 && ((1 << v92) & 0x18100) != 0)
            {
              (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(**(_QWORD **)(v258 + 16) + 240))(v240, v241, 2, 7);
              swift_bridgeObjectRelease();
              swift_release();
              v93 = 33685764;
LABEL_55:
              v85 = v256;
              *(_DWORD *)v256 = v93;
              *(_WORD *)(v85 + 4) = 256;
              *(_QWORD *)(v85 + 8) = 0;
              *(_BYTE *)(v85 + 16) = 1;
              goto LABEL_56;
            }
          }
        }
      }
      goto LABEL_63;
    }
    if ((PommesInfo.isWebSearchFallback.getter() & 1) != 0 && *(_BYTE *)(v258 + 96) == 1)
    {
      v81 = *(uint64_t (**)(void))(*(_QWORD *)v31 + 872);
      v82 = v81();
      if (v82)
      {
        v40 = v82;
        v83 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v82 + 264))();
        swift_release();
        if (v83)
        {
          v84 = (unint64_t)objc_msgSend(v83, sel_speechEvent);

          if (v84 <= 0x23)
          {
            v40 = 1;
            if (((1 << v84) & 0xC40000000) != 0)
            {
              (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(**(_QWORD **)(v258 + 16) + 240))(v240, v241, 1, 8);

              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              v85 = v256;
              *(_DWORD *)v256 = 16908803;
              *(_WORD *)(v85 + 4) = 1;
              *(_QWORD *)(v85 + 8) = 0;
              *(_BYTE *)(v85 + 16) = 1;
LABEL_56:
              *(_QWORD *)(v85 + 24) = 0;
              *(_WORD *)(v85 + 32) = 513;
              *(_QWORD *)(v85 + 40) = v32;
LABEL_221:
              *(_QWORD *)(v85 + 48) = v243;
              return;
            }
          }
        }
      }
      v94 = v81();
      if (v94)
      {
        v40 = v94;
        v95 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v94 + 264))();
        swift_release();
        if (v95)
        {
          v96 = (unint64_t)objc_msgSend(v95, sel_speechEvent);

          if (v96 <= 0x10 && ((1 << v96) & 0x18100) != 0)
          {
            (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(**(_QWORD **)(v258 + 16) + 240))(v240, v241, 2, 8);

            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            v93 = 16908804;
            goto LABEL_55;
          }
        }
      }
    }

    swift_release();
    if ((v253 & 1) != 0)
      goto LABEL_44;
LABEL_63:
    v97 = (*(uint64_t (**)(void))(*(_QWORD *)v31 + 864))();
    if (!v97)
      goto LABEL_88;
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 112))(v97);
    swift_release();
    v98 = objc_msgSend((id)v25, sel_recognition);
    specialized SelfReflectionAgent.calculateSentenceConfidence(recognition:)(v98);
    v14 = v99;
    v101 = v100;

    if ((v101 & 1) == 0)
    {
      v102 = objc_msgSend((id)v25, sel_audioAnalytics);
      v40 = (uint64_t)v102;
      if (v102)
      {
        objc_msgSend(v102, sel_snr);
        v2 = v103;

      }
      else
      {
        v2 = 0;
      }
      v32 = v257;
      v104 = v245;
      v105 = objc_msgSend((id)v25, sel_recognition);
      if (v105
        && (v106 = v105,
            v107 = objc_msgSend(v105, sel_phrases),
            v106,
            v107))
      {
        type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechPhrase);
        v108 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v108 >> 62)
          goto LABEL_231;
        v109 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_72:
        swift_bridgeObjectRelease();
        v110 = v109 == 1;
      }
      else
      {
        v110 = 0;
      }
      v239(v104, v242, v32);
      v111 = Logger.logObject.getter();
      v112 = static os_log_type_t.debug.getter();
      v113 = os_log_type_enabled(v111, v112);
      LODWORD(v234) = v110;
      if (v113)
      {
        v114 = swift_slowAlloc();
        v115 = swift_slowAlloc();
        v262 = v115;
        *(_DWORD *)v114 = 136315906;
        v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001B4F01040, &v262);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v114 + 12) = 2048;
        v259 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v114 + 22) = 2080;
        v259 = v2;
        v260 = v40 == 0;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
        v116 = String.init<A>(describing:)();
        v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v117, &v262);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v114 + 32) = 1024;
        LODWORD(v259) = v234;
        LOBYTE(v110) = v234;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v111, v112, "SelfReflectionAgent.%s sentenceConfidence: %ld snr: %s isSingleWord: %{BOOL}d", (uint8_t *)v114, 0x26u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v115, -1, -1);
        MEMORY[0x1B5E44758](v114, -1, -1);

        v118 = v245;
        v119 = v257;
      }
      else
      {

        v118 = v104;
        v119 = v32;
      }
      ((void (*)(_BYTE *, uint64_t))v238)(v118, v119);
      if (v14 > 400 || (v253 & 1) == 0 || v110)
      {
        v32 = v254;
        if (v14 <= 600 && ((v253 | v244) & 1) != 0)
          goto LABEL_85;
      }
      else
      {
        v120 = v14;
        v121 = v258;
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v258 + 48), *(_QWORD *)(v258 + 72));
        v122 = v241;
        swift_bridgeObjectRetain();
        v123._countAndFlagsBits = 0xD000000000000024;
        v123._object = (void *)0x80000001B4F01090;
        v124.value._countAndFlagsBits = v240;
        v124.value._object = v122;
        TrialExperimentationAssetManaging.emitTriggerLogging(codepathId:requestId:)(v123, v124);
        swift_bridgeObjectRelease();
        v125 = *(_QWORD *)(v121 + 72);
        v126 = *(_QWORD *)(v121 + 80);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v121 + 48), v125);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(v126 + 16))(v125, v126) & 1) == 0)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v121 + 296))(&v259);
          v127 = v259;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v127 - 2) <= 4)
          {
            (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(**(_QWORD **)(v121 + 16) + 240))(v240, v241, 3, 7);
            swift_bridgeObjectRelease();

            swift_release();
            v85 = v256;
            *(_WORD *)v256 = 257;
            *(_BYTE *)(v85 + 2) = v244 & 1;
            *(_WORD *)(v85 + 3) = 514;
            *(_BYTE *)(v85 + 5) = 2;
            *(_QWORD *)(v85 + 8) = v120;
            *(_BYTE *)(v85 + 16) = 0;
            *(_QWORD *)(v85 + 24) = v2;
            *(_BYTE *)(v85 + 32) = v40 == 0;
            *(_BYTE *)(v85 + 33) = 0;
LABEL_220:
            *(_QWORD *)(v85 + 40) = v254;
            goto LABEL_221;
          }
        }
        v32 = v254;
        v14 = v120;
        if (((v253 | v244) & 1) != 0)
        {
LABEL_85:
          v128 = v14;
          v129 = (_QWORD *)v258;
          __swift_project_boxed_opaque_existential_1((_QWORD *)(v258 + 48), *(_QWORD *)(v258 + 72));
          v130 = v241;
          swift_bridgeObjectRetain();
          v131._countAndFlagsBits = 0xD000000000000024;
          v131._object = (void *)0x80000001B4F01060;
          v132.value._countAndFlagsBits = v240;
          v132.value._object = v130;
          TrialExperimentationAssetManaging.emitTriggerLogging(codepathId:requestId:)(v131, v132);
          v32 = v254;
          swift_bridgeObjectRelease();
          v133 = v129[9];
          v134 = v129[10];
          __swift_project_boxed_opaque_existential_1(v129 + 6, v133);
          if (((*(uint64_t (**)(uint64_t, uint64_t))(v134 + 24))(v133, v134) & 1) == 0)
          {
            (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(**(_QWORD **)(v258 + 16) + 240))(v240, v241, 7, 7);
            swift_bridgeObjectRelease();

            swift_release();
            v135 = v256;
            *(_BYTE *)v256 = 5;
            v136 = v244 & 1;
            *(_BYTE *)(v135 + 1) = v253 & 1;
            *(_BYTE *)(v135 + 2) = v136;
            *(_WORD *)(v135 + 3) = 514;
            *(_BYTE *)(v135 + 5) = 2;
            *(_QWORD *)(v135 + 8) = v128;
            *(_BYTE *)(v135 + 16) = 0;
            *(_QWORD *)(v135 + 24) = v2;
            *(_BYTE *)(v135 + 32) = v40 == 0;
            *(_BYTE *)(v135 + 33) = v234;
LABEL_212:
            v227 = v243;
            *(_QWORD *)(v135 + 40) = v32;
            *(_QWORD *)(v135 + 48) = v227;
            return;
          }
        }
      }
    }

LABEL_88:
    v137 = *(_QWORD *)(v32 + 56);
    v245 = (_BYTE *)(v32 + 56);
    v138 = 1 << *(_BYTE *)(v32 + 32);
    if (v138 < 64)
      v139 = ~(-1 << v138);
    else
      v139 = -1;
    v25 = v139 & v137;
    v232 = (unint64_t)(v138 + 63) >> 6;
    swift_bridgeObjectRetain();
    v140 = 0;
    v141 = &unk_1EF0E1000;
    v142 = &unk_1EF0E6000;
    v14 = v257;
    if (v25)
      goto LABEL_92;
LABEL_93:
    v145 = v140 + 1;
    if (__OFADD__(v140, 1))
    {
      __break(1u);
      goto LABEL_228;
    }
    if (v145 >= v232)
      goto LABEL_222;
    v146 = *(_QWORD *)&v245[8 * v145];
    v147 = v140 + 1;
    if (!v146)
    {
      v147 = v140 + 2;
      if (v140 + 2 >= v232)
        goto LABEL_222;
      v146 = *(_QWORD *)&v245[8 * v147];
      if (!v146)
      {
        v147 = v140 + 3;
        if (v140 + 3 >= v232)
          goto LABEL_222;
        v146 = *(_QWORD *)&v245[8 * v147];
        if (!v146)
        {
          v147 = v140 + 4;
          if (v140 + 4 >= v232)
            goto LABEL_222;
          v146 = *(_QWORD *)&v245[8 * v147];
          if (!v146)
          {
            v147 = v140 + 5;
            if (v140 + 5 >= v232)
              goto LABEL_222;
            v146 = *(_QWORD *)&v245[8 * v147];
            if (!v146)
              break;
          }
        }
      }
    }
LABEL_110:
    v25 = (v146 - 1) & v146;
    v234 = v147;
    v144 = __clz(__rbit64(v146)) + (v147 << 6);
LABEL_111:
    v149 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 16 * v144);
    v40 = *v149;
    v26 = (uint64_t (*)(uint64_t))v149[1];
    if (v141[276] != -1)
      swift_once();
    v150 = v142[425];
    v31 = v150 + 56;
    v151 = 1 << *(_BYTE *)(v150 + 32);
    if (v151 < 64)
      v152 = ~(-1 << v151);
    else
      v152 = -1;
    v15 = v152 & *(_QWORD *)(v150 + 56);
    v33 = (unint64_t)(v151 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    v14 = 0;
    while (1)
    {
      if (v15)
      {
        v153 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v154 = v153 | (v14 << 6);
        goto LABEL_118;
      }
      v158 = v14 + 1;
      if (__OFADD__(v14, 1))
        break;
      if (v158 >= v33)
        goto LABEL_138;
      v159 = *(_QWORD *)(v31 + 8 * v158);
      ++v14;
      if (!v159)
      {
        v14 = v158 + 1;
        if (v158 + 1 >= v33)
          goto LABEL_138;
        v159 = *(_QWORD *)(v31 + 8 * v14);
        if (!v159)
        {
          v14 = v158 + 2;
          if (v158 + 2 >= v33)
            goto LABEL_138;
          v159 = *(_QWORD *)(v31 + 8 * v14);
          if (!v159)
          {
            v14 = v158 + 3;
            if (v158 + 3 >= v33)
              goto LABEL_138;
            v159 = *(_QWORD *)(v31 + 8 * v14);
            if (!v159)
            {
              v14 = v158 + 4;
              if (v158 + 4 >= v33)
                goto LABEL_138;
              v159 = *(_QWORD *)(v31 + 8 * v14);
              if (!v159)
              {
                v160 = v158 + 5;
                if (v160 >= v33)
                {
LABEL_138:
                  swift_release();
                  swift_bridgeObjectRelease();
                  v32 = v254;
                  v141 = (_QWORD *)&unk_1EF0E1000;
                  v142 = (_QWORD *)&unk_1EF0E6000;
                  v140 = v234;
                  v14 = v257;
                  if (!v25)
                    goto LABEL_93;
LABEL_92:
                  v143 = __clz(__rbit64(v25));
                  v25 &= v25 - 1;
                  v234 = v140;
                  v144 = v143 | (v140 << 6);
                  goto LABEL_111;
                }
                v159 = *(_QWORD *)(v31 + 8 * v160);
                if (!v159)
                {
                  while (1)
                  {
                    v14 = v160 + 1;
                    if (__OFADD__(v160, 1))
                      break;
                    if (v14 >= v33)
                      goto LABEL_138;
                    v159 = *(_QWORD *)(v31 + 8 * v14);
                    ++v160;
                    if (v159)
                      goto LABEL_137;
                  }
LABEL_229:
                  __break(1u);
LABEL_230:
                  __break(1u);
LABEL_231:
                  swift_bridgeObjectRetain();
                  v104 = v245;
                  v109 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  goto LABEL_72;
                }
                v14 = v160;
              }
            }
          }
        }
      }
LABEL_137:
      v15 = (v159 - 1) & v159;
      v154 = __clz(__rbit64(v159)) + (v14 << 6);
LABEL_118:
      v155 = (uint64_t *)(*(_QWORD *)(v150 + 48) + 16 * v154);
      v156 = *v155;
      v32 = v155[1];
      swift_bridgeObjectRetain();
      v157._countAndFlagsBits = v156;
      v157._object = (void *)v32;
      LOBYTE(v156) = String.hasPrefix(_:)(v157);
      swift_bridgeObjectRelease();
      if ((v156 & 1) != 0)
      {
        v32 = v254;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        v231 = 1;
        v14 = v257;
        goto LABEL_141;
      }
    }
    __break(1u);
LABEL_225:
    __break(1u);
LABEL_226:
    swift_once();
  }
  v148 = v140 + 6;
  if (v140 + 6 >= v232)
    goto LABEL_222;
  v146 = *(_QWORD *)&v245[8 * v148];
  if (v146)
  {
    v147 = v140 + 6;
    goto LABEL_110;
  }
  while (1)
  {
    v147 = v148 + 1;
    if (__OFADD__(v148, 1))
    {
      __break(1u);
      goto LABEL_233;
    }
    if (v147 >= v232)
      break;
    v146 = *(_QWORD *)&v245[8 * v147];
    ++v148;
    if (v146)
      goto LABEL_110;
  }
LABEL_222:
  swift_release();
  v231 = 0;
LABEL_141:
  v161 = 1 << *(_BYTE *)(v32 + 32);
  if (v161 < 64)
    v162 = ~(-1 << v161);
  else
    v162 = -1;
  v25 = v162 & *(_QWORD *)(v32 + 56);
  v232 = (unint64_t)(v161 + 63) >> 6;
  swift_bridgeObjectRetain();
  v163 = 0;
  v164 = (_QWORD *)&unk_1EF0E1000;
  v165 = (_QWORD *)&unk_1EF0E6000;
  if (!v25)
    goto LABEL_147;
  while (2)
  {
    v166 = __clz(__rbit64(v25));
    v25 &= v25 - 1;
    v234 = v163;
    v167 = v166 | (v163 << 6);
LABEL_165:
    v173 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 16 * v167);
    v40 = *v173;
    v26 = (uint64_t (*)(uint64_t))v173[1];
    if (v164[277] != -1)
      swift_once();
    v174 = v165[426];
    v31 = v174 + 56;
    v175 = 1 << *(_BYTE *)(v174 + 32);
    if (v175 < 64)
      v176 = ~(-1 << v175);
    else
      v176 = -1;
    v15 = v176 & *(_QWORD *)(v174 + 56);
    v33 = (unint64_t)(v175 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    v14 = 0;
    while (2)
    {
      if (v15)
      {
        v177 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v178 = v177 | (v14 << 6);
LABEL_172:
        v179 = (uint64_t *)(*(_QWORD *)(v174 + 48) + 16 * v178);
        v180 = *v179;
        v32 = v179[1];
        swift_bridgeObjectRetain();
        v181._countAndFlagsBits = v180;
        v181._object = (void *)v32;
        LOBYTE(v180) = String.hasPrefix(_:)(v181);
        swift_bridgeObjectRelease();
        if ((v180 & 1) != 0)
        {
          v32 = v254;
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          LODWORD(v245) = 1;
          v169 = v255;
          v14 = v257;
          goto LABEL_193;
        }
        continue;
      }
      break;
    }
    v182 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_225;
    if (v182 < v33)
    {
      v183 = *(_QWORD *)(v31 + 8 * v182);
      ++v14;
      if (!v183)
      {
        v14 = v182 + 1;
        if (v182 + 1 >= v33)
          goto LABEL_146;
        v183 = *(_QWORD *)(v31 + 8 * v14);
        if (!v183)
        {
          v14 = v182 + 2;
          if (v182 + 2 >= v33)
            goto LABEL_146;
          v183 = *(_QWORD *)(v31 + 8 * v14);
          if (!v183)
          {
            v14 = v182 + 3;
            if (v182 + 3 >= v33)
              goto LABEL_146;
            v183 = *(_QWORD *)(v31 + 8 * v14);
            if (!v183)
            {
              v14 = v182 + 4;
              if (v182 + 4 >= v33)
                goto LABEL_146;
              v183 = *(_QWORD *)(v31 + 8 * v14);
              if (!v183)
              {
                v184 = v182 + 5;
                if (v184 >= v33)
                  goto LABEL_146;
                v183 = *(_QWORD *)(v31 + 8 * v184);
                if (!v183)
                {
                  while (1)
                  {
                    v14 = v184 + 1;
                    if (__OFADD__(v184, 1))
                      goto LABEL_230;
                    if (v14 >= v33)
                      goto LABEL_146;
                    v183 = *(_QWORD *)(v31 + 8 * v14);
                    ++v184;
                    if (v183)
                      goto LABEL_191;
                  }
                }
                v14 = v184;
              }
            }
          }
        }
      }
LABEL_191:
      v15 = (v183 - 1) & v183;
      v178 = __clz(__rbit64(v183)) + (v14 << 6);
      goto LABEL_172;
    }
LABEL_146:
    swift_release();
    swift_bridgeObjectRelease();
    v32 = v254;
    v14 = v257;
    v164 = &unk_1EF0E1000;
    v165 = &unk_1EF0E6000;
    v163 = v234;
    if (v25)
      continue;
    break;
  }
LABEL_147:
  v168 = v163 + 1;
  if (__OFADD__(v163, 1))
  {
LABEL_228:
    __break(1u);
    goto LABEL_229;
  }
  v169 = v255;
  if (v168 >= v232)
    goto LABEL_223;
  v170 = *(_QWORD *)&v245[8 * v168];
  v171 = v163 + 1;
  if (v170)
    goto LABEL_164;
  v171 = v163 + 2;
  if (v163 + 2 >= v232)
    goto LABEL_223;
  v170 = *(_QWORD *)&v245[8 * v171];
  if (v170)
    goto LABEL_164;
  v171 = v163 + 3;
  if (v163 + 3 >= v232)
    goto LABEL_223;
  v170 = *(_QWORD *)&v245[8 * v171];
  if (v170)
    goto LABEL_164;
  v171 = v163 + 4;
  if (v163 + 4 >= v232)
    goto LABEL_223;
  v170 = *(_QWORD *)&v245[8 * v171];
  if (v170)
    goto LABEL_164;
  v171 = v163 + 5;
  if (v163 + 5 >= v232)
    goto LABEL_223;
  v170 = *(_QWORD *)&v245[8 * v171];
  if (v170)
    goto LABEL_164;
  v172 = v163 + 6;
  if (v163 + 6 >= v232)
  {
LABEL_223:
    swift_release();
    LODWORD(v245) = 0;
LABEL_193:
    v185 = v246;
    dispatch thunk of NetworkAvailability.status.getter();
    v186 = v252;
    v239(v252, v242, v14);
    v187 = v251;
    v188 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v251 + 16);
    v189 = v247;
    v188(v247, v185, v169);
    v190 = v248;
    v188(v248, v189, v169);
    v191 = *(_BYTE **)(v187 + 8);
    ((void (*)(_BYTE *, uint64_t))v191)(v189, v169);
    v192 = Logger.logObject.getter();
    v193 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v192, v193))
    {
      v194 = swift_slowAlloc();
      v232 = swift_slowAlloc();
      v259 = v232;
      *(_DWORD *)v194 = 136315906;
      v262 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001B4F01040, &v259);
      v247 = v191;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v194 + 12) = 1024;
      LODWORD(v262) = v231;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v194 + 18) = 1024;
      v234 = (uint64_t)v188;
      v195 = v257;
      v196 = v254;
      LODWORD(v262) = (_DWORD)v245;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v194 + 24) = 2080;
      lazy protocol witness table accessor for type NetworkAvailability.Status and conformance NetworkAvailability.Status();
      v197 = dispatch thunk of CustomStringConvertible.description.getter();
      v262 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v197, v198, &v259);
      v32 = v196;
      v14 = v195;
      v188 = (void (*)(_BYTE *, _BYTE *, uint64_t))v234;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v191 = v247;
      ((void (*)(_BYTE *, uint64_t))v247)(v190, v169);
      _os_log_impl(&dword_1B4BE6000, v192, v193, "SelfReflectionAgent.%s hasAllowedFallbackToMightyPrefix: %{BOOL}d hasDeniedFallbackToMightyDialog: %{BOOL}d networkStatus: %s", (uint8_t *)v194, 0x22u);
      v199 = v232;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v199, -1, -1);
      MEMORY[0x1B5E44758](v194, -1, -1);

      v200 = v252;
    }
    else
    {
      ((void (*)(_BYTE *, uint64_t))v191)(v190, v169);

      v200 = v186;
    }
    ((void (*)(_BYTE *, uint64_t))v238)(v200, v14);
    swift_beginAccess();
    v201 = static SelfReflectionUserDefaults._fallbackToMighty;
    v202 = unk_1EF0E6DB8;
    v203 = byte_1EF0E6DC0;
    swift_bridgeObjectRetain();
    v204 = specialized SelfReflectionUserDefaultsProperty.wrappedValue.getter(v201, v202, v203);
    swift_bridgeObjectRelease();
    v205 = v244;
    if ((v204 & 1) != 0)
    {
      v206 = *(unsigned __int8 *)(v258 + 40);
      v207 = v249;
      v208 = v255;
      v188(v249, v246, v255);
      if (v206 == 1)
      {
        v209 = v237;
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(v251 + 104))(v237, *MEMORY[0x1E0DA8190], v208);
        v210 = static NetworkAvailability.Status.== infix(_:_:)();
        ((void (*)(_BYTE *, uint64_t))v191)(v209, v208);
        v211 = ((uint64_t (*)(_BYTE *, uint64_t))v191)(v207, v208);
        if ((v210 & 1) != 0 && ((v245 | (v205 | v233) & v231 ^ 1) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          v212 = v235;
          v239(v235, v242, v14);
          v213 = Logger.logObject.getter();
          v214 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v213, v214))
          {
            v215 = swift_slowAlloc();
            v216 = swift_slowAlloc();
            v262 = v216;
            *(_DWORD *)v215 = 136315650;
            v261 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001B4F01040, &v262);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v215 + 12) = 1024;
            LODWORD(v261) = v205 & 1;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v215 + 18) = 1024;
            LODWORD(v261) = v233 & 1;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_1B4BE6000, v213, v214, "SelfReflectionAgent.%s decided to fall back to Intelligence Flow. hasCantDoDialog: %{BOOL}d hasUnsupportedDialog: %{BOOL}d", (uint8_t *)v215, 0x18u);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v216, -1, -1);
            MEMORY[0x1B5E44758](v215, -1, -1);
            swift_release();

            ((void (*)(_BYTE *, uint64_t))v238)(v235, v14);
            ((void (*)(_BYTE *, uint64_t))v191)(v246, v255);
          }
          else
          {
            swift_release();

            ((void (*)(_BYTE *, uint64_t))v238)(v212, v14);
            ((void (*)(_BYTE *, uint64_t))v191)(v246, v208);
          }
          v85 = v256;
          *(_WORD *)v256 = 518;
          *(_BYTE *)(v85 + 2) = v205 & 1;
          *(_WORD *)(v85 + 3) = 514;
          *(_BYTE *)(v85 + 5) = 2;
          *(_QWORD *)(v85 + 8) = 0;
          *(_BYTE *)(v85 + 16) = 1;
          *(_QWORD *)(v85 + 24) = 0;
          *(_WORD *)(v85 + 32) = 513;
          goto LABEL_220;
        }
LABEL_204:
        v217 = (_BYTE *)v236(v211);
        if (v217)
        {
          v218 = v217[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes];

          if ((v218 & 1) != 0)
          {
            v219 = Logger.logObject.getter();
            v220 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v219, v220))
            {
              v221 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v221 = 0;
              _os_log_impl(&dword_1B4BE6000, v219, v220, "SelfReflectionAgent. Executing with Pommes Response.", v221, 2u);
              MEMORY[0x1B5E44758](v221, -1, -1);
            }

            if ((ResultCandidateState.hasAlternativeSuggestion.getter() & 1) != 0)
            {
              v222 = Logger.logObject.getter();
              v223 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v222, v223))
              {
                v224 = (uint8_t *)swift_slowAlloc();
                v225 = swift_slowAlloc();
                v262 = v225;
                *(_DWORD *)v224 = 136315138;
                v261 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001B4F01040, &v262);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl(&dword_1B4BE6000, v222, v223, "SelfReflectionAgent.%s has Alternative", v224, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1B5E44758](v225, -1, -1);
                MEMORY[0x1B5E44758](v224, -1, -1);
              }

              v226 = v255;
              (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(**(_QWORD **)(v258 + 16) + 240))(v240, v241, 7, 9);
              swift_release();
              swift_bridgeObjectRelease();
              ((void (*)(_BYTE *, uint64_t))v191)(v246, v226);
              v135 = v256;
              *(_BYTE *)v256 = 5;
              *(_BYTE *)(v135 + 1) = v253 & 1;
              *(_BYTE *)(v135 + 2) = v205 & 1;
              *(_WORD *)(v135 + 3) = 514;
              *(_BYTE *)(v135 + 5) = 2;
              *(_QWORD *)(v135 + 8) = 0;
              *(_BYTE *)(v135 + 16) = 1;
              *(_QWORD *)(v135 + 24) = 0;
              *(_WORD *)(v135 + 32) = 513;
              goto LABEL_212;
            }
            ((void (*)(_BYTE *, uint64_t))v191)(v246, v255);
            swift_bridgeObjectRelease();
          }
          else
          {
            ((void (*)(_BYTE *, uint64_t))v191)(v246, v208);
            swift_bridgeObjectRelease();
          }
          swift_release();
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          ((void (*)(_BYTE *, uint64_t))v191)(v246, v208);
        }
        v228 = v256;
        v229 = v243;
        *(_BYTE *)v256 = 2;
        *(_BYTE *)(v228 + 1) = v253 & 1;
        *(_BYTE *)(v228 + 2) = v205 & 1;
        *(_WORD *)(v228 + 3) = 514;
        *(_BYTE *)(v228 + 5) = 2;
        *(_QWORD *)(v228 + 8) = 0;
        *(_BYTE *)(v228 + 16) = 1;
        *(_QWORD *)(v228 + 24) = 0;
        *(_WORD *)(v228 + 32) = 513;
        *(_QWORD *)(v228 + 40) = v32;
        *(_QWORD *)(v228 + 48) = v229;
        return;
      }
    }
    else
    {
      v207 = v249;
      v208 = v255;
      v188(v249, v246, v255);
    }
    v211 = ((uint64_t (*)(_BYTE *, uint64_t))v191)(v207, v208);
    goto LABEL_204;
  }
  v170 = *(_QWORD *)&v245[8 * v172];
  if (v170)
  {
    v171 = v163 + 6;
LABEL_164:
    v25 = (v170 - 1) & v170;
    v234 = v171;
    v167 = __clz(__rbit64(v170)) + (v171 << 6);
    goto LABEL_165;
  }
  while (1)
  {
    v171 = v172 + 1;
    if (__OFADD__(v172, 1))
      break;
    if (v171 >= v232)
      goto LABEL_223;
    v170 = *(_QWORD *)&v245[8 * v171];
    ++v172;
    if (v170)
      goto LABEL_164;
  }
LABEL_233:
  __break(1u);
}

uint64_t ExecutionOutput.hasCantUnderstandDialog.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _QWORD *v29;
  __objc2_class *v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  _BYTE *cache;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  void *v46;
  Swift::String v47;
  int64_t v48;
  unint64_t v49;
  int64_t v50;
  uint64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = v0;
  v4 = ExecutionOutput.catCategories.getter();
  v5 = v4;
  v6 = v4 + 56;
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(v4 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  while (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v12 << 6);
LABEL_5:
    v15 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v14);
    v17 = *v15;
    v16 = v15[1];
    v57 = 0xD000000000000010;
    v58 = 0x80000001B4F00EE0;
    v55 = v17;
    v56 = v16;
    v18 = type metadata accessor for Locale();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v3, 1, 1, v18);
    lazy protocol witness table accessor for type String and conformance String();
    v19 = StringProtocol.compare<A>(_:options:range:locale:)();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, &demangling cache variable for type metadata for Locale?);
    result = swift_bridgeObjectRelease();
    if (!v19)
    {
LABEL_78:
      swift_release();
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  v20 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  if (v20 >= v10)
    goto LABEL_25;
  v21 = *(_QWORD *)(v6 + 8 * v20);
  ++v12;
  if (v21)
    goto LABEL_24;
  v12 = v20 + 1;
  if (v20 + 1 >= v10)
    goto LABEL_25;
  v21 = *(_QWORD *)(v6 + 8 * v12);
  if (v21)
    goto LABEL_24;
  v12 = v20 + 2;
  if (v20 + 2 >= v10)
    goto LABEL_25;
  v21 = *(_QWORD *)(v6 + 8 * v12);
  if (v21)
    goto LABEL_24;
  v12 = v20 + 3;
  if (v20 + 3 >= v10)
    goto LABEL_25;
  v21 = *(_QWORD *)(v6 + 8 * v12);
  if (v21)
    goto LABEL_24;
  v12 = v20 + 4;
  if (v20 + 4 >= v10)
    goto LABEL_25;
  v21 = *(_QWORD *)(v6 + 8 * v12);
  if (v21)
  {
LABEL_24:
    v9 = (v21 - 1) & v21;
    v14 = __clz(__rbit64(v21)) + (v12 << 6);
    goto LABEL_5;
  }
  v22 = v20 + 5;
  if (v22 < v10)
  {
    v21 = *(_QWORD *)(v6 + 8 * v22);
    if (!v21)
    {
      while (1)
      {
        v12 = v22 + 1;
        if (__OFADD__(v22, 1))
          break;
        if (v12 >= v10)
          goto LABEL_25;
        v21 = *(_QWORD *)(v6 + 8 * v12);
        ++v22;
        if (v21)
          goto LABEL_24;
      }
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    v12 = v22;
    goto LABEL_24;
  }
LABEL_25:
  swift_release();
  swift_bridgeObjectRelease();
  v23 = ExecutionOutput.catIdentifiers.getter();
  v24 = *(_QWORD *)(v23 + 56);
  v51 = v23 + 56;
  v25 = 1 << *(_BYTE *)(v23 + 32);
  if (v25 < 64)
    v26 = ~(-1 << v25);
  else
    v26 = -1;
  v27 = v26 & v24;
  v52 = (unint64_t)(v25 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v28 = 0;
  v29 = &unk_1ED50A000;
  v30 = _TtCC14SiriKitRuntime18RequestContextData7Builder;
  v54 = result;
  if (!v27)
    goto LABEL_30;
  while (2)
  {
    v27 &= v27 - 1;
    v53 = v28;
LABEL_48:
    if (v29[1] != -1)
      swift_once();
    cache = v30[51].cache;
    v36 = cache + 56;
    v37 = 1 << cache[32];
    if (v37 < 64)
      v38 = ~(-1 << v37);
    else
      v38 = -1;
    v39 = v38 & *((_QWORD *)cache + 7);
    v40 = (unint64_t)(v37 + 63) >> 6;
    result = swift_bridgeObjectRetain_n();
    v41 = 0;
    while (2)
    {
      if (v39)
      {
        v42 = __clz(__rbit64(v39));
        v39 &= v39 - 1;
        v43 = v42 | (v41 << 6);
LABEL_55:
        v44 = (uint64_t *)(*((_QWORD *)cache + 6) + 16 * v43);
        v45 = *v44;
        v46 = (void *)v44[1];
        swift_bridgeObjectRetain();
        v47._countAndFlagsBits = v45;
        v47._object = v46;
        LOBYTE(v45) = String.hasPrefix(_:)(v47);
        result = swift_bridgeObjectRelease();
        if ((v45 & 1) != 0)
        {
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_78;
        }
        continue;
      }
      break;
    }
    v48 = v41 + 1;
    if (__OFADD__(v41, 1))
      goto LABEL_81;
    if (v48 < v40)
    {
      v49 = *(_QWORD *)&v36[8 * v48];
      ++v41;
      if (!v49)
      {
        v41 = v48 + 1;
        if (v48 + 1 >= v40)
          goto LABEL_75;
        v49 = *(_QWORD *)&v36[8 * v41];
        if (!v49)
        {
          v41 = v48 + 2;
          if (v48 + 2 >= v40)
            goto LABEL_75;
          v49 = *(_QWORD *)&v36[8 * v41];
          if (!v49)
          {
            v41 = v48 + 3;
            if (v48 + 3 >= v40)
              goto LABEL_75;
            v49 = *(_QWORD *)&v36[8 * v41];
            if (!v49)
            {
              v41 = v48 + 4;
              if (v48 + 4 >= v40)
                goto LABEL_75;
              v49 = *(_QWORD *)&v36[8 * v41];
              if (!v49)
              {
                v50 = v48 + 5;
                if (v50 >= v40)
                  goto LABEL_75;
                v49 = *(_QWORD *)&v36[8 * v50];
                if (!v49)
                {
                  while (1)
                  {
                    v41 = v50 + 1;
                    if (__OFADD__(v50, 1))
                      goto LABEL_84;
                    if (v41 >= v40)
                      goto LABEL_75;
                    v49 = *(_QWORD *)&v36[8 * v41];
                    ++v50;
                    if (v49)
                      goto LABEL_74;
                  }
                }
                v41 = v50;
              }
            }
          }
        }
      }
LABEL_74:
      v39 = (v49 - 1) & v49;
      v43 = __clz(__rbit64(v49)) + (v41 << 6);
      goto LABEL_55;
    }
LABEL_75:
    swift_release();
    result = swift_bridgeObjectRelease();
    v28 = v53;
    v29 = (_QWORD *)&unk_1ED50A000;
    v30 = _TtCC14SiriKitRuntime18RequestContextData7Builder;
    if (v27)
      continue;
    break;
  }
LABEL_30:
  v31 = v28 + 1;
  if (__OFADD__(v28, 1))
    goto LABEL_83;
  if (v31 >= v52)
    goto LABEL_79;
  v32 = *(_QWORD *)(v51 + 8 * v31);
  v33 = v28 + 1;
  if (v32)
    goto LABEL_47;
  v33 = v28 + 2;
  if (v28 + 2 >= v52)
    goto LABEL_79;
  v32 = *(_QWORD *)(v51 + 8 * v33);
  if (v32)
    goto LABEL_47;
  v33 = v28 + 3;
  if (v28 + 3 >= v52)
    goto LABEL_79;
  v32 = *(_QWORD *)(v51 + 8 * v33);
  if (v32)
    goto LABEL_47;
  v33 = v28 + 4;
  if (v28 + 4 >= v52)
    goto LABEL_79;
  v32 = *(_QWORD *)(v51 + 8 * v33);
  if (v32)
    goto LABEL_47;
  v33 = v28 + 5;
  if (v28 + 5 >= v52)
    goto LABEL_79;
  v32 = *(_QWORD *)(v51 + 8 * v33);
  if (v32)
    goto LABEL_47;
  v34 = v28 + 6;
  if (v28 + 6 >= v52)
  {
LABEL_79:
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v32 = *(_QWORD *)(v51 + 8 * v34);
    if (v32)
    {
      v33 = v28 + 6;
LABEL_47:
      v27 = (v32 - 1) & v32;
      v53 = v33;
      goto LABEL_48;
    }
    while (1)
    {
      v33 = v34 + 1;
      if (__OFADD__(v34, 1))
        break;
      if (v33 >= v52)
        goto LABEL_79;
      v32 = *(_QWORD *)(v51 + 8 * v33);
      ++v34;
      if (v32)
        goto LABEL_47;
    }
LABEL_85:
    __break(1u);
  }
  return result;
}

uint64_t ExecutionOutput.hasCantDoDialog.getter()
{
  return ExecutionOutput.hasCantDoDialog.getter(0x6F442074276E6143, 0xE800000000000000);
}

uint64_t ExecutionOutput.hasUnsupportedDialog.getter()
{
  return ExecutionOutput.hasCantDoDialog.getter(0x74726F70707553, 0xE700000000000000);
}

uint64_t ExecutionOutput.hasCantDoDialog.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = ExecutionOutput.catCategories.getter();
  v8 = v7;
  v9 = v7 + 56;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v7 + 56);
  v27 = (unint64_t)(v10 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v14 = 0;
  while (v12)
  {
    v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v16 = v15 | (v14 << 6);
LABEL_5:
    v17 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v16);
    v19 = *v17;
    v18 = v17[1];
    v30 = a1;
    v31 = a2;
    v28 = v19;
    v29 = v18;
    v20 = type metadata accessor for Locale();
    v21 = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 1, 1, v20);
    lazy protocol witness table accessor for type String and conformance String();
    v22 = StringProtocol.compare<A>(_:options:range:locale:)();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for Locale?);
    result = swift_bridgeObjectRelease();
    if (!v22)
      goto LABEL_26;
  }
  v23 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v23 >= v27)
    goto LABEL_25;
  v24 = *(_QWORD *)(v9 + 8 * v23);
  ++v14;
  if (v24)
    goto LABEL_24;
  v14 = v23 + 1;
  if (v23 + 1 >= v27)
    goto LABEL_25;
  v24 = *(_QWORD *)(v9 + 8 * v14);
  if (v24)
    goto LABEL_24;
  v14 = v23 + 2;
  if (v23 + 2 >= v27)
    goto LABEL_25;
  v24 = *(_QWORD *)(v9 + 8 * v14);
  if (v24)
    goto LABEL_24;
  v14 = v23 + 3;
  if (v23 + 3 >= v27)
    goto LABEL_25;
  v24 = *(_QWORD *)(v9 + 8 * v14);
  if (v24)
    goto LABEL_24;
  v14 = v23 + 4;
  if (v23 + 4 >= v27)
    goto LABEL_25;
  v24 = *(_QWORD *)(v9 + 8 * v14);
  if (v24)
  {
LABEL_24:
    v12 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v14 << 6);
    goto LABEL_5;
  }
  v25 = v23 + 5;
  if (v25 >= v27)
  {
LABEL_25:
    v21 = 0;
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return v21;
  }
  v24 = *(_QWORD *)(v9 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_24;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v27)
      goto LABEL_25;
    v24 = *(_QWORD *)(v9 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_24;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t ExecutionOutput.catIdentifiers.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v1 = *(void **)(v0 + OBJC_IVAR___SKRExecutionOutput_command);
  if (!v1)
    return MEMORY[0x1E0DEE9E8];
  v2 = one-time initialization token for conversationBridge;
  v3 = v1;
  if (v2 != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = (unint64_t)v3;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v62 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getObjectType();
    v10 = _typeName(_:qualified:)();
    v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v6, v7, "SelfReflectionAgent attempts to retrieve cat id from command: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);

  }
  else
  {

  }
  objc_opt_self();
  v12 = swift_dynamicCastObjCClass();
  if (v12)
  {
    v13 = (void *)v12;
    v14 = (id)v5;
    v15 = objc_msgSend(v13, sel_views);
    if (v15)
    {
      v16 = v15;
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
      v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((unint64_t)v17 >> 62)
      {
        if (v17 < 0)
          v5 = v17;
        else
          v5 = v17 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v18 = _CocoaArrayWrapper.endIndex.getter();
        v60 = v14;
        if (v18)
          goto LABEL_11;
      }
      else
      {
        v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        v60 = v14;
        if (v18)
        {
LABEL_11:
          if (v18 >= 1)
          {
            v19 = 0;
            v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            do
            {
              if ((v17 & 0xC000000000000001) != 0)
                v22 = (id)MEMORY[0x1B5E43B94](v19, v17);
              else
                v22 = *(id *)(v17 + 8 * v19 + 32);
              v23 = v22;
              v64 = (uint64_t)v22;
              closure #1 in ExecutionOutput.catIdentifiers.getter((void **)&v64, (SEL *)&selRef_dialogIdentifier, "SelfReflectionAgent view: %s catId: %s", &v62);

              v24 = v63;
              if (v63)
              {
                v25 = v62;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
                v27 = v20[2];
                v26 = v20[3];
                if (v27 >= v26 >> 1)
                  v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v20);
                v20[2] = v27 + 1;
                v21 = &v20[2 * v27];
                v21[4] = v25;
                v21[5] = v24;
              }
              ++v19;
            }
            while (v18 != v19);
            goto LABEL_54;
          }
          __break(1u);
          goto LABEL_56;
        }
      }
      v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_54:
      swift_bridgeObjectRelease_n();
      v56 = specialized Set.init<A>(_:)((uint64_t)v20);

LABEL_59:
      swift_bridgeObjectRelease();
      return v56;
    }

  }
  objc_opt_self();
  v28 = swift_dynamicCastObjCClass();
  if (!v28)
  {
LABEL_47:

    return MEMORY[0x1E0DEE9E8];
  }
  v29 = (void *)v28;
  v18 = (uint64_t)(id)v5;
  v30 = objc_msgSend(v29, sel_dialogs);
  if (!v30)
  {

    goto LABEL_47;
  }
  v31 = v30;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SADialog);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    v32 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    v57 = (void *)v18;
    if (!v32)
      goto LABEL_57;
    goto LABEL_28;
  }
LABEL_56:
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v32 = result;
  v57 = (void *)v18;
  if (!result)
  {
LABEL_57:
    v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_58:
    swift_bridgeObjectRelease_n();
    v56 = specialized Set.init<A>(_:)((uint64_t)v35);

    goto LABEL_59;
  }
LABEL_28:
  if (v32 >= 1)
  {
    v34 = 0;
    v59 = v5 & 0xC000000000000001;
    v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if (v59)
        v37 = (id)MEMORY[0x1B5E43B94](v34, v5);
      else
        v37 = *(id *)(v5 + 8 * v34 + 32);
      v38 = v37;
      v39 = objc_msgSend(v37, sel_dialogIdentifier, v57);
      if (v39)
      {
        v40 = v39;
        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v43 = v42;

      }
      else
      {
        v41 = 0;
        v43 = 0;
      }
      swift_bridgeObjectRetain_n();
      v44 = Logger.logObject.getter();
      v45 = static os_log_type_t.debug.getter();
      v61 = v41;
      if (os_log_type_enabled(v44, v45))
      {
        v58 = v35;
        v46 = swift_slowAlloc();
        v47 = v32;
        v48 = v5;
        v49 = swift_slowAlloc();
        v63 = v43;
        v64 = v49;
        *(_DWORD *)v46 = 136315138;
        v62 = v41;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
        v50 = String.init<A>(describing:)();
        *(_QWORD *)(v46 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v64);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v44, v45, "SelfReflectionAgent dialog catId: %s", (uint8_t *)v46, 0xCu);
        swift_arrayDestroy();
        v52 = v49;
        v5 = v48;
        v32 = v47;
        MEMORY[0x1B5E44758](v52, -1, -1);
        v53 = v46;
        v35 = v58;
        MEMORY[0x1B5E44758](v53, -1, -1);

        if (v43)
          goto LABEL_42;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        if (v43)
        {
LABEL_42:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
          v55 = v35[2];
          v54 = v35[3];
          if (v55 >= v54 >> 1)
            v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v35);
          v35[2] = v55 + 1;
          v36 = &v35[2 * v55];
          v36[4] = v61;
          v36[5] = v43;
        }
      }
      if (v32 == ++v34)
        goto LABEL_58;
    }
  }
  __break(1u);
  return result;
}

uint64_t ExecutionOutput.catCategories.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(void **)(v0 + OBJC_IVAR___SKRExecutionOutput_command);
  if (!v1)
    return MEMORY[0x1E0DEE9E8];
  v2 = one-time initialization token for conversationBridge;
  v3 = v1;
  if (v2 != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = v3;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v31 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getObjectType();
    v10 = _typeName(_:qualified:)();
    v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v6, v7, "SelfReflectionAgent attempts to retrieve cat category from command: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);

  }
  else
  {

  }
  objc_opt_self();
  v12 = swift_dynamicCastObjCClass();
  if (!v12)
  {
LABEL_24:

    return MEMORY[0x1E0DEE9E8];
  }
  v13 = (void *)v12;
  v14 = v5;
  v15 = objc_msgSend(v13, sel_views);
  if (!v15)
  {

    goto LABEL_24;
  }
  v16 = v15;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v17 >> 62))
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    v30 = v14;
    if (v18)
      goto LABEL_11;
LABEL_27:
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_28:
    swift_bridgeObjectRelease_n();
    v29 = specialized Set.init<A>(_:)((uint64_t)v21);

    swift_bridgeObjectRelease();
    return v29;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v18 = result;
  v30 = v14;
  if (!result)
    goto LABEL_27;
LABEL_11:
  if (v18 >= 1)
  {
    v20 = 0;
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v17 & 0xC000000000000001) != 0)
        v23 = (id)MEMORY[0x1B5E43B94](v20, v17);
      else
        v23 = *(id *)(v17 + 8 * v20 + 32);
      v24 = v23;
      v33 = (uint64_t)v23;
      closure #1 in ExecutionOutput.catIdentifiers.getter((void **)&v33, (SEL *)&selRef_dialogCategory, "SelfReflectionAgent view: %s catCategory: %s", &v31);

      v25 = v32;
      if (v32)
      {
        v26 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        v28 = v21[2];
        v27 = v21[3];
        if (v28 >= v27 >> 1)
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v21);
        v21[2] = v28 + 1;
        v22 = &v21[2 * v28];
        v22[4] = v26;
        v22[5] = v25;
      }
      ++v20;
    }
    while (v18 != v20);
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

unint64_t ResultCandidateState.isFlexibleFollowUp.getter()
{
  uint64_t v0;
  unint64_t result;
  void *v2;
  unint64_t v3;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 872))();
  if (result)
  {
    v2 = (void *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 264))(result);
    swift_release();
    if (v2 && (v3 = (unint64_t)objc_msgSend(v2, sel_speechEvent), v2, v3 <= 0x23))
      return (0xC40000000uLL >> v3) & 1;
    else
      return 0;
  }
  return result;
}

uint64_t ResultCandidateState.isVoiceTrigger.getter()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  unint64_t v3;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 872))();
  if (result)
  {
    v2 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 264))(result);
    swift_release();
    if (v2 && (v3 = (unint64_t)objc_msgSend(v2, sel_speechEvent), v2, v3 <= 0x10))
      return (0x18100u >> v3) & 1;
    else
      return 0;
  }
  return result;
}

uint64_t PommesInfo.isWebSearchFallback.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  Swift::String v3;
  char v4;
  id v5;
  char v6;

  v1 = *(void **)(v0 + 16);
  if (!v1)
    return 0;
  v2 = v1;
  PommesResponse.metadataDomainName.getter();
  v3 = String.lowercased()();
  swift_bridgeObjectRelease();
  v4 = specialized Sequence<>.contains(_:)(v3._countAndFlagsBits, (uint64_t)v3._object, outlined read-only object #0 of PommesInfo.isWebSearchFallback.getter);

  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0)
    return 0;
  v5 = v2;
  v6 = PommesResponse.metadataFallbackTriggered.getter();

  return v6 & 1;
}

id AFSpeechPackage.isSingleWord.getter()
{
  void *v0;
  id result;
  void *v2;
  id v3;
  unint64_t v4;
  uint64_t v5;

  result = objc_msgSend(v0, sel_recognition);
  if (result)
  {
    v2 = result;
    v3 = objc_msgSend(result, sel_phrases);

    if (v3)
    {
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechPhrase);
      v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v4 >> 62)
      {
        swift_bridgeObjectRetain();
        v5 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      return (id)(v5 == 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ResultCandidateState.hasAlternativeSuggestion.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  void *v11;
  id v12;
  unint64_t v13;
  uint64_t result;
  id v15;
  void *v16;
  uint64_t v17;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 352))(v6);
  v10 = v9;
  if (!v9)
    return v10 & 1;
  v11 = *(void **)(v9 + 16);
  v12 = v11;
  swift_release();
  if (!v11)
    goto LABEL_15;
  v13 = dispatch thunk of PommesResponse.experiences.getter();
  if (!(v13 >> 62))
  {
    result = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_5;
LABEL_14:

    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_14;
LABEL_5:
  if ((v13 & 0xC000000000000001) != 0)
  {
    v15 = (id)MEMORY[0x1B5E43B94](0, v13);
LABEL_8:
    v16 = v15;
    swift_bridgeObjectRelease();
    type metadata accessor for GenericExperience();
    if (swift_dynamicCastClass())
    {
      dispatch thunk of GenericExperience.serverSuggestions.getter();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
        v10 = Apple_Parsec_Siri_V2alpha_ServerSuggestion.hasAlternateQuerySuggestion.getter();

        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
        return v10 & 1;
      }

      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
    }
    else
    {

    }
LABEL_15:
    v10 = 0;
    return v10 & 1;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v15 = *(id *)(v13 + 32);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:)(uint64_t a1)
{
  id *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  _BOOL4 v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[5];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v30 - v14;
  outlined init with copy of Tagger?(a1, (uint64_t)&v34);
  if (v35)
  {
    v16 = outlined init with take of ReferenceResolutionClientProtocol(&v34, (uint64_t)v36);
  }
  else
  {
    v17 = v1[13];
    v36[3] = type metadata accessor for TaggingService();
    v36[4] = &protocol witness table for TaggingService;
    v36[0] = v17;
    swift_retain();
    v16 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v34, &demangling cache variable for type metadata for Tagger?);
  }
  (*((void (**)(__int128 *__return_ptr, uint64_t))*v1 + 40))(&v34, v16);
  v18 = v34;
  swift_bridgeObjectRelease();
  v19 = swift_bridgeObjectRelease();
  if (v18 == 2 || v18 == 5)
  {
    v20 = (unsigned __int8 *)(*((uint64_t (**)(uint64_t))*v1 + 31))(v19);
    if (v20)
    {
      v21 = v20[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes];

      if (v21 == 1)
      {
        v33 = (*((uint64_t (**)(void))*v1 + 25))();
        if (v22)
        {
          v23 = v22;
          UUID.init(uuidString:)();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
          {
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
            return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          }
          v32 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
          v32(v15, v8, v9);
          v31 = (unint64_t)objc_msgSend(v1[4], sel_getSearchQueriesDataSharingStatus) < 2;
          v25 = type metadata accessor for TaskPriority();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v5, 1, 1, v25);
          (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
          outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v36, (uint64_t)&v34);
          v26 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
          v27 = v26 + v11;
          v30 = ((v27 & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8;
          v28 = swift_allocObject();
          *(_QWORD *)(v28 + 16) = 0;
          *(_QWORD *)(v28 + 24) = 0;
          v32((char *)(v28 + v26), v13, v9);
          *(_BYTE *)(v28 + v27) = v31;
          outlined init with take of ReferenceResolutionClientProtocol(&v34, (v27 & 0xFFFFFFFFFFFFFFF8) + v28 + 8);
          v29 = (uint64_t *)(v28 + v30);
          *v29 = v33;
          v29[1] = v23;
          _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:), v28);
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
          (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
        }
      }
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
}

uint64_t closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v8 + 96) = a7;
  *(_QWORD *)(v8 + 104) = a8;
  *(_BYTE *)(v8 + 144) = a5;
  *(_QWORD *)(v8 + 80) = a4;
  *(_QWORD *)(v8 + 88) = a6;
  v9 = type metadata accessor for DataClassificationTag();
  *(_QWORD *)(v8 + 112) = v9;
  *(_QWORD *)(v8 + 120) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 128) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t *, uint64_t, uint64_t);

  v2 = v0[15];
  v1 = v0[16];
  v3 = v0[14];
  v4 = (_QWORD *)v0[11];
  static DataClassificationTag.searchRequest(requestIdentifier:optedInToSearchSharing:)();
  v5 = v4[3];
  v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  v7 = MEMORY[0x1E0D97880];
  v0[5] = v3;
  v0[6] = v7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(boxed_opaque_existential_1, v1, v3);
  v11 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))(**(int **)(v6 + 8) + *(_QWORD *)(v6 + 8));
  v9 = (_QWORD *)swift_task_alloc();
  v0[17] = (uint64_t)v9;
  *v9 = v0;
  v9[1] = closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:);
  return v11(v0 + 2, v5, v6);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v1 = &unk_1ED50F000;
  if ((*(_BYTE *)(v0 + 145) & 1) == 0)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.error.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(_QWORD *)(v0 + 104);
    if (v5)
    {
      v7 = *(_QWORD *)(v0 + 96);
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v26 = v9;
      *(_DWORD *)v8 = 136380675;
      swift_bridgeObjectRetain();
      v1 = (_QWORD *)&unk_1ED50F000;
      *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v3, v4, "Unable to tag request %{private}s.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v9, -1, -1);
      MEMORY[0x1B5E44758](v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

  }
  if (v1[14] != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  v13 = os_log_type_enabled(v11, v12);
  v15 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 128);
  v17 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 112);
  if (v13)
  {
    v25 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 96);
    v24 = *(unsigned __int8 *)(v0 + 144);
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v26 = v20;
    *(_DWORD *)v19 = 136380931;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    if (v24)
      v21 = 28265;
    else
      v21 = 7632239;
    if (v24)
      v22 = 0xE200000000000000;
    else
      v22 = 0xE300000000000000;
    *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v11, v12, "Search query sharing status at the time of %{private}s: opted-%s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v19, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v25, v16);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:)(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)v1 + 16;
  *(_BYTE *)(*(_QWORD *)v1 + 145) = a1;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return swift_task_switch();
}

id *SelfReflectionAgent.deinit()
{
  id *v0;

  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 6));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SelfReflectionAgent.__deallocating_deinit()
{
  SelfReflectionAgent.deinit();
  return swift_deallocClassInstance();
}

uint64_t PommesInfo.isWebSearch.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  Swift::String v3;
  char v4;

  v1 = *(void **)(v0 + 16);
  if (!v1)
    return 0;
  v2 = v1;
  PommesResponse.metadataDomainName.getter();
  v3 = String.lowercased()();
  swift_bridgeObjectRelease();
  v4 = specialized Sequence<>.contains(_:)(v3._countAndFlagsBits, (uint64_t)v3._object, outlined read-only object #0 of PommesInfo.isWebSearch.getter);

  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t PommesInfo.isFallback.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;

  v1 = *(void **)(v0 + 16);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = PommesResponse.metadataFallbackTriggered.getter();

  return v3 & 1;
}

uint64_t one-time initialization function for kCantUnderstandCatIds()
{
  void *v0;
  uint64_t result;

  v0 = (void *)specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kCantUnderstandCatIds);
  result = swift_arrayDestroy();
  kCantUnderstandCatIds = v0;
  return result;
}

uint64_t one-time initialization function for kAllowedFallbackToMightyPrefix()
{
  void *v0;
  uint64_t result;

  v0 = (void *)specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kAllowedFallbackToMightyPrefix);
  result = swift_arrayDestroy();
  kAllowedFallbackToMightyPrefix = v0;
  return result;
}

uint64_t one-time initialization function for kDeniedFallbackToMightyCatIds()
{
  void *v0;
  uint64_t result;

  v0 = (void *)specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kDeniedFallbackToMightyCatIds);
  result = swift_arrayDestroy();
  kDeniedFallbackToMightyCatIds = v0;
  return result;
}

void closure #1 in ExecutionOutput.catIdentifiers.getter(void **a1@<X0>, SEL *a2@<X1>, const char *a3@<X2>, uint64_t *a4@<X8>)
{
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v7 = *a1;
  objc_opt_self();
  v8 = (void *)swift_dynamicCastObjCClass();
  if (v8 && (v9 = objc_msgSend(v8, *a2)) != 0)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v15 = v7;
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v23 = swift_slowAlloc();
    v24 = v23;
    *(_DWORD *)v18 = 136315394;
    swift_getObjectType();
    v19 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    v21 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v16, v17, a3, (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v23, -1, -1);
    MEMORY[0x1B5E44758](v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *a4 = v11;
  a4[1] = v13;
}

uint64_t specialized SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t *boxed_opaque_existential_1;
  void *v19;
  void *v20;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a9;
  v24 = a10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a9 - 8) + 32))(boxed_opaque_existential_1, a5, a9);
  type metadata accessor for TaggingService();
  swift_allocObject();
  *(_QWORD *)(a8 + 104) = TaggingService.init()();
  *(_QWORD *)(a8 + 144) = 0;
  *(_OWORD *)(a8 + 128) = 0u;
  *(_OWORD *)(a8 + 112) = 0u;
  *(_QWORD *)(a8 + 16) = a1;
  *(_QWORD *)(a8 + 24) = a2;
  *(_QWORD *)(a8 + 32) = a3;
  *(_BYTE *)(a8 + 40) = a4;
  outlined init with take of ReferenceResolutionClientProtocol(&v22, a8 + 48);
  swift_beginAccess();
  *(_QWORD *)(a8 + 128) = 0;
  swift_release();
  swift_beginAccess();
  v19 = *(void **)(a8 + 136);
  *(_QWORD *)(a8 + 136) = 0;

  swift_beginAccess();
  v20 = *(void **)(a8 + 144);
  *(_QWORD *)(a8 + 144) = 0;

  *(_WORD *)(a8 + 156) = 514;
  *(_DWORD *)(a8 + 152) = 33686018;
  *(_QWORD *)(a8 + 160) = 0;
  *(_BYTE *)(a8 + 168) = 1;
  *(_QWORD *)(a8 + 176) = 0;
  *(_WORD *)(a8 + 184) = 513;
  *(_QWORD *)(a8 + 192) = 0;
  *(_QWORD *)(a8 + 200) = 0;
  *(_DWORD *)(a8 + 208) = 33686018;
  *(_WORD *)(a8 + 212) = 514;
  *(_QWORD *)(a8 + 216) = 0;
  *(_BYTE *)(a8 + 224) = 1;
  *(_QWORD *)(a8 + 232) = 0;
  *(_WORD *)(a8 + 240) = 513;
  *(_QWORD *)(a8 + 248) = 0;
  *(_QWORD *)(a8 + 256) = 0;
  *(_QWORD *)(a8 + 88) = a6;
  *(_BYTE *)(a8 + 264) = 0;
  *(_BYTE *)(a8 + 96) = a7;
  return a8;
}

uint64_t specialized static SelfReflectionAgentDecision.== infix(_:_:)(_BYTE *a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t result;

  v2 = *a2;
  switch(*a1)
  {
    case 2:
      if (v2 != 2)
        goto LABEL_13;
      goto LABEL_11;
    case 3:
      if (v2 != 3)
        goto LABEL_13;
      goto LABEL_11;
    case 4:
      if (v2 != 4)
        goto LABEL_13;
      goto LABEL_11;
    case 5:
      if (v2 != 5)
        goto LABEL_13;
      goto LABEL_11;
    case 6:
      if (v2 != 6)
        goto LABEL_13;
LABEL_11:
      result = 1;
      break;
    default:
      if ((v2 - 2) >= 5)
        result = (((*a1 & 1) == 0) ^ v2) & 1;
      else
LABEL_13:
        result = 0;
      break;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.CodingKeys, &unk_1E6850A88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.CodingKeys, &unk_1E6850A88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.CodingKeys, &unk_1E6850A88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.CodingKeys, &unk_1E6850A88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys, &unk_1E6850BB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys, &unk_1E6850BB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys, &unk_1E6850BB8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.Tap2editCodingKeys, &unk_1E6850B98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.Tap2editCodingKeys, &unk_1E6850B98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.Tap2editCodingKeys, &unk_1E6850B98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.DismissUICodingKeys, &unk_1E6850B78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.DismissUICodingKeys, &unk_1E6850B78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.DismissUICodingKeys, &unk_1E6850B78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.AskToRepeatCodingKeys, &unk_1E6850B58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.AskToRepeatCodingKeys, &unk_1E6850B58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.AskToRepeatCodingKeys, &unk_1E6850B58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.AskToRepeatCodingKeys, &unk_1E6850B58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.IgnoreCodingKeys, &unk_1E6850AC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.IgnoreCodingKeys, &unk_1E6850AC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.IgnoreCodingKeys, &unk_1E6850AC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.NoneCodingKeys, &unk_1E6850AA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.NoneCodingKeys, &unk_1E6850AA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SelfReflectionAgentDecision.NoneCodingKeys, &unk_1E6850AA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of Tagger?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tagger?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B4E7D9D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = ((v3 + *(_QWORD *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + v0;
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  __swift_destroy_boxed_opaque_existential_1(v4 + 8);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for UUID() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = v1 + v5;
  v10 = *(_BYTE *)(v1 + v6);
  v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + v1 + 8;
  v12 = (uint64_t *)(v1 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8));
  v13 = *v12;
  v14 = v12[1];
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:)(a1, v7, v8, v9, v10, v11, v13, v14);
}

uint64_t sub_1B4E7DB40@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4E7DB70(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 208);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4E7DBB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E7DBE4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 232);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B4E7DC14@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E7DC44(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 256);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B4E7DC80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 272))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E7DCB0(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 280);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B4E7DCFC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 344))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4E7DD30(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 352))(*a1);
}

uint64_t getEnumTagSinglePayload for SelfReflectionAgentDecision(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
  {
    v6 = *a1;
    if (v6 >= 2)
    {
      v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      result = v7 - 4;
      if (v7 > 4)
        return result;
    }
    return 0;
  }
  v2 = a2 + 6;
  if (a2 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if (v2 >> 8 < 0xFF)
    v3 = 1;
  if (v2 >= 0x100)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1B4E7DDAC + 4 * byte_1B4EEEA05[v4]))();
}

uint64_t storeEnumTagSinglePayload for SelfReflectionAgentDecision(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFA)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B4E7DE58 + 4 * byte_1B4EEEA0F[v5]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B4E7DE8C + 4 * byte_1B4EEEA0A[v5]))();
}

uint64_t sub_1B4E7DE8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E7DE94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4E7DE9CLL);
  return result;
}

uint64_t sub_1B4E7DEA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4E7DEB0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B4E7DEB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E7DEBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for SelfReflectionAgentDecision(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *destructiveInjectEnumTag for SelfReflectionAgentDecision(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for SelfReflectionAgentDecision()
{
  return &type metadata for SelfReflectionAgentDecision;
}

uint64_t destroy for SelfReflectionResponse()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SelfReflectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SelfReflectionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SelfReflectionResponse(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SelfReflectionResponse(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SelfReflectionResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SelfReflectionResponse()
{
  return &type metadata for SelfReflectionResponse;
}

uint64_t type metadata accessor for SelfReflectionAgent()
{
  return objc_opt_self();
}

uint64_t method lookup function for SelfReflectionAgent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SelfReflectionAgent.requestId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of SelfReflectionAgent.requestId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of SelfReflectionAgent.requestId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of SelfReflectionAgent.resultCandidateState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of SelfReflectionAgent.resultCandidateState.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of SelfReflectionAgent.resultCandidateState.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of SelfReflectionAgent.executionInputInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of SelfReflectionAgent.executionInputInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of SelfReflectionAgent.executionInputInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of SelfReflectionAgent.requestContextData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of SelfReflectionAgent.requestContextData.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of SelfReflectionAgent.requestContextData.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of SelfReflectionAgent.previousTurnMitigationResponse.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of SelfReflectionAgent.previousTurnMitigationResponse.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of SelfReflectionAgent.previousTurnMitigationResponse.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of SelfReflectionAgent.currentMitigationResponse.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of SelfReflectionAgent.currentMitigationResponse.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of SelfReflectionAgent.currentMitigationResponse.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of SelfReflectionAgent.isRequestCompleted.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of SelfReflectionAgent.isRequestCompleted.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of SelfReflectionAgent.isRequestCompleted.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of SelfReflectionAgent.__allocating_init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t dispatch thunk of SelfReflectionAgent.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of SelfReflectionAgent.setRequestId(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of SelfReflectionAgent.setResultCandidateState(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of SelfReflectionAgent.setExecutionInputInfo(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of SelfReflectionAgent.setRequestContextData(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of SelfReflectionAgent.requestCompleted()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of SelfReflectionAgent.check(executionOutput:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t storeEnumTagSinglePayload for SelfReflectionAgentDecision.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B4E7E37C + 4 * byte_1B4EEEA19[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B4E7E3B0 + 4 * byte_1B4EEEA14[v4]))();
}

uint64_t sub_1B4E7E3B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E7E3B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4E7E3C0);
  return result;
}

uint64_t sub_1B4E7E3CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4E7E3D4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B4E7E3D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E7E3E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SelfReflectionAgentDecision.CodingKeys()
{
  return &unk_1E6850A88;
}

void *type metadata accessor for SelfReflectionAgentDecision.NoneCodingKeys()
{
  return &unk_1E6850AA8;
}

void *type metadata accessor for SelfReflectionAgentDecision.IgnoreCodingKeys()
{
  return &unk_1E6850AC8;
}

uint64_t storeEnumTagSinglePayload for SelfReflectionAgentDecision.AskToRepeatCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4E7E45C + 4 * byte_1B4EEEA1E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4E7E47C + 4 * byte_1B4EEEA23[v4]))();
}

_BYTE *sub_1B4E7E45C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4E7E47C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4E7E484(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4E7E48C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4E7E494(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4E7E49C(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for SelfReflectionAgentDecision.AskToRepeatCodingKeys()
{
  return &unk_1E6850B58;
}

void *type metadata accessor for SelfReflectionAgentDecision.DismissUICodingKeys()
{
  return &unk_1E6850B78;
}

void *type metadata accessor for SelfReflectionAgentDecision.Tap2editCodingKeys()
{
  return &unk_1E6850B98;
}

void *type metadata accessor for SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys()
{
  return &unk_1E6850BB8;
}

void specialized SelfReflectionAgent.calculateSentenceConfidence(recognition:)(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  BOOL v10;
  uint64_t v11;
  double v12;

  if (!a1)
    return;
  v1 = objc_msgSend(a1, sel_oneBestTokenList);
  if (!v1)
    return;
  v2 = v1;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechToken);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_5;
LABEL_21:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_21;
LABEL_5:
  if (v4 < 1)
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  v5 = 0;
  v6 = 0;
  do
  {
    if ((v3 & 0xC000000000000001) != 0)
      v7 = (id)MEMORY[0x1B5E43B94](v5, v3);
    else
      v7 = *(id *)(v3 + 8 * v5 + 32);
    v8 = v7;
    v9 = objc_msgSend(v7, sel_confidenceScore);

    v10 = __OFADD__(v6, v9);
    v6 += (uint64_t)v9;
    if (v10)
    {
      __break(1u);
      goto LABEL_20;
    }
    ++v5;
  }
  while (v4 != v5);
  swift_bridgeObjectRelease();
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v12 = (double)v6 / (double)v11;
  if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) == 0)
    goto LABEL_24;
  if (v12 <= -9.22337204e18)
    goto LABEL_25;
  if (v12 >= 9.22337204e18)
LABEL_26:
    __break(1u);
}

uint64_t specialized SelfReflectionAgentDecision.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65726F6E6769 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7065526F546B7361 && a2 == 0xEB00000000746165
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x557373696D736964 && a2 == 0xE900000000000049
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7469646532706174 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001B4EF90D0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t *SelfReflectionCurareDonator.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1)
    swift_once();
  return &static SelfReflectionCurareDonator.instance;
}

void SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:)(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[40];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[1];
  v25 = *a1;
  v26 = v14;
  v27 = a1[2];
  v28 = *((_QWORD *)a1 + 6);
  outlined init with copy of SelfReflectionStream?(v5 + 16, (uint64_t)&v22);
  if (v23)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v22, (uint64_t)v24);
    static TaskPriority.background.getter();
    v15 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 0, 1, v15);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v24, (uint64_t)&v22);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = 0;
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = a2;
    *(_QWORD *)(v16 + 40) = a3;
    *(_QWORD *)(v16 + 48) = a4;
    *(_QWORD *)(v16 + 56) = a5;
    v17 = v26;
    *(_OWORD *)(v16 + 64) = v25;
    *(_OWORD *)(v16 + 80) = v17;
    *(_OWORD *)(v16 + 96) = v27;
    *(_QWORD *)(v16 + 112) = v28;
    outlined init with take of ReferenceResolutionClientProtocol(&v22, v16 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of SelfReflectionResponse((uint64_t)&v25);
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:), v16);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v22, &demangling cache variable for type metadata for SelfReflectionStream?);
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.instrumentation);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1B4BE6000, v19, v20, "Failed to find SelfReflectionStream for SelfReflectionAgent.", v21, 2u);
      MEMORY[0x1B5E44758](v21, -1, -1);
    }

  }
}

uint64_t SelfReflectionCurareStream.streamId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SelfReflectionCurareStream.__allocating_init(streamId:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t SelfReflectionCurareStream.init(streamId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SelfReflectionCurareStream.insert(jsonStr:interactionId:)(Swift::String jsonStr, Swift::String interactionId)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  unsigned __int8 v16;
  id v17;
  id v18;
  id v19[2];

  object = interactionId._object;
  countAndFlagsBits = interactionId._countAndFlagsBits;
  v5 = jsonStr._object;
  v6 = jsonStr._countAndFlagsBits;
  v19[1] = *(id *)MEMORY[0x1E0C80C00];
  v7 = objc_allocWithZone(MEMORY[0x1E0D20F68]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = (void *)MEMORY[0x1B5E432E8](v6, v5);
  swift_bridgeObjectRelease();
  v9 = (void *)MEMORY[0x1B5E432E8](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v7, sel_initWithJsonStr_interactionId_dataVersion_, v8, v9, 0);

  v12 = *(_QWORD *)(v2 + 16);
  v11 = *(_QWORD *)(v2 + 24);
  v13 = objc_allocWithZone(MEMORY[0x1E0D20F70]);
  swift_bridgeObjectRetain();
  v14 = (void *)MEMORY[0x1B5E432E8](v12, v11);
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v13, sel_initWithStreamId_, v14);

  if (!v15)
    __break(1u);
  v19[0] = 0;
  v16 = objc_msgSend(v15, sel_insert_error_, v10, v19);

  if ((v16 & 1) != 0)
  {
    v17 = v19[0];
  }
  else
  {
    v18 = v19[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }

}

uint64_t SelfReflectionCurareStream.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SelfReflectionCurareStream.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void protocol witness for SelfReflectionStream.insert(jsonStr:interactionId:) in conformance SelfReflectionCurareStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  SelfReflectionCurareStream.insert(jsonStr:interactionId:)(*(Swift::String *)&a1, *(Swift::String *)&a3);
}

uint64_t outlined init with copy of SelfReflectionStream?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelfReflectionStream?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static SelfReflectionCurareDonator.instance.getter()
{
  if (one-time initialization token for instance != -1)
    swift_once();
  return swift_retain();
}

uint64_t SelfReflectionCurareDonator.__allocating_init(selfReflectionStream:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v2 = swift_allocObject();
  outlined init with copy of SelfReflectionStream?(a1, v2 + 16);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.instrumentation);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "Failed to create stream for SelfReflection - donations will be disabled.", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }

  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for SelfReflectionStream?);
  return v2;
}

uint64_t SelfReflectionCurareDonator.init(selfReflectionStream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v2 = v1;
  outlined init with copy of SelfReflectionStream?(a1, v1 + 16);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.instrumentation);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1B4BE6000, v5, v6, "Failed to create stream for SelfReflection - donations will be disabled.", v7, 2u);
      MEMORY[0x1B5E44758](v7, -1, -1);
    }

  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for SelfReflectionStream?);
  return v2;
}

uint64_t closure #1 in SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[77] = v10;
  v8[76] = a8;
  v8[75] = a7;
  v8[74] = a6;
  v8[73] = a5;
  v8[72] = a4;
  type metadata accessor for String.Encoding();
  v8[78] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  unint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  _BYTE *v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v48;
  uint64_t v49;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;

  v64 = v0 + 424;
  v65 = v0 + 456;
  v66 = v0 + 440;
  v63 = v0 + 472;
  v1 = v0 + 512;
  v69 = v0 + 520;
  v67 = v0 + 552;
  v68 = v0 + 544;
  v62 = v0 + 434;
  v54 = v0 + 437;
  v2 = v0 + 438;
  v3 = (_BYTE *)(v0 + 439);
  v60 = v0 + 433;
  v61 = v0 + 449;
  v58 = v0 + 435;
  v59 = v0 + 450;
  v4 = *(void **)(v0 + 600);
  v5 = *(_QWORD *)(v0 + 592);
  v6 = *(_QWORD *)(v0 + 584);
  v55 = v0 + 452;
  v53 = v0 + 453;
  v51 = (_BYTE *)(v0 + 436);
  v52 = v0 + 454;
  v71 = *(_QWORD *)(v0 + 576);
  v72 = v6;
  v56 = v0 + 455;
  v57 = v0 + 451;
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = 58;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v5;
  v8._object = v4;
  String.append(_:)(v8);
  v9 = v72;
  v70 = v71;
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = v72;
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v71 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 568) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v13, &v71);
    v1 = v0 + 512;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v11, v12, "Creating SelfReflectionResponse donation to Curare for interactionId: %s", v14, 0xCu);
    swift_arrayDestroy();
    v16 = v15;
    v2 = v0 + 438;
    MEMORY[0x1B5E44758](v16, -1, -1);
    v17 = v14;
    v9 = v13;
    v3 = (_BYTE *)(v0 + 439);
    MEMORY[0x1B5E44758](v17, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v18 = *(_BYTE **)(v0 + 608);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, AnyEncodable)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EEF240;
  *(_QWORD *)(inited + 32) = 0x6E6F697369636564;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  outlined init with take of SelfReflectionAgentDecision(v18, v51);
  outlined init with take of SelfReflectionAgentDecision(v51, v3);
  v20 = swift_allocObject();
  outlined init with take of SelfReflectionAgentDecision(v3, (_BYTE *)(v20 + 16));
  *(_QWORD *)(inited + 48) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(_QWORD *)(inited + 56) = v20;
  *(_QWORD *)(inited + 64) = 0x44746E6143736168;
  *(_QWORD *)(inited + 72) = 0xEF676F6C6169446FLL;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)(v18 + 2), v52, &demangling cache variable for type metadata for Bool?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v52, v2, &demangling cache variable for type metadata for Bool?);
  v21 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v2, v21 + 16, &demangling cache variable for type metadata for Bool?);
  *(_QWORD *)(inited + 80) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(_QWORD *)(inited + 88) = v21;
  *(_QWORD *)(inited + 96) = 0xD000000000000017;
  *(_QWORD *)(inited + 104) = 0x80000001B4F01180;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)(v18 + 1), v53, &demangling cache variable for type metadata for Bool?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v53, v54, &demangling cache variable for type metadata for Bool?);
  v22 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v54, v22 + 16, &demangling cache variable for type metadata for Bool?);
  *(_QWORD *)(inited + 112) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(_QWORD *)(inited + 120) = v22;
  *(_QWORD *)(inited + 128) = 0xD000000000000013;
  *(_QWORD *)(inited + 136) = 0x80000001B4F011A0;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)(v18 + 3), v55, &demangling cache variable for type metadata for Bool?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v55, v56, &demangling cache variable for type metadata for Bool?);
  v23 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v56, v23 + 16, &demangling cache variable for type metadata for Bool?);
  *(_QWORD *)(inited + 144) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(_QWORD *)(inited + 152) = v23;
  *(_QWORD *)(inited + 160) = 0xD000000000000012;
  *(_QWORD *)(inited + 168) = 0x80000001B4F011C0;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)(v18 + 4), v57, &demangling cache variable for type metadata for Bool?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v57, v58, &demangling cache variable for type metadata for Bool?);
  v24 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v58, v24 + 16, &demangling cache variable for type metadata for Bool?);
  *(_QWORD *)(inited + 176) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(_QWORD *)(inited + 184) = v24;
  strcpy((char *)(inited + 192), "isVoiceTrigger");
  *(_BYTE *)(inited + 207) = -18;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)(v18 + 5), v59, &demangling cache variable for type metadata for Bool?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v59, v60, &demangling cache variable for type metadata for Bool?);
  v25 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v60, v25 + 16, &demangling cache variable for type metadata for Bool?);
  *(_QWORD *)(inited + 208) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(_QWORD *)(inited + 216) = v25;
  strcpy((char *)(inited + 224), "isSingleWord");
  *(_BYTE *)(inited + 237) = 0;
  *(_WORD *)(inited + 238) = -5120;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)(v18 + 33), v61, &demangling cache variable for type metadata for Bool?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v61, v62, &demangling cache variable for type metadata for Bool?);
  v26 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v62, v26 + 16, &demangling cache variable for type metadata for Bool?);
  *(_QWORD *)(inited + 240) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(_QWORD *)(inited + 248) = v26;
  *(_QWORD *)(inited + 256) = 0xD000000000000012;
  *(_QWORD *)(inited + 264) = 0x80000001B4F011E0;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)(v18 + 8), v63, (uint64_t *)&demangling cache variable for type metadata for Int?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v63, v64, (uint64_t *)&demangling cache variable for type metadata for Int?);
  v27 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v64, v27 + 16, (uint64_t *)&demangling cache variable for type metadata for Int?);
  *(_QWORD *)(inited + 272) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(_QWORD *)(inited + 280) = v27;
  *(_QWORD *)(inited + 288) = 7499379;
  *(_QWORD *)(inited + 296) = 0xE300000000000000;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)(v18 + 24), v65, &demangling cache variable for type metadata for Double?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v65, v66, &demangling cache variable for type metadata for Double?);
  v28 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v66, v28 + 16, &demangling cache variable for type metadata for Double?);
  *(_QWORD *)(inited + 304) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(_QWORD *)(inited + 312) = v28;
  strcpy((char *)(inited + 320), "catIdentifiers");
  *(_BYTE *)(inited + 335) = -18;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)(v18 + 40), v1, &demangling cache variable for type metadata for Set<String>?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v1, v67, &demangling cache variable for type metadata for Set<String>?);
  v29 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v67, v29 + 16, &demangling cache variable for type metadata for Set<String>?);
  *(_QWORD *)(inited + 336) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(_QWORD *)(inited + 344) = v29;
  strcpy((char *)(inited + 352), "catCategories");
  *(_WORD *)(inited + 366) = -4864;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)(v18 + 48), v69, &demangling cache variable for type metadata for Set<String>?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v69, v68, &demangling cache variable for type metadata for Set<String>?);
  v30 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v68, v30 + 16, &demangling cache variable for type metadata for Set<String>?);
  *(_QWORD *)(inited + 368) = implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)specialized partial apply;
  *(_QWORD *)(inited + 376) = v30;
  outlined retain of [String : Set<String>](v1);
  outlined retain of [String : Set<String>](v69);
  v31 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *(_QWORD *)(v0 + 536) = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : AnyEncodable]);
  lazy protocol witness table accessor for type [String : AnyEncodable] and conformance <> [A : B]();
  v36 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v38 = v37;
  swift_release();
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  v39 = String.init(data:encoding:)();
  if (v40)
  {
    v41 = v39;
    v42 = v40;
    v43 = *(_QWORD **)(v0 + 616);
    v44 = v43[3];
    v45 = v43[4];
    __swift_project_boxed_opaque_existential_1(v43, v44);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v45 + 8))(v41, v42, v70, v9, v44, v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v32 = Logger.logObject.getter();
    v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, (os_log_type_t)v46))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      v71 = v49;
      *(_DWORD *)v48 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 560) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v9, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v32, (os_log_type_t)v46, "Donated SelfReflectionResponse to Curare for interactionId:%s", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v49, -1, -1);
      MEMORY[0x1B5E44758](v48, -1, -1);
      outlined consume of Data._Representation(v36, v38);
      goto LABEL_16;
    }
    outlined consume of Data._Representation(v36, v38);
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  outlined consume of Data._Representation(v36, v38);
  swift_bridgeObjectRetain();
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v32, v33))
    goto LABEL_15;
  v34 = (uint8_t *)swift_slowAlloc();
  v35 = swift_slowAlloc();
  v71 = v35;
  *(_DWORD *)v34 = 136315138;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 488) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v9, &v71);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1B4BE6000, v32, v33, "Failed to convert SelfReflectionResponse donation to JSON for interactionId:%s", v34, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v35, -1, -1);
  MEMORY[0x1B5E44758](v34, -1, -1);
LABEL_16:

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SelfReflectionCurareDonator.deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for SelfReflectionStream?);
  return v0;
}

uint64_t SelfReflectionCurareDonator.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for SelfReflectionStream?);
  return swift_deallocClassInstance();
}

uint64_t sub_1B4E803A8()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:)(a1, v4, v5, v6, v7, v8, v9, (uint64_t)(v1 + 8));
}

uint64_t outlined retain of SelfReflectionResponse(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>?);
  lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>();
  return Optional<A>.encode(to:)();
}

uint64_t specialized SelfReflectionCurareDonator.__allocating_init()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  __int128 v12;
  __int128 v13;
  _UNKNOWN **v14;

  v0 = (void *)objc_opt_self();
  if (objc_msgSend(v0, sel_isSupportedUser) && objc_msgSend(v0, sel_isSupportedPlatform))
  {
    v1 = type metadata accessor for SelfReflectionCurareStream();
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = 0xD000000000000016;
    *(_QWORD *)(v2 + 24) = 0x80000001B4F01160;
    *((_QWORD *)&v13 + 1) = v1;
    v14 = &protocol witness table for SelfReflectionCurareStream;
    *(_QWORD *)&v12 = v2;
    type metadata accessor for SelfReflectionCurareDonator();
    v3 = swift_allocObject();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v12, v3 + 16, &demangling cache variable for type metadata for SelfReflectionStream?);
  }
  else
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.instrumentation);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1B4BE6000, v5, v6, "Unsupported User/Platform for feature store - donations will be disabled.", v7, 2u);
      MEMORY[0x1B5E44758](v7, -1, -1);
    }

    type metadata accessor for SelfReflectionCurareDonator();
    v12 = 0u;
    v13 = 0u;
    v14 = 0;
    v3 = swift_allocObject();
    outlined init with copy of SelfReflectionStream?((uint64_t)&v12, v3 + 16);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1B4BE6000, v8, v9, "Failed to create stream for SelfReflection - donations will be disabled.", v10, 2u);
      MEMORY[0x1B5E44758](v10, -1, -1);
    }

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v12, &demangling cache variable for type metadata for SelfReflectionStream?);
  }
  return v3;
}

uint64_t dispatch thunk of SelfReflectionStream.insert(jsonStr:interactionId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t type metadata accessor for SelfReflectionCurareStream()
{
  return objc_opt_self();
}

uint64_t method lookup function for SelfReflectionCurareStream()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SelfReflectionCurareStream.__allocating_init(streamId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for SelfReflectionCurareDonator()
{
  return objc_opt_self();
}

uint64_t method lookup function for SelfReflectionCurareDonator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SelfReflectionCurareDonator.__allocating_init(selfReflectionStream:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

_BYTE *outlined init with take of SelfReflectionAgentDecision(_BYTE *a1, _BYTE *a2)
{
  __swift_memcpy1_1(a2, a1);
  return a2;
}

uint64_t sub_1B4E80808()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(_QWORD *a1)
{
  return SelfReflectionAgentDecision.encode(to:)(a1);
}

uint64_t sub_1B4E80840()
{
  return swift_deallocObject();
}

uint64_t sub_1B4E80864()
{
  return swift_deallocObject();
}

uint64_t sub_1B4E80874()
{
  return swift_deallocObject();
}

uint64_t sub_1B4E80884()
{
  return swift_deallocObject();
}

uint64_t sub_1B4E80894()
{
  return swift_deallocObject();
}

uint64_t sub_1B4E808A4()
{
  return swift_deallocObject();
}

uint64_t sub_1B4E8090C()
{
  return swift_deallocObject();
}

uint64_t sub_1B4E80940()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  return Optional<A>.encode(to:)();
}

uint64_t sub_1B4E809D8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>;
  if (!lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String>);
    v2 = MEMORY[0x1E0DEA970];
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEB3B8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>);
  }
  return result;
}

uint64_t implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)specialized partial apply()
{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

uint64_t static SelfReflectionUserDefaults.fallbackToMighty.getter()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  char v3;

  swift_beginAccess();
  v0 = static SelfReflectionUserDefaults._fallbackToMighty;
  v1 = unk_1EF0E6DB8;
  v2 = byte_1EF0E6DC0;
  swift_bridgeObjectRetain();
  v3 = specialized SelfReflectionUserDefaultsProperty.wrappedValue.getter(v0, v1, v2);
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void *SelfReflectionUserDefaults.selfReflectionUserDefaultsSuiteName.unsafeMutableAddressor()
{
  return &static SelfReflectionUserDefaults.selfReflectionUserDefaultsSuiteName;
}

unint64_t static SelfReflectionUserDefaults.selfReflectionUserDefaultsSuiteName.getter()
{
  return 0xD00000000000001DLL;
}

void one-time initialization function for selfReflectionUserDefaults()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v1 = (void *)MEMORY[0x1B5E432E8](0xD00000000000001DLL, 0x80000001B4F01200);
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  static SelfReflectionUserDefaults.selfReflectionUserDefaults = (uint64_t)v2;
}

uint64_t *SelfReflectionUserDefaults.selfReflectionUserDefaults.unsafeMutableAddressor()
{
  if (one-time initialization token for selfReflectionUserDefaults != -1)
    swift_once();
  return &static SelfReflectionUserDefaults.selfReflectionUserDefaults;
}

uint64_t static SelfReflectionUserDefaults.selfReflectionUserDefaults.getter()
{
  uint64_t v0;
  id v1;

  if (one-time initialization token for selfReflectionUserDefaults != -1)
    swift_once();
  v0 = static SelfReflectionUserDefaults.selfReflectionUserDefaults;
  v1 = (id)static SelfReflectionUserDefaults.selfReflectionUserDefaults;
  return v0;
}

uint64_t specialized SelfReflectionUserDefaultsProperty.wrappedValue.getter(uint64_t a1, unint64_t a2, char a3)
{
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v22;
  _OWORD v23[2];
  uint64_t v24[4];

  if (one-time initialization token for selfReflectionUserDefaults != -1)
    swift_once();
  if (static SelfReflectionUserDefaults.selfReflectionUserDefaults)
  {
    v6 = (id)static SelfReflectionUserDefaults.selfReflectionUserDefaults;
    v7 = (void *)MEMORY[0x1B5E432E8](a1, a2);
    v8 = objc_msgSend(v6, sel_objectForKey_, v7);

    if (v8)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v23, 0, sizeof(v23));
    }
    outlined init with take of Any?((uint64_t)v23, (uint64_t)v24);
    outlined init with copy of Any?((uint64_t)v24, (uint64_t)v23);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
    if (swift_dynamicCast())
    {

      outlined destroy of Any?((uint64_t)v24);
      a3 = v22 & 1;
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
      swift_bridgeObjectRetain_n();
      v15 = Logger.logObject.getter();
      v16 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = swift_slowAlloc();
        v18 = swift_slowAlloc();
        *(_QWORD *)&v23[0] = v18;
        *(_DWORD *)v17 = 136315394;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v17 + 12) = 2080;
        v19 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, (uint64_t *)v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v15, v16, "%s value not set, returning default: %s", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v18, -1, -1);
        MEMORY[0x1B5E44758](v17, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      outlined destroy of Any?((uint64_t)v24);
    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v24[0] = v13;
      *(_DWORD *)v12 = 136315138;
      *(_QWORD *)&v23[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001B4F01200, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v10, v11, "%s user defaults domain does not exist.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v13, -1, -1);
      MEMORY[0x1B5E44758](v12, -1, -1);

    }
    else
    {

    }
  }
  return a3 & 1;
}

uint64_t SelfReflectionUserDefaultsProperty.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _QWORD *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void (*v43)(uint64_t *, _QWORD *, uint64_t);
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t *, uint64_t);
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  os_log_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  os_log_t v58;
  int v59;
  uint64_t v60;
  char *v61;
  id v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD v68[2];
  uint64_t v69[4];

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 16);
  v66 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (uint64_t *)((char *)&v58 - v13);
  v15 = type metadata accessor for Optional();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v58 - v17;
  if (one-time initialization token for selfReflectionUserDefaults != -1)
    swift_once();
  if (static SelfReflectionUserDefaults.selfReflectionUserDefaults)
  {
    v61 = v9;
    v65 = a2;
    v19 = v3;
    v20 = *v3;
    v63 = v19;
    v21 = v19[1];
    v22 = (id)static SelfReflectionUserDefaults.selfReflectionUserDefaults;
    v23 = (void *)MEMORY[0x1B5E432E8](v20, v21);
    v62 = v22;
    v24 = objc_msgSend(v22, sel_objectForKey_, v23);

    if (v24)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v68, 0, sizeof(v68));
    }
    v35 = v65;
    outlined init with take of Any?((uint64_t)v68, (uint64_t)v69);
    outlined init with copy of Any?((uint64_t)v69, (uint64_t)v68);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
    v36 = swift_dynamicCast();
    v37 = v66;
    v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56);
    if (v36)
    {
      v38(v18, 0, 1, v6);

      outlined destroy of Any?((uint64_t)v69);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v37 + 32))(v35, v18, v6);
    }
    else
    {
      v39 = v12;
      v38(v18, 1, 1, v6);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.conversationBridge);
      v42 = v63;
      v41 = v64;
      v43 = *(void (**)(uint64_t *, _QWORD *, uint64_t))(v64 + 16);
      v43(v14, v63, a1);
      v43((uint64_t *)v39, v42, a1);
      v44 = Logger.logObject.getter();
      v45 = static os_log_type_t.debug.getter();
      v46 = v45;
      if (os_log_type_enabled(v44, v45))
      {
        v47 = swift_slowAlloc();
        v60 = swift_slowAlloc();
        *(_QWORD *)&v68[0] = v60;
        *(_DWORD *)v47 = 136315394;
        v59 = v46;
        v58 = v44;
        v49 = *v14;
        v48 = v14[1];
        swift_bridgeObjectRetain();
        v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v48, (uint64_t *)v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v50 = *(void (**)(uint64_t *, uint64_t))(v41 + 8);
        v50(v14, a1);
        *(_WORD *)(v47 + 12) = 2080;
        v51 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
        v51(v61, &v39[*(int *)(a1 + 28)], v6);
        v52 = String.init<A>(describing:)();
        v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, (uint64_t *)v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v54 = v65;
        swift_bridgeObjectRelease();
        v50((uint64_t *)v39, a1);
        v55 = v58;
        _os_log_impl(&dword_1B4BE6000, v58, (os_log_type_t)v59, "%s value not set, returning default: %s", (uint8_t *)v47, 0x16u);
        v56 = v60;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v56, -1, -1);
        MEMORY[0x1B5E44758](v47, -1, -1);

        outlined destroy of Any?((uint64_t)v69);
        return ((uint64_t (*)(uint64_t, char *, uint64_t))v51)(v54, (char *)v63 + *(int *)(a1 + 28), v6);
      }
      else
      {

        v57 = *(void (**)(char *, uint64_t))(v41 + 8);
        v57(v39, a1);
        v57((char *)v14, a1);
        outlined destroy of Any?((uint64_t)v69);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v66 + 16))(v35, (char *)v63 + *(int *)(a1 + 28), v6);
      }
    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = v3;
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = a2;
      v31 = swift_slowAlloc();
      v69[0] = v31;
      *(_DWORD *)v29 = 136315138;
      *(_QWORD *)&v68[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001B4F01200, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v26, v27, "%s user defaults domain does not exist.", v29, 0xCu);
      swift_arrayDestroy();
      v32 = v31;
      a2 = v30;
      MEMORY[0x1B5E44758](v32, -1, -1);
      v33 = v29;
      v3 = v28;
      MEMORY[0x1B5E44758](v33, -1, -1);
    }

    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v66 + 16))(a2, (char *)v3 + *(int *)(a1 + 28), v6);
  }
}

uint64_t static SelfReflectionUserDefaults.fallbackToMighty.setter(char a1)
{
  swift_beginAccess();
  specialized SelfReflectionUserDefaultsProperty.wrappedValue.setter(a1);
  return swift_endAccess();
}

void specialized SelfReflectionUserDefaultsProperty.wrappedValue.setter(char a1)
{
  _QWORD *v1;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *oslog;
  uint64_t v11;

  if (one-time initialization token for selfReflectionUserDefaults != -1)
    swift_once();
  if (static SelfReflectionUserDefaults.selfReflectionUserDefaults)
  {
    LOBYTE(v11) = a1 & 1;
    v3 = (id)static SelfReflectionUserDefaults.selfReflectionUserDefaults;
    v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v5 = (void *)MEMORY[0x1B5E432E8](*v1, v1[1]);
    objc_msgSend(v3, sel_setObject_forKey_, v4, v5);

    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
    oslog = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v11 = v9;
      *(_DWORD *)v8 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001B4F01200, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, oslog, v7, "%s user defaults domain does not exist.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v9, -1, -1);
      MEMORY[0x1B5E44758](v8, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t SelfReflectionUserDefaultsProperty.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;

  if (one-time initialization token for selfReflectionUserDefaults != -1)
    swift_once();
  if (static SelfReflectionUserDefaults.selfReflectionUserDefaults)
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = (id)static SelfReflectionUserDefaults.selfReflectionUserDefaults;
    v7 = _bridgeAnythingToObjectiveC<A>(_:)();
    v8 = (void *)MEMORY[0x1B5E432E8](*v2, v2[1]);
    objc_msgSend(v6, sel_setObject_forKey_, v7, v8);

    swift_unknownObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v15 = v14;
      *(_DWORD *)v13 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001B4F01200, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v11, v12, "%s user defaults domain does not exist.", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v14, -1, -1);
      MEMORY[0x1B5E44758](v13, -1, -1);

      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
    }
    else
    {

      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1, *(_QWORD *)(a2 + 16));
    }
  }
}

uint64_t (*static SelfReflectionUserDefaults.fallbackToMighty.modify(uint64_t a1))(uint64_t a1)
{
  swift_beginAccess();
  *(_BYTE *)(a1 + 24) = specialized SelfReflectionUserDefaultsProperty.wrappedValue.getter(static SelfReflectionUserDefaults._fallbackToMighty, unk_1EF0E6DB8, byte_1EF0E6DC0) & 1;
  return static SelfReflectionUserDefaults.fallbackToMighty.modify;
}

uint64_t static SelfReflectionUserDefaults.fallbackToMighty.modify(uint64_t a1)
{
  specialized SelfReflectionUserDefaultsProperty.wrappedValue.setter(*(_BYTE *)(a1 + 24));
  return swift_endAccess();
}

uint64_t SelfReflectionUserDefaultsProperty.init(key:default:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v7;

  *a5 = a1;
  a5[1] = a2;
  v7 = (char *)a5 + *(int *)(type metadata accessor for SelfReflectionUserDefaultsProperty(0, a4, a3, a4) + 28);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v7, a3, a4);
}

uint64_t SelfReflectionUserDefaults.deinit()
{
  uint64_t v0;

  swift_defaultActor_destroy();
  return v0;
}

uint64_t SelfReflectionUserDefaults.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t SelfReflectionUserDefaults.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  return v0;
}

uint64_t SelfReflectionUserDefaults.init()()
{
  uint64_t v0;

  swift_defaultActor_initialize();
  return v0;
}

uint64_t SelfReflectionUserDefaults.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t key path setter for SelfReflectionUserDefaultsProperty.wrappedValue : <A>SelfReflectionUserDefaultsProperty<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v12 - v5;
  (*(void (**)(char *))(v7 + 16))((char *)&v12 - v5);
  v10 = type metadata accessor for SelfReflectionUserDefaultsProperty(0, v4, v8, v9);
  return SelfReflectionUserDefaultsProperty.wrappedValue.setter((uint64_t)v6, v10);
}

void (*SelfReflectionUserDefaultsProperty.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  SelfReflectionUserDefaultsProperty.wrappedValue.getter(a2, (uint64_t)v9);
  return SelfReflectionUserDefaultsProperty.wrappedValue.modify;
}

void SelfReflectionUserDefaultsProperty.wrappedValue.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v5 = v2[2];
    v6 = v2[3];
    v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    SelfReflectionUserDefaultsProperty.wrappedValue.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    SelfReflectionUserDefaultsProperty.wrappedValue.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t type metadata accessor for SelfReflectionUserDefaultsProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SelfReflectionUserDefaultsProperty);
}

uint64_t sub_1B4E81E60@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for SelfReflectionUserDefaultsProperty(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  return SelfReflectionUserDefaultsProperty.wrappedValue.getter(v5, a4);
}

uint64_t sub_1B4E81E9C()
{
  return 8;
}

_QWORD *sub_1B4E81EA8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for SelfReflectionUserDefaults()
{
  return objc_opt_self();
}

uint64_t method lookup function for SelfReflectionUserDefaults()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SelfReflectionUserDefaults.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata completion function for SelfReflectionUserDefaultsProperty()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SelfReflectionUserDefaultsProperty(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B4E82034 + 4 * byte_1B4EEF300[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for SelfReflectionUserDefaultsProperty(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0u;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

id ServerBoundContextUpdateContainer.__allocating_init(contextUpdate:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id ServerBoundContextUpdateContainer.__allocating_init(serializedBackingStore:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ServerBoundContextUpdateContainer.init(serializedBackingStore:)(a1);
}

void *ServerBoundContextUpdateContainer.supportsSecureCoding.unsafeMutableAddressor()
{
  return &static ServerBoundContextUpdateContainer.supportsSecureCoding;
}

uint64_t static ServerBoundContextUpdateContainer.supportsSecureCoding.getter()
{
  return 1;
}

void *ServerBoundContextUpdateContainer.contextUpdate.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate);
  v2 = v1;
  return v1;
}

id ServerBoundContextUpdateContainer.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ServerBoundContextUpdateContainer.init(coder:)(a1);
}

id ServerBoundContextUpdateContainer.init(coder:)(void *a1)
{
  void *v1;
  char *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v13;
  objc_super v14;
  _OWORD v15[2];
  _BYTE v16[24];
  uint64_t v17;

  v3 = v1;
  v4 = (void *)MEMORY[0x1B5E432E8](0xD00000000000001ALL, 0x80000001B4EF4590);
  v5 = objc_msgSend(a1, sel_decodeObjectForKey_, v4);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  outlined init with take of Any?((uint64_t)v15, (uint64_t)v16);
  if (!v17)
  {
    outlined destroy of Any?((uint64_t)v16);
    v6 = 0;
    goto LABEL_8;
  }
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
  if (swift_dynamicCast())
  {
    v6 = v13;
LABEL_8:
    *(_QWORD *)&v3[OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate] = v6;

    v14.receiver = v3;
    v14.super_class = (Class)type metadata accessor for ServerBoundContextUpdateContainer();
    v7 = objc_msgSendSuper2(&v14, sel_init);

    return v7;
  }

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1B4BE6000, v9, v10, "Failed to decode the serverContextUpdateCommand", v11, 2u);
    MEMORY[0x1B5E44758](v11, -1, -1);
  }

  type metadata accessor for ServerBoundContextUpdateContainer();
  swift_deallocPartialClassInstance();
  return 0;
}

Swift::Void __swiftcall ServerBoundContextUpdateContainer.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate);
  v4 = (id)MEMORY[0x1B5E432E8](0xD00000000000001ALL, 0x80000001B4EF4590);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

}

id ServerBoundContextUpdateContainer.init(contextUpdate:)(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for ServerBoundContextUpdateContainer();
  return objc_msgSendSuper2(&v3, sel_init);
}

id ServerBoundContextUpdateContainer.init(serializedBackingStore:)(uint64_t a1)
{
  void *v1;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  id v11;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  objc_super v19;
  id v20;
  unint64_t v21;
  _BYTE v22[24];
  uint64_t v23;

  outlined init with copy of Any(a1, (uint64_t)v22);
  v3 = v1;
  if ((swift_dynamicCast() & 1) == 0)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1B4BE6000, v7, v8, "The backing store for ServerBoundContextUpdateContainer is not of type Data", v9, 2u);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

    goto LABEL_8;
  }
  v5 = (uint64_t)v20;
  v4 = v21;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSKeyedUnarchiver);
  static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)();
  if (!v23)
  {
    outlined consume of Data._Representation((uint64_t)v20, v21);
    outlined destroy of Any?((uint64_t)v22);
LABEL_8:
    v10 = 0;
    goto LABEL_9;
  }
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
  if ((swift_dynamicCast() & 1) == 0)
  {
    outlined consume of Data._Representation((uint64_t)v20, v21);
    goto LABEL_8;
  }
  v10 = v20;
  v13 = one-time initialization token for conversationBridge;
  v14 = v20;
  if (v13 != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1B4BE6000, v16, v17, "Decoded the ServerBoundContextUpdateContainer", v18, 2u);
    MEMORY[0x1B5E44758](v18, -1, -1);
    outlined consume of Data._Representation(v5, v4);

  }
  else
  {
    outlined consume of Data._Representation((uint64_t)v20, v21);

  }
LABEL_9:
  *(_QWORD *)&v3[OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate] = v10;

  v19.receiver = v3;
  v19.super_class = (Class)type metadata accessor for ServerBoundContextUpdateContainer();
  v11 = objc_msgSendSuper2(&v19, sel_init);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v11;
}

uint64_t type metadata accessor for ServerBoundContextUpdateContainer()
{
  return objc_opt_self();
}

void ServerBoundContextUpdateContainer.serializedBackingStore()(uint64_t *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21[2];

  v21[1] = *(id *)MEMORY[0x1E0C80C00];
  v3 = *(void **)(v1 + OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate);
  if (v3)
  {
    v4 = (void *)objc_opt_self();
    v21[0] = 0;
    v5 = v3;
    v6 = objc_msgSend(v4, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v5, 1, v21);
    v7 = v21[0];
    if (v6)
    {
      v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v10 = v9;

    }
    else
    {
      v15 = v7;
      v16 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v20 = 0;
        _os_log_impl(&dword_1B4BE6000, v18, v19, "Failed to encode the server context update", v20, 2u);
        MEMORY[0x1B5E44758](v20, -1, -1);
      }

      v8 = 0;
      v10 = 0xC000000000000000;
    }
    a1[3] = MEMORY[0x1E0CB0338];

  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1B4BE6000, v12, v13, "SARDNativeFlowContextUpdate command is nil at the time of encoding", v14, 2u);
      MEMORY[0x1B5E44758](v14, -1, -1);
    }

    v8 = 0;
    a1[3] = MEMORY[0x1E0CB0338];
    v10 = 0xC000000000000000;
  }
  *a1 = v8;
  a1[1] = v10;
}

id ServerBoundContextUpdateContainer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ServerBoundContextUpdateContainer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ServerBoundContextUpdateContainer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServerBoundContextUpdateContainer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for ServerBoundContextUpdateContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ServerBoundContextUpdateContainer.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of ServerBoundContextUpdateContainer.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ServerBoundContextUpdateContainer.__allocating_init(contextUpdate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ServerBoundContextUpdateContainer.__allocating_init(serializedBackingStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ServerBoundContextUpdateContainer.serializedBackingStore()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  char *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  char *v23;
  char *v24;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v24 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v23 = (char *)v21 - v10;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return MEMORY[0x1E0DEE9D8];
  v21[1] = v1;
  v12 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
  v13 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  v21[0] = a1;
  swift_bridgeObjectRetain();
  v15 = MEMORY[0x1E0DEE9D8];
  v22 = v14;
  do
  {
    swift_getKeyPath();
    swift_getAtKeyPath();
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    }
    else
    {
      v16 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v17 = v23;
      v16(v23, v5, v6);
      v16(v24, v17, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
      v19 = *(_QWORD *)(v15 + 16);
      v18 = *(_QWORD *)(v15 + 24);
      if (v19 >= v18 >> 1)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1, v15);
      *(_QWORD *)(v15 + 16) = v19 + 1;
      v16((char *)(v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v19), v24, v6);
      v14 = v22;
    }
    v13 += v14;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  return v15;
}

_QWORD *ServerFallbackCapableRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,unsigned __int8 a25,unsigned __int8 a26)
{
  _QWORD *v26;

  swift_allocObject();
  v26 = specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  return v26;
}

void *ServerFallbackCapableRequestProcessor.nlv3ExternalParserId.unsafeMutableAddressor()
{
  return &static ServerFallbackCapableRequestProcessor.nlv3ExternalParserId;
}

unint64_t static ServerFallbackCapableRequestProcessor.nlv3ExternalParserId.getter()
{
  return 0xD000000000000013;
}

uint64_t one-time initialization function for rraasWaitTimeMillis()
{
  uint64_t v0;

  v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static ServerFallbackCapableRequestProcessor.rraasWaitTimeMillis);
  *(_QWORD *)__swift_project_value_buffer(v0, (uint64_t)static ServerFallbackCapableRequestProcessor.rraasWaitTimeMillis) = 1000;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

uint64_t (*ServerFallbackCapableRequestProcessor.requestHandledOnServer.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ServerFallbackCapableRequestProcessor.runSiriKitExecutorProcessor.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ServerFallbackCapableRequestProcessor.isUserOnActivePhoneCall.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ServerFallbackCapableRequestProcessor.gatedExecuteNLOnServer.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ServerFallbackCapableRequestProcessor.gatedExecuteNLOnServer.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_gatedExecuteNLOnServer);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ServerFallbackCapableRequestProcessor.gatedExecuteNLOnServer.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.handleAceFlowOutputCandidate(_:executionContextInfo:reply:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *MEMORY[0x1E0D9E668];
  v12 = type metadata accessor for MessageSource();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  MUXFlowOutputCandidateMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  MUXFlowOutputCandidateMessage.Builder.assistantId.setter();
  v14 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v7, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v7, 0, 1, v15);
  MUXFlowOutputCandidateMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  MUXFlowOutputCandidateMessage.Builder.requestId.setter();
  v17 = objc_msgSend(a3, sel_resultCandidateId);
  if (v17)
  {
    v18 = v17;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  return MUXFlowOutputCandidateMessage.Builder.resultCandidateId.setter();
}

void ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  int v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  char v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  void **v64;
  void *v65;
  uint64_t v66;
  char *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t);
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  char v85;
  uint64_t v86;
  void (*v87)(uint64_t, void *, uint64_t);
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE v123[40];
  _QWORD v124[2];
  uint64_t v125[2];

  v7 = v6;
  v114 = a6;
  v113 = a5;
  v111 = a4;
  v112 = a3;
  v110 = a2;
  v119 = *v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9);
  v118 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v11);
  v109 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for UserID();
  v13 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108);
  v105 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v15);
  v116 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for RequestType();
  v122 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x1E0C80A78](v17);
  v117 = (uint64_t)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v121 = (uint64_t)&v96 - v21;
  MEMORY[0x1E0C80A78](v20);
  v120 = (uint64_t)&v96 - v22;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  v25 = a1;
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  v28 = os_log_type_enabled(v26, v27);
  v107 = v13;
  v106 = v25;
  if (v28)
  {
    v29 = swift_slowAlloc();
    v104 = swift_slowAlloc();
    v125[0] = v104;
    *(_DWORD *)v29 = 136315394;
    v30 = v7;
    v31 = v17;
    v32 = objc_msgSend(v25, sel_debugDescription);
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v115 = v24;
    v35 = v34;

    v17 = v31;
    v7 = v30;
    v124[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    v36 = _typeName(_:qualified:)();
    v124[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v26, v27, "Handling %s in %s", (uint8_t *)v29, 0x16u);
    v38 = v104;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v38, -1, -1);
    MEMORY[0x1B5E44758](v29, -1, -1);

  }
  else
  {

  }
  v39 = (*(uint64_t (**)(void))(*v7 + 528))();
  if (v39)
  {
    v40 = v39;
    v41 = (_QWORD *)(v39 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    v42 = 0;
    if (*v41 >> 62 == 1)
    {
      v42 = *v41 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
    }
    v43 = v40 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    v44 = v122;
    v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 16);
    v45(v120, v43, v17);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v44 + 104))(v121, *MEMORY[0x1E0D9E890], v17);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D8]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v125[0] == v124[0] && v125[1] == v124[1])
    {
      swift_bridgeObjectRelease_n();
      v46 = 0;
    }
    else
    {
      v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v50 & 1) != 0)
        v46 = 0;
      else
        v46 = 2;
    }
    v51 = *(void (**)(uint64_t, uint64_t))(v122 + 8);
    v51(v121, v17);
    v52 = ((uint64_t (*)(uint64_t, uint64_t))v51)(v120, v17);
    v53 = (*(uint64_t (**)(uint64_t))(*v7 + 1360))(v52);
    v115 = v42;
    if (v53)
    {
      v54 = v53;
    }
    else
    {
      v55 = v17;
      v101 = v45;
      v56 = *(_QWORD *)((char *)v7
                      + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v7 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient, (uint64_t)v125);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v7 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, (uint64_t)v124, &demangling cache variable for type metadata for ContextUpdating?);
      v57 = v7[13];
      v122 = v7[12];
      v58 = *(_QWORD *)(v40 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
      v103 = *(_QWORD *)(v40 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
      v59 = one-time initialization token for sharedInstance;
      v121 = v56;
      swift_retain();
      v120 = v57;
      swift_bridgeObjectRetain();
      v102 = v58;
      swift_bridgeObjectRetain();
      if (v59 != -1)
        swift_once();
      v60 = static ConversationBridgeInstrumentationUtil.sharedInstance;
      v98 = *(_QWORD *)((char *)v7
                      + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
      v61 = v108;
      v62 = v101;
      LODWORD(v104) = v46;
      if (v42)
      {
        v63 = *(_QWORD *)(v42 + 24);
        v100 = *(_QWORD *)(v42 + 16);
        v99 = v63;
        swift_bridgeObjectRetain();
      }
      else
      {
        v100 = 0;
        v99 = 0;
      }
      v64 = (void **)(v40 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
      swift_beginAccess();
      v65 = *v64;
      v62(v117, v43, v55);
      v66 = v107;
      if (v42)
      {
        v67 = v105;
        (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v105, v42 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId, v61);
        (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v116, v67, v61);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v107 + 16))(v116, (uint64_t)v7 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId, v61);
      }
      v97 = v65;
      v68 = v65;
      swift_retain();
      v69 = v98;
      swift_unknownObjectRetain();
      v70 = (uint64_t)v116;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v116, 0, 1, v61);
      v71 = (char *)v7 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
      v72 = type metadata accessor for UUID();
      v73 = *(_QWORD *)(v72 - 8);
      v74 = (uint64_t)v109;
      (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v109, v71, v72);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v74, 0, 1, v72);
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v7 + 3), (uint64_t)v123);
      LODWORD(v107) = *((unsigned __int8 *)v7
                      + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled);
      type metadata accessor for RunSiriKitExecutorProcessor();
      v108 = swift_allocObject();
      v75 = v60;
      v76 = v111;
      swift_bridgeObjectRetain();
      v77 = v106;
      v78 = v113;
      v79 = v114;
      outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(v113);
      v110 = v110;
      v54 = specialized RunSiriKitExecutorProcessor.init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:)(v77, v110, v78, v79, v121, (uint64_t)v125, (uint64_t)v124, v122, v120, v104, v103, v102, v75, v69, v100, v99, v97, v117, v70,
              v74,
              v112,
              v76,
              (uint64_t)v123,
              v107);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
      _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v78);

      v80 = *(void (**)(uint64_t))(*v7 + 1368);
      v81 = swift_retain();
      v80(v81);
    }
    v82 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v54 + 544))();
    v83 = (*(uint64_t (**)(void))(*v7 + 368))();
    v86 = (uint64_t)v118;
    if (v85 == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      v87 = *(void (**)(uint64_t, void *, uint64_t))(*v7 + 376);
      swift_retain();
      v88 = v82;
      v87(v40, v82, 2);
    }
    else
    {
      outlined consume of ConversationRequestProcessor.State(v83, v84, v85);
    }
    v89 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
    v90 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v86, 1, 1, v90);
    v91 = one-time initialization token for shared;
    swift_retain();
    v92 = v82;
    swift_retain();
    swift_retain();
    if (v91 != -1)
      swift_once();
    swift_beginAccess();
    v93 = static MessageBusActor.shared;
    v94 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
    v95 = (_QWORD *)swift_allocObject();
    v95[2] = v93;
    v95[3] = v94;
    v95[4] = v40;
    v95[5] = v7;
    v95[6] = v54;
    v95[7] = v92;
    v95[8] = v119;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v86, (uint64_t)&async function pointer to partial apply for closure #1 in ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:), (uint64_t)v95);
    (*(void (**)(void))(*(_QWORD *)v89 + 120))();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
  }
  else
  {
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v49 = 0;
      _os_log_impl(&dword_1B4BE6000, v47, v48, "Received RunSiriKitExecutor while not in a turn. Ignoring.", v49, 2u);
      MEMORY[0x1B5E44758](v49, -1, -1);
    }

  }
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[26] = a6;
  v7[27] = a7;
  v7[24] = a4;
  v7[25] = a5;
  v8 = type metadata accessor for RequestType();
  v7[28] = v8;
  v7[29] = *(_QWORD *)(v8 - 8);
  v7[30] = swift_task_alloc();
  v7[31] = swift_task_alloc();
  v7[32] = swift_task_alloc();
  v7[33] = swift_task_alloc();
  v7[34] = swift_task_alloc();
  v7[35] = swift_task_alloc();
  v7[36] = swift_task_alloc();
  v7[37] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v7[38] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD, uint64_t, uint64_t);
  void (*v9)(uint64_t);
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  char v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  void (*v44)(uint64_t, _QWORD, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD, uint64_t, uint64_t);
  uint64_t (*v48)(uint64_t);
  unsigned int v49;

  v2 = *(_QWORD *)(v0 + 288);
  v1 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  *(_QWORD *)(v0 + 312) = OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  v7 = v5 + v6;
  swift_beginAccess();
  v8 = *(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 16);
  *(_QWORD *)(v0 + 320) = v8;
  v47 = v8;
  v8(v1, v7, v4);
  *(_DWORD *)(v0 + 360) = *MEMORY[0x1E0D9E880];
  v9 = *(void (**)(uint64_t))(v3 + 104);
  *(_QWORD *)(v0 + 328) = v9;
  v9(v2);
  *(_QWORD *)(v0 + 336) = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D8]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (*(_QWORD *)(v0 + 64) == *(_QWORD *)(v0 + 80) && *(_QWORD *)(v0 + 72) == *(_QWORD *)(v0 + 88))
    v10 = 1;
  else
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v12 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 224);
  v14 = *(_QWORD *)(v0 + 232);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  *(_QWORD *)(v0 + 344) = v15;
  v15(v12, v13);
  v15(v11, v13);
  if ((v10 & 1) != 0)
    goto LABEL_10;
  v16 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 224);
  v47(*(_QWORD *)(v0 + 280), v7, v17);
  v18 = *MEMORY[0x1E0D9E8A8];
  ((void (*)(uint64_t, _QWORD, uint64_t))v9)(v16, *MEMORY[0x1E0D9E8A8], v17);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v20 = *(_QWORD *)(v0 + 272);
  v19 = *(_QWORD *)(v0 + 280);
  v21 = *(_QWORD *)(v0 + 224);
  if (*(_QWORD *)(v0 + 96) != *(_QWORD *)(v0 + 112) || *(_QWORD *)(v0 + 104) != *(_QWORD *)(v0 + 120))
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15(v20, v21);
    v15(v19, v21);
    if ((v22 & 1) != 0)
      goto LABEL_10;
    v49 = v18;
    swift_release();
    v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 328);
    v29 = *(unsigned int *)(v0 + 360);
    v30 = *(_QWORD *)(v0 + 256);
    v31 = *(_QWORD *)(v0 + 224);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v0 + 320))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 192) + *(_QWORD *)(v0 + 312), v31);
    v28(v30, v29, v31);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (*(_QWORD *)(v0 + 128) == *(_QWORD *)(v0 + 144) && *(_QWORD *)(v0 + 136) == *(_QWORD *)(v0 + 152))
    {
      v32 = (uint64_t *)(v0 + 264);
      v33 = (uint64_t *)(v0 + 256);
      v34 = 1;
    }
    else
    {
      v39 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
      v41 = *(_QWORD *)(v0 + 256);
      v40 = *(_QWORD *)(v0 + 264);
      v42 = *(_QWORD *)(v0 + 224);
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v39(v41, v42);
      v39(v40, v42);
      if ((v43 & 1) != 0)
      {
        v38 = 1;
        goto LABEL_19;
      }
      v32 = (uint64_t *)(v0 + 248);
      v44 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 328);
      v33 = (uint64_t *)(v0 + 240);
      v45 = *(_QWORD *)(v0 + 240);
      v46 = *(_QWORD *)(v0 + 224);
      (*(void (**)(_QWORD, _QWORD, uint64_t))(v0 + 320))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 192) + *(_QWORD *)(v0 + 312), v46);
      v44(v45, v49, v46);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (*(_QWORD *)(v0 + 160) == *(_QWORD *)(v0 + 176) && *(_QWORD *)(v0 + 168) == *(_QWORD *)(v0 + 184))
        v34 = 1;
      else
        v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35 = *v32;
    v36 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    v37 = *(_QWORD *)(v0 + 224);
    v36(*v33, v37);
    v36(v35, v37);
    v38 = v34;
LABEL_19:
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v0 + 208) + 432))(v38 & 1, *(_QWORD *)(v0 + 216));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  swift_bridgeObjectRelease_n();
  v15(v20, v21);
  v15(v19, v21);
LABEL_10:
  if (one-time initialization token for rraasWaitTimeMillis != -1)
    swift_once();
  v23 = *(_QWORD *)(v0 + 200);
  v24 = type metadata accessor for DispatchTimeInterval();
  v25 = __swift_project_value_buffer(v24, (uint64_t)static ServerFallbackCapableRequestProcessor.rraasWaitTimeMillis);
  v48 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v23 + 1264) + *(_QWORD *)(*(_QWORD *)v23 + 1264));
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 352) = v26;
  *v26 = v0;
  v26[1] = closure #1 in ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:);
  return v48(v25);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  void (*v14)(uint64_t, _QWORD, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;

  swift_release();
  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 328);
  v2 = *(unsigned int *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 224);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0 + 320))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 192) + *(_QWORD *)(v0 + 312), v4);
  v1(v3, v2, v4);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (*(_QWORD *)(v0 + 128) == *(_QWORD *)(v0 + 144) && *(_QWORD *)(v0 + 136) == *(_QWORD *)(v0 + 152))
  {
    v5 = (uint64_t *)(v0 + 264);
    v6 = (uint64_t *)(v0 + 256);
    v7 = 1;
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = *v5;
    v18 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    v19 = *(_QWORD *)(v0 + 224);
    v18(*v6, v19);
    v18(v17, v19);
    v13 = v7;
    goto LABEL_11;
  }
  v8 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
  v10 = *(_QWORD *)(v0 + 256);
  v9 = *(_QWORD *)(v0 + 264);
  v11 = *(_QWORD *)(v0 + 224);
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v10, v11);
  v8(v9, v11);
  if ((v12 & 1) == 0)
  {
    v5 = (uint64_t *)(v0 + 248);
    v14 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 328);
    v6 = (uint64_t *)(v0 + 240);
    v15 = *(_QWORD *)(v0 + 240);
    v16 = *(_QWORD *)(v0 + 224);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v0 + 320))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 192) + *(_QWORD *)(v0 + 312), v16);
    v14(v15, *MEMORY[0x1E0D9E8A8], v16);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (*(_QWORD *)(v0 + 160) == *(_QWORD *)(v0 + 176) && *(_QWORD *)(v0 + 168) == *(_QWORD *)(v0 + 184))
      v7 = 1;
    else
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_10;
  }
  v13 = 1;
LABEL_11:
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v0 + 208) + 432))(v13 & 1, *(_QWORD *)(v0 + 216));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void ServerFallbackCapableRequestProcessor.handleAceServerContextUpdateCandidate(_:executionContextInfo:reply:)(NSObject *a1, uint64_t a2, void (*a3)(id, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  void (*v36)(id, _QWORD);
  id v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  void (*v50)(id, _QWORD);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;

  v55 = a1;
  v7 = type metadata accessor for UUID();
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  MEMORY[0x1E0C80A78](v7);
  v52 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UserID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v47 - v14;
  v16 = type metadata accessor for RequestType();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 528))(v18);
  if (v21)
  {
    v50 = a3;
    v51 = a4;
    v22 = v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    v23 = v21;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v22, v16);
    v24 = (id *)(v23 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
    swift_beginAccess();
    v48 = *v24;
    v49 = v23;
    v25 = (_QWORD *)(v23 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    if (*v25 >> 62 == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, (*v25 & 0x3FFFFFFFFFFFFFFFLL) + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId, v9);
      v26 = 4;
    }
    else
    {
      v13 = (char *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId);
      v26 = 2;
    }
    (*(void (**)(char *, char *, uint64_t))(v10 + 8 * v26))(v15, v13, v9);
    v30 = v48;
    v31 = v48;
    type metadata accessor for ConversationContextUpdateMetadata();
    v32 = swift_allocObject();
    *(_BYTE *)(v32 + 16) = 1;
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v32 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v20, v16);
    *(_QWORD *)(v32 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v30;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v32 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v15, v9);
    *(_BYTE *)(v32 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = 0;
    outlined init with copy of ReferenceResolutionClientProtocol?(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, (uint64_t)v56, &demangling cache variable for type metadata for ContextUpdating?);
    v33 = v57;
    if (v57)
    {
      v34 = v58;
      __swift_project_boxed_opaque_existential_1(v56, v57);
      v35 = v55;
      (*(void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(v34 + 16))(v55, v32, v33, v34);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
      v36 = v50;
      if (!v50)
      {
LABEL_13:
        swift_release();
        swift_release();
        return;
      }
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v56, &demangling cache variable for type metadata for ContextUpdating?);
      v36 = v50;
      v35 = v55;
      if (!v50)
        goto LABEL_13;
    }
    v37 = objc_allocWithZone(MEMORY[0x1E0D87FF8]);
    swift_retain();
    v38 = objc_msgSend(v37, sel_init);
    v39 = v52;
    UUID.init()();
    v40 = UUID.uuidString.getter();
    v42 = v41;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v54);
    v43 = (void *)MEMORY[0x1B5E432E8](v40, v42);
    swift_bridgeObjectRelease();
    objc_msgSend(v38, sel_setAceId_, v43);

    v44 = v38;
    v45 = -[NSObject aceId](v35, sel_aceId);
    objc_msgSend(v44, sel_setRefId_, v45);

    v46 = v44;
    v36(v44, 0);

    _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v36);
    goto LABEL_13;
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.conversationBridge);
  v55 = Logger.logObject.getter();
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v29 = 0;
    _os_log_impl(&dword_1B4BE6000, v55, v28, "Received ServerContextUpdateCandidate while not in a turn. Ignoring.", v29, 2u);
    MEMORY[0x1B5E44758](v29, -1, -1);
  }

}

uint64_t ServerFallbackCapableRequestProcessor.handlePommesResultCandidateMessage(_:)(uint64_t a1)
{
  return ServerFallbackCapableRequestProcessor.handlePommesResultCandidateMessage(_:)(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9D9C8], (uint64_t (*)(uint64_t))ConversationRequestProcessor.handlePommesResultCandidateMessage(_:));
}

uint64_t ServerFallbackCapableRequestProcessor.handlePommesTRPCandidateMessage(_:)(uint64_t a1)
{
  return ServerFallbackCapableRequestProcessor.handlePommesResultCandidateMessage(_:)(a1, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9D578], (uint64_t (*)(uint64_t))ConversationRequestProcessor.handlePommesTRPCandidateMessage(_:));
}

uint64_t ServerFallbackCapableRequestProcessor.handlePommesResultCandidateMessage(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  unint64_t *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  char v17;

  v7 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 528))();
  if (v7)
  {
    v8 = (unint64_t *)(v7 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    v10 = *v8;
    v9 = (void *)v8[1];
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v10, v9);
    v11 = swift_release();
    v12 = a2(v11);
    v14 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v12, v13, v10, v9);
    swift_bridgeObjectRelease();
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v10, v9);
    if (v14)
    {
      v15 = (*(uint64_t (**)(void))(*(_QWORD *)v14 + 376))();
      if (ResultCandidateProcessingStatus.rawValue.getter(v15) == 0xD000000000000018 && v16 == 0x80000001B4EF5350)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0)
        {
LABEL_8:
          swift_release();
          return a3(a1);
        }
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 384))(13);
      goto LABEL_8;
    }
  }
  return a3(a1);
}

void ServerFallbackCapableRequestProcessor.reallyHandleStoppedListeningForContinuationMessage(for:)(Swift::String *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  unsigned __int8 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t countAndFlagsBits;
  void *object;
  id v27;
  void *v28;
  void *v29;
  char v30;

  v2 = v1;
  v4 = (*(uint64_t (**)(uint64_t))(a1->_countAndFlagsBits + 456))(1);
  v5 = *(uint64_t (**)(uint64_t))(a1->_countAndFlagsBits + 376);
  v6 = v5(v4);
  if (ResultCandidateProcessingStatus.rawValue.getter(v6) == 0xD000000000000016 && v7 == 0x80000001B4EF5330)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    (*(void (**)(Swift::String *))(*(_QWORD *)v1 + 1040))(a1);
LABEL_6:
    ConversationRequestProcessor.reallyHandleStoppedListeningForContinuationMessage(for:)(a1);
    return;
  }
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v9 = swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
    goto LABEL_5;
  v10 = v5(v9);
  if (ResultCandidateProcessingStatus.rawValue.getter(v10) == 0xD000000000000018 && v11 == 0x80000001B4EF52F0)
  {
    v12 = swift_bridgeObjectRelease();
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v12 = swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
      goto LABEL_12;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 440))(v12);
  if ((v12 & 1) == 0)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1B4BE6000, v18, v19, "Sending ResultCandidateSelected with StoppedListeningForSpeechContinuationMessage", v20, 2u);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }

    (*(void (**)(uint64_t, void *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 1184))(a1[1]._countAndFlagsBits, a1[1]._object, 1, 0, 0);
    goto LABEL_6;
  }
LABEL_12:
  v14 = v5(v12);
  if (ResultCandidateProcessingStatus.rawValue.getter(v14) == 0xD000000000000013 && v15 == 0x80000001B4EF5310)
  {
    v16 = swift_bridgeObjectRelease();
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v16 = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
      goto LABEL_6;
  }
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1432))(v16);
  if (!(v22 >> 62))
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v23)
      goto LABEL_23;
LABEL_37:
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v23 = _CocoaArrayWrapper.endIndex.getter();
  if (!v23)
    goto LABEL_37;
LABEL_23:
  if (v23 >= 1)
  {
    v24 = 0;
    countAndFlagsBits = a1[1]._countAndFlagsBits;
    object = a1[1]._object;
    while (1)
    {
      if ((v22 & 0xC000000000000001) != 0)
        v27 = (id)MEMORY[0x1B5E43B94](v24, v22);
      else
        v27 = *(id *)(v22 + 8 * v24 + 32);
      v28 = v27;
      if (ResultCandidateRequestMessageBase.resultCandidateId.getter() == countAndFlagsBits && v29 == object)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v30 & 1) == 0)
          goto LABEL_27;
      }
      ServerFallbackCapableRequestProcessor.attemptServerFallback(executeNLOnServer:rcState:)(v28, a1);
LABEL_27:
      ++v24;

      if (v23 == v24)
        goto LABEL_37;
    }
  }
  __break(1u);
}

void ServerFallbackCapableRequestProcessor.synchronizedClose(_:_:_:)(void *a1, uint64_t a2, char *a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23[3];

  v5 = v4;
  if (((*(uint64_t (**)(void))(*v4 + 1336))() & 1) != 0)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    swift_retain();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v23[0] = v14;
      *(_DWORD *)v13 = 136315138;
      v15 = v5[8];
      v16 = v5[9];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v11, v12, "This request: %s was handled on server", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v14, -1, -1);
      MEMORY[0x1B5E44758](v13, -1, -1);

    }
    else
    {

      v17 = swift_release();
    }
    v18 = (*(uint64_t (**)(uint64_t))(*v5 + 528))(v17);
    if (v18)
    {
      v20 = (unint64_t *)(v18
                               + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      v21 = *v20;
      v22 = (void *)v20[1];
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v21, v22);
      swift_release();
      if (v21 >> 62 == 1)
      {
        swift_retain();
        outlined consume of ConversationRequestProcessorTurnState.SpeechState(v21, v22);
        (*(void (**)(uint64_t))(*(_QWORD *)(v21 & 0x3FFFFFFFFFFFFFFFLL) + 384))(8);
        v18 = swift_release();
      }
      else
      {
        outlined consume of ConversationRequestProcessorTurnState.SpeechState(v21, v22);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*v5 + 1096))(v18, v19);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*v5 + 376))(1, 0, 3);
  }
  else
  {
    ConversationRequestProcessor.synchronizedClose(_:_:_:)(a1, a2, a3, a4 & 1);
  }
}

void ServerFallbackCapableRequestProcessor.fallbackToServer(forResultCandidateId:serverFallbackReason:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];

  v4 = v3;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v32 = a3;
    v11 = swift_slowAlloc();
    v30 = swift_slowAlloc();
    v33[0] = v30;
    *(_DWORD *)v11 = 136315650;
    if (a2)
      v12 = a1;
    else
      v12 = 7104878;
    if (a2)
      v13 = a2;
    else
      v13 = 0xE300000000000000;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    v31 = a1;
    v14 = v4[8];
    v15 = v4[9];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2080;
    v16 = v4[10];
    v17 = v4[11];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    a1 = v31;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v9, v10, "Execution asked to fallback to server for rcId: %s, requestId: %s, rootRequestId: %s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v30, -1, -1);
    v18 = v11;
    a3 = v32;
    MEMORY[0x1B5E44758](v18, -1, -1);

  }
  else
  {

    swift_release_n();
    v19 = swift_bridgeObjectRelease_n();
  }
  if (((*(uint64_t (**)(uint64_t))(*v4 + 440))(v19) & 1) != 0)
  {
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1B4BE6000, v20, v21, "ResultCandidateSelected has already been sent to server. Cannot fallback to server any more", v22, 2u);
      MEMORY[0x1B5E44758](v22, -1, -1);
    }

  }
  else
  {
    v23 = (*(uint64_t (**)(void))(*v4 + 528))();
    if (v23)
    {
      v24 = (unint64_t *)(v23
                               + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      v26 = *v24;
      v25 = (void *)v24[1];
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v26, v25);
      swift_release();
      if (a2)
        v27 = a1;
      else
        v27 = 7104878;
      if (a2)
        v28 = a2;
      else
        v28 = 0xE300000000000000;
      swift_bridgeObjectRetain();
      v29 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v27, v28, v26, v25);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v26, v25);
      swift_bridgeObjectRelease();
    }
    else
    {
      v29 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(*v4 + 1520))(v29, a3);
    swift_release();
  }
}

Swift::Void __swiftcall ServerFallbackCapableRequestProcessor.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  const char *v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[3];

  v2 = v1;
  object = forResultCandidateId.value._object;
  countAndFlagsBits = forResultCandidateId.value._countAndFlagsBits;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v6);
  v10 = (uint64_t *)((char *)&v51 - v9);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  v15 = os_log_type_enabled(v13, v14);
  v54 = countAndFlagsBits;
  if (v15)
  {
    v51 = v12;
    v16 = swift_slowAlloc();
    v53 = v10;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v56[0] = v18;
    v52 = v8;
    *(_DWORD *)v17 = 136315138;
    v19 = v2;
    if (object)
      v20 = countAndFlagsBits;
    else
      v20 = 7104878;
    if (object)
      v21 = (unint64_t)object;
    else
      v21 = 0xE300000000000000;
    swift_bridgeObjectRetain();
    v22 = v20;
    v2 = v19;
    v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, v56);
    v8 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v13, v14, "Execution asked to fallback to Pommes for rcId: %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v18, -1, -1);
    v23 = v17;
    v10 = v53;
    MEMORY[0x1B5E44758](v23, -1, -1);

  }
  else
  {

    v24 = swift_bridgeObjectRelease_n();
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 440))(v24) & 1) != 0)
  {
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      v28 = "ResultCandidateSelected has already been sent to server. Cannot fallback to POMMES any more";
LABEL_27:
      _os_log_impl(&dword_1B4BE6000, v25, v26, v28, v27, 2u);
      MEMORY[0x1B5E44758](v27, -1, -1);
      goto LABEL_28;
    }
    goto LABEL_28;
  }
  if (!object)
  {
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      v28 = "Cannot fallback to Pommes without rcId";
      goto LABEL_27;
    }
LABEL_28:

    return;
  }
  v29 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 528);
  v30 = swift_bridgeObjectRetain();
  v31 = v29(v30);
  if (v31)
  {
    v32 = (unint64_t *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    v34 = *v32;
    v33 = (void *)v32[1];
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v34, v33);
    swift_release();
    v35 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v54, (uint64_t)object, v34, v33);
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v34, v33);
    if (v35)
    {
      v36 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 872);
      v37 = swift_retain();
      v38 = v36(v37);
      v39 = swift_release();
      if (v38)
      {
        v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 216))(v39);
        v42 = v41;
        swift_release();
        if (v42)
          v43 = v40;
        else
          v43 = 0;
        v44 = 0xE000000000000000;
        if (v42)
          v44 = v42;
        *v8 = v54;
        v8[1] = object;
        v8[2] = v43;
        v8[3] = v44;
        v45 = *MEMORY[0x1E0D988D0];
        v46 = type metadata accessor for PommesCandidateId();
        v47 = *(_QWORD *)(v46 - 8);
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(v47 + 104))(v8, v45, v46);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v8, 0, 1, v46);
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v8, (uint64_t)v10, &demangling cache variable for type metadata for PommesCandidateId?);
        goto LABEL_31;
      }
    }
  }
  else
  {
    v35 = 0;
  }
  *v10 = v54;
  v10[1] = object;
  v48 = *MEMORY[0x1E0D988C8];
  v49 = type metadata accessor for PommesCandidateId();
  v50 = *(_QWORD *)(v49 - 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v50 + 104))(v10, v48, v49);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v10, 0, 1, v49);
LABEL_31:
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 1528))(v35, v10);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for PommesCandidateId?);
}

Swift::Void __swiftcall ServerFallbackCapableRequestProcessor.handleRuntimeError(error:)(NSError *error)
{
  uint64_t v1;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 1360))();
  if (v3)
  {
    (*(void (**)(NSError *))(*(_QWORD *)v3 + 448))(error);
    swift_release();
  }
  else
  {
    ConversationRequestProcessor.handleRuntimeError(error:)(error);
  }
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.closeServerRequest(forExecutionRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.closeServerRequest(forExecutionRequestId:)()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v20;
  os_log_type_t v21;
  _BOOL4 v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v34;
  uint64_t v35;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1B4BE6000, v11, v12, "This ServerFallbackCapableRequestProcessor instance is already out of scope", v13, 2u);
      MEMORY[0x1B5E44758](v13, -1, -1);
    }
    goto LABEL_28;
  }
  v2 = (_QWORD *)Strong;
  v3 = *(_QWORD *)(v0 + 96);
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) & 1) == 0)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    v11 = Logger.logObject.getter();
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v15))
    {
      v16 = swift_slowAlloc();
      *(_WORD *)v16 = 0;
      v17 = "Not an AsrOnServer request. Ignoring closeServerRequest() call";
LABEL_24:
      _os_log_impl(&dword_1B4BE6000, v11, v15, v17, (uint8_t *)v16, 2u);
LABEL_25:
      MEMORY[0x1B5E44758](v16, -1, -1);

      goto LABEL_26;
    }
    goto LABEL_27;
  }
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId) != *(_QWORD *)(v0 + 104)
    || *(_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8) != *(_QWORD *)(v0 + 112))
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      v11 = Logger.logObject.getter();
      v21 = static os_log_type_t.error.getter();
      v22 = os_log_type_enabled(v11, v21);
      v23 = *(_QWORD *)(v0 + 112);
      if (v22)
      {
        v24 = *(_QWORD *)(v0 + 104);
        v16 = swift_slowAlloc();
        v34 = swift_slowAlloc();
        v35 = v34;
        *(_DWORD *)v16 = 136315394;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v16 + 12) = 2080;
        v26 = v2[8];
        v25 = v2[9];
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B4BE6000, v11, v21, "Unexpectedly received closeServerRequest call for executionRequestId: %s on processor with requestId: %s", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v34, -1, -1);
        goto LABEL_25;
      }
      swift_release_n();
      swift_bridgeObjectRelease_n();
LABEL_28:

      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v3 = *(_QWORD *)(v0 + 96);
  }
  v5 = (_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  if (*v5 >> 62 != 1)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
    v11 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v15))
    {
      v16 = swift_slowAlloc();
      *(_WORD *)v16 = 0;
      v17 = "Unexpectedly received closeServerRequest() from Execution before an RC has been selected. This is not allowe"
            "d because the flow can still choose to fallback to server.";
      goto LABEL_24;
    }
LABEL_27:
    swift_release();
    goto LABEL_28;
  }
  v6 = *v5 & 0x3FFFFFFFFFFFFFFFLL;
  v7 = *(uint64_t (**)(uint64_t))(*v2 + 440);
  swift_retain();
  v8 = swift_retain();
  v9 = v7(v8);
  swift_release();
  if ((v9 & 1) != 0)
  {
    swift_release();
LABEL_26:
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.conversationBridge);
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v30 = 0;
    _os_log_impl(&dword_1B4BE6000, v28, v29, "Sending ResultCandidateSelected since execution asked to close server request", v30, 2u);
    MEMORY[0x1B5E44758](v30, -1, -1);
  }

  v31 = *(_QWORD *)(v6 + 16);
  v32 = *(_QWORD *)(v6 + 24);
  v33 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*v2 + 1184);
  swift_bridgeObjectRetain();
  v33(v31, v32, 0, 0, 0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t key path setter for Siri_Nlu_External_UserDialogAct.delegated : Siri_Nlu_External_UserDialogAct(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return Siri_Nlu_External_UserDialogAct.delegated.setter();
}

void ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  id v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  id v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for ServerFallbackReason();
  v9 = *(_QWORD *)(v71 - 8);
  v10 = MEMORY[0x1E0C80A78](v71);
  v12 = (char *)v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v13 = a1;
    goto LABEL_3;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 528))(v10);
  if (v14)
  {
    v15 = (unint64_t *)(v14 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    v16 = *v15;
    v17 = (void *)v15[1];
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v16, v17);
    swift_release();
    if (v16 >> 62 == 1)
    {
      v13 = (_QWORD *)(v16 & 0x3FFFFFFFFFFFFFFFLL);
      swift_retain();
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v16, v17);
LABEL_3:
      outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)v8, &demangling cache variable for type metadata for ServerFallbackReason?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v71) == 1)
      {
        (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E0D9ED48], v71);
        swift_retain();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for ServerFallbackReason?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, v71);
        swift_retain();
      }
      v18 = specialized static ServerFallbackCapableRequestProcessor.getDelegatedUDA(rcState:)((uint64_t)v13);
      v19 = (*(uint64_t (**)(void))(*v13 + 864))();
      v20 = v19;
      v21 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled);
      v70 = v9;
      if (v21 == 1)
      {
        if (v19)
        {
          MEMORY[0x1E0C80A78](v19);
          v68[-4] = v3;
          v68[-3] = v13;
          v68[-2] = v18;
          v68[-1] = v12;
          v22 = objc_allocWithZone((Class)type metadata accessor for MUXServerFallbackMessage());
          v23 = (void *)MEMORY[0x1B5E41B78](partial apply for closure #1 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:), &v68[-6]);
          swift_bridgeObjectRelease();
          if (v23)
          {
            __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 48));
            dispatch thunk of MessagePublishing.postMessage(_:)();
            if (one-time initialization token for conversationBridge != -1)
              swift_once();
            v24 = type metadata accessor for Logger();
            __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
            swift_retain();
            v25 = Logger.logObject.getter();
            v26 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v25, v26))
            {
              v69 = v20;
              v27 = (uint8_t *)swift_slowAlloc();
              v28 = swift_slowAlloc();
              v73 = v28;
              *(_DWORD *)v27 = 136315138;
              v68[1] = v27 + 4;
              v30 = v13[2];
              v29 = v13[3];
              swift_bridgeObjectRetain();
              v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, &v73);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1B4BE6000, v25, v26, "Posted MUXServerFallbackMessage on the message bus for RC:%s", v27, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1B5E44758](v28, -1, -1);
              MEMORY[0x1B5E44758](v27, -1, -1);
              swift_release();

            }
            else
            {

              swift_release_n();
            }
LABEL_30:
            swift_release();
            (*(void (**)(char *, uint64_t))(v70 + 8))(v12, v71);
            return;
          }
          v59 = v70;
          if (one-time initialization token for conversationBridge != -1)
            swift_once();
          v64 = type metadata accessor for Logger();
          __swift_project_value_buffer(v64, (uint64_t)static Logger.conversationBridge);
          v65 = Logger.logObject.getter();
          v66 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v65, v66))
          {
            v67 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v67 = 0;
            _os_log_impl(&dword_1B4BE6000, v65, v66, "Could not create MUXServerFallbackMessage. Cannot fallback to server", v67, 2u);
            MEMORY[0x1B5E44758](v67, -1, -1);
            swift_release();

          }
          else
          {

            swift_release();
          }
LABEL_44:
          swift_release();
          (*(void (**)(char *, uint64_t))(v59 + 8))(v12, v71);
          return;
        }
      }
      else if (v19)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UserID, AFSpeechPackage)>);
        v31 = v12;
        v32 = v20;
        v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UserID, AFSpeechPackage));
        v34 = *(unsigned __int8 *)(*(_QWORD *)(v33 - 8) + 80);
        v35 = (v34 + 32) & ~v34;
        v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_1B4EE3F50;
        v37 = v36 + v35;
        v38 = *(int *)(v33 + 48);
        v20 = v32;
        v12 = v31;
        v39 = (char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
        v40 = type metadata accessor for UserID();
        v41 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v37, v39, v40);
        *(_QWORD *)(v37 + v38) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 112))(v41);
        v42 = v36;
LABEL_19:
        v43 = specialized Dictionary.init(dictionaryLiteral:)(v42);
        v44 = MEMORY[0x1E0C80A78](v43);
        v68[-6] = v3;
        v68[-5] = v13;
        v68[-4] = v18;
        v68[-3] = v12;
        v68[-2] = v44;
        v45 = objc_allocWithZone((Class)type metadata accessor for ExecuteNLOnServerMessage());
        v46 = (void *)ExecuteNLOnServerMessage.init(build:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v46)
        {
          v69 = v20;
          __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 48));
          dispatch thunk of MessagePublishing.postMessage(_:)();
          if (one-time initialization token for conversationBridge != -1)
            swift_once();
          v47 = type metadata accessor for Logger();
          __swift_project_value_buffer(v47, (uint64_t)static Logger.conversationBridge);
          v48 = v46;
          v49 = Logger.logObject.getter();
          v50 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v49, v50))
          {
            v51 = (uint8_t *)swift_slowAlloc();
            v52 = swift_slowAlloc();
            v73 = v52;
            *(_DWORD *)v51 = 136315138;
            v53 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
            v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, &v73);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B4BE6000, v49, v50, "Posted ExecuteNLOnServerMessage on the message bus for RC:%s", v51, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v52, -1, -1);
            MEMORY[0x1B5E44758](v51, -1, -1);

            swift_release();
          }
          else
          {

            swift_release();
          }
          goto LABEL_30;
        }
        if (one-time initialization token for conversationBridge != -1)
          swift_once();
        v55 = type metadata accessor for Logger();
        __swift_project_value_buffer(v55, (uint64_t)static Logger.conversationBridge);
        v56 = Logger.logObject.getter();
        v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v58 = 0;
          _os_log_impl(&dword_1B4BE6000, v56, v57, "Could not create ExecuteNLOnServerMessage. Cannot fallback to server", v58, 2u);
          MEMORY[0x1B5E44758](v58, -1, -1);
          swift_release();

        }
        else
        {

          swift_release();
        }
        v59 = v70;
        goto LABEL_44;
      }
      v42 = MEMORY[0x1E0DEE9D8];
      goto LABEL_19;
    }
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v16, v17);
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v60 = type metadata accessor for Logger();
  __swift_project_value_buffer(v60, (uint64_t)static Logger.conversationBridge);
  v61 = Logger.logObject.getter();
  v62 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v63 = 0;
    _os_log_impl(&dword_1B4BE6000, v61, v62, "Cannot fall back to server as no RC was selected", v63, 2u);
    MEMORY[0x1B5E44758](v63, -1, -1);
  }

}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v25 = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *MEMORY[0x1E0D9E668];
  v16 = type metadata accessor for MessageSource();
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v14, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  ExecuteNLOnServerMessageBase.Builder.source.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessageBase.Builder.assistantId.setter();
  v18 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v19 = type metadata accessor for UUID();
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v11, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v11, 0, 1, v19);
  ExecuteNLOnServerMessageBase.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessageBase.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessageBase.Builder.resultCandidateId.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessageBase.Builder.delegatedUserDialogActs.setter();
  v21 = type metadata accessor for ServerFallbackReason();
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v8, v25, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v8, 0, 1, v21);
  return ExecuteNLOnServerMessageBase.Builder.fallbackReason.setter();
}

uint64_t closure #2 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];

  v25[0] = a5;
  v25[1] = a6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *MEMORY[0x1E0D9E668];
  v17 = type metadata accessor for MessageSource();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  ExecuteNLOnServerMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessage.Builder.assistantId.setter();
  v19 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v20 = type metadata accessor for UUID();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v12, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v12, 0, 1, v20);
  ExecuteNLOnServerMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessage.Builder.resultCandidateId.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessage.Builder.delegatedUserDialogActs.setter();
  v22 = type metadata accessor for ServerFallbackReason();
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 16))(v9, v25[0], v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v9, 0, 1, v22);
  ExecuteNLOnServerMessage.Builder.fallbackReason.setter();
  swift_bridgeObjectRetain();
  return ExecuteNLOnServerMessage.Builder.sharedUserIdToSpeechPackage.setter();
}

void ServerFallbackCapableRequestProcessor.synchronizedFallbackToPommes(rcState:pommesCandidateId:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  void *v68;
  uint8_t *v69;
  void (*v70)(char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  id v73;
  char *v74;
  uint64_t v75;
  uint64_t v76[2];

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PommesCandidateId();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t *)((char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v71 - v15;
  if (a1)
  {
    v17 = a1;
    goto LABEL_3;
  }
  v22 = (*(uint64_t (**)(uint64_t))(*v2 + 528))(v14);
  if (!v22)
  {
LABEL_30:
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.conversationBridge);
    v19 = Logger.logObject.getter();
    v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v55 = 0;
      _os_log_impl(&dword_1B4BE6000, v19, v54, "Cannot fallback to Pommes as no RC was selected", v55, 2u);
      MEMORY[0x1B5E44758](v55, -1, -1);
    }
LABEL_34:

    return;
  }
  v74 = (char *)v9;
  v23 = v10;
  v24 = v16;
  v25 = (unint64_t *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  v26 = *v25;
  v27 = (void *)v25[1];
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v26, v27);
  swift_release();
  if (v26 >> 62 != 1)
  {
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v26, v27);
    goto LABEL_30;
  }
  v17 = v26 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v26, v27);
  v16 = v24;
  v10 = v23;
  v9 = (uint64_t)v74;
LABEL_3:
  outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)v8, &demangling cache variable for type metadata for PommesCandidateId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    swift_retain();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for PommesCandidateId?);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v19, v20))
    {

      swift_release();
      return;
    }
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1B4BE6000, v19, v20, "Cannot fallback to Pommes because PommesCandidateId is nil", v21, 2u);
    MEMORY[0x1B5E44758](v21, -1, -1);
    swift_release();
    goto LABEL_34;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v8, v9);
  v28 = *(void (**)(uint64_t))(*(_QWORD *)v17 + 384);
  swift_retain();
  v28(12);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 624))(1);
  v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v17 + 360))(0);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 872))(v29);
  if (v30)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v30 + 248))(0, 0);
    v30 = swift_release();
  }
  v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 280))(v30);
  if (v31)
  {
    v32 = specialized Sequence.compactMap<A>(_:)(v31);
    v31 = swift_bridgeObjectRelease();
  }
  else
  {
    v32 = MEMORY[0x1E0DEE9D8];
  }
  MEMORY[0x1E0C80A78](v31);
  *(&v71 - 4) = (uint64_t)v3;
  *(&v71 - 3) = (uint64_t)v16;
  *(&v71 - 2) = v17;
  *(&v71 - 1) = v32;
  v33 = objc_allocWithZone((Class)type metadata accessor for FallbackToPommesMessage());
  v34 = FallbackToPommesMessage.init(build:)();
  swift_bridgeObjectRelease();
  if (!v34)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.conversationBridge);
    v50 = Logger.logObject.getter();
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v52 = 0;
      _os_log_impl(&dword_1B4BE6000, v50, v51, "Could not create FallbackToPommesMessage. Cannot fallback to server", v52, 2u);
      MEMORY[0x1B5E44758](v52, -1, -1);
      swift_release();

      goto LABEL_43;
    }

LABEL_42:
    swift_release();
    goto LABEL_43;
  }
  v35 = (void *)v34;
  __swift_project_boxed_opaque_existential_1(v3 + 3, v3[6]);
  dispatch thunk of MessagePublishing.postMessage(_:)();
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v36 = type metadata accessor for InsightRequestSummaryLogger();
  v37 = __swift_project_value_buffer(v36, (uint64_t)static Logger.insightRequestSummaryLogger);
  swift_retain();
  swift_retain();
  specialized InsightRequestSummaryLogger.emitDebug(_:)(v37, v3, v17);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(v13, v16, v9);
  v38 = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 88))(v13, v9);
  if (v38 == *MEMORY[0x1E0D988C8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v13, v9);
    v40 = *v13;
    v39 = v13[1];
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain();
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v73 = v35;
      v44 = swift_slowAlloc();
      v72 = v40;
      v45 = (uint8_t *)v44;
      v46 = swift_slowAlloc();
      v74 = v16;
      v47 = v46;
      v76[0] = v46;
      *(_DWORD *)v45 = 136315138;
      swift_bridgeObjectRetain();
      v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v39, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v42, v43, "Posted FallbackToPommesMessage on the message bus for RC:%s", v45, 0xCu);
      swift_arrayDestroy();
      v48 = v47;
      v16 = v74;
      MEMORY[0x1B5E44758](v48, -1, -1);
      MEMORY[0x1B5E44758](v45, -1, -1);
      swift_release();

LABEL_43:
      (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
      return;
    }

    swift_bridgeObjectRelease_n();
    goto LABEL_42;
  }
  if (v38 == *MEMORY[0x1E0D988D0])
  {
    v74 = v16;
    (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v13, v9);
    v56 = *v13;
    v57 = v13[1];
    v58 = v13[2];
    v59 = v13[3];
    v72 = v58;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v61 = Logger.logObject.getter();
    v62 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = swift_slowAlloc();
      v71 = swift_slowAlloc();
      v76[0] = v71;
      *(_DWORD *)v63 = 136315394;
      v73 = v35;
      swift_bridgeObjectRetain();
      v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v63 + 12) = 2080;
      swift_bridgeObjectRetain();
      v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v59, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v61, v62, "Posted FallbackToPommesMessage on the message bus for trpId:%s tcuId:%s", (uint8_t *)v63, 0x16u);
      v64 = v71;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v64, -1, -1);
      MEMORY[0x1B5E44758](v63, -1, -1);
      swift_release();

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v74, v9);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.conversationBridge);
    v66 = Logger.logObject.getter();
    v67 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v66, v67))
    {
      v68 = v35;
      v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v69 = 0;
      _os_log_impl(&dword_1B4BE6000, v66, v67, "Posted FallbackToPommesMessage on the message bus with unknown pommesCandidateId", v69, 2u);
      MEMORY[0x1B5E44758](v69, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
    }
    v70 = *(void (**)(char *, uint64_t))(v10 + 8);
    v70(v16, v9);
    v70((char *)v13, v9);
  }
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToPommes(rcState:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = a4;
  v39 = a5;
  v37 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *MEMORY[0x1E0D9E668];
  v22 = type metadata accessor for MessageSource();
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 104))(v20, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  FallbackToPommesMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  FallbackToPommesMessage.Builder.assistantId.setter();
  v24 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v25 = type metadata accessor for UUID();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v17, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v17, 0, 1, v25);
  FallbackToPommesMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  FallbackToPommesMessage.Builder.requestId.setter();
  v27 = type metadata accessor for PommesCandidateId();
  v28 = *(_QWORD *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v14, v37, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v14, 0, 1, v27);
  FallbackToPommesMessage.Builder.pommesCandidateId.setter();
  v29 = v38 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
  v30 = type metadata accessor for UserID();
  v31 = *(_QWORD *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v11, v29, v30);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v11, 0, 1, v30);
  FallbackToPommesMessage.Builder.userId.setter();
  swift_bridgeObjectRetain();
  FallbackToPommesMessage.Builder.delegatedUserDialogActs.setter();
  v32 = *MEMORY[0x1E0D9ED48];
  v33 = type metadata accessor for ServerFallbackReason();
  v34 = *(_QWORD *)(v33 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 104))(v8, v32, v33);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v8, 0, 1, v33);
  return FallbackToPommesMessage.Builder.fallbackReason.setter();
}

uint64_t closure #1 in closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t result;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD **)(v0 + 64);
  v4 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil);
  v5 = (unsigned int *)(*(_QWORD *)(v0 + 72)
                      + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter);
  swift_beginAccess();
  result = (*(uint64_t (**)(_QWORD, uint64_t, BOOL, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v4 + 160))(*v5, 1, v2 != 0, v3[8], v3[9], v3[10], v3[11], v1);
  if (__OFADD__(*v5, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v5;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

_QWORD *ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,unsigned __int8 a25,unsigned __int8 a26)
{
  _QWORD *v26;

  v26 = specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  return v26;
}

_QWORD *ServerFallbackCapableRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,unsigned __int8 a26,unsigned __int8 a27)
{
  _QWORD *v27;

  swift_allocObject();
  v27 = specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  return v27;
}

_QWORD *ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,unsigned __int8 a26,unsigned __int8 a27)
{
  _QWORD *v27;

  v27 = specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  return v27;
}

uint64_t ServerFallbackCapableRequestProcessor.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage));
  return swift_bridgeObjectRelease();
}

uint64_t ServerFallbackCapableRequestProcessor.deinit()
{
  uint64_t v0;

  v0 = ConversationRequestProcessor.deinit();
  swift_release();
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for ServerFallbackCapableRequestProcessing.handleExecuteNLOnServerMessage(_:) in conformance ServerFallbackCapableRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1456))();
}

uint64_t protocol witness for ServerFallbackCapableRequestProcessing.handleAceFlowOutputCandidate(_:executionContextInfo:reply:) in conformance ServerFallbackCapableRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1496))();
}

uint64_t protocol witness for ServerFallbackCapableRequestProcessing.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:) in conformance ServerFallbackCapableRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1504))();
}

uint64_t protocol witness for ServerFallbackCapableRequestProcessing.handleAceServerContextUpdateCandidate(_:executionContextInfo:reply:) in conformance ServerFallbackCapableRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1512))();
}

uint64_t specialized ServerFallbackCapableRequestProcessor.makePreExecutionRulesBeforeRCSelection(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  _UNKNOWN **v34;
  _QWORD *v35;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SiriInCallFeatureFlag();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 1408))(v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0D98458], v5);
  v11 = SiriInCallFeatureFlag.isEnabled.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v12 = type metadata accessor for HangUpRule();
  v13 = (_BYTE *)swift_allocObject();
  v13[16] = 0;
  v13[17] = v10;
  v13[18] = v11 & 1;
  swift_beginAccess();
  v14 = v35;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
  v16 = v14[2];
  v15 = v14[3];
  if (v16 >= v15 >> 1)
    v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v14);
  v33 = v12;
  v34 = &protocol witness table for HangUpRule;
  *(_QWORD *)&v32 = v13;
  v14[2] = v16 + 1;
  outlined init with take of ReferenceResolutionClientProtocol(&v32, (uint64_t)&v14[5 * v16 + 4]);
  v35 = v14;
  swift_endAccess();
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_networkAvailabilityProvider);
  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_coreTelephonyServiceProvider);
  v19 = *(void **)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage);
  if (v19)
  {
    swift_retain();
    v20 = v19;
    swift_retain();
    ExecuteNLOnServerMessageBase.fallbackReason.getter();

    v21 = type metadata accessor for ServerFallbackReason();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v4, 0, 1, v21);
  }
  else
  {
    v22 = type metadata accessor for ServerFallbackReason();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v4, 1, 1, v22);
    swift_retain();
    swift_retain();
  }
  v23 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v24 = type metadata accessor for OfflineServerFallbackRule();
  v25 = swift_allocObject();
  v26 = (_QWORD *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_processInfo);
  v26[3] = type metadata accessor for NSProcessInfo();
  v26[4] = &protocol witness table for NSProcessInfo;
  *v26 = v23;
  *(_BYTE *)(v25 + 16) = 5;
  *(_QWORD *)(v25 + 24) = v17;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v4, v25 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  *(_QWORD *)(v25 + 32) = v18;
  swift_beginAccess();
  v27 = v35;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
  v29 = v27[2];
  v28 = v27[3];
  if (v29 >= v28 >> 1)
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
  v33 = v24;
  v34 = &protocol witness table for OfflineServerFallbackRule;
  *(_QWORD *)&v32 = v25;
  v27[2] = v29 + 1;
  outlined init with take of ReferenceResolutionClientProtocol(&v32, (uint64_t)&v27[5 * v29 + 4]);
  swift_endAccess();
  type metadata accessor for CompositePreExecutionRules();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v27;
  return result;
}

_QWORD *specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,unsigned __int8 a25,unsigned __int8 a26)
{
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[40];
  _BYTE v69[8];
  _BYTE v70[8];
  _BYTE v71[8];
  _BYTE v72[8];

  v67 = a8;
  v66 = a7;
  v65 = a6;
  v64 = a5;
  v63 = a4;
  v48 = a3;
  v62 = a2;
  v61 = a1;
  v60 = a12;
  v59 = a15;
  v58 = a16;
  v57 = a17;
  v56 = a18;
  v54 = a19;
  v52 = a24;
  v50 = a25;
  v49 = a26;
  v51 = a23;
  v46 = a21;
  v44 = a20;
  v53 = a13;
  v42 = a14;
  v43 = a11;
  v55 = a9;
  v45 = a10;
  v28 = type metadata accessor for UserID();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v31 = (char *)&v41 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for UUID();
  v33 = *(_QWORD *)(v32 - 8);
  v47 = v32;
  MEMORY[0x1E0C80A78](v32);
  v35 = (char *)&v41 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_requestHandledOnServer) = 0;
  *(_QWORD *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_runSiriKitExecutorProcessor) = 0;
  *(_QWORD *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage) = 0;
  *(_BYTE *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_isUserOnActivePhoneCall) = 2;
  *(_QWORD *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_gatedExecuteNLOnServer) = MEMORY[0x1E0DEE9D8];
  (*(void (**)(char *, uint64_t))(v33 + 16))(v35, a3);
  outlined init with copy of ReferenceResolutionClientProtocol(a10, (uint64_t)v72);
  outlined init with copy of ReferenceResolutionClientProtocol(a11, (uint64_t)v71);
  v36 = v42;
  outlined init with copy of ReferenceResolutionClientProtocol(v42, (uint64_t)v70);
  v37 = v44;
  outlined init with copy of ReferenceResolutionClientProtocol(v44, (uint64_t)v69);
  v38 = v46;
  outlined init with copy of ReferenceResolutionClientProtocol(v46, (uint64_t)v68);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, a22, v28);
  v39 = specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(v61, v62, (uint64_t)v35, v63, v64, v65, v66, v67, v55, (uint64_t)v72, (uint64_t)v71, (_QWORD *)v60, *((uint64_t *)&v60 + 1), v53, (uint64_t)v70, v59, v58, v57, v56,
          v54,
          (uint64_t)v69,
          (uint64_t)v68,
          (uint64_t)v31,
          v51,
          v52,
          v50,
          v49);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(a22, v28);
  __swift_destroy_boxed_opaque_existential_1(v38);
  __swift_destroy_boxed_opaque_existential_1(v37);
  __swift_destroy_boxed_opaque_existential_1(v36);
  __swift_destroy_boxed_opaque_existential_1(v43);
  __swift_destroy_boxed_opaque_existential_1(v45);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v48, v47);
  return v39;
}

uint64_t partial apply for closure #1 in ServerFallbackCapableRequestProcessor.handleAceFlowOutputCandidate(_:executionContextInfo:reply:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ServerFallbackCapableRequestProcessor.handleAceFlowOutputCandidate(_:executionContextInfo:reply:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1B4E89268()
{
  return objectdestroyTm_8((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:)(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1B4E8930C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B4E89330()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ServerFallbackCapableRequestProcessor.closeServerRequest(forExecutionRequestId:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServerFallbackCapableRequestProcessor.closeServerRequest(forExecutionRequestId:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for closure #2 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #2 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t partial apply for closure #1 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #1 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToPommes(rcState:pommesCandidateId:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToPommes(rcState:pommesCandidateId:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

_QWORD *specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,unsigned __int8 a26,unsigned __int8 a27)
{
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE v71[32];
  _BYTE v72[8];
  _BYTE v73[8];
  _BYTE v74[8];
  _BYTE v75[4];
  _BYTE v76[8];

  v70 = a8;
  v69 = a7;
  v68 = a6;
  v67 = a5;
  v66 = a4;
  v51 = a3;
  v65 = a2;
  v64 = a1;
  v63 = a13;
  v62 = a16;
  v61 = a17;
  v60 = a18;
  v59 = a19;
  v57 = a20;
  v55 = a25;
  v53 = a26;
  v49 = a27;
  v54 = a24;
  v47 = a21;
  v56 = a14;
  v45 = a15;
  v44 = a12;
  v46 = a11;
  v58 = a9;
  v48 = a10;
  v29 = type metadata accessor for UserID();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v43 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for UUID();
  v34 = *(_QWORD *)(v33 - 8);
  v50 = v33;
  v52 = v34;
  MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v43 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v27 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_requestHandledOnServer) = 0;
  *(_QWORD *)(v27 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_runSiriKitExecutorProcessor) = 0;
  *(_QWORD *)(v27 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage) = 0;
  *(_BYTE *)(v27 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_isUserOnActivePhoneCall) = 2;
  *(_QWORD *)(v27 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_gatedExecuteNLOnServer) = MEMORY[0x1E0DEE9D8];
  (*(void (**)(char *, uint64_t))(v37 + 16))(v36, a3);
  outlined init with copy of ReferenceResolutionClientProtocol(a10, (uint64_t)v76);
  outlined init with copy of ReferenceResolutionClientProtocol(a11, (uint64_t)v75);
  v38 = v44;
  outlined init with copy of ReferenceResolutionClientProtocol(v44, (uint64_t)v74);
  v39 = v45;
  outlined init with copy of ReferenceResolutionClientProtocol(v45, (uint64_t)v73);
  v40 = v47;
  outlined init with copy of ReferenceResolutionClientProtocol(v47, (uint64_t)v72);
  outlined init with copy of ReferenceResolutionClientProtocol(a22, (uint64_t)v71);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, a23, v29);
  v41 = specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(v64, v65, (uint64_t)v36, v66, v67, v68, v69, v70, v58, (uint64_t)v76, (uint64_t)v75, (uint64_t)v74, (_QWORD *)v63, *((uint64_t *)&v63 + 1), v56, (uint64_t)v73, v62, v61, v60,
          v59,
          v57,
          (uint64_t)v72,
          (uint64_t)v71,
          (uint64_t)v32,
          v54,
          v55,
          v53,
          v49);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a23, v29);
  __swift_destroy_boxed_opaque_existential_1(a22);
  __swift_destroy_boxed_opaque_existential_1(v40);
  __swift_destroy_boxed_opaque_existential_1(v39);
  __swift_destroy_boxed_opaque_existential_1(v38);
  __swift_destroy_boxed_opaque_existential_1(v46);
  __swift_destroy_boxed_opaque_existential_1(v48);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v50);
  return v41;
}

uint64_t sub_1B4E89838@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1336))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4E8986C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 1344))(*a1);
}

uint64_t sub_1B4E89898@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1360))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E898C8(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 1368);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B4E898F8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1408))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E89928(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 1416))(*a1);
}

uint64_t sub_1B4E89954@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1432))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E89984(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 1440);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ObjC metadata update function for ServerFallbackCapableRequestProcessor()
{
  return type metadata accessor for ServerFallbackCapableRequestProcessor();
}

uint64_t type metadata completion function for ServerFallbackCapableRequestProcessor()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for ServerFallbackCapableRequestProcessor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.requestHandledOnServer.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1336))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.requestHandledOnServer.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1344))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.requestHandledOnServer.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1352))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.runSiriKitExecutorProcessor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1360))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.runSiriKitExecutorProcessor.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1368))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.runSiriKitExecutorProcessor.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1376))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.isUserOnActivePhoneCall.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1408))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.isUserOnActivePhoneCall.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1416))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.isUserOnActivePhoneCall.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1424))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.gatedExecuteNLOnServer.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1432))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.gatedExecuteNLOnServer.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1440))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.gatedExecuteNLOnServer.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1448))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.handleExecuteNLOnServerMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1456))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.shouldNotProceedWithServerFallback(preExecutionDecision:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1488))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.handleAceFlowOutputCandidate(_:executionContextInfo:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1496))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1504))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.handleAceServerContextUpdateCandidate(_:executionContextInfo:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1512))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1520))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.synchronizedFallbackToPommes(rcState:pommesCandidateId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1528))();
}

uint64_t sub_1B4E89B10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = MEMORY[0x1B5E3FA6C]();
  *a1 = result;
  return result;
}

uint64_t sub_1B4E89B38()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return MEMORY[0x1B5E3FA78](v0);
}

unint64_t lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A]);
  }
  return result;
}

uint64_t sub_1B4E89BB4()
{
  return Siri_Nlu_External_UserDialogAct.delegated.getter();
}

uint64_t sub_1B4E89BD8()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1B4E89C0C()
{
  return objectdestroyTm_8((void (*)(_QWORD))MEMORY[0x1E0DEEBF0]);
}

uint64_t objectdestroyTm_8(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  a1(*(_QWORD *)(v1 + 48));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t dispatch thunk of ServerFallbackDisabling.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of ServerFallbackDisabling.shouldDisableServerFallbackWithABDecision(isDomainDirected:topNlParse:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of ServerFallbackDisabling.logServerFallbackDeprecatedSelfEvent(forResultCandidateId:executionRequestId:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

uint64_t dispatch thunk of ServerFallbackDisabling.redirectFallbackAttempt(executionRequestId:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of ServerFallbackDisabling.redirectFallbackAttempt(executionRequestId:rootRequestId:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 40))();
}

_QWORD *ServerFallbackDisablingUtils.__allocating_init(selfEmitter:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)swift_allocObject();
  v4[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v4[3] = a1;
  v4[4] = a2;
  return v4;
}

id ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  id v17;
  uint64_t v19;

  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((specialized ServerFallbackDisablingUtils.shouldDisableServerFallback(isDomainDirected:topNlParse:serverFallbackReason:)(a1, a2, a3) & 1) == 0)return 0;
  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v5;
  v15[5] = a4;
  v15[6] = a5;
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:), (uint64_t)v15);
  swift_release();
  v16 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  v17 = objc_msgSend(v16, sel_shouldDisableServerFallbackDomain);

  return v17;
}

uint64_t one-time initialization function for fallbackDisabledOverride()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 2;
  static ServerFallbackDisablingUtils.fallbackDisabledOverride = (_UNKNOWN *)result;
  return result;
}

uint64_t static ServerFallbackDisablingUtils.fallbackDisabledOverride.getter()
{
  if (one-time initialization token for fallbackDisabledOverride != -1)
    swift_once();
  return swift_retain();
}

_QWORD *ServerFallbackDisablingUtils.init(selfEmitter:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v2[3] = a1;
  v2[4] = a2;
  return v2;
}

uint64_t closure #1 in ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v10;
  *v10 = v6;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v10[3] = a6;
  v10[4] = a4;
  v10[2] = a5;
  return swift_task_switch();
}

uint64_t ServerFallbackDisablingUtils.emitTriggerLoggingForServerFallbackExperiment(requestID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t ServerFallbackDisablingUtils.emitTriggerLoggingForServerFallbackExperiment(requestID:)()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;

  v1 = objc_allocWithZone(MEMORY[0x1E0CB3A28]);
  v2 = (void *)MEMORY[0x1B5E432E8](0xD000000000000024, 0x80000001B4F01490);
  v3 = objc_msgSend(v1, sel_initWithUUIDString_, v2);
  *(_QWORD *)(v0 + 40) = v3;

  if (v3)
  {
    v5 = *(_QWORD *)(v0 + 16);
    v4 = *(_QWORD *)(v0 + 24);
    v6 = objc_allocWithZone(MEMORY[0x1E0CB3A28]);
    swift_bridgeObjectRetain();
    v7 = (void *)MEMORY[0x1B5E432E8](v5, v4);
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v6, sel_initWithUUIDString_, v7);
    *(_QWORD *)(v0 + 48) = v8;

    if (v8)
    {
      v9 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 56) = v9;
      *v9 = v0;
      v9[1] = ServerFallbackDisablingUtils.emitTriggerLoggingForServerFallbackExperiment(requestID:);
      v10 = *(_QWORD *)(v0 + 32);
      v9[19] = v8;
      v9[20] = v10;
      v9[17] = 0xD000000000000026;
      v9[18] = 0x80000001B4F014C0;
      v9[16] = v3;
      return swift_task_switch();
    }

  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1B4BE6000, v13, v14, "[ServerFallbackDisablingUtils] Unable to emit trigger logging due to invalid IDs", v15, 2u);
    MEMORY[0x1B5E44758](v15, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 40);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ServerFallbackDisablingUtils.logServerFallbackDeprecatedSelfEvent(forResultCandidateId:executionRequestId:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v32;

  v6 = v5;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ServerFallbackReason();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a5;
  v21 = v20;
  outlined init with copy of ReferenceResolutionClientProtocol?(v19, (uint64_t)v14, &demangling cache variable for type metadata for ServerFallbackReason?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v21) == 1)
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E0D9ED48], v21);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for ServerFallbackReason?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v21);
  }
  v22 = specialized ServerFallbackDisablingUtils.createServerFallbackDeprecatedEvent(requestId:resultCandidateId:serverFallbackReason:)(a3, a4, a1, a2, (uint64_t)v18);
  if (v22)
  {
    v23 = v22;
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.instrumentation);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1B4BE6000, v25, v26, "[ServerFallbackDisablingUtils] ServerFallbackDeprecatedSelfEvent", v27, 2u);
      MEMORY[0x1B5E44758](v27, -1, -1);
    }

    (*(void (**))(v6 + 24))(v23);
  }
  else
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.instrumentation);
    v23 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_1B4BE6000, v23, v29, "[ServerFallbackDisablingUtils] ServerFallbackDeprecatedSelfEvent failed to generate event", v30, 2u);
      MEMORY[0x1B5E44758](v30, -1, -1);
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v21);
}

uint64_t ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  return swift_task_switch();
}

uint64_t ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:)()
{
  _QWORD *v0;
  id *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  unint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v24;
  uint64_t v25;
  os_log_type_t type;
  NSObject *log;
  uint64_t v28;
  uint64_t (*v29)(_QWORD, uint64_t);
  uint64_t v30;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = (id *)(v0 + 16);
  v2 = (void *)v0[16];
  v3 = (void *)v0[19];
  v4 = type metadata accessor for Logger();
  v0[21] = __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  v5 = v2;
  swift_bridgeObjectRetain_n();
  v6 = v3;
  v7 = v5;
  v8 = v6;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[18];
  v13 = (void *)v0[19];
  if (v11)
  {
    v14 = (void *)v0[16];
    v25 = v0[17];
    log = v9;
    v15 = swift_slowAlloc();
    v24 = (_QWORD *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    v30 = v28;
    *(_DWORD *)v15 = 138412802;
    v0[13] = v14;
    type = v10;
    v16 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v24 = v14;

    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v12, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v15 + 22) = 2112;
    v0[15] = v13;
    v17 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v24[1] = v13;

    _os_log_impl(&dword_1B4BE6000, log, type, "[ServerFallbackDisablingUtils] Attempting to emit trigger logging for codePathID: %@, namespace: %s, request: %@ ", (uint8_t *)v15, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v24, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v28, -1, -1);
    MEMORY[0x1B5E44758](v15, -1, -1);

  }
  else
  {
    v18 = *v1;

    swift_bridgeObjectRelease_n();
  }
  v20 = v0[17];
  v19 = v0[18];
  v0[22] = *(_QWORD *)(v0[20] + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v21 = swift_allocObject();
  v0[23] = v21;
  *(_OWORD *)(v21 + 16) = xmmword_1B4EE3F50;
  *(_QWORD *)(v21 + 32) = v20;
  *(_QWORD *)(v21 + 40) = v19;
  v29 = (uint64_t (*)(_QWORD, uint64_t))((int)*MEMORY[0x1E0CF1368] + MEMORY[0x1E0CF1368]);
  swift_bridgeObjectRetain();
  v22 = (_QWORD *)swift_task_alloc();
  v0[24] = v22;
  *v22 = v0;
  v22[1] = ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:);
  return v29(v0[16], v21);
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD, uint64_t);

  v2 = (_QWORD *)*v1;
  v2[25] = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  v4 = v2[19];
  v6 = (uint64_t (*)(_QWORD, uint64_t))((int)*MEMORY[0x1E0CF1360] + MEMORY[0x1E0CF1360]);
  v5 = (_QWORD *)swift_task_alloc();
  v2[26] = v5;
  *v5 = v2;
  v5[1] = ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:);
  return v6(v2[16], v4);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v17;
  void *v18;
  NSObject *log;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void **)(v0 + 152);
  v2 = *(id *)(v0 + 128);
  swift_bridgeObjectRetain_n();
  v3 = v1;
  v4 = v2;
  v5 = v3;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v0 + 144);
    v18 = *(void **)(v0 + 152);
    log = v6;
    v9 = *(void **)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 136);
    v10 = swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v21 = v20;
    *(_QWORD *)(v0 + 48) = v9;
    *(_DWORD *)v10 = 138412802;
    v12 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v11 = v9;

    *(_WORD *)(v10 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v8, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 22) = 2112;
    *(_QWORD *)(v0 + 64) = v18;
    v13 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v11[1] = v18;

    _os_log_impl(&dword_1B4BE6000, log, v7, "[ServerFallbackDisablingUtils] Emit trigger logging successfully for codePathID: %@, namespace: %s, request: %@ ", (uint8_t *)v10, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v11, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v10, -1, -1);

  }
  else
  {
    v14 = *(void **)(v0 + 152);
    v15 = *(void **)(v0 + 128);

    swift_bridgeObjectRelease_n();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  NSObject *log;
  os_log_t loga;
  uint64_t v32;

  v1 = (void *)v0[25];
  v2 = (void *)v0[19];
  v3 = (void *)v0[16];
  swift_bridgeObjectRelease();
  v4 = v3;
  swift_bridgeObjectRetain();
  v5 = v2;
  v6 = v1;
  v7 = v4;
  swift_bridgeObjectRetain();
  v8 = v5;
  v9 = v1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v28 = (id)v0[25];
    v12 = v0[18];
    v27 = (void *)v0[19];
    v26 = v0[17];
    log = v10;
    v13 = (void *)v0[16];
    v14 = swift_slowAlloc();
    v15 = (_QWORD *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    v0[9] = v13;
    v32 = v29;
    *(_DWORD *)v14 = 138413058;
    v16 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v15 = v13;

    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v12, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 22) = 2112;
    v0[11] = v27;
    v17 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v15[1] = v27;

    *(_WORD *)(v14 + 32) = 2112;
    v18 = v28;
    v19 = _swift_stdlib_bridgeErrorToNSError();
    v0[12] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v15[2] = v19;

    _os_log_impl(&dword_1B4BE6000, log, v11, "[ServerFallbackDisablingUtils] Unable to cache trial experiment IDs for codePathID: %@, namespace: %s, request: %@, error: %@", (uint8_t *)v14, 0x2Au);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v15, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v29, -1, -1);
    MEMORY[0x1B5E44758](v14, -1, -1);

  }
  else
  {
    v20 = (void *)v0[25];
    v21 = (void *)v0[19];
    v22 = (void *)v0[16];

    swift_bridgeObjectRelease_n();
  }
  v23 = v0[19];
  loga = (os_log_t)((int)*MEMORY[0x1E0CF1360] + MEMORY[0x1E0CF1360]);
  v24 = (_QWORD *)swift_task_alloc();
  v0[26] = v24;
  *v24 = v0;
  v24[1] = ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:);
  return ((uint64_t (*)(_QWORD, uint64_t))loga)(v0[16], v23);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  NSObject *log;
  uint64_t v28;

  v1 = *(void **)(v0 + 216);
  v2 = *(void **)(v0 + 152);
  v3 = *(id *)(v0 + 128);
  swift_bridgeObjectRetain();
  v4 = v2;
  v5 = v1;
  v6 = v3;
  swift_bridgeObjectRetain();
  v7 = v4;
  v8 = v1;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v25 = *(id *)(v0 + 216);
    v11 = *(_QWORD *)(v0 + 144);
    v24 = *(void **)(v0 + 152);
    v23 = *(_QWORD *)(v0 + 136);
    log = v9;
    v12 = *(void **)(v0 + 128);
    v13 = swift_slowAlloc();
    v14 = (_QWORD *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    *(_QWORD *)(v0 + 16) = v12;
    v28 = v26;
    *(_DWORD *)v13 = 138413058;
    v15 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v14 = v12;

    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v11, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 22) = 2112;
    *(_QWORD *)(v0 + 32) = v24;
    v16 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v14[1] = v24;

    *(_WORD *)(v13 + 32) = 2112;
    v17 = v25;
    v18 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 40) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v14[2] = v18;

    _os_log_impl(&dword_1B4BE6000, log, v10, "[ServerFallbackDisablingUtils] Unable to emit trigger logging for codePathID: %@, namespace: %s, request: %@, error: %@", (uint8_t *)v13, 0x2Au);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v14, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v26, -1, -1);
    MEMORY[0x1B5E44758](v13, -1, -1);

  }
  else
  {
    v19 = *(void **)(v0 + 216);
    v20 = *(void **)(v0 + 152);
    v21 = *(void **)(v0 + 128);

    swift_bridgeObjectRelease_n();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ServerFallbackDisablingUtils.redirectFallbackAttempt(executionRequestId:rcId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ServerFallbackDisablingUtils.redirectFallbackAttempt(executionRequestId:rootRequestId:rcId:)(a1, a2, 0, 0, a3, a4, a5);
}

uint64_t ServerFallbackDisablingUtils.redirectFallbackAttempt(executionRequestId:rootRequestId:rcId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, _QWORD, uint64_t);
  uint64_t v27;
  void (*v28)(char *, _QWORD, uint64_t);
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  id v33;
  unsigned int v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v57 = a5;
  v58 = a6;
  v55 = a3;
  v56 = a4;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v53 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v49 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = *MEMORY[0x1E0D9ED48];
  v24 = type metadata accessor for ServerFallbackReason();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(void (**)(char *, _QWORD, uint64_t))(v25 + 104);
  v54 = v23;
  v27 = v23;
  v28 = v26;
  v26(v18, v27, v24);
  v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56);
  v29(v18, 0, 1, v24);
  if ((specialized ServerFallbackDisablingUtils.shouldDisableServerFallback(isDomainDirected:topNlParse:serverFallbackReason:)(1, (uint64_t)v21, (uint64_t)v18) & 1) == 0)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, &demangling cache variable for type metadata for ServerFallbackReason?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    goto LABEL_11;
  }
  v30 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v13, 1, 1, v30);
  v31 = (_QWORD *)swift_allocObject();
  v51 = v7;
  v52 = a7;
  v32 = (uint64_t)v31;
  v31[2] = 0;
  v31[3] = 0;
  v31[4] = v7;
  v31[5] = a1;
  v49 = a1;
  v31[6] = a2;
  swift_retain();
  v50 = a2;
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&closure #1 in ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)partial apply, v32);
  swift_release();
  v33 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  v34 = objc_msgSend(v33, sel_shouldDisableServerFallbackDomain);

  a7 = v52;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, &demangling cache variable for type metadata for ServerFallbackReason?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  if (!v34)
  {
LABEL_11:
    v48 = type metadata accessor for ConversationCommitResult();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(a7, 1, 1, v48);
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.executor);
  v36 = Logger.logObject.getter();
  v37 = static os_log_type_t.info.getter();
  v38 = os_log_type_enabled(v36, v37);
  v39 = v55;
  v40 = v49;
  v41 = v50;
  if (v38)
  {
    v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v42 = 0;
    _os_log_impl(&dword_1B4BE6000, v36, v37, "[ServerFallbackDisablingUtils] Server fallback disabled; redirect to gibberish response",
      v42,
      2u);
    v43 = v42;
    a7 = v52;
    MEMORY[0x1B5E44758](v43, -1, -1);
  }

  v44 = v56;
  if (!v56)
  {
    swift_bridgeObjectRetain();
    v39 = v40;
    v44 = v41;
  }
  v45 = (uint64_t)v53;
  v28(v53, v54, v24);
  v29((char *)v45, 0, 1, v24);
  swift_bridgeObjectRetain();
  ServerFallbackDisablingUtils.logServerFallbackDeprecatedSelfEvent(forResultCandidateId:executionRequestId:serverFallbackReason:)(v57, v58, v39, v44, v45);
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for ServerFallbackReason?);
  static ServerFallbackDisablingUtils.createCAMFallbackConversationCommitResult()(a7);
  v46 = type metadata accessor for ConversationCommitResult();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(a7, 0, 1, v46);
}

uint64_t static ServerFallbackDisablingUtils.createCAMFallbackConversationCommitResult()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a1;
  v1 = type metadata accessor for Parse();
  v24 = *(_QWORD *)(v1 - 8);
  v25 = v1;
  MEMORY[0x1E0C80A78](v1);
  v23 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Input();
  MEMORY[0x1E0C80A78](v3);
  v22 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for HandcraftedPluginManifestEntry();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PluginAction();
  v20 = *(_QWORD *)(v9 - 8);
  v21 = v9;
  MEMORY[0x1E0C80A78](v9);
  v19 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Parse.DirectInvocation();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of static ServerFallbackDisablingUtils.createCAMFallbackConversationCommitResult());
  static CamDirectInvocationIdentifiers.fallback.getter();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v15);
  swift_bridgeObjectRelease();
  Parse.DirectInvocation.init(identifier:userData:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0D9C420], v5);
  HandcraftedPluginManifestEntry.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = v23;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v23, v14, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v16, *MEMORY[0x1E0D9C658], v25);
  Input.init(parse:)();
  v17 = v19;
  PluginAction.init(flowHandlerId:input:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v26, v17, v21);
  type metadata accessor for ConversationCommitResult();
  return swift_storeEnumTagMultiPayload();
}

uint64_t ServerFallbackDisablingUtils.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t ServerFallbackDisablingUtils.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  return swift_deallocClassInstance();
}

unint64_t protocol witness for ServerFallbackDisabling.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:) in conformance ServerFallbackDisablingUtils(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (unint64_t)ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)(a1, a2, a3, a4, a5) & 1;
}

uint64_t protocol witness for ServerFallbackDisabling.logServerFallbackDeprecatedSelfEvent(forResultCandidateId:executionRequestId:serverFallbackReason:) in conformance ServerFallbackDisablingUtils(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ServerFallbackDisablingUtils.logServerFallbackDeprecatedSelfEvent(forResultCandidateId:executionRequestId:serverFallbackReason:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for ServerFallbackDisabling.redirectFallbackAttempt(executionRequestId:rcId:) in conformance ServerFallbackDisablingUtils@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ServerFallbackDisablingUtils.redirectFallbackAttempt(executionRequestId:rootRequestId:rcId:)(a1, a2, 0, 0, a3, a4, a5);
}

uint64_t protocol witness for ServerFallbackDisabling.redirectFallbackAttempt(executionRequestId:rootRequestId:rcId:) in conformance ServerFallbackDisablingUtils@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return ServerFallbackDisablingUtils.redirectFallbackAttempt(executionRequestId:rootRequestId:rcId:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t specialized ServerFallbackDisablingUtils.shouldDisableServerFallback(isDomainDirected:topNlParse:serverFallbackReason:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  char **v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v67;
  os_log_type_t v68;
  const char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v76 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v74 = (uint64_t)&v71 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v71 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v71 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v71 - v18;
  MEMORY[0x1E0C80A78](v17);
  v72 = (uint64_t)&v71 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  v25 = objc_msgSend(v24, sel_languageCode);

  if (v25)
  {
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v28 = v27;

  }
  else
  {
    v26 = 0;
    v28 = 0xE000000000000000;
  }
  v29 = (void *)objc_opt_self();
  v75 = v26;
  v30 = (void *)MEMORY[0x1B5E432E8](v26, v28);
  v31 = &selRef_isDomainServerFallbackDisabledForLocale_;
  v73 = a1;
  if ((a1 & 1) == 0)
    v31 = &selRef_isNLServerFallbackDisabledForLocale_;
  v32 = objc_msgSend(v29, *v31, v30);

  outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)v23, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  v33 = type metadata accessor for Siri_Nlu_External_UserParse();
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v23, 1, v33) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v23, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  }
  else
  {
    v35 = Siri_Nlu_External_UserParse.isNlv3FallbackException.getter();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v23, v33);
    if ((v35 & 1) != 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
      v37 = v72;
      outlined init with copy of ReferenceResolutionClientProtocol?(v76, v72, &demangling cache variable for type metadata for ServerFallbackReason?);
      swift_bridgeObjectRetain();
      v38 = Logger.logObject.getter();
      v39 = static os_log_type_t.debug.getter();
      v40 = os_log_type_enabled(v38, v39);
      v41 = v75;
      if (v40)
      {
        v42 = swift_slowAlloc();
        v43 = swift_slowAlloc();
        v78 = v43;
        *(_DWORD *)v42 = 136315650;
        swift_bridgeObjectRetain();
        v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v28, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v42 + 12) = 1024;
        LODWORD(v77) = v73 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v42 + 18) = 2080;
        outlined init with copy of ReferenceResolutionClientProtocol?(v37, (uint64_t)v19, &demangling cache variable for type metadata for ServerFallbackReason?);
        v44 = type metadata accessor for ServerFallbackReason();
        v45 = *(_QWORD *)(v44 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v19, 1, v44) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, &demangling cache variable for type metadata for ServerFallbackReason?);
          v46 = 0;
          v47 = 0xE000000000000000;
        }
        else
        {
          v46 = ServerFallbackReason.rawValue.getter();
          v47 = v70;
          (*(void (**)(char *, uint64_t))(v45 + 8))(v19, v44);
        }
        v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v37, &demangling cache variable for type metadata for ServerFallbackReason?);
        v68 = v39;
        v69 = "[ServerFallbackDisablingUtils] shouldDisableServerFallback check for inputLocale =  %s, isDomainDirected ="
              " %{BOOL}d, serverFallbackReason = %s returns false due to fallback exception";
        goto LABEL_36;
      }
      swift_bridgeObjectRelease_n();
      v64 = v37;
LABEL_28:
      outlined destroy of ReferenceResolutionClientProtocol?(v64, &demangling cache variable for type metadata for ServerFallbackReason?);
LABEL_37:

      return 0;
    }
  }
  if ((v32 & 1) == 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)static Logger.executor);
    outlined init with copy of ReferenceResolutionClientProtocol?(v76, (uint64_t)v16, &demangling cache variable for type metadata for ServerFallbackReason?);
    swift_bridgeObjectRetain();
    v38 = Logger.logObject.getter();
    v59 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v59))
    {
      v42 = swift_slowAlloc();
      v43 = swift_slowAlloc();
      v78 = v43;
      *(_DWORD *)v42 = 136315650;
      swift_bridgeObjectRetain();
      v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v28, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v42 + 12) = 1024;
      LODWORD(v77) = v73 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 18) = 2080;
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t)v13, &demangling cache variable for type metadata for ServerFallbackReason?);
      v60 = type metadata accessor for ServerFallbackReason();
      v61 = *(_QWORD *)(v60 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v13, 1, v60) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for ServerFallbackReason?);
        v62 = 0;
        v63 = 0xE000000000000000;
      }
      else
      {
        v62 = ServerFallbackReason.rawValue.getter();
        v63 = v67;
        (*(void (**)(char *, uint64_t))(v61 + 8))(v13, v60);
      }
      v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for ServerFallbackReason?);
      v68 = v59;
      v69 = "[ServerFallbackDisablingUtils] shouldDisableServerFallback check for inputLocale =  %s, isDomainDirected = %"
            "{BOOL}d, serverFallbackReason = %s returns false due to feature flag";
LABEL_36:
      _os_log_impl(&dword_1B4BE6000, v38, v68, v69, (uint8_t *)v42, 0x1Cu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v43, -1, -1);
      MEMORY[0x1B5E44758](v42, -1, -1);
      goto LABEL_37;
    }
    swift_bridgeObjectRelease_n();
    v64 = (uint64_t)v16;
    goto LABEL_28;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v48 = type metadata accessor for Logger();
  __swift_project_value_buffer(v48, (uint64_t)static Logger.executor);
  v49 = v74;
  outlined init with copy of ReferenceResolutionClientProtocol?(v76, v74, &demangling cache variable for type metadata for ServerFallbackReason?);
  swift_bridgeObjectRetain();
  v50 = Logger.logObject.getter();
  v51 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = swift_slowAlloc();
    v53 = swift_slowAlloc();
    v78 = v53;
    *(_DWORD *)v52 = 136315650;
    swift_bridgeObjectRetain();
    v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v28, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v52 + 12) = 1024;
    LODWORD(v77) = v73 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v52 + 18) = 2080;
    outlined init with copy of ReferenceResolutionClientProtocol?(v49, (uint64_t)v8, &demangling cache variable for type metadata for ServerFallbackReason?);
    v54 = type metadata accessor for ServerFallbackReason();
    v55 = *(_QWORD *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v8, 1, v54) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for ServerFallbackReason?);
      v56 = 0;
      v57 = 0xE000000000000000;
    }
    else
    {
      v56 = ServerFallbackReason.rawValue.getter();
      v57 = v65;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v8, v54);
    }
    v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v74, &demangling cache variable for type metadata for ServerFallbackReason?);
    _os_log_impl(&dword_1B4BE6000, v50, v51, "[ServerFallbackDisablingUtils] shouldDisableServerFallback check for inputLocale =  %s, isDomainDirected = %{BOOL}d, serverFallbackReason = %s returns true", (uint8_t *)v52, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v53, -1, -1);
    MEMORY[0x1B5E44758](v52, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    outlined destroy of ReferenceResolutionClientProtocol?(v49, &demangling cache variable for type metadata for ServerFallbackReason?);
  }

  return 1;
}

id specialized ServerFallbackDisablingUtils.shouldDisableServerFallbackWithABDecision(isDomainDirected:topNlParse:serverFallbackReason:)(char a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  os_unfair_lock_s *v7;
  int v8;
  id v9;
  id v10;

  if (one-time initialization token for fallbackDisabledOverride != -1)
    swift_once();
  v6 = (unsigned __int8 *)static ServerFallbackDisablingUtils.fallbackDisabledOverride;
  v7 = (os_unfair_lock_s *)((char *)static ServerFallbackDisablingUtils.fallbackDisabledOverride + 20);
  os_unfair_lock_lock((os_unfair_lock_t)static ServerFallbackDisablingUtils.fallbackDisabledOverride + 5);
  v8 = v6[16];
  os_unfair_lock_unlock(v7);
  if (v8 != 2)
    return (id)(v8 & 1);
  if ((specialized ServerFallbackDisablingUtils.shouldDisableServerFallback(isDomainDirected:topNlParse:serverFallbackReason:)(a1 & 1, a2, a3) & 1) == 0)return 0;
  v9 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  v10 = objc_msgSend(v9, sel_shouldDisableServerFallbackDomain);

  return v10;
}

uint64_t specialized ServerFallbackDisablingUtils.mapServerFallbackReasonToLoggingReason(serverFallbackReason:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v8;

  v2 = type metadata accessor for ServerFallbackReason();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E0D9ED30])
    return 5;
  if (v6 == *MEMORY[0x1E0D9ED38])
    return 4;
  if (v6 == *MEMORY[0x1E0D9ED20])
    return 2;
  if (v6 == *MEMORY[0x1E0D9ED48])
    return 3;
  if (v6 == *MEMORY[0x1E0D9ED28])
    return 1;
  if (v6 == *MEMORY[0x1E0D9ED40])
    return 6;
  if (v6 != *MEMORY[0x1E0D9ED50])
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

void *specialized ServerFallbackDisablingUtils.createServerFallbackDeprecatedEvent(requestId:resultCandidateId:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  Class isa;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v39;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B4BE6000, v16, v17, "[ServerFallbackDisablingUtils] Invalid requestId when logging nlV3ServerFallbackDeprecated", v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);
    }

    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  v19 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v21 = objc_msgSend(v19, sel_initWithNSUUID_, isa);

  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F18]), sel_init);
  v23 = v22;
  if (v22)
  {
    objc_msgSend(v22, sel_setRequestId_, v21);
    v24 = v23;
    if (a4)
      v25 = (void *)MEMORY[0x1B5E432E8](a3, a4);
    else
      v25 = 0;
    objc_msgSend(v23, sel_setResultCandidateId_, v25);

  }
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F08]), sel_init);
  if (!v26)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_1B4BE6000, v31, v32, "[ServerFallbackDisablingUtils] Failed to create orchestrationEventWrapper when logging nlV3ServerFallbackDeprecated", v33, 2u);
      MEMORY[0x1B5E44758](v33, -1, -1);
    }

    goto LABEL_25;
  }
  v27 = v26;
  objc_msgSend(v26, sel_setEventMetadata_, v23);
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F78]), sel_init);
  if (!v28)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.executor);
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_1B4BE6000, v35, v36, "[ServerFallbackDisablingUtils] Failed to create nlV3ServerFallbackDeprecated event", v37, 2u);
      MEMORY[0x1B5E44758](v37, -1, -1);
    }

LABEL_25:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return 0;
  }
  v29 = v28;
  objc_msgSend(v28, sel_setFallbackReason_, specialized ServerFallbackDisablingUtils.mapServerFallbackReasonToLoggingReason(serverFallbackReason:)(a5));
  objc_msgSend(v27, sel_setNlv3ServerFallbackDeprecated_, v29);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v27;
}

uint64_t objectdestroyTm_9()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t closure #1 in ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)partial apply()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v6;

  v2 = *(_QWORD *)(v0 + 32);
  v6 = *(_OWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  v4 = swift_task_alloc();
  v3[2] = v4;
  *(_QWORD *)v4 = v3;
  *(_QWORD *)(v4 + 8) = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v4 + 32) = v2;
  *(_OWORD *)(v4 + 16) = v6;
  return swift_task_switch();
}

uint64_t type metadata accessor for ServerFallbackDisablingUtils()
{
  return objc_opt_self();
}

uint64_t method lookup function for ServerFallbackDisablingUtils()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ServerFallbackDisablingUtils.__allocating_init(selfEmitter:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t ServerFTMRule.__allocating_init(overrideFTMAsPerServer:)(char a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 3;
  *(_BYTE *)(result + 17) = a1;
  return result;
}

uint64_t ServerFTMRule.ruleType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ServerFTMRule.overrideFTMAsPerServer.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t ServerFTMRule.init(overrideFTMAsPerServer:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = 3;
  *(_BYTE *)(v1 + 17) = a1;
  return v1;
}

uint64_t ServerFTMRule.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t method lookup function for ServerFTMRule()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ServerFTMRule.__allocating_init(overrideFTMAsPerServer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ServerFTMRule.evaluate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

id ServerPromptData.__allocating_init(nlContext:)(uint64_t a1)
{
  objc_class *v1;
  id v3;
  id v4;
  objc_super v6;

  v3 = objc_allocWithZone(v1);
  outlined init with copy of Siri_Nlu_External_LegacyNLContext?(a1, (uint64_t)v3 + OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext);
  v6.receiver = v3;
  v6.super_class = v1;
  v4 = objc_msgSendSuper2(&v6, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  return v4;
}

id ServerPromptData.__allocating_init(serializedBackingStore:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ServerPromptData.init(serializedBackingStore:)(a1);
}

void *ServerPromptData.supportsSecureCoding.unsafeMutableAddressor()
{
  return &static ServerPromptData.supportsSecureCoding;
}

uint64_t static ServerPromptData.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t ServerPromptData.legacyNLContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Siri_Nlu_External_LegacyNLContext?(v1 + OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext, a1);
}

id ServerPromptData.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ServerPromptData.init(coder:)(a1);
}

id ServerPromptData.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void *v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void (*v20)(char *, _QWORD, uint64_t, uint64_t);
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  objc_class *v23;
  id v24;
  _BYTE v26[16];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  objc_super v32;
  _OWORD v33[2];

  v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = v1;
  v12 = (void *)MEMORY[0x1B5E432E8](0xD000000000000012, 0x80000001B4F01560);
  v13 = objc_msgSend(a1, sel_decodeObjectForKey_, v12);

  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v33, 0, sizeof(v33));
  }
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v33, (uint64_t)&v27, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!*((_QWORD *)&v28 + 1))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v27, (uint64_t *)&demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(&v11[OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext], 1, 1, v7);
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v15 = v30;
    v14 = v31;
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    outlined copy of Data._Representation(v30, v31);
    outlined copy of Data._Representation(v15, v14);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Siri_Nlu_External_LegacyNLContext and conformance Siri_Nlu_External_LegacyNLContext();
    Message.init(serializedData:extensions:partial:options:)();
    v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56);
    v20(v6, 0, 1, v7);
    outlined consume of Data._Representation(v15, v14);
    outlined consume of Data._Representation(v15, v14);
    v21 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v21(v10, v6, v7);
    v22 = &v11[OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext];
    v21(&v11[OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext], v10, v7);
    v20(v22, 0, 1, v7);
LABEL_12:

    v23 = (objc_class *)type metadata accessor for ServerPromptData();
    v32.receiver = v11;
    v32.super_class = v23;
    v24 = objc_msgSendSuper2(&v32, sel_init);

    return v24;
  }

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1B4BE6000, v17, v18, "Failed to decode the legacyNLContext", v19, 2u);
    MEMORY[0x1B5E44758](v19, -1, -1);
  }

  type metadata accessor for ServerPromptData();
  swift_deallocPartialClassInstance();
  return 0;
}

Swift::Void __swiftcall ServerPromptData.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  Class isa;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  _BYTE v15[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Siri_Nlu_External_LegacyNLContext?(v1 + OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext, (uint64_t)v5);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    isa = 0;
    v11 = 0;
    v12 = 0xF000000000000000;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v9, v5, v6);
    lazy protocol witness table accessor for type Siri_Nlu_External_LegacyNLContext and conformance Siri_Nlu_External_LegacyNLContext();
    v11 = Message.serializedData(partial:)();
    v12 = v14;
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    outlined copy of Data._Representation(v11, v12);
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v11, v12);
  }
  v13 = (void *)MEMORY[0x1B5E432E8](0xD000000000000012, 0x80000001B4F01560);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v13);
  outlined consume of Data?(v11, v12);
  swift_unknownObjectRelease();

}

id ServerPromptData.init(nlContext:)(uint64_t a1)
{
  void *v1;
  id v3;
  objc_super v5;

  outlined init with copy of Siri_Nlu_External_LegacyNLContext?(a1, (uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext);
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ServerPromptData();
  v3 = objc_msgSendSuper2(&v5, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  return v3;
}

uint64_t outlined init with copy of Siri_Nlu_External_LegacyNLContext?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id ServerPromptData.init(serializedBackingStore:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  objc_class *v14;
  id v15;
  void *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  objc_super v22;
  void *v23;
  unint64_t v24;
  _BYTE v25[24];
  uint64_t v26;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  outlined init with copy of Any(a1, (uint64_t)v25);
  v7 = v1;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v9 = (uint64_t)v23;
    v8 = v24;
    type metadata accessor for NSKeyedUnarchiver();
    static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)();
    if (!v26)
    {
      outlined consume of Data._Representation(v9, v8);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for Any?);
      goto LABEL_8;
    }
    type metadata accessor for ServerPromptData();
    if ((swift_dynamicCast() & 1) == 0)
    {
      outlined consume of Data._Representation(v9, v8);
      goto LABEL_8;
    }
    v17 = v23;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    outlined init with copy of Siri_Nlu_External_LegacyNLContext?((uint64_t)v17 + OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext, (uint64_t)v5);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
    v11 = Logger.logObject.getter();
    v19 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v11, v19))
    {
      outlined consume of Data._Representation(v9, v8);

      goto LABEL_8;
    }
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1B4BE6000, v11, v19, "Decoded the ServerPromptData", v20, 2u);
    MEMORY[0x1B5E44758](v20, -1, -1);
    outlined consume of Data._Representation(v9, v8);

  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1B4BE6000, v11, v12, "The backing store for ServerPromptData is not of type Data", v13, 2u);
      MEMORY[0x1B5E44758](v13, -1, -1);
    }
  }

LABEL_8:
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v5, (uint64_t)v7 + OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);

  v14 = (objc_class *)type metadata accessor for ServerPromptData();
  v22.receiver = v7;
  v22.super_class = v14;
  v15 = objc_msgSendSuper2(&v22, sel_init);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v15;
}

uint64_t type metadata accessor for ServerPromptData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ServerPromptData;
  if (!type metadata singleton initialization cache for ServerPromptData)
    return swift_getSingletonMetadata();
  return result;
}

void ServerPromptData.serializedBackingStore()(uint64_t *a1@<X8>)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x1E0C80C00];
  v14[0] = 0;
  v3 = objc_msgSend((id)objc_opt_self(), sel_archivedDataWithRootObject_requiringSecureCoding_error_, v1, 1, v14);
  v4 = v14[0];
  if (v3)
  {
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

  }
  else
  {
    v8 = v4;
    v9 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1B4BE6000, v11, v12, "Failed to encode the server prompt context", v13, 2u);
      MEMORY[0x1B5E44758](v13, -1, -1);
    }

    v5 = 0;
    v7 = 0xC000000000000000;
  }
  a1[3] = MEMORY[0x1E0CB0338];
  *a1 = v5;
  a1[1] = v7;
}

id ServerPromptData.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ServerPromptData.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ServerPromptData.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServerPromptData();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type Siri_Nlu_External_LegacyNLContext and conformance Siri_Nlu_External_LegacyNLContext()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Siri_Nlu_External_LegacyNLContext and conformance Siri_Nlu_External_LegacyNLContext;
  if (!lazy protocol witness table cache variable for type Siri_Nlu_External_LegacyNLContext and conformance Siri_Nlu_External_LegacyNLContext)
  {
    v1 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0D9F640], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_LegacyNLContext and conformance Siri_Nlu_External_LegacyNLContext);
  }
  return result;
}

uint64_t ObjC metadata update function for ServerPromptData()
{
  return type metadata accessor for ServerPromptData();
}

void type metadata completion function for ServerPromptData()
{
  unint64_t v0;

  type metadata accessor for Siri_Nlu_External_LegacyNLContext?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ServerPromptData()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ServerPromptData.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of ServerPromptData.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ServerPromptData.__allocating_init(nlContext:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ServerPromptData.__allocating_init(serializedBackingStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ServerPromptData.serializedBackingStore()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

void type metadata accessor for Siri_Nlu_External_LegacyNLContext?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?)
  {
    type metadata accessor for Siri_Nlu_External_LegacyNLContext();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  }
}

uint64_t ServiceBridgeDelegateXPCWrapper.wrapped.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ServiceBridgeDelegateXPCWrapper.__allocating_init(wrapping:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t ServiceBridgeDelegateXPCWrapper.init(wrapping:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return specialized ServiceBridgeDelegateXPCWrapper.init(wrapping:)(a1, v2, ObjectType, a2);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8))(v3, v1, v2, ObjectType, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(void *a1)
{
  return ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(a1, (uint64_t)&unk_1E68511E0, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:));
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 24))(v1, ObjectType, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:errorString:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = one-time initialization token for shared;
  swift_retain();
  v13 = a1;
  swift_bridgeObjectRetain();
  if (v12 != -1)
    swift_once();
  swift_beginAccess();
  v14 = static MessageBusActor.shared;
  v15 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v14;
  v16[3] = v15;
  v16[4] = v4;
  v16[5] = v13;
  v16[6] = a2;
  v16[7] = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:errorString:), (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:errorString:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:errorString:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 32))(v3, v1, v2, ObjectType, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:needsUserInput:)(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = one-time initialization token for shared;
  swift_retain();
  v10 = a1;
  if (v9 != -1)
    swift_once();
  swift_beginAccess();
  v11 = static MessageBusActor.shared;
  v12 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(v13 + 32) = v2;
  *(_QWORD *)(v13 + 40) = v10;
  *(_BYTE *)(v13 + 48) = a2 & 1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:needsUserInput:), v13);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:needsUserInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;

  *(_BYTE *)(v6 + 56) = a6;
  *(_QWORD *)(v6 + 40) = a4;
  *(_QWORD *)(v6 + 48) = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:needsUserInput:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = *(unsigned __int8 *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, ObjectType, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = one-time initialization token for shared;
  swift_retain();
  v11 = a1;
  if (v10 != -1)
    swift_once();
  swift_beginAccess();
  v12 = static MessageBusActor.shared;
  v13 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v12;
  v14[3] = v13;
  v14[4] = v3;
  v14[5] = v11;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, a3, (uint64_t)v14);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.flowPluginWillExecute(flowPluginInfo:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 72))(v1, ObjectType, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = one-time initialization token for shared;
  v13 = a3;
  swift_retain_n();
  v14 = v13;
  if (v12 != -1)
    swift_once();
  swift_beginAccess();
  v15 = static MessageBusActor.shared;
  v16 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v15;
  v17[3] = v16;
  v17[4] = a1;
  v17[5] = v14;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, a5, (uint64_t)v17);

  swift_release();
  return swift_release();
}

Swift::Void __swiftcall ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)(forResultCandidateId.value._countAndFlagsBits, (uint64_t)forResultCandidateId.value._object, (uint64_t)&unk_1E6851280, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:));
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  v6[8] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  v6 = *MEMORY[0x1E0D9ED48];
  v7 = type metadata accessor for ServerFallbackReason();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 104))(v1, v6, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v1, 0, 1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, v2, v1, ObjectType, v4);
  outlined destroy of ServerFallbackReason?(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall ServiceBridgeDelegateXPCWrapper.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)(forResultCandidateId.value._countAndFlagsBits, (uint64_t)forResultCandidateId.value._object, (uint64_t)&unk_1E68512A8, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToInfoDomainResults(forResultCandidateId:));
}

uint64_t ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v6 = v4;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v13 != -1)
    swift_once();
  swift_beginAccess();
  v14 = static MessageBusActor.shared;
  v15 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v14;
  v16[3] = v15;
  v16[4] = v6;
  v16[5] = a1;
  v16[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, a4, (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToInfoDomainResults(forResultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToInfoDomainResults(forResultCandidateId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v1, v2, ObjectType, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t @objc ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    a3 = v12;
  }
  else
  {
    v11 = 0;
  }
  v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v10, 1, 1, v13);
  v14 = one-time initialization token for shared;
  swift_retain_n();
  swift_bridgeObjectRetain();
  if (v14 != -1)
    swift_once();
  swift_beginAccess();
  v15 = static MessageBusActor.shared;
  v16 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v15;
  v17[3] = v16;
  v17[4] = a1;
  v17[5] = v11;
  v17[6] = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, a5, (uint64_t)v17);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 80))(v1, v2, ObjectType, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoffFailed(completion:)(uint64_t a1, uint64_t a2)
{
  return ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)&unk_1E68512F8, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoffFailed(completion:));
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoffFailed(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoffFailed(completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 88))(v1, v2, ObjectType, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 56) = a7;
  *(_QWORD *)(v8 + 64) = a8;
  *(_BYTE *)(v8 + 72) = a6;
  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(unsigned __int8 *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 96))(v4, v3, v1, v2, ObjectType, v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ServiceBridgeDelegateXPCWrapper.fetchSpeechInfo(reply:)(uint64_t a1, uint64_t a2)
{
  return ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)&unk_1E6851348, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fetchSpeechInfo(reply:));
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fetchSpeechInfo(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fetchSpeechInfo(reply:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 104))(v1, v2, ObjectType, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ServiceBridgeDelegateXPCWrapper.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v9 = v8;
  v28 = a5;
  v29 = a7;
  v27 = a3;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v19 != -1)
    swift_once();
  swift_beginAccess();
  v20 = static MessageBusActor.shared;
  v21 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v20;
  v22[3] = v21;
  v22[4] = v9;
  v22[5] = a1;
  v23 = v27;
  v22[6] = a2;
  v22[7] = v23;
  v24 = v28;
  v22[8] = a4;
  v22[9] = v24;
  v25 = v29;
  v22[10] = a6;
  v22[11] = v25;
  v22[12] = a8;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v17, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:), (uint64_t)v22);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v8 + 96) = v11;
  *(_QWORD *)(v8 + 104) = v12;
  *(_OWORD *)(v8 + 80) = v10;
  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 72) = a8;
  *(_QWORD *)(v8 + 48) = a5;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 40) = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 112))(v7, v6, v5, v4, v3, v2, v1, v11, ObjectType, v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.closeServerRequest(forExecutionRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.closeServerRequest(forExecutionRequestId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 120))(v1, v2, ObjectType, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ServiceBridgeDelegateXPCWrapper.fetchRecentDialogs(reply:)(uint64_t a1, uint64_t a2)
{
  return ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)&unk_1E68513C0, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fetchRecentDialogs(reply:));
}

uint64_t ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v6 = v4;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v13 != -1)
    swift_once();
  swift_beginAccess();
  v14 = static MessageBusActor.shared;
  v15 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v14;
  v16[3] = v15;
  v16[4] = v6;
  v16[5] = a1;
  v16[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, a4, (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fetchRecentDialogs(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fetchRecentDialogs(reply:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 128))(v1, v2, ObjectType, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ServiceBridgeDelegateXPCWrapper.submitExternalActivationRequest(withRequestInfo:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)(a1, a2, a3, (uint64_t)&unk_1E68513E8, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.submitExternalActivationRequest(withRequestInfo:completion:));
}

uint64_t ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v7 = v5;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = one-time initialization token for shared;
  swift_retain();
  v16 = a1;
  swift_retain();
  if (v15 != -1)
    swift_once();
  swift_beginAccess();
  v17 = static MessageBusActor.shared;
  v18 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v17;
  v19[3] = v18;
  v19[4] = v7;
  v19[5] = v16;
  v19[6] = a2;
  v19[7] = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, a5, (uint64_t)v19);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.submitExternalActivationRequest(withRequestInfo:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 24);
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 160))(v3, v1, v2, ObjectType, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ServiceBridgeDelegateXPCWrapper.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_1B4E905DC()
{
  return objectdestroyTm_10((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1B4E90674()
{
  return objectdestroy_3Tm_1();
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(a1, v4, v5, v7, v6);
}

uint64_t sub_1B4E906F4()
{
  return objectdestroyTm_10((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:errorString:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:errorString:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1B4E9078C()
{
  return objectdestroy_3Tm_1();
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:needsUserInput:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:needsUserInput:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B4E90814()
{
  return objectdestroy_3Tm_1();
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.flowPluginWillExecute(flowPluginInfo:)(a1, v4, v5, v7, v6);
}

uint64_t sub_1B4E90894()
{
  return objectdestroy_19Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B4E90920()
{
  return objectdestroy_19Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToInfoDomainResults(forResultCandidateId:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToInfoDomainResults(forResultCandidateId:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B4E909AC()
{
  return objectdestroy_19Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B4E90A38()
{
  return objectdestroy_19Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoffFailed(completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoffFailed(completion:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v10 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:)(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_1B4E90B5C()
{
  return objectdestroy_19Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fetchSpeechInfo(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.fetchSpeechInfo(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1B4E90CA4()
{
  return objectdestroy_19Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.closeServerRequest(forExecutionRequestId:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.closeServerRequest(forExecutionRequestId:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B4E90D30()
{
  return objectdestroy_19Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fetchRecentDialogs(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.fetchRecentDialogs(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B4E90DBC()
{
  return objectdestroyTm_10((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.submitExternalActivationRequest(withRequestInfo:completion:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t dispatch thunk of ServiceBridgeDelegate.submit(executionOutput:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.close(withExecutionOutput:needsUserInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.close(withExecutionOutput:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.close(withExecutionOutput:errorString:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fallbackToServer(forResultCandidateId:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fallbackToInfoDomainResults(forResultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fallbackToIntelligenceFlow(prescribedTool:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.prepareForAudioHandoffFailed(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 96))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fetchSpeechInfo(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 112))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.closeServerRequest(forExecutionRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fetchRecentDialogs(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.actionCandidatesGenerated(_:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 136))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.willExecute(executionInputInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fetchSelfReflectionDecision(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 152))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 160))();
}

uint64_t method lookup function for ServiceBridgeDelegateXPCWrapper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ServiceBridgeDelegateXPCWrapper.__allocating_init(wrapping:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_1B4E90F10()
{
  return objectdestroyTm_10((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1B4E90F24()
{
  return objectdestroy_19Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1B4E90F30()
{
  return objectdestroy_19Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t objectdestroy_43Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B4E90F8C()
{
  return objectdestroy_19Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t objectdestroy_35Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:)partial apply(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_BYTE *)(v1 + 48);
  v10 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:)(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_1B4E9106C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B4E91090()
{
  return objectdestroy_19Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1B4E9109C()
{
  return objectdestroy_19Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1B4E910A8()
{
  return objectdestroy_19Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1B4E910B4()
{
  return objectdestroy_19Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t objectdestroy_19Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_unknownObjectRelease();
  swift_release();
  a1(*(_QWORD *)(v1 + 48));
  return swift_deallocObject();
}

uint64_t sub_1B4E91100()
{
  return objectdestroy_3Tm_1();
}

uint64_t sub_1B4E91108()
{
  return objectdestroy_3Tm_1();
}

uint64_t sub_1B4E91110()
{
  return objectdestroyTm_10((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t sub_1B4E9111C()
{
  return objectdestroy_3Tm_1();
}

uint64_t objectdestroy_3Tm_1()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1B4E91164()
{
  return objectdestroyTm_10((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t objectdestroyTm_10(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_unknownObjectRelease();
  swift_release();

  a1(*(_QWORD *)(v1 + 56));
  return swift_deallocObject();
}

uint64_t outlined destroy of ServerFallbackReason?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [RecentDialog]) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for RecentDialog();
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t ServiceBridge.errorHandlingProxy.getter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for ServiceBridgeErrorHandlingProxy();
  v0 = swift_allocObject();
  v1 = swift_unknownObjectRetain();
  return specialized ServiceBridgeErrorHandlingProxy.init(wrapping:)(v1, v0);
}

uint64_t *ServiceBridgeHelper.executionBridgeXPCInterface.unsafeMutableAddressor()
{
  if (one-time initialization token for executionBridgeXPCInterface != -1)
    swift_once();
  return &static ServiceBridgeHelper.executionBridgeXPCInterface;
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray) -> ()(uint64_t a1, uint64_t a2)
{
  Class isa;

  type metadata accessor for RecentDialog();
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

uint64_t one-time initialization function for executionBridgeXPCInterface()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of static ServiceBridgeHelper.executionBridgeXPCInterface();
  static ServiceBridgeHelper.executionBridgeXPCInterface = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static ServiceBridgeHelper.executionBridgeXPCInterface()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  Class isa;
  uint64_t result;

  objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EF0F6358);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B4EE3BA0;
  v1 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSSet);
  *(_QWORD *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSSet.Type);
  *(_QWORD *)(v0 + 32) = v1;
  v2 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(_QWORD *)(v0 + 88) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSString.Type);
  *(_QWORD *)(v0 + 64) = v2;
  v3 = objc_allocWithZone(MEMORY[0x1E0C99E60]);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_initWithArray_, isa);

  result = static Set._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

id static ServiceBridgeHelper.executionBridgeXPCInterface.getter()
{
  if (one-time initialization token for executionBridgeXPCInterface != -1)
    swift_once();
  return (id)static ServiceBridgeHelper.executionBridgeXPCInterface;
}

uint64_t ServiceBridgeErrorHandlingProxy.__allocating_init(wrapping:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  swift_getObjectType();
  return specialized ServiceBridgeErrorHandlingProxy.init(wrapping:)(a1, v2);
}

uint64_t ServiceBridgeErrorHandlingProxy.wrappedProxy.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;
  _BYTE v13[32];
  _QWORD aBlock[6];

  v3 = *(void **)(a1 + 16);
  aBlock[4] = a2;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = a3;
  v4 = _Block_copy(aBlock);
  swift_release();
  v5 = objc_msgSend(v3, sel_remoteObjectProxyWithErrorHandler_, v4);
  _Block_release(v4);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)aBlock, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    v6 = v12;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1B4BE6000, v8, v9, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v10, 2u);
      MEMORY[0x1B5E44758](v10, -1, -1);
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    return 0;
  }
  return v6;
}

uint64_t ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(void (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  uint64_t v16;
  _BYTE v17[32];
  _QWORD aBlock[6];

  v5 = *(void **)(v2 + 16);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  aBlock[4] = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:);
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = &block_descriptor_23;
  v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v8 = objc_msgSend(v5, sel_remoteObjectProxyWithErrorHandler_, v7);
  _Block_release(v7);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)aBlock, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    v9 = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1B4BE6000, v11, v12, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v13, 2u);
      MEMORY[0x1B5E44758](v13, -1, -1);
    }

    lazy protocol witness table accessor for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError();
    v14 = (void *)swift_allocError();
    a1();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);

    return 0;
  }
  return v9;
}

void specialized closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *oslog;
  uint64_t v12;

  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = a1;
  v4 = a1;
  oslog = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v12 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, oslog, v5, "ServiceBridgeXPC proxy encountered an error (likely assistantd crash?) All calls to this instance of Execution Bridge will fail for the remainder of this turn: %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);

  }
  else
  {

  }
}

uint64_t closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(void *a1, uint64_t (*a2)(void *))
{
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  if (one-time initialization token for executor != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  v5 = a1;
  v6 = a1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136446210;
    v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v7, v8, "ServiceBridgeXPC proxy encountered an error (likely assistantd crash?) All calls to this instance of Execution Bridge will fail for the remainder of this turn: %{public}s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }
  else
  {

  }
  return a2(a1);
}

uint64_t ServiceBridgeErrorHandlingProxy.init(wrapping:)(uint64_t a1)
{
  uint64_t v1;

  swift_getObjectType();
  return specialized ServiceBridgeErrorHandlingProxy.init(wrapping:)(a1, v1);
}

void ServiceBridgeErrorHandlingProxy.submit(executionOutput:completion:)(uint64_t a1, uint64_t (*a2)(), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  void *v19;
  uint64_t aBlock;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t (*v24)();
  uint64_t v25;
  _BYTE v26[32];

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v8 = *(void **)(v3 + 16);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.submit(executionOutput:completion:);
  *(_QWORD *)(v9 + 24) = v7;
  v24 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v25 = v9;
  v10 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v21 = 1107296256;
  v22 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v23 = &block_descriptor_10;
  v11 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  v12 = objc_msgSend(v8, sel_remoteObjectProxyWithErrorHandler_, v11);
  _Block_release(v11);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v26, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    swift_release();
    swift_release();
    v24 = a2;
    v25 = a3;
    aBlock = v10;
    v21 = 1107296256;
    v22 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    v23 = &block_descriptor_13;
    v13 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v19, sel_submitWithExecutionOutput_completion_, a1, v13);
    swift_unknownObjectRelease();
    _Block_release(v13);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1B4BE6000, v15, v16, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v17, 2u);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }

    lazy protocol witness table accessor for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError();
    v18 = (void *)swift_allocError();
    ((void (*)(_QWORD, void *))a2)(0, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);

    swift_release();
    swift_release();
  }
}

uint64_t ServiceBridgeErrorHandlingProxy.close(withExecutionOutput:)(uint64_t a1)
{
  return ServiceBridgeErrorHandlingProxy.close(withExecutionOutput:)(a1, (uint64_t)specialized closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:), (uint64_t)&block_descriptor_16, (SEL *)&selRef_closeWithExecutionOutput_);
}

uint64_t ServiceBridgeErrorHandlingProxy.close(withExecutionOutput:errorString:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  _QWORD aBlock[6];
  _BYTE v18[32];

  v7 = *(void **)(v3 + 16);
  aBlock[4] = specialized closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = &block_descriptor_19;
  v8 = _Block_copy(aBlock);
  swift_release();
  v9 = objc_msgSend(v7, sel_remoteObjectProxyWithErrorHandler_, v8);
  _Block_release(v8);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v18, (uint64_t)aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    v10 = (void *)MEMORY[0x1B5E432E8](a2, a3);
    objc_msgSend(v16, sel_closeWithExecutionOutput_errorString_, a1, v10);

    return swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
}

uint64_t ServiceBridgeErrorHandlingProxy.close(withExecutionOutput:needsUserInput:)(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v5;
  void *v6;
  id v7;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  _QWORD aBlock[6];
  _BYTE v15[32];

  v5 = *(void **)(v2 + 16);
  aBlock[4] = specialized closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = &block_descriptor_22_1;
  v6 = _Block_copy(aBlock);
  swift_release();
  v7 = objc_msgSend(v5, sel_remoteObjectProxyWithErrorHandler_, v6);
  _Block_release(v6);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v15, (uint64_t)aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    objc_msgSend(v13, sel_closeWithExecutionOutput_needsUserInput_, a1, a2 & 1);
    return swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1B4BE6000, v10, v11, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v12, 2u);
      MEMORY[0x1B5E44758](v12, -1, -1);
    }

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
}

uint64_t ServiceBridgeErrorHandlingProxy.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1)
{
  return ServiceBridgeErrorHandlingProxy.close(withExecutionOutput:)(a1, (uint64_t)specialized closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:), (uint64_t)&block_descriptor_25_0, (SEL *)&selRef_flowPluginWillExecuteWithFlowPluginInfo_);
}

uint64_t ServiceBridgeErrorHandlingProxy.close(withExecutionOutput:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v4;
  void *v7;
  void *v8;
  id v9;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  _QWORD aBlock[6];
  _BYTE v17[32];

  v7 = *(void **)(v4 + 16);
  aBlock[4] = a2;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = a3;
  v8 = _Block_copy(aBlock);
  swift_release();
  v9 = objc_msgSend(v7, sel_remoteObjectProxyWithErrorHandler_, v8);
  _Block_release(v8);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v17, (uint64_t)aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    objc_msgSend(v15, *a4, a1);
    return swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1B4BE6000, v12, v13, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v14, 2u);
      MEMORY[0x1B5E44758](v14, -1, -1);
    }

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
}

uint64_t @objc ServiceBridgeErrorHandlingProxy.close(withExecutionOutput:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  id v9;
  uint64_t v10;
  void *v11;

  v9 = a3;
  v10 = swift_retain();
  v11 = (void *)specialized ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(v10, a4, a5);
  if (v11)
  {
    objc_msgSend(v11, *a6, v9);

    swift_release();
    return swift_unknownObjectRelease();
  }
  else
  {

    return swift_release();
  }
}

Swift::Void __swiftcall ServiceBridgeErrorHandlingProxy.fallbackToServer(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  ServiceBridgeErrorHandlingProxy.fallbackToServer(forResultCandidateId:)(forResultCandidateId.value._countAndFlagsBits, (uint64_t)forResultCandidateId.value._object, (uint64_t)specialized closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:), (uint64_t)&block_descriptor_28, (SEL *)&selRef_fallbackToServerForResultCandidateId_);
}

Swift::Void __swiftcall ServiceBridgeErrorHandlingProxy.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  ServiceBridgeErrorHandlingProxy.fallbackToServer(forResultCandidateId:)(forResultCandidateId.value._countAndFlagsBits, (uint64_t)forResultCandidateId.value._object, (uint64_t)specialized closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:), (uint64_t)&block_descriptor_31, (SEL *)&selRef_fallbackToInfoDomainResultsForResultCandidateId_);
}

uint64_t ServiceBridgeErrorHandlingProxy.fallbackToServer(forResultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v5;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v18;
  _QWORD aBlock[6];
  _BYTE v20[32];

  v9 = *(void **)(v5 + 16);
  aBlock[4] = a3;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = a4;
  v10 = _Block_copy(aBlock);
  swift_release();
  v11 = objc_msgSend(v9, sel_remoteObjectProxyWithErrorHandler_, v10);
  _Block_release(v10);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v20, (uint64_t)aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    if (a2)
      v12 = (void *)MEMORY[0x1B5E432E8](a1, a2);
    else
      v12 = 0;
    objc_msgSend(v18, *a5, v12);

    return swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1B4BE6000, v14, v15, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v16, 2u);
      MEMORY[0x1B5E44758](v16, -1, -1);
    }

    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
}

uint64_t @objc ServiceBridgeErrorHandlingProxy.fallbackToServer(forResultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  if (a3)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v12 = swift_retain();
  v13 = specialized ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(v12, a4, a5);
  if (v13)
  {
    v14 = (void *)v13;
    if (v11)
      v15 = (void *)MEMORY[0x1B5E432E8](v9, v11);
    else
      v15 = 0;
    objc_msgSend(v14, *a6, v15);
    swift_release();
    swift_bridgeObjectRelease();

    return swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

void ServiceBridgeErrorHandlingProxy.prepareForAudioHandoff(completion:)(uint64_t (*a1)(), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t aBlock;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t (*v21)();
  uint64_t v22;
  _BYTE v23[32];

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = *(void **)(v2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.prepareForAudioHandoff(completion:);
  *(_QWORD *)(v7 + 24) = v5;
  v21 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v22 = v7;
  v8 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v18 = 1107296256;
  v19 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v20 = &block_descriptor_41_0;
  v9 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  v10 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v9);
  _Block_release(v9);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v23, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    swift_release();
    swift_release();
    v21 = a1;
    v22 = a2;
    aBlock = v8;
    v18 = 1107296256;
    v19 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    v20 = &block_descriptor_44;
    v11 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v16, sel_prepareForAudioHandoffWithCompletion_, v11);
    swift_unknownObjectRelease();
    _Block_release(v11);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    ((void (*)(_QWORD))a1)(0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    swift_release();
    swift_release();
  }
}

void ServiceBridgeErrorHandlingProxy.prepareForAudioHandoffFailed(completion:)(void (*a1)(void), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t aBlock;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t (*v21)();
  uint64_t v22;
  _BYTE v23[32];

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = *(void **)(v2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for thunk for @callee_guaranteed (@guaranteed SMTTCUPackageMutating?) -> ();
  *(_QWORD *)(v7 + 24) = v5;
  v21 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v22 = v7;
  v8 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v18 = 1107296256;
  v19 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v20 = &block_descriptor_54;
  v9 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  v10 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v9);
  _Block_release(v9);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v23, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    swift_release();
    swift_release();
    v21 = (uint64_t (*)())a1;
    v22 = a2;
    aBlock = v8;
    v18 = 1107296256;
    v19 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v20 = &block_descriptor_57;
    v11 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v16, sel_prepareForAudioHandoffFailedWithCompletion_, v11);
    swift_unknownObjectRelease();
    _Block_release(v11);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    a1();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    swift_release();
    swift_release();
  }
}

void ServiceBridgeErrorHandlingProxy.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, char a2, uint64_t (*a3)(), uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  Class isa;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t aBlock;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t (*v25)();
  uint64_t v26;
  _BYTE v27[32];

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a3;
  *(_QWORD *)(v8 + 24) = a4;
  v9 = *(void **)(v4 + 16);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchContexts(for:includesNearByDevices:completion:);
  *(_QWORD *)(v10 + 24) = v8;
  v25 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v26 = v10;
  v11 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v22 = 1107296256;
  v23 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v24 = &block_descriptor_67;
  v12 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  v13 = objc_msgSend(v9, sel_remoteObjectProxyWithErrorHandler_, v12);
  _Block_release(v12);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v27, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    swift_release();
    swift_release();
    isa = Set._bridgeToObjectiveC()().super.isa;
    v25 = a3;
    v26 = a4;
    aBlock = v11;
    v22 = 1107296256;
    v23 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [AFServiceDeviceContext]?) -> ();
    v24 = &block_descriptor_70;
    v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v20, sel_fetchContextsFor_includesNearByDevices_completion_, isa, a2 & 1, v15);
    swift_unknownObjectRelease();
    _Block_release(v15);

  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1B4BE6000, v17, v18, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v19, 2u);
      MEMORY[0x1B5E44758](v19, -1, -1);
    }

    ((void (*)(_QWORD))a3)(0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    swift_release();
    swift_release();
  }
}

void ServiceBridgeErrorHandlingProxy.fetchSpeechInfo(reply:)(uint64_t (*a1)(), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t aBlock;
  uint64_t v18;
  void (*v19)(uint64_t, void *);
  void *v20;
  uint64_t (*v21)();
  uint64_t v22;
  _BYTE v23[32];

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = *(void **)(v2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchSpeechInfo(reply:);
  *(_QWORD *)(v7 + 24) = v5;
  v21 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v22 = v7;
  v8 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v18 = 1107296256;
  v19 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v20 = &block_descriptor_80_0;
  v9 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  v10 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v9);
  _Block_release(v9);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v23, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    swift_release();
    swift_release();
    v21 = a1;
    v22 = a2;
    aBlock = v8;
    v18 = 1107296256;
    v19 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
    v20 = &block_descriptor_83_0;
    v11 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v16, sel_fetchSpeechInfoWithReply_, v11);
    swift_unknownObjectRelease();
    _Block_release(v11);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    ((void (*)(_QWORD))a1)(0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    swift_release();
    swift_release();
  }
}

void ServiceBridgeErrorHandlingProxy.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(), uint64_t a8)
{
  uint64_t v8;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v30;
  uint64_t aBlock;
  uint64_t v32;
  void (*v33)(uint64_t, void *);
  void *v34;
  uint64_t (*v35)();
  uint64_t v36;
  _BYTE v37[32];

  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a7;
  *(_QWORD *)(v15 + 24) = a8;
  v16 = *(void **)(v8 + 16);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchSpeechInfo(reply:);
  *(_QWORD *)(v17 + 24) = v15;
  v35 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v36 = v17;
  aBlock = MEMORY[0x1E0C809B0];
  v32 = 1107296256;
  v33 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v34 = &block_descriptor_93;
  v18 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  v19 = objc_msgSend(v16, sel_remoteObjectProxyWithErrorHandler_, v18);
  _Block_release(v18);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v37, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    swift_release();
    swift_release();
    v20 = (void *)MEMORY[0x1B5E432E8](a1, a2);
    v21 = (void *)MEMORY[0x1B5E432E8](a3, a4);
    v22 = (void *)MEMORY[0x1B5E432E8](a5, a6);
    v35 = a7;
    v36 = a8;
    aBlock = MEMORY[0x1E0C809B0];
    v32 = 1107296256;
    v33 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
    v34 = &block_descriptor_96;
    v23 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v30, sel_retriggerOriginalRequestWithExecutionRequestId_forUserId_givenCurrentExecutionRequestId_reply_, v20, v21, v22, v23);
    swift_unknownObjectRelease();
    _Block_release(v23);

  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1B4BE6000, v25, v26, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v27, 2u);
      MEMORY[0x1B5E44758](v27, -1, -1);
    }

    ((void (*)(_QWORD))a7)(0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    swift_release();
    swift_release();
  }
}

Swift::Void __swiftcall ServiceBridgeErrorHandlingProxy.closeServerRequest(forExecutionRequestId:)(Swift::String forExecutionRequestId)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  _QWORD aBlock[6];
  _BYTE v14[32];

  object = forExecutionRequestId._object;
  countAndFlagsBits = forExecutionRequestId._countAndFlagsBits;
  v4 = *(void **)(v1 + 16);
  aBlock[4] = specialized closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = &block_descriptor_99_0;
  v5 = _Block_copy(aBlock);
  swift_release();
  v6 = objc_msgSend(v4, sel_remoteObjectProxyWithErrorHandler_, v5);
  _Block_release(v5);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v14, (uint64_t)aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    v7 = (void *)MEMORY[0x1B5E432E8](countAndFlagsBits, object);
    objc_msgSend(v12, sel_closeServerRequestForExecutionRequestId_, v7);

    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1B4BE6000, v9, v10, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v11, 2u);
      MEMORY[0x1B5E44758](v11, -1, -1);
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
}

void ServiceBridgeErrorHandlingProxy.fetchRecentDialogs(reply:)(uint64_t (*a1)(), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t aBlock;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t (*v21)();
  uint64_t v22;
  _BYTE v23[32];

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = *(void **)(v2 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchRecentDialogs(reply:);
  *(_QWORD *)(v7 + 24) = v5;
  v21 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v22 = v7;
  v8 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v18 = 1107296256;
  v19 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v20 = &block_descriptor_109;
  v9 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  v10 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v9);
  _Block_release(v9);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v23, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    swift_release();
    swift_release();
    v21 = a1;
    v22 = a2;
    aBlock = v8;
    v18 = 1107296256;
    v19 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [RecentDialog]) -> ();
    v20 = &block_descriptor_112_0;
    v11 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v16, sel_fetchRecentDialogsWithReply_, v11);
    swift_unknownObjectRelease();
    _Block_release(v11);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    ((void (*)(_QWORD))a1)(MEMORY[0x1E0DEE9D8]);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    swift_release();
    swift_release();
  }
}

uint64_t @objc ServiceBridgeErrorHandlingProxy.prepareForAudioHandoff(completion:)(int a1, int a2, void *aBlock, void (*a4)(uint64_t, void *))
{
  void *v5;
  uint64_t v6;

  v5 = _Block_copy(aBlock);
  _Block_copy(v5);
  v6 = swift_retain();
  a4(v6, v5);
  _Block_release(v5);
  _Block_release(v5);
  return swift_release();
}

void ServiceBridgeErrorHandlingProxy.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t (*a2)(), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  void *v19;
  uint64_t aBlock;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t (*v24)();
  uint64_t v25;
  _BYTE v26[32];

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v8 = *(void **)(v3 + 16);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.submitExternalActivationRequest(withRequestInfo:completion:);
  *(_QWORD *)(v9 + 24) = v7;
  v24 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v25 = v9;
  v10 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v21 = 1107296256;
  v22 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v23 = &block_descriptor_122;
  v11 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  v12 = objc_msgSend(v8, sel_remoteObjectProxyWithErrorHandler_, v11);
  _Block_release(v11);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v26, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if ((swift_dynamicCast() & 1) != 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    swift_release();
    swift_release();
    v24 = a2;
    v25 = a3;
    aBlock = v10;
    v21 = 1107296256;
    v22 = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    v23 = &block_descriptor_125_0;
    v13 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v19, sel_submitExternalActivationRequestWithRequestInfo_completion_, a1, v13);
    swift_unknownObjectRelease();
    _Block_release(v13);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1B4BE6000, v15, v16, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v17, 2u);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }

    lazy protocol witness table accessor for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError();
    v18 = (void *)swift_allocError();
    ((void (*)(_QWORD, void *))a2)(0, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);

    swift_release();
    swift_release();
  }
}

uint64_t @objc ServiceBridgeErrorHandlingProxy.submit(executionOutput:completion:)(uint64_t a1, int a2, void *a3, void *aBlock, void (*a5)(id, uint64_t, void *))
{
  void *v8;
  id v9;

  v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  v9 = a3;
  swift_retain();
  a5(v9, a1, v8);
  _Block_release(v8);
  _Block_release(v8);

  return swift_release();
}

unint64_t ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError.description.getter()
{
  return 0xD000000000000025;
}

uint64_t static ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError.== infix(_:_:)()
{
  return 1;
}

void ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError()
{
  return 0xD000000000000025;
}

uint64_t ServiceBridgeErrorHandlingProxy.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

uint64_t ServiceBridgeErrorHandlingProxy.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ServiceBridgeErrorHandlingProxy()
{
  return objc_opt_self();
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.init(wrapping:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  Swift::String v5;
  Swift::String v6;

  v3 = swift_dynamicCastObjCProtocolConditional();
  if (v3)
  {
    *(_QWORD *)(a2 + 16) = v3;
    return a2;
  }
  else
  {
    _StringGuts.grow(_:)(67);
    v5._object = (void *)0x80000001B4F016E0;
    v5._countAndFlagsBits = 0xD000000000000041;
    String.append(_:)(v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
    v6._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0, 0xE000000000000000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/MessageBusIntegration/ServiceBridgeXPC.swift", 113, 2, 197);
    __break(1u);
  }
  return result;
}

uint64_t sub_1B4E948F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(void *a1)
{
  uint64_t v1;

  return closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(a1, *(uint64_t (**)(void *))(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError;
  if (!lazy protocol witness table cache variable for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError, &type metadata for ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError;
  if (!lazy protocol witness table cache variable for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError, &type metadata for ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError);
  }
  return result;
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.submit(executionOutput:completion:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 16))(0, a1);
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.prepareForAudioHandoff(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchContexts(for:includesNearByDevices:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchRecentDialogs(reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(MEMORY[0x1E0DEE9D8]);
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 16))(0, a1);
}

ValueMetadata *type metadata accessor for ServiceBridgeHelper()
{
  return &type metadata for ServiceBridgeHelper;
}

uint64_t method lookup function for ServiceBridgeErrorHandlingProxy()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ServiceBridgeErrorHandlingProxy.__allocating_init(wrapping:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t storeEnumTagSinglePayload for ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4E94AD4 + 4 * byte_1B4EEF690[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4E94AF4 + 4 * byte_1B4EEF695[v4]))();
}

_BYTE *sub_1B4E94AD4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4E94AF4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4E94AFC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4E94B04(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4E94B0C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4E94B14(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError()
{
  return &type metadata for ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError;
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.submit(executionOutput:completion:)(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  void *v19;
  void *v21;
  uint64_t aBlock;
  uint64_t v23;
  void *v24;
  void *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  _BYTE v28[32];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned SABaseCommand?, @unowned NSError?) -> ();
  *(_QWORD *)(v7 + 24) = v6;
  v8 = *(void **)(a2 + 16);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = closure #1 in ServiceBridgeErrorHandlingProxy.submit(executionOutput:completion:)partial apply;
  *(_QWORD *)(v9 + 24) = v7;
  v26 = (void (*)(uint64_t, uint64_t))closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v27 = v9;
  v10 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v23 = 1107296256;
  v24 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v25 = &block_descriptor_280;
  v11 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a3);
  swift_retain();
  swift_release();
  v12 = objc_msgSend(v8, sel_remoteObjectProxyWithErrorHandler_, v11);
  _Block_release(v11);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v28, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    swift_release();
    swift_release();
    v26 = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned SABaseCommand?, @unowned NSError?) -> ();
    v27 = v6;
    aBlock = v10;
    v23 = 1107296256;
    v24 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    v25 = &block_descriptor_283;
    v13 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v21, sel_submitWithExecutionOutput_completion_, a1, v13);
    swift_unknownObjectRelease();
    _Block_release(v13);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1B4BE6000, v15, v16, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v17, 2u);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }

    lazy protocol witness table accessor for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError();
    v18 = (void *)swift_allocError();
    v19 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(_QWORD, _QWORD, void *))a3)[2](a3, 0, v19);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    swift_release_n();
  }
  return swift_release();
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.prepareForAudioHandoff(completion:)(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v17;
  uint64_t aBlock;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t (*v22)(char);
  uint64_t v23;
  _BYTE v24[32];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = _s10ObjectiveC8ObjCBoolVIeyBhy_SbIeghy_TRTA_0;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(void **)(a1 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = closure #1 in ServiceBridgeErrorHandlingProxy.prepareForAudioHandoff(completion:)partial apply;
  *(_QWORD *)(v7 + 24) = v5;
  v22 = (uint64_t (*)(char))closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v23 = v7;
  v8 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v19 = 1107296256;
  v20 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v21 = &block_descriptor_245;
  v9 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a2);
  swift_retain();
  swift_release();
  v10 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v9);
  _Block_release(v9);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v24, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    swift_release();
    swift_release();
    v22 = _s10ObjectiveC8ObjCBoolVIeyBhy_SbIeghy_TRTA_0;
    v23 = v4;
    aBlock = v8;
    v19 = 1107296256;
    v20 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    v21 = &block_descriptor_248;
    v11 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v17, sel_prepareForAudioHandoffWithCompletion_, v11);
    swift_unknownObjectRelease();
    _Block_release(v11);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    a2[2](a2, 0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    swift_release_n();
  }
  return swift_release();
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.prepareForAudioHandoffFailed(completion:)(uint64_t a1, void (**a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v17;
  uint64_t aBlock;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t (*v22)();
  uint64_t v23;
  _BYTE v24[32];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ();
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(void **)(a1 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = closure #1 in ServiceBridgeErrorHandlingProxy.prepareForAudioHandoffFailed(completion:)partial apply;
  *(_QWORD *)(v7 + 24) = v5;
  v22 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v23 = v7;
  v8 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v19 = 1107296256;
  v20 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v21 = &block_descriptor_228;
  v9 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a2);
  swift_retain();
  swift_release();
  v10 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v9);
  _Block_release(v9);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v24, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    swift_release();
    swift_release();
    v22 = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ();
    v23 = v4;
    aBlock = v8;
    v19 = 1107296256;
    v20 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v21 = &block_descriptor_231;
    v11 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v17, sel_prepareForAudioHandoffFailedWithCompletion_, v11);
    swift_unknownObjectRelease();
    _Block_release(v11);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    a2[2](a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    swift_release_n();
  }
  return swift_release();
}

void specialized ServiceBridgeErrorHandlingProxy.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, char a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  Class isa;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t aBlock;
  uint64_t v22;
  void *v23;
  void *v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  _BYTE v27[32];

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a4;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray?) -> ();
  *(_QWORD *)(v8 + 24) = v7;
  v9 = *(void **)(a3 + 16);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchSpeechInfo(reply:);
  *(_QWORD *)(v10 + 24) = v8;
  v25 = (void (*)(uint64_t))closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v26 = v10;
  v11 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v22 = 1107296256;
  v23 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v24 = &block_descriptor_211;
  v12 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a4);
  swift_retain();
  swift_release();
  v13 = objc_msgSend(v9, sel_remoteObjectProxyWithErrorHandler_, v12);
  _Block_release(v12);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v27, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    swift_release();
    swift_release();
    isa = Set._bridgeToObjectiveC()().super.isa;
    v25 = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray?) -> ();
    v26 = v7;
    aBlock = v11;
    v22 = 1107296256;
    v23 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [AFServiceDeviceContext]?) -> ();
    v24 = &block_descriptor_214_0;
    v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v20, sel_fetchContextsFor_includesNearByDevices_completion_, isa, a2 & 1, v15);
    swift_unknownObjectRelease();
    _Block_release(v15);
    swift_release();

  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1B4BE6000, v17, v18, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v19, 2u);
      MEMORY[0x1B5E44758](v19, -1, -1);
    }

    a4[2](a4, 0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
    swift_release_n();
    swift_release();
  }
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.fetchSpeechInfo(reply:)(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v17;
  uint64_t aBlock;
  uint64_t v19;
  void (*v20)(uint64_t, void *);
  void *v21;
  uint64_t (*v22)();
  uint64_t v23;
  _BYTE v24[32];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = _s14SiriKitRuntime27ConversationCanHandleResultCIeyBhy_ACIeghg_TRTA_0;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(void **)(a1 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchSpeechInfo(reply:);
  *(_QWORD *)(v7 + 24) = v5;
  v22 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v23 = v7;
  v8 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v19 = 1107296256;
  v20 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v21 = &block_descriptor_194;
  v9 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a2);
  swift_retain();
  swift_release();
  v10 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v9);
  _Block_release(v9);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v24, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    swift_release();
    swift_release();
    v22 = _s14SiriKitRuntime27ConversationCanHandleResultCIeyBhy_ACIeghg_TRTA_0;
    v23 = v4;
    aBlock = v8;
    v19 = 1107296256;
    v20 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
    v21 = &block_descriptor_197;
    v11 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v17, sel_fetchSpeechInfoWithReply_, v11);
    swift_unknownObjectRelease();
    _Block_release(v11);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    a2[2](a2, 0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    swift_release_n();
  }
  return swift_release();
}

void specialized ServiceBridgeErrorHandlingProxy.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(_QWORD, _QWORD))
{
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v31;
  uint64_t aBlock;
  uint64_t v33;
  void (*v34)(uint64_t, void *);
  void *v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  _BYTE v38[32];

  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a8;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSError?) -> ();
  *(_QWORD *)(v14 + 24) = v13;
  v15 = *(void **)(a7 + 16);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchSpeechInfo(reply:);
  *(_QWORD *)(v16 + 24) = v14;
  v36 = (void (*)(uint64_t))closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v37 = v16;
  v17 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v33 = 1107296256;
  v34 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v35 = &block_descriptor_177;
  v18 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a8);
  swift_retain();
  swift_release();
  v19 = objc_msgSend(v15, sel_remoteObjectProxyWithErrorHandler_, v18);
  _Block_release(v18);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v38, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    swift_release();
    swift_release();
    v20 = (void *)MEMORY[0x1B5E432E8](a1, a2);
    v21 = (void *)MEMORY[0x1B5E432E8](a3, a4);
    v22 = (void *)MEMORY[0x1B5E432E8](a5, a6);
    v36 = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSError?) -> ();
    v37 = v13;
    aBlock = v17;
    v33 = 1107296256;
    v34 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
    v35 = &block_descriptor_180;
    v23 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v31, sel_retriggerOriginalRequestWithExecutionRequestId_forUserId_givenCurrentExecutionRequestId_reply_, v20, v21, v22, v23);
    swift_unknownObjectRelease();
    _Block_release(v23);
    swift_release();

  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1B4BE6000, v25, v26, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v27, 2u);
      MEMORY[0x1B5E44758](v27, -1, -1);
    }

    a8[2](a8, 0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    swift_release_n();
    swift_release();
  }
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.fetchRecentDialogs(reply:)(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  Class isa;
  void *v18;
  uint64_t aBlock;
  uint64_t v20;
  void *v21;
  void *v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  _BYTE v25[32];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray) -> ();
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(void **)(a1 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = closure #1 in ServiceBridgeErrorHandlingProxy.fetchRecentDialogs(reply:)partial apply;
  *(_QWORD *)(v7 + 24) = v5;
  v23 = (void (*)(uint64_t))closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v24 = v7;
  v8 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v20 = 1107296256;
  v21 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v22 = &block_descriptor_157;
  v9 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a2);
  swift_retain();
  swift_release();
  v10 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v9);
  _Block_release(v9);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v25, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    swift_release();
    swift_release();
    v23 = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray) -> ();
    v24 = v4;
    aBlock = v8;
    v20 = 1107296256;
    v21 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [RecentDialog]) -> ();
    v22 = &block_descriptor_160;
    v11 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v18, sel_fetchRecentDialogsWithReply_, v11);
    swift_unknownObjectRelease();
    _Block_release(v11);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    type metadata accessor for RecentDialog();
    isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(_QWORD, Class))a2)[2](a2, isa);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    swift_release_n();
  }
  return swift_release();
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  void *v19;
  void *v21;
  uint64_t aBlock;
  uint64_t v23;
  void *v24;
  void *v25;
  void (*v26)(char, uint64_t);
  uint64_t v27;
  _BYTE v28[32];

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a3;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool, @unowned NSError?) -> ();
  *(_QWORD *)(v7 + 24) = v6;
  v8 = *(void **)(a2 + 16);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = closure #1 in ServiceBridgeErrorHandlingProxy.submitExternalActivationRequest(withRequestInfo:completion:)partial apply;
  *(_QWORD *)(v9 + 24) = v7;
  v26 = (void (*)(char, uint64_t))closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  v27 = v9;
  v10 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v23 = 1107296256;
  v24 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v25 = &block_descriptor_140;
  v11 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a3);
  swift_retain();
  swift_release();
  v12 = objc_msgSend(v8, sel_remoteObjectProxyWithErrorHandler_, v11);
  _Block_release(v11);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v28, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    swift_release();
    swift_release();
    v26 = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool, @unowned NSError?) -> ();
    v27 = v6;
    aBlock = v10;
    v23 = 1107296256;
    v24 = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    v25 = &block_descriptor_143;
    v13 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v21, sel_submitExternalActivationRequestWithRequestInfo_completion_, a1, v13);
    swift_unknownObjectRelease();
    _Block_release(v13);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1B4BE6000, v15, v16, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v17, 2u);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }

    lazy protocol witness table accessor for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError();
    v18 = (void *)swift_allocError();
    v19 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(_QWORD, _QWORD, void *))a3)[2](a3, 0, v19);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    swift_release_n();
  }
  return swift_release();
}

uint64_t sub_1B4E96404()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t _s10ObjectiveC8ObjCBoolVIeyBhy_SbIeghy_TRTA_0(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

SiriKitRuntime::SettingsAffinityScorer __swiftcall SettingsAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::SettingsAffinityScorer result;

  v0 = (void *)0x80000001B4EF6B50;
  v1 = 0xD000000000000029;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

void one-time initialization function for kSupportedCommonSettingIdentifierNamespaces()
{
  static SettingsAffinityScorer.kSupportedCommonSettingIdentifierNamespaces = (uint64_t)&outlined read-only object #0 of one-time initialization function for kSupportedCommonSettingIdentifierNamespaces;
}

uint64_t *SettingsAffinityScorer.kSupportedCommonSettingIdentifierNamespaces.unsafeMutableAddressor()
{
  if (one-time initialization token for kSupportedCommonSettingIdentifierNamespaces != -1)
    swift_once();
  return &static SettingsAffinityScorer.kSupportedCommonSettingIdentifierNamespaces;
}

uint64_t static SettingsAffinityScorer.kSupportedCommonSettingIdentifierNamespaces.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kSupportedCommonSettingIdentifierNamespaces);
}

void one-time initialization function for kSupportedUserEntityNamesIdentifierNamespaces()
{
  static SettingsAffinityScorer.kSupportedUserEntityNamesIdentifierNamespaces = (uint64_t)&outlined read-only object #0 of one-time initialization function for kSupportedUserEntityNamesIdentifierNamespaces;
}

uint64_t *SettingsAffinityScorer.kSupportedUserEntityNamesIdentifierNamespaces.unsafeMutableAddressor()
{
  if (one-time initialization token for kSupportedUserEntityNamesIdentifierNamespaces != -1)
    swift_once();
  return &static SettingsAffinityScorer.kSupportedUserEntityNamesIdentifierNamespaces;
}

uint64_t static SettingsAffinityScorer.kSupportedUserEntityNamesIdentifierNamespaces.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kSupportedUserEntityNamesIdentifierNamespaces);
}

const char *SettingsAffinityScorer.xrUserEntityName.unsafeMutableAddressor()
{
  return "names";
}

uint64_t static SettingsAffinityScorer.xrUserEntityName.getter()
{
  return 0x73656D616ELL;
}

void *SettingsAffinityScorer.environmentNamespace.unsafeMutableAddressor()
{
  return &static SettingsAffinityScorer.environmentNamespace;
}

unint64_t static SettingsAffinityScorer.environmentNamespace.getter()
{
  return 0xD000000000000014;
}

const char *SettingsAffinityScorer.atmNamespace.unsafeMutableAddressor()
{
  return "atmosphereName";
}

uint64_t static SettingsAffinityScorer.atmNamespace.getter()
{
  return 0x656870736F6D7461;
}

void one-time initialization function for envNamespaces()
{
  static SettingsAffinityScorer.envNamespaces = (uint64_t)&outlined read-only object #0 of one-time initialization function for envNamespaces;
}

uint64_t *SettingsAffinityScorer.envNamespaces.unsafeMutableAddressor()
{
  if (one-time initialization token for envNamespaces != -1)
    swift_once();
  return &static SettingsAffinityScorer.envNamespaces;
}

uint64_t static SettingsAffinityScorer.envNamespaces.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for envNamespaces);
}

uint64_t SettingsAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t UsoTask.firstCommonSettingReferenceIdentifier()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD, _QWORD, _QWORD);
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD, _QWORD, _QWORD);
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = UsoTask.arguments.getter();
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_13;
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
  if ((v8 & 1) == 0)
    goto LABEL_13;
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  if (!(v9 >> 62))
  {
    if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_13:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  }
  swift_bridgeObjectRetain();
  v29 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v29)
    goto LABEL_13;
LABEL_5:
  if ((v9 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v9);
  }
  else
  {
    if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  v11 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v11)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  type metadata accessor for UsoEntity_common_Setting();
  swift_retain();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  v12 = v39;
  if (!v39)
  {
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
  }
  v13 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (!v13)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
    swift_release();
    return swift_release();
  }
  v14 = *(_QWORD *)(v13 + 16);
  if (!v14)
  {
LABEL_35:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, 1, 1, v2);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  v36 = v12;
  v37 = v11;
  v15 = v13 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v16 = *(_QWORD *)(v3 + 72);
  v17 = *(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 16);
  v35 = v13;
  swift_bridgeObjectRetain();
  v18 = 0;
  v19 = (_QWORD *)&unk_1EF0E1000;
  v33 = v15;
  v34 = v14;
  v31 = v17;
  v32 = v16;
  while (1)
  {
    v17(v5, v15 + v16 * v18, v2);
    if (v19[279] != -1)
      swift_once();
    v20 = *(_QWORD *)(static SettingsAffinityScorer.kSupportedCommonSettingIdentifierNamespaces + 16);
    if (v20)
      break;
LABEL_18:
    ++v18;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v19 = &unk_1EF0E1000;
    if (v18 == v14)
    {
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
  }
  v21 = static SettingsAffinityScorer.kSupportedCommonSettingIdentifierNamespaces;
  swift_bridgeObjectRetain_n();
  v38 = v21;
  v22 = (uint64_t *)(v21 + 40);
  while (1)
  {
    v24 = *(v22 - 1);
    v23 = *v22;
    swift_bridgeObjectRetain();
    v25 = UsoIdentifier.namespace.getter();
    if (!v26)
    {
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    if (v25 == v24 && v26 == v23)
      break;
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0)
      goto LABEL_33;
LABEL_24:
    v22 += 2;
    if (!--v20)
    {
      swift_bridgeObjectRelease_n();
      v15 = v33;
      v14 = v34;
      v17 = v31;
      v16 = v32;
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_33:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(a1, 0, 1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t UsoTask.firstUserEntityNamesIdentifier()@<X0>(uint64_t a1@<X8>)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD, _QWORD, _QWORD);
  void (*v28)(_QWORD, _QWORD, _QWORD);
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  uint64_t v40;
  void (*v41)(_QWORD, _QWORD, _QWORD);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v3 = type metadata accessor for UsoIdentifier();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = UsoTask.arguments.getter();
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_25;
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x69746E4572657375, 0xEC00000073656974);
  if ((v9 & 1) == 0)
    goto LABEL_25;
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      goto LABEL_25;
  }
  else if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v10);
  }
  else
  {
    if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_32:
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v14 = result;
      v46 = v7;
      v47 = a1;
      if (result)
        goto LABEL_13;
LABEL_33:
      swift_bridgeObjectRelease();
      v19 = MEMORY[0x1E0DEE9D8];
      goto LABEL_34;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  v7 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v7)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
  v11 = UsoEntity.attributes.getter();
  if (!*(_QWORD *)(v11 + 16)
    || (v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x73656D616ELL, 0xE500000000000000), (v13 & 1) == 0))
  {
    swift_release();
    goto LABEL_25;
  }
  v1 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = MEMORY[0x1E0DEE9D8];
  v48 = MEMORY[0x1E0DEE9D8];
  if (v1 >> 62)
    goto LABEL_32;
  v14 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  v46 = v7;
  v47 = a1;
  if (!v14)
    goto LABEL_33;
LABEL_13:
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_68;
  }
  for (i = 0; i != v14; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0)
      MEMORY[0x1B5E43B94](i, v1);
    else
      swift_retain();
    v17 = dispatch thunk of UsoValue.getAsEntity()();
    v18 = swift_release();
    if (v17)
    {
      MEMORY[0x1B5E43498](v18);
      if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  a1 = v47;
  v19 = v48;
  v10 = MEMORY[0x1E0DEE9D8];
LABEL_34:
  swift_bridgeObjectRelease();
  v48 = v10;
  if (!(v19 >> 62))
  {
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v20)
      goto LABEL_36;
LABEL_45:
    swift_bridgeObjectRelease_n();
    v23 = MEMORY[0x1E0DEE9D8];
    v24 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v24)
    {
LABEL_65:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
      swift_bridgeObjectRelease();
      return swift_release();
    }
    goto LABEL_46;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v20 = result;
  if (!result)
    goto LABEL_45;
LABEL_36:
  if (v20 < 1)
  {
LABEL_68:
    __break(1u);
    return result;
  }
  v21 = 0;
  do
  {
    if ((v19 & 0xC000000000000001) != 0)
      MEMORY[0x1B5E43B94](v21, v19);
    else
      swift_retain();
    ++v21;
    v22 = UsoEntity.usoIdentifiers.getter();
    swift_release();
    specialized Array.append<A>(contentsOf:)(v22);
  }
  while (v20 != v21);
  swift_bridgeObjectRelease_n();
  a1 = v47;
  v23 = v48;
  v24 = *(_QWORD *)(v48 + 16);
  if (!v24)
    goto LABEL_65;
LABEL_46:
  v25 = v23 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v26 = *(_QWORD *)(v4 + 72);
  v27 = *(void (**)(_QWORD, _QWORD, _QWORD))(v4 + 16);
  v45 = v23;
  v28 = v27;
  swift_bridgeObjectRetain();
  v29 = 0;
  v30 = (_QWORD *)&unk_1EF0E1000;
  v43 = v25;
  v44 = v24;
  v41 = v28;
  v42 = v26;
  while (1)
  {
    v28(v6, v25 + v26 * v29, v3);
    if (v30[280] != -1)
      swift_once();
    v31 = static SettingsAffinityScorer.kSupportedUserEntityNamesIdentifierNamespaces;
    v32 = *(_QWORD *)(static SettingsAffinityScorer.kSupportedUserEntityNamesIdentifierNamespaces + 16);
    if (v32)
      break;
LABEL_48:
    ++v29;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v30 = &unk_1EF0E1000;
    if (v29 == v24)
    {
      swift_bridgeObjectRelease();
      a1 = v47;
      goto LABEL_65;
    }
  }
  swift_bridgeObjectRetain_n();
  v33 = (uint64_t *)(v31 + 40);
  while (1)
  {
    v34 = *(v33 - 1);
    v35 = *v33;
    swift_bridgeObjectRetain();
    v36 = UsoIdentifier.namespace.getter();
    if (!v37)
    {
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
    if (v36 == v34 && v37 == v35)
      break;
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v39 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_63;
    }
LABEL_54:
    v33 += 2;
    if (!--v32)
    {
      swift_bridgeObjectRelease_n();
      v25 = v43;
      v24 = v44;
      v28 = v41;
      v26 = v42;
      goto LABEL_48;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
LABEL_63:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40 = v47;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v47, v6, v3);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v40, 0, 1, v3);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t UsoTask.isBatterySummarizationOverride(for:)(void (*a1)(char *, unint64_t, uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v17;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(void);
  void (*v25)(char *, uint64_t);
  char v26;
  char v27;
  char v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  char *v36;
  char *v37;

  v35 = a1;
  v1 = type metadata accessor for DeviceIdiom();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v36 = (char *)&v30 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UsoIdentifier();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v37 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (UsoTask.verbString.getter() == 0x736972616D6D7573 && v13 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v15 = 0;
    if ((v14 & 1) == 0)
      return v15 & 1;
  }
  if ((UsoTask.hasUserEntities()() & 1) != 0)
  {
LABEL_8:
    v15 = 0;
    return v15 & 1;
  }
  UsoTask.firstCommonSettingReferenceIdentifier()((uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for UsoIdentifier?);
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v37, v9, v10);
  if (UsoIdentifier.value.getter() == 0x79726574746162 && v17 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v37, v10);
      goto LABEL_8;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DeviceIdiom>);
  v20 = *(_QWORD *)(v2 + 72);
  v21 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1B4EE4F30;
  v23 = v22 + v21;
  v24 = *(void (**)(void))(v2 + 104);
  ((void (*)(unint64_t, _QWORD, uint64_t))v24)(v23, *MEMORY[0x1E0DA7C60], v1);
  v34 = v23 + v20;
  v24();
  v33 = v23 + 2 * v20;
  v24();
  v32 = v23 + 3 * v20;
  v24();
  v31 = v23 + 4 * v20;
  v24();
  v30 = v23 + 5 * v20;
  v24();
  SiriEnvironment.currentDevice.getter();
  dispatch thunk of CurrentDevice.deviceIdiom.getter();
  swift_release();
  v35 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
  v35(v5, v23, v1);
  lazy protocol witness table accessor for type DeviceIdiom and conformance DeviceIdiom();
  LOBYTE(v20) = dispatch thunk of static Equatable.== infix(_:_:)();
  v25 = *(void (**)(char *, uint64_t))(v2 + 8);
  swift_bridgeObjectRetain();
  v25(v5, v1);
  if ((v20 & 1) != 0)
    goto LABEL_22;
  v35(v5, v34, v1);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  v25(v5, v1);
  if ((v26 & 1) != 0)
    goto LABEL_22;
  v35(v5, v33, v1);
  v27 = dispatch thunk of static Equatable.== infix(_:_:)();
  v25(v5, v1);
  if ((v27 & 1) != 0
    || (v35(v5, v32, v1), v28 = dispatch thunk of static Equatable.== infix(_:_:)(), v25(v5, v1), (v28 & 1) != 0)
    || (v35(v5, v31, v1), v29 = dispatch thunk of static Equatable.== infix(_:_:)(), v25(v5, v1), (v29 & 1) != 0))
  {
LABEL_22:
    v15 = 1;
  }
  else
  {
    v35(v5, v30, v1);
    v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    v25(v5, v1);
  }
  swift_bridgeObjectRelease();
  v25(v36, v1);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v37, v10);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v15 & 1;
}

uint64_t UsoTask.hasUserEntities()()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v0 = UsoTask.arguments.getter();
  if (!*(_QWORD *)(v0 + 16))
    goto LABEL_10;
  v1 = specialized __RawDictionaryStorage.find<A>(_:)(0x69746E4572657375, 0xEC00000073656974);
  if ((v2 & 1) == 0)
    goto LABEL_10;
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8 * v1);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  if (!(v3 >> 62))
  {
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_10;
LABEL_5:
  if ((v3 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v3);
LABEL_8:
    swift_bridgeObjectRelease();
    v5 = dispatch thunk of UsoValue.getAsEntity()();
    swift_release();
    if (v5)
    {
      swift_release();
      return 1;
    }
    return 0;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t specialized SettingsAffinityScorer.scoreOpenNoEntity(_:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  _BYTE v17[32];
  _QWORD v18[4];

  v0 = type metadata accessor for RREntity();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for RRCandidate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  if (v18[0])
  {
    v11 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
    swift_release();
    if (v11)
    {
      dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  SiriEnvironment.salientEntitiesProvider.getter();
  v12 = (_QWORD *)dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  static AffinityScorerUtils.topOpenableEntity(candidates:)(v12, (uint64_t)v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    v13 = &demangling cache variable for type metadata for RRCandidate?;
    v14 = v6;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
    static UsoEntity_CodeGenConverter.convert(entity:)();
    swift_release();
    if (v18[3])
    {
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v18, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
      type metadata accessor for UsoEntity_common_AppEntity();
      if (swift_dynamicCast())
      {
        swift_retain();
        dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        swift_bridgeObjectRelease();
        swift_release_n();
      }
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    }
    v13 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    v14 = v18;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, v13);
  return 5;
}

uint64_t specialized SettingsAffinityScorer.scoreCloseNoEntity(_:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  _BYTE v17[32];
  _QWORD v18[4];

  v0 = type metadata accessor for RREntity();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for RRCandidate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  if (v18[0])
  {
    v11 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
    swift_release();
    if (v11)
    {
      dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  SiriEnvironment.salientEntitiesProvider.getter();
  v12 = (_QWORD *)dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  static AffinityScorerUtils.topCloseableEntity(candidates:)(v12, (uint64_t)v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    v13 = &demangling cache variable for type metadata for RRCandidate?;
    v14 = v6;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v6, v7);
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
    static UsoEntity_CodeGenConverter.convert(entity:)();
    swift_release();
    if (v18[3])
    {
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v18, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
      type metadata accessor for UsoEntity_common_UserEntity();
      if (swift_dynamicCast()
        || (type metadata accessor for UsoEntity_common_AppEntity(), swift_dynamicCast()))
      {
        swift_retain();
        dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        swift_bridgeObjectRelease();
        swift_release_n();
      }
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    }
    v13 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    v14 = v18;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, v13);
  return 5;
}

uint64_t specialized SettingsAffinityScorer.scoreForEnvironmentOrAtmosphereIdentifiers(parse:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(_QWORD, _QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(_QWORD, _QWORD, _QWORD);
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  BOOL v39;
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v71;
  void (*v72)(_QWORD, _QWORD, _QWORD);
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[32];
  _BYTE v83[24];
  uint64_t v84;
  _BYTE v85[40];

  v0 = type metadata accessor for UsoIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (uint64_t *)((char *)&v71 - v5);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (uint64_t)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (uint64_t)&v71 - v11;
  if (!specialized static AffinityScorerUtils.getTask(_:)())
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = 2;
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B4BE6000, v15, v16, "SettingsAffinityScorer Could not extract usoTask from parse", v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);

    }
    else
    {

      return 2;
    }
    return v17;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v85, (uint64_t)v83, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v84)
    goto LABEL_134;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v83, (uint64_t)v82, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_open_uso_NoEntity();
  if (swift_dynamicCast())
  {
    v13 = specialized SettingsAffinityScorer.scoreOpenNoEntity(_:environment:)();
LABEL_11:
    v17 = v13;
    v19 = v13;
    swift_release();
    if (v19 == 5)
      goto LABEL_133;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v85, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v83, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return v17;
  }
  type metadata accessor for UsoTask_close_uso_NoEntity();
  if (swift_dynamicCast())
  {
    v13 = specialized SettingsAffinityScorer.scoreCloseNoEntity(_:environment:)();
    goto LABEL_11;
  }
  type metadata accessor for UsoTask_disable_common_Setting();
  if (swift_dynamicCast())
  {
    v20 = v81;
    v21 = swift_retain();
    v22 = MEMORY[0x1B5E4081C](v21);
    swift_release();
    if (v22)
    {
      v10 = v22 & 0xFFFFFFFFFFFFFF8;
      if (v22 >> 62)
        goto LABEL_121;
      v4 = *(char **)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v4)
        goto LABEL_18;
LABEL_122:
      swift_bridgeObjectRelease();
    }
LABEL_123:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v12, 1, 1, v0);
    goto LABEL_124;
  }
  type metadata accessor for UsoTask_enable_common_Setting();
  if (!swift_dynamicCast())
    goto LABEL_133;
  v20 = v81;
  v27 = swift_retain();
  v22 = MEMORY[0x1B5E4081C](v27);
  swift_release();
  if (!v22)
    goto LABEL_130;
  v12 = v22 & 0xFFFFFFFFFFFFFF8;
  if (v22 >> 62)
    goto LABEL_128;
  if (!*(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_129:
    swift_bridgeObjectRelease();
LABEL_130:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v10, 1, 1, v0);
    goto LABEL_131;
  }
  while (1)
  {
    if ((v22 & 0xC000000000000001) != 0)
    {
      MEMORY[0x1B5E43B94](0, v22);
    }
    else
    {
      if (!*(_QWORD *)(v12 + 16))
      {
        __break(1u);
LABEL_142:
        swift_once();
LABEL_108:
        v55 = type metadata accessor for Logger();
        __swift_project_value_buffer(v55, (uint64_t)static Logger.executor);
        v56 = Logger.logObject.getter();
        v57 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v56, v57))
        {
          v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v58 = 0;
          _os_log_impl(&dword_1B4BE6000, v56, v57, "SettingsAffinityScorer Env/Atm namespace identifiers found", v58, 2u);
          MEMORY[0x1B5E44758](v58, -1, -1);
        }
        swift_release();

        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v85, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v59 = v12;
LABEL_119:
        outlined destroy of ReferenceResolutionClientProtocol?(v59, &demangling cache variable for type metadata for UsoIdentifier?);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v83, (uint64_t *)&demangling cache variable for type metadata for Any?);
        return 3;
      }
      swift_retain();
    }
    swift_bridgeObjectRelease();
    dispatch thunk of CodeGenListEntry.entry.getter();
    swift_release();
    if (!v80)
      goto LABEL_130;
    v28 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    swift_release();
    if (!v28)
      goto LABEL_130;
    v74 = *(_QWORD *)(v28 + 16);
    if (!v74)
    {
LABEL_112:
      v54 = 1;
LABEL_113:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v10, v54, 1, v0);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v10, 1, v0) != 1)
      {
        if (one-time initialization token for executor != -1)
          swift_once();
        v60 = type metadata accessor for Logger();
        __swift_project_value_buffer(v60, (uint64_t)static Logger.executor);
        v61 = Logger.logObject.getter();
        v62 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v61, v62))
        {
          v63 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v63 = 0;
          _os_log_impl(&dword_1B4BE6000, v61, v62, "SettingsAffinityScorer Env/Atm namespace identifiers found", v63, 2u);
          MEMORY[0x1B5E44758](v63, -1, -1);
        }
        swift_release();

        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v85, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v59 = v10;
        goto LABEL_119;
      }
LABEL_131:
      swift_release();
      v64 = v10;
      goto LABEL_132;
    }
    v29 = v28 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v76 = *(_QWORD *)(v1 + 72);
    v30 = *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 16);
    v71 = v28;
    swift_bridgeObjectRetain();
    v31 = 0;
    v75 = v20;
    v73 = v29;
    v72 = v30;
    while (1)
    {
      v78 = v31;
      v43 = v29;
      v30(v4, v29 + v76 * v31, v0);
      if (one-time initialization token for envNamespaces != -1)
        swift_once();
      v44 = (_QWORD *)static SettingsAffinityScorer.envNamespaces;
      swift_bridgeObjectRetain();
      v45 = UsoIdentifier.namespace.getter();
      if (v46)
        v20 = v45;
      else
        v20 = 0;
      if (v46)
        v22 = v46;
      else
        v22 = 0xE000000000000000;
      v79 = v44[2];
      if (!v79)
      {
        swift_bridgeObjectRelease();
        v29 = v43;
        goto LABEL_70;
      }
      v47 = v44[4];
      v48 = v44[5];
      v77 = v44;
      v49 = v47 == v20 && v48 == v22;
      if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_103:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v10, v4, v0);
        v54 = 0;
        goto LABEL_113;
      }
      if (v79 != 1)
      {
        v50 = v77[6] == v20 && v77[7] == v22;
        if (v50 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_103;
        if (v79 != 2)
          break;
      }
LABEL_69:
      swift_bridgeObjectRelease();
      v29 = v73;
      v30 = v72;
LABEL_70:
      v31 = v78 + 1;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
      if (v31 == v74)
      {
        swift_bridgeObjectRelease();
        goto LABEL_112;
      }
    }
    v6 = v77 + 9;
    v12 = 2;
    while (1)
    {
      v51 = v12 + 1;
      if (__OFADD__(v12, 1))
        break;
      v52 = *(v6 - 1) == v20 && *v6 == v22;
      if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_103;
      v6 += 2;
      ++v12;
      if (v51 == v79)
        goto LABEL_69;
    }
    __break(1u);
LABEL_126:
    MEMORY[0x1B5E43B94](0, v22);
LABEL_21:
    swift_bridgeObjectRelease();
    dispatch thunk of CodeGenListEntry.entry.getter();
    swift_release();
    if (!v80)
      goto LABEL_123;
    v23 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    swift_release();
    if (!v23)
      goto LABEL_123;
    v74 = *(_QWORD *)(v23 + 16);
    if (!v74)
      break;
    v24 = v23 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v76 = *(_QWORD *)(v1 + 72);
    v25 = *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 16);
    v71 = v23;
    swift_bridgeObjectRetain();
    v26 = 0;
    v75 = v20;
    v73 = v24;
    v72 = v25;
    while (1)
    {
      v78 = v26;
      v32 = v24;
      v25(v6, v24 + v76 * v26, v0);
      if (one-time initialization token for envNamespaces != -1)
        swift_once();
      v33 = (_QWORD *)static SettingsAffinityScorer.envNamespaces;
      swift_bridgeObjectRetain();
      v34 = UsoIdentifier.namespace.getter();
      if (v35)
        v20 = v34;
      else
        v20 = 0;
      if (v35)
        v22 = v35;
      else
        v22 = 0xE000000000000000;
      v79 = v33[2];
      if (!v79)
      {
        swift_bridgeObjectRelease();
        v24 = v32;
        goto LABEL_37;
      }
      v36 = v33[4];
      v37 = v33[5];
      v77 = v33;
      v38 = v36 == v20 && v37 == v22;
      if (v38 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_102:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(v1 + 32))(v12, v6, v0);
        v53 = 0;
        goto LABEL_106;
      }
      if (v79 != 1)
      {
        v39 = v77[6] == v20 && v77[7] == v22;
        if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_102;
        if (v79 != 2)
          break;
      }
LABEL_36:
      swift_bridgeObjectRelease();
      v24 = v73;
      v25 = v72;
LABEL_37:
      v26 = v78 + 1;
      swift_bridgeObjectRelease();
      (*(void (**)(_QWORD *, uint64_t))(v1 + 8))(v6, v0);
      if (v26 == v74)
      {
        swift_bridgeObjectRelease();
        goto LABEL_105;
      }
    }
    v40 = v77 + 9;
    v10 = 2;
    while (1)
    {
      v41 = v10 + 1;
      if (__OFADD__(v10, 1))
        break;
      v42 = *(v40 - 1) == v20 && *v40 == v22;
      if (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_102;
      v40 += 2;
      ++v10;
      if (v41 == v79)
        goto LABEL_36;
    }
    __break(1u);
LABEL_121:
    swift_bridgeObjectRetain();
    v4 = (char *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4)
      goto LABEL_122;
LABEL_18:
    if ((v22 & 0xC000000000000001) != 0)
      goto LABEL_126;
    if (*(_QWORD *)(v10 + 16))
    {
      swift_retain();
      goto LABEL_21;
    }
    __break(1u);
LABEL_128:
    swift_bridgeObjectRetain();
    v65 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v65)
      goto LABEL_129;
  }
LABEL_105:
  v53 = 1;
LABEL_106:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v12, v53, 1, v0);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) != 1)
  {
    if (one-time initialization token for executor != -1)
      goto LABEL_142;
    goto LABEL_108;
  }
LABEL_124:
  swift_release();
  v64 = v12;
LABEL_132:
  outlined destroy of ReferenceResolutionClientProtocol?(v64, &demangling cache variable for type metadata for UsoIdentifier?);
LABEL_133:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v82);
LABEL_134:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v83, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (one-time initialization token for executor != -1)
    swift_once();
  v66 = type metadata accessor for Logger();
  __swift_project_value_buffer(v66, (uint64_t)static Logger.executor);
  v67 = Logger.logObject.getter();
  v68 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v67, v68))
  {
    v69 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v69 = 0;
    _os_log_impl(&dword_1B4BE6000, v67, v68, "SettingsAffinityScorer No Env/Atm namespace identifiers found", v69, 2u);
    MEMORY[0x1B5E44758](v69, -1, -1);
  }

  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v85, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return 5;
}

uint64_t specialized SettingsAffinityScorer.scoreForSupportedIdentifierMatches(parse:environment:)(uint64_t a1, void (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void (*v66)(char *, unint64_t, uint64_t);
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  int v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  _BOOL4 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(char *, unint64_t, uint64_t);
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148[2];

  v139 = a2;
  v146 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v144 = *(_QWORD *)(v146 - 8);
  MEMORY[0x1E0C80A78](v146);
  v145 = (char *)&v126 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v3 = MEMORY[0x1E0C80A78](v130);
  v128 = (uint64_t)&v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v126 = (uint64_t)&v126 - v6;
  v7 = MEMORY[0x1E0C80A78](v5);
  v129 = (uint64_t)&v126 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v127 = (uint64_t)&v126 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v132 = (char *)&v126 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v131 = (uint64_t)&v126 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v126 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v126 - v18;
  v20 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v137 = *(_QWORD *)(v20 - 8);
  v138 = v20;
  MEMORY[0x1E0C80A78](v20);
  v136 = (char *)&v126 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v126 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Siri_Nlu_External_UserParse();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v126 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v126 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v142 = *(_QWORD *)(v140 - 8);
  v33 = MEMORY[0x1E0C80A78](v140);
  v135 = (char *)&v126 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v141 = (char *)&v126 - v35;
  if (specialized static AffinityScorerUtils.getTask(_:)())
  {
    v133 = v19;
    v134 = v17;
    v36 = USOParse.userParse.getter();
    v37 = MEMORY[0x1B5E3FA6C](v36);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
    v38 = *(_QWORD *)(v37 + 16);
    if (v38)
    {
      v39 = v37 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
      v40 = *(_QWORD *)(v23 + 72);
      v41 = *(void (**)(char *, unint64_t, uint64_t))(v23 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        v41(v25, v39, v22);
        if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
          break;
        (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
        v39 += v40;
        if (!--v38)
        {
          swift_bridgeObjectRelease();
          goto LABEL_7;
        }
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v32, v25, v22);
      v42 = 0;
    }
    else
    {
LABEL_7:
      v42 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v32, v42, 1, v22);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v32, 1, v22) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v32, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      if (one-time initialization token for executor != -1)
        swift_once();
      v48 = type metadata accessor for Logger();
      __swift_project_value_buffer(v48, (uint64_t)static Logger.executor);
      v49 = Logger.logObject.getter();
      v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v47 = 2;
        v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v51 = 0;
        _os_log_impl(&dword_1B4BE6000, v49, v50, "SettingsAffinityScorer Could not extract userStatedTask", v51, 2u);
        MEMORY[0x1B5E44758](v51, -1, -1);

        swift_release();
        return v47;
      }

      swift_release();
      return 2;
    }
    v52 = v136;
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v32, v22);
    v53 = v135;
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*(void (**)(char *, uint64_t))(v137 + 8))(v52, v138);
    v54 = v141;
    v55 = v140;
    (*(void (**)(char *, char *, uint64_t))(v142 + 32))(v141, v53, v140);
    v56 = (uint64_t)v133;
    UsoTask.firstCommonSettingReferenceIdentifier()((uint64_t)v133);
    v57 = (uint64_t)v134;
    UsoTask.firstUserEntityNamesIdentifier()((uint64_t)v134);
    if ((UsoTask.isBatterySummarizationOverride(for:)(v139) & 1) != 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v58 = type metadata accessor for Logger();
      __swift_project_value_buffer(v58, (uint64_t)static Logger.executor);
      v59 = Logger.logObject.getter();
      v60 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v61 = 0;
        _os_log_impl(&dword_1B4BE6000, v59, v60, "SettingsAffinityScorer detected battery summerization override case", v61, 2u);
        MEMORY[0x1B5E44758](v61, -1, -1);
      }

      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v57, &demangling cache variable for type metadata for UsoIdentifier?);
      (*(void (**)(char *, uint64_t))(v142 + 8))(v54, v55);
      outlined destroy of ReferenceResolutionClientProtocol?(v56, &demangling cache variable for type metadata for UsoIdentifier?);
      return 4;
    }
    v62 = Siri_Nlu_External_UsoGraph.identifiers.getter();
    v63 = *(_QWORD *)(v62 + 16);
    if (v63)
    {
      v64 = v62 + ((*(unsigned __int8 *)(v144 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v144 + 80));
      v65 = *(_QWORD *)(v144 + 72);
      v66 = *(void (**)(char *, unint64_t, uint64_t))(v144 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        v66(v145, v64, v146);
        if (Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter() == 0xD000000000000017
          && v67 == 0x80000001B4F017B0)
        {
          break;
        }
        v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v144 + 8))(v145, v146);
        if ((v68 & 1) != 0)
          goto LABEL_46;
        v64 += v65;
        if (!--v63)
        {
          swift_bridgeObjectRelease_n();
          v55 = v140;
          v54 = v141;
          goto LABEL_35;
        }
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v144 + 8))(v145, v146);
LABEL_46:
      swift_bridgeObjectRelease_n();
      v81 = (uint64_t)v133;
      if (one-time initialization token for executor != -1)
        swift_once();
      v82 = type metadata accessor for Logger();
      __swift_project_value_buffer(v82, (uint64_t)static Logger.executor);
      v83 = Logger.logObject.getter();
      v84 = static os_log_type_t.debug.getter();
      v85 = os_log_type_enabled(v83, v84);
      v86 = (uint64_t)v134;
      v87 = v140;
      v88 = v141;
      if (v85)
      {
        v89 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v89 = 0;
        _os_log_impl(&dword_1B4BE6000, v83, v84, "SettingsAffinityScorer detected identifier with Settings backingAppBundleID", v89, 2u);
        MEMORY[0x1B5E44758](v89, -1, -1);
      }

      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v86, &demangling cache variable for type metadata for UsoIdentifier?);
      (*(void (**)(char *, uint64_t))(v142 + 8))(v88, v87);
      v90 = v81;
      goto LABEL_70;
    }
    swift_bridgeObjectRelease();
LABEL_35:
    v69 = type metadata accessor for UsoIdentifier();
    v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 48);
    v71 = (uint64_t)v133;
    v72 = v70(v133, 1, v69);
    v73 = v131;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v134, v131, &demangling cache variable for type metadata for UsoIdentifier?);
    v74 = v72 == 1;
    v75 = v73;
    v76 = (uint64_t)v132;
    if (v74 || v70((char *)v75, 1, v69) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v75, &demangling cache variable for type metadata for UsoIdentifier?);
      if (v70((char *)v71, 1, v69) == 1 || (UsoTask.hasUserEntities()() & 1) != 0)
      {
        if (v70((char *)v71, 1, v69) != 1)
        {
          if (one-time initialization token for executor != -1)
            swift_once();
          v91 = type metadata accessor for Logger();
          __swift_project_value_buffer(v91, (uint64_t)static Logger.executor);
          v92 = v128;
          outlined init with copy of ReferenceResolutionClientProtocol?(v71, v128, &demangling cache variable for type metadata for UsoIdentifier?);
          v93 = Logger.logObject.getter();
          v94 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v93, v94))
          {
            v95 = (uint8_t *)swift_slowAlloc();
            v96 = swift_slowAlloc();
            v148[0] = v96;
            *(_DWORD *)v95 = 136315138;
            outlined init with copy of ReferenceResolutionClientProtocol?(v92, v129, &demangling cache variable for type metadata for UsoIdentifier?);
            v97 = String.init<A>(describing:)();
            v147 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, v148);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined destroy of ReferenceResolutionClientProtocol?(v92, &demangling cache variable for type metadata for UsoIdentifier?);
            _os_log_impl(&dword_1B4BE6000, v93, v94, "SettingsAffinityScorer Found matching setting identifier %s on a parse with UserEntities for another domain", v95, 0xCu);
            swift_arrayDestroy();
            v99 = v96;
            v71 = (uint64_t)v133;
            MEMORY[0x1B5E44758](v99, -1, -1);
            MEMORY[0x1B5E44758](v95, -1, -1);

            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v134, &demangling cache variable for type metadata for UsoIdentifier?);
            (*(void (**)(char *, uint64_t))(v142 + 8))(v141, v55);
          }
          else
          {

            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?(v92, &demangling cache variable for type metadata for UsoIdentifier?);
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v134, &demangling cache variable for type metadata for UsoIdentifier?);
            (*(void (**)(char *, uint64_t))(v142 + 8))(v54, v55);
          }
          outlined destroy of ReferenceResolutionClientProtocol?(v71, &demangling cache variable for type metadata for UsoIdentifier?);
          return 2;
        }
        if (one-time initialization token for executor != -1)
          swift_once();
        v77 = type metadata accessor for Logger();
        __swift_project_value_buffer(v77, (uint64_t)static Logger.executor);
        v78 = Logger.logObject.getter();
        v79 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v78, v79))
        {
          v80 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v80 = 0;
          _os_log_impl(&dword_1B4BE6000, v78, v79, "SettingsAffinityScorer Found no relevant identifiers", v80, 2u);
          MEMORY[0x1B5E44758](v80, -1, -1);
        }

        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v134, &demangling cache variable for type metadata for UsoIdentifier?);
        (*(void (**)(char *, uint64_t))(v142 + 8))(v54, v55);
        outlined destroy of ReferenceResolutionClientProtocol?(v71, &demangling cache variable for type metadata for UsoIdentifier?);
        return 1;
      }
      if (one-time initialization token for executor != -1)
        swift_once();
      v115 = type metadata accessor for Logger();
      __swift_project_value_buffer(v115, (uint64_t)static Logger.executor);
      v116 = v126;
      outlined init with copy of ReferenceResolutionClientProtocol?(v71, v126, &demangling cache variable for type metadata for UsoIdentifier?);
      v117 = Logger.logObject.getter();
      v118 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v117, v118))
      {
        v119 = (uint8_t *)swift_slowAlloc();
        v120 = swift_slowAlloc();
        v148[0] = v120;
        *(_DWORD *)v119 = 136315138;
        outlined init with copy of ReferenceResolutionClientProtocol?(v116, v129, &demangling cache variable for type metadata for UsoIdentifier?);
        v121 = String.init<A>(describing:)();
        v147 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v121, v122, v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v116, &demangling cache variable for type metadata for UsoIdentifier?);
        _os_log_impl(&dword_1B4BE6000, v117, v118, "SettingsAffinityScorer Found matching setting identifier %s on a parse without UserEntities", v119, 0xCu);
        swift_arrayDestroy();
        v123 = v120;
        v71 = (uint64_t)v133;
        MEMORY[0x1B5E44758](v123, -1, -1);
        MEMORY[0x1B5E44758](v119, -1, -1);

        swift_release();
        v114 = (uint64_t)v134;
        goto LABEL_63;
      }

      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v116, &demangling cache variable for type metadata for UsoIdentifier?);
      v124 = (uint64_t)v134;
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v75, &demangling cache variable for type metadata for UsoIdentifier?);
      if (one-time initialization token for executor != -1)
        swift_once();
      v100 = type metadata accessor for Logger();
      __swift_project_value_buffer(v100, (uint64_t)static Logger.executor);
      outlined init with copy of ReferenceResolutionClientProtocol?(v71, v76, &demangling cache variable for type metadata for UsoIdentifier?);
      v101 = (uint64_t)v134;
      v102 = v127;
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v134, v127, &demangling cache variable for type metadata for UsoIdentifier?);
      v103 = Logger.logObject.getter();
      v104 = static os_log_type_t.debug.getter();
      v105 = v104;
      if (os_log_type_enabled(v103, v104))
      {
        v106 = swift_slowAlloc();
        LODWORD(v145) = v105;
        v107 = v106;
        v146 = swift_slowAlloc();
        v148[0] = v146;
        *(_DWORD *)v107 = 136315394;
        v108 = v129;
        outlined init with copy of ReferenceResolutionClientProtocol?(v76, v129, &demangling cache variable for type metadata for UsoIdentifier?);
        v109 = String.init<A>(describing:)();
        v147 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v76, &demangling cache variable for type metadata for UsoIdentifier?);
        *(_WORD *)(v107 + 12) = 2080;
        outlined init with copy of ReferenceResolutionClientProtocol?(v102, v108, &demangling cache variable for type metadata for UsoIdentifier?);
        v111 = String.init<A>(describing:)();
        v147 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v102, &demangling cache variable for type metadata for UsoIdentifier?);
        _os_log_impl(&dword_1B4BE6000, v103, (os_log_type_t)v145, "SettingsAffinityScorer Found matching setting identifier %s paired with a matching user entity identifier %s", (uint8_t *)v107, 0x16u);
        v113 = v146;
        swift_arrayDestroy();
        v71 = (uint64_t)v133;
        MEMORY[0x1B5E44758](v113, -1, -1);
        MEMORY[0x1B5E44758](v107, -1, -1);

        swift_release();
        v114 = (uint64_t)v134;
LABEL_63:
        outlined destroy of ReferenceResolutionClientProtocol?(v114, &demangling cache variable for type metadata for UsoIdentifier?);
        (*(void (**)(char *, uint64_t))(v142 + 8))(v141, v55);
LABEL_69:
        v90 = v71;
LABEL_70:
        outlined destroy of ReferenceResolutionClientProtocol?(v90, &demangling cache variable for type metadata for UsoIdentifier?);
        return 3;
      }

      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v102, &demangling cache variable for type metadata for UsoIdentifier?);
      outlined destroy of ReferenceResolutionClientProtocol?(v76, &demangling cache variable for type metadata for UsoIdentifier?);
      v124 = v101;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v124, &demangling cache variable for type metadata for UsoIdentifier?);
    (*(void (**)(char *, uint64_t))(v142 + 8))(v54, v55);
    goto LABEL_69;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v43 = type metadata accessor for Logger();
  __swift_project_value_buffer(v43, (uint64_t)static Logger.executor);
  v44 = Logger.logObject.getter();
  v45 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v44, v45))
  {

    return 2;
  }
  v46 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v46 = 0;
  _os_log_impl(&dword_1B4BE6000, v44, v45, "SettingsAffinityScorer Could not extract usoTask from parse", v46, 2u);
  MEMORY[0x1B5E44758](v46, -1, -1);

  return 2;
}

ValueMetadata *type metadata accessor for SettingsAffinityScorer()
{
  return &type metadata for SettingsAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type DeviceIdiom and conformance DeviceIdiom()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom;
  if (!lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom)
  {
    v1 = type metadata accessor for DeviceIdiom();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DA7CC0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom);
  }
  return result;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  return specialized _arrayForceCast<A, B>(_:)(a1, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t, unint64_t))MEMORY[0x1E0DEC3E0], (unint64_t *)&lazy cache variable for type metadata for SAAceView);
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1, uint64_t (*a2)(BOOL, uint64_t, uint64_t), void (*a3)(uint64_t, unint64_t), unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t i;
  unint64_t v11;
  unint64_t v12;
  id *v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  _OWORD v18[2];
  uint64_t v19;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v8 = MEMORY[0x1E0DEE9D8];
  if (!v7)
    return v8;
  v19 = MEMORY[0x1E0DEE9D8];
  result = a2(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v7; ++i)
      {
        a3(i, a1);
        type metadata accessor for OS_dispatch_queue(0, a4);
        swift_dynamicCast();
        v8 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          a2(0, *(_QWORD *)(v8 + 16) + 1, 1);
          v8 = v19;
        }
        v12 = *(_QWORD *)(v8 + 16);
        v11 = *(_QWORD *)(v8 + 24);
        if (v12 >= v11 >> 1)
        {
          a2(v11 > 1, v12 + 1, 1);
          v8 = v19;
        }
        *(_QWORD *)(v8 + 16) = v12 + 1;
        outlined init with take of Any(v18, (_OWORD *)(v8 + 32 * v12 + 32));
      }
    }
    else
    {
      v13 = (id *)(a1 + 32);
      type metadata accessor for OS_dispatch_queue(0, a4);
      do
      {
        v14 = *v13;
        swift_dynamicCast();
        v8 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          a2(0, *(_QWORD *)(v8 + 16) + 1, 1);
          v8 = v19;
        }
        v16 = *(_QWORD *)(v8 + 16);
        v15 = *(_QWORD *)(v8 + 24);
        if (v16 >= v15 >> 1)
        {
          a2(v15 > 1, v16 + 1, 1);
          v8 = v19;
        }
        *(_QWORD *)(v8 + 16) = v16 + 1;
        outlined init with take of Any(v18, (_OWORD *)(v8 + 32 * v16 + 32));
        ++v13;
        --v7;
      }
      while (v7);
    }
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t SharedContextServiceImpl.__allocating_init(bridge:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t SharedContextServiceImpl.bridge.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t SharedContextServiceImpl.init(bridge:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t SharedContextServiceImpl._fetchContext(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t inited;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  void (*v9)(Swift::Int, uint64_t, uint64_t (*)(unint64_t), uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v6;
  v7 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v9 = *(void (**)(Swift::Int, uint64_t, uint64_t (*)(unint64_t), uint64_t))(*(_QWORD *)v2 + 104);
  swift_retain();
  v9(v7, 1, partial apply for thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [Any]?) -> (), v8);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [Any]?) -> ()(unint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  if (a1)
    v3 = specialized _arrayForceCast<A, B>(_:)(a1, (uint64_t (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(uint64_t, unint64_t))specialized _ArrayBuffer._getElementSlowPath(_:), (unint64_t *)&lazy cache variable for type metadata for AFServiceDeviceContext);
  else
    v3 = 0;
  a2(v3);
  return swift_bridgeObjectRelease();
}

uint64_t SharedContextServiceImpl.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  return v0;
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1B4E9A210()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [Any]?) -> ()(unint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [Any]?) -> ()(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t method lookup function for SharedContextServiceImpl()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharedContextServiceImpl.__allocating_init(bridge:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of SharedContextServiceImpl._fetchContext(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SharedContextServiceImpl.fetchContext(for:includesNearbyDevices:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = type metadata accessor for UserID();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UserID>);
    v10 = static _SetStorage.allocate(capacity:)();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EF90]);
      v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EF98]);
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Siri_Nlu_External_Parser.ParserIdentifier>);
    v10 = static _SetStorage.allocate(capacity:)();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F160]);
      v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F170]);
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = result;
  v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RemoteConversationClient>);
      result = static _SetStorage.allocate(capacity:)();
      v3 = result;
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v4)
        return v3;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x1E0DEE9E8];
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return v3;
LABEL_9:
  v6 = v3 + 56;
  v44 = v4;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v7 = 0;
    while (1)
    {
      while (1)
      {
        result = MEMORY[0x1B5E43B94](v7, v1);
        v8 = __OFADD__(v7++, 1);
        if (v8)
        {
          __break(1u);
          goto LABEL_52;
        }
        v9 = result;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        result = Hasher._finalize()();
        v10 = -1 << *(_BYTE *)(v3 + 32);
        v11 = result & ~v10;
        v12 = v11 >> 6;
        v13 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
        v14 = 1 << v11;
        if (((1 << v11) & v13) != 0)
          break;
LABEL_28:
        *(_QWORD *)(v6 + 8 * v12) = v14 | v13;
        *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v9;
        v23 = *(_QWORD *)(v3 + 16);
        v8 = __OFADD__(v23, 1);
        v24 = v23 + 1;
        if (v8)
          goto LABEL_53;
        *(_QWORD *)(v3 + 16) = v24;
        if (v7 == v4)
          return v3;
      }
      v15 = *(_QWORD *)(v3 + 48);
      v16 = *(_QWORD *)(v15 + 8 * v11);
      v17 = *(_QWORD *)(v9 + 112);
      v18 = *(_QWORD *)(v9 + 120);
      if (*(_QWORD *)(v16 + 112) != v17 || *(_QWORD *)(v16 + 120) != v18)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          v20 = ~v10;
          while (1)
          {
            v11 = (v11 + 1) & v20;
            v12 = v11 >> 6;
            v13 = *(_QWORD *)(v6 + 8 * (v11 >> 6));
            v14 = 1 << v11;
            if ((v13 & (1 << v11)) == 0)
              break;
            v21 = *(_QWORD *)(v15 + 8 * v11);
            if (*(_QWORD *)(v21 + 112) != v17 || *(_QWORD *)(v21 + 120) != v18)
            {
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) == 0)
                continue;
            }
            goto LABEL_11;
          }
          v4 = v44;
          goto LABEL_28;
        }
      }
LABEL_11:
      swift_unknownObjectRelease();
      v4 = v44;
      if (v7 == v44)
        return v3;
    }
  }
  v25 = 0;
  v42 = v1 + 32;
  v43 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v43)
  {
    v26 = *(_QWORD *)(v42 + 8 * v25);
    Hasher.init(_seed:)();
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v3 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
    v31 = 1 << v28;
    if (((1 << v28) & v30) != 0)
    {
      v32 = *(_QWORD *)(v3 + 48);
      v33 = *(_QWORD *)(v32 + 8 * v28);
      v34 = *(_QWORD *)(v26 + 112);
      v35 = *(_QWORD *)(v26 + 120);
      if (*(_QWORD *)(v33 + 112) == v34 && *(_QWORD *)(v33 + 120) == v35)
        goto LABEL_32;
      result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0)
        goto LABEL_32;
      v37 = ~v27;
      v28 = (v28 + 1) & v37;
      v29 = v28 >> 6;
      v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
      v31 = 1 << v28;
      if ((v30 & (1 << v28)) != 0)
      {
        while (1)
        {
          v38 = *(_QWORD *)(v32 + 8 * v28);
          if (*(_QWORD *)(v38 + 112) == v34 && *(_QWORD *)(v38 + 120) == v35)
            break;
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) != 0)
            break;
          v28 = (v28 + 1) & v37;
          v29 = v28 >> 6;
          v30 = *(_QWORD *)(v6 + 8 * (v28 >> 6));
          v31 = 1 << v28;
          if ((v30 & (1 << v28)) == 0)
            goto LABEL_48;
        }
LABEL_32:
        result = swift_release();
        v4 = v44;
        goto LABEL_33;
      }
LABEL_48:
      v4 = v44;
    }
    *(_QWORD *)(v6 + 8 * v29) = v31 | v30;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v28) = v26;
    v40 = *(_QWORD *)(v3 + 16);
    v8 = __OFADD__(v40, 1);
    v41 = v40 + 1;
    if (v8)
      goto LABEL_54;
    *(_QWORD *)(v3 + 16) = v41;
LABEL_33:
    if (++v25 == v4)
      return v3;
  }
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t SharedFlowPluginConnection.bundleId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SharedFlowPluginConnection.bundlePath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *SharedFlowPluginConnection.__allocating_init(initialRemoteConversation:bundleId:bundlePath:sharedFlowPluginServiceClient:loadedConversationSerial:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v16;

  swift_allocObject();
  v16 = specialized SharedFlowPluginConnection.init(initialRemoteConversation:bundleId:bundlePath:sharedFlowPluginServiceClient:loadedConversationSerial:)(a1, a2, a3, a4, a5, a6, a7, a8);
  swift_unknownObjectRelease();
  swift_release();
  return v16;
}

_QWORD *SharedFlowPluginConnection.init(initialRemoteConversation:bundleId:bundlePath:sharedFlowPluginServiceClient:loadedConversationSerial:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8 = specialized SharedFlowPluginConnection.init(initialRemoteConversation:bundleId:bundlePath:sharedFlowPluginServiceClient:loadedConversationSerial:)(a1, a2, a3, a4, a5, a6, a7, a8);
  swift_unknownObjectRelease();
  swift_release();
  return v8;
}

uint64_t closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[9] = a1;
  v4[10] = a4;
  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v4[11] = v5;
  v4[12] = *(_QWORD *)(v5 + 64);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[15] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "Loading a new RemoteConversation object, since the connection to SharedFlowPluginService was previously invalidated.", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = v0[14];
  v6 = (_QWORD *)v0[10];

  v0[16] = v6[9];
  v0[17] = v6[2];
  v0[18] = v6[3];
  v0[19] = v6[4];
  v0[20] = v6[5];
  v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  v0[21] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = v0[19];
  v1 = v0[20];
  v4 = v0[17];
  v3 = v0[18];
  v5 = v0[13];
  v6 = v0[11];
  outlined init with copy of UUID?(v0[14], v5);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (_QWORD *)swift_allocObject();
  v0[22] = v8;
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  v8[5] = v1;
  v8[6] = 0;
  v8[7] = 0;
  outlined init with take of UUID?(v5, (uint64_t)v8 + v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)swift_task_alloc();
  v0[23] = v9;
  *v9 = v0;
  v9[1] = closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
  return specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)((uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:), (uint64_t)v8);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_release();
  outlined destroy of UUID?(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  v1 = *(_QWORD *)(v0 + 192);
  swift_release();
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 192);
    v3 = *(_QWORD *)(v0 + 32);
    v5 = *(_QWORD **)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v4 + 48) = v2;
    *(_QWORD *)(v4 + 56) = v3;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *v5 = v2;
    v5[1] = v3;
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = v0 + 136;
    v8 = *(_QWORD *)(v0 + 136);
    v7 = *(void **)(v9 + 8);
    _StringGuts.grow(_:)(75);
    v10._countAndFlagsBits = 0xD00000000000002CLL;
    v10._object = (void *)0x80000001B4F01920;
    String.append(_:)(v10);
    swift_bridgeObjectRetain();
    v11._countAndFlagsBits = v8;
    v11._object = v7;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._object = (void *)0x80000001B4F01950;
    v12._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v12);
    return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0, 0xE000000000000000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/SharedFlowPluginService/SharedFlowPluginConnection.swift", 144, 2, 93);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_release();
  swift_release();
  outlined destroy of UUID?(v1);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[2] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = v2;
  v4[24] = a1;
  v4[25] = v2;
  swift_task_dealloc();
  if (!v2)
    swift_release();
  return swift_task_switch();
}

SiriKitRuntime::RemoteConversationConnectionInvalidationResult __swiftcall SharedFlowPluginConnection.invalidate()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  SiriKitRuntime::RemoteConversationConnectionInvalidationResult v7;

  v1 = v0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "Invalidating RemoteConversation XPC connection.", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  v6 = v1[11];
  swift_beginAccess();
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 16) == 0;
  v1[8] = 0;
  swift_release();
  v1[6] = 0;
  v1[7] = 0;
  swift_unknownObjectRelease();
  InterruptibleTaskManager.invalidate()();
  return v7;
}

uint64_t protocol witness for RemoteConversationConnectionProviding.withRemoteConversationConnectionIfValid<A>(execute:) in conformance SharedFlowPluginConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:)(a1, a2, a3, a4);
}

uint64_t protocol witness for RemoteConversationConnectionProviding.invalidate() in conformance SharedFlowPluginConnection()
{
  return SharedFlowPluginConnection.invalidate()();
}

_QWORD *specialized SharedFlowPluginConnection.init(initialRemoteConversation:bundleId:bundlePath:sharedFlowPluginServiceClient:loadedConversationSerial:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  Swift::String v12;
  Swift::String v13;
  _QWORD *v14;

  v8[6] = a1;
  v8[7] = a2;
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a5;
  v8[5] = a6;
  v8[8] = 0;
  v8[9] = a7;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = a3;
  v12._object = a4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  type metadata accessor for InterruptibleTaskManager();
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = MEMORY[0x1E0DEE9E0];
  v14[5] = 0;
  v14[2] = 0xD00000000000001BLL;
  v14[3] = 0x80000001B4F01A10;
  v8[10] = a8;
  v8[11] = v14;
  return v8;
}

uint64_t sub_1B4E9B48C()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(a1, v4, v5, v6);
}

uint64_t partial apply for closure #3 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = (int *)v1[3];
  v6 = v1[5];
  v5 = v1[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  v8 = (_QWORD *)swift_task_alloc();
  v7[2] = v8;
  *v8 = v7;
  v8[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v10(a1, v6, v5);
}

uint64_t method lookup function for SharedFlowPluginConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharedFlowPluginConnection.__allocating_init(initialRemoteConversation:bundleId:bundlePath:sharedFlowPluginServiceClient:loadedConversationSerial:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_1B4E9B5E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                                      - 8)
                          + 80);
  v2 = (v1 + 64) & ~v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  return swift_deallocObject();
}

uint64_t SharedFlowPluginService.flowLoader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 16, a1);
}

uint64_t SharedFlowPluginService.siriKitRuntime.getter()
{
  return swift_retain();
}

uint64_t SharedFlowPluginService.WarmupTracker.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v0 + 112) = 0;
  return v0;
}

uint64_t SharedFlowPluginService.warmupTracker.getter()
{
  return swift_retain();
}

uint64_t SharedFlowPluginService.CurrentTurnCache.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t SharedFlowPluginService.currentTurnCache.getter()
{
  return swift_retain();
}

uint64_t SharedFlowPluginService.__allocating_init(overrideFlowLoader:overrideSiriKitRuntime:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  SharedFlowPluginService.init(overrideFlowLoader:overrideSiriKitRuntime:)(a1, a2);
  return v4;
}

_QWORD *SharedFlowPluginService.init(overrideFlowLoader:overrideSiriKitRuntime:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15[2];
  uint64_t v16;

  v3 = v2;
  type metadata accessor for SharedFlowPluginService.WarmupTracker();
  v6 = swift_allocObject();
  swift_defaultActor_initialize();
  *(_QWORD *)(v6 + 112) = 0;
  v3[8] = v6;
  type metadata accessor for SharedFlowPluginService.CurrentTurnCache();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  v3[9] = v7;
  if (one-time initialization token for executor != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)&v12, &demangling cache variable for type metadata for DirectFlowPluginLoader?);
  if (!*((_QWORD *)&v13 + 1))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v12, &demangling cache variable for type metadata for DirectFlowPluginLoader?);
    v10 = type metadata accessor for DirectFlowPluginLoaderImpl();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = MEMORY[0x1E0DEE9E0];
    v3[5] = v10;
    v3[6] = &protocol witness table for DirectFlowPluginLoaderImpl;
    v3[2] = v11;
    if (a2)
      goto LABEL_6;
    goto LABEL_5;
  }
  outlined init with take of ReferenceResolutionClientProtocol(&v12, (uint64_t)v15);
  outlined init with take of ReferenceResolutionClientProtocol(v15, (uint64_t)(v3 + 2));
  if (!a2)
  {
LABEL_5:
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    type metadata accessor for SiriKitRuntimeState();
    v12 = 0u;
    v13 = 0u;
    v14 = 0;
    swift_allocObject();
    a2 = SiriKitRuntimeState.init(customEventSender:rrClient:)((uint64_t)v15, (uint64_t)&v12);
  }
LABEL_6:
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for DirectFlowPluginLoader?);
  v3[7] = a2;
  return v3;
}

uint64_t SharedFlowPluginService.startTurn(turnData:bridge:reply:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v19;

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v5;
  v14[3] = a1;
  v14[4] = a2;
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = &async function pointer to partial apply for closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:);
  v16[5] = v14;
  v16[6] = a3;
  v16[7] = a4;
  swift_retain();
  v17 = a1;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:), (uint64_t)v16);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  v4 = type metadata accessor for SiriKitEventPayload();
  v3[20] = v4;
  v3[21] = *(_QWORD *)(v4 - 8);
  v3[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[23] = swift_task_alloc();
  v3[24] = type metadata accessor for InvocationStateImpl();
  v3[25] = swift_task_alloc();
  v3[26] = type metadata accessor for RemoteConversationTurnData(0);
  v3[27] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v3[28] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 232) = *(_QWORD *)(*(_QWORD *)(v0 + 136) + 64);
  return swift_task_switch();
}

{
  SharedFlowPluginService.WarmupTracker.warmupTask.getter();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  void (*v4)(void);
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;

  v1 = (_QWORD *)v0[18];
  v2 = *(_QWORD *)(v0[17] + 72);
  v3 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v1;

  v4 = *(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x98);
  v5 = v1;
  v4();
  v6 = (uint64_t *)v0[27];
  v7 = v0[24];
  v8 = (_QWORD *)v0[25];
  v28 = v0[23];
  v24 = (int *)v0[26];
  v10 = *v6;
  v9 = v6[1];
  v27 = *v6;
  v11 = (void *)v6[4];
  v30 = 0;
  memset(v29, 0, sizeof(v29));
  swift_bridgeObjectRetain();
  v12 = v11;
  InvocationStateImpl.init(executionRequestId:requestContextData:previousInvocationState:)(v10, v9, v12, (uint64_t)v29, v8);
  v13 = v6[3];
  v26 = v6[2];
  v0[10] = v7;
  v0[11] = &protocol witness table for InvocationStateImpl;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 7);
  outlined init with copy of InvocationStateImpl((uint64_t)v8, (uint64_t)boxed_opaque_existential_1);
  v25 = (uint64_t)v6 + v24[7];
  swift_getObjectType();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = v12;
  v16 = ServiceBridge.errorHandlingProxy.getter();
  v17 = (uint64_t *)((char *)v6 + v24[11]);
  v18 = *v17;
  v19 = v17[1];
  v20 = *((_BYTE *)v6 + v24[9]);
  outlined copy of Data?(*v17, v19);
  SiriKitRuntimeState.makeNewTurn(requestContextData:executionRequestId:rootRequestId:invocationState:conversationLoggingId:bridge:scopedRRData:invokedByPeerToPeerEORR:)(v15, v27, v9, v26, v13, (uint64_t)(v0 + 7), v25, v16, v0 + 2, v18, v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined consume of Data?(v18, v19);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.makeAndSetConversationId(fromExecutionRequestId:)();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v28, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  static ConversationSELFHelper.shared.getter();
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.setExecutionRequestId(fromExecutionRequestId:)();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v28, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v21 = v0[5];
  v22 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v21);
  (*(void (**)(uint64_t, uint64_t))(v22 + 64))(v21, v22);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[21];
  v1 = v0[22];
  v3 = v0[20];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v0[15]);
  type metadata accessor for SiriKitEvent();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E0D9B240], v3);
  v0[30] = SiriKitEvent.__allocating_init(_:builder:)();
  v4 = (_QWORD *)swift_task_alloc();
  v0[31] = v4;
  *v4 = v0;
  v4[1] = closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:);
  return dispatch thunk of SiriKitEventSending.sendAsync(_:)();
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 96;
  swift_task_dealloc();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "Bootstraping the suggestions broker provider inside SharedFlowPluginService startTurn()", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }

  type metadata accessor for SiriSuggestionsBrokerProvider();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 256) = v5;
  *v5 = v0;
  v5[1] = closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:);
  return static SiriSuggestionsBrokerProvider.bootStrapSuggestionsBrokerProvider()();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 216);
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 200), (uint64_t (*)(_QWORD))type metadata accessor for InvocationStateImpl);
  outlined destroy of CamOutput(v1, type metadata accessor for RemoteConversationTurnData);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id SharedFlowPluginService.CurrentTurnCache.set(_:)(void *a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

  return a1;
}

uint64_t SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v10 = v9;
  v42 = a3;
  v43 = a8;
  v40 = a5;
  v41 = a1;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x1E0C80A78](v15);
  v44 = (uint64_t)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v22 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v20, 1, 1, v22);
  outlined init with copy of ReferenceResolutionClientProtocol?(a7, v44, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v23 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v37 = a4;
  v38 = a9;
  v39 = v20;
  if (v23 != -1)
    swift_once();
  v24 = static ConversationActor.shared;
  v25 = lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor();
  v26 = (*(unsigned __int8 *)(v16 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v27 = (v17 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  v29 = (_QWORD *)swift_allocObject();
  v29[2] = v24;
  v29[3] = v25;
  v30 = v40;
  v29[4] = v10;
  v29[5] = v30;
  v29[6] = a6;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v44, (uint64_t)v29 + v26, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v31 = (_QWORD *)((char *)v29 + v27);
  *v31 = v41;
  v31[1] = a2;
  v32 = (_QWORD *)((char *)v29 + v28);
  v33 = v37;
  *v32 = v42;
  v32[1] = v33;
  v34 = (_QWORD *)((char *)v29 + ((v28 + 23) & 0xFFFFFFFFFFFFFFF8));
  v35 = v38;
  *v34 = v43;
  v34[1] = v35;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v39, (uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:), (uint64_t)v29);
  return swift_release();
}

uint64_t closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(v8 + 672) = v13;
  *(_OWORD *)(v8 + 640) = v11;
  *(_OWORD *)(v8 + 656) = v12;
  *(_QWORD *)(v8 + 632) = a8;
  *(_QWORD *)(v8 + 624) = a7;
  *(_QWORD *)(v8 + 616) = a6;
  *(_QWORD *)(v8 + 608) = a5;
  *(_QWORD *)(v8 + 600) = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(_QWORD *)(v8 + 680) = swift_task_alloc();
  v9 = type metadata accessor for UUID();
  *(_QWORD *)(v8 + 688) = v9;
  *(_QWORD *)(v8 + 696) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 704) = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  *(_QWORD *)(v8 + 712) = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 720) = *(_QWORD *)(*(_QWORD *)(v0 + 600) + 64);
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 728) = SharedFlowPluginService.WarmupTracker.warmupTask.getter();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 736) = v1;
  *v1 = v0;
  v1[1] = closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:);
  return Task<>.value.getter();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  unint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD v61[2];
  uint64_t v62;

  v1 = v0 + 184;
  if (*(_QWORD *)(v0 + 616))
  {
    v2 = *(_QWORD *)(v0 + 696);
    v3 = *(_QWORD *)(v0 + 688);
    v4 = *(_QWORD *)(v0 + 680);
    outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 624), v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) != 1)
    {
      v9 = (_OWORD *)(v0 + 424);
      v18 = *(_QWORD *)(v0 + 704);
      v58 = *(_QWORD *)(v0 + 688);
      v59 = *(_QWORD *)(v0 + 696);
      v19 = *(_QWORD *)(v0 + 656);
      v20 = *(_QWORD *)(v0 + 648);
      v21 = *(_QWORD *)(v0 + 600);
      (*(void (**)(uint64_t, _QWORD))(v59 + 32))(v18, *(_QWORD *)(v0 + 680));
      type metadata accessor for ConversationSELFHelper();
      static ConversationSELFHelper.shared.getter();
      v22 = (_QWORD *)swift_task_alloc();
      v22[2] = v21;
      v22[3] = v20;
      v1 = v0 + 184;
      v22[4] = v19;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowPluginAndBundle?);
      dispatch thunk of ConversationSELFHelper.withExecutionFlowPluginLoadTime<A>(rcId:pluginId:hypothesisId:_:)();
      swift_release();
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v18, v58);
      goto LABEL_12;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 680), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1B4BE6000, v6, v7, "SharedFlowPluginService: Got loadFlowPlugin call without an rcId or hypothesisId. Likely a plugin signal, not associated with an RC.", v8, 2u);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }
  v9 = (_OWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 656);
  v11 = *(_QWORD *)(v0 + 648);
  v12 = *(_QWORD **)(v0 + 600);

  v13 = v12 + 2;
  v14 = v12[5];
  v15 = v12[6];
  __swift_project_boxed_opaque_existential_1(v13, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8))(v11, v10, v14, v15);
  if (*(_QWORD *)(v0 + 40))
  {
    v16 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 136) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 152) = v16;
    *(_OWORD *)(v0 + 168) = *(_OWORD *)(v0 + 80);
    v17 = *(_OWORD *)(v0 + 32);
    *v9 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v0 + 120) = v17;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for (pluginAndBundle: FlowPluginAndBundle, wasInCache: Bool)?);
    *v9 = 0u;
    *(_OWORD *)(v0 + 120) = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    *(_OWORD *)(v0 + 168) = 0u;
  }
LABEL_12:
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v9, v1, &demangling cache variable for type metadata for FlowPluginAndBundle?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v1, v0 + 344, &demangling cache variable for type metadata for FlowPluginAndBundle?);
  if (*(_QWORD *)(v0 + 368))
  {
    v60 = v1;
    v54 = *(_QWORD *)(v0 + 640);
    v57 = *(_QWORD *)(v0 + 632);
    v23 = *(_QWORD *)(v0 + 600);
    v24 = *(_OWORD *)(v0 + 392);
    *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 376);
    *(_OWORD *)(v0 + 312) = v24;
    *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 408);
    v25 = *(_OWORD *)(v0 + 360);
    *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 344);
    *(_OWORD *)(v0 + 280) = v25;
    v55 = type metadata accessor for RemoteConversationService(0);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 264, v0 + 504);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 304, v0 + 544);
    v26 = *(_QWORD *)(v23 + 56);
    v27 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for SnippetManager();
    memset(v61, 0, sizeof(v61));
    v62 = 0;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v28 = static SnippetManager.sharedInstance.getter();
    v29 = *(_QWORD *)(v0 + 528);
    v30 = *(_QWORD *)(v0 + 536);
    v31 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 504, v29);
    v32 = *(_QWORD *)(v0 + 568);
    v33 = *(_QWORD *)(v0 + 576);
    v34 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 544, v32);
    specialized RemoteConversationService.__allocating_init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)(v31, v57, v54, v34, v26, (uint64_t)partial apply for closure #2 in closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:), v27, v28, (uint64_t)v61, v55, v29, v32, v30, v33);
    swift_release();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 544);
    __swift_destroy_boxed_opaque_existential_1(v0 + 504);
    swift_release();
    if (one-time initialization token for executor != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.debug.getter();
    v38 = os_log_type_enabled(v36, v37);
    v39 = *(_QWORD *)(v0 + 640);
    if (v38)
    {
      v56 = *(_QWORD *)(v0 + 632);
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      *(_QWORD *)&v61[0] = v41;
      *(_DWORD *)v40 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 584) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v39, (uint64_t *)v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v36, v37, "SharedFlowPluginService: Found flow for bundleId=%s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v41, -1, -1);
      MEMORY[0x1B5E44758](v40, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v50 = *(void (**)(uint64_t))(v0 + 664);
    v51 = swift_retain();
    v50(v51);
    swift_release_n();
    outlined destroy of FlowPluginAndBundle(v0 + 264);
    v52 = v60;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 344, &demangling cache variable for type metadata for FlowPluginAndBundle?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    v45 = os_log_type_enabled(v43, v44);
    v46 = *(_QWORD *)(v0 + 640);
    if (v45)
    {
      v47 = *(_QWORD *)(v0 + 632);
      v48 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      *(_QWORD *)&v61[0] = v49;
      *(_DWORD *)v48 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 592) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v46, (uint64_t *)v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v43, v44, "SharedFlowPluginService: No flow found for bundleId=%s", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v49, -1, -1);
      MEMORY[0x1B5E44758](v48, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(_QWORD))(v0 + 664))(0);
    v52 = v1;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v52, &demangling cache variable for type metadata for FlowPluginAndBundle?);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double closure #1 in closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)@<D0>(void (*a1)(char *)@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void (*v20)(char *);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v20 = a1;
  v9 = type metadata accessor for FlowPluginLoadResult();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a2 + 2;
  v14 = a2[5];
  v15 = a2[6];
  __swift_project_boxed_opaque_existential_1(v13, v14);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8))(&v21, a3, a4, v14, v15);
  if (*((_QWORD *)&v22 + 1))
  {
    v29 = v24;
    v30 = v25;
    v27 = v22;
    v28 = v23;
    v26 = v21;
    FlowPluginLoadResult.init(success:wasInCache:)();
    v20(v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v16 = v29;
    v17 = v30;
    a5[2] = v28;
    a5[3] = v16;
    a5[4] = v17;
    v18 = v27;
    *a5 = v26;
    a5[1] = v18;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v21, &demangling cache variable for type metadata for (pluginAndBundle: FlowPluginAndBundle, wasInCache: Bool)?);
    FlowPluginLoadResult.init(success:wasInCache:)();
    v20(v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    *(_QWORD *)&v18 = 0;
    a5[3] = 0u;
    a5[4] = 0u;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }
  return *(double *)&v18;
}

char *closure #2 in closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(uint64_t a1, uint64_t a2)
{
  char *v4;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
    return 0;
  swift_retain();
  swift_release();
  v4 = SharedFlowPluginService.CurrentTurnCache.getIfMatches(executionRequestId:)(a1, a2);
  swift_release();
  return v4;
}

char *SharedFlowPluginService.CurrentTurnCache.getIfMatches(executionRequestId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  BOOL v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  v3 = *(char **)(v2 + 16);
  if (!v3)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1B4BE6000, v7, v8, "Trying to recover turn data from cache, but not in a turn", v9, 2u);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }
    goto LABEL_17;
  }
  v4 = *(_QWORD *)&v3[OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId] == a1
    && *(_QWORD *)&v3[OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId + 8] == a2;
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    v10 = one-time initialization token for executor;
    v7 = v3;
    if (v10 != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1B4BE6000, v12, v13, "Trying to recover turn data from cache, but request ID does not match", v14, 2u);
      MEMORY[0x1B5E44758](v14, -1, -1);

      return 0;
    }

LABEL_17:
    return 0;
  }
  v5 = v3;
  return v3;
}

uint64_t SharedFlowPluginService.endTurn(reply:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  v11 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v11 != -1)
    swift_once();
  v12 = static ConversationActor.shared;
  v13 = lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor();
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v12;
  v14[3] = v13;
  v14[4] = v3;
  v14[5] = a1;
  v14[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginService.endTurn(reply:), (uint64_t)v14);
  return swift_release();
}

uint64_t closure #1 in SharedFlowPluginService.endTurn(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in SharedFlowPluginService.endTurn(reply:)()
{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  void *v3;

  v1 = *(void (**)(void))(v0 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 72);
  v3 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

  v1();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall SharedFlowPluginService.CurrentTurnCache.reset()()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  *(_QWORD *)(v0 + 16) = 0;

}

char *SharedFlowPluginService.getCachedTurnData(executionRequestId:)(uint64_t a1, uint64_t a2)
{
  return SharedFlowPluginService.CurrentTurnCache.getIfMatches(executionRequestId:)(a1, a2);
}

uint64_t SharedFlowPluginService.CurrentTurnCache.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0;
  return result;
}

uint64_t SharedFlowPluginService.CurrentTurnCache.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SharedFlowPluginService.CurrentTurnCache.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t SharedFlowPluginService.WarmupTracker.warmupTask.getter()
{
  uint64_t *v0;
  uint64_t v1;

  if (v0[14])
  {
    v1 = v0[14];
  }
  else
  {
    v1 = closure #1 in SharedFlowPluginService.WarmupTracker.warmupTask.getter(*v0);
    v0[14] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t closure #1 in SharedFlowPluginService.WarmupTracker.warmupTask.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = a1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v8 = 0;
    v9 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v8 = dispatch thunk of Actor.unownedExecutor.getter();
      v9 = v10;
      swift_unknownObjectRelease();
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
  }
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in SharedFlowPluginService.WarmupTracker.warmupTask.getter;
  *(_QWORD *)(v11 + 24) = v7;
  if (v9 | v8)
  {
    v13[0] = 0;
    v13[1] = 0;
    v13[2] = v8;
    v13[3] = v9;
  }
  return swift_task_create();
}

uint64_t closure #1 in closure #1 in SharedFlowPluginService.WarmupTracker.warmupTask.getter()
{
  return swift_task_switch();
}

{
  uint64_t v0;

  specialized static SharedFlowPluginService.WarmupTracker.warmup()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SharedFlowPluginService.WarmupTracker.ensureWarmedUp()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 24) = SharedFlowPluginService.WarmupTracker.warmupTask.getter();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = SharedFlowPluginService.WarmupTracker.ensureWarmedUp();
  return Task<>.value.getter();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

Swift::Void __swiftcall SharedFlowPluginService.WarmupTracker.beginWarmupIfNeeded()()
{
  SharedFlowPluginService.WarmupTracker.warmupTask.getter();
  swift_release();
}

uint64_t SharedFlowPluginService.WarmupTracker.deinit()
{
  uint64_t v0;

  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t SharedFlowPluginService.WarmupTracker.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t SharedFlowPluginService.WarmupTracker.init()()
{
  uint64_t v0;

  swift_defaultActor_initialize();
  *(_QWORD *)(v0 + 112) = 0;
  return v0;
}

uint64_t type metadata accessor for SharedFlowPluginService.WarmupTracker()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for SharedFlowPluginService.CurrentTurnCache()
{
  return objc_opt_self();
}

uint64_t SharedFlowPluginService.WarmupTracker.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t SharedFlowPluginService.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t SharedFlowPluginService.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

char *protocol witness for TurnDataProviding.getCachedTurnData(executionRequestId:) in conformance SharedFlowPluginService(uint64_t a1, uint64_t a2)
{
  return SharedFlowPluginService.CurrentTurnCache.getIfMatches(executionRequestId:)(a1, a2);
}

uint64_t partial apply for closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:)(v2, v3, v4);
}

uint64_t sub_1B4E9DFB4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v12 = v1[3];
  v13 = v1[2];
  v5 = v1[5];
  v11 = v1[4];
  v6 = v1[6];
  v7 = (uint64_t)v1 + v4;
  v8 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(a1, v13, v12, v11, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in SharedFlowPluginService.endTurn(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in SharedFlowPluginService.endTurn(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t type metadata accessor for SharedFlowPluginService()
{
  return objc_opt_self();
}

uint64_t method lookup function for SharedFlowPluginService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharedFlowPluginService.__allocating_init(overrideFlowLoader:overrideSiriKitRuntime:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for SharedFlowPluginService.CurrentTurnCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharedFlowPluginService.CurrentTurnCache.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for SharedFlowPluginService.WarmupTracker()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharedFlowPluginService.WarmupTracker.ensureWarmedUp()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 120) + *(_QWORD *)(*(_QWORD *)v0 + 120));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t dispatch thunk of SharedFlowPluginService.WarmupTracker.beginWarmupIfNeeded()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of SharedFlowPluginService.WarmupTracker.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of TurnDataProviding.getCachedTurnData(executionRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t sub_1B4E9E2FC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t _sIeyBh_Iegh_TRTA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t objectdestroyTm_11()
{
  uint64_t v0;

  swift_release();

  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:)partial apply()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:)(v2, v3, v4);
}

uint64_t objectdestroy_3Tm_2()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:)partial apply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1B4E9E48C()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in SharedFlowPluginService.WarmupTracker.warmupTask.getter()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return swift_task_switch();
}

uint64_t sub_1B4E9E508()
{
  swift_release();
  return swift_deallocObject();
}

void specialized static SharedFlowPluginService.WarmupTracker.warmup()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  os_log_type_t v10;
  uint8_t *v11;
  NSObject *oslog;

  if (one-time initialization token for executor != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B4BE6000, v1, v2, "SharedFlowPluginService: warmup begin", v3, 2u);
    MEMORY[0x1B5E44758](v3, -1, -1);
  }

  type metadata accessor for DeviceEnvironmentHelper();
  MEMORY[0x1B5E3F604]();
  swift_release();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1B4BE6000, v4, v5, "Start preloading CAT.", v6, 2u);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }

  objc_msgSend((id)objc_opt_self(), sel_preload);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1B4BE6000, v7, v8, "CAT preloaded.", v9, 2u);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }

  oslog = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v10, "SharedFlowPluginService: warmup end", v11, 2u);
    MEMORY[0x1B5E44758](v11, -1, -1);
  }

}

uint64_t sub_1B4E9E780()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

char *partial apply for closure #2 in closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(a1, a2);
}

uint64_t outlined destroy of FlowPluginAndBundle(uint64_t a1)
{
  destroy for FlowPluginAndBundle(a1);
  return a1;
}

double partial apply for closure #1 in closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)@<D0>(void (*a1)(char *)@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(a1, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t outlined init with copy of InvocationStateImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InvocationStateImpl();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *SharedFlowPluginServiceClient.__allocating_init(connectionProvider:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  v10 = specialized SharedFlowPluginServiceClient.__allocating_init(connectionProvider:onConnectionInterrupted:)(v9, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v10;
}

uint64_t SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  v5 = *(_QWORD *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  v4[9] = v5;
  v4[10] = *(_QWORD *)(v5 + 64);
  v4[11] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[12] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t SharedFlowPluginServiceClient.startTurn(turnData:bridge:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v9;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v9 = *(_OWORD *)(v0 + 48);
  outlined init with copy of RemoteConversationTurnData(*(_QWORD *)(v0 + 40), v2);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (v1 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = swift_allocObject();
  *(_QWORD *)(v0 + 104) = v6;
  outlined init with take of RemoteConversationTurnData(v2, v6 + v4);
  *(_OWORD *)(v6 + v5) = v9;
  swift_unknownObjectRetain();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v7;
  *v7 = v0;
  v7[1] = SharedFlowPluginServiceClient.startTurn(turnData:bridge:);
  return specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:), v6);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall SharedFlowPluginServiceClient.loadedConversationWillRelease(serial:)(Swift::Int serial)
{
  uint64_t v1;

  (*(void (**)(Swift::Int))(**(_QWORD **)(v1 + 32) + 128))(serial);
}

uint64_t SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v8[11] = a7;
  v8[12] = v7;
  v8[9] = a5;
  v8[10] = a6;
  v8[7] = a3;
  v8[8] = a4;
  v8[5] = a1;
  v8[6] = a2;
  v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v8[13] = v9;
  v8[14] = *(_QWORD *)(v9 + 64);
  v8[15] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v8[16] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = v0[15];
  v2 = v0[13];
  v3 = v0[10];
  v4 = v0[8];
  v5 = v0[9];
  v6 = v0[6];
  v7 = v0[7];
  v8 = v0[5];
  outlined init with copy of UUID?(v0[11], v1);
  v9 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v10 = (_QWORD *)swift_allocObject();
  v0[17] = v10;
  v10[2] = v8;
  v10[3] = v6;
  v10[4] = v7;
  v10[5] = v4;
  v10[6] = v5;
  v10[7] = v3;
  outlined init with take of UUID?(v1, (uint64_t)v10 + v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = (_QWORD *)swift_task_alloc();
  v0[18] = v11;
  *v11 = v0;
  v11[1] = SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:);
  return specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)((uint64_t)&closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)partial apply, (uint64_t)v10);
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 160));
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 152) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    swift_release();
    *(_QWORD *)(v6 + 160) = a2;
    *(_QWORD *)(v6 + 168) = a1;
  }
  return swift_task_switch();
}

uint64_t SharedFlowPluginServiceClient.LoadedConversationTracker.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t SharedFlowPluginServiceClient.loadedConversations.getter()
{
  return swift_retain();
}

_QWORD *SharedFlowPluginServiceClient.init(connectionProvider:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  v13 = specialized SharedFlowPluginServiceClient.init(connectionProvider:onConnectionInterrupted:)((uint64_t)v11, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v13;
}

uint64_t closure #1 in closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t ObjectType;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v11 = RemoteConversationTurnData.xpcRepresentation.getter();
  ObjectType = swift_getObjectType();
  v13 = ServiceBridgeDelegate.xpcWrapper.getter(ObjectType, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v14 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v15 + v14, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_39_0;
  v16 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_startTurnWithTurnData_bridge_reply_, v11, v13, v16);
  _Block_release(v16);

  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall SharedFlowPluginServiceClient.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v2 = *(void **)(v0 + 16);
  if (v2)
  {
    v3 = v2;
    swift_unknownObjectRetain();
    objc_msgSend(v3, sel_invalidate);
    swift_unknownObjectRelease();

    v4 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0;
    outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v4);
  }
}

uint64_t SharedFlowPluginServiceClient.handleInvalidation()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v1 + 112) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  void (*v22)(id);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;

  if (one-time initialization token for executor != -1)
    goto LABEL_19;
  while (1)
  {
    v1 = *(_QWORD *)(v0 + 104);
    v2 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 120) = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    Logger.debugF(file:function:)();
    v3 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v0 + 128) = v3;
    v4 = swift_beginAccess();
    *(_QWORD *)(v0 + 136) = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 16);
    v7 = *(void **)(v1 + 16);
    v6 = v1 + 16;
    v5 = v7;
    if (v7)
    {
      v8 = v5;
      swift_unknownObjectRetain();
      objc_msgSend(v8, sel_invalidate);

      swift_unknownObjectRelease();
      v9 = *(void **)v6;
      *(_QWORD *)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      v4 = (uint64_t)outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v9);
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 32);
    *(_QWORD *)(v0 + 144) = v10;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 136))(v4);
    *(_QWORD *)(v0 + 152) = v11;
    v12 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v0 + 160) = v12;
    if (!v12)
      break;
    v13 = 0;
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(*(_QWORD *)v10 + 120);
    *(_BYTE *)(v0 + 224) = 0;
    while (1)
    {
      *(_QWORD *)(v0 + 176) = v13;
      v14 = *(_QWORD *)(v0 + 152);
      if (v13 >= *(_QWORD *)(v14 + 16))
        break;
      v15 = (*(uint64_t (**)(_QWORD))(v0 + 168))(*(_QWORD *)(v14 + 8 * v13 + 32));
      *(_QWORD *)(v0 + 184) = v15;
      if (v15)
        return swift_task_switch();
      v13 = *(_QWORD *)(v0 + 176) + 1;
      if (v13 == *(_QWORD *)(v0 + 160))
      {
        v16 = *(_BYTE *)(v0 + 224);
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_19:
    swift_once();
  }
  v16 = 0;
LABEL_11:
  v17 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRelease();
  swift_release();
  InterruptibleTaskManager.invalidate()();
  if ((v16 & 1) != 0 || v17)
  {
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1B4BE6000, v18, v19, "Shared flow plugin service was invalidated while we had active calls. Triggering onConnectionInterrupted handler.", v20, 2u);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }
    v21 = *(_QWORD *)(v0 + 104);

    v22 = *(void (**)(id))(v21 + 96);
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v25 = v24;
    v26 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v27 = (void *)MEMORY[0x1B5E432E8](v23, v25);
    swift_bridgeObjectRelease();
    v28 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, 4097, 0);

    v22(v28);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  outlined init with copy of ReferenceResolutionClientProtocol(v0[23] + 128, (uint64_t)(v0 + 2));
  v1 = v0[5];
  v2 = v0[6];
  v0[24] = v1;
  v0[25] = v2;
  v0[26] = __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  v0[27] = *(_QWORD *)(v2 + 24);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_BYTE *)(v0 + 225) = (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 216))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  void (*v11)(id);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;

  v1 = *(_BYTE *)(v0 + 225);
  result = swift_release();
  if ((v1 & 1) != 0)
    goto LABEL_7;
  v3 = *(_QWORD *)(v0 + 176) + 1;
  if (v3 == *(_QWORD *)(v0 + 160))
  {
    swift_bridgeObjectRelease();
    swift_release();
    InterruptibleTaskManager.invalidate()();
LABEL_10:
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1B4BE6000, v7, v8, "Shared flow plugin service was invalidated while we had active calls. Triggering onConnectionInterrupted handler.", v9, 2u);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 104);

    v11 = *(void (**)(id))(v10 + 96);
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;
    v15 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v16 = (void *)MEMORY[0x1B5E432E8](v12, v14);
    swift_bridgeObjectRelease();
    v17 = objc_msgSend(v15, sel_initWithDomain_code_userInfo_, v16, 4097, 0);

    v11(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_BYTE *)(v0 + 224) = 1;
  do
  {
    *(_QWORD *)(v0 + 176) = v3;
    v4 = *(_QWORD *)(v0 + 152);
    if (v3 >= *(_QWORD *)(v4 + 16))
    {
      __break(1u);
      return result;
    }
    result = (*(uint64_t (**)(_QWORD))(v0 + 168))(*(_QWORD *)(v4 + 8 * v3 + 32));
    *(_QWORD *)(v0 + 184) = result;
    if (result)
      return swift_task_switch();
LABEL_7:
    v3 = *(_QWORD *)(v0 + 176) + 1;
  }
  while (v3 != *(_QWORD *)(v0 + 160));
  v5 = *(_BYTE *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRelease();
  swift_release();
  InterruptibleTaskManager.invalidate()();
  if ((v5 & 1) != 0 || v6)
    goto LABEL_10;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall SharedFlowPluginServiceClient.kill()()
{
  uint64_t v0;
  void *v1;
  id *v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;

  v2 = (id *)(v0 + 16);
  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v3 = v1;
    swift_unknownObjectRetain();
    objc_msgSend(v3, sel__killConnection_, 9);
    swift_unknownObjectRelease();

  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  if (*v2)
  {
    v5 = *v2;
    swift_unknownObjectRetain();
    objc_msgSend(v5, sel_invalidate);
    swift_unknownObjectRelease();

    v6 = *(void **)(v0 + 16);
    *v2 = 0;
    *(_QWORD *)(v0 + 24) = 0;
    outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v6);
  }
}

unint64_t SharedFlowPluginServiceConnectionError.description.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD00000000000004DLL;
  else
    return 0xD00000000000003ALL;
}

uint64_t closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _BYTE v10[24];

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v0);
  v2 = &v10[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for TaskPriority();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  v5 = one-time initialization token for shared;
  swift_retain();
  if (v5 != -1)
    swift_once();
  swift_beginAccess();
  v6 = static MessageBusActor.shared;
  v7 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v6;
  v8[3] = v7;
  v8[4] = v4;
  swift_retain();
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v2, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:), (uint64_t)v8);
  return swift_release();
}

uint64_t closure #1 in closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 88) = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v4 + 96) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t Strong;
  void *v6;
  id v7;
  unsigned int v8;
  NSObject *v9;
  int v10;
  uint8_t *v11;
  uint64_t v12;
  _QWORD *v13;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "Connection to SharedFlowPluginXPCServer got invalidated", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v6 = *(void **)(Strong + 16);
    if (v6)
    {
      v7 = v6;
      swift_release();
      v8 = objc_msgSend(v7, sel_processIdentifier);

      if (!v8)
      {
        v9 = Logger.logObject.getter();
        v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, (os_log_type_t)v10))
        {
          v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v11 = 0;
          _os_log_impl(&dword_1B4BE6000, v9, (os_log_type_t)v10, "Execution process PID return is 0. Most likely the connection\ncould not be established to begin with", v11, 2u);
          MEMORY[0x1B5E44758](v11, -1, -1);
        }

      }
    }
    else
    {
      swift_release();
    }
  }
  swift_beginAccess();
  v12 = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 104) = v12;
  if (v12)
  {
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v13;
    *v13 = v0;
    v13[1] = closure #1 in closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    return SharedFlowPluginServiceClient.handleInvalidation()();
  }
  else
  {
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #3 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t result;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;

  if (one-time initialization token for executor != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B4BE6000, v1, v2, "SharedFlowPluginService crashed. It is unlikely that this is a platform bug: it usually indicates a fatal error in a flow plugin. Check device crashlogs to inspect cause.", v3, 2u);
    MEMORY[0x1B5E44758](v3, -1, -1);
  }

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    Logger.debugF(file:function:)();
    v6 = *(void **)(v5 + 16);
    if (v6)
    {
      v7 = v6;
      swift_unknownObjectRetain();
      objc_msgSend(v7, sel_invalidate);
      swift_unknownObjectRelease();

      v8 = *(void **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v8);
    }
    return swift_release();
  }
  return result;
}

void closure #4 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;

  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = a1;
  v4 = a1;
  oslog = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v11 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue();
    v8 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, oslog, v5, "Cannot set up connection with SharedFlowPluginService:\n%s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);

  }
  else
  {

  }
}

uint64_t SharedFlowPluginServiceClient.LoadedConversationTracker.getLoadedConversation(serial:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  char v5;
  void (*v6)(uint64_t *__return_ptr, uint64_t);
  uint64_t v7;
  uint64_t v9;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (!*(_QWORD *)(v3 + 16))
    return 0;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v3 + 56) + 16 * v4);
  v7 = swift_retain();
  v6(&v9, v7);
  swift_release();
  return v9;
}

_QWORD *SharedFlowPluginServiceClient.LoadedConversationTracker.knownSerials.getter()
{
  uint64_t v0;
  _QWORD *v1;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

Swift::Void __swiftcall SharedFlowPluginServiceClient.LoadedConversationTracker.removeAll()()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
}

uint64_t SharedFlowPluginServiceClient.LoadedConversationTracker.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SharedFlowPluginServiceClient.LoadedConversationTracker.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t SharedFlowPluginServiceClient.LoadedConversationTracker.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t SharedFlowPluginServiceClient.deinit()
{
  uint64_t v0;

  outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(*(void **)(v0 + 16));
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  return v0;
}

uint64_t SharedFlowPluginServiceClient.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(*(void **)(v0 + 16));
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  return swift_deallocClassInstance();
}

NSXPCConnection_optional __swiftcall SharedFlowPluginServiceXPCConnectionProvider.getXPCConnection()()
{
  id v0;
  void *v1;
  objc_class *v2;
  Swift::Bool v3;
  objc_class *v4;
  NSXPCConnection_optional result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_currentContext);
  v1 = (void *)MEMORY[0x1B5E432E8](0xD000000000000029, 0x80000001B4F01CB0);
  v2 = (objc_class *)objc_msgSend(v0, sel_createXPCConnectionWithMachServiceName_options_, v1, 0);

  v4 = v2;
  result.value.super.isa = v4;
  result.is_nil = v3;
  return result;
}

id protocol witness for SharedFlowPluginServiceXPCConnectionProviding.getXPCConnection() in conformance SharedFlowPluginServiceXPCConnectionProvider()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_currentContext);
  v1 = (void *)MEMORY[0x1B5E432E8](0xD000000000000029, 0x80000001B4F01CB0);
  v2 = objc_msgSend(v0, sel_createXPCConnectionWithMachServiceName_options_, v1, 0);

  return v2;
}

BOOL static SharedFlowPluginServiceConnectionError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void SharedFlowPluginServiceConnectionError.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int SharedFlowPluginServiceConnectionError.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SharedFlowPluginServiceConnectionError()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000004DLL;
  else
    return 0xD00000000000003ALL;
}

_QWORD *specialized SharedFlowPluginServiceClient.init(connectionProvider:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  a4[10] = a5;
  a4[11] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4 + 7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(boxed_opaque_existential_1, a1, a5);
  type metadata accessor for SharedFlowPluginServiceClient.LoadedConversationTracker();
  a4[2] = 0;
  a4[3] = 0;
  v12 = swift_allocObject();
  v13 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v12 + 16) = MEMORY[0x1E0DEE9E0];
  a4[4] = v12;
  a4[5] = 0;
  type metadata accessor for InterruptibleTaskManager();
  v14 = (_QWORD *)swift_allocObject();
  v14[4] = v13;
  v14[5] = 0;
  v14[2] = 0xD00000000000001DLL;
  v14[3] = 0x80000001B4EEFB70;
  a4[6] = v14;
  a4[12] = a2;
  a4[13] = a3;
  return a4;
}

_QWORD *specialized SharedFlowPluginServiceClient.__allocating_init(connectionProvider:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v16;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a5);
  return specialized SharedFlowPluginServiceClient.init(connectionProvider:onConnectionInterrupted:)((uint64_t)v13, a2, a3, v14, a5, a6);
}

uint64_t sub_1B4EA0638()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;

  v1 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v3 = v2 + v1[7];
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_release();

  v6 = (uint64_t *)(v2 + v1[11]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(*v6, v7);
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)partial apply(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                                      - 8)
                          + 80);
  v12 = *(_OWORD *)(v2 + 32);
  v13 = *(_OWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 48);
  v8 = *(_QWORD *)(v2 + 56);
  v9 = v2 + ((v6 + 64) & ~v6);
  v10 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v10;
  *(_QWORD *)v10 = v3;
  *(_QWORD *)(v10 + 8) = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v10 + 72) = v8;
  *(_QWORD *)(v10 + 80) = v9;
  *(_QWORD *)(v10 + 64) = v7;
  *(_OWORD *)(v10 + 32) = v13;
  *(_OWORD *)(v10 + 48) = v12;
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  return swift_task_switch();
}

uint64_t sub_1B4EA080C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SharedFlowPluginServiceClient.LoadedConversationTracker.registerLoadedConversation(_:serial:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for SharedFlowPluginServiceClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for SharedFlowPluginServiceClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharedFlowPluginServiceClient.__allocating_init(connectionProvider:onConnectionInterrupted:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t type metadata accessor for SharedFlowPluginServiceClient.LoadedConversationTracker()
{
  return objc_opt_self();
}

uint64_t method lookup function for SharedFlowPluginServiceClient.LoadedConversationTracker()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharedFlowPluginServiceClient.LoadedConversationTracker.registerLoadedConversation(_:serial:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of SharedFlowPluginServiceClient.LoadedConversationTracker.getLoadedConversation(serial:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of SharedFlowPluginServiceClient.LoadedConversationTracker.releaseLoadedConversation(serial:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of SharedFlowPluginServiceClient.LoadedConversationTracker.knownSerials.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of SharedFlowPluginServiceClient.LoadedConversationTracker.removeAll()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SharedFlowPluginServiceClient.LoadedConversationTracker.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of SharedFlowPluginServiceXPCConnectionProviding.getXPCConnection()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for SharedFlowPluginServiceXPCConnectionProvider()
{
  return &type metadata for SharedFlowPluginServiceXPCConnectionProvider;
}

uint64_t storeEnumTagSinglePayload for SharedFlowPluginServiceConnectionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B4EA09C8 + 4 * byte_1B4EEFA65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B4EA09FC + 4 * asc_1B4EEFA60[v4]))();
}

uint64_t sub_1B4EA09FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EA0A04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4EA0A0CLL);
  return result;
}

uint64_t sub_1B4EA0A18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4EA0A20);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B4EA0A24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EA0A2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharedFlowPluginServiceConnectionError()
{
  return &type metadata for SharedFlowPluginServiceConnectionError;
}

_QWORD *initializeBufferWithCopyOfBuffer for SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection(id *a1)
{

  return swift_unknownObjectRelease();
}

uint64_t assignWithCopy for SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

id *assignWithTake for SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection(id *a1, _OWORD *a2)
{

  *(_OWORD *)a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

void *type metadata accessor for SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection()
{
  return &unk_1E6852C70;
}

uint64_t sub_1B4EA0B48()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(a1, v4, v5, v6);
}

void partial apply for closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(void **)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_1B4EA0C10()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Never>);
}

uint64_t partial apply for closure #1 in closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1B4EA0C28()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

void *SharedFlowPluginXPCServer.machServiceName.unsafeMutableAddressor()
{
  return &static SharedFlowPluginXPCServer.machServiceName;
}

unint64_t static SharedFlowPluginXPCServer.machServiceName.getter()
{
  return 0xD000000000000029;
}

id SharedFlowPluginXPCServer.listener.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___SKRSharedFlowPluginXPCServer_listener);
}

id SharedFlowPluginXPCServer.init()()
{
  void *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  objc_super v8;
  _OWORD v9[2];
  uint64_t v10;

  v1 = one-time initialization token for executor;
  v2 = v0;
  if (v1 != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  type metadata accessor for SharedFlowPluginService();
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  swift_allocObject();
  SharedFlowPluginService.init(overrideFlowLoader:overrideSiriKitRuntime:)((uint64_t)v9, 0);
  v4 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedFlowPluginXPCServer.Listener());
  v5 = swift_retain();
  *(_QWORD *)&v2[OBJC_IVAR___SKRSharedFlowPluginXPCServer_listener] = specialized SharedFlowPluginXPCServer.Listener.init(sharedFlowPluginService:)(v5, v4);

  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for SharedFlowPluginXPCServer();
  v6 = objc_msgSendSuper2(&v8, sel_init);
  swift_release();
  return v6;
}

uint64_t SharedFlowPluginXPCServer.Listener.__allocating_init(sharedFlowPluginService:)(uint64_t a1)
{
  swift_getObjectType();
  return specialized SharedFlowPluginXPCServer.Listener.__allocating_init(sharedFlowPluginService:)(a1);
}

id one-time initialization function for xpcInterface()
{
  id v0;
  uint64_t v1;
  id result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EF0F6488);
  if (one-time initialization token for remoteConversationXPCInterface != -1)
    swift_once();
  v1 = static RemoteConversationXPCHelper.remoteConversationXPCInterface;
  objc_msgSend(v0, sel_setInterface_forSelector_argumentIndex_ofReply_, static RemoteConversationXPCHelper.remoteConversationXPCInterface, sel_startTurnWithTurnData_bridge_reply_, 1, 0);
  result = objc_msgSend(v0, sel_setInterface_forSelector_argumentIndex_ofReply_, v1, sel_loadFlowPluginWithBundleId_bundlePath_rcId_hypothesisId_reply_, 0, 1);
  static SharedFlowPluginXPCServer.xpcInterface = (uint64_t)v0;
  return result;
}

id static SharedFlowPluginXPCServer.xpcInterface.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for xpcInterface, (id *)&static SharedFlowPluginXPCServer.xpcInterface);
}

uint64_t one-time initialization function for xpcConnectionQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  _QWORD v11[2];

  v0 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v0);
  v1 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for DispatchQoS.QoSClass();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF8D8], v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF530], v2);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  static DispatchQoS.unspecified.getter();
  v11[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static SharedFlowPluginXPCServer.Listener.xpcConnectionQueue = result;
  return result;
}

uint64_t *SharedFlowPluginXPCServer.Listener.xpcConnectionQueue.unsafeMutableAddressor()
{
  if (one-time initialization token for xpcConnectionQueue != -1)
    swift_once();
  return &static SharedFlowPluginXPCServer.Listener.xpcConnectionQueue;
}

id static SharedFlowPluginXPCServer.Listener.xpcConnectionQueue.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for xpcConnectionQueue, (id *)&static SharedFlowPluginXPCServer.Listener.xpcConnectionQueue);
}

uint64_t SharedFlowPluginXPCServer.Listener.sharedFlowPluginService.getter()
{
  return swift_unknownObjectRetain();
}

id SharedFlowPluginXPCServer.Listener.listener.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime25SharedFlowPluginXPCServer8Listener_listener);
}

uint64_t SharedFlowPluginXPCServer.Listener.init(sharedFlowPluginService:)(uint64_t a1)
{
  char *v1;

  swift_getObjectType();
  return specialized SharedFlowPluginXPCServer.Listener.init(sharedFlowPluginService:)(a1, v1);
}

Swift::Bool __swiftcall SharedFlowPluginXPCServer.Listener.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized SharedFlowPluginXPCServer.Listener.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

id SharedFlowPluginXPCServer.Listener.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SharedFlowPluginXPCServer.Listener.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SharedFlowPluginXPCServer.Listener.__deallocating_deinit()
{
  return SharedFlowPluginXPCServer.Listener.__deallocating_deinit(type metadata accessor for SharedFlowPluginXPCServer.Listener);
}

id SharedFlowPluginXPCServer.__deallocating_deinit()
{
  return SharedFlowPluginXPCServer.Listener.__deallocating_deinit(type metadata accessor for SharedFlowPluginXPCServer);
}

id SharedFlowPluginXPCServer.Listener.__deallocating_deinit(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for SharedFlowPluginXPCServer.Listener()
{
  return objc_opt_self();
}

uint64_t specialized SharedFlowPluginXPCServer.Listener.__allocating_init(sharedFlowPluginService:)(uint64_t a1)
{
  char *v2;

  v2 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedFlowPluginXPCServer.Listener());
  return specialized SharedFlowPluginXPCServer.Listener.init(sharedFlowPluginService:)(a1, v2);
}

uint64_t specialized SharedFlowPluginXPCServer.Listener.init(sharedFlowPluginService:)(uint64_t a1, char *a2)
{
  void *v3;
  char *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t result;
  objc_super v11;

  *(_QWORD *)&a2[OBJC_IVAR____TtCC14SiriKitRuntime25SharedFlowPluginXPCServer8Listener_sharedFlowPluginService] = a1;
  v3 = (void *)objc_opt_self();
  v4 = a2;
  swift_retain();
  v5 = objc_msgSend(v3, sel_currentContext);
  v6 = (void *)MEMORY[0x1B5E432E8](0xD000000000000029, 0x80000001B4F01CB0);
  v7 = objc_msgSend(v5, sel_createXPCListenerWithMachServiceName_, v6);

  if (v7)
  {
    *(_QWORD *)&v4[OBJC_IVAR____TtCC14SiriKitRuntime25SharedFlowPluginXPCServer8Listener_listener] = v7;
    v8 = v7;

    v11.receiver = v4;
    v11.super_class = (Class)type metadata accessor for SharedFlowPluginXPCServer.Listener();
    v9 = objc_msgSendSuper2(&v11, sel_init);
    objc_msgSend(v8, sel_setDelegate_, v9);
    objc_msgSend(v8, sel_resume);

    swift_release();
    return (uint64_t)v9;
  }
  else
  {
    result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000001ELL, 0x80000001B4F01F40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/SharedFlowPluginService/SharedFlowPluginXPCServer.swift", 143, 2, 67);
    __break(1u);
  }
  return result;
}

{
  void *v3;
  char *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t result;
  objc_super v11;

  *(_QWORD *)&a2[OBJC_IVAR____TtCC14SiriKitRuntime25SharedFlowPluginXPCServer8Listener_sharedFlowPluginService] = a1;
  v3 = (void *)objc_opt_self();
  v4 = a2;
  swift_unknownObjectRetain();
  v5 = objc_msgSend(v3, sel_currentContext);
  v6 = (void *)MEMORY[0x1B5E432E8](0xD000000000000029, 0x80000001B4F01CB0);
  v7 = objc_msgSend(v5, sel_createXPCListenerWithMachServiceName_, v6);

  if (v7)
  {
    *(_QWORD *)&v4[OBJC_IVAR____TtCC14SiriKitRuntime25SharedFlowPluginXPCServer8Listener_listener] = v7;
    v8 = v7;

    v11.receiver = v4;
    v11.super_class = (Class)type metadata accessor for SharedFlowPluginXPCServer.Listener();
    v9 = objc_msgSendSuper2(&v11, sel_init);
    objc_msgSend(v8, sel_setDelegate_, v9);
    objc_msgSend(v8, sel_resume);

    swift_unknownObjectRelease();
    return (uint64_t)v9;
  }
  else
  {
    result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000001ELL, 0x80000001B4F01F40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/SharedFlowPluginService/SharedFlowPluginXPCServer.swift", 143, 2, 67);
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for SharedFlowPluginXPCServer()
{
  return objc_opt_self();
}

uint64_t specialized SharedFlowPluginXPCServer.Listener.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v2 = v1;
  if (one-time initialization token for executor != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1B4BE6000, v5, v6, "SharedFlowPluginXPCServer accepting new connection", v7, 2u);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  if (one-time initialization token for xpcInterface != -1)
    swift_once();
  objc_msgSend(a1, sel_setExportedInterface_, static SharedFlowPluginXPCServer.xpcInterface);
  objc_msgSend(a1, sel_setExportedObject_, *(_QWORD *)(v2 + OBJC_IVAR____TtCC14SiriKitRuntime25SharedFlowPluginXPCServer8Listener_sharedFlowPluginService));
  if (one-time initialization token for xpcConnectionQueue != -1)
    swift_once();
  objc_msgSend(a1, sel__setQueue_, static SharedFlowPluginXPCServer.Listener.xpcConnectionQueue);
  objc_msgSend(a1, sel_resume);
  return 1;
}

uint64_t method lookup function for SharedFlowPluginXPCServer.Listener()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SharedFlowPluginXPCServer.Listener.__allocating_init(sharedFlowPluginService:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SharedFlowPluginXPCServer.Listener.listener(_:shouldAcceptNewConnection:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

uint64_t SimpleOrderedDictionary.init()()
{
  uint64_t v0;

  v0 = Dictionary.init()();
  Array.init()();
  return v0;
}

uint64_t SimpleOrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  void (*v24)(char *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;

  v4 = v3;
  v26 = a2;
  v29 = a1;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v10 + 24);
  v12 = type metadata accessor for Optional();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v24 - v17;
  v19 = *v4;
  v20 = v26;
  MEMORY[0x1B5E4327C](v26, v19, v6, v11, *(_QWORD *)(a3 + 32));
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v18, 1, v11);
  v28 = *(void (**)(char *, uint64_t))(v13 + 8);
  v28(v18, v12);
  v30 = v7;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v24(v9, v20, v6);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v22 = v29;
  v27 = v12;
  v21(v16, v29, v12);
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  if (v25 == 1)
  {
    v24(v9, v20, v6);
    type metadata accessor for Array();
    Array.append(_:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v20, v6);
  return ((uint64_t (*)(uint64_t, uint64_t))v28)(v22, v27);
}

uint64_t SimpleOrderedDictionary.snapshot()(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void SimpleOrderedDictionary.subscript.getter()
{
  JUMPOUT(0x1B5E4327CLL);
}

uint64_t SimpleOrderedDictionary.values()()
{
  return SimpleOrderedDictionary.values()();
}

{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF38], v0);
  v1 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t SimpleOrderedDictionary.wrappedDict.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*SimpleOrderedDictionary.wrappedDict.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SimpleOrderedDictionary.insertionOrder.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SimpleOrderedDictionary.insertionOrder.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*SimpleOrderedDictionary.insertionOrder.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t key path setter for SimpleOrderedDictionary.subscript(_:) : <A, B>SimpleOrderedDictionary<A, B>AB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v6 = *(_QWORD *)(a4 + a3 - 24);
  v7 = *(_QWORD *)(a4 + a3 - 16);
  v8 = *(_QWORD *)(a4 + a3 - 8);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v19 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v19 - v14, a3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  v17 = type metadata accessor for SimpleOrderedDictionary(0, v6, v7, v8);
  return SimpleOrderedDictionary.subscript.setter((uint64_t)v13, (uint64_t)v15, v17);
}

void (*SimpleOrderedDictionary.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3))(uint64_t **a1, char a2)
{
  _QWORD *v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;

  v7 = malloc(0x50uLL);
  *a1 = v7;
  *v7 = a3;
  v7[1] = v3;
  v8 = a3[3];
  v9 = type metadata accessor for Optional();
  v7[2] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[3] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[4] = malloc(v11);
  v12 = malloc(v11);
  v13 = a3[2];
  v7[5] = v12;
  v7[6] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[7] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v7[8] = malloc(v15);
  v7[9] = malloc(v15);
  (*(void (**)(void))(v14 + 16))();
  MEMORY[0x1B5E4327C](a2, *v3, v13, v8, a3[4]);
  return SimpleOrderedDictionary.subscript.modify;
}

void SimpleOrderedDictionary.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = (void *)(*a1)[8];
  v4 = (void *)(*a1)[9];
  if ((a2 & 1) != 0)
  {
    v5 = v2[7];
    v11 = v2[6];
    v7 = (void *)v2[4];
    v6 = (void *)v2[5];
    v8 = v2[2];
    v9 = v2[3];
    v10 = *v2;
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v7, v6, v8);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v3, v4, v11);
    SimpleOrderedDictionary.subscript.setter((uint64_t)v7, (uint64_t)v3, v10);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    v7 = (void *)v2[4];
    v6 = (void *)v2[5];
    SimpleOrderedDictionary.subscript.setter((uint64_t)v6, (uint64_t)v4, *v2);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);
  free(v2);
}

uint64_t SimpleOrderedDictionary.keys()()
{
  return swift_bridgeObjectRetain();
}

uint64_t ImmutableSimpleOrderedDictionary.items()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  Swift::Bool IsNativeType;
  void (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;

  v47 = a1;
  v48 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1E0C80A78](TupleTypeMetadata2);
  v44 = (char *)&v37 - v9;
  v10 = type metadata accessor for Optional();
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v37 - v12;
  v49 = a4;
  v14 = *(_QWORD *)(a4 - 8);
  v15 = MEMORY[0x1E0C80A78](v11);
  v41 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a3 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v19 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v50 = (char *)&v37 - v21;
  v45 = TupleTypeMetadata2;
  v22 = static Array._allocateUninitialized(_:)();
  v52 = v22;
  v23 = swift_bridgeObjectRetain();
  if (MEMORY[0x1B5E43558](v23, a3))
  {
    v37 = v18;
    v38 = v17;
    v24 = 0;
    v39 = a2;
    v40 = v13;
    v46 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    while (1)
    {
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        v33 = *(void (**)(char *, unint64_t, uint64_t))(v17 + 16);
        v33(v50, a2+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v24, a3);
        v34 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_12;
      }
      else
      {
        result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v37 != 8)
        {
          __break(1u);
          return result;
        }
        v51 = result;
        v33 = *(void (**)(char *, unint64_t, uint64_t))(v17 + 16);
        v33(v50, (unint64_t)&v51, a3);
        swift_unknownObjectRelease();
        v34 = v24 + 1;
        if (__OFADD__(v24, 1))
        {
LABEL_12:
          __break(1u);
LABEL_13:
          swift_bridgeObjectRelease();
          return v52;
        }
      }
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v50, a3);
      v35 = v49;
      MEMORY[0x1B5E4327C](v20, v47, a3, v49, v48);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v35) == 1)
      {
        (*(void (**)(char *, uint64_t))(v17 + 8))(v20, a3);
        (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v43);
      }
      else
      {
        v25 = v41;
        v26 = v49;
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v41, v13, v49);
        v27 = v26;
        v28 = &v44[*(int *)(v45 + 48)];
        v33(v44, (unint64_t)v46, a3);
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v28, v25, v27);
        type metadata accessor for Array();
        v29 = v27;
        a2 = v39;
        v13 = v40;
        Array.append(_:)();
        v30 = v25;
        v20 = v46;
        v31 = v29;
        v17 = v38;
        (*(void (**)(char *, uint64_t))(v14 + 8))(v30, v31);
        (*(void (**)(char *, uint64_t))(v17 + 8))(v20, a3);
      }
      ++v24;
      if (v34 == MEMORY[0x1B5E43558](a2, a3))
        goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t partial apply for closure #1 in SimpleOrderedDictionary.values()(uint64_t a1)
{
  return partial apply for closure #1 in SimpleOrderedDictionary.values()(a1);
}

{
  _QWORD *v1;

  return MEMORY[0x1B5E4327C](a1, v1[5], v1[2], v1[3], v1[4]);
}

uint64_t ImmutableSimpleOrderedDictionary.insertionOrder.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ImmutableSimpleOrderedDictionary.values()()
{
  return SimpleOrderedDictionary.values()();
}

void sub_1B4EA22A0()
{
  SimpleOrderedDictionary.subscript.getter();
}

uint64_t sub_1B4EA22C0()
{
  return 24;
}

__n128 sub_1B4EA22CC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata instantiation function for SimpleOrderedDictionary()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for SimpleOrderedDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SimpleOrderedDictionary);
}

uint64_t type metadata accessor for ImmutableSimpleOrderedDictionary(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ImmutableSimpleOrderedDictionary);
}

uint64_t SiriAceLocationProvider.defaultTimeout.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for defaultTimeout != -1)
    swift_once();
  v0 = type metadata accessor for DispatchTimeInterval();
  return __swift_project_value_buffer(v0, (uint64_t)static SiriAceLocationProvider.defaultTimeout);
}

uint64_t static SiriAceLocationProvider.defaultTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultTimeout != -1)
    swift_once();
  v2 = type metadata accessor for DispatchTimeInterval();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static SiriAceLocationProvider.defaultTimeout);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t SiriAceLocationProvider.requestOrigin(searchTimeout:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized SiriAceLocationProvider.requestOrigin(searchTimeout:)
                                       + async function pointer to specialized SiriAceLocationProvider.requestOrigin(searchTimeout:));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v5(a1);
}

Swift::Double __swiftcall DispatchTimeInterval.toSeconds()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  int v6;
  double v8;
  double v9;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for DispatchTimeInterval();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E0DEF4A0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    return (double)*v5;
  }
  if (v6 == *MEMORY[0x1E0DEF490])
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    v8 = (double)*v5;
    v9 = 1000.0;
  }
  else if (v6 == *MEMORY[0x1E0DEF488])
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    v8 = (double)*v5;
    v9 = 1000000.0;
  }
  else
  {
    if (v6 != *MEMORY[0x1E0DEF480])
    {
      (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
      return 9.22337204e18;
    }
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    v8 = (double)*v5;
    v9 = 1000000000.0;
  }
  return v8 / v9;
}

uint64_t protocol witness for SiriLocationProvider.requestOrigin(searchTimeout:) in conformance SiriAceLocationProvider(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized SiriAceLocationProvider.requestOrigin(searchTimeout:)
                                       + async function pointer to specialized SiriAceLocationProvider.requestOrigin(searchTimeout:));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v5(a1);
}

uint64_t specialized SiriAceLocationProvider.requestOrigin(searchTimeout:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[12] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  v1[13] = swift_task_alloc();
  v2 = type metadata accessor for DispatchTimeInterval();
  v1[14] = v2;
  v1[15] = *(_QWORD *)(v2 - 8);
  v1[16] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 152) = a1;
  *(_QWORD *)(v3 + 160) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized SiriAceLocationProvider.requestOrigin(searchTimeout:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Class isa;
  id v11;
  _QWORD *v12;

  v1 = v0[14];
  v2 = v0[15];
  v3 = v0[13];
  outlined init with copy of DispatchTimeInterval?(v0[12], v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    if (one-time initialization token for defaultTimeout != -1)
      swift_once();
    v5 = v0[15];
    v4 = v0[16];
    v7 = v0[13];
    v6 = v0[14];
    v8 = __swift_project_value_buffer(v6, (uint64_t)static SiriAceLocationProvider.defaultTimeout);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v6);
    outlined destroy of DispatchTimeInterval?(v7);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[15] + 32))(v0[16], v0[13], v0[14]);
  }
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88098]), sel_init);
  v0[17] = v9;
  objc_msgSend(v9, sel_setDesiredAccuracy_, *MEMORY[0x1E0D88700]);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  isa = NSNumber.init(integerLiteral:)(300).super.super.isa;
  objc_msgSend(v9, sel_setMaxAge_, isa);

  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, DispatchTimeInterval.toSeconds()());
  objc_msgSend(v9, sel_setSearchTimeout_, v11);

  static AceService.currentAsync.getter();
  __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
  v12 = (_QWORD *)swift_task_alloc();
  v0[18] = v12;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
  *v12 = v0;
  v12[1] = specialized SiriAceLocationProvider.requestOrigin(searchTimeout:);
  return AceServiceInvokerAsync.submit<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  v2 = *(void **)(v0 + 152);
  if (v1)
  {
    v3 = (void *)v1;
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(void **)(v0 + 136);
    v6 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 120);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    objc_msgSend(v3, sel_latitude);
    v9 = v8;
    objc_msgSend(v3, sel_longitude);
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C9E3B8]), sel_initWithLatitude_longitude_, v9, v10);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
  }
  else
  {

    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    if (one-time initialization token for executor != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(_QWORD *)(v0 + 128);
    v17 = *(void **)(v0 + 136);
    v18 = *(_QWORD *)(v0 + 112);
    v19 = *(_QWORD *)(v0 + 120);
    if (v15)
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "Unexpected command type response", v20, 2u);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
    v11 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(id))(v0 + 8))(v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(void **)(v0 + 160);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 128);
  v10 = *(void **)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 120);
  if (v7)
  {
    v19 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 120);
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v20 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_getErrorValue();
    v15 = Error.localizedDescription.getter();
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v5, v6, "Error getting current location: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v14, -1, -1);
    MEMORY[0x1B5E44758](v13, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v9, v19);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

ValueMetadata *type metadata accessor for SiriAceLocationProvider()
{
  return &type metadata for SiriAceLocationProvider;
}

uint64_t outlined init with copy of DispatchTimeInterval?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DispatchTimeInterval?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

SiriKitRuntime::SiriAudioAffinityScorer __swiftcall SiriAudioAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::SiriAudioAffinityScorer result;

  v0 = (void *)0x80000001B4EF6B80;
  v1 = 0xD00000000000002CLL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t SiriAudioAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized static SiriAudioAffinityScorer.isResumeApp(usoTask:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  _BYTE v13[32];

  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v13, (uint64_t)v11);
  if (v12)
  {
    type metadata accessor for UsoTask_resume_uso_NoEntity();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v0 = swift_retain();
      MEMORY[0x1B5E40810](v11, v0);
      swift_release();
      if (v11[0] && (v1 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter(), v2 = swift_release(), v1))
      {
        MEMORY[0x1B5E40150](v2);
        v4 = v3;
        swift_release();
        swift_release();
        if (v4)
        {
          swift_bridgeObjectRelease();
          outlined destroy of Any?((uint64_t)v13);
          return 1;
        }
      }
      else
      {
        swift_release();
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v11);
  }
  outlined init with copy of Any?((uint64_t)v13, (uint64_t)v11);
  if (!v12)
  {
    outlined destroy of Any?((uint64_t)v11);
    goto LABEL_17;
  }
  type metadata accessor for UsoTask_resume_common_MediaItem();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:
    outlined destroy of Any?((uint64_t)v13);
    return 0;
  }
  v5 = swift_retain();
  MEMORY[0x1B5E40810](v11, v5);
  swift_release();
  if (v11[0] && (v6 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter(), v7 = swift_release(), v6))
  {
    MEMORY[0x1B5E40150](v7);
    v9 = v8;
    swift_release();
    swift_release();
    outlined destroy of Any?((uint64_t)v13);
    if (v9)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v13);
    swift_release();
  }
  return 0;
}

ValueMetadata *type metadata accessor for SiriAudioAffinityScorer()
{
  return &type metadata for SiriAudioAffinityScorer;
}

uint64_t *SiriCAMAppDisambiguationFeatureFlag.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return &static SiriCAMAppDisambiguationFeatureFlag.forceEnabled;
}

uint64_t static SiriCAMAppDisambiguationFeatureFlag.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return swift_retain();
}

const char *SiriCAMAppDisambiguationFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *SiriCAMAppDisambiguationFeatureFlag.feature.getter()
{
  return "SKESiriCAMAppDisambiguation";
}

uint64_t SiriCAMAppDisambiguationFeatureFlag.isEnabled.getter()
{
  unsigned __int8 *v0;
  os_unfair_lock_s *v1;
  unsigned __int8 v3;

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  v0 = (unsigned __int8 *)(static SiriCAMAppDisambiguationFeatureFlag.forceEnabled + 16);
  v1 = (os_unfair_lock_s *)(static SiriCAMAppDisambiguationFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static SiriCAMAppDisambiguationFeatureFlag.forceEnabled + 20));
  closure #1 in SiriCAMAppDisambiguationFeatureFlag.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

unsigned __int8 *closure #1 in SiriCAMAppDisambiguationFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  char v4;
  char v5;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;

  v3 = *result;
  if (v3 == 2)
  {
    v7 = &type metadata for SiriCAMAppDisambiguationFeatureFlag;
    v8 = lazy protocol witness table accessor for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag();
    v4 = isFeatureEnabled(_:)();
    result = (unsigned __int8 *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    v5 = v4 & 1;
  }
  else
  {
    v5 = v3 & 1;
  }
  *a2 = v5;
  return result;
}

uint64_t static SiriCAMAppDisambiguationFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void SiriCAMAppDisambiguationFeatureFlag.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int SiriCAMAppDisambiguationFeatureFlag.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag;
  if (!lazy protocol witness table cache variable for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriCAMAppDisambiguationFeatureFlag, &type metadata for SiriCAMAppDisambiguationFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag;
  if (!lazy protocol witness table cache variable for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriCAMAppDisambiguationFeatureFlag, &type metadata for SiriCAMAppDisambiguationFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriCAMAppDisambiguationFeatureFlag()
{
  return "SKESiriCAMAppDisambiguation";
}

uint64_t storeEnumTagSinglePayload for SiriCAMAppDisambiguationFeatureFlag(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4EA333C + 4 * asc_1B4EEFE50[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4EA335C + 4 * byte_1B4EEFE55[v4]))();
}

_BYTE *sub_1B4EA333C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4EA335C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4EA3364(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4EA336C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4EA3374(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4EA337C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SiriCAMAppDisambiguationFeatureFlag()
{
  return &type metadata for SiriCAMAppDisambiguationFeatureFlag;
}

SiriKitRuntime::SiriClockFlowAffinityScorer __swiftcall SiriClockFlowAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::SiriClockFlowAffinityScorer result;

  v0 = (void *)0x80000001B4EF6BB0;
  v1 = 0xD00000000000001ELL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t SiriClockFlowAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t SiriClockFlowAffinityScorer.ClockRequestType.rawValue.getter(char a1)
{
  return qword_1B4EF0038[a1];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SiriClockFlowAffinityScorer.ClockRequestType(char *a1, char *a2)
{
  char v2;

  if (qword_1B4EF0038[*a1] == qword_1B4EF0038[*a2])
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SiriClockFlowAffinityScorer.ClockRequestType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SiriClockFlowAffinityScorer.ClockRequestType()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SiriClockFlowAffinityScorer.ClockRequestType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SiriClockFlowAffinityScorer.ClockRequestType@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized SiriClockFlowAffinityScorer.ClockRequestType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SiriClockFlowAffinityScorer.ClockRequestType(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1B4EF0038[*v1];
  a1[1] = 0xE800000000000000;
}

uint64_t static SiriClockFlowAffinityScorer.componentOffset(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  MEMORY[0x1E0C80A78](v2);
  v42 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  MEMORY[0x1E0C80A78](v4);
  v44 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DateComponents();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v43 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UsoEntity_common_Date.DefinedValues();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v41 - v17;
  v19 = dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  if (!v46)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, 1, 1, v6);
  v45 = v6;
  v20 = MEMORY[0x1B5E402E8](v19);
  if (!v20)
  {
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, 1, 1, v45);
  }
  v21 = v20;
  MEMORY[0x1B5E401C8]();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, 1, 1, v45);
  }
  v41 = v21;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  v23 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v16, v12);
  if (v23 == *MEMORY[0x1E0DA1108])
  {
    v24 = type metadata accessor for Calendar();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v44, 1, 1, v24);
    v25 = type metadata accessor for TimeZone();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v42, 1, 1, v25);
    v26 = v43;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    DateComponents.day.setter();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    v27 = v45;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v26, v45);
    v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v29 = a1;
LABEL_13:
    v35 = 0;
    v36 = v27;
    return v28(v29, v35, 1, v36);
  }
  v30 = a1;
  if (v23 == *MEMORY[0x1E0DA10F8] || (v31 = v45, v23 == *MEMORY[0x1E0DA10F0]))
  {
    v32 = type metadata accessor for Calendar();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v44, 1, 1, v32);
    v33 = type metadata accessor for TimeZone();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v42, 1, 1, v33);
    v34 = v43;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    DateComponents.day.setter();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    v27 = v45;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v30, v34, v45);
    v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v29 = v30;
    goto LABEL_13;
  }
  if (v23 == *MEMORY[0x1E0DA1100])
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    swift_release();
    swift_release();
    v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v29 = v30;
    v35 = 1;
LABEL_19:
    v36 = v31;
    return v28(v29, v35, 1, v36);
  }
  if (v23 == *MEMORY[0x1E0DA10E8])
  {
    v37 = type metadata accessor for Calendar();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v44, 1, 1, v37);
    v38 = type metadata accessor for TimeZone();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v42, 1, 1, v38);
    v39 = v43;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    DateComponents.day.setter();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v30, v39, v31);
    v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v29 = v30;
    v35 = 0;
    goto LABEL_19;
  }
  v40 = *(void (**)(char *, uint64_t))(v13 + 8);
  v40(v18, v12);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v30, 1, 1, v31);
  return ((uint64_t (*)(char *, uint64_t))v40)(v16, v12);
}

uint64_t specialized static SiriClockFlowAffinityScorer.requestType(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v0 = MEMORY[0x1B5E4075C](&v11);
  if (v11
    && (v1 = MEMORY[0x1B5E402E8](v0), v0 = (_QWORD *)swift_release(), v1)
    && (v2 = MEMORY[0x1B5E401BC](v0), v0 = (_QWORD *)swift_release(), v2))
  {
    swift_release();
  }
  else
  {
    v3 = MEMORY[0x1B5E4075C](&v11, v0);
    if (v11)
    {
      v4 = MEMORY[0x1B5E402F4](v3);
      v3 = (_QWORD *)swift_release();
      if (v4)
      {
        swift_release();
        return 0;
      }
    }
    v6 = MEMORY[0x1B5E4075C](&v11, v3);
    if (v11)
    {
      v7 = MEMORY[0x1B5E402E8](v6);
      v6 = (_QWORD *)swift_release();
      if (v7)
      {
        v8 = MEMORY[0x1B5E401B0](v6);
        v6 = (_QWORD *)swift_release();
        if (v8)
        {
          swift_release();
          return 2;
        }
      }
    }
    v9 = MEMORY[0x1B5E4075C](&v11, v6);
    if (v11)
    {
      v10 = MEMORY[0x1B5E402E8](v9);
      swift_release();
      if (v10)
      {
        swift_release();
        return 1;
      }
    }
  }
  return 3;
}

uint64_t specialized SiriClockFlowAffinityScorer.score(input:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  os_log_type_t v63;
  uint8_t *v64;
  _QWORD v66[7];
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  _QWORD v87[5];

  v0 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues();
  v1 = *(_QWORD *)(v0 - 8);
  v78 = v0;
  v79 = v1;
  v2 = MEMORY[0x1E0C80A78](v0);
  v66[0] = (char *)v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v2);
  v66[1] = (char *)v66 - v5;
  MEMORY[0x1E0C80A78](v4);
  v82 = (char *)v66 - v6;
  v81 = type metadata accessor for UsoEntity_common_Date.DefinedValues();
  v76 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81);
  v66[2] = (char *)v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Date.DefinedValues?, UsoEntity_common_Date.DefinedValues?));
  MEMORY[0x1E0C80A78](v67);
  v72 = (char *)v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v85 = (char *)v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v69 = (char *)v66 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v66[4] = (char *)v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v71 = (char *)v66 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v83 = (char *)v66 - v19;
  MEMORY[0x1E0C80A78](v18);
  v66[6] = (char *)v66 - v20;
  v70 = type metadata accessor for UsoEntity_common_DateTime.DefinedValues();
  v74 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v66[3] = (char *)v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_DateTime.DefinedValues?, UsoEntity_common_DateTime.DefinedValues?));
  MEMORY[0x1E0C80A78](v68);
  v75 = (char *)v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_DateTime.DefinedValues?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v66[5] = (char *)v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v73 = (char *)v66 - v27;
  MEMORY[0x1E0C80A78](v26);
  v77 = (char *)v66 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  MEMORY[0x1E0C80A78](v29);
  v80 = (char *)v66 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for Siri_Nlu_External_UserParse();
  v31 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84);
  v33 = (char *)v66 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v34);
  v36 = (char *)v66 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for USOParse();
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v40 = (char *)v66 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for Parse();
  v42 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v44 = (char *)v66 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v42 + 88))(v44, v41) == *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v42 + 96))(v44, v41);
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v40, v44, v37);
    v45 = USOParse.userParse.getter();
    v46 = MEMORY[0x1B5E3FA6C](v45);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v84);
    v47 = *(_QWORD *)(v46 + 16);
    v48 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    v49 = *(_QWORD *)(v48 - 8);
    v50 = v37;
    if (v47)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v49 + 16))(v36, v46 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80)), v48);
      v51 = 0;
    }
    else
    {
      v51 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v36, v51, 1, v48);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v36, 1, v48) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v36, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    }
    else
    {
      v56 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v48);
      if (v56)
      {
        swift_retain();
        static UsoTask_CodegenConverter.convert(task:)();
        swift_release();
        if (v87[3])
        {
          type metadata accessor for UsoTask_request_common_DateTime();
          if ((swift_dynamicCast() & 1) != 0)
          {
            v84 = v86;
            v57 = (char *)&loc_1B4EA4588
                + 4
                * byte_1B4EEFF30[specialized static SiriClockFlowAffinityScorer.requestType(for:)()];
            __asm { BR              X10 }
          }
        }
        else
        {
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v87, (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
        if (one-time initialization token for executor != -1)
          swift_once();
        v62 = type metadata accessor for Logger();
        __swift_project_value_buffer(v62, (uint64_t)static Logger.executor);
        v59 = Logger.logObject.getter();
        v63 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v59, v63))
        {
          v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v64 = 0;
          _os_log_impl(&dword_1B4BE6000, v59, v63, "SiriClockFlowAffinityScorer | Unsupported request", v64, 2u);
          MEMORY[0x1B5E44758](v64, -1, -1);
        }
        swift_release();
        goto LABEL_26;
      }
    }
    if (one-time initialization token for executor != -1)
      swift_once();
    v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)static Logger.executor);
    v59 = Logger.logObject.getter();
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v61 = 0;
      _os_log_impl(&dword_1B4BE6000, v59, v60, "SiriClockFlowAffinityScorer | Could not extract USO task", v61, 2u);
      MEMORY[0x1B5E44758](v61, -1, -1);
    }
LABEL_26:

    (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v50);
    return 0;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v52 = type metadata accessor for Logger();
  __swift_project_value_buffer(v52, (uint64_t)static Logger.executor);
  v53 = Logger.logObject.getter();
  v54 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v55 = 0;
    _os_log_impl(&dword_1B4BE6000, v53, v54, "SiriClockFlowAffinityScorer | Got unexpected parse", v55, 2u);
    MEMORY[0x1B5E44758](v55, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
  return 0;
}

unint64_t specialized SiriClockFlowAffinityScorer.ClockRequestType.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SiriClockFlowAffinityScorer.ClockRequestType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type SiriClockFlowAffinityScorer.ClockRequestType and conformance SiriClockFlowAffinityScorer.ClockRequestType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriClockFlowAffinityScorer.ClockRequestType and conformance SiriClockFlowAffinityScorer.ClockRequestType;
  if (!lazy protocol witness table cache variable for type SiriClockFlowAffinityScorer.ClockRequestType and conformance SiriClockFlowAffinityScorer.ClockRequestType)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriClockFlowAffinityScorer.ClockRequestType, &type metadata for SiriClockFlowAffinityScorer.ClockRequestType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriClockFlowAffinityScorer.ClockRequestType and conformance SiriClockFlowAffinityScorer.ClockRequestType);
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriClockFlowAffinityScorer()
{
  return &type metadata for SiriClockFlowAffinityScorer;
}

uint64_t storeEnumTagSinglePayload for SiriClockFlowAffinityScorer.ClockRequestType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B4EA5690 + 4 * byte_1B4EEFF39[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B4EA56C4 + 4 * byte_1B4EEFF34[v4]))();
}

uint64_t sub_1B4EA56C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EA56CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4EA56D4);
  return result;
}

uint64_t sub_1B4EA56E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4EA56E8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B4EA56EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EA56F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SiriClockFlowAffinityScorer.ClockRequestType()
{
  return &type metadata for SiriClockFlowAffinityScorer.ClockRequestType;
}

uint64_t SiriKitBiomeDonator.__allocating_init(_:backgroundTaskPriority:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = swift_allocObject();
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  v11 = specialized SiriKitBiomeDonator.init(_:backgroundTaskPriority:)((uint64_t)v9, a2, v4, v5, v6);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v11;
}

uint64_t *SiriKitBiomeDonator.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1)
    swift_once();
  return &static SiriKitBiomeDonator.instance;
}

uint64_t static SiriKitBiomeDonator.instance.getter()
{
  if (one-time initialization token for instance != -1)
    swift_once();
  return swift_retain();
}

id DefaultBiomeSource.init()()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_siriExecutionStream);
  v1 = objc_msgSend(v0, sel_source);

  return v1;
}

uint64_t SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  v11 = specialized SiriKitBiomeDonator.init(_:backgroundTaskPriority:)((uint64_t)v9, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v11;
}

uint64_t closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[5] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Iterator);
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;

  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 72) = __swift_project_value_buffer(v1, (uint64_t)static Logger.instrumentation);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "#SiriKitBiomeDonator - Background donation task started", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>);
  AsyncStream.makeAsyncIterator()();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v5;
  *v5 = v0;
  v5[1] = closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v1 = *(void **)(v0 + 16);
  if (!v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));

    swift_bridgeObjectRelease();
LABEL_5:
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "#SiriKitBiomeDonator - Background donation task stopped", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }

    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v8 = *(_QWORD **)(v0 + 40);
  v9 = v8[5];
  v10 = v8[6];
  __swift_project_boxed_opaque_existential_1(v8 + 2, v9);
  (*(void (**)(void *, uint64_t, uint64_t))(v10 + 8))(v1, v9, v10);
  swift_bridgeObjectRetain_n();
  v11 = v1;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v18 = v15;
    *(_DWORD *)v14 = 136315138;
    if (v2)
    {
      v16 = v2;
    }
    else
    {
      v3 = 0x3E6C696E3CLL;
      v16 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    *(_QWORD *)(v14 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v16, &v18);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v12, v13, "#SiriKitBiomeDonator - donated execution event to BIOME for taskId: %s", (uint8_t *)v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v15, -1, -1);
    MEMORY[0x1B5E44758](v14, -1, -1);

    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v17;
  *v17 = v0;
  v17[1] = closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:);
  return AsyncStream.Iterator.next(isolation:)();
}

Swift::Void __swiftcall SiriKitBiomeDonator.close()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  v1 = v0;
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.instrumentation);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "#SiriKitBiomeDonator - Requesting termination of the background worker", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_backgroundTask))
  {
    v6 = swift_retain();
    MEMORY[0x1B5E436B4](v6, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation);
  AsyncStream.Continuation.finish()();
}

uint64_t SiriKitBiomeDonator.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationStream;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationContinuation;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  return v0;
}

uint64_t SiriKitBiomeDonator.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationStream;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationContinuation;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  return swift_deallocClassInstance();
}

id DefaultBiomeSource.sendEvent(_:)(uint64_t a1, id a2)
{
  return objc_msgSend(a2, sel_sendEvent_, a1);
}

id protocol witness for BiomeSource.sendEvent(_:) in conformance DefaultBiomeSource(uint64_t a1)
{
  id *v1;

  return objc_msgSend(*v1, sel_sendEvent_, a1);
}

uint64_t specialized SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];

  v26 = a2;
  v24 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation.BufferingPolicy);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation);
  v11 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[3] = &type metadata for DefaultBiomeSource;
  v27[4] = &protocol witness table for DefaultBiomeSource;
  v27[0] = v24;
  *(_QWORD *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_backgroundTask) = 0;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v27, a3 + 16);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DF07B8], v7);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationStream, v17, v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationContinuation, v13, v25);
  v18 = type metadata accessor for TaskPriority();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v6, v26, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v6, 0, 1, v18);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = a3;
  swift_retain();
  v22 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:), (uint64_t)v21);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  outlined destroy of TaskPriority?((uint64_t)v6);
  *(_QWORD *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_backgroundTask) = v22;
  swift_release();
  return a3;
}

uint64_t specialized SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[5];

  v28 = a5;
  v29 = a1;
  v32 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation.BufferingPolicy);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation);
  v30 = *(_QWORD *)(v14 - 8);
  v31 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[3] = a4;
  v33[4] = v28;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, v29, a4);
  *(_QWORD *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_backgroundTask) = 0;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v33, a3 + 16);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E0DF07B8], v10);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationStream, v20, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationContinuation, v16, v31);
  v22 = type metadata accessor for TaskPriority();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v9, v32, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v9, 0, 1, v22);
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = a3;
  swift_retain();
  v26 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v9, (uint64_t)&closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:)partial apply, (uint64_t)v25);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v24, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  outlined destroy of TaskPriority?((uint64_t)v9);
  *(_QWORD *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_backgroundTask) = v26;
  swift_release();
  return a3;
}

uint64_t dispatch thunk of BiomeDonator.donateSiriExecutionTaskStep(activityType:eventTime:intentTypeName:appBundleId:requestId:slotName:statusReason:taskId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return (*(uint64_t (**)(void))(a16 + 8))();
}

uint64_t ObjC metadata update function for SiriKitBiomeDonator()
{
  return type metadata accessor for SiriKitBiomeDonator();
}

uint64_t type metadata accessor for SiriKitBiomeDonator()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SiriKitBiomeDonator;
  if (!type metadata singleton initialization cache for SiriKitBiomeDonator)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for SiriKitBiomeDonator()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for AsyncStream<SiriKitBiomeDonator.DonationEvent>(319, &lazy cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>, (uint64_t (*)(_QWORD, void *))MEMORY[0x1E0DF0838]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AsyncStream<SiriKitBiomeDonator.DonationEvent>(319, &lazy cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation, (uint64_t (*)(_QWORD, void *))MEMORY[0x1E0DF07E8]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for SiriKitBiomeDonator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriKitBiomeDonator.__allocating_init(_:backgroundTaskPriority:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

void type metadata accessor for AsyncStream<SiriKitBiomeDonator.DonationEvent>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, void *))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, &unk_1E68532D0);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t dispatch thunk of BiomeSource.sendEvent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for DefaultBiomeSource()
{
  return &type metadata for DefaultBiomeSource;
}

uint64_t destroy for SiriKitBiomeDonator.DonationEvent(id *a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for SiriKitBiomeDonator.DonationEvent(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SiriKitBiomeDonator.DonationEvent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SiriKitBiomeDonator.DonationEvent(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for SiriKitBiomeDonator.DonationEvent()
{
  return &unk_1E68532D0;
}

uint64_t partial apply for closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(a1, v4, v5, v6);
}

uint64_t closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:)partial apply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(a1, v4, v5, v6);
}

char **SiriKitExecutorSignpost.logAFAnalytics.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logAFAnalytics;
}

char **SiriKitExecutorSignpost.logRemoteAFAnalytics.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logRemoteAFAnalytics;
}

void *AmbiguityHandling.linkActionIdentifierUserDataKey.unsafeMutableAddressor()
{
  return &static AmbiguityHandling.linkActionIdentifierUserDataKey;
}

char **SiriKitExecutorSignpost.paraphraseTime.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.paraphraseTime;
}

char **SiriKitExecutorSignpost.executionTime.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.executionTime;
}

void *LogConst.Category.conversationBridge.unsafeMutableAddressor()
{
  return &static LogConst.Category.conversationBridge;
}

uint64_t ConversationInsightRequestSummaryMessageDescription.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4EA6B04
                                                                     + 4 * asc_1B4EF0140[a1]))(0xD00000000000001DLL, 0x80000001B4EF53D0);
}

uint64_t sub_1B4EA6B04()
{
  uint64_t v0;

  return v0 - 4;
}

char **SiriKitExecutorSignpost.loadPluginCatalog.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.loadPluginCatalog;
}

void *TaskMetricsConst.incompatibleEagerResultCandidateId.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.incompatibleEagerResultCandidateId;
}

char **SiriKitExecutorSignpost.fetchSpeechInfo.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.fetchSpeechInfo;
}

char **SiriKitExecutorSignpost.warmPlugin.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.warmPlugin;
}

char **SiriKitExecutorSignpost.referenceResolutionCollection.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.referenceResolutionCollection;
}

char **SiriKitExecutorSignpost.logDialogAnalytics.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logDialogAnalytics;
}

const char *GradingEvent.clientFlowView.unsafeMutableAddressor()
{
  return "ClientFlowView";
}

char **SiriKitExecutorSignpost.extensionBringup.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.extensionBringup;
}

char **SiriKitExecutorSignpost.loadAllFlowExtensions.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.loadAllFlowExtensions;
}

void *LogConst.subsystem.unsafeMutableAddressor()
{
  return &static LogConst.subsystem;
}

void *LogConst.Category.insightRequestSummary.unsafeMutableAddressor()
{
  return &static LogConst.Category.insightRequestSummary;
}

char **SiriKitExecutorSignpost.logLaunchAppAnalytics.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logLaunchAppAnalytics;
}

char **SiriKitExecutorSignpost.logLaunchAppSparseObject.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logLaunchAppSparseObject;
}

char **SiriKitExecutorSignpost.linkMetadataCollection.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.linkMetadataCollection;
}

char **SiriKitExecutorSignpost.meCardLookup.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.meCardLookup;
}

char **SiriKitExecutorSignpost.runAffinityScorer.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.runAffinityScorer;
}

char **SiriKitExecutorSignpost.logSayItAnalytics.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logSayItAnalytics;
}

char **SiriKitExecutorSignpost.logSayItSparseObject.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logSayItSparseObject;
}

const char *TaskMetricsConst.none.unsafeMutableAddressor()
{
  return "none";
}

unint64_t static LogConst.subsystem.getter()
{
  return 0xD000000000000016;
}

void *LogConst.Category.siriKitExecutor.unsafeMutableAddressor()
{
  return &static LogConst.Category.siriKitExecutor;
}

uint64_t static LogConst.Category.siriKitExecutor.getter()
{
  return 0x4574694B69726953;
}

const char *LogConst.Category.siriKitFlow.unsafeMutableAddressor()
{
  return "SiriKitFlow";
}

uint64_t static LogConst.Category.siriKitFlow.getter()
{
  return 0x4674694B69726953;
}

const char *LogConst.Category.snippetManager.unsafeMutableAddressor()
{
  return "SnippetManager";
}

uint64_t static LogConst.Category.snippetManager.getter()
{
  return 0x4D74657070696E53;
}

const char *LogConst.Category.rxFlow.unsafeMutableAddressor()
{
  return "RxFlow";
}

uint64_t static LogConst.Category.rxFlow.getter()
{
  return 0x776F6C467852;
}

void *LogConst.Category.requestDispatcher.unsafeMutableAddressor()
{
  return &static LogConst.Category.requestDispatcher;
}

unint64_t static LogConst.Category.requestDispatcher.getter()
{
  return 0xD000000000000011;
}

const char *LogConst.Category.siriKitAce.unsafeMutableAddressor()
{
  return "SiriKitAce";
}

uint64_t static LogConst.Category.siriKitAce.getter()
{
  return 0x4174694B69726953;
}

void *LogConst.Category.instrumentation.unsafeMutableAddressor()
{
  return &static LogConst.Category.instrumentation;
}

unint64_t static LogConst.Category.instrumentation.getter()
{
  return 0xD000000000000016;
}

unint64_t static LogConst.Category.conversationBridge.getter()
{
  return 0xD000000000000012;
}

unint64_t static LogConst.Category.insightRequestSummary.getter()
{
  return 0xD000000000000015;
}

const char *static SiriKitExecutorSignpost.executionTime.getter()
{
  return "execution_time";
}

const char *static SiriKitExecutorSignpost.paraphraseTime.getter()
{
  return "ParaphraseTime";
}

char **SiriKitExecutorSignpost.bravoExecute.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.bravoExecute;
}

const char *static SiriKitExecutorSignpost.bravoExecute.getter()
{
  return "BravoExecute";
}

char **SiriKitExecutorSignpost.bravoInit.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.bravoInit;
}

const char *static SiriKitExecutorSignpost.bravoInit.getter()
{
  return "BravoInit";
}

char **SiriKitExecutorSignpost.bravoOnInput.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.bravoOnInput;
}

const char *static SiriKitExecutorSignpost.bravoOnInput.getter()
{
  return "BravoOnInput";
}

char **SiriKitExecutorSignpost.bravoPlan.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.bravoPlan;
}

const char *static SiriKitExecutorSignpost.bravoPlan.getter()
{
  return "BravoPlan";
}

char **SiriKitExecutorSignpost.bravoPlanAndExecute.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.bravoPlanAndExecute;
}

const char *static SiriKitExecutorSignpost.bravoPlanAndExecute.getter()
{
  return "BravoPlanAndExecute";
}

char **SiriKitExecutorSignpost.bravoSnapshot.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.bravoSnapshot;
}

const char *static SiriKitExecutorSignpost.bravoSnapshot.getter()
{
  return "BravoSnapshot";
}

char **SiriKitExecutorSignpost.eventDispatch.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.eventDispatch;
}

const char *static SiriKitExecutorSignpost.eventDispatch.getter()
{
  return "EventDispatch";
}

char **SiriKitExecutorSignpost.eventHandledByIntentLogger.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.eventHandledByIntentLogger;
}

const char *static SiriKitExecutorSignpost.eventHandledByIntentLogger.getter()
{
  return "EventHandledByIntentLogger";
}

char **SiriKitExecutorSignpost.eventHandledByTaskLogger.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.eventHandledByTaskLogger;
}

const char *static SiriKitExecutorSignpost.eventHandledByTaskLogger.getter()
{
  return "EventHandledByTaskLogger";
}

char **SiriKitExecutorSignpost.executeAutoHandle.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.executeAutoHandle;
}

const char *static SiriKitExecutorSignpost.executeAutoHandle.getter()
{
  return "ExecuteAutoHandle";
}

char **SiriKitExecutorSignpost.executeHandle.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.executeHandle;
}

const char *static SiriKitExecutorSignpost.executeHandle.getter()
{
  return "ExecuteHandle";
}

char **SiriKitExecutorSignpost.executeResolveConfirmHandle.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.executeResolveConfirmHandle;
}

const char *static SiriKitExecutorSignpost.executeResolveConfirmHandle.getter()
{
  return "ExecuteResolveConfirmHandle";
}

const char *static SiriKitExecutorSignpost.fetchSpeechInfo.getter()
{
  return "FetchSpeechInfo";
}

char **SiriKitExecutorSignpost.intentConfirm.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.intentConfirm;
}

const char *static SiriKitExecutorSignpost.intentConfirm.getter()
{
  return "intentConfirm";
}

char **SiriKitExecutorSignpost.intentHandle.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.intentHandle;
}

const char *static SiriKitExecutorSignpost.intentHandle.getter()
{
  return "intentHandle";
}

char **SiriKitExecutorSignpost.intentResolveSlot.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.intentResolveSlot;
}

const char *static SiriKitExecutorSignpost.intentResolveSlot.getter()
{
  return "intentResolveSlot";
}

const char *static SiriKitExecutorSignpost.logAFAnalytics.getter()
{
  return "logAFAnalytics";
}

char **SiriKitExecutorSignpost.logAddViewAnalytics.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logAddViewAnalytics;
}

const char *static SiriKitExecutorSignpost.logAddViewAnalytics.getter()
{
  return "logAddViewAnalytics";
}

char **SiriKitExecutorSignpost.logAddViewSparseObject.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logAddViewSparseObject;
}

const char *static SiriKitExecutorSignpost.logAddViewSparseObject.getter()
{
  return "logAddViewSparseObject";
}

char **SiriKitExecutorSignpost.logCoreDuet.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logCoreDuet;
}

const char *static SiriKitExecutorSignpost.logCoreDuet.getter()
{
  return "logCoreDuet";
}

char **SiriKitExecutorSignpost.logCoreDuetBlocking.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logCoreDuetBlocking;
}

const char *static SiriKitExecutorSignpost.logCoreDuetBlocking.getter()
{
  return "logCoreDuetBlocking";
}

const char *static SiriKitExecutorSignpost.logDialogAnalytics.getter()
{
  return "logDialogAnalytics";
}

const char *static SiriKitExecutorSignpost.logLaunchAppAnalytics.getter()
{
  return "logLaunchAppAnalytics";
}

const char *static SiriKitExecutorSignpost.logLaunchAppSparseObject.getter()
{
  return "logLaunchAppSparseObject";
}

const char *static SiriKitExecutorSignpost.logRemoteAFAnalytics.getter()
{
  return "logRemoteAFAnalytics";
}

const char *static SiriKitExecutorSignpost.logSayItAnalytics.getter()
{
  return "logSayItAnalytics";
}

const char *static SiriKitExecutorSignpost.logSayItSparseObject.getter()
{
  return "logSayItSparseObject";
}

char **SiriKitExecutorSignpost.makeResolutionResults.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.makeResolutionResults;
}

const char *static SiriKitExecutorSignpost.makeResolutionResults.getter()
{
  return "MakeResolutionResults";
}

const char *static SiriKitExecutorSignpost.meCardLookup.getter()
{
  return "MeCardLookup";
}

char **SiriKitExecutorSignpost.runSiriKitExecutorHandling.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.runSiriKitExecutorHandling;
}

const char *static SiriKitExecutorSignpost.runSiriKitExecutorHandling.getter()
{
  return "RunSiriKitExecutorHandling";
}

char **SiriKitExecutorSignpost.serializeSpeechRecognized.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.serializeSpeechRecognized;
}

const char *static SiriKitExecutorSignpost.serializeSpeechRecognized.getter()
{
  return "SerializeSpeechRecognized";
}

char **SiriKitExecutorSignpost.submitGenericClientCommand.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.submitGenericClientCommand;
}

const char *static SiriKitExecutorSignpost.submitGenericClientCommand.getter()
{
  return "SubmitGenericClientCommand";
}

char **SiriKitExecutorSignpost.submitHandleIntent.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.submitHandleIntent;
}

const char *static SiriKitExecutorSignpost.submitHandleIntent.getter()
{
  return "SubmitHandleIntent";
}

char **SiriKitExecutorSignpost.submitProcessIntent.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.submitProcessIntent;
}

const char *static SiriKitExecutorSignpost.submitProcessIntent.getter()
{
  return "SubmitProcessIntent";
}

const char *static SiriKitExecutorSignpost.warmPlugin.getter()
{
  return "WarmPlugin";
}

const char *static SiriKitExecutorSignpost.extensionBringup.getter()
{
  return "FlowExtensionBringup";
}

const char *static SiriKitExecutorSignpost.linkMetadataCollection.getter()
{
  return "LinkMetadataCollection";
}

const char *static SiriKitExecutorSignpost.referenceResolutionCollection.getter()
{
  return "ReferenceResolutionCollection";
}

const char *static SiriKitExecutorSignpost.loadPluginCatalog.getter()
{
  return "LoadPluginCatalog";
}

const char *static SiriKitExecutorSignpost.loadAllFlowExtensions.getter()
{
  return "LoadAllFlowExtensions";
}

const char *static SiriKitExecutorSignpost.runAffinityScorer.getter()
{
  return "RunAffinityScorer";
}

uint64_t ExecutionTimeSignpost.asStaticString.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1B4EA7304 + 4 * byte_1B4EF014F[a1]))("execution_flow_plugin_execute_time", 34);
}

const char *sub_1B4EA7304()
{
  return "execution_flow_plugin_input_time";
}

const char *sub_1B4EA7318()
{
  return "execution_flow_plugin_load_time";
}

const char *sub_1B4EA732C()
{
  return "execution_find_flow_time";
}

const char *sub_1B4EA7340()
{
  return "execution_prepare_time";
}

const char *sub_1B4EA7354()
{
  return "execution_commit_time";
}

uint64_t ExecutionTimeSignpost.asString.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1B4EA7394 + 4 * byte_1B4EF0155[a1]))("execution_flow_plugin_execute_time", 34);
}

uint64_t sub_1B4EA7394()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t sub_1B4EA73A4()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t sub_1B4EA73B4()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t sub_1B4EA73C4()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t sub_1B4EA73D4()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t ExecutionTimeSignpost.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1B4EA7410 + 4 * byte_1B4EF015B[a1]))("execution_flow_plugin_execute_time", 34);
}

uint64_t sub_1B4EA7410()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t sub_1B4EA7420()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t sub_1B4EA7430()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t sub_1B4EA7440()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t sub_1B4EA7450()
{
  return static String._fromUTF8Repairing(_:)();
}

void ExecutionTimeSignpost.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

BOOL static ExecutionTimeSignpost.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int ExecutionTimeSignpost.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExecutionTimeSignpost()
{
  unsigned __int8 *v0;

  return ExecutionTimeSignpost.description.getter(*v0);
}

void *AnalyticsEventConst.handleRequest.unsafeMutableAddressor()
{
  return &static AnalyticsEventConst.handleRequest;
}

unint64_t static AnalyticsEventConst.handleRequest.getter()
{
  return 0xD00000000000002DLL;
}

void *AnalyticsEventConst.reliability.unsafeMutableAddressor()
{
  return &static AnalyticsEventConst.reliability;
}

unint64_t static AnalyticsEventConst.reliability.getter()
{
  return 0xD000000000000022;
}

void *DirectInvocationIdentifierConst.deviceUnlockComplete.unsafeMutableAddressor()
{
  return &static DirectInvocationIdentifierConst.deviceUnlockComplete;
}

unint64_t static DirectInvocationIdentifierConst.deviceUnlockComplete.getter()
{
  return 0xD000000000000030;
}

void *TaskMetricsConst.commaDelimiter.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.commaDelimiter;
}

uint64_t static TaskMetricsConst.commaDelimiter.getter()
{
  return 46;
}

const char *TaskMetricsConst.currentTask.unsafeMutableAddressor()
{
  return "CurrentTask";
}

uint64_t static TaskMetricsConst.currentTask.getter()
{
  return 0x54746E6572727543;
}

void *TaskMetricsConst.defaultBuildNumber.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.defaultBuildNumber;
}

uint64_t static TaskMetricsConst.defaultBuildNumber.getter()
{
  return 48;
}

void *TaskMetricsConst.defaultVersionNumber.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.defaultVersionNumber;
}

uint64_t static TaskMetricsConst.defaultVersionNumber.getter()
{
  return 49;
}

const char *TaskMetricsConst.directInvocationParsePrefix.unsafeMutableAddressor()
{
  return "Direct: ";
}

uint64_t static TaskMetricsConst.directInvocationParsePrefix.getter()
{
  return 0x203A746365726944;
}

void *TaskMetricsConst.EMPTY.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.EMPTY;
}

uint64_t static TaskMetricsConst.EMPTY.getter()
{
  return 0;
}

const char *TaskMetricsConst.errorCodePrefix.unsafeMutableAddressor()
{
  return "ErrorCode: ";
}

uint64_t static TaskMetricsConst.errorCodePrefix.getter()
{
  return 0x646F43726F727245;
}

void *TaskMetricsConst.genericErrorResponseId.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.genericErrorResponseId;
}

unint64_t static TaskMetricsConst.genericErrorResponseId.getter()
{
  return 0xD000000000000012;
}

const char *TaskMetricsConst.notApplicable.unsafeMutableAddressor()
{
  return "not_applicable";
}

uint64_t static TaskMetricsConst.notApplicable.getter()
{
  return 0x6C7070615F746F6ELL;
}

const char *TaskMetricsConst.nlParse.unsafeMutableAddressor()
{
  return "NL parse";
}

uint64_t static TaskMetricsConst.nlParse.getter()
{
  return 0x6573726170204C4ELL;
}

const char *TaskMetricsConst.unknownParse.unsafeMutableAddressor()
{
  return "Unknown parse";
}

uint64_t static TaskMetricsConst.unknownParse.getter()
{
  return 0x206E776F6E6B6E55;
}

const char *TaskMetricsConst.unparsedIntent.unsafeMutableAddressor()
{
  return "UnparsedIntent";
}

uint64_t static TaskMetricsConst.unparsedIntent.getter()
{
  return 0x6465737261706E55;
}

void *TaskMetricsConst.taskTypePrefix.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.taskTypePrefix;
}

uint64_t static TaskMetricsConst.taskTypePrefix.getter()
{
  return 20041;
}

const char *TaskMetricsConst.serverOverride.unsafeMutableAddressor()
{
  return "ServerOverride";
}

uint64_t static TaskMetricsConst.serverOverride.getter()
{
  return 0x764F726576726553;
}

const char *TaskMetricsConst.topicChanged.unsafeMutableAddressor()
{
  return "TopicChanged";
}

uint64_t static TaskMetricsConst.topicChanged.getter()
{
  return 0x6168436369706F54;
}

const char *TaskMetricsConst.resolutionType.unsafeMutableAddressor()
{
  return "resolutionType";
}

uint64_t static TaskMetricsConst.resolutionType.getter()
{
  return 0x6974756C6F736572;
}

uint64_t static TaskMetricsConst.none.getter()
{
  return 1701736302;
}

const char *TaskMetricsConst.appBundleId.unsafeMutableAddressor()
{
  return "appBundleId";
}

uint64_t static TaskMetricsConst.appBundleId.getter()
{
  return 0x6C646E7542707061;
}

const char *TaskMetricsConst.appName.unsafeMutableAddressor()
{
  return "appName";
}

uint64_t static TaskMetricsConst.appName.getter()
{
  return 0x656D614E707061;
}

uint64_t static TaskMetricsConst.incompatibleEagerResultCandidateId.getter()
{
  return 12589;
}

void *TaskMetricsConst.uninitializedConversation.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.uninitializedConversation;
}

uint64_t static TaskMetricsConst.uninitializedConversation.getter()
{
  return 12845;
}

void *TaskMetricsConst.unknownResultCandidateId.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.unknownResultCandidateId;
}

uint64_t static TaskMetricsConst.unknownResultCandidateId.getter()
{
  return 13101;
}

void *TaskMetricsConst.undefinedTimeInterval.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.undefinedTimeInterval;
}

double static TaskMetricsConst.undefinedTimeInterval.getter()
{
  return -1.0;
}

void *TaskMetricsConst.charMaxCount.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.charMaxCount;
}

uint64_t static TaskMetricsConst.charMaxCount.getter()
{
  return 250;
}

uint64_t static GradingEvent.clientFlowView.getter()
{
  return 0x6C46746E65696C43;
}

void *Timeouts.makeIntentFromParseTimeout.unsafeMutableAddressor()
{
  return &static Timeouts.makeIntentFromParseTimeout;
}

double static Timeouts.makeIntentFromParseTimeout.getter()
{
  return 10.0;
}

unint64_t static AmbiguityHandling.linkActionIdentifierUserDataKey.getter()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationInsightRequestSummaryMessageDescription(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = ConversationInsightRequestSummaryMessageDescription.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == ConversationInsightRequestSummaryMessageDescription.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationInsightRequestSummaryMessageDescription()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  ConversationInsightRequestSummaryMessageDescription.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationInsightRequestSummaryMessageDescription()
{
  unsigned __int8 *v0;

  ConversationInsightRequestSummaryMessageDescription.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationInsightRequestSummaryMessageDescription()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  ConversationInsightRequestSummaryMessageDescription.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationInsightRequestSummaryMessageDescription@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ConversationInsightRequestSummaryMessageDescription.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConversationInsightRequestSummaryMessageDescription@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ConversationInsightRequestSummaryMessageDescription.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t specialized ConversationInsightRequestSummaryMessageDescription.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationInsightRequestSummaryMessageDescription.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xF)
    return 15;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type ExecutionTimeSignpost and conformance ExecutionTimeSignpost()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExecutionTimeSignpost and conformance ExecutionTimeSignpost;
  if (!lazy protocol witness table cache variable for type ExecutionTimeSignpost and conformance ExecutionTimeSignpost)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ExecutionTimeSignpost, &type metadata for ExecutionTimeSignpost);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionTimeSignpost and conformance ExecutionTimeSignpost);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConversationInsightRequestSummaryMessageDescription and conformance ConversationInsightRequestSummaryMessageDescription()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationInsightRequestSummaryMessageDescription and conformance ConversationInsightRequestSummaryMessageDescription;
  if (!lazy protocol witness table cache variable for type ConversationInsightRequestSummaryMessageDescription and conformance ConversationInsightRequestSummaryMessageDescription)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationInsightRequestSummaryMessageDescription, &type metadata for ConversationInsightRequestSummaryMessageDescription);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationInsightRequestSummaryMessageDescription and conformance ConversationInsightRequestSummaryMessageDescription);
  }
  return result;
}

ValueMetadata *type metadata accessor for LogConst()
{
  return &type metadata for LogConst;
}

ValueMetadata *type metadata accessor for LogConst.Category()
{
  return &type metadata for LogConst.Category;
}

ValueMetadata *type metadata accessor for SiriKitExecutorSignpost()
{
  return &type metadata for SiriKitExecutorSignpost;
}

uint64_t storeEnumTagSinglePayload for ExecutionTimeSignpost(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B4EA7BFC + 4 * byte_1B4EF0166[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B4EA7C30 + 4 * byte_1B4EF0161[v4]))();
}

uint64_t sub_1B4EA7C30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EA7C38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4EA7C40);
  return result;
}

uint64_t sub_1B4EA7C4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4EA7C54);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B4EA7C58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EA7C60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExecutionTimeSignpost()
{
  return &type metadata for ExecutionTimeSignpost;
}

ValueMetadata *type metadata accessor for AnalyticsEventConst()
{
  return &type metadata for AnalyticsEventConst;
}

ValueMetadata *type metadata accessor for DirectInvocationIdentifierConst()
{
  return &type metadata for DirectInvocationIdentifierConst;
}

ValueMetadata *type metadata accessor for TaskMetricsConst()
{
  return &type metadata for TaskMetricsConst;
}

ValueMetadata *type metadata accessor for GradingEvent()
{
  return &type metadata for GradingEvent;
}

ValueMetadata *type metadata accessor for Timeouts()
{
  return &type metadata for Timeouts;
}

ValueMetadata *type metadata accessor for AmbiguityHandling()
{
  return &type metadata for AmbiguityHandling;
}

uint64_t getEnumTagSinglePayload for ConversationInsightRequestSummaryMessageDescription(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationInsightRequestSummaryMessageDescription(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_1B4EA7DB8 + 4 * byte_1B4EF0170[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1B4EA7DEC + 4 * byte_1B4EF016B[v4]))();
}

uint64_t sub_1B4EA7DEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EA7DF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4EA7DFCLL);
  return result;
}

uint64_t sub_1B4EA7E08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4EA7E10);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_1B4EA7E14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EA7E1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationInsightRequestSummaryMessageDescription()
{
  return &type metadata for ConversationInsightRequestSummaryMessageDescription;
}

uint64_t *SiriKitCurareDonator.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1)
    swift_once();
  return &static SiriKitCurareDonator.instance;
}

uint64_t static SiriKitCurareDonator.instance.getter()
{
  if (one-time initialization token for instance != -1)
    swift_once();
  return swift_retain();
}

uint64_t SiriKitCurareDonator.().init()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;

  v1 = v0;
  if (objc_msgSend((id)objc_opt_self(), sel_isSupportedUser))
  {
    v2 = objc_allocWithZone(MEMORY[0x1E0D20F70]);
    v3 = (void *)MEMORY[0x1B5E432E8](0x6B73615449524953, 0xEF676E6967676F4CLL);
    v4 = objc_msgSend(v2, sel_initWithStreamId_, v3);

    *(_QWORD *)(v1 + 16) = v4;
    if (!v4)
    {
      if (one-time initialization token for instrumentation != -1)
        swift_once();
      v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.instrumentation);
      v6 = Logger.logObject.getter();
      v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_1B4BE6000, v6, v7, "Failed to create FSFCurareInteractionStream for task logging, donations will be disabled.", v8, 2u);
        MEMORY[0x1B5E44758](v8, -1, -1);
      }

    }
    v9 = objc_allocWithZone(MEMORY[0x1E0D20F70]);
    v10 = (void *)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4F02670);
    v11 = objc_msgSend(v9, sel_initWithStreamId_, v10);

    *(_QWORD *)(v1 + 24) = v11;
    if (!v11)
    {
      if (one-time initialization token for instrumentation != -1)
        swift_once();
      v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.instrumentation);
      v13 = Logger.logObject.getter();
      v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_1B4BE6000, v13, v14, "Failed to create FSFCurareInteractionStream for task configuration, donations will be disabled.", v15, 2u);
        MEMORY[0x1B5E44758](v15, -1, -1);
      }

    }
  }
  else
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.instrumentation);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1B4BE6000, v17, v18, "FSFUtils.isSupportedUser returned false, Curare donations will be disabled.", v19, 2u);
      MEMORY[0x1B5E44758](v19, -1, -1);
    }

    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
  }
  return v1;
}

uint64_t closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  *(_QWORD *)(v8 + 992) = v19;
  *(_OWORD *)(v8 + 960) = v17;
  *(_OWORD *)(v8 + 976) = v18;
  *(_OWORD *)(v8 + 928) = v15;
  *(_OWORD *)(v8 + 944) = v16;
  *(_OWORD *)(v8 + 896) = v13;
  *(_OWORD *)(v8 + 912) = v14;
  *(_OWORD *)(v8 + 864) = v11;
  *(_OWORD *)(v8 + 880) = v12;
  *(_QWORD *)(v8 + 856) = a8;
  *(_QWORD *)(v8 + 848) = a7;
  *(_QWORD *)(v8 + 840) = a6;
  *(_QWORD *)(v8 + 832) = a5;
  *(_QWORD *)(v8 + 824) = a4;
  v9 = type metadata accessor for ActivityType();
  *(_QWORD *)(v8 + 1000) = v9;
  *(_QWORD *)(v8 + 1008) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 1016) = swift_task_alloc();
  *(_QWORD *)(v8 + 1024) = swift_task_alloc();
  *(_QWORD *)(v8 + 1032) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  *(_QWORD *)(v8 + 1040) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:)()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  id v57;
  Class v58;
  void *v59;
  id v60;
  void *v61;
  unsigned __int8 v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  os_log_type_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  id v91;
  void *v92;
  id v93;
  id v94;
  NSObject *v95;
  os_log_type_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  os_log_t log;
  os_log_t loga;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  os_log_type_t type;
  uint64_t typea;
  void *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130[2];

  v130[1] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(v0 + 824);
  v2 = v1[13];
  v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0)
    v3 = v1[12] & 0xFFFFFFFFFFFFLL;
  v127 = v1[13];
  v126 = v1[12];
  v128 = v126;
  if (!v3)
  {
    v2 = v1[11];
    v128 = v1[10];
  }
  v4 = one-time initialization token for instrumentation;
  swift_bridgeObjectRetain();
  if (v4 != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  v119 = v2;
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v130[0] = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 816) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v128, v2, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v6, v7, "Create SiriKit execution task step donation to Curare for interactionId: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v10 = *(_QWORD *)(v0 + 848);
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EF05A0;
  strcpy((char *)(inited + 32), "activityType");
  *(_BYTE *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  v13 = ActivityType.rawValue.getter();
  v14 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v13;
  *(_QWORD *)(inited + 56) = v15;
  *(_QWORD *)(inited + 72) = v14;
  *(_QWORD *)(inited + 80) = 0x6D6954746E657665;
  *(_QWORD *)(inited + 88) = 0xE900000000000065;
  isa = Date._bridgeToObjectiveC()().super.isa;
  v125 = v11;
  v17 = objc_msgSend(v11, sel_stringFromDate_, isa);

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;

  *(_QWORD *)(inited + 96) = v18;
  *(_QWORD *)(inited + 104) = v20;
  *(_QWORD *)(inited + 120) = v14;
  *(_QWORD *)(inited + 128) = 7368801;
  *(_QWORD *)(inited + 136) = 0xE300000000000000;
  if (v10)
  {
    v21 = App.appIdentifier.getter();
    v23 = (uint64_t *)(inited + 144);
    *(_QWORD *)(inited + 168) = v14;
    if (v22)
    {
      *v23 = v21;
      goto LABEL_15;
    }
  }
  else
  {
    v23 = (uint64_t *)(inited + 144);
    *(_QWORD *)(inited + 168) = v14;
  }
  *v23 = 0x6C7070615F746F6ELL;
  v22 = 0xEE00656C62616369;
LABEL_15:
  v24 = *(_QWORD *)(v0 + 1040);
  v25 = *(_QWORD *)(v0 + 928);
  log = *(os_log_t *)(v0 + 920);
  v117 = *(_QWORD *)(v0 + 936);
  v26 = *(_QWORD *)(v0 + 912);
  v27 = *(_QWORD *)(v0 + 904);
  v28 = *(_QWORD *)(v0 + 896);
  v29 = *(_QWORD *)(v0 + 888);
  v30 = *(_QWORD *)(v0 + 880);
  v31 = *(_QWORD *)(v0 + 872);
  v32 = *(_QWORD *)(v0 + 864);
  v33 = *(_QWORD *)(v0 + 856);
  *(_QWORD *)(inited + 152) = v22;
  *(_QWORD *)(inited + 176) = 0x7475626972747461;
  *(_QWORD *)(inited + 184) = 0xE900000000000065;
  if (v32)
  {
    v34 = v32;
  }
  else
  {
    v33 = 7104878;
    v34 = 0xE300000000000000;
  }
  *(_QWORD *)(inited + 192) = v33;
  *(_QWORD *)(inited + 200) = v34;
  *(_QWORD *)(inited + 216) = v14;
  strcpy((char *)(inited + 224), "intentTypeName");
  *(_BYTE *)(inited + 239) = -18;
  *(_QWORD *)(inited + 240) = v31;
  *(_QWORD *)(inited + 248) = v30;
  *(_QWORD *)(inited + 264) = v14;
  *(_QWORD *)(inited + 272) = 0x6574656D61726170;
  if (v28)
  {
    v35 = v28;
  }
  else
  {
    v29 = 7104878;
    v35 = 0xE300000000000000;
  }
  *(_QWORD *)(inited + 280) = 0xED0000656D614E72;
  *(_QWORD *)(inited + 288) = v29;
  *(_QWORD *)(inited + 296) = v35;
  *(_QWORD *)(inited + 312) = v14;
  *(_QWORD *)(inited + 320) = 0x65736E6F70736572;
  if (v26)
  {
    v36 = v26;
  }
  else
  {
    v27 = 7104878;
    v36 = 0xE300000000000000;
  }
  *(_QWORD *)(inited + 328) = 0xEA00000000006449;
  *(_QWORD *)(inited + 336) = v27;
  *(_QWORD *)(inited + 344) = v36;
  *(_QWORD *)(inited + 360) = v14;
  *(_QWORD *)(inited + 368) = 0xD000000000000011;
  *(_QWORD *)(inited + 376) = 0x80000001B4EF49F0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v37 = SiriKitEventContext.resultCandidateId.getter();
  if (v38)
    v39 = v37;
  else
    v39 = 0;
  v40 = 0xE000000000000000;
  if (v38)
    v40 = v38;
  *(_QWORD *)(inited + 384) = v39;
  *(_QWORD *)(inited + 392) = v40;
  *(_QWORD *)(inited + 408) = v14;
  *(_QWORD *)(inited + 416) = 0xD000000000000011;
  v41 = (uint64_t)log;
  if (!v25)
    v41 = 7104878;
  *(_QWORD *)(inited + 424) = 0x80000001B4F02610;
  *(_QWORD *)(inited + 432) = v41;
  if (v25)
    v42 = v25;
  else
    v42 = 0xE300000000000000;
  *(_QWORD *)(inited + 440) = v42;
  *(_QWORD *)(inited + 456) = v14;
  strcpy((char *)(inited + 464), "statusReason");
  *(_BYTE *)(inited + 477) = 0;
  *(_WORD *)(inited + 478) = -5120;
  outlined init with copy of SiriKitReliabilityCodes?(v117, v24);
  v43 = type metadata accessor for SiriKitReliabilityCodes();
  v44 = *(_QWORD *)(v43 - 8);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v24, 1, v43);
  swift_bridgeObjectRetain();
  v46 = *(_QWORD *)(v0 + 1040);
  if (v45 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 1040), &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v47 = (uint64_t *)(inited + 480);
    *(_QWORD *)(inited + 504) = v14;
    v48 = v119;
  }
  else
  {
    v49 = SiriKitReliabilityCodes.rawValue.getter();
    v51 = v50;
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v46, v43);
    v47 = (uint64_t *)(inited + 480);
    *(_QWORD *)(inited + 504) = v14;
    v48 = v119;
    if (v51)
    {
      *v47 = v49;
      goto LABEL_39;
    }
  }
  *v47 = 7104878;
  v51 = 0xE300000000000000;
LABEL_39:
  v52 = *(_QWORD *)(v0 + 968);
  v53 = *(_QWORD *)(v0 + 960);
  v54 = *(_QWORD *)(v0 + 952);
  v55 = *(_QWORD *)(v0 + 944);
  *(_QWORD *)(inited + 488) = v51;
  *(_QWORD *)(inited + 512) = 0xD000000000000010;
  *(_QWORD *)(inited + 520) = 0x80000001B4F02630;
  *(_QWORD *)(inited + 552) = v14;
  *(_QWORD *)(inited + 528) = v55;
  *(_QWORD *)(inited + 536) = v54;
  *(_QWORD *)(inited + 560) = 0xD000000000000013;
  *(_QWORD *)(inited + 568) = 0x80000001B4F02650;
  *(_QWORD *)(inited + 600) = v14;
  *(_QWORD *)(inited + 576) = v53;
  *(_QWORD *)(inited + 584) = v52;
  strcpy((char *)(inited + 608), "interactionId");
  *(_WORD *)(inited + 622) = -4864;
  *(_QWORD *)(inited + 648) = v14;
  *(_QWORD *)(inited + 624) = v128;
  *(_QWORD *)(inited + 632) = v48;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v56 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v56);
  swift_bridgeObjectRelease();
  v57 = objc_allocWithZone(MEMORY[0x1E0D20F60]);
  swift_bridgeObjectRetain();
  v58 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v59 = (void *)MEMORY[0x1B5E432E8](v126, v127);
  swift_bridgeObjectRelease();
  v60 = objc_msgSend(v57, sel_initWithContent_interactionId_dataVersion_, v58, v59, 0);

  if (!v60)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1008) + 16))(*(_QWORD *)(v0 + 1032), *(_QWORD *)(v0 + 832), *(_QWORD *)(v0 + 1000));
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v68 = Logger.logObject.getter();
    v80 = static os_log_type_t.error.getter();
    v81 = os_log_type_enabled(v68, v80);
    v82 = *(_QWORD *)(v0 + 1032);
    v83 = *(_QWORD *)(v0 + 1008);
    v84 = *(_QWORD *)(v0 + 1000);
    v85 = *(_QWORD *)(v0 + 984);
    if (v81)
    {
      v120 = *(_QWORD *)(v0 + 1000);
      v86 = *(_QWORD *)(v0 + 976);
      v87 = *(_QWORD *)(v0 + 880);
      v112 = *(_QWORD *)(v0 + 872);
      loga = *(os_log_t *)(v0 + 1008);
      v88 = swift_slowAlloc();
      typea = swift_slowAlloc();
      v130[0] = typea;
      *(_DWORD *)v88 = 136315906;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 768) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v85, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v88 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 696) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v87, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v88 + 22) = 2080;
      v89 = ActivityType.rawValue.getter();
      *(_QWORD *)(v0 + 704) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))loga[1].isa)(v82, v120);
      *(_WORD *)(v88 + 32) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 712) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v126, v127, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v68, v80, "Failed to create SiriKit execution task step donation to Curare for taskId: %s, taskType: %s, stepType: %s for interactionId:%s", (uint8_t *)v88, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](typea, -1, -1);
      MEMORY[0x1B5E44758](v88, -1, -1);
LABEL_51:

      goto LABEL_53;
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v84);
LABEL_50:
    swift_release_n();
    goto LABEL_51;
  }
  v61 = *(void **)(v0 + 992);
  *(_QWORD *)(v0 + 720) = 0;
  v129 = v60;
  v62 = objc_msgSend(v61, sel_insert_error_, v60, v0 + 720);
  v63 = *(void **)(v0 + 720);
  v64 = *(_QWORD *)(v0 + 1008);
  v65 = *(_QWORD *)(v0 + 1000);
  v66 = *(_QWORD *)(v0 + 832);
  if ((v62 & 1) == 0)
  {
    v121 = *(_QWORD *)(v0 + 1016);
    v91 = v63;
    v92 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16))(v121, v66, v65);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v93 = v92;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    v94 = v92;
    v95 = Logger.logObject.getter();
    v96 = static os_log_type_t.error.getter();
    v97 = os_log_type_enabled(v95, v96);
    v98 = *(_QWORD *)(v0 + 1016);
    v99 = *(_QWORD *)(v0 + 1008);
    v100 = *(_QWORD *)(v0 + 1000);
    v101 = *(_QWORD *)(v0 + 984);
    if (!v97)
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v98, v100);
      swift_release_n();

      goto LABEL_53;
    }
    v102 = *(_QWORD *)(v0 + 976);
    v103 = *(_QWORD *)(v0 + 880);
    v110 = *(_QWORD *)(v0 + 872);
    v113 = *(_QWORD *)(v0 + 1000);
    v104 = swift_slowAlloc();
    v122 = swift_slowAlloc();
    v130[0] = v122;
    *(_DWORD *)v104 = 136316162;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 728) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v101, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v104 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 736) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v103, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v104 + 22) = 2080;
    v105 = ActivityType.rawValue.getter();
    *(_QWORD *)(v0 + 744) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v106, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v98, v113);
    *(_WORD *)(v104 + 32) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 752) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v126, v127, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v104 + 42) = 2080;
    swift_getErrorValue();
    v107 = Error.localizedDescription.getter();
    *(_QWORD *)(v0 + 776) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v95, v96, "Failed to donate SiriKit execution task step to Curare for taskId: %s, taskType: %s, stepType: %s for interactionId:%s: %s", (uint8_t *)v104, 0x34u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v122, -1, -1);
    MEMORY[0x1B5E44758](v104, -1, -1);

    goto LABEL_47;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v64 + 16))(*(_QWORD *)(v0 + 1024), *(_QWORD *)(v0 + 832), *(_QWORD *)(v0 + 1000));
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v67 = v63;
  v68 = Logger.logObject.getter();
  v69 = static os_log_type_t.debug.getter();
  v70 = os_log_type_enabled(v68, v69);
  v71 = *(_QWORD *)(v0 + 1024);
  v72 = *(_QWORD *)(v0 + 1008);
  v73 = *(_QWORD *)(v0 + 1000);
  v74 = *(_QWORD *)(v0 + 984);
  if (!v70)
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
    goto LABEL_50;
  }
  type = v69;
  v75 = *(_QWORD *)(v0 + 976);
  v76 = *(_QWORD *)(v0 + 880);
  v111 = *(_QWORD *)(v0 + 872);
  v114 = *(_QWORD *)(v0 + 1008);
  v77 = swift_slowAlloc();
  v118 = swift_slowAlloc();
  v130[0] = v118;
  *(_DWORD *)v77 = 136315906;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 784) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v74, v130);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v77 + 12) = 2080;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 792) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v76, v130);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v77 + 22) = 2080;
  v78 = ActivityType.rawValue.getter();
  *(_QWORD *)(v0 + 800) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v130);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v71, v73);
  *(_WORD *)(v77 + 32) = 2080;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 808) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v126, v127, v130);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_release_n();
  _os_log_impl(&dword_1B4BE6000, v68, type, "Donated SiriKit execution task step to Curare for taskId: %s, taskType: %s, stepType: %s for interactionId:%s", (uint8_t *)v77, 0x2Au);
  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v118, -1, -1);
  MEMORY[0x1B5E44758](v77, -1, -1);

LABEL_47:
LABEL_53:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t outlined init with copy of SiriKitReliabilityCodes?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B4EA93E4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = type metadata accessor for ActivityType();
  v1 = *(_QWORD *)(v13 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (v2 + v3 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v12 = (((((((((((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?)
                 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + v12 + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v14 = *(_QWORD *)(v7 + 64);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v1 + 8))(v0 + v2, v13);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for SiriKitReliabilityCodes();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v0 + v8, 1, v9))
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v0 + v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  objc_release(*(id *)(v0
                     + ((((((((v14 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                       + 23) & 0xFFFFFFFFFFFFFFF8)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(type metadata accessor for ActivityType() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v14 = v1[2];
  v12 = v1[4];
  v13 = v1[3];
  v10 = *(_QWORD *)((char *)v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  v11 = *(_QWORD *)((char *)v1 + v7);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v15 + 16) = v8;
  *v8 = v15;
  v8[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:)(a1, v14, v13, v12, (uint64_t)v1 + v3, (uint64_t)v1 + v6, v11, v10);
}

uint64_t SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t);
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  id v28;
  char *v29;
  char *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a5;
  v36 = a4;
  v32 = a3;
  v33 = a2;
  v34 = a1;
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = type metadata accessor for TaskFlowConfiguration();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  result = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void **)(v5 + 24);
  if (v16)
  {
    v31 = v16;
    static TaskPriority.background.getter();
    v17 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 0, 1, v17);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v29 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v18(v29, v32, v9);
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v30 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v19(v30, v33, v6);
    v20 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v21 = (v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = *(unsigned __int8 *)(v7 + 80);
    v33 = v6;
    v23 = v35;
    v24 = (v22 + v21 + 8) & ~v22;
    v25 = (char *)swift_allocObject();
    *((_QWORD *)v25 + 2) = 0;
    *((_QWORD *)v25 + 3) = 0;
    *((_QWORD *)v25 + 4) = v36;
    *((_QWORD *)v25 + 5) = v23;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v25[v20], v29, v9);
    v26 = v33;
    *(_QWORD *)&v25[v21] = v34;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v25[v24], v30, v26);
    v27 = v31;
    *(_QWORD *)&v25[(v8 + v24 + 7) & 0xFFFFFFFFFFFFFFF8] = v31;
    v28 = v27;
    swift_bridgeObjectRetain();
    swift_retain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:), (uint64_t)v25);

    swift_release();
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  }
  return result;
}

uint64_t closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v8[90] = v12;
  v8[89] = a8;
  v8[88] = a7;
  v8[87] = a6;
  v8[86] = a5;
  v8[85] = a4;
  v9 = type metadata accessor for TaskFlowType();
  v8[91] = v9;
  v8[92] = *(_QWORD *)(v9 - 8);
  v8[93] = swift_task_alloc();
  v10 = type metadata accessor for TaskFlowConfiguration();
  v8[94] = v10;
  v8[95] = *(_QWORD *)(v10 - 8);
  v8[96] = swift_task_alloc();
  v8[97] = swift_task_alloc();
  v8[98] = swift_task_alloc();
  v8[99] = swift_task_alloc();
  v8[100] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t inited;
  Class isa;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  _OWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  char v41;
  _OWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  Class v47;
  void *v48;
  id v49;
  void *v50;
  unsigned __int8 v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  id v83;
  void *v84;
  id v85;
  id v86;
  NSObject *v87;
  os_log_type_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  _BOOL4 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  os_log_type_t type;
  os_log_type_t typea[8];
  os_log_type_t typeb;
  void (*v125)(uint64_t, uint64_t, uint64_t);
  os_log_type_t v126;
  uint64_t v127;
  os_log_type_t v128;
  os_log_t log;
  os_log_t loga;
  NSObject *logb;
  os_log_t logc;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t);
  void *v135;
  uint64_t v136[2];

  v136[1] = *MEMORY[0x1E0C80C00];
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 800);
  v2 = *(_QWORD *)(v0 + 760);
  v3 = *(_QWORD *)(v0 + 752);
  v4 = *(_QWORD *)(v0 + 696);
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.instrumentation);
  v125 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v125(v1, v4, v3);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 800);
  v10 = *(_QWORD *)(v0 + 760);
  v11 = *(_QWORD *)(v0 + 752);
  v12 = *(_QWORD *)(v0 + 704);
  v13 = *(_QWORD *)(v0 + 688);
  if (v8)
  {
    v133 = *(_QWORD *)(v0 + 752);
    type = v7;
    v14 = *(_QWORD *)(v0 + 680);
    v15 = swift_slowAlloc();
    v119 = swift_slowAlloc();
    v136[0] = v119;
    *(_DWORD *)v15 = 136315650;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 656) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v15 + 12) = 2080;
    v16 = TaskFlowConfiguration.debugDescription.getter();
    *(_QWORD *)(v0 + 664) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v18 = v133;
    v134 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v134(v9, v18);
    *(_WORD *)(v15 + 22) = 2080;
    v19 = *(_QWORD *)(v12 + 96);
    v20 = *(_QWORD *)(v12 + 104);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 672) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v6, type, "Create SiriKit task configuration donation to Curare for taskId: %s, taskConfiguration: %s for interactionId:%s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v119, -1, -1);
    MEMORY[0x1B5E44758](v15, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    v134 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v134(v9, v11);
    swift_release_n();
  }

  v21 = *(_QWORD *)(v0 + 744);
  v22 = *(_QWORD *)(v0 + 736);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 728);
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  v24 = (void *)MEMORY[0x1B5E432E8](0xD000000000000010, 0x80000001B4F02590);
  objc_msgSend(v23, sel_setDateFormat_, v24);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE4F40;
  *(_QWORD *)(inited + 32) = 0x6D6954746E657665;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  isa = Date._bridgeToObjectiveC()().super.isa;
  v135 = v23;
  v27 = objc_msgSend(v23, sel_stringFromDate_, isa);

  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = v29;

  v31 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v28;
  *(_QWORD *)(inited + 56) = v30;
  *(_QWORD *)(inited + 72) = v31;
  *(_QWORD *)(inited + 80) = 0x656D614E6B736174;
  *(_QWORD *)(inited + 88) = 0xE800000000000000;
  *(_QWORD *)(inited + 96) = TaskFlowConfiguration.taskName.getter();
  *(_QWORD *)(inited + 104) = v32;
  *(_QWORD *)(inited + 120) = v31;
  *(_QWORD *)(inited + 128) = 0xD000000000000014;
  v33 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 168) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 136) = 0x80000001B4F025B0;
  *(_QWORD *)(inited + 144) = 0;
  v34 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  TaskFlowConfiguration.taskType.getter();
  v35 = (*(uint64_t (**)(uint64_t, os_log_type_t *))(v22 + 88))(v21, *(os_log_type_t **)typea);
  if (v35 == *MEMORY[0x1E0D9AD10])
  {
    v36 = (_OWORD *)(v0 + 192);
    v37 = *(uint64_t **)(v0 + 744);
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v0 + 736) + 96))(v37, *(_QWORD *)(v0 + 728));
    v38 = *v37;
    *(_QWORD *)(v0 + 376) = v33;
    *(_QWORD *)(v0 + 352) = v38;
    outlined init with take of Any((_OWORD *)(v0 + 352), (_OWORD *)(v0 + 256));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v136[0] = v34;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 256), 0xD000000000000014, 0x80000001B4F025B0, isUniquelyReferenced_nonNull_native);
    v40 = v136[0];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 248) = v31;
    *(_QWORD *)(v0 + 224) = 0xD000000000000010;
    *(_QWORD *)(v0 + 232) = 0x80000001B4F025F0;
    outlined init with take of Any((_OWORD *)(v0 + 224), (_OWORD *)(v0 + 192));
    v41 = swift_isUniquelyReferenced_nonNull_native();
    v136[0] = v40;
    goto LABEL_15;
  }
  if (v35 == *MEMORY[0x1E0D9AD20])
  {
    v36 = (_OWORD *)(v0 + 384);
    v42 = (_OWORD *)(v0 + 416);
    *(_QWORD *)(v0 + 440) = v31;
    *(_QWORD *)(v0 + 416) = 0x6B7361546F666E69;
    *(_QWORD *)(v0 + 424) = 0xE800000000000000;
LABEL_14:
    outlined init with take of Any(v42, v36);
    v41 = swift_isUniquelyReferenced_nonNull_native();
    v136[0] = v34;
LABEL_15:
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, 0x657079546B736174, 0xE800000000000000, v41);
    v43 = v136[0];
    swift_bridgeObjectRelease();
    v44 = *(_QWORD *)(v0 + 688);
    v45 = *(_QWORD *)(v0 + 680);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v43);
    swift_bridgeObjectRelease();
    v46 = objc_allocWithZone(MEMORY[0x1E0D20F60]);
    swift_bridgeObjectRetain();
    v47 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v48 = (void *)MEMORY[0x1B5E432E8](v45, v44);
    swift_bridgeObjectRelease();
    v49 = objc_msgSend(v46, sel_initWithContent_interactionId_dataVersion_, v47, v48, 0);

    if (v49)
    {
      v50 = *(void **)(v0 + 720);
      *(_QWORD *)(v0 + 600) = 0;
      v51 = objc_msgSend(v50, sel_insert_error_, v49, v0 + 600);
      v52 = *(void **)(v0 + 600);
      v53 = *(_QWORD *)(v0 + 752);
      v54 = *(_QWORD *)(v0 + 696);
      if ((v51 & 1) != 0)
      {
        v125(*(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 752));
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        v55 = v52;
        v56 = Logger.logObject.getter();
        v57 = static os_log_type_t.debug.getter();
        v58 = os_log_type_enabled(v56, v57);
        v59 = *(_QWORD *)(v0 + 776);
        v60 = *(_QWORD *)(v0 + 752);
        v61 = *(_QWORD *)(v0 + 704);
        v62 = *(_QWORD *)(v0 + 688);
        if (v58)
        {
          v63 = *(_QWORD *)(v0 + 680);
          v120 = *(_QWORD *)(v0 + 752);
          v64 = swift_slowAlloc();
          log = (os_log_t)swift_slowAlloc();
          v136[0] = (uint64_t)log;
          *(_DWORD *)v64 = 136315650;
          v126 = v57;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v0 + 568) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v62, v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v64 + 12) = 2080;
          v65 = TaskFlowConfiguration.debugDescription.getter();
          *(_QWORD *)(v0 + 576) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v134(v59, v120);
          *(_WORD *)(v64 + 22) = 2080;
          v67 = *(_QWORD *)(v61 + 96);
          v68 = *(_QWORD *)(v61 + 104);
          swift_bridgeObjectRetain();
          *(_QWORD *)(v0 + 584) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          _os_log_impl(&dword_1B4BE6000, v56, v126, "Donated SiriKit execution task configuration to Curare for taskId: %s, taskConfiguration: %s for interactionId:%s", (uint8_t *)v64, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](log, -1, -1);
          MEMORY[0x1B5E44758](v64, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
          v134(v59, v60);
          swift_release_n();

        }
      }
      else
      {
        v121 = v49;
        v82 = *(_QWORD *)(v0 + 768);
        v83 = v52;
        v84 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        v125(v82, v54, v53);
        swift_bridgeObjectRetain();
        swift_retain();
        v85 = v84;
        swift_bridgeObjectRetain();
        swift_retain();
        v86 = v84;
        v87 = Logger.logObject.getter();
        v88 = static os_log_type_t.error.getter();
        v89 = os_log_type_enabled(v87, v88);
        v90 = *(_QWORD *)(v0 + 768);
        v91 = *(_QWORD *)(v0 + 752);
        v92 = *(_QWORD *)(v0 + 704);
        v93 = *(_QWORD *)(v0 + 688);
        if (v89)
        {
          logb = v87;
          v94 = *(_QWORD *)(v0 + 680);
          v95 = swift_slowAlloc();
          v127 = swift_slowAlloc();
          v136[0] = v127;
          *(_DWORD *)v95 = 136315906;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v0 + 592) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v93, v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v95 + 12) = 2080;
          v96 = TaskFlowConfiguration.debugDescription.getter();
          *(_QWORD *)(v0 + 552) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v134(v90, v91);
          *(_WORD *)(v95 + 22) = 2080;
          v98 = *(_QWORD *)(v92 + 96);
          v99 = *(_QWORD *)(v92 + 104);
          swift_bridgeObjectRetain();
          *(_QWORD *)(v0 + 536) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          *(_WORD *)(v95 + 32) = 2080;
          swift_getErrorValue();
          v100 = Error.localizedDescription.getter();
          *(_QWORD *)(v0 + 560) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_1B4BE6000, logb, v88, "Failed to donate SiriKit task configuration to Curare for taskId: %s, taskConfiguration: %s for interactionId:%s: %s", (uint8_t *)v95, 0x2Au);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v127, -1, -1);
          MEMORY[0x1B5E44758](v95, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
          v134(v90, v91);
          swift_release_n();

        }
      }
    }
    else
    {
      v125(*(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 752));
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      v69 = Logger.logObject.getter();
      v70 = static os_log_type_t.error.getter();
      v71 = os_log_type_enabled(v69, v70);
      v72 = *(_QWORD *)(v0 + 784);
      v73 = *(_QWORD *)(v0 + 752);
      v74 = *(_QWORD *)(v0 + 704);
      v75 = *(_QWORD *)(v0 + 688);
      if (v71)
      {
        v76 = *(_QWORD *)(v0 + 680);
        v77 = swift_slowAlloc();
        loga = (os_log_t)swift_slowAlloc();
        v136[0] = (uint64_t)loga;
        *(_DWORD *)v77 = 136315650;
        typeb = v70;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 624) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v75, v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v77 + 12) = 2080;
        v78 = TaskFlowConfiguration.debugDescription.getter();
        *(_QWORD *)(v0 + 616) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v134(v72, v73);
        *(_WORD *)(v77 + 22) = 2080;
        v80 = *(_QWORD *)(v74 + 96);
        v81 = *(_QWORD *)(v74 + 104);
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 608) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B4BE6000, v69, typeb, "Failed to create SiriKit task configuration donation to Curare for taskId: %s, taskConfiguration: %s for interactionId:%s", (uint8_t *)v77, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](loga, -1, -1);
        MEMORY[0x1B5E44758](v77, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        v134(v72, v73);
        swift_release_n();
      }

    }
    goto LABEL_31;
  }
  if (v35 == *MEMORY[0x1E0D9AD08])
  {
    v36 = (_OWORD *)(v0 + 448);
    v42 = (_OWORD *)(v0 + 480);
    *(_QWORD *)(v0 + 504) = v31;
    strcpy((char *)(v0 + 480), "modifiableTask");
    *(_BYTE *)(v0 + 495) = -18;
    goto LABEL_14;
  }
  if (v35 == *MEMORY[0x1E0D9AD18])
  {
    v42 = (_OWORD *)(v0 + 288);
    v36 = (_OWORD *)(v0 + 320);
    *(_QWORD *)(v0 + 312) = v31;
    *(_QWORD *)(v0 + 288) = 0xD000000000000011;
    *(_QWORD *)(v0 + 296) = 0x80000001B4F025D0;
    goto LABEL_14;
  }
  v102 = *(_QWORD *)(v0 + 792);
  v103 = *(_QWORD *)(v0 + 752);
  v104 = *(_QWORD *)(v0 + 696);
  swift_bridgeObjectRelease();
  v125(v102, v104, v103);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v105 = Logger.logObject.getter();
  v106 = static os_log_type_t.error.getter();
  v107 = os_log_type_enabled(v105, v106);
  v108 = *(_QWORD *)(v0 + 792);
  v109 = *(_QWORD *)(v0 + 752);
  v110 = *(_QWORD *)(v0 + 704);
  v111 = *(_QWORD *)(v0 + 688);
  if (v107)
  {
    v112 = *(_QWORD *)(v0 + 680);
    v113 = swift_slowAlloc();
    logc = (os_log_t)swift_slowAlloc();
    v136[0] = (uint64_t)logc;
    *(_DWORD *)v113 = 136315650;
    v128 = v106;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 648) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v111, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v113 + 12) = 2080;
    v114 = TaskFlowConfiguration.debugDescription.getter();
    *(_QWORD *)(v0 + 640) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v115, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v134(v108, v109);
    *(_WORD *)(v113 + 22) = 2080;
    v116 = *(_QWORD *)(v110 + 96);
    v117 = *(_QWORD *)(v110 + 104);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 632) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v117, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v105, v128, "Failed to create SiriKit task configuration donation due to invalid taskType for taskId: %s, taskConfiguration: %s for interactionId:%s", (uint8_t *)v113, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](logc, -1, -1);
    MEMORY[0x1B5E44758](v113, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    v134(v108, v109);
    swift_release_n();
  }

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 736) + 8))(*(_QWORD *)(v0 + 744), *(_QWORD *)(v0 + 728));
LABEL_31:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B4EAACD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for TaskFlowConfiguration();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for TaskFlowConfiguration() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = v1[5];
  v13 = *(_QWORD *)((char *)v1 + v6);
  v14 = (uint64_t)v1 + v8;
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:)(a1, v9, v10, v11, v12, (uint64_t)v1 + v5, v13, v14);
}

uint64_t SiriKitCurareDonator.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SiriKitCurareDonator.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:) in conformance SiriKitCurareDonator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:)(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of CurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  return (*(uint64_t (**)(void))(a23 + 8))();
}

uint64_t dispatch thunk of CurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t type metadata accessor for SiriKitCurareDonator()
{
  return objc_opt_self();
}

uint64_t method lookup function for SiriKitCurareDonator()
{
  return swift_lookUpClassMethod();
}

uint64_t InvocationScopedSiriKitEventSender.__allocating_init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  v10 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(a3 + 32);
  v12 = __swift_mutable_project_boxed_opaque_existential_1(a3, v10);
  v13 = specialized InvocationScopedSiriKitEventSender.__allocating_init(aceServiceInvoker:taskService:invocationState:)(v9, a2, v12, v3, v7, v10, v8, v11);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v13;
}

uint64_t SiriKitEventContext.aceServiceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 32, a1);
}

uint64_t SiriKitEventContext.taskService.getter()
{
  return swift_retain();
}

uint64_t SiriKitEventContext.executionRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriKitEventContext.interactionId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *SiriKitEventContext.__allocating_init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v6 = (_QWORD *)swift_allocObject();
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  v13 = *(_QWORD *)(a3 + 24);
  v14 = *(_QWORD *)(a3 + 32);
  v15 = __swift_mutable_project_boxed_opaque_existential_1(a3, v13);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  v19 = specialized SiriKitEventContext.init(aceServiceInvoker:taskService:invocationState:)((uint64_t)v11, a2, (uint64_t)v17, v6, v7, v13, v8, v14);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v19;
}

_QWORD *SiriKitEventContext.init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v4 = v3;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = __swift_mutable_project_boxed_opaque_existential_1(a1, v8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(a3 + 32);
  v16 = __swift_mutable_project_boxed_opaque_existential_1(a3, v14);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  v20 = specialized SiriKitEventContext.init(aceServiceInvoker:taskService:invocationState:)((uint64_t)v12, a2, (uint64_t)v18, v4, v8, v14, v9, v15);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v20;
}

uint64_t SiriKitEventContext.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriKitEventContext()
{
  return SiriKitEventContext.description.getter();
}

uint64_t InvocationScopedSiriKitEventSender.init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = v3;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = __swift_mutable_project_boxed_opaque_existential_1(a1, v8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  v14 = *(_QWORD *)(a3 + 24);
  v15 = *(_QWORD *)(a3 + 32);
  v16 = __swift_mutable_project_boxed_opaque_existential_1(a3, v14);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  v20 = specialized InvocationScopedSiriKitEventSender.init(aceServiceInvoker:taskService:invocationState:)((uint64_t)v12, a2, (uint64_t)v18, v4, v8, v14, v9, v15);
  __swift_destroy_boxed_opaque_existential_1(a3);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v20;
}

uint64_t InvocationScopedSiriKitEventSender.send(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3);
  v46 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SiriKitEventOverrides();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitEventOverrides?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v42 - v13;
  v47 = type metadata accessor for OSSignpostID();
  v44 = *(_QWORD *)(v47 - 8);
  v15 = MEMORY[0x1E0C80A78](v47);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v42 - v18;
  if (one-time initialization token for executor != -1)
    swift_once();
  v20 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  v45 = v19;
  os_signpost(_:dso:log:name:signpostID:)();
  SiriKitEvent.overrides.getter();
  v21 = *(_QWORD **)(v1 + 16);
  outlined init with copy of SiriKitEventOverrides?((uint64_t)v14, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
  {
    outlined destroy of SiriKitEventOverrides?((uint64_t)v14);
    swift_retain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
    swift_retain();
    v22 = SiriKitEventContext.withOverrides(_:)((uint64_t)v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    outlined destroy of SiriKitEventOverrides?((uint64_t)v14);
    swift_release();
    v21 = v22;
  }
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.instrumentation);
  swift_retain_n();
  swift_retain_n();
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc();
    v43 = swift_slowAlloc();
    v49 = v43;
    *(_DWORD *)v26 = 136315394;
    v27 = SiriKitEvent.debugDescription.getter();
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    swift_retain();
    v29 = SiriKitEventContext.description.getter();
    v30 = a1;
    v32 = v31;
    swift_release();
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v32, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    a1 = v30;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v24, v25, "Dispatching event to sinks: %s with context: %s", (uint8_t *)v26, 0x16u);
    v33 = v43;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v33, -1, -1);
    MEMORY[0x1B5E44758](v26, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  v34 = v45;
  type metadata accessor for IntentLoggingEventSink();
  swift_initStaticObject();
  specialized IntentLoggingEventSink.receive(_:_:)(a1);
  static os_signpost_type_t.event.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v35 = *(void (**)(char *, uint64_t))(v44 + 8);
  v35(v17, v47);
  if (one-time initialization token for instance != -1)
    swift_once();
  v36 = static TaskLoggingEventSink.instance;
  v37 = type metadata accessor for TaskPriority();
  v38 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v46, 1, 1, v37);
  v39 = (_QWORD *)swift_allocObject();
  v39[2] = 0;
  v39[3] = 0;
  v39[4] = v36;
  v39[5] = a1;
  v39[6] = v21;
  swift_retain();
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v38, (uint64_t)&async function pointer to partial apply for closure #1 in TaskLoggingEventSink.receive(_:_:), (uint64_t)v39);
  swift_release();
  static os_signpost_type_t.event.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v40 = v47;
  v35(v17, v47);
  swift_release();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v35)(v34, v40);
}

uint64_t InvocationScopedSiriKitEventSender.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t protocol witness for SiriKitEventSending.send(_:) in conformance InvocationScopedSiriKitEventSender(uint64_t a1)
{
  return InvocationScopedSiriKitEventSender.send(_:)(a1);
}

uint64_t specialized InvocationScopedSiriKitEventSender.__allocating_init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v23 = a7;
  v24 = a8;
  v13 = *(_QWORD *)(a6 - 8);
  v14 = MEMORY[0x1E0C80A78](a1);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v14);
  v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a3, a6);
  return specialized InvocationScopedSiriKitEventSender.init(aceServiceInvoker:taskService:invocationState:)((uint64_t)v20, a2, (uint64_t)v16, v21, a5, a6, v23, v24);
}

uint64_t sub_1B4EABC14()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TaskLoggingEventSink.receive(_:_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in TaskLoggingEventSink.receive(_:_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t method lookup function for SiriKitEventContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriKitEventContext.__allocating_init(aceServiceInvoker:taskService:invocationState:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SiriKitEventSink.receive(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of SiriKitEventSink.receiveAsync(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 16) + *(_QWORD *)(a4 + 16));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v11(a1, a2, a3, a4);
}

uint64_t method lookup function for InvocationScopedSiriKitEventSender()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InvocationScopedSiriKitEventSender.__allocating_init(aceServiceInvoker:taskService:invocationState:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t static SiriKitExecutorRunUtils.siriLocale.getter()
{
  return static SiriKitExecutorRunUtils.siriLocale.getter((void (*)(uint64_t))MEMORY[0x1E0DA7E50]);
}

uint64_t static SiriKitExecutorRunUtils.siriVoiceGender.getter()
{
  return static SiriKitExecutorRunUtils.siriLocale.getter((void (*)(uint64_t))MEMORY[0x1E0DA7E88]);
}

uint64_t static SiriKitExecutorRunUtils.siriLocale.getter(void (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for DeviceEnvironmentHelper();
  MEMORY[0x1B5E3F604]();
  swift_release();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  v2 = swift_release();
  a1(v2);
  return swift_release();
}

uint64_t static SiriKitExecutorRunUtils.preferencesLanguageCode.getter()
{
  uint64_t v0;

  type metadata accessor for DeviceEnvironmentHelper();
  MEMORY[0x1B5E3F604]();
  swift_release();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  v0 = dispatch thunk of CurrentDevice.preferencesLanguageCode.getter();
  swift_release();
  return v0;
}

uint64_t static SiriKitExecutorRunUtils.interactionTypeFrom(command:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return static SiriKitExecutorRunUtils.interactionTypeFrom(command:)(a1, (SEL *)&selRef_interactionType, (void (*)(uint64_t, uint64_t))static SiriKitExecutorRunUtils.interactionTypeFrom(aceValue:), MEMORY[0x1E0DA8010], MEMORY[0x1E0DA8038], a2);
}

uint64_t static SiriKitExecutorRunUtils.inputOriginFrom(command:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return static SiriKitExecutorRunUtils.interactionTypeFrom(command:)(a1, (SEL *)&selRef_inputOrigin, (void (*)(uint64_t, uint64_t))static SiriKitExecutorRunUtils.inputOriginFrom(aceValue:), MEMORY[0x1E0DA7CE0], MEMORY[0x1E0DA7D50], a2);
}

uint64_t static SiriKitExecutorRunUtils.interactionTypeFrom(command:)@<X0>(void *a1@<X0>, SEL *a2@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, unsigned int *a4@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v10 = objc_msgSend(a1, *a2);
  if (v10)
  {
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

    a3(v12, v14);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v16 = *a4;
    v17 = a5();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(a6, v16, v17);
  }
}

uint64_t static SiriKitExecutorRunUtils.sessionHandOffContinuityIDFrom(command:)(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_sessionHandOffContinuityID);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id static SiriKitExecutorRunUtils.eyesFreeFrom(command:)(void *a1)
{
  return objc_msgSend(a1, sel_eyesFree);
}

id static SiriKitExecutorRunUtils.voiceTriggerEnabledFrom(command:)(void *a1)
{
  return objc_msgSend(a1, sel_voiceTriggerEnabled);
}

id static SiriKitExecutorRunUtils.textToSpeechEnabledFrom(command:)(void *a1)
{
  return objc_msgSend(a1, sel_textToSpeechEnabled);
}

uint64_t static SiriKitExecutorRunUtils.logFailedCompletion(intentTypeName:errorCode:reason:refId:commandCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7, void (*a8)(void *), char *a9)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void *v39;
  Swift::String v40;
  int *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  id v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(void *);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84[6];

  v77 = a8;
  v78 = a6;
  v75 = a2;
  v72 = a1;
  v13 = type metadata accessor for SiriKitEventPayload();
  v73 = *(_QWORD *)(v13 - 8);
  v74 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SiriKitReliabilityCodes();
  v79 = *(_QWORD *)(v16 - 8);
  v80 = v16;
  MEMORY[0x1E0C80A78](v16);
  v71 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v70 = swift_slowAlloc();
    v84[0] = v70;
    *(_DWORD *)v21 = 134218498;
    v82 = a3;
    v76 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2080;
    v22 = a5 == 0;
    v23 = (unint64_t)a5;
    if (a5)
      v24 = a4;
    else
      v24 = 0x6E776F6E6B6E55;
    if (v22)
      v25 = 0xE700000000000000;
    else
      v25 = v23;
    v81 = a4;
    swift_bridgeObjectRetain();
    v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    if (a7)
      v26 = v78;
    else
      v26 = 1819047246;
    if (a7)
      v27 = a7;
    else
      v27 = 0xE400000000000000;
    swift_bridgeObjectRetain();
    v28 = v26;
    a4 = v81;
    v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, v84);
    a3 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a5 = (void *)v23;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v19, v20, "SiriKitExecutor failing with error: errorCode=%ld, reason='%s', refId='%s'", (uint8_t *)v21, 0x20u);
    v29 = v70;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v29, -1, -1);
    MEMORY[0x1B5E44758](v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  v76 = a7;
  static SiriKitEventSender.current.getter();
  v82 = a3;
  v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  v82 = 0x646F43726F727245;
  v83 = 0xEB00000000203A65;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31 = v82;
  v32 = v83;
  v33 = (unint64_t)a5;
  v34 = a4;
  v35 = a5;
  if (!a5)
  {
    a4 = 0x6E776F6E6B6E55;
    v37 = v79;
    v36 = v80;
    v38 = v71;
    (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v71, *MEMORY[0x1E0D9B2E8], v80);
    v34 = SiriKitReliabilityCodes.rawValue.getter();
    v35 = v39;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v36);
    v33 = 0xE700000000000000;
  }
  v81 = a4;
  v82 = v31;
  v70 = v33;
  v71 = a9;
  v83 = v32;
  swift_bridgeObjectRetain();
  v40._countAndFlagsBits = v34;
  v40._object = v35;
  String.append(_:)(v40);
  v65 = v82;
  v64 = v83;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v68 = v84[4];
  v67 = __swift_project_boxed_opaque_existential_1(v84, v84[3]);
  v66 = type metadata accessor for SiriKitEvent();
  v41 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intentTypeName: String, app: App?, attribute: String?, parameterName: String?, responseId: String?, statusDescription: String?, statusReason: SiriKitReliabilityCodes?));
  v42 = &v15[v41[12]];
  v43 = v41[16];
  v44 = &v15[v41[20]];
  v45 = &v15[v41[24]];
  v46 = &v15[v41[28]];
  v47 = v41[32];
  v69 = a5;
  v48 = &v15[v47];
  v49 = &v15[v41[36]];
  v50 = *MEMORY[0x1E0D9B6D0];
  v51 = type metadata accessor for ActivityType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v15, v50, v51);
  v52 = v75;
  *(_QWORD *)v42 = v72;
  *((_QWORD *)v42 + 1) = v52;
  *(_QWORD *)&v15[v43] = 0;
  *(_QWORD *)v44 = 0;
  *((_QWORD *)v44 + 1) = 0;
  *(_QWORD *)v45 = 0;
  *((_QWORD *)v45 + 1) = 0;
  *(_QWORD *)v46 = 0xD000000000000012;
  *((_QWORD *)v46 + 1) = 0x80000001B4F02430;
  v53 = v64;
  *(_QWORD *)v48 = v65;
  *((_QWORD *)v48 + 1) = v53;
  v55 = v79;
  v54 = v80;
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v49, *MEMORY[0x1E0D9B2C0], v80);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v49, 0, 1, v54);
  (*(void (**)(char *, _QWORD, uint64_t))(v73 + 104))(v15, *MEMORY[0x1E0D9B238], v74);
  swift_bridgeObjectRetain();
  SiriKitEvent.__allocating_init(_:builder:)();
  dispatch thunk of SiriKitEventSending.send(_:)();
  swift_release();
  v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D87FE8]), sel_init);
  objc_msgSend(v56, sel_setErrorCode_, -1);
  swift_bridgeObjectRetain();
  v57 = (void *)MEMORY[0x1B5E432E8](v81, v70);
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_setReason_, v57);

  v58 = v56;
  if (v76)
    v59 = (void *)MEMORY[0x1B5E432E8](v78);
  else
    v59 = 0;
  objc_msgSend(v58, sel_setRefId_, v59);

  v60 = objc_msgSend(v58, sel_dictionary);
  v61 = v60;
  if (v60)
  {
    v62 = objc_msgSend(v60, sel_copy);

    if (v62)
    {
      v61 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      v61 = 0;
    }
  }
  v77(v61);

  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
}

void closure #1 in static SiriKitExecutorRunUtils.makeParse(aceParse:peerInfo:endpointInfo:confirmationState:aceParameterMetadata:appSelectionState:)(_QWORD *a1@<X8>)
{
  void *v2;
  Class isa;
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  id v18[5];

  v18[4] = *(id *)MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v18[0] = 0;
  v4 = objc_msgSend(v2, sel_propertyListWithData_options_format_error_, isa, 0, 0, v18);

  if (!v4)
  {
    v6 = v18[0];
    v7 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for executor != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
    v9 = v7;
    v10 = v7;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = (void *)swift_slowAlloc();
      v18[0] = v14;
      *(_DWORD *)v13 = 136315138;
      v15 = v7;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v16 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v11, v12, "Could not decode directInvocation data: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v14, -1, -1);
      MEMORY[0x1B5E44758](v13, -1, -1);

    }
    else
    {

    }
    goto LABEL_9;
  }
  v5 = v18[0];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0)
LABEL_9:
    *a1 = 0;
}

uint64_t static SiriKitExecutorRunUtils.multiUserStateFrom(command:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  if (objc_msgSend(a1, sel_multiUser))
  {
    static SiriKitExecutorRunUtils.multiUserContextFrom(command:)(a1);
    v4 = type metadata accessor for MultiUserContext();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a2;
    v7 = 0;
  }
  else
  {
    v4 = type metadata accessor for MultiUserContext();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a2;
    v7 = 1;
  }
  return v5(v6, v7, 1, v4);
}

void static SiriKitExecutorRunUtils.multiUserContextFrom(command:)(void *a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;

  v18 = objc_msgSend(a1, sel_identifiedUserMeCard);
  v2 = objc_msgSend(a1, sel_remoteExecution);
  if (!v2
    || (v3 = v2, v4 = objc_msgSend(v2, sel_runLocation), v3, !v4))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_11;
  }
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v7)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if (v5 == v8 && v7 == v9)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
      goto LABEL_12;
  }
  v15 = objc_msgSend(a1, sel_remoteExecution);
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v15, sel_executionDeviceAssistantId);

    if (v17)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v12 = v18;
      if (!v18)
        goto LABEL_18;
      goto LABEL_13;
    }
LABEL_12:
    v12 = v18;
    if (!v18)
    {
LABEL_18:
      v14 = 0;
      goto LABEL_19;
    }
LABEL_13:
    v13 = v12;
    v14 = SAPerson.contact.getter();

LABEL_19:
    type metadata accessor for DefaultMeCardProxy();
    *(_QWORD *)(swift_allocObject() + 16) = v14;
    objc_msgSend(a1, sel_requiresConditionalMultiUserGrounding);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type DefaultMeCardProxy and conformance DefaultMeCardProxy, (uint64_t (*)(uint64_t))type metadata accessor for DefaultMeCardProxy, (uint64_t)&protocol conformance descriptor for DefaultMeCardProxy);
    swift_retain();
    MultiUserContext.init(requiresUserGrounding:meCardProxy:handoffTargetDeviceID:)();
    swift_release();

    return;
  }
  __break(1u);
}

uint64_t static SiriKitExecutorRunUtils.crashIfThrow(file:line:closure:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t static SiriKitExecutorRunUtils.crashIfThrow(file:line:closure:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  *(_QWORD *)(v5 + 48) = a2;
  *(_QWORD *)(v5 + 56) = a4;
  *(_BYTE *)(v5 + 80) = a3;
  *(_QWORD *)(v5 + 40) = a1;
  v8 = (uint64_t (*)(void))((char *)a5 + *a5);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 64) = v6;
  *v6 = v5;
  v6[1] = static SiriKitExecutorRunUtils.crashIfThrow(file:line:closure:);
  return v8();
}

uint64_t static SiriKitExecutorRunUtils.crashIfThrow(file:line:closure:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 72);
  v1 = v0 + 32;
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 - 16) = 0;
  *(_QWORD *)(v1 - 8) = 0xE000000000000000;
  v5 = *(unsigned __int8 *)(v1 + 48);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(*(_QWORD *)(v1 - 16), *(_QWORD *)(v1 - 8), v4, v2, v5, v3);
}

void specialized static SiriKitExecutorRunUtils.addIntentMetadata(intent:peerInfo:endpointInfo:)(void *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  id v71;
  id v72;
  void *v73;
  uint64_t v74;
  Class isa;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  char v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  Class v90;

  if (one-time initialization token for executor != -1)
    swift_once();
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B4EE6910;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v6 = dispatch thunk of PeerInfoProviding.getIdsIdentifier()();
  v8 = v7;
  v9 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v5 + 56) = MEMORY[0x1E0DEA968];
  v10 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v5 + 64) = v10;
  v11 = 0x3E4C494E3CLL;
  if (v8)
  {
    v11 = v6;
    v12 = v8;
  }
  else
  {
    v12 = 0xE500000000000000;
  }
  *(_QWORD *)(v5 + 32) = v11;
  *(_QWORD *)(v5 + 40) = v12;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v13 = dispatch thunk of PeerInfoProviding.getRapportEffectiveIdentifier()();
  *(_QWORD *)(v5 + 96) = v9;
  *(_QWORD *)(v5 + 104) = v10;
  if (v14)
    v15 = v13;
  else
    v15 = 0x3E4C494E3CLL;
  if (v14)
    v16 = v14;
  else
    v16 = 0xE500000000000000;
  *(_QWORD *)(v5 + 72) = v15;
  *(_QWORD *)(v5 + 80) = v16;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v17 = dispatch thunk of PeerInfoProviding.getMediaSystemIdentifier()();
  *(_QWORD *)(v5 + 136) = v9;
  *(_QWORD *)(v5 + 144) = v10;
  if (v18)
    v19 = v17;
  else
    v19 = 0x3E4C494E3CLL;
  if (v18)
    v20 = v18;
  else
    v20 = 0xE500000000000000;
  *(_QWORD *)(v5 + 112) = v19;
  *(_QWORD *)(v5 + 120) = v20;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v21 = dispatch thunk of PeerInfoProviding.isOwnedByCurrentUser()();
  v22 = 1163219540;
  if ((v21 & 1) == 0)
    v22 = 0x45534C4146;
  v23 = 0xE400000000000000;
  if ((v21 & 1) == 0)
    v23 = 0xE500000000000000;
  *(_QWORD *)(v5 + 176) = v9;
  *(_QWORD *)(v5 + 184) = v10;
  *(_QWORD *)(v5 + 152) = v22;
  *(_QWORD *)(v5 + 160) = v23;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v24 = dispatch thunk of PeerInfoProviding.getMediaRouteIdentifier()();
  *(_QWORD *)(v5 + 216) = v9;
  *(_QWORD *)(v5 + 224) = v10;
  if (v25)
    v26 = v24;
  else
    v26 = 0x3E4C494E3CLL;
  if (v25)
    v27 = v25;
  else
    v27 = 0xE500000000000000;
  *(_QWORD *)(v5 + 192) = v26;
  *(_QWORD *)(v5 + 200) = v27;
  v28 = a3[4];
  v86 = a3[3];
  v87 = __swift_project_boxed_opaque_existential_1(a3, v86);
  v88 = v28;
  v29 = dispatch thunk of EndpointInfoProviding.getIdentifier()();
  *(_QWORD *)(v5 + 256) = v9;
  *(_QWORD *)(v5 + 264) = v10;
  if (v30)
    v31 = v29;
  else
    v31 = 0x3E4C494E3CLL;
  if (v30)
    v32 = v30;
  else
    v32 = 0xE500000000000000;
  *(_QWORD *)(v5 + 232) = v31;
  *(_QWORD *)(v5 + 240) = v32;
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  v33 = dispatch thunk of EndpointInfoProviding.getMediaRouteIdentifier()();
  *(_QWORD *)(v5 + 296) = v9;
  *(_QWORD *)(v5 + 304) = v10;
  if (v34)
    v35 = v33;
  else
    v35 = 0x3E4C494E3CLL;
  if (v34)
    v36 = v34;
  else
    v36 = 0xE500000000000000;
  *(_QWORD *)(v5 + 272) = v35;
  *(_QWORD *)(v5 + 280) = v36;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  v37 = objc_msgSend(a1, sel__metadata);

  if (v37)
  {
    v38 = objc_msgSend(a1, sel__metadata);
    if (v38)
    {
      v39 = v38;
      v40 = dispatch thunk of PeerInfoProviding.getIdsIdentifier()();
      if (v41)
      {
        v42 = (void *)MEMORY[0x1B5E432E8](v40);
        swift_bridgeObjectRelease();
      }
      else
      {
        v42 = 0;
      }
      objc_msgSend(v39, sel_setOriginatingDeviceIdsIdentifier_, v42, v86, v87, v28);

    }
    v43 = objc_msgSend(a1, sel__metadata, v86, v87, v88);
    if (v43)
    {
      v44 = v43;
      __swift_project_boxed_opaque_existential_1(a2, a2[3]);
      v45 = dispatch thunk of PeerInfoProviding.getRapportEffectiveIdentifier()();
      if (v46)
      {
        v47 = (void *)MEMORY[0x1B5E432E8](v45);
        swift_bridgeObjectRelease();
      }
      else
      {
        v47 = 0;
      }
      objc_msgSend(v44, sel_setOriginatingDeviceRapportEffectiveId_, v47);

    }
    v48 = objc_msgSend(a1, sel__metadata);
    if (v48)
    {
      v49 = v48;
      __swift_project_boxed_opaque_existential_1(a2, a2[3]);
      v50 = dispatch thunk of PeerInfoProviding.getMediaSystemIdentifier()();
      if (v51)
      {
        v52 = (void *)MEMORY[0x1B5E432E8](v50);
        swift_bridgeObjectRelease();
      }
      else
      {
        v52 = 0;
      }
      objc_msgSend(v49, sel_setOriginatingDeviceRapportMediaSystemId_, v52);

    }
    v53 = objc_msgSend(a1, sel__metadata);
    if (v53)
    {
      v54 = v53;
      __swift_project_boxed_opaque_existential_1(a2, a2[3]);
      objc_msgSend(v54, sel_setIsOwnedByCurrentUser_, dispatch thunk of PeerInfoProviding.isOwnedByCurrentUser()() & 1);

    }
    v55 = objc_msgSend(a1, sel__metadata);
    if (v55)
    {
      v56 = v55;
      v57 = dispatch thunk of EndpointInfoProviding.getIdentifier()();
      if (v58)
      {
        v59 = (void *)MEMORY[0x1B5E432E8](v57);
        swift_bridgeObjectRelease();
      }
      else
      {
        v59 = 0;
      }
      objc_msgSend(v56, sel_setEndpointId_, v59);

    }
    v60 = objc_msgSend(a1, sel__metadata);
    if (v60)
    {
      v61 = v60;
      __swift_project_boxed_opaque_existential_1(a3, a3[3]);
      v62 = dispatch thunk of EndpointInfoProviding.getMediaRouteIdentifier()();
      if (v63)
      {
        v64 = (void *)MEMORY[0x1B5E432E8](v62);
        swift_bridgeObjectRelease();
      }
      else
      {
        v64 = 0;
      }
      objc_msgSend(v61, sel_setMediaRouteId_, v64);

    }
    __swift_project_boxed_opaque_existential_1(a2, a2[3]);
    v65 = dispatch thunk of PeerInfoProviding.getMediaRouteIdentifier()();
    if (v66)
    {
      v67 = v65;
      v68 = v66;
      v69 = objc_msgSend(a1, sel__metadata);
      if (v69
        && (v70 = v69,
            v71 = objc_msgSend(v69, sel_airPlayRouteIds),
            v70,
            v71))
      {
        swift_bridgeObjectRelease();

      }
      else
      {
        v72 = objc_msgSend(a1, sel__metadata);
        if (v72)
        {
          v73 = v72;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          v74 = swift_allocObject();
          *(_OWORD *)(v74 + 16) = xmmword_1B4EE3F50;
          *(_QWORD *)(v74 + 32) = v67;
          *(_QWORD *)(v74 + 40) = v68;
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v73, sel_setAirPlayRouteIds_, isa);

        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
  }
  else
  {
    static os_log_type_t.debug.getter();
    os_log(_:dso:log:type:_:)();
  }
  v76 = dispatch thunk of PeerInfoProviding.getIdsIdentifier()();
  if (v77)
  {
    v78 = (void *)MEMORY[0x1B5E432E8](v76);
    swift_bridgeObjectRelease();
  }
  else
  {
    v78 = 0;
  }
  objc_msgSend(a1, sel__setOriginatingDeviceIdsIdentifier_, v78, v86, v87, v88);

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v79 = dispatch thunk of PeerInfoProviding.getRapportEffectiveIdentifier()();
  if (v80)
  {
    v81 = (void *)MEMORY[0x1B5E432E8](v79);
    swift_bridgeObjectRelease();
  }
  else
  {
    v81 = 0;
  }
  objc_msgSend(a1, sel__setOriginatingDeviceRapportEffectiveIdentifier_, v81);

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v82 = dispatch thunk of PeerInfoProviding.getMediaSystemIdentifier()();
  if (v83)
  {
    v84 = (void *)MEMORY[0x1B5E432E8](v82);
    swift_bridgeObjectRelease();
  }
  else
  {
    v84 = 0;
  }
  objc_msgSend(a1, sel__setOriginatingDeviceRapportMediaSystemIdentifier_, v84);

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  v85 = dispatch thunk of PeerInfoProviding.isOwnedByCurrentUser()();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v90 = NSNumber.init(integerLiteral:)(v85 & 1).super.super.isa;
  objc_msgSend(a1, sel__setIsOwnedByCurrentUser_, v90);

}

uint64_t specialized static SiriKitExecutorRunUtils.makeSiriKitParameterMetadata(aceParameterMetadata:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::String v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE v48[32];
  uint64_t v49;
  uint64_t v50;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitConfirmationState?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SiriKitConfirmationState();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v45 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v33 - v9;
  if (a1 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  result = MEMORY[0x1E0DEE9D8];
  if (v11)
  {
    v50 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v11 & 0x8000000000000000) == 0)
    {
      v13 = 0;
      v39 = a1 & 0xC000000000000001;
      v34 = a1 + 32;
      v37 = MEMORY[0x1E0DEE9B8] + 8;
      v36 = a1;
      v35 = v11;
      while (1)
      {
        if (v13 == v11)
        {
          __break(1u);
          goto LABEL_28;
        }
        if (v39)
          v15 = (id)MEMORY[0x1B5E43B94](v13, a1);
        else
          v15 = *(id *)(v34 + 8 * v13);
        v16 = v15;
        v17 = objc_msgSend(v15, sel_parameterName);
        if (!v17)
          goto LABEL_30;
        v18 = v17;
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v42 = v20;
        v43 = v19;

        v41 = objc_msgSend(v16, sel_shouldResolve);
        v21 = objc_msgSend(v16, sel_confirmationStates);
        v44 = v13;
        if (v21)
        {
          v22 = v21;
          v40 = v16;
          v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          v24 = *(_QWORD *)(v23 + 16);
          if (v24)
          {
            v49 = MEMORY[0x1E0DEE9D8];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
            v38 = v23;
            v25 = v23 + 32;
            while (1)
            {
              outlined init with copy of Any(v25, (uint64_t)v48);
              outlined init with copy of Any((uint64_t)v48, (uint64_t)&v46);
              if (!swift_dynamicCast())
                goto LABEL_31;
              SiriKitConfirmationState.init(rawValue:)();
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
                goto LABEL_32;
              v26 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
              v27 = v45;
              v26(v45, v4, v5);
              v26(v10, v27, v5);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
              v28 = v49;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1);
                v28 = v49;
              }
              v30 = *(_QWORD *)(v28 + 16);
              v29 = *(_QWORD *)(v28 + 24);
              if (v30 >= v29 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
                v28 = v49;
              }
              *(_QWORD *)(v28 + 16) = v30 + 1;
              v26((char *)(v28+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v30), v10, v5);
              v49 = v28;
              v25 += 32;
              if (!--v24)
              {
                swift_bridgeObjectRelease();
                a1 = v36;
                v11 = v35;
                goto LABEL_24;
              }
            }
          }
          swift_bridgeObjectRelease();
LABEL_24:
          v16 = v40;
        }
        v14 = v44 + 1;
        type metadata accessor for SiriKitParameterMetadata();
        swift_allocObject();
        SiriKitParameterMetadata.init(parameterName:shouldResolve:confirmationStates:)();

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v13 = v14;
        if (v14 == v11)
          return v50;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v31._object = (void *)0x80000001B4F00BD0;
    v31._countAndFlagsBits = 0xD000000000000026;
    String.append(_:)(v31);
    _print_unlocked<A, B>(_:_:)();
    specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Extensions/SAIntentGroupSiriKitConfirmationState+Enum.swift", 128, 2, 38);
    __break(1u);
LABEL_32:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for SiriKitConfirmationState?);
    v46 = 0;
    v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v32._countAndFlagsBits = 0xD00000000000002CLL;
    v32._object = (void *)0x80000001B4F00C90;
    String.append(_:)(v32);
    _print_unlocked<A, B>(_:_:)();
    result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Extensions/SAIntentGroupSiriKitConfirmationState+Enum.swift", 128, 2, 42);
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriKitExecutorRunUtils()
{
  return &type metadata for SiriKitExecutorRunUtils;
}

uint64_t SiriKitFlowActivity.appBundleId.setter(uint64_t a1, uint64_t a2)
{
  return SiriKitFlowActivity.appBundleId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.appBundleId);
}

uint64_t (*SiriKitFlowActivity.appBundleId.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.appName.setter(uint64_t a1, uint64_t a2)
{
  return SiriKitFlowActivity.appBundleId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.appName);
}

uint64_t (*SiriKitFlowActivity.appName.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.appVersion.setter(uint64_t a1, uint64_t a2)
{
  return SiriKitFlowActivity.appBundleId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.appVersion);
}

uint64_t (*SiriKitFlowActivity.appVersion.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.build.setter(uint64_t a1, uint64_t a2)
{
  return SiriKitFlowActivity.appBundleId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.build);
}

uint64_t (*SiriKitFlowActivity.build.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*SiriKitFlowActivity.errorCodeDescription.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.eventReliabilityCode.setter(uint64_t a1, uint64_t a2)
{
  return SiriKitFlowActivity.appBundleId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.eventReliabilityCode);
}

uint64_t (*SiriKitFlowActivity.eventReliabilityCode.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.isSiriKit.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + direct field offset for SiriKitFlowActivity.isSiriKit);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*SiriKitFlowActivity.isSiriKit.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t SiriKitFlowActivity.isSiriKitSupportedApp.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + direct field offset for SiriKitFlowActivity.isSiriKitSupportedApp);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*SiriKitFlowActivity.isSiriKitSupportedApp.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.responseId.setter(uint64_t a1, uint64_t a2)
{
  return SiriKitFlowActivity.appBundleId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.responseId);
}

uint64_t (*SiriKitFlowActivity.responseId.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.slotName.setter(uint64_t a1, uint64_t a2)
{
  return SiriKitFlowActivity.appBundleId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.slotName);
}

uint64_t (*SiriKitFlowActivity.slotName.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.executionRequestId.setter(uint64_t a1, uint64_t a2)
{
  return SiriKitFlowActivity.appBundleId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.executionRequestId);
}

uint64_t SiriKitFlowActivity.appBundleId.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)(v3 + *a3);
  swift_beginAccess();
  *v6 = a1;
  v6[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriKitFlowActivity.executionRequestId.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.__allocating_init(activityType:app:executionRequestId:responseId:taskStepStartTime:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8)
{
  int v15;
  uint64_t v16;

  v15 = a8 & 1;
  swift_allocObject();
  v16 = specialized SiriKitFlowActivity.init(activityType:app:executionRequestId:responseId:taskStepStartTime:)(a1, a2, a3, a4, a5, a6, a7, v15);
  swift_release();
  return v16;
}

void SiriKitFlowActivity.__allocating_init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t inited;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v0 = type metadata accessor for SiriKitReliabilityCodes();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  inited = swift_initStackObject();
  v5 = (_QWORD *)(inited + direct field offset for SiriKitFlowActivity.errorCodeDescription);
  *v5 = 0;
  v5[1] = 0xE000000000000000;
  v6 = (uint64_t *)(inited + direct field offset for SiriKitFlowActivity.eventReliabilityCode);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0D9B318], v0);
  v7 = SiriKitReliabilityCodes.rawValue.getter();
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  *v6 = v7;
  v6[1] = v9;
  *(_BYTE *)(inited + direct field offset for SiriKitFlowActivity.isSiriKit) = 1;
  v10 = inited + direct field offset for SiriKitFlowActivity.slotName;
  strcpy((char *)(inited + direct field offset for SiriKitFlowActivity.slotName), "not_applicable");
  *(_BYTE *)(v10 + 15) = -18;
  swift_release();
  specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000024, 0x80000001B4F02C10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/TaskStepInstrumentation/SiriKitFlowActivity.swift", 118, 2, 50);
  __break(1u);
}

void SiriKitFlowActivity.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for SiriKitReliabilityCodes();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)(v1 + direct field offset for SiriKitFlowActivity.errorCodeDescription);
  *v6 = 0;
  v6[1] = 0xE000000000000000;
  v7 = (uint64_t *)(v1 + direct field offset for SiriKitFlowActivity.eventReliabilityCode);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0D9B318], v2);
  v8 = SiriKitReliabilityCodes.rawValue.getter();
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *v7 = v8;
  v7[1] = v10;
  *(_BYTE *)(v1 + direct field offset for SiriKitFlowActivity.isSiriKit) = 1;
  v11 = v1 + direct field offset for SiriKitFlowActivity.slotName;
  strcpy((char *)(v1 + direct field offset for SiriKitFlowActivity.slotName), "not_applicable");
  *(_BYTE *)(v11 + 15) = -18;
  swift_release();
  specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000024, 0x80000001B4F02C10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/TaskStepInstrumentation/SiriKitFlowActivity.swift", 118, 2, 50);
  __break(1u);
}

SiriKitRuntime::SiriKitFlowActivity::CodingKeys_optional __swiftcall SiriKitFlowActivity.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriKitRuntime::SiriKitFlowActivity::CodingKeys_optional)11;
}

uint64_t SiriKitFlowActivity.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t SiriKitFlowActivity.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4EAE3D8 + 4 * a7[a1]))(0x6C646E7542707061, 0xEB00000000644965);
}

uint64_t sub_1B4EAE3D8()
{
  return 0x656D614E707061;
}

uint64_t sub_1B4EAE3F0()
{
  return 0x6973726556707061;
}

uint64_t sub_1B4EAE414()
{
  return 0x646C697562;
}

unint64_t sub_1B4EAE428()
{
  return 0xD000000000000014;
}

uint64_t sub_1B4EAE450()
{
  return 0x694B697269537369;
}

unint64_t sub_1B4EAE46C()
{
  return 0xD000000000000015;
}

uint64_t sub_1B4EAE48C()
{
  return 0x656D614E746F6C73;
}

uint64_t sub_1B4EAE4A4()
{
  return 0x64496E727574;
}

uint64_t sub_1B4EAE4B8()
{
  return 0x65736E6F70736572;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SiriKitFlowActivity.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = SiriKitFlowActivity.CodingKeys.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == SiriKitFlowActivity.CodingKeys.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SiriKitFlowActivity.CodingKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  SiriKitFlowActivity.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SiriKitFlowActivity.CodingKeys()
{
  unsigned __int8 *v0;

  SiriKitFlowActivity.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SiriKitFlowActivity.CodingKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  SiriKitFlowActivity.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SiriKitFlowActivity.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized SiriKitFlowActivity.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SiriKitFlowActivity.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = SiriKitFlowActivity.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriKitFlowActivity.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized SiriKitFlowActivity.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SiriKitFlowActivity.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriKitFlowActivity.CodingKeys()
{
  lazy protocol witness table accessor for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriKitFlowActivity.CodingKeys()
{
  lazy protocol witness table accessor for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void SiriKitFlowActivity.__allocating_init(activityName:activityType:activityStartTime:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void SiriKitFlowActivity.init(activityName:activityType:activityStartTime:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t SiriKitFlowActivity.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized SiriKitFlowActivity.init(activityType:app:executionRequestId:responseId:taskStepStartTime:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD v52[4];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v9 = v8;
  v52[3] = a8;
  v55 = a1;
  v56 = a7;
  v53 = a5;
  v54 = a3;
  v12 = type metadata accessor for SiriKitReliabilityCodes();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)(v9 + direct field offset for SiriKitFlowActivity.errorCodeDescription);
  *v16 = 0;
  v16[1] = 0xE000000000000000;
  v17 = (uint64_t *)(v9 + direct field offset for SiriKitFlowActivity.eventReliabilityCode);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0D9B318], v12);
  swift_retain();
  v18 = SiriKitReliabilityCodes.rawValue.getter();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *v17 = v18;
  v17[1] = v20;
  *(_BYTE *)(v9 + direct field offset for SiriKitFlowActivity.isSiriKit) = 1;
  v21 = v9 + direct field offset for SiriKitFlowActivity.slotName;
  strcpy((char *)(v9 + direct field offset for SiriKitFlowActivity.slotName), "not_applicable");
  *(_BYTE *)(v21 + 15) = -18;
  type metadata accessor for AppInformationResolver();
  swift_allocObject();
  swift_retain();
  AppInformationResolver.init(app:)();
  v22 = dispatch thunk of AppInformationResolver.resolveAppBundleId.getter();
  if (v23)
    v24 = v22;
  else
    v24 = 0x6C7070615F746F6ELL;
  if (v23)
    v25 = v23;
  else
    v25 = 0xEE00656C62616369;
  v26 = (uint64_t *)(v9 + direct field offset for SiriKitFlowActivity.appBundleId);
  *v26 = v24;
  v26[1] = v25;
  v27 = dispatch thunk of AppInformationResolver.resolveAppName.getter();
  if (v28)
    v29 = v27;
  else
    v29 = 0x6C7070615F746F6ELL;
  if (v28)
    v30 = v28;
  else
    v30 = 0xEE00656C62616369;
  v31 = (uint64_t *)(v9 + direct field offset for SiriKitFlowActivity.appName);
  *v31 = v29;
  v31[1] = v30;
  v32 = dispatch thunk of AppInformationResolver.resolveAppVersion.getter();
  if (v33)
    v34 = v32;
  else
    v34 = 0x6C7070615F746F6ELL;
  if (v33)
    v35 = v33;
  else
    v35 = 0xEE00656C62616369;
  v36 = (uint64_t *)(v9 + direct field offset for SiriKitFlowActivity.appVersion);
  *v36 = v34;
  v36[1] = v35;
  v37 = dispatch thunk of AppInformationResolver.resolveBuild.getter();
  v39 = 48;
  if (v38)
    v39 = v37;
  v40 = 0xE100000000000000;
  if (v38)
    v40 = v38;
  v41 = (uint64_t *)(v9 + direct field offset for SiriKitFlowActivity.build);
  *v41 = v39;
  v41[1] = v40;
  *(_BYTE *)(v9 + direct field offset for SiriKitFlowActivity.isSiriKitSupportedApp) = dispatch thunk of AppInformationResolver.isSiriKitSupportedApp.getter() & 1;
  v42 = v53;
  if (a6)
  {
    v43 = a6;
  }
  else
  {
    v42 = 0;
    v43 = 0xE000000000000000;
  }
  v44 = (_QWORD *)(v9 + direct field offset for SiriKitFlowActivity.responseId);
  *v44 = v42;
  v44[1] = v43;
  v45 = v54;
  if (a4)
  {
    v46 = a4;
  }
  else
  {
    v45 = 0;
    v46 = 0xE000000000000000;
  }
  v47 = (_QWORD *)(v9 + direct field offset for SiriKitFlowActivity.executionRequestId);
  *v47 = v45;
  v47[1] = v46;
  swift_release();
  v48 = v55;
  ActivityType.rawValue.getter();
  v49 = DefaultFlowActivity.init(activityName:activityType:activityStartTime:)();
  swift_release();
  v50 = type metadata accessor for ActivityType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 8))(v48, v50);
  return v49;
}

unint64_t specialized SiriKitFlowActivity.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SiriKitFlowActivity.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB)
    return 11;
  else
    return v3;
}

uint64_t sub_1B4EAEB58@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 88))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4EAEB94(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 96);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4EAEBE4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 112))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4EAEC20(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 120);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4EAEC70@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 136))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4EAECAC(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 144);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4EAECFC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 160))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4EAED38(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 168);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4EAED88@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 184))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4EAEDC4(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 192);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4EAEE14@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 208))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4EAEE50(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 216);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4EAEEA0@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 232))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4EAEEE0(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))(class metadata base offset for SiriKitFlowActivity + **a2 + 240))(*a1);
}

uint64_t sub_1B4EAEF18@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 256))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4EAEF58(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))(class metadata base offset for SiriKitFlowActivity + **a2 + 264))(*a1);
}

uint64_t sub_1B4EAEF90@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 280))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4EAEFCC(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 288);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4EAF01C@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 304))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4EAF058(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 312);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4EAF0A8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 328))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4EAF0E4(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 336);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t type metadata completion function for SiriKitFlowActivity()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for SiriKitFlowActivity()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appBundleId.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 88))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appBundleId.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 96))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appBundleId.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 104))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 112))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appName.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 120))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appName.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 128))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appVersion.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 136))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appVersion.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 144))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appVersion.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 152))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.build.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 160))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.build.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 168))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.build.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 176))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.errorCodeDescription.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 184))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.errorCodeDescription.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 192))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.errorCodeDescription.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 200))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.eventReliabilityCode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 208))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.eventReliabilityCode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 216))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.eventReliabilityCode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 224))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.isSiriKit.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 232))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.isSiriKit.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 240))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.isSiriKit.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 248))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.isSiriKitSupportedApp.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 256))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.isSiriKitSupportedApp.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 264))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.isSiriKitSupportedApp.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 272))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.responseId.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 280))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.responseId.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 288))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.responseId.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 296))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.slotName.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 304))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.slotName.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 312))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.slotName.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 320))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.executionRequestId.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 328))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.executionRequestId.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 336))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.executionRequestId.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 344))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.__allocating_init(activityType:app:executionRequestId:responseId:taskStepStartTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(class metadata base offset for SiriKitFlowActivity + v8 + 352))(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
}

uint64_t ObjC metadata update function for SiriKitFlowActivity()
{
  return type metadata accessor for SiriKitFlowActivity();
}

uint64_t storeEnumTagSinglePayload for SiriKitFlowActivity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1B4EAF528 + 4 * byte_1B4EF078B[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1B4EAF55C + 4 * byte_1B4EF0786[v4]))();
}

uint64_t sub_1B4EAF55C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EAF564(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4EAF56CLL);
  return result;
}

uint64_t sub_1B4EAF578(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4EAF580);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1B4EAF584(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EAF58C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SiriKitFlowActivity.CodingKeys()
{
  return &type metadata for SiriKitFlowActivity.CodingKeys;
}

uint64_t DirectFlowPluginLoaderImpl.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t FlowPluginAndBundle.flowPlugin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1, a1);
}

uint64_t FlowPluginAndBundle.bundle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 40, a1);
}

uint64_t FlowPluginAndBundle.init(flowPlugin:bundle:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with take of ReferenceResolutionClientProtocol(a1, a3);
  return outlined init with take of ReferenceResolutionClientProtocol(a2, a3 + 40);
}

uint64_t one-time initialization function for pluginLoader()
{
  uint64_t result;

  type metadata accessor for FlowDelegatePluginLoader();
  result = static FlowDelegatePluginLoader.sharedInstance.getter();
  static SiriKitFlowLoader.pluginLoader = result;
  return result;
}

uint64_t *SiriKitFlowLoader.pluginLoader.unsafeMutableAddressor()
{
  if (one-time initialization token for pluginLoader != -1)
    swift_once();
  return &static SiriKitFlowLoader.pluginLoader;
}

uint64_t static SiriKitFlowLoader.pluginLoader.getter()
{
  if (one-time initialization token for pluginLoader != -1)
    swift_once();
  return swift_retain();
}

uint64_t SiriKitFlowLoader.loadFlow(rcId:input:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for Parse();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pluginLoader != -1)
    swift_once();
  Input.parse.getter();
  dispatch thunk of FlowDelegatePluginLoader.loadFlow(rcId:parse:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t SiriKitFlowLoader.loadFlowPlugin(bundleIdentifier:)()
{
  if (one-time initialization token for pluginLoader != -1)
    swift_once();
  return dispatch thunk of FlowDelegatePluginLoader.loadFlowPlugin(bundleIdentifier:)();
}

Swift::Void __swiftcall SiriKitFlowLoader.loadAndWarmBundle(bundleIdentifier:refId:)(Swift::String bundleIdentifier, Swift::String refId)
{
  if (one-time initialization token for pluginLoader != -1)
    swift_once();
  dispatch thunk of FlowDelegatePluginLoader.loadAndWarmBundle(bundleIdentifier:refId:)();
}

uint64_t SiriKitFlowLoader.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SiriKitFlowLoader.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SiriKitFlowLoader.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SiriKitFlowLoader.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for FlowLoader.loadFlow(rcId:input:) in conformance SiriKitFlowLoader()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for Parse();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pluginLoader != -1)
    swift_once();
  Input.parse.getter();
  dispatch thunk of FlowDelegatePluginLoader.loadFlow(rcId:parse:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t protocol witness for FlowLoader.loadFlowPlugin(bundleIdentifier:) in conformance SiriKitFlowLoader()
{
  if (one-time initialization token for pluginLoader != -1)
    swift_once();
  return dispatch thunk of FlowDelegatePluginLoader.loadFlowPlugin(bundleIdentifier:)();
}

uint64_t protocol witness for FlowLoader.loadAndWarmBundle(bundleIdentifier:refId:) in conformance SiriKitFlowLoader()
{
  if (one-time initialization token for pluginLoader != -1)
    swift_once();
  return dispatch thunk of FlowDelegatePluginLoader.loadAndWarmBundle(bundleIdentifier:refId:)();
}

uint64_t DirectFlowPluginLoaderImpl.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9E0];
  return result;
}

void DirectFlowPluginLoaderImpl.loadFlowPlugin(path:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  id v12;
  void *v13;
  id v14;
  uint64_t ObjCClassMetadata;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  swift_beginAccess();
  v7 = *(_QWORD *)(v3 + 16);
  if (*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v9 & 1) != 0)
    {
      outlined init with copy of FlowPluginAndBundle(*(_QWORD *)(v7 + 56) + 80 * v8, (uint64_t)&v39);
    }
    else
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v40 + 1))
    {
      v46 = v41;
      v47 = v42;
      v48 = v43;
      v44 = v39;
      v45 = v40;
      swift_endAccess();
      v10 = v47;
      *(_OWORD *)(a3 + 32) = v46;
      *(_OWORD *)(a3 + 48) = v10;
      *(_OWORD *)(a3 + 64) = v48;
      v11 = v45;
      *(_OWORD *)a3 = v44;
      *(_OWORD *)(a3 + 16) = v11;
      *(_BYTE *)(a3 + 80) = 1;
      return;
    }
  }
  else
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
  }
  outlined destroy of FlowPluginAndBundle?((uint64_t)&v39);
  swift_endAccess();
  v12 = objc_allocWithZone(MEMORY[0x1E0CB34D0]);
  swift_bridgeObjectRetain();
  v13 = (void *)MEMORY[0x1B5E432E8](a1, a2);
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, sel_initWithPath_, v13);

  if (!v14)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      *(_QWORD *)&v44 = v25;
      *(_DWORD *)v24 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v22, v23, "Failed to load bundle at path %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v25, -1, -1);
      MEMORY[0x1B5E44758](v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_35;
  }
  if (!objc_msgSend(v14, sel_principalClass))
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc();
      v30 = swift_slowAlloc();
      *(_QWORD *)&v44 = v30;
      *(_DWORD *)v29 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v27, v28, "Failed bundle at path %s has no principal class", (uint8_t *)v29, 0xCu);
      swift_arrayDestroy();
      v31 = v30;
LABEL_32:
      MEMORY[0x1B5E44758](v31, -1, -1);
      MEMORY[0x1B5E44758](v29, -1, -1);

LABEL_34:
LABEL_35:
      *(_BYTE *)(a3 + 80) = 0;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
      return;
    }
LABEL_33:

    swift_bridgeObjectRelease_n();
    goto LABEL_34;
  }
  ObjCClassMetadata = swift_getObjCClassMetadata();
  v16 = swift_conformsToProtocol2();
  if (v16)
    v17 = v16;
  else
    v17 = 0;
  if (v16)
    v18 = ObjCClassMetadata;
  else
    v18 = 0;
  if (!v18)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    v27 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v33))
    {
      v29 = swift_slowAlloc();
      v34 = swift_slowAlloc();
      *(_QWORD *)&v44 = v34;
      *(_DWORD *)v29 = 136315394;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v29 + 12) = 2080;
      *(_QWORD *)&v39 = ObjCClassMetadata;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
      v35 = String.init<A>(describing:)();
      *(_QWORD *)&v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v27, v33, "Principal class for plugin bundle at %s is not a FlowPlugin: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      v31 = v34;
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  *((_QWORD *)&v40 + 1) = v18;
  *(_QWORD *)&v41 = v17;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v39);
  dispatch thunk of FlowPlugin.init()();
  v19 = objc_msgSend(v14, sel_infoDictionary);
  if (v19)
  {
    v20 = v19;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  }
  static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
  swift_bridgeObjectRelease();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v39, a3);
  v37 = type metadata accessor for FlowPluginBundleImpl();
  v38 = MEMORY[0x1E0D9B0F0];
  *(_QWORD *)(a3 + 64) = v37;
  *(_QWORD *)(a3 + 72) = v38;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a3 + 40));
  swift_bridgeObjectRetain();
  FlowPluginBundleImpl.init(bundlePath:supportedTopics:)();
  outlined init with copy of FlowPluginAndBundle(a3, (uint64_t)&v44);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)&v44, a1, a2);
  swift_endAccess();

  *(_BYTE *)(a3 + 80) = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
}

uint64_t DirectFlowPluginLoaderImpl.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DirectFlowPluginLoaderImpl.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void protocol witness for DirectFlowPluginLoader.loadFlowPlugin(path:) in conformance DirectFlowPluginLoaderImpl(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  DirectFlowPluginLoaderImpl.loadFlowPlugin(path:)(a1, a2, a3);
}

uint64_t outlined destroy of FlowPluginAndBundle?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowPluginAndBundle?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of FlowLoader.loadFlow(rcId:input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of FlowLoader.loadFlowPlugin(bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of FlowLoader.loadAndWarmBundle(bundleIdentifier:refId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of DirectFlowPluginLoader.loadFlowPlugin(path:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t destroy for FlowPluginAndBundle(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

ValueMetadata *type metadata accessor for FlowPluginAndBundle()
{
  return &type metadata for FlowPluginAndBundle;
}

uint64_t type metadata accessor for SiriKitFlowLoader()
{
  return objc_opt_self();
}

uint64_t method lookup function for SiriKitFlowLoader()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriKitFlowLoader.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t type metadata accessor for DirectFlowPluginLoaderImpl()
{
  return objc_opt_self();
}

uint64_t method lookup function for DirectFlowPluginLoaderImpl()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DirectFlowPluginLoaderImpl.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

id AFSpeechInfo.toAFSpeechPackage()()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  double v13;
  double v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  Class isa;
  Class v21;
  id v22;

  v1 = objc_msgSend(v0, sel_speechRecognizedCommand);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, sel_recognition);

  if (v3)
  {
    v4 = objc_msgSend(v3, sel_af_speechPhrases);

    if (!v4)
      return 0;
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v3 = (id)specialized _arrayConditionalCast<A, B>(_:)(v5);
    swift_bridgeObjectRelease();
    if (v3)
    {
      v6 = objc_msgSend(v0, sel_speechRecognizedCommand);
      if (v6)
      {
        v7 = v6;
        v8 = objc_msgSend(v6, sel_recognition);

        if (v8)
        {
          v9 = objc_msgSend(v8, sel_af_speechUtterances);

          if (v9)
          {
            type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechUtterance);
            static Array._unconditionallyBridgeFromObjectiveC(_:)();

            v10 = objc_msgSend(v0, sel_speechRecognizedCommand);
            if (v10)
            {
              v11 = v10;
              v12 = objc_msgSend(v10, sel_processedAudioDuration);

              if (v12)
              {
                objc_msgSend(v12, sel_doubleValue);
                v14 = v13;

                v15 = objc_msgSend(v0, sel_speechRecognizedCommand);
                if (v15)
                {
                  v16 = v15;
                  v17 = objc_msgSend(v15, sel_audioAnalytics);

                  if (v17)
                  {
                    v18 = objc_msgSend(v17, sel_af_audioAnalytics);

                    if (v18)
                    {
                      v19 = objc_allocWithZone(MEMORY[0x1E0CFEA58]);
                      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechPhrase);
                      isa = Array._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      v21 = Array._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      v22 = objc_msgSend(v19, sel_initWithPhrases_utterances_processedAudioDuration_, isa, v21, v14);

                      v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CFEA48]), sel_initWithRecognition_rawRecognition_audioAnalytics_isFinal_utteranceStart_, v22, v22, v18, 1, 0.0);
                      return v3;
                    }
                  }
                }
              }
            }
            swift_bridgeObjectRelease();
          }
        }
      }
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v3;
}

uint64_t static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:)
                                                                   + async function pointer to specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v11(a1, a2, a3, a4);
}

uint64_t static SiriKitMetricsUtils.emitTopicChanged(input:eventSender:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for SiriKitEventPayload();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t static SiriKitMetricsUtils.emitTopicChanged(input:eventSender:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(uint64_t **)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24));
  type metadata accessor for SiriKitEvent();
  *v1 = specialized static SiriKitMetricsUtils.extractIntentTypeName(input:)();
  v1[1] = v4;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E0D9B1B0], v3);
  *(_QWORD *)(v0 + 56) = SiriKitEvent.__allocating_init(_:builder:)();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v5;
  *v5 = v0;
  v5[1] = static SiriKitMetricsUtils.emitTopicChanged(input:eventSender:);
  return dispatch thunk of SiriKitEventSending.sendAsync(_:)();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t static SiriKitMetricsUtils.emitConversationCommitted(eventSender:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for SiriKitEventPayload();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t static SiriKitMetricsUtils.emitConversationCommitted(eventSender:resultCandidateId:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD **)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24));
  type metadata accessor for SiriKitEvent();
  *v1 = v5;
  v1[1] = v4;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E0D9B228], v3);
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 64) = SiriKitEvent.__allocating_init(_:builder:)();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = static SiriKitMetricsUtils.emitConversationCommitted(eventSender:resultCandidateId:);
  return dispatch thunk of SiriKitEventSending.sendAsync(_:)();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _BYTE v5[32];
  uint64_t v6;

  v6 = MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2)
    return v6;
  for (i = a1 + 32; ; i += 32)
  {
    outlined init with copy of Any(i, (uint64_t)v5);
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechPhrase);
    if (!swift_dynamicCast())
      break;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2)
      return v6;
  }
  swift_release();

  return 0;
}

{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  __int128 v8[2];
  uint64_t v9;
  _BYTE v10[32];
  __int128 v11[2];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  v3 = v12;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      outlined init with copy of Any(i, (uint64_t)v10);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSExtensionProtocol);
      if (!swift_dynamicCast())
        break;
      outlined init with take of ReferenceResolutionClientProtocol(v8, (uint64_t)v11);
      outlined init with take of ReferenceResolutionClientProtocol(v11, (uint64_t)v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v12;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v3 = v12;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      outlined init with take of ReferenceResolutionClientProtocol(v8, v3 + 40 * v6 + 32);
      if (!--v2)
        return v3;
    }
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for NSExtensionProtocol?);
    return 0;
  }
  return v3;
}

uint64_t static SiriKitMetricsUtils.emitConversationWillContinueInRemoteProcess(eventSender:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[2] = a1;
  v2 = type metadata accessor for SiriKitEventPayload();
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t static SiriKitMetricsUtils.emitConversationWillContinueInRemoteProcess(eventSender:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24));
  type metadata accessor for SiriKitEvent();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E0D9B240], v3);
  *(_QWORD *)(v0 + 48) = SiriKitEvent.__allocating_init(_:builder:)();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v4;
  *v4 = v0;
  v4[1] = static SiriKitMetricsUtils.emitConversationWillContinueInRemoteProcess(eventSender:);
  return dispatch thunk of SiriKitEventSending.sendAsync(_:)();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t StringProtocol.endIndex<A>(of:options:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v9;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  StringProtocol.range<A>(of:options:range:locale:)();
  v5 = v4;
  v7 = v6;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for Locale?);
  if ((v7 & 1) != 0)
    return 0;
  else
    return v5;
}

uint64_t StringProtocol.index<A>(of:options:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v8;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = StringProtocol.range<A>(of:options:range:locale:)();
  v6 = v5;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for Locale?);
  if ((v6 & 1) != 0)
    return 0;
  else
    return v4;
}

ValueMetadata *type metadata accessor for SiriKitMetricsUtils()
{
  return &type metadata for SiriKitMetricsUtils;
}

uint64_t SiriKitRequestEvent.appId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriKitRequestEvent.appId.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SiriKitRequestEvent.appId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SiriKitRequestEvent.appDisplayName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriKitRequestEvent.appDisplayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*SiriKitRequestEvent.appDisplayName.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SiriKitRequestEvent.appVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriKitRequestEvent.appVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*SiriKitRequestEvent.appVersion.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SiriKitRequestEvent.eventReliabilityCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriKitRequestEvent.eventReliabilityCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*SiriKitRequestEvent.eventReliabilityCode.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SiriKitRequestEvent.errorCode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t SiriKitRequestEvent.errorCode.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t (*SiriKitRequestEvent.errorCode.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SiriKitRequestEvent.intentName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriKitRequestEvent.intentName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return result;
}

uint64_t (*SiriKitRequestEvent.intentName.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

double SiriKitRequestEvent.init(intentName:errorCode:app:eventReliabilityCode:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  __int128 v8;
  double result;
  __int128 v10;
  _OWORD v11[5];
  uint64_t v12;

  specialized SiriKitRequestEvent.init(intentName:errorCode:app:eventReliabilityCode:)(a1, a2, a3, a4, a5, a6, (uint64_t *)v11);
  v8 = v11[3];
  *(_OWORD *)(a7 + 32) = v11[2];
  *(_OWORD *)(a7 + 48) = v8;
  *(_OWORD *)(a7 + 64) = v11[4];
  *(_QWORD *)(a7 + 80) = v12;
  result = *(double *)v11;
  v10 = v11[1];
  *(_OWORD *)a7 = v11[0];
  *(_OWORD *)(a7 + 16) = v10;
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriKitRequestEvent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SiriKitRequestEvent.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriKitRequestEvent.CodingKeys()
{
  lazy protocol witness table accessor for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriKitRequestEvent.CodingKeys()
{
  lazy protocol witness table accessor for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys();
  return CodingKey.debugDescription.getter();
}

double SiriKitRequestEvent.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  uint64_t v8;

  specialized SiriKitRequestEvent.init(from:)(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_QWORD *)(a2 + 80) = v8;
    result = *(double *)v7;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

double protocol witness for Decodable.init(from:) in conformance SiriKitRequestEvent@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  uint64_t v8;

  specialized SiriKitRequestEvent.init(from:)(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_QWORD *)(a2 + 80) = v8;
    result = *(double *)v7;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t specialized SiriKitRequestEvent.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6449707061 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C70736944707061 && a2 == 0xEE00656D614E7961
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6973726556707061 && a2 == 0xEA00000000006E6FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001B4EF5660
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x614E746E65746E69 && a2 == 0xEA0000000000656DLL)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t specialized SiriKitRequestEvent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriKitRequestEvent.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SiriKitReliabilityCodes();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0D9B318], v9);
  SiriKitReliabilityCodes.rawValue.getter();
  v43 = v13;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v42 = a2;
    v49 = 0;
    v14 = KeyedDecodingContainer.decode(_:forKey:)();
    v16 = v15;
    v48 = 1;
    swift_bridgeObjectRetain();
    v17 = KeyedDecodingContainer.decode(_:forKey:)();
    v19 = v18;
    v40 = v17;
    v47 = 2;
    swift_bridgeObjectRetain();
    v20 = KeyedDecodingContainer.decode(_:forKey:)();
    v41 = v21;
    v37 = v20;
    v39 = v19;
    v46 = 3;
    swift_bridgeObjectRetain();
    v38 = 0;
    v36 = KeyedDecodingContainer.decode(_:forKey:)();
    v23 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v45 = 4;
    v35 = KeyedDecodingContainer.decode(_:forKey:)();
    v43 = v23;
    v44 = 5;
    v24 = KeyedDecodingContainer.decode(_:forKey:)();
    v26 = v25;
    v27 = *(void (**)(char *, uint64_t))(v6 + 8);
    v38 = v24;
    v27(v8, v5);
    swift_bridgeObjectRetain();
    v28 = v39;
    swift_bridgeObjectRetain();
    v29 = v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    v30 = v43;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v32 = v42;
    *v42 = v14;
    v32[1] = v16;
    v32[2] = v40;
    v32[3] = v28;
    v32[4] = v37;
    v32[5] = v29;
    v32[6] = v36;
    v32[7] = v30;
    v33 = v38;
    v32[8] = v35;
    v32[9] = v33;
    v32[10] = v26;
  }
  return result;
}

uint64_t destroy for SiriKitRequestEvent()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SiriKitRequestEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for SiriKitRequestEvent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SiriKitRequestEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriKitRequestEvent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriKitRequestEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriKitRequestEvent()
{
  return &type metadata for SiriKitRequestEvent;
}

uint64_t storeEnumTagSinglePayload for SiriKitRequestEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B4EB1E24 + 4 * byte_1B4EF0A5B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B4EB1E58 + 4 * byte_1B4EF0A56[v4]))();
}

uint64_t sub_1B4EB1E58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EB1E60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4EB1E68);
  return result;
}

uint64_t sub_1B4EB1E74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4EB1E7CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B4EB1E80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EB1E88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SiriKitRequestEvent.CodingKeys()
{
  return &unk_1E6853F68;
}

uint64_t static Log.begin(_:enableTelemetry:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v5;

  if (one-time initialization token for executor != -1)
    swift_once();
  v5 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  if ((a4 & 1) != 0)
    return os_signpost(_:dso:log:name:signpostID:_:_:)();
  else
    return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t Logger.instrumentation.unsafeMutableAddressor()
{
  return Logger.instrumentation.unsafeMutableAddressor(&one-time initialization token for instrumentation, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)static Logger.instrumentation);
}

uint64_t Logger.ace.unsafeMutableAddressor()
{
  return Logger.instrumentation.unsafeMutableAddressor(&one-time initialization token for ace, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)static Logger.ace);
}

uint64_t Logger.instrumentation.unsafeMutableAddressor(_QWORD *a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v5;

  if (*a1 != -1)
    swift_once();
  v5 = a2(0);
  return __swift_project_value_buffer(v5, a3);
}

uint64_t Logger.executor.unsafeMutableAddressor()
{
  return Logger.instrumentation.unsafeMutableAddressor(&one-time initialization token for executor, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)static Logger.executor);
}

uint64_t Logger.conversationBridge.unsafeMutableAddressor()
{
  return Logger.instrumentation.unsafeMutableAddressor(&one-time initialization token for conversationBridge, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)static Logger.conversationBridge);
}

void static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(a1, a2, a3, a4, a5, a6);
  __break(1u);
}

uint64_t *Log.executor.unsafeMutableAddressor()
{
  if (one-time initialization token for executor != -1)
    swift_once();
  return &static Log.executor;
}

uint64_t Signposter.executor.unsafeMutableAddressor()
{
  return Logger.instrumentation.unsafeMutableAddressor(&one-time initialization token for executor, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2170], (uint64_t)static Signposter.executor);
}

uint64_t OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v8 + 56) = a7;
  *(_QWORD *)(v8 + 64) = v7;
  *(_QWORD *)(v8 + 40) = a5;
  *(_QWORD *)(v8 + 48) = a6;
  *(_BYTE *)(v8 + 96) = a4;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 16) = a1;
  return swift_task_switch();
}

uint64_t OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD);

  v3 = *(int **)(v2 + 48);
  *(_QWORD *)(v2 + 72) = OSSignposter.beginIntervalTelemetryEnabled(_:id:)(*(const char **)(v2 + 24), a2, *(_BYTE *)(v2 + 96), *(_QWORD *)(v2 + 40));
  v6 = (uint64_t (*)(_QWORD))((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 80) = v4;
  *v4 = v2;
  v4[1] = OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:);
  return v6(*(_QWORD *)(v2 + 16));
}

uint64_t OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  $defer #1 <A>() in OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(*(_QWORD *)(v0 + 64), *(const char **)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 96));
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  $defer #1 <A>() in OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(*(_QWORD *)(v0 + 64), *(const char **)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned __int8 *)(v0 + 96));
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

char **ExecutionBridgeSignposts.executionBridgeInit.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.executionBridgeInit;
}

char **ExecutionBridgeSignposts.referenceResolutionInitTime.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.referenceResolutionInitTime;
}

uint64_t static Log.end(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Log.end(_:_:)(a1, a2, a3, a4, (void (*)(void))MEMORY[0x1E0DF2298]);
}

char **ExecutionBridgeSignposts.correctionsPlatformClientInitTime.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.correctionsPlatformClientInitTime;
}

char **ExecutionBridgeSignposts.networkAvailabilityProviderInitTime.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.networkAvailabilityProviderInitTime;
}

uint64_t Logger.insightRequestSummaryLogger.unsafeMutableAddressor()
{
  return Logger.instrumentation.unsafeMutableAddressor(&one-time initialization token for insightRequestSummaryLogger, (uint64_t (*)(_QWORD))type metadata accessor for InsightRequestSummaryLogger, (uint64_t)static Logger.insightRequestSummaryLogger);
}

char **ExecutionBridgeSignposts.commitToCloseTime.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.commitToCloseTime;
}

char **ExecutionBridgeSignposts.rraasEntityCollectionTime.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.rraasEntityCollectionTime;
}

uint64_t OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 72) = v7;
  *(_QWORD *)(v8 + 48) = a5;
  *(_QWORD *)(v8 + 56) = a6;
  *(_BYTE *)(v8 + 128) = a4;
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 40) = a3;
  *(_QWORD *)(v8 + 24) = a1;
  v9 = type metadata accessor for OSSignpostID();
  *(_QWORD *)(v8 + 80) = v9;
  *(_QWORD *)(v8 + 88) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 96) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)()
{
  uint64_t v0;
  NSObject *v1;
  os_signpost_type_t v2;
  uint64_t result;
  const char *v4;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  os_signpost_id_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t (*v14)(_QWORD);

  v1 = OSSignposter.logHandle.getter();
  v2 = static os_signpost_type_t.begin.getter();
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    goto LABEL_5;
  v4 = *(const char **)(v0 + 32);
  if ((*(_BYTE *)(v0 + 128) & 1) == 0)
  {
    if (!v4)
    {
      __break(1u);
LABEL_5:
      v5 = *(_QWORD *)(v0 + 88);

      v6 = *(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16);
LABEL_11:
      v12 = *(int **)(v0 + 56);
      v6(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 80));
      type metadata accessor for OSSignpostIntervalState();
      swift_allocObject();
      *(_QWORD *)(v0 + 104) = OSSignpostIntervalState.init(id:isOpen:)();
      v14 = (uint64_t (*)(_QWORD))((char *)v12 + *v12);
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 112) = v13;
      *v13 = v0;
      v13[1] = OSSignposter.withIntervalSignpostAsync<A>(_:id:around:);
      return v14(*(_QWORD *)(v0 + 24));
    }
LABEL_10:
    v8 = *(_QWORD *)(v0 + 88);
    v7 = *(_QWORD *)(v0 + 96);
    v9 = *(_QWORD *)(v0 + 80);
    v6 = *(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 16);
    v6(v7, *(_QWORD *)(v0 + 48), v9);
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    v11 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v1, v2, v11, v4, "", v10, 2u);
    MEMORY[0x1B5E44758](v10, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    goto LABEL_11;
  }
  if ((unint64_t)v4 >> 32)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v4 >> 11 != 27)
  {
    if (v4 >> 16 <= 0x10)
    {
      v4 = (const char *)(v0 + 16);
      goto LABEL_10;
    }
    goto LABEL_13;
  }
LABEL_14:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  $defer #1 <A>() in OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(*(_QWORD *)(v0 + 72), *(const char **)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 128));
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  $defer #1 <A>() in OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(*(_QWORD *)(v0 + 72), *(const char **)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 128));
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static Log.generateSignpostID()()
{
  id v0;

  if (one-time initialization token for executor != -1)
    swift_once();
  v0 = (id)static Log.executor;
  return OSSignpostID.init(log:)();
}

uint64_t static Log.begin(_:_:enableTelemetry:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  static os_signpost_type_t.begin.getter();
  if ((a5 & 1) != 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    return os_signpost(_:dso:log:name:signpostID:_:_:)();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    return os_signpost(_:dso:log:name:signpostID:)();
  }
}

char **ExecutionBridgeSignposts.phoneCallStateQueryTime.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.phoneCallStateQueryTime;
}

char **ExecutionBridgeSignposts.phoneCallStateQueryTimeout.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.phoneCallStateQueryTimeout;
}

uint64_t static Log.event(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for OSSignpostID();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  if (one-time initialization token for executor != -1)
    swift_once();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t static Logger.begin(_:)()
{
  id v0;

  if (one-time initialization token for executor != -1)
    swift_once();
  v0 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t Logger.event(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for OSSignpostID();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  if (one-time initialization token for executor != -1)
    swift_once();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t one-time initialization function for executor(uint64_t a1)
{
  return one-time initialization function for executor(a1, static Logger.executor, &one-time initialization token for executor, (id *)&static Log.executor);
}

uint64_t static Logger.executor.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.executor.getter(&one-time initialization token for executor, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)static Logger.executor, a1);
}

uint64_t one-time initialization function for ace(uint64_t a1)
{
  return one-time initialization function for executor(a1, static Logger.ace, &one-time initialization token for ace, (id *)&static Log.ace);
}

uint64_t *Log.ace.unsafeMutableAddressor()
{
  if (one-time initialization token for ace != -1)
    swift_once();
  return &static Log.ace;
}

uint64_t static Logger.ace.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.executor.getter(&one-time initialization token for ace, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)static Logger.ace, a1);
}

uint64_t static Logger.executor.getter@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (*a1 != -1)
    swift_once();
  v7 = a2(0);
  v8 = __swift_project_value_buffer(v7, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v8, v7);
}

uint64_t one-time initialization function for instrumentation(uint64_t a1)
{
  return one-time initialization function for executor(a1, static Logger.instrumentation, &one-time initialization token for instrumentation, (id *)&static Log.instrumentation);
}

uint64_t *Log.instrumentation.unsafeMutableAddressor()
{
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  return &static Log.instrumentation;
}

uint64_t static Logger.instrumentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.executor.getter(&one-time initialization token for instrumentation, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)static Logger.instrumentation, a1);
}

uint64_t one-time initialization function for conversationBridge(uint64_t a1)
{
  return one-time initialization function for executor(a1, static Logger.conversationBridge, &one-time initialization token for conversationBridge, (id *)&static Log.conversationBridge);
}

uint64_t one-time initialization function for executor(uint64_t a1, uint64_t *a2, _QWORD *a3, id *a4)
{
  uint64_t v7;
  id v8;

  v7 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  if (*a3 != -1)
    swift_once();
  v8 = *a4;
  return Logger.init(_:)();
}

uint64_t *Log.conversationBridge.unsafeMutableAddressor()
{
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  return &static Log.conversationBridge;
}

uint64_t static Logger.conversationBridge.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.executor.getter(&one-time initialization token for conversationBridge, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)static Logger.conversationBridge, a1);
}

uint64_t one-time initialization function for insightRequestSummaryLogger()
{
  uint64_t v0;

  v0 = type metadata accessor for InsightRequestSummaryLogger();
  __swift_allocate_value_buffer(v0, static Logger.insightRequestSummaryLogger);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.insightRequestSummaryLogger);
  type metadata accessor for OS_os_log();
  OS_os_log.init(subsystem:category:)();
  return Logger.init(_:)();
}

uint64_t static Logger.insightRequestSummaryLogger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v2 = type metadata accessor for InsightRequestSummaryLogger();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.insightRequestSummaryLogger);
  return outlined init with copy of InsightRequestSummaryLogger(v3, a1);
}

uint64_t Logger.makeSignpostID()()
{
  id v0;

  if (one-time initialization token for executor != -1)
    swift_once();
  v0 = (id)static Log.executor;
  return OSSignpostID.init(log:)();
}

uint64_t static Logger.begin(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Log.end(_:_:)(a1, a2, a3, a4, (void (*)(void))MEMORY[0x1E0DF22A0]);
}

uint64_t static Logger.end(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Log.end(_:_:)(a1, a2, a3, a4, (void (*)(void))MEMORY[0x1E0DF2298]);
}

uint64_t static Log.end(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  a5();
  if (one-time initialization token for executor != -1)
    swift_once();
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t one-time initialization function for executor()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v4, static Signposter.executor);
  __swift_project_value_buffer(v4, (uint64_t)static Signposter.executor);
  if (one-time initialization token for executor != -1)
    swift_once();
  v5 = __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)();
}

{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static Log.executor = result;
  return result;
}

uint64_t static Signposter.executor.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.executor.getter(&one-time initialization token for executor, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2170], (uint64_t)static Signposter.executor, a1);
}

uint64_t OSSignposter.beginIntervalTelemetryEnabled(_:id:)(const char *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_signpost_type_t v12;
  uint64_t result;
  void (*v14)(char *, uint64_t, uint64_t);
  uint8_t *v15;
  os_signpost_id_t v16;
  uint64_t v17;
  char v18;

  v7 = type metadata accessor for OSSignpostID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OSSignposter.logHandle.getter();
  v12 = static os_signpost_type_t.begin.getter();
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    goto LABEL_5;
  if ((a3 & 1) == 0)
  {
    if (!a1)
    {
      __break(1u);
LABEL_5:

      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
LABEL_11:
      type metadata accessor for OSSignpostIntervalState();
      swift_allocObject();
      return OSSignpostIntervalState.init(id:isOpen:)();
    }
LABEL_10:
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    v14(v10, a4, v7);
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    v16 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v11, v12, v16, a1, "enableTelemetry=YES", v15, 2u);
    MEMORY[0x1B5E44758](v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v14(v10, a4, v7);
    goto LABEL_11;
  }
  if ((unint64_t)a1 >> 32)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (a1 >> 11 != 27)
  {
    if (a1 >> 16 <= 0x10)
    {
      a1 = &v18;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
LABEL_14:
  __break(1u);
  return result;
}

void OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:)(const char *a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v5;
  uint64_t v6;
  const char *v9;
  uint8_t *v10;
  char v11;

  v9 = a1;
  if ((a3 & 1) == 0)
  {
    if (a1)
      goto LABEL_8;
    __break(1u);
  }
  if ((unint64_t)a1 >> 32)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (a1 >> 11 == 27)
  {
LABEL_13:
    __break(1u);
    return;
  }
  if (a1 >> 16 > 0x10)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v9 = &v11;
LABEL_8:
  v10 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v10 = 0;
  closure #1 in OSSignposter.withIntervalSignpost<A>(_:id:_:around:)(v10, 2u, v5, a4, v9, "enableTelemetry=YES", a5);
  if (!v6)
    MEMORY[0x1B5E44758](v10, -1, -1);
}

id static Log.executor.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for executor, (id *)&static Log.executor);
}

uint64_t one-time initialization function for ace()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static Log.ace = result;
  return result;
}

id static Log.ace.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for ace, (id *)&static Log.ace);
}

uint64_t one-time initialization function for instrumentation()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static Log.instrumentation = result;
  return result;
}

id static Log.instrumentation.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for instrumentation, (id *)&static Log.instrumentation);
}

uint64_t one-time initialization function for conversationBridge()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static Log.conversationBridge = result;
  return result;
}

id static Log.conversationBridge.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for conversationBridge, (id *)&static Log.conversationBridge);
}

uint64_t (*static Log.begin<A>(with:andWrap:)(uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(uint64_t a1), uint64_t (*a5)(uint64_t a1), uint64_t a6))(uint64_t a1)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_BYTE *, _BYTE *, uint64_t);
  unint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  uint64_t (**v25)(uint64_t);
  _BYTE v27[4];
  int v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;

  v30 = a2;
  v31 = a6;
  v10 = type metadata accessor for OSSignpostID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x1E0C80A78](v10);
  v14 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v13);
  v16 = &v27[-v15];
  if (one-time initialization token for executor != -1)
    swift_once();
  v17 = (void *)static Log.executor;
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v18 = v17;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    v29 = a5;
    v19 = a1;
    v20 = v30;
    os_signpost(_:dso:log:name:signpostID:)();
    v28 = a3;
    v21 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32);
    v21(v14, v16, v10);
    v22 = (*(unsigned __int8 *)(v11 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v31;
    *(_QWORD *)(v23 + 24) = v19;
    v24 = v29;
    *(_QWORD *)(v23 + 32) = v20;
    *(_BYTE *)(v23 + 40) = v28;
    v21((_BYTE *)(v23 + v22), v14, v10);
    v25 = (uint64_t (**)(uint64_t))(v23 + ((v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8));
    *v25 = a4;
    v25[1] = v24;
    a4 = partial apply for closure #1 in static Log.begin<A>(with:andWrap:);
  }
  swift_retain();
  return a4;
}

uint64_t closure #1 in static Log.begin<A>(with:andWrap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint8_t *v15;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;

  if (one-time initialization token for executor != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v17 = a6;
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v18 = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v9, v10, "Signposted Completion called %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v12, -1, -1);
    v15 = v11;
    a6 = v17;
    MEMORY[0x1B5E44758](v15, -1, -1);
  }

  static os_signpost_type_t.end.getter();
  if (one-time initialization token for executor != -1)
    swift_once();
  os_signpost(_:dso:log:name:signpostID:)();
  return a6(a1);
}

uint64_t (*static Log.logAFAnalytics<A>(startEvent:endEvent:andWrap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;

  if (one-time initialization token for executor != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc();
    *(_DWORD *)v13 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v11, v12, "AFAnalytics log start : AFAnalyticsEventType %ld - %ld", (uint8_t *)v13, 0x16u);
    MEMORY[0x1B5E44758](v13, -1, -1);
  }

  v14 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of static Log.logAFAnalytics<A>(startEvent:endEvent:andWrap:));
  v15 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v14);
  specialized static Log.logAFAnalytics(eventType:eventContext:)(a1, v15);
  swift_bridgeObjectRelease();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a5;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = v14;
  v16[6] = a3;
  v16[7] = a4;
  swift_retain();
  return partial apply for closure #1 in static Log.logAFAnalytics<A>(startEvent:endEvent:andWrap:);
}

uint64_t closure #1 in static Log.logAFAnalytics<A>(startEvent:endEvent:andWrap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  unint64_t v13;

  if (one-time initialization token for executor != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    *(_DWORD *)v12 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "AFAnalytics log end : AFAnalyticsEventType %ld - %ld", (uint8_t *)v12, 0x16u);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }

  v13 = specialized _dictionaryUpCast<A, B, C, D>(_:)(a4);
  specialized static Log.logAFAnalytics(eventType:eventContext:)(a3, v13);
  swift_bridgeObjectRelease();
  return a5(a1);
}

const char *static ExecutionBridgeSignposts.commitToCloseTime.getter()
{
  return "CommitToCloseTime";
}

const char *static ExecutionBridgeSignposts.executionBridgeInit.getter()
{
  return "ExecutionBridgeInit";
}

const char *static ExecutionBridgeSignposts.referenceResolutionInitTime.getter()
{
  return "ReferenceResolutionInitTime";
}

const char *static ExecutionBridgeSignposts.correctionsPlatformClientInitTime.getter()
{
  return "CorrectionsPlatformClientInitTime";
}

const char *static ExecutionBridgeSignposts.networkAvailabilityProviderInitTime.getter()
{
  return "NetworkAvailabilityProviderInitTime";
}

char **ExecutionBridgeSignposts.coreTelephonyServiceProviderInitTime.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.coreTelephonyServiceProviderInitTime;
}

const char *static ExecutionBridgeSignposts.coreTelephonyServiceProviderInitTime.getter()
{
  return "coreTelephonyServiceProviderInitTime";
}

const char *static ExecutionBridgeSignposts.rraasEntityCollectionTime.getter()
{
  return "RRaaSEntityCollectionTime";
}

const char *static ExecutionBridgeSignposts.phoneCallStateQueryTime.getter()
{
  return "PhoneCallStateQueryTime";
}

const char *static ExecutionBridgeSignposts.phoneCallStateQueryTimeout.getter()
{
  return "PhoneCallStateQueryTimeout";
}

void closure #1 in OSSignposter.withIntervalSignpost<A>(_:id:_:around:)(uint8_t *a1, uint32_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, void (*a7)(void))
{
  NSObject *v11;
  os_signpost_type_t v12;
  os_signpost_id_t v13;
  os_signpost_type_t v14;
  os_signpost_id_t v15;
  const char *v16;
  uint64_t v18;

  v11 = OSSignposter.logHandle.getter();
  v12 = static os_signpost_type_t.begin.getter();
  v13 = OSSignpostID.rawValue.getter();
  v16 = a5;
  _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v11, v12, v13, a5, a6, a1, a2);
  a7();
  if (!v18)
  {
    v14 = static os_signpost_type_t.end.getter();
    v15 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v11, v14, v15, v16, a6, a1, a2);
  }

}

void specialized static Log.logAFAnalytics(eventType:eventContext:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  void *v9;
  Class isa;

  if (one-time initialization token for executor != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v7 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "AFAnalytics logging : AFAnalyticsEventType %ld", v7, 0xCu);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  v8 = objc_msgSend((id)objc_opt_self(), sel_sharedAnalytics);
  if (v8)
  {
    v9 = v8;
    specialized _dictionaryUpCast<A, B, C, D>(_:)(a2);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_logEventWithType_context_, a1, isa);

  }
}

void specialized Logger.debugF(_:_:_:_:)(uint64_t (*a1)(uint64_t))
{
  os_log_type_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(uint64_t);
  NSObject *log;
  uint64_t v15;

  v2 = static os_log_type_t.debug.getter();
  swift_retain_n();
  v3 = v2;
  log = Logger.logObject.getter();
  if (os_log_type_enabled(log, v2))
  {
    v4 = swift_slowAlloc();
    v13 = a1;
    v5 = swift_slowAlloc();
    v15 = v5;
    *(_DWORD *)v4 = 136315650;
    v6 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    v8 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v10 = swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 22) = 2080;
    v11 = v13(v10);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, log, v3, "%s:%s: %s", (uint8_t *)v4, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v5, -1, -1);
    MEMORY[0x1B5E44758](v4, -1, -1);

  }
  else
  {
    swift_release_n();

  }
}

uint64_t specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a4;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v28 - v15;
  if (one-time initialization token for executor != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
  v19 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v16, v18, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v17);
  outlined init with copy of Logger?((uint64_t)v16, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v14, 1, v17) == 1)
  {
    outlined destroy of Logger?((uint64_t)v14);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    v31 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v32 = a6;
      v23 = v22;
      v29 = swift_slowAlloc();
      v36 = v29;
      *(_DWORD *)v23 = 136315650;
      v33 = a3;
      v24 = StaticString.description.getter();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v36);
      v30 = a5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2048;
      v35 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 22) = 2080;
      swift_bridgeObjectRetain();
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v20, (os_log_type_t)v31, "FatalError at %s:%lu - %s", (uint8_t *)v23, 0x20u);
      v26 = v29;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v26, -1, -1);
      MEMORY[0x1B5E44758](v23, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v17);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1B4EB4420()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for OSSignpostID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Log.begin<A>(with:andWrap:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for OSSignpostID() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return closure #1 in static Log.begin<A>(with:andWrap:)(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), v1 + v4, *(uint64_t (**)(_QWORD))(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1B4EB4504()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Log.logAFAnalytics<A>(startEvent:endEvent:andWrap:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static Log.logAFAnalytics<A>(startEvent:endEvent:andWrap:)(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(uint64_t (**)(uint64_t))(v1 + 48));
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

ValueMetadata *type metadata accessor for SiriKitRuntimeCrashHelper()
{
  return &type metadata for SiriKitRuntimeCrashHelper;
}

ValueMetadata *type metadata accessor for Signposter()
{
  return &type metadata for Signposter;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

ValueMetadata *type metadata accessor for ExecutionBridgeSignposts()
{
  return &type metadata for ExecutionBridgeSignposts;
}

void specialized Logger.debugF(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  specialized Logger.debugF(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, 0xD000000000000049, 0x80000001B4F03080);
}

{
  specialized Logger.debugF(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, 0xD000000000000019, 0x80000001B4F02FB0);
}

{
  specialized Logger.debugF(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, 0xD000000000000044, 0x80000001B4F02FD0);
}

{
  specialized Logger.debugF(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, 0xD000000000000020, 0x80000001B4F03020);
}

{
  specialized Logger.debugF(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, 0xD000000000000030, 0x80000001B4F02F70);
}

{
  specialized Logger.debugF(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, 0xD000000000000024, 0x80000001B4F02E40);
}

{
  specialized Logger.debugF(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, 0xD000000000000016, 0x80000001B4F02E20);
}

void specialized Logger.debugF(_:_:_:_:)()
{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  Swift::String v7;
  Swift::String v8;
  NSObject *log;
  uint64_t v10;

  v0 = static os_log_type_t.debug.getter();
  log = Logger.logObject.getter();
  if (os_log_type_enabled(log, v0))
  {
    v1 = swift_slowAlloc();
    v2 = swift_slowAlloc();
    v10 = v2;
    *(_DWORD *)v1 = 136315650;
    v3 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v1 + 12) = 2080;
    v5 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v1 + 22) = 2080;
    _StringGuts.grow(_:)(33);
    v7._object = (void *)0x80000001B4F03050;
    v7._countAndFlagsBits = 0xD00000000000001FLL;
    String.append(_:)(v7);
    _print_unlocked<A, B>(_:_:)();
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    String.append(_:)(v8);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, log, v0, "%s:%s: %s", (uint8_t *)v1, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v2, -1, -1);
    MEMORY[0x1B5E44758](v1, -1, -1);

  }
  else
  {

  }
}

{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  NSObject *log;
  uint64_t v11;

  v0 = static os_log_type_t.debug.getter();
  log = Logger.logObject.getter();
  if (os_log_type_enabled(log, v0))
  {
    v1 = swift_slowAlloc();
    v2 = swift_slowAlloc();
    v11 = v2;
    *(_DWORD *)v1 = 136315650;
    v3 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v1 + 12) = 2080;
    v5 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v1 + 22) = 2080;
    _StringGuts.grow(_:)(70);
    v7._object = (void *)0x80000001B4F02E70;
    v7._countAndFlagsBits = 0xD000000000000044;
    String.append(_:)(v7);
    v8._countAndFlagsBits = CNVSchemaCNVExecutionOverrideDecision.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    String.append(_:)(v9);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, log, v0, "%s:%s: %s", (uint8_t *)v1, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v2, -1, -1);
    MEMORY[0x1B5E44758](v1, -1, -1);

  }
  else
  {

  }
}

void specialized Logger.debugF(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  NSObject *log;
  uint64_t v24;

  v9 = static os_log_type_t.debug.getter();
  log = Logger.logObject.getter();
  if (os_log_type_enabled(log, v9))
  {
    v10 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v24 = v22;
    *(_DWORD *)v10 = 136315650;
    v11 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    v13 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 22) = 2080;
    _StringGuts.grow(_:)(164);
    v15._countAndFlagsBits = 0xD00000000000005CLL;
    v15._object = (void *)0x80000001B4F02EC0;
    String.append(_:)(v15);
    if (*(_BYTE *)(a8 + 32))
      v16 = 1702195828;
    else
      v16 = 0x65736C6166;
    if (*(_BYTE *)(a8 + 32))
      v17 = 0xE400000000000000;
    else
      v17 = 0xE500000000000000;
    v18 = v17;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    v19._object = (void *)0x80000001B4F02F20;
    v19._countAndFlagsBits = 0xD00000000000001FLL;
    String.append(_:)(v19);
    _print_unlocked<A, B>(_:_:)();
    v20._countAndFlagsBits = 0xD000000000000023;
    v20._object = (void *)0x80000001B4F02F40;
    String.append(_:)(v20);
    _print_unlocked<A, B>(_:_:)();
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    String.append(_:)(v21);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, log, v9, "%s:%s: %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v22, -1, -1);
    MEMORY[0x1B5E44758](v10, -1, -1);

  }
  else
  {

  }
}

void specialized Logger.debugF(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, Swift::String *a8, uint64_t a9, void *a10)
{
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  NSObject *log;
  uint64_t v26;

  v11 = static os_log_type_t.debug.getter();
  log = Logger.logObject.getter();
  if (os_log_type_enabled(log, v11))
  {
    v12 = swift_slowAlloc();
    v24 = swift_slowAlloc();
    v26 = v24;
    *(_DWORD *)v12 = 136315650;
    v13 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v15 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 22) = 2080;
    _StringGuts.grow(_:)(27);
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    String.append(_:)(v17);
    String.append(_:)(a8[1]);
    v18._countAndFlagsBits = 0x206B736174203ALL;
    v18._object = (void *)0xE700000000000000;
    String.append(_:)(v18);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0x6520776572687420;
    v20._object = (void *)0xEE00203A726F7272;
    String.append(_:)(v20);
    v21 = a10;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v22._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.append(_:)(v23);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, log, v11, "%s:%s: %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v24, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);

  }
  else
  {

  }
}

void specialized Logger.debugF(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  NSObject *log;
  uint64_t v18;

  v10 = static os_log_type_t.debug.getter();
  log = Logger.logObject.getter();
  if (os_log_type_enabled(log, v10))
  {
    v11 = swift_slowAlloc();
    v12 = swift_slowAlloc();
    v18 = v12;
    *(_DWORD *)v11 = 136315650;
    v13 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    v15 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a8, a9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, log, v10, "%s:%s: %s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v12, -1, -1);
    MEMORY[0x1B5E44758](v11, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_1B4EB5468()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with copy of Logger?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Logger?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t SiriKitRuntimeState.__allocating_init(customEventSender:rrClient:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  SiriKitRuntimeState.init(customEventSender:rrClient:)(a1, a2);
  return v4;
}

Swift::Void __swiftcall SiriKitRuntimeState.invalidateCurrentTurn()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v1 = v0 + 16;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, (uint64_t)&v7, &demangling cache variable for type metadata for ConversationTurnState?);
  if (*((_QWORD *)&v8 + 1))
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v7, (uint64_t)v10);
    v2 = v11;
    v3 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    v4 = *(os_unfair_lock_s **)((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3) + 152);
    v5 = v4 + 4;
    v6 = v4 + 5;
    os_unfair_lock_lock(v4 + 5);
    closure #1 in AceServiceInvokerImpl.invalidate()(v5);
    os_unfair_lock_unlock(v6);
    AceServiceInvokerImpl.cancelPendingCommands()();
    swift_release();
    v9 = 0;
    v7 = 0u;
    v8 = 0u;
    swift_beginAccess();
    outlined assign with take of ConversationTurnState?((uint64_t)&v7, v1);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v7, &demangling cache variable for type metadata for ConversationTurnState?);
  }
}

Swift::Void __swiftcall SiriKitRuntimeState.reset()()
{
  SiriKitRuntimeState.invalidateCurrentTurn()();
  SiriKitRuntimeState.taskService.getter();
  TaskService.onTurnInvalidated()();
  swift_release();
}

_QWORD *SiriKitRuntimeState.taskService.getter()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 136))
  {
    v1 = *(_QWORD **)(v0 + 136);
  }
  else
  {
    type metadata accessor for TaskService();
    v1 = (_QWORD *)swift_allocObject();
    v1[2] = closure #1 in default argument 1 of TaskService.init(initialTask:taskIdGenerator:);
    v1[3] = 0;
    v1[4] = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v0 + 136) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t SiriKitRuntimeState.makeNewTurn(requestContextData:executionRequestId:rootRequestId:invocationState:conversationLoggingId:bridge:scopedRRData:invokedByPeerToPeerEORR:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, unint64_t a11, unsigned __int8 a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[40];
  _BYTE v37[40];
  _QWORD v38[6];

  v13 = v12;
  v29 = a8;
  v30 = a5;
  v31 = a1;
  v34 = a2;
  v35 = a4;
  v33 = a12;
  v32 = a10;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  SiriKitRuntimeState.invalidateCurrentTurn()();
  SiriKitRuntimeState.taskService.getter();
  TaskService.onNewTurn()();
  swift_release();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v21 = a3;
  swift_bridgeObjectRetain();
  v22 = SiriKitRuntimeState.taskService.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(a7, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of ReferenceResolutionClientProtocol(a6, (uint64_t)v38);
  outlined init with copy of ReferenceResolutionClientProtocol?(v13 + 56, (uint64_t)v37, &demangling cache variable for type metadata for SiriKitEventSending?);
  outlined init with copy of ReferenceResolutionClientProtocol(v13 + 96, (uint64_t)v36);
  v23 = type metadata accessor for ConversationTurnStateImpl();
  swift_allocObject();
  v24 = v31;
  v25 = v32;
  outlined copy of Data?(v32, a11);
  v26 = ConversationTurnStateImpl.init(bridge:executionRequestId:rootRequestId:taskService:conversationLoggingId:invocationState:customEventSender:requestContextData:invokedByPeerToPeerEORR:rrClient:scopedRRData:)(v29, v34, v21, v35, v30, (uint64_t)v22, (uint64_t)v20, v38, (uint64_t)v37, (uint64_t)v24, v33, (uint64_t)v36, v25, a11);
  ConversationTurnStateImpl.setSiriKitFlowGlobals()();
  v38[3] = v23;
  v38[4] = &protocol witness table for ConversationTurnStateImpl;
  v38[0] = v26;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of ConversationTurnState?((uint64_t)v38, v13 + 16);
  result = swift_endAccess();
  a9[3] = v23;
  a9[4] = &protocol witness table for ConversationTurnStateImpl;
  *a9 = v26;
  return result;
}

uint64_t SiriKitRuntimeState.init(customEventSender:rrClient:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v3 = v2;
  *(_QWORD *)(v2 + 136) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_QWORD *)(v2 + 48) = 0;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, v2 + 56, &demangling cache variable for type metadata for SiriKitEventSending?);
  outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  if (v10)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a2, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
    outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for SiriKitEventSending?);
    outlined init with take of ReferenceResolutionClientProtocol(&v9, (uint64_t)&v11);
  }
  else
  {
    v6 = type metadata accessor for ReferenceResolutionClient();
    v7 = ReferenceResolutionClient.__allocating_init()();
    v12 = v6;
    v13 = MEMORY[0x1E0D9C7B0];
    *(_QWORD *)&v11 = v7;
    outlined destroy of ReferenceResolutionClientProtocol?(a2, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
    outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for SiriKitEventSending?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v9, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  }
  outlined init with take of ReferenceResolutionClientProtocol(&v11, v3 + 96);
  return v3;
}

uint64_t outlined assign with take of ConversationTurnState?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationTurnState?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t SiriKitRuntimeState.taskService.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = a1;
  return swift_release();
}

uint64_t (*SiriKitRuntimeState.taskService.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = SiriKitRuntimeState.taskService.getter();
  return SiriKitRuntimeState.taskService.modify;
}

uint64_t SiriKitRuntimeState.taskService.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 136) = *a1;
  return swift_release();
}

uint64_t ConversationTurnStateImpl.setSiriKitFlowGlobals()()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  __int128 v7;
  uint64_t v8;
  _UNKNOWN **v9;

  v8 = *v0;
  v9 = &protocol witness table for ConversationTurnStateImpl;
  type metadata accessor for ConversationTurnStateImpl.CommandHandler();
  v1 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(&v7, v1 + 16);
  v2 = *(void **)(*(_QWORD *)(*(uint64_t *)((char *)v0
                                         + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_aceServiceInvoker)
                            + 32)
                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
  v3 = type metadata accessor for PeerInfoProvider();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v2;
  v8 = v3;
  v9 = (_UNKNOWN **)lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type PeerInfoProvider and conformance PeerInfoProvider, (uint64_t (*)(uint64_t))type metadata accessor for PeerInfoProvider, (uint64_t)&protocol conformance descriptor for PeerInfoProvider);
  *(_QWORD *)&v7 = v4;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type ConversationTurnStateImpl.CommandHandler and conformance ConversationTurnStateImpl.CommandHandler, (uint64_t (*)(uint64_t))type metadata accessor for ConversationTurnStateImpl.CommandHandler, (uint64_t)&protocol conformance descriptor for ConversationTurnStateImpl.CommandHandler);
  swift_retain();
  v5 = v2;
  SiriKitCommandHandler.notifyBegin(peerInfo:)();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v7, &demangling cache variable for type metadata for PeerInfoProviding?);
  return swift_release();
}

uint64_t SiriKitRuntimeState.deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for ConversationTurnState?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for SiriKitEventSending?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_release();
  return v0;
}

uint64_t SiriKitRuntimeState.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for ConversationTurnState?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for SiriKitEventSending?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_release();
  return swift_deallocClassInstance();
}

_QWORD *ConversationTurnStateImpl.init(bridge:executionRequestId:rootRequestId:taskService:conversationLoggingId:invocationState:customEventSender:requestContextData:invokedByPeerToPeerEORR:rrClient:scopedRRData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  void *v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  id v50;
  void *v51;
  void *v52;
  id v53;
  uint64_t v54;
  void *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  _QWORD *v85;
  void *v86;
  uint64_t inited;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  id v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t, uint64_t);
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  Swift::String_optional v127;
  void *v128;
  id v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  void *v168;
  _QWORD *v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174[8];
  __int128 v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;

  v15 = v14;
  v155 = a6;
  v157 = a3;
  v166 = a14;
  v168 = (void *)a10;
  v147 = *v15;
  v23 = type metadata accessor for Restrictions();
  MEMORY[0x1E0C80A78](v23);
  v152 = (char *)&v143 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
  MEMORY[0x1E0C80A78](v25);
  v165 = (uint64_t)&v143 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  MEMORY[0x1E0C80A78](v27);
  v163 = (uint64_t)&v143 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for SiriVoiceGender();
  MEMORY[0x1E0C80A78](v29);
  v164 = (uint64_t)&v143 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for Locale();
  MEMORY[0x1E0C80A78](v31);
  v162 = (uint64_t)&v143 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for MultiUserState();
  MEMORY[0x1E0C80A78](v33);
  v161 = (uint64_t)&v143 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for DeviceIdiom();
  MEMORY[0x1E0C80A78](v35);
  v156 = (uint64_t)&v143 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for InteractionType();
  MEMORY[0x1E0C80A78](v37);
  v160 = (uint64_t)&v143 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for InputOrigin();
  MEMORY[0x1E0C80A78](v39);
  v159 = (uint64_t)&v143 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)((char *)v15
            + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_bridge) = a1;
  v149 = a2;
  v15[2] = a2;
  v15[3] = a3;
  v150 = a4;
  v15[4] = a4;
  v15[5] = a5;
  v154 = a7;
  outlined init with copy of ReferenceResolutionClientProtocol?(a7, (uint64_t)v15+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_conversationLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v41 = type metadata accessor for SharedContextServiceImpl();
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = a1;
  v43 = (_QWORD *)((char *)v15
                 + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_sharedContextService);
  *(_QWORD *)((char *)v15
            + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_sharedContextService
            + 24) = v41;
  v43[4] = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SharedContextServiceImpl and conformance SharedContextServiceImpl, (uint64_t (*)(uint64_t))type metadata accessor for SharedContextServiceImpl, (uint64_t)&protocol conformance descriptor for SharedContextServiceImpl);
  *v43 = v42;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a8, (uint64_t)v15+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_invocationState);
  v44 = v168;
  *(_QWORD *)((char *)v15
            + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_requestContextData) = v168;
  v169 = v15;
  v45 = (_QWORD *)((char *)v15
                 + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_scopedRRData);
  v46 = v166;
  *v45 = a13;
  v45[1] = v46;
  v47 = a8[3];
  v48 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v47);
  v49 = *(uint64_t (**)(uint64_t, uint64_t))(v48 + 136);
  v151 = a5;
  swift_bridgeObjectRetain();
  v167 = a1;
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain();
  v50 = v44;
  v153 = a13;
  outlined copy of Data?(a13, v46);
  v51 = (void *)v49(v47, v48);
  v52 = v51;
  if (v51)
  {
    v53 = objc_msgSend(v51, sel_runLocation);

    if (v53)
    {
      v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v52 = v55;

    }
    else
    {
      v54 = 0;
      v52 = 0;
    }
  }
  else
  {
    v54 = 0;
  }
  v168 = (void *)a12;
  v56 = specialized static RunLocation.convert(aceRunLocation:)(v54, v52) & 1;
  swift_bridgeObjectRelease();
  v57 = a8[3];
  v58 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v57);
  v59 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v58 + 136))(v57, v58);
  v158 = a9;
  LODWORD(v148) = v56;
  if (v59
    && (v60 = v59,
        v61 = objc_msgSend(v59, sel_invocationDeviceAssistantId),
        v60,
        v61))
  {
    v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v63 = v62;

  }
  else
  {
    v146 = 0;
    v63 = 0;
  }
  v64 = v50;
  v65 = a8[3];
  v66 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v65);
  v67 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v66 + 136))(v65, v66);
  if (v67
    && (v68 = v67,
        v69 = objc_msgSend(v67, sel_executionDeviceAssistantId),
        v68,
        v69))
  {
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v72 = v71;

  }
  else
  {
    v70 = 0;
    v72 = 0;
  }
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v168, (uint64_t)&v177);
  v73 = type metadata accessor for AceServiceInvokerImpl();
  swift_allocObject();
  v74 = v167;
  swift_unknownObjectRetain();
  *((_QWORD *)&v142 + 1) = v70;
  *(_QWORD *)&v142 = v63;
  v75 = v64;
  v76 = AceServiceInvokerImpl.init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(v74, v149, v157, v150, v151, v75, (char)v148, v146, v142, v72, a11 & 1, (uint64_t)&v177);
  v77 = OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_aceServiceInvoker;
  *(_QWORD *)((char *)v169
            + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_aceServiceInvoker) = v76;
  outlined init with copy of ReferenceResolutionClientProtocol?(v158, (uint64_t)&v175, &demangling cache variable for type metadata for SiriKitEventSending?);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a8, (uint64_t)v174);
  if (v176)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v174);
    outlined init with take of ReferenceResolutionClientProtocol(&v175, (uint64_t)&v177);
  }
  else
  {
    v78 = type metadata accessor for InvocationScopedSiriKitEventSender();
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v174, (uint64_t)&v177);
    v79 = v178;
    v157 = v179;
    v80 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v177, v178);
    v173 = v76;
    v81 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, (uint64_t (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl, (uint64_t)&protocol conformance descriptor for AceServiceInvokerImpl);
    swift_retain();
    v82 = v155;
    swift_retain();
    v83 = specialized InvocationScopedSiriKitEventSender.__allocating_init(aceServiceInvoker:taskService:invocationState:)((uint64_t)&v173, v82, v80, v78, v73, v79, v81, v157);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v177);
    swift_release();
    v178 = v78;
    v179 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type InvocationScopedSiriKitEventSender and conformance InvocationScopedSiriKitEventSender, (uint64_t (*)(uint64_t))type metadata accessor for InvocationScopedSiriKitEventSender, (uint64_t)&protocol conformance descriptor for InvocationScopedSiriKitEventSender);
    *(_QWORD *)&v177 = v83;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v174);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v175, &demangling cache variable for type metadata for SiriKitEventSending?);
  }
  v84 = v75;
  v85 = v169;
  outlined init with take of ReferenceResolutionClientProtocol(&v177, (uint64_t)v169+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_eventSender);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v168, (uint64_t)v85+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_rrClient);
  static AuthenticationStateImpl.from(invocationState:)(a8, (uint64_t)&v173);
  v86 = *(void **)(*(_QWORD *)(*(_QWORD *)((char *)v85 + v77) + 32)
                 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
  type metadata accessor for PeerInfoProvider();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v86;
  v88 = a8[3];
  v89 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v88);
  v90 = *(void (**)(uint64_t, uint64_t))(v89 + 24);
  v91 = v86;
  v90(v88, v89);
  v92 = a8[3];
  v93 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v92);
  (*(void (**)(uint64_t, uint64_t))(v93 + 32))(v92, v93);
  if (v86 && (v94 = objc_msgSend(v91, sel_userInterfaceIdiom)) != 0)
  {
    v95 = v94;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    DeviceIdiom.init(aceValue:)();
  }
  else
  {
    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    SiriEnvironment.currentDevice.getter();
    swift_release();
    CurrentDevice.localDeviceIdiom.getter();
    swift_release();
  }
  v96 = v147;
  v97 = a8[3];
  v98 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v97);
  (*(void (**)(uint64_t, uint64_t))(v98 + 64))(v97, v98);
  v99 = a8[3];
  v100 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v99);
  (*(void (**)(uint64_t, uint64_t))(v100 + 120))(v99, v100);
  v101 = a8[3];
  v102 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v101);
  (*(void (**)(uint64_t, uint64_t))(v102 + 128))(v101, v102);
  v103 = a8[3];
  v104 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v103);
  LODWORD(v151) = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 80))(v103, v104);
  v105 = a8[3];
  v106 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v105);
  LODWORD(v150) = (*(uint64_t (**)(uint64_t, uint64_t))(v106 + 88))(v105, v106);
  v107 = a8[3];
  v108 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v107);
  LODWORD(v149) = (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 96))(v107, v108);
  v109 = a8[3];
  v110 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v109);
  LODWORD(v147) = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 112))(v109, v110);
  v111 = swift_allocObject();
  *(_QWORD *)(v111 + 16) = v84;
  *(_QWORD *)(v111 + 24) = v96;
  v112 = a8[3];
  v113 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v112);
  v114 = *(uint64_t (**)(uint64_t, uint64_t))(v113 + 72);
  v115 = v84;
  v116 = v114(v112, v113);
  v118 = v117;
  v119 = a8[3];
  v120 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v119);
  v121 = (*(uint64_t (**)(uint64_t, uint64_t))(v120 + 160))(v119, v120);
  v144 = v122;
  v123 = a8[3];
  v124 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v123);
  (*(void (**)(uint64_t, uint64_t))(v124 + 168))(v123, v124);
  v125 = a8[3];
  v126 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v125);
  (*(void (**)(uint64_t, uint64_t))(v126 + 176))(v125, v126);
  v127 = PeerInfoProvider.getPeerName()();
  v128 = *(void **)&v115[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo];
  v157 = inited;
  v148 = v115;
  v146 = v116;
  v145 = v118;
  v143 = v121;
  if (v128 && (v129 = objc_msgSend(v128, sel_identifier, v143)) != 0)
  {
    v130 = v129;
    v131 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v133 = v132;

  }
  else
  {
    v131 = 0;
    v133 = 0;
  }
  v134 = a8[3];
  v135 = a8[4];
  __swift_project_boxed_opaque_existential_1(a8, v134);
  v136 = (uint64_t)v152;
  (*(void (**)(uint64_t, uint64_t))(v135 + 192))(v134, v135);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v173, (uint64_t)&v170);
  v137 = type metadata accessor for DefaultDeviceState();
  swift_allocObject();
  v138 = DefaultDeviceState.init(inputOrigin:interactionType:renderDeviceIdiom:multiUserState:siriLocale:siriVoiceGender:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:isLockedWithPasscodeClosure:sessionHandOffContinuityID:preferencesLanguageCode:personalDomainsAuthenticationMode:bargeInContext:peerName:endpointId:restrictedCommands:authenticationState:)(v159, v160, v156, v161, v162, v164, v151 & 1, v150 & 1, v149 & 1, v147 & 1, (uint64_t (*)())partial apply for closure #1 in ConversationTurnStateImpl.init(bridge:executionRequestId:rootRequestId:taskService:conversationLoggingId:invocationState:customEventSender:requestContextData:invokedByPeerToPeerEORR:rrClient:scopedRRData:), (uint64_t (*)())v111, v146, v145, v143, v144, v163, v165, v127.value._countAndFlagsBits,
           (uint64_t)v127.value._object,
           v131,
           v133,
           v136,
           &v170);
  v171 = v137;
  v172 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type DefaultDeviceState and conformance DefaultDeviceState, (uint64_t (*)(uint64_t))type metadata accessor for DefaultDeviceState, (uint64_t)&protocol conformance descriptor for DefaultDeviceState);
  outlined consume of Data?(v153, v166);
  swift_unknownObjectRelease();
  swift_release();

  *(_QWORD *)&v170 = v138;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v168);
  outlined destroy of ReferenceResolutionClientProtocol?(v158, &demangling cache variable for type metadata for SiriKitEventSending?);
  outlined destroy of ReferenceResolutionClientProtocol?(v154, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v173);
  v139 = v169;
  outlined init with take of ReferenceResolutionClientProtocol(&v170, (uint64_t)v169+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_deviceState);
  v140 = v157;
  swift_setDeallocating();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a8);
  return v139;
}

uint64_t ConversationTurnStateImpl.CommandHandler.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for SiriKitCommandHandler.deviceState.getter in conformance ConversationTurnStateImpl.CommandHandler()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

uint64_t protocol witness for SiriKitCommandHandler.aceServiceInvoker.getter in conformance ConversationTurnStateImpl.CommandHandler@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v1 + 16), v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 48))(v3, v4);
  a1[3] = type metadata accessor for AceServiceInvokerImpl();
  result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, (uint64_t (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl, (uint64_t)&protocol conformance descriptor for AceServiceInvokerImpl);
  a1[4] = result;
  *a1 = v5;
  return result;
}

uint64_t protocol witness for SiriKitCommandHandler.sharedContextService.getter in conformance ConversationTurnStateImpl.CommandHandler()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
}

uint64_t protocol witness for SiriKitCommandHandler.eventSender.getter in conformance ConversationTurnStateImpl.CommandHandler()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

uint64_t protocol witness for SiriKitCommandHandler.flowContextPublisher.getter in conformance ConversationTurnStateImpl.CommandHandler()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)v0 + 16), v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, (uint64_t (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl, (uint64_t)&protocol conformance descriptor for AceServiceInvokerImpl);
  return v3;
}

uint64_t ConversationTurnStateImpl.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_conversationLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_invocationState);
  __swift_destroy_boxed_opaque_existential_1(v0+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_sharedContextService);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_eventSender);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_deviceState);
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_requestContextData));
  outlined consume of Data?(*(_QWORD *)(v0+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_scopedRRData), *(_QWORD *)(v0+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_scopedRRData+ 8));
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_rrClient);
  return v0;
}

uint64_t ConversationTurnStateImpl.__deallocating_deinit()
{
  ConversationTurnStateImpl.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ConversationTurnState.rootRequestId.getter in conformance ConversationTurnStateImpl()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for ConversationTurnState.conversationLoggingId.getter in conformance ConversationTurnStateImpl@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(*v1+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_conversationLoggingId, a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t protocol witness for ConversationTurnState.invocationState.getter in conformance ConversationTurnStateImpl@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(*v1+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_invocationState, a1);
}

uint64_t protocol witness for ConversationTurnState.deviceState.getter in conformance ConversationTurnStateImpl@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(*v1+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_deviceState, a1);
}

uint64_t protocol witness for ConversationTurnState.aceServiceInvoker.getter in conformance ConversationTurnStateImpl()
{
  return swift_retain();
}

uint64_t protocol witness for ConversationTurnState.sharedContextService.getter in conformance ConversationTurnStateImpl@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(*v1+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_sharedContextService, a1);
}

uint64_t protocol witness for ConversationTurnState.eventSender.getter in conformance ConversationTurnStateImpl@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(*v1+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_eventSender, a1);
}

id protocol witness for ConversationTurnState.requestContextData.getter in conformance ConversationTurnStateImpl()
{
  _QWORD *v0;

  return objc_retain(*(id *)(*v0
                           + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_requestContextData));
}

uint64_t protocol witness for ConversationTurnState.scopedRRData.getter in conformance ConversationTurnStateImpl()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0
     + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_scopedRRData;
  v2 = *(_QWORD *)v1;
  outlined copy of Data?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t protocol witness for ConversationTurnState.bridge.getter in conformance ConversationTurnStateImpl()
{
  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for ConversationTurnStateImpl()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ConversationTurnStateImpl;
  if (!type metadata singleton initialization cache for ConversationTurnStateImpl)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *sub_1B4EB6EBC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = SiriKitRuntimeState.taskService.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B4EB6EE4(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 136) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t type metadata accessor for SiriKitRuntimeState()
{
  return objc_opt_self();
}

uint64_t method lookup function for SiriKitRuntimeState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriKitRuntimeState.__allocating_init(customEventSender:rrClient:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t ObjC metadata update function for ConversationTurnStateImpl()
{
  return type metadata accessor for ConversationTurnStateImpl();
}

void type metadata completion function for ConversationTurnStateImpl()
{
  unint64_t v0;

  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for ConversationTurnStateImpl.CommandHandler()
{
  return objc_opt_self();
}

uint64_t sub_1B4EB7030()
{
  uint64_t v0;

  return swift_deallocObject();
}

BOOL partial apply for closure #1 in ConversationTurnStateImpl.init(bridge:executionRequestId:rootRequestId:taskService:conversationLoggingId:invocationState:customEventSender:requestContextData:invokedByPeerToPeerEORR:rrClient:scopedRRData:)()
{
  uint64_t v0;
  int v2;

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceLocked) & 1) != 0)
    return 1;
  v2 = MKBGetDeviceLockState();
  return v2 != 3 && v2 != 0;
}

SiriKitRuntime::SiriLinkFlowAffinityScorer __swiftcall SiriLinkFlowAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::SiriLinkFlowAffinityScorer result;

  v0 = (void *)0x80000001B4EF6BD0;
  v1 = 0xD000000000000021;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t SiriLinkFlowAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized SiriLinkFlowAffinityScorer.score(input:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  uint64_t v60;
  char *v61;
  uint8_t *v62;
  char v63;
  char *v64;
  _QWORD *v65;
  void (*v66)(uint64_t, _QWORD, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t);
  int v71;
  char *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t);
  char *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  void (*v129)(char *, char *, uint64_t);
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  const char *v137;
  NSObject *v138;
  os_log_type_t v139;
  NSObject *v140;
  os_log_type_t v141;
  uint8_t *v142;
  uint64_t v143;
  os_log_type_t v144;
  _BOOL4 v145;
  uint8_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  _QWORD v169[3];
  uint64_t v170;
  _BYTE v171[40];

  v153 = type metadata accessor for UsoIdentifier();
  v165 = *(_QWORD *)(v153 - 8);
  v0 = MEMORY[0x1E0C80A78](v153);
  v157 = (char *)&v147 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v0);
  v164 = (char *)&v147 - v2;
  v156 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v160 = *(_QWORD **)(v156 - 8);
  MEMORY[0x1E0C80A78](v156);
  v152 = (char *)&v147 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?));
  v4 = MEMORY[0x1E0C80A78](v162);
  v155 = (uint64_t)&v147 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v167 = (char *)&v147 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v151 = (uint64_t)&v147 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v159 = (uint64_t)&v147 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v158 = (char *)&v147 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v150 = (uint64_t)&v147 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v168 = (uint64_t)&v147 - v17;
  MEMORY[0x1E0C80A78](v16);
  v161 = (uint64_t)&v147 - v18;
  v19 = type metadata accessor for Siri_Nlu_External_UserParse();
  v166 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v154 = (char *)&v147 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v147 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v147 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for USOParse();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v147 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for Parse();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v147 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v32 + 88))(v34, v31) != *MEMORY[0x1E0D9C678])
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      _os_log_impl(&dword_1B4BE6000, v45, v46, "SiriLinkAffinityScorer Got unexpected parse", v47, 2u);
      MEMORY[0x1B5E44758](v47, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
    return 2;
  }
  (*(void (**)(char *, uint64_t))(v32 + 96))(v34, v31);
  v148 = v28;
  v35 = *(void (**)(char *, char *, uint64_t))(v28 + 32);
  v149 = v27;
  v35(v30, v34, v27);
  v163 = v30;
  v36 = USOParse.userParse.getter();
  v37 = MEMORY[0x1B5E3FA6C](v36);
  v38 = *(void (**)(char *, uint64_t))(v166 + 8);
  v38(v23, v19);
  v39 = *(_QWORD *)(v37 + 16);
  v40 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v41 = *(_QWORD *)(v40 - 8);
  v42 = v19;
  if (v39)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v26, v37 + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80)), v40);
    v43 = 0;
  }
  else
  {
    v43 = 1;
  }
  v50 = (uint64_t)v167;
  v49 = v168;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v26, v43, 1, v40);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v26, 1, v40) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v26, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_17:
    if (one-time initialization token for executor != -1)
      swift_once();
    v56 = type metadata accessor for Logger();
    __swift_project_value_buffer(v56, (uint64_t)static Logger.executor);
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.error.getter();
    v59 = os_log_type_enabled(v57, v58);
    v60 = v149;
    v61 = v163;
    if (v59)
    {
      v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v62 = 0;
      _os_log_impl(&dword_1B4BE6000, v57, v58, "SiriLinkAffinityScorer could not extract USO task", v62, 2u);
      MEMORY[0x1B5E44758](v62, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v148 + 8))(v61, v60);
    return 0;
  }
  v51 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v40);
  if (!v51)
    goto LABEL_17;
  v53 = UsoTask.baseEntityAsString.getter();
  v54 = v52;
  if (v53 == 0xD000000000000013 && v52 == 0x80000001B4F03270)
  {
    v167 = (char *)v51;
    swift_bridgeObjectRelease();
    v55 = v161;
    goto LABEL_25;
  }
  v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v55 = v161;
  if ((v63 & 1) != 0)
  {
    v167 = (char *)v51;
    swift_bridgeObjectRelease();
LABEL_25:
    v64 = v154;
    USOParse.userParse.getter();
    v166 = Siri_Nlu_External_UserParse.appShortcuts.getter();
    v38(v64, v42);
    USOParse.parserIdentifier.getter();
    v65 = v160;
    v66 = (void (*)(uint64_t, _QWORD, uint64_t))v160[13];
    v67 = v156;
    v66(v49, *MEMORY[0x1E0D9F108], v156);
    v165 = v65[7];
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v165)(v49, 0, 1, v67);
    v68 = v50 + *(int *)(v162 + 48);
    v69 = &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?;
    outlined init with copy of ReferenceResolutionClientProtocol?(v55, v50, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v49, v68, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v65[6];
    v71 = v70(v50, 1, v67);
    v72 = v158;
    if (v71 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v49, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      outlined destroy of ReferenceResolutionClientProtocol?(v55, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      if (v70(v68, 1, v67) == 1)
      {
        v73 = -1;
      }
      else
      {
        v69 = &demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?);
        v73 = 0;
      }
    }
    else
    {
      v74 = v150;
      outlined init with copy of ReferenceResolutionClientProtocol?(v50, v150, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      if (v70(v68, 1, v67) != 1)
      {
        v78 = (void (*)(char *, uint64_t, uint64_t))v65[4];
        v79 = v152;
        v78(v152, v68, v67);
        lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
        v80 = v74;
        v73 = dispatch thunk of static Equatable.== infix(_:_:)();
        v81 = (void (*)(char *, uint64_t))v160[1];
        v81(v79, v67);
        v69 = &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?;
        outlined destroy of ReferenceResolutionClientProtocol?(v168, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        outlined destroy of ReferenceResolutionClientProtocol?(v161, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        v81((char *)v80, v67);
        v75 = (uint64_t)v158;
        v65 = v160;
LABEL_36:
        outlined destroy of ReferenceResolutionClientProtocol?(v50, v69);
        USOParse.parserIdentifier.getter();
        v82 = v159;
        v66(v159, *MEMORY[0x1E0D9F0F8], v67);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v165)(v82, 0, 1, v67);
        v83 = v155;
        v84 = v155 + *(int *)(v162 + 48);
        outlined init with copy of ReferenceResolutionClientProtocol?(v75, v155, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        outlined init with copy of ReferenceResolutionClientProtocol?(v82, v84, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        if (v70(v83, 1, v67) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v82, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
          outlined destroy of ReferenceResolutionClientProtocol?(v75, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
          v85 = v70(v84, 1, v67);
          v86 = v149;
          v87 = v148;
          if (v85 == 1)
          {
            outlined destroy of ReferenceResolutionClientProtocol?(v83, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
            v88 = v166;
LABEL_43:
            if (*(_QWORD *)(v88 + 16))
            {
              swift_bridgeObjectRelease();
              if (one-time initialization token for executor != -1)
                swift_once();
              v93 = type metadata accessor for Logger();
              __swift_project_value_buffer(v93, (uint64_t)static Logger.executor);
              v94 = Logger.logObject.getter();
              v95 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v94, v95))
              {
                v96 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v96 = 0;
                v97 = "SiriLinkAffinityScorer Got auto shortcuts with exact match";
                goto LABEL_54;
              }
              goto LABEL_55;
            }
LABEL_48:
            if ((v73 & 1) != 0)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              v98 = *(_QWORD *)(v88 + 16);
              swift_bridgeObjectRelease();
              if (!v98)
              {
                if (one-time initialization token for executor != -1)
                  swift_once();
                v108 = type metadata accessor for Logger();
                __swift_project_value_buffer(v108, (uint64_t)static Logger.executor);
                v109 = Logger.logObject.getter();
                v110 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v109, v110))
                {
                  v111 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)v111 = 0;
                  _os_log_impl(&dword_1B4BE6000, v109, v110, "SiriLinkAffinityScorer Got user shortcut", v111, 2u);
                  MEMORY[0x1B5E44758](v111, -1, -1);
                }
                swift_release();

                (*(void (**)(char *, uint64_t))(v87 + 8))(v163, v86);
                return 4;
              }
            }
            if (one-time initialization token for executor != -1)
              goto LABEL_116;
            goto LABEL_52;
          }
        }
        else
        {
          v89 = v151;
          outlined init with copy of ReferenceResolutionClientProtocol?(v83, v151, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
          if (v70(v84, 1, v67) != 1)
          {
            v90 = v152;
            ((void (*)(char *, uint64_t, uint64_t))v65[4])(v152, v84, v67);
            lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
            v91 = dispatch thunk of static Equatable.== infix(_:_:)();
            v92 = (void (*)(char *, uint64_t))v65[1];
            v92(v90, v67);
            outlined destroy of ReferenceResolutionClientProtocol?(v159, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
            outlined destroy of ReferenceResolutionClientProtocol?(v75, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
            v92((char *)v89, v67);
            outlined destroy of ReferenceResolutionClientProtocol?(v83, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
            v86 = v149;
            v87 = v148;
            v88 = v166;
            if ((v91 & 1) == 0)
              goto LABEL_48;
            goto LABEL_43;
          }
          outlined destroy of ReferenceResolutionClientProtocol?(v159, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
          outlined destroy of ReferenceResolutionClientProtocol?(v75, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
          ((void (*)(uint64_t, uint64_t))v65[1])(v89, v67);
          v86 = v149;
          v87 = v148;
        }
        outlined destroy of ReferenceResolutionClientProtocol?(v83, &demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?));
        v88 = v166;
        goto LABEL_48;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v168, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      outlined destroy of ReferenceResolutionClientProtocol?(v161, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      ((void (*)(uint64_t, uint64_t))v65[1])(v74, v67);
      v73 = 0;
      v69 = &demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?);
    }
    v75 = (uint64_t)v72;
    goto LABEL_36;
  }
  v76 = v149;
  if (v53 == 0x535F6E6F6D6D6F63 && v54 == 0xEE00676E69747465)
  {
    swift_bridgeObjectRelease();
    v77 = v163;
  }
  else
  {
    v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v77 = v163;
    if ((v100 & 1) == 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v112 = type metadata accessor for Logger();
      __swift_project_value_buffer(v112, (uint64_t)static Logger.executor);
      v113 = Logger.logObject.getter();
      v114 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v113, v114))
      {
        v115 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v115 = 0;
        _os_log_impl(&dword_1B4BE6000, v113, v114, "SiriLinkAffinityScorer Unsupported base entity", v115, 2u);
        MEMORY[0x1B5E44758](v115, -1, -1);
      }
      swift_release();

      goto LABEL_107;
    }
  }
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (one-time initialization token for executor != -1)
    swift_once();
  v101 = type metadata accessor for Logger();
  v102 = __swift_project_value_buffer(v101, (uint64_t)static Logger.executor);
  v103 = Logger.logObject.getter();
  v104 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v103, v104))
  {
    v105 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v105 = 0;
    _os_log_impl(&dword_1B4BE6000, v103, v104, "SiriLinkAffinityScorer Enablement request", v105, 2u);
    MEMORY[0x1B5E44758](v105, -1, -1);
  }

  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v171, (uint64_t)v169, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v170)
  {
    type metadata accessor for UsoTask_enable_common_Setting();
    v106 = swift_dynamicCast();
    v107 = v153;
    if ((v106 & 1) != 0)
      goto LABEL_81;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v169, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v107 = v153;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v171, (uint64_t)v169, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v170)
  {
    type metadata accessor for UsoTask_disable_common_Setting();
    if ((swift_dynamicCast() & 1) != 0)
      goto LABEL_81;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v169, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v171, (uint64_t)v169, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v170)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v169, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_104;
  }
  type metadata accessor for UsoTask_toggle_common_Setting();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_104:
    v140 = Logger.logObject.getter();
    v141 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v140, v141))
    {
      v142 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v142 = 0;
      _os_log_impl(&dword_1B4BE6000, v140, v141, "SiriLinkAffinityScorer Unsupported settings request", v142, 2u);
      MEMORY[0x1B5E44758](v142, -1, -1);
    }
    swift_release();

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v171, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_107:
    (*(void (**)(char *, uint64_t))(v148 + 8))(v77, v76);
    return 0;
  }
LABEL_81:
  v116 = swift_retain();
  MEMORY[0x1B5E40834](v169, v116);
  swift_release_n();
  v117 = v169[0];
  if (!v169[0]
    || (swift_retain(),
        v86 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)(),
        swift_release(),
        !v86))
  {
    v134 = Logger.logObject.getter();
    v135 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v134, v135))
    {
LABEL_102:
      swift_release();

      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v171, (uint64_t *)&demangling cache variable for type metadata for Any?);
      (*(void (**)(char *, uint64_t))(v148 + 8))(v77, v76);
      swift_release();
      return 0;
    }
    v136 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v136 = 0;
    v137 = "SiriLinkAffinityScorer Could not extract identifiers";
    v138 = v134;
    v139 = v135;
LABEL_101:
    _os_log_impl(&dword_1B4BE6000, v138, v139, v137, v136, 2u);
    MEMORY[0x1B5E44758](v136, -1, -1);
    goto LABEL_102;
  }
  v168 = v117;
  v118 = MEMORY[0x1E0DEE9D8];
  v169[0] = MEMORY[0x1E0DEE9D8];
  v119 = *(_QWORD *)(v86 + 16);
  if (!v119)
  {
LABEL_109:
    swift_bridgeObjectRelease();
    v143 = *(_QWORD *)(v118 + 16);
    swift_release();
    v134 = Logger.logObject.getter();
    v144 = static os_log_type_t.debug.getter();
    v145 = os_log_type_enabled(v134, v144);
    if (v143)
    {
      if (v145)
      {
        v146 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v146 = 0;
        _os_log_impl(&dword_1B4BE6000, v134, v144, "SiriLinkAffinityScorer Got AppShortcuts enablement request", v146, 2u);
        MEMORY[0x1B5E44758](v146, -1, -1);
      }
      swift_release();

      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v171, (uint64_t *)&demangling cache variable for type metadata for Any?);
      (*(void (**)(char *, uint64_t))(v148 + 8))(v77, v76);
      swift_release();
      return 2;
    }
    if (!v145)
      goto LABEL_102;
    v136 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v136 = 0;
    v139 = v144;
    v137 = "SiriLinkAffinityScorer Settings request isn't for Link";
    v138 = v134;
    goto LABEL_101;
  }
  v166 = v102;
  v167 = (char *)v51;
  v120 = 0;
  v87 = *MEMORY[0x1E0DA2C98];
  while (v120 < *(_QWORD *)(v86 + 16))
  {
    v121 = (*(unsigned __int8 *)(v165 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v165 + 80);
    v122 = *(_QWORD *)(v165 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v165 + 16))(v164, v86 + v121 + v122 * v120, v107);
    v123 = UsoIdentifier.namespace.getter();
    v125 = v124;
    v126 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v125)
    {
      if (v123 == v126 && v125 == v127)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_94:
        v129 = *(void (**)(char *, char *, uint64_t))(v165 + 32);
        v129(v157, v164, v107);
        v130 = v169[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v130 + 16) + 1, 1);
          v130 = v169[0];
        }
        v132 = *(_QWORD *)(v130 + 16);
        v131 = *(_QWORD *)(v130 + 24);
        if (v132 >= v131 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v131 > 1, v132 + 1, 1);
          v130 = v169[0];
        }
        *(_QWORD *)(v130 + 16) = v132 + 1;
        v133 = v130 + v121 + v132 * v122;
        v107 = v153;
        v129((char *)v133, v157, v153);
        v169[0] = v130;
        goto LABEL_87;
      }
      v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v128 & 1) != 0)
        goto LABEL_94;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v165 + 8))(v164, v107);
LABEL_87:
    if (v119 == ++v120)
    {
      v118 = v169[0];
      v76 = v149;
      v77 = v163;
      goto LABEL_109;
    }
  }
  __break(1u);
LABEL_116:
  swift_once();
LABEL_52:
  v99 = type metadata accessor for Logger();
  __swift_project_value_buffer(v99, (uint64_t)static Logger.executor);
  v94 = Logger.logObject.getter();
  v95 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v94, v95))
  {
    v96 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v96 = 0;
    v97 = "SiriLinkAffinityScorer Got auto shortcuts with SSU match";
LABEL_54:
    _os_log_impl(&dword_1B4BE6000, v94, v95, v97, v96, 2u);
    MEMORY[0x1B5E44758](v96, -1, -1);
  }
LABEL_55:
  swift_release();

  (*(void (**)(char *, uint64_t))(v87 + 8))(v163, v86);
  return 2;
}

ValueMetadata *type metadata accessor for SiriLinkFlowAffinityScorer()
{
  return &type metadata for SiriLinkFlowAffinityScorer;
}

uint64_t static SiriSuggestionsBrokerProvider.bootStrapSuggestionsBrokerProvider()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v1 = v0[2];
  type metadata accessor for SiriSuggestionsBrokerProvider();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9AF00];
  v0[3] = static SiriSuggestionsBrokerProvider.instance.getter();
  v3 = swift_allocObject();
  v0[4] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider, v2, MEMORY[0x1E0D9AF10]);
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;

  dispatch thunk of SiriSuggestionsBrokerProvider.initialize(initialize:postInit:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in static SiriSuggestionsBrokerProvider.bootStrapSuggestionsBrokerProvider()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  id v14;
  NSURL *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  uint64_t ObjCClassMetadata;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  os_log_t v39;
  uint8_t *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _OWORD *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  uint64_t v68;
  os_log_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73[2];
  uint64_t v74;
  uint64_t v75;

  v2 = type metadata accessor for URL();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v67 - v7;
  if (one-time initialization token for executor != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1B4BE6000, v10, v11, "loading suggestions broker via SKE bridge...", v12, 2u);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }

  v13 = (id)MEMORY[0x1B5E43FFC]();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:isDirectory:)();
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:isDirectory:)();
  (*(void (**)(char *, char *, uint64_t))(v3 + 40))(v8, v6, v2);
  v14 = objc_allocWithZone(MEMORY[0x1E0CB34D0]);
  URL._bridgeToObjectiveC()(v15);
  v17 = v16;
  v18 = objc_msgSend(v14, sel_initWithURL_, v16);

  if (!v18)
  {
    v18 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      v72 = v3;
      v44 = v43;
      v75 = v43;
      *(_DWORD *)v42 = 136315138;
      swift_beginAccess();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
      v45 = dispatch thunk of CustomStringConvertible.description.getter();
      v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v18, v41, "suggestions bundle not found on expected path:%s", v42, 0xCu);
      swift_arrayDestroy();
      v47 = v44;
      v3 = v72;
      MEMORY[0x1B5E44758](v47, -1, -1);
      MEMORY[0x1B5E44758](v42, -1, -1);
    }
    goto LABEL_23;
  }
  if (!-[NSObject principalClass](v18, sel_principalClass))
  {
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v50 = 0;
      _os_log_impl(&dword_1B4BE6000, v48, v49, "suggestions bundle principal class not found", v50, 2u);
      MEMORY[0x1B5E44758](v50, -1, -1);
    }

LABEL_23:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  v70 = a1;
  ObjCClassMetadata = swift_getObjCClassMetadata();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  v22 = os_log_type_enabled(v20, v21);
  v71 = ObjCClassMetadata;
  v72 = v3;
  if (v22)
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    *(_QWORD *)&v73[0] = v24;
    v69 = v18;
    *(_DWORD *)v23 = 136315138;
    v25 = _typeName(_:qualified:)();
    v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)v73);
    v18 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v20, v21, "found principal class: %s", v23, 0xCu);
    swift_arrayDestroy();
    v27 = v24;
    ObjCClassMetadata = v71;
    MEMORY[0x1B5E44758](v27, -1, -1);
    MEMORY[0x1B5E44758](v23, -1, -1);
  }

  v28 = swift_conformsToProtocol2();
  if (v28)
    v29 = v28;
  else
    v29 = 0;
  if (v28)
    v30 = ObjCClassMetadata;
  else
    v30 = 0;
  v31 = Logger.logObject.getter();
  if (v30)
  {
    v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc();
      v68 = v2;
      v34 = (uint8_t *)v33;
      v35 = swift_slowAlloc();
      v69 = v31;
      v36 = v35;
      *(_QWORD *)&v73[0] = v35;
      *(_DWORD *)v34 = 136315138;
      v67[1] = v29;
      v37 = _typeName(_:qualified:)();
      v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v39 = v69;
      _os_log_impl(&dword_1B4BE6000, v69, v32, "successfully instantiated suggestions bundle with principalClass: %s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v36, -1, -1);
      v40 = v34;
      v2 = v68;
      MEMORY[0x1B5E44758](v40, -1, -1);

    }
    else
    {

    }
    dispatch thunk of static SiriSuggestionsBroker.getInstance()();
    v60 = Logger.logObject.getter();
    v61 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc();
      v63 = swift_slowAlloc();
      v75 = v63;
      *(_DWORD *)v62 = 136315138;
      v64 = _typeName(_:qualified:)();
      v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v60, v61, "successfully called getInstance on bridge principalClass: %s", v62, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v63, -1, -1);
      MEMORY[0x1B5E44758](v62, -1, -1);
    }

    v66 = v72;
    outlined init with take of ReferenceResolutionClientProtocol(v73, v70);
    return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v8, v2);
  }
  else
  {
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v52))
    {
      v53 = swift_slowAlloc();
      v54 = swift_slowAlloc();
      *(_QWORD *)&v73[0] = v54;
      *(_DWORD *)v53 = 136315394;
      v69 = v31;
      v55 = _typeName(_:qualified:)();
      v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriSuggestionsBroker);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SiriSuggestionsBroker.Protocol);
      v57 = String.init<A>(describing:)();
      v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, (uint64_t *)v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v31 = v69;
      _os_log_impl(&dword_1B4BE6000, v69, v52, "principal class %s does not conform to %s", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v54, -1, -1);
      MEMORY[0x1B5E44758](v53, -1, -1);
    }

    v59 = (_OWORD *)v70;
    *(_QWORD *)(v70 + 32) = 0;
    *v59 = 0u;
    v59[1] = 0u;
    return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v8, v2);
  }
}

uint64_t sub_1B4EB8F6C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static SiriSuggestionsBrokerProvider.bootStrapSuggestionsBrokerProvider()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static SiriSuggestionsBrokerProvider.bootStrapSuggestionsBrokerProvider()(a1);
}

SiriKitRuntime::SiriVideoAffinityScorer __swiftcall SiriVideoAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::SiriVideoAffinityScorer result;

  v0 = (void *)0x80000001B4EF6DB0;
  v1 = 0xD000000000000026;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t SiriVideoAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized SiriVideoAffinityScorer.score(input:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v14;

  v0 = type metadata accessor for Parse();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  v4 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  v5 = *MEMORY[0x1E0D9C678];
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v4 == v5)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v7, v8))
    {
      v10 = 0;
      goto LABEL_12;
    }
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1B4BE6000, v7, v8, "SiriVideoAffinityScorer returning .unsupported", v9, 2u);
    v10 = 0;
    goto LABEL_10;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
  v7 = Logger.logObject.getter();
  v12 = static os_log_type_t.error.getter();
  v10 = 2;
  if (os_log_type_enabled(v7, v12))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1B4BE6000, v7, v12, "SiriVideoAffinityScorer not a USO parse, returning .default", v9, 2u);
LABEL_10:
    MEMORY[0x1B5E44758](v9, -1, -1);
  }
LABEL_12:

  return v10;
}

ValueMetadata *type metadata accessor for SiriVideoAffinityScorer()
{
  return &type metadata for SiriVideoAffinityScorer;
}

SiriKitRuntime::SocialConversationAffinityScorer __swiftcall SocialConversationAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::SocialConversationAffinityScorer result;

  v0 = (void *)0x80000001B4EF6C00;
  v1 = 0xD000000000000033;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t SocialConversationAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized SocialConversationAffinityScorer.score(input:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  _QWORD v51[3];
  unint64_t v52;
  int v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, unint64_t, uint64_t);
  char *v57;
  uint64_t v58;

  v0 = type metadata accessor for UsoIdentifier();
  v58 = *(_QWORD *)(v0 - 8);
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v51 - v4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  MEMORY[0x1E0C80A78](v6);
  v57 = (char *)v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for USOParse();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Parse();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v13 + 88))(v15, v12) != *MEMORY[0x1E0D9C678])
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1B4BE6000, v27, v28, "SocialConversationAffinityScorer Got unexpected parse", v29, 2u);
      MEMORY[0x1B5E44758](v29, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return 2;
  }
  (*(void (**)(char *, uint64_t))(v13 + 96))(v15, v12);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
  if (!specialized static AffinityScorerUtils.getTask(_:)())
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_1B4BE6000, v31, v32, "SocialConversationAffinityScorer Could not extract usoTask from parse", v33, 2u);
      MEMORY[0x1B5E44758](v33, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 2;
  }
  v16 = UsoTask.arguments.getter();
  if (!*(_QWORD *)(v16 + 16))
    goto LABEL_26;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(0x746567726174, 0xE600000000000000);
  if ((v18 & 1) == 0)
    goto LABEL_26;
  v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v16)
      goto LABEL_26;
  }
  else if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_26;
  }
  if ((v19 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v19);
  }
  else
  {
    if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_66:
      swift_bridgeObjectRetain();
      v50 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v50)
        goto LABEL_15;
LABEL_26:
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  v16 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v16)
    goto LABEL_27;
  swift_retain();
  v20 = UsoEntity.attributes.getter();
  swift_release();
  if (!*(_QWORD *)(v20 + 16))
    goto LABEL_26;
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(0x676F6C616964, 0xE600000000000000);
  if ((v22 & 1) == 0)
    goto LABEL_26;
  v19 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v19 >> 62)
    goto LABEL_66;
  if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_26;
LABEL_15:
  v51[2] = v16;
  if ((v19 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v19);
  }
  else
  {
    if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_70:
      swift_once();
LABEL_58:
      v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Logger.executor);
      v47 = Logger.logObject.getter();
      v48 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v49 = 0;
        _os_log_impl(&dword_1B4BE6000, v47, v48, "SocialConversationAffinityScorer Detected low priority profanity action", v49, 2u);
        MEMORY[0x1B5E44758](v49, -1, -1);
      }

      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return 1;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  v23 = dispatch thunk of UsoValue.getUsoIdentifiers()();
  swift_release();
  if (!v23)
    goto LABEL_27;
  v24 = *(_QWORD *)(v23 + 16);
  if (!v24)
  {
    v39 = 1;
    v40 = v58;
LABEL_48:
    v41 = (uint64_t)v57;
    goto LABEL_51;
  }
  v25 = v23 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
  v54 = *(_QWORD *)(v58 + 72);
  v56 = *(void (**)(char *, unint64_t, uint64_t))(v58 + 16);
  v51[1] = v23;
  swift_bridgeObjectRetain();
  v55 = "iriSuggestionsSKEBridge.bundle";
  v52 = 0x80000001B4F032E0;
  while (1)
  {
    v56(v5, v25, v0);
    if (UsoIdentifier.appBundleId.getter() == 0xD000000000000013 && v36 == v52)
    {
      swift_bridgeObjectRelease();
      v56(v3, (unint64_t)v5, v0);
    }
    else
    {
      v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v56(v3, (unint64_t)v5, v0);
      if ((v53 & 1) == 0)
        goto LABEL_35;
    }
    v37 = UsoIdentifier.namespace.getter();
    if (!v38)
    {
LABEL_35:
      v35 = *(void (**)(char *, uint64_t))(v58 + 8);
      v35(v3, v0);
      goto LABEL_36;
    }
    if (v37 == 0x614E746E65746E69 && v38 == 0xEA0000000000656DLL)
      break;
    v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v35 = *(void (**)(char *, uint64_t))(v58 + 8);
    v35(v3, v0);
    if ((v53 & 1) != 0)
      goto LABEL_50;
LABEL_36:
    v35(v5, v0);
    v25 += v54;
    if (!--v24)
    {
      swift_bridgeObjectRelease();
      v39 = 1;
      v40 = v58;
      goto LABEL_48;
    }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v3, v0);
LABEL_50:
  swift_bridgeObjectRelease();
  v41 = (uint64_t)v57;
  v40 = v58;
  (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v57, v5, v0);
  v39 = 0;
LABEL_51:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v41, v39, 1, v0);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v41, 1, v0) == 1)
  {
    outlined destroy of UsoIdentifier?(v41);
    goto LABEL_27;
  }
  v42 = UsoIdentifier.value.getter();
  v44 = v43;
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v0);
  if (v42 == 0x61666F72506C6164 && v44 == 0xEC0000007974696ELL)
  {
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v45 & 1) != 0)
  {
LABEL_57:
    if (one-time initialization token for executor == -1)
      goto LABEL_58;
    goto LABEL_70;
  }
LABEL_27:
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
  swift_release();
  return 2;
}

ValueMetadata *type metadata accessor for SocialConversationAffinityScorer()
{
  return &type metadata for SocialConversationAffinityScorer;
}

uint64_t outlined destroy of UsoIdentifier?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B4EB9CA0()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1B4EB9D98()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

{
  __asm { BR              X10 }
}

{
  __asm { BR              X10 }
}

uint64_t sub_1B4EB9E6C()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B4EB9F68()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B4EBA05C()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_1B4EBA254()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1B4EBA34C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1B4EBA464()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

id StartExecutionTurn.__allocating_init(executionRequestId:rootRequestId:isTapToEdit:isMUXEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  objc_class *v6;
  _BYTE *v13;
  _QWORD *v14;
  _QWORD *v15;
  objc_super v17;

  v13 = objc_allocWithZone(v6);
  v14 = &v13[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId];
  *v14 = a1;
  v14[1] = a2;
  v15 = &v13[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId];
  *v15 = a3;
  v15[1] = a4;
  v13[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit] = a5;
  v13[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled] = a6;
  v17.receiver = v13;
  v17.super_class = v6;
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t static StartExecutionTurn.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static StartExecutionTurn.supportsSecureCoding;
}

uint64_t static StartExecutionTurn.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static StartExecutionTurn.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static StartExecutionTurn.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t StartExecutionTurn.executionRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StartExecutionTurn.rootRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StartExecutionTurn.isTapToEdit.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit);
}

uint64_t StartExecutionTurn.isMUXEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance StartExecutionTurn.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance StartExecutionTurn.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance StartExecutionTurn.CodingKeys()
{
  __asm { BR              X10 }
}

uint64_t sub_1B4EBA7C0()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance StartExecutionTurn.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance StartExecutionTurn.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized StartExecutionTurn.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance StartExecutionTurn.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B4EBA8A0 + 4 * byte_1B4EF0ED5[*v0]))();
}

void sub_1B4EBA8A0(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "rootRequestId");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1B4EBA8C8(_QWORD *a1@<X8>)
{
  *a1 = 0x456F547061547369;
  a1[1] = 0xEB00000000746964;
}

void sub_1B4EBA8EC(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "isMUXEnabled");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

id StartExecutionTurn.init(executionRequestId:rootRequestId:isTapToEdit:isMUXEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  _BYTE *v6;
  _QWORD *v7;
  _QWORD *v8;
  objc_super v10;

  v7 = &v6[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId];
  *v7 = a1;
  v7[1] = a2;
  v8 = &v6[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId];
  *v8 = a3;
  v8[1] = a4;
  v6[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit] = a5;
  v6[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled] = a6;
  v10.receiver = v6;
  v10.super_class = (Class)type metadata accessor for StartExecutionTurn();
  return objc_msgSendSuper2(&v10, sel_init);
}

uint64_t StartExecutionTurn.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return StartExecutionTurn.init(coder:)(a1);
}

uint64_t StartExecutionTurn.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;

  type metadata accessor for NSString();
  v3 = v1;
  v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = (void *)NSCoder.decodeObject<A>(of:forKey:)();
    v7 = (void *)MEMORY[0x1B5E432E8](0x456F547061547369, 0xEB00000000746964);
    v8 = objc_msgSend(a1, sel_decodeBoolForKey_, v7);

    v9 = (void *)MEMORY[0x1B5E432E8](0x616E4558554D7369, 0xEC00000064656C62);
    v10 = objc_msgSend(a1, sel_decodeBoolForKey_, v9);

    ObjectType = swift_getObjectType();
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;
    if (v6)
    {
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v17 = v16;
    }
    else
    {
      v15 = 0;
      v17 = 0;
    }
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, id, id))(ObjectType + 112))(v12, v14, v15, v17, v8, v10);

    swift_deallocPartialClassInstance();
  }
  else
  {

    if (one-time initialization token for executor != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1B4BE6000, v19, v20, "Could not deserialize executionRequestId in StartExecutionTurn", v21, 2u);
      MEMORY[0x1B5E44758](v21, -1, -1);
    }

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v22;
}

Swift::Void __swiftcall StartExecutionTurn.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;

  v3 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId), *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId + 8));
  v4 = (void *)MEMORY[0x1B5E432E8](0xD000000000000012, 0x80000001B4EF4CE0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId + 8))
    v5 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId));
  else
    v5 = 0;
  v6 = (void *)MEMORY[0x1B5E432E8](0x75716552746F6F72, 0xED00006449747365);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v5, v6);

  v7 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit);
  v8 = (void *)MEMORY[0x1B5E432E8](0x456F547061547369, 0xEB00000000746964);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v7, v8);

  v9 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled);
  v10 = (id)MEMORY[0x1B5E432E8](0x616E4558554D7369, 0xEC00000064656C62);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v9, v10);

}

uint64_t StartExecutionTurn.debugDescription.getter()
{
  _BYTE *v0;
  _BYTE *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String v29;
  objc_super v31;
  uint64_t v32;
  unint64_t v33;

  v1 = v0;
  v32 = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  v31.receiver = v0;
  v31.super_class = (Class)type metadata accessor for StartExecutionTurn();
  v2 = objc_msgSendSuper2(&v31, sel_debugDescription);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 31520;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9 = *(_QWORD *)&v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId];
  v10 = *(void **)&v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId + 8];
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8236;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  _print_unlocked<A, B>(_:_:)();
  v13._countAndFlagsBits = 8250;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId + 8])
  {
    v14 = *(_QWORD *)&v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId];
    v15 = *(void **)&v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId + 8];
  }
  else
  {
    v15 = (void *)0xE500000000000000;
    v14 = 0x3E6C696E3CLL;
  }
  swift_bridgeObjectRetain();
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 8236;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x456F547061547369;
  v18._object = (void *)0xEB00000000746964;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 8250;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  if (v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit])
    v20 = 1702195828;
  else
    v20 = 0x65736C6166;
  if (v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit])
    v21 = 0xE400000000000000;
  else
    v21 = 0xE500000000000000;
  v22 = v21;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x616E4558554D7369;
  v24._object = (void *)0xEC00000064656C62;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 8250;
  v25._object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  if (v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled])
    v26 = 1702195828;
  else
    v26 = 0x65736C6166;
  if (v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled])
    v27 = 0xE400000000000000;
  else
    v27 = 0xE500000000000000;
  v28 = v27;
  String.append(_:)(*(Swift::String *)&v26);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 125;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  return v32;
}

id StartExecutionTurn.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void StartExecutionTurn.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id StartExecutionTurn.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StartExecutionTurn();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for StartExecutionTurn()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StartExecutionTurn.__allocating_init(executionRequestId:rootRequestId:isTapToEdit:isMUXEnabled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of StartExecutionTurn.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of StartExecutionTurn.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t storeEnumTagSinglePayload for StartExecutionTurn.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B4EBB27C + 4 * byte_1B4EF0EDE[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B4EBB2B0 + 4 * byte_1B4EF0ED9[v4]))();
}

uint64_t sub_1B4EBB2B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EBB2B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4EBB2C0);
  return result;
}

uint64_t sub_1B4EBB2CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4EBB2D4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B4EBB2D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EBB2E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for StartExecutionTurn.CodingKeys()
{
  return &unk_1E6854590;
}

unint64_t lazy protocol witness table accessor for type StartExecutionTurn.CodingKeys and conformance StartExecutionTurn.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StartExecutionTurn.CodingKeys and conformance StartExecutionTurn.CodingKeys;
  if (!lazy protocol witness table cache variable for type StartExecutionTurn.CodingKeys and conformance StartExecutionTurn.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for StartExecutionTurn.CodingKeys, &unk_1E6854590);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StartExecutionTurn.CodingKeys and conformance StartExecutionTurn.CodingKeys);
  }
  return result;
}

unint64_t specialized StartExecutionTurn.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of StartExecutionTurn.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t StartRequestMessageBase.rootRequestId.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  __int128 v4[2];
  uint64_t v5;
  _QWORD v6[4];

  type metadata accessor for StartRequestMessageBase();
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RootRequestAware);
  if (swift_dynamicCast())
  {
    outlined init with take of ReferenceResolutionClientProtocol(v4, (uint64_t)v6);
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    v2 = dispatch thunk of RootRequestAware.rootRequestId.getter();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  else
  {
    v5 = 0;
    memset(v4, 0, sizeof(v4));
    outlined destroy of RootRequestAware?((uint64_t)v4);
    return RequestMessageBase.requestId.getter();
  }
  return v2;
}

uint64_t outlined destroy of RootRequestAware?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RootRequestAware?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *StopRepromptFeatureFlag.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return &static StopRepromptFeatureFlag.forceEnabled;
}

uint64_t static StopRepromptFeatureFlag.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return swift_retain();
}

const char *StopRepromptFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *StopRepromptFeatureFlag.feature.getter()
{
  return "stop_reprompt";
}

uint64_t StopRepromptFeatureFlag.isEnabled.getter()
{
  unsigned __int8 *v0;
  os_unfair_lock_s *v1;
  unsigned __int8 v3;

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  v0 = (unsigned __int8 *)(static StopRepromptFeatureFlag.forceEnabled + 16);
  v1 = (os_unfair_lock_s *)(static StopRepromptFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static StopRepromptFeatureFlag.forceEnabled + 20));
  closure #1 in StopRepromptFeatureFlag.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

unsigned __int8 *closure #1 in StopRepromptFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  char v4;
  char v5;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;

  v3 = *result;
  if (v3 == 2)
  {
    v7 = &type metadata for StopRepromptFeatureFlag;
    v8 = lazy protocol witness table accessor for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag();
    v4 = isFeatureEnabled(_:)();
    result = (unsigned __int8 *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    v5 = v4 & 1;
  }
  else
  {
    v5 = v3 & 1;
  }
  *a2 = v5;
  return result;
}

uint64_t static StopRepromptFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void StopRepromptFeatureFlag.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int StopRepromptFeatureFlag.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t storeEnumTagSinglePayload for StopRepromptFeatureFlag(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4EBB738 + 4 * byte_1B4EF0FE0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4EBB758 + 4 * byte_1B4EF0FE5[v4]))();
}

_BYTE *sub_1B4EBB738(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4EBB758(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4EBB760(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4EBB768(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4EBB770(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4EBB778(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StopRepromptFeatureFlag()
{
  return &type metadata for StopRepromptFeatureFlag;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  _OWORD v21[2];
  _OWORD v22[2];

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v5)
    {
      v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v11 = v10 | (v8 << 6);
      goto LABEL_22;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v12 >= v6)
      goto LABEL_30;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v6)
        goto LABEL_30;
      v13 = *(_QWORD *)(v2 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v6)
          goto LABEL_30;
        v13 = *(_QWORD *)(v2 + 8 * v8);
        if (!v13)
        {
          v8 = v12 + 3;
          if (v12 + 3 >= v6)
            goto LABEL_30;
          v13 = *(_QWORD *)(v2 + 8 * v8);
          if (!v13)
            break;
        }
      }
    }
LABEL_21:
    v5 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_22:
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v22);
    outlined init with take of Any(v22, v21);
    outlined init with copy of Any((uint64_t)v21, (uint64_t)v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentStringKeyedValueFetching);
    if ((swift_dynamicCast() & 1) == 0)
      v20 = 0uLL;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    if ((_QWORD)v20)
    {
      v18 = v20;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v15 = v18;
      v17 = v9[2];
      v16 = v9[3];
      if (v17 >= v16 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v9);
        v15 = v18;
        v9 = (_QWORD *)result;
      }
      v9[2] = v17 + 1;
      *(_OWORD *)&v9[2 * v17 + 4] = v15;
    }
  }
  v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_30:
    swift_release();
    return (uint64_t)v9;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_30;
    v13 = *(_QWORD *)(v2 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_32:
  __break(1u);
  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SiriEnvironment.getValue(provider:key:)(Swift::String provider, Swift::String key)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  void *v13;
  char v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  Swift::String_optional v19;
  uint64_t v20;
  void *v21;
  Swift::String_optional result;
  uint64_t v23;

  object = key._object;
  countAndFlagsBits = key._countAndFlagsBits;
  v4 = provider._object;
  v5 = provider._countAndFlagsBits;
  v6 = dispatch thunk of SiriEnvironment.providers.getter();
  v7 = specialized Sequence.compactMap<A>(_:)(v6);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v23 = countAndFlagsBits;
    swift_bridgeObjectRetain();
    v9 = (uint64_t *)(v7 + 40);
    while (1)
    {
      v10 = *v9;
      ObjectType = swift_getObjectType();
      v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 16);
      swift_unknownObjectRetain();
      if (v12(ObjectType, v10) == v5 && v13 == v4)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v15 & 1) != 0)
        break;
      swift_unknownObjectRelease();
      v9 += 2;
      if (!--v8)
      {
        swift_bridgeObjectRelease_n();
        v16 = 0;
        v17 = 0;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_13:
    v18._object = object;
    v18._countAndFlagsBits = v23;
    v19 = SiriEnvironmentStringKeyedValueFetching.getValue(forKey:)(v18);
    v16 = v19.value._countAndFlagsBits;
    v17 = v19.value._object;
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = 0;
    v17 = 0;
  }
LABEL_14:
  v20 = v16;
  v21 = v17;
  result.value._object = v21;
  result.value._countAndFlagsBits = v20;
  return result;
}

uint64_t key path getter for CurrentRequest.refId : CurrentRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.refId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path getter for CurrentRequest.aceId : CurrentRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.aceId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path getter for CurrentRequest.executionRequestId : CurrentRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.executionRequestId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path getter for CurrentRequest.sessionHandoffContinuityID : CurrentRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.sessionHandoffContinuityID.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path getter for CurrentRequest.peerName : CurrentRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.peerName.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path getter for CurrentRequest.inputOrigin : CurrentRequest()
{
  return CurrentRequest.inputOrigin.getter();
}

uint64_t key path getter for CurrentRequest.interactionType : CurrentRequest()
{
  return CurrentRequest.interactionType.getter();
}

uint64_t key path getter for CurrentRequest.audioSource : CurrentRequest()
{
  return CurrentRequest.audioSource.getter();
}

uint64_t key path getter for CurrentRequest.audioDestination : CurrentRequest()
{
  return CurrentRequest.audioDestination.getter();
}

uint64_t key path getter for CurrentRequest.responseMode : CurrentRequest()
{
  return CurrentRequest.responseMode.getter();
}

uint64_t key path getter for CurrentRequest.multiUserState : CurrentRequest()
{
  return CurrentRequest.multiUserState.getter();
}

uint64_t key path getter for CurrentRequest.bargeInContext : CurrentRequest()
{
  return CurrentRequest.bargeInContext.getter();
}

uint64_t key path getter for CurrentRequest.originatingHome : CurrentRequest()
{
  return CurrentRequest.originatingHome.getter();
}

uint64_t key path getter for CurrentRequest.speechPackage : CurrentRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CurrentRequest.speechPackage.getter();
  *a1 = result;
  return result;
}

uint64_t key path getter for CurrentRequest.resultCandidateId : CurrentRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.resultCandidateId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path getter for CurrentRequest.asrOnDevice : CurrentRequest@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CurrentRequest.asrOnDevice.getter();
  *a1 = result;
  return result;
}

uint64_t key path getter for CurrentRequest.positionInSession : CurrentRequest()
{
  return CurrentRequest.positionInSession.getter();
}

uint64_t StringKeyedValue.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StringKeyedValue.keyPath.getter()
{
  return swift_retain();
}

uint64_t StringKeyedValue.valueType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StringKeyedValue() + 24);
  v4 = type metadata accessor for TypeIdentifier();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t StringKeyedValue.init<A, B>(name:keyPath:valueType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v6;
  uint64_t v7;

  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  v6 = (char *)a5 + *(int *)(type metadata accessor for StringKeyedValue() + 24);
  v7 = type metadata accessor for TypeIdentifier();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a4, v7);
}

uint64_t <=> infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = type metadata accessor for TypeIdentifier();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_retain();
  TypeIdentifier.init(for:)();
  *(_QWORD *)a4 = a1;
  *((_QWORD *)a4 + 1) = a2;
  *((_QWORD *)a4 + 2) = a3;
  v12 = type metadata accessor for StringKeyedValue();
  return (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(&a4[*(int *)(v12 + 24)], v11, v8);
}

uint64_t makeStringKeys(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  _QWORD v21[2];
  __int128 v22;
  uint64_t v23;

  v2 = type metadata accessor for StringKeyedValue();
  MEMORY[0x1E0C80A78](v2);
  v5 = (_QWORD *)((char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    return MEMORY[0x1E0DEE9E0];
  v7 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v8 = *(_QWORD *)(v3 + 72);
  v21[1] = a1;
  swift_bridgeObjectRetain();
  v9 = MEMORY[0x1E0DEE9E0];
  v22 = xmmword_1B4EE3F50;
  do
  {
    outlined init with copy of StringKeyedValue(v7, (uint64_t)v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StringKeyedValue)>);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue));
    v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80);
    v12 = (v11 + 32) & ~v11;
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = v22;
    v14 = (_QWORD *)(v13 + v12);
    v15 = v13 + v12 + *(int *)(v10 + 48);
    v16 = v5[1];
    *v14 = *v5;
    v14[1] = v16;
    outlined init with copy of StringKeyedValue((uint64_t)v5, v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = specialized Dictionary.init(dictionaryLiteral:)(v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = v9;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v17, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v23);
    v19 = v23;
    swift_bridgeObjectRelease();
    outlined destroy of StringKeyedValue((uint64_t)v5);
    swift_bridgeObjectRelease();
    v7 += v8;
    v9 = v19;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease();
  return v19;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SiriEnvironmentStringKeyedValueFetching.getValue(forKey:)(Swift::String forKey)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  void *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  Swift::String_optional result;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[32];
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[2];
  void *v51;

  v4 = v3;
  v5 = v2;
  v6 = v1;
  object = forKey._object;
  countAndFlagsBits = forKey._countAndFlagsBits;
  v9 = type metadata accessor for TypeIdentifier();
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v40 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v38 = (char *)&v36 - v12;
  v39 = type metadata accessor for TypeInformation();
  v37 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v36 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringKeyedValue?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for StringKeyedValue();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v43 = (uint64_t)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v6;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v6, v5);
  if (*(_QWORD *)(v20 + 16))
  {
    swift_bridgeObjectRetain();
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if ((v22 & 1) != 0)
    {
      outlined init with copy of StringKeyedValue(*(_QWORD *)(v20 + 56) + *(_QWORD *)(v18 + 72) * v21, (uint64_t)v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    v24 = v43;
    outlined init with take of StringKeyedValue((uint64_t)v16, v43);
    *(_QWORD *)&v46 = v4;
    swift_unknownObjectRetain();
    swift_retain();
    swift_getAtAnyKeyPath();
    swift_unknownObjectRelease();
    swift_release();
    if (!v49)
    {
      outlined destroy of StringKeyedValue(v24);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v48, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v16 = 0;
      v20 = 0;
      goto LABEL_23;
    }
    outlined init with take of Any(&v48, v50);
    v25 = v24 + *(int *)(v17 + 24);
    v27 = v41;
    v26 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v38, v25, v42);
    v28 = v36;
    TypeInformation.init(for:)();
    v29 = TypeInformation.isOptional.getter();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v39);
    v30 = v51;
    v31 = v40;
    if ((v29 & 1) != 0)
    {
      outlined init with copy of Any((uint64_t)v50, (uint64_t)v45);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
      swift_dynamicCast();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
      if (!v47)
      {
        outlined destroy of StringKeyedValue(v24);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v46, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v16 = 0;
        v20 = 0;
        goto LABEL_23;
      }
      outlined init with take of Any(&v46, &v48);
      outlined init with take of Any(&v48, v50);
    }
    outlined init with copy of Any((uint64_t)v50, (uint64_t)&v48);
    if (swift_dynamicCast())
    {
      v20 = *((_QWORD *)&v46 + 1);
      v16 = (char *)v46;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
      TypeIdentifier.init(for:)();
      static Transformation.defaultLengthLimit.getter();
      static Transformation.transform<A>(_:to:lengthLimit:)();
      if (v30)
      {

        (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v26);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v31, v26);
        v20 = *((_QWORD *)&v48 + 1);
        if (*((_QWORD *)&v48 + 1))
        {
          v16 = (char *)v48;
          goto LABEL_22;
        }
      }
      outlined init with copy of Any((uint64_t)v50, (uint64_t)&v48);
      v16 = (char *)String.init<A>(describing:)();
      v20 = v32;
    }
LABEL_22:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    outlined destroy of StringKeyedValue(v24);
    goto LABEL_23;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for StringKeyedValue?);
  lazy protocol witness table accessor for type StringKeyedValueFetchingError and conformance StringKeyedValueFetchingError();
  swift_allocError();
  *v23 = countAndFlagsBits;
  v23[1] = (uint64_t)object;
  swift_bridgeObjectRetain();
  swift_willThrow();
LABEL_23:
  v33 = (uint64_t)v16;
  v34 = (void *)v20;
  result.value._object = v34;
  result.value._countAndFlagsBits = v33;
  return result;
}

uint64_t SiriEnvironment.getProvider(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  char v14;

  v4 = dispatch thunk of SiriEnvironment.providers.getter();
  v5 = specialized Sequence.compactMap<A>(_:)(v4);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    for (i = (uint64_t *)(v5 + 40); ; i += 2)
    {
      v8 = *(i - 1);
      v9 = *i;
      ObjectType = swift_getObjectType();
      v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
      swift_unknownObjectRetain();
      if (v11(ObjectType, v9) == a1 && v12 == a2)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return v8;
      }
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
        break;
      swift_unknownObjectRelease();
      if (!--v6)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v8;
}

uint64_t type metadata accessor for StringKeyedValue()
{
  uint64_t result;

  result = type metadata singleton initialization cache for StringKeyedValue;
  if (!type metadata singleton initialization cache for StringKeyedValue)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CurrentDevice.providerName.getter()
{
  return 0x44746E6572727563;
}

uint64_t protocol witness for SiriEnvironmentStringKeyedValueFetching.providerName.getter in conformance CurrentDevice()
{
  return 0x44746E6572727563;
}

unint64_t NetworkAvailability.providerName.getter()
{
  return 0xD000000000000013;
}

unint64_t protocol witness for SiriEnvironmentStringKeyedValueFetching.providerName.getter in conformance NetworkAvailability()
{
  return 0xD000000000000013;
}

uint64_t CurrentRequest.providerName.getter()
{
  return 0x52746E6572727563;
}

uint64_t protocol witness for SiriEnvironmentStringKeyedValueFetching.providerName.getter in conformance CurrentRequest()
{
  return 0x52746E6572727563;
}

uint64_t CallStateEnvironmentProvider.providerName.getter()
{
  return 0x746174536C6C6163;
}

uint64_t protocol witness for SiriEnvironmentStringKeyedValueFetching.providerName.getter in conformance CallStateEnvironmentProvider()
{
  return 0x746174536C6C6163;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t result;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v10 = type metadata accessor for StringKeyedValue();
  v52 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v44 = (uint64_t)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v43 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue)?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (_QWORD *)((char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = -1 << *(_BYTE *)(a1 + 32);
  v19 = ~v18;
  v20 = *(_QWORD *)(a1 + 64);
  v21 = -v18;
  v45 = a1;
  v46 = a1 + 64;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  else
    v22 = -1;
  v47 = v19;
  v48 = 0;
  v49 = v22 & v20;
  v50 = a2;
  v51 = a3;
  v43[2] = a1;
  swift_bridgeObjectRetain();
  v43[1] = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v17);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue));
  for (i = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v17, 1, v23);
        ;
        i = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v17, 1, v23))
  {
    if (i == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of [Int : @Sendable ()].Iterator._Variant();
      return swift_release();
    }
    v26 = *v17;
    v27 = v17[1];
    outlined init with take of StringKeyedValue((uint64_t)v17 + *(int *)(v23 + 48), (uint64_t)v14);
    v28 = *a5;
    v30 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
    v31 = *(_QWORD *)(v28 + 16);
    v32 = (v29 & 1) == 0;
    v33 = v31 + v32;
    if (__OFADD__(v31, v32))
      break;
    v34 = v29;
    if (*(_QWORD *)(v28 + 24) >= v33)
    {
      if ((a4 & 1) != 0)
      {
        if ((v29 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v34 & 1) != 0)
          goto LABEL_5;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, a4 & 1);
      v35 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
      if ((v34 & 1) != (v36 & 1))
        goto LABEL_22;
      v30 = v35;
      if ((v34 & 1) != 0)
      {
LABEL_5:
        v25 = v44;
        outlined init with copy of StringKeyedValue((uint64_t)v14, v44);
        outlined destroy of StringKeyedValue((uint64_t)v14);
        swift_bridgeObjectRelease();
        outlined assign with take of StringKeyedValue(v25, *(_QWORD *)(*a5 + 56) + *(_QWORD *)(v52 + 72) * v30);
        goto LABEL_6;
      }
    }
    v37 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v30 >> 6) + 64) |= 1 << v30;
    v38 = (uint64_t *)(v37[6] + 16 * v30);
    *v38 = v26;
    v38[1] = v27;
    outlined init with take of StringKeyedValue((uint64_t)v14, v37[7] + *(_QWORD *)(v52 + 72) * v30);
    v39 = v37[2];
    v40 = __OFADD__(v39, 1);
    v41 = v39 + 1;
    if (v40)
      goto LABEL_21;
    v37[2] = v41;
LABEL_6:
    specialized LazyMapSequence.Iterator.next()((uint64_t)v17);
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue));
    a4 = 1;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (uint64_t)a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StringKeyedValue))
              + 48);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue));
  v7 = *a1;
  v6 = a1[1];
  outlined init with copy of StringKeyedValue(v4, (uint64_t)a2 + *(int *)(v5 + 48));
  *a2 = v7;
  a2[1] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t outlined destroy of StringKeyedValue(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StringKeyedValue();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type StringKeyedValueFetchingError and conformance StringKeyedValueFetchingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StringKeyedValueFetchingError and conformance StringKeyedValueFetchingError;
  if (!lazy protocol witness table cache variable for type StringKeyedValueFetchingError and conformance StringKeyedValueFetchingError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for StringKeyedValueFetchingError, &type metadata for StringKeyedValueFetchingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringKeyedValueFetchingError and conformance StringKeyedValueFetchingError);
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StringKeyedValue));
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StringKeyedValue)?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char **)((char *)&v41 - v11);
  v14 = *v1;
  v13 = v1[1];
  v16 = v1[2];
  v15 = v1[3];
  v17 = v15;
  v18 = v1[4];
  v41 = v6;
  if (v18)
  {
    v45 = v10;
    v46 = v15;
    v42 = v16;
    v43 = v13;
    v19 = v3;
    v20 = v4;
    v44 = a1;
    v21 = (v18 - 1) & v18;
    v22 = __clz(__rbit64(v18)) | (v15 << 6);
LABEL_3:
    v23 = *(_QWORD *)(v14 + 56);
    v24 = (uint64_t *)(*(_QWORD *)(v14 + 48) + 16 * v22);
    v25 = v14;
    v27 = *v24;
    v26 = v24[1];
    v28 = type metadata accessor for StringKeyedValue();
    outlined init with copy of StringKeyedValue(v23 + *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72) * v22, (uint64_t)v12 + *(int *)(v19 + 48));
    *v12 = v27;
    v12[1] = v26;
    v3 = v19;
    v4 = v20;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v12, 0, 1, v19);
    v14 = v25;
    swift_bridgeObjectRetain();
    a1 = v44;
    v10 = v45;
    v16 = v42;
    v13 = v43;
    goto LABEL_25;
  }
  v29 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
LABEL_23:
    v17 = v11;
    goto LABEL_24;
  }
  v30 = (unint64_t)(v16 + 64) >> 6;
  if (v29 < v30)
  {
    v31 = *(_QWORD *)(v13 + 8 * v29);
    if (v31)
    {
LABEL_7:
      v42 = v16;
      v43 = v13;
      v19 = v3;
      v44 = a1;
      v45 = v10;
      v20 = v4;
      v21 = (v31 - 1) & v31;
      v22 = __clz(__rbit64(v31)) + (v29 << 6);
      v46 = v29;
      goto LABEL_3;
    }
    v32 = v15 + 2;
    v17 = v15 + 1;
    if (v15 + 2 < v30)
    {
      v31 = *(_QWORD *)(v13 + 8 * v32);
      if (v31)
      {
LABEL_10:
        v29 = v32;
        goto LABEL_7;
      }
      v17 = v15 + 2;
      if (v15 + 3 < v30)
      {
        v31 = *(_QWORD *)(v13 + 8 * (v15 + 3));
        if (v31)
        {
          v29 = v15 + 3;
          goto LABEL_7;
        }
        v32 = v15 + 4;
        v17 = v15 + 3;
        if (v15 + 4 < v30)
        {
          v31 = *(_QWORD *)(v13 + 8 * v32);
          if (v31)
            goto LABEL_10;
          v29 = v15 + 5;
          v17 = v15 + 4;
          if (v15 + 5 < v30)
          {
            v31 = *(_QWORD *)(v13 + 8 * v29);
            if (v31)
              goto LABEL_7;
            v11 = v30 - 1;
            v33 = v15 + 6;
            while (v30 != v33)
            {
              v31 = *(_QWORD *)(v13 + 8 * v33++);
              if (v31)
              {
                v29 = v33 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  v46 = v17;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v12, 1, 1, v3);
  v21 = 0;
LABEL_25:
  *v1 = v14;
  v1[1] = v13;
  v34 = v46;
  v1[2] = v16;
  v1[3] = v34;
  v1[4] = v21;
  v35 = (void (*)(uint64_t))v1[5];
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v12, (uint64_t)v10, &demangling cache variable for type metadata for (key: String, value: StringKeyedValue)?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a1, 1, 1, v36);
  }
  else
  {
    v38 = (uint64_t)v10;
    v39 = (uint64_t)v41;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v38, (uint64_t)v41, &demangling cache variable for type metadata for (key: String, value: StringKeyedValue));
    v35(v39);
    outlined destroy of ReferenceResolutionClientProtocol?(v39, &demangling cache variable for type metadata for (key: String, value: StringKeyedValue));
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue));
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(a1, 0, 1, v40);
  }
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 16 * v6;
    v8 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v9 = *v8;
    v10 = v8[1];
    v11 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v7);
    v12 = *v11;
    v13 = v11[1];
    v0[3] = v4;
    v0[4] = v5;
    v14 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v23[0] = v9;
    v23[1] = v10;
    v23[2] = v12;
    v23[3] = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(&v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v22;
  }
  v16 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v17 = (unint64_t)(v0[2] + 64) >> 6;
    if (v16 < v17)
    {
      v18 = v0[1];
      v19 = *(_QWORD *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_7:
        v5 = (v19 - 1) & v19;
        v6 = __clz(__rbit64(v19)) + (v16 << 6);
        v4 = v16;
        goto LABEL_3;
      }
      v20 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v17)
      {
        v19 = *(_QWORD *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_10:
          v16 = v20;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v17)
        {
          v19 = *(_QWORD *)(v18 + 8 * (v3 + 3));
          if (v19)
          {
            v16 = v3 + 3;
            goto LABEL_7;
          }
          v20 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v17)
          {
            v19 = *(_QWORD *)(v18 + 8 * v20);
            if (v19)
              goto LABEL_10;
            v16 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v17)
            {
              v19 = *(_QWORD *)(v18 + 8 * v16);
              if (v19)
                goto LABEL_7;
              v4 = v17 - 1;
              v21 = v3 + 6;
              while (v17 != v21)
              {
                v19 = *(_QWORD *)(v18 + 8 * v21++);
                if (v19)
                {
                  v16 = v21 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t specialized CallStateEnvironmentProvider.stringKeys.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t KeyPath;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StringKeyedValue>);
  v0 = *(_QWORD *)(type metadata accessor for StringKeyedValue() - 8);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  v3 = 2 * v1;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B4EE4F40;
  v5 = (_QWORD *)(v4 + v2);
  KeyPath = swift_getKeyPath();
  type metadata accessor for AFCallState(0);
  swift_retain();
  TypeIdentifier.init(for:)();
  *v5 = 0x746174536C6C6163;
  v5[1] = 0xE900000000000065;
  v5[2] = KeyPath;
  swift_release();
  v7 = (_QWORD *)((char *)v5 + v1);
  v8 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v7 = 0x656B616570536E6FLL;
  v7[1] = 0xE900000000000072;
  v7[2] = v8;
  swift_release();
  v9 = (char *)v5 + v3;
  v10 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  strcpy(v9, "isDropInCall");
  v9[13] = 0;
  *((_WORD *)v9 + 7) = -5120;
  *((_QWORD *)v9 + 2) = v10;
  swift_release();
  v11 = makeStringKeys(_:)(v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v11;
}

uint64_t specialized CurrentDevice.stringKeys.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StringKeyedValue>);
  v0 = *(_QWORD *)(type metadata accessor for StringKeyedValue() - 8);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B4EEF240;
  v4 = (_QWORD *)(v3 + v2);
  KeyPath = swift_getKeyPath();
  type metadata accessor for DeviceIdiom();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v4 = 0x6449656369766564;
  v4[1] = 0xEB000000006D6F69;
  v4[2] = KeyPath;
  swift_release();
  v6 = (_QWORD *)((char *)v4 + v1);
  v7 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v6 = 0xD000000000000015;
  v6[1] = 0x80000001B4EF5180;
  v6[2] = v7;
  swift_release();
  v8 = (_QWORD *)((char *)v4 + 2 * v1);
  v9 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v8 = 0xD000000000000014;
  v8[1] = 0x80000001B4F033B0;
  v8[2] = v9;
  swift_release();
  v10 = (_QWORD *)((char *)v4 + 3 * v1);
  v11 = swift_getKeyPath();
  type metadata accessor for SiriVoiceGender();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v10 = 0x63696F5669726973;
  v10[1] = 0xEF7265646E654765;
  v10[2] = v11;
  swift_release();
  v12 = (_QWORD *)((char *)v4 + 4 * v1);
  v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *v12 = 0xD000000000000017;
  v12[1] = 0x80000001B4EFBAD0;
  v12[2] = v13;
  swift_release();
  v14 = (_QWORD *)((char *)v4 + 5 * v1);
  v15 = swift_getKeyPath();
  type metadata accessor for Locale();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v14 = 0x61636F4C69726973;
  v14[1] = 0xEA0000000000656CLL;
  v14[2] = v15;
  swift_release();
  v16 = (_QWORD *)((char *)v4 + 6 * v1);
  v17 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v16 = 0xD000000000000015;
  v16[1] = 0x80000001B4EF5160;
  v16[2] = v17;
  swift_release();
  v18 = (_QWORD *)((char *)v4 + 7 * v1);
  v19 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *v18 = 0xD000000000000021;
  v18[1] = 0x80000001B4EFBAF0;
  v18[2] = v19;
  swift_release();
  v20 = &v4[v1];
  v21 = swift_getKeyPath();
  type metadata accessor for Restrictions();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v20 = 0xD000000000000012;
  v20[1] = 0x80000001B4EFBB30;
  v20[2] = v21;
  swift_release();
  v22 = (_QWORD *)((char *)v4 + 9 * v1);
  v23 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v22 = 0xD000000000000010;
  v22[1] = 0x80000001B4F033D0;
  v22[2] = v23;
  swift_release();
  v24 = (_QWORD *)((char *)v4 + 10 * v1);
  v25 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *v24 = 0x6C43656369766564;
  v24[1] = 0xEB00000000737361;
  v24[2] = v25;
  swift_release();
  v26 = makeStringKeys(_:)(v3);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v26;
}

uint64_t specialized NetworkAvailability.stringKeys.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StringKeyedValue>);
  v0 = *(_QWORD *)(type metadata accessor for StringKeyedValue() - 8);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B4EEA7F0;
  v4 = (_QWORD *)(v3 + v2);
  KeyPath = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v4 = 0x616C696176417369;
  v4[1] = 0xEB00000000656C62;
  v4[2] = KeyPath;
  swift_release();
  v6 = (_QWORD *)((char *)v4 + v1);
  v7 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v6 = 0x736E657078457369;
  v6[1] = 0xEB00000000657669;
  v6[2] = v7;
  swift_release();
  v8 = (char *)v4 + 2 * v1;
  v9 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  strcpy(v8, "isConstrained");
  *((_WORD *)v8 + 7) = -4864;
  *((_QWORD *)v8 + 2) = v9;
  swift_release();
  v10 = (_QWORD *)((char *)v4 + 3 * v1);
  v11 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v10 = 0xD000000000000010;
  v10[1] = 0x80000001B4F03390;
  v10[2] = v11;
  swift_release();
  v12 = makeStringKeys(_:)(v3);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v12;
}

uint64_t specialized CurrentRequest.stringKeys.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t KeyPath;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StringKeyedValue>);
  v0 = *(_QWORD *)(type metadata accessor for StringKeyedValue() - 8);
  v1 = *(_QWORD *)(v0 + 72);
  v2 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B4EF10B0;
  v4 = (_QWORD *)(v3 + v2);
  KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *v4 = 0x6449666572;
  v4[1] = 0xE500000000000000;
  v4[2] = KeyPath;
  swift_release();
  v6 = (_QWORD *)((char *)v4 + v1);
  v7 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v6 = 0x6449656361;
  v6[1] = 0xE500000000000000;
  v6[2] = v7;
  swift_release();
  v8 = (_QWORD *)((char *)v4 + 2 * v1);
  v9 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v8 = 0xD000000000000012;
  v8[1] = 0x80000001B4EF4CE0;
  v8[2] = v9;
  swift_release();
  v10 = (_QWORD *)((char *)v4 + 3 * v1);
  v11 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v10 = 0xD00000000000001ALL;
  v10[1] = 0x80000001B4EF50F0;
  v10[2] = v11;
  swift_release();
  v12 = (_QWORD *)((char *)v4 + 4 * v1);
  v13 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v12 = 0x656D614E72656570;
  v12[1] = 0xE800000000000000;
  v12[2] = v13;
  swift_release();
  v14 = (_QWORD *)((char *)v4 + 5 * v1);
  v15 = swift_getKeyPath();
  type metadata accessor for InputOrigin();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v14 = 0x69724F7475706E69;
  v14[1] = 0xEB000000006E6967;
  v14[2] = v15;
  swift_release();
  v16 = (_QWORD *)((char *)v4 + 6 * v1);
  v17 = swift_getKeyPath();
  type metadata accessor for InteractionType();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v16 = 0x7463617265746E69;
  v16[1] = 0xEF657079546E6F69;
  v16[2] = v17;
  swift_release();
  v18 = (_QWORD *)((char *)v4 + 7 * v1);
  v19 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *v18 = 0x756F536F69647561;
  v18[1] = 0xEB00000000656372;
  v18[2] = v19;
  swift_release();
  v20 = &v4[v1];
  v21 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *v20 = 0xD000000000000010;
  v20[1] = 0x80000001B4EFFF20;
  v20[2] = v21;
  swift_release();
  v22 = (char *)v4 + 9 * v1;
  v23 = swift_getKeyPath();
  type metadata accessor for ResponseMode();
  swift_retain();
  TypeIdentifier.init(for:)();
  strcpy(v22, "responseMode");
  v22[13] = 0;
  *((_WORD *)v22 + 7) = -5120;
  *((_QWORD *)v22 + 2) = v23;
  swift_release();
  v24 = (char *)v4 + 10 * v1;
  v25 = swift_getKeyPath();
  type metadata accessor for MultiUserState();
  swift_retain();
  TypeIdentifier.init(for:)();
  strcpy(v24, "multiUserState");
  v24[15] = -18;
  *((_QWORD *)v24 + 2) = v25;
  swift_release();
  v26 = (char *)v4 + 11 * v1;
  v27 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
  swift_retain();
  TypeIdentifier.init(for:)();
  strcpy(v26, "bargeInContext");
  v26[15] = -18;
  *((_QWORD *)v26 + 2) = v27;
  swift_release();
  v28 = (_QWORD *)((char *)v4 + 12 * v1);
  v29 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *v28 = 0x74616E696769726FLL;
  v28[1] = 0xEF656D6F48676E69;
  v28[2] = v29;
  swift_release();
  v30 = (char *)v4 + 13 * v1;
  v31 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AFSpeechPackage?);
  swift_retain();
  TypeIdentifier.init(for:)();
  strcpy(v30, "speechPackage");
  *((_WORD *)v30 + 7) = -4864;
  *((_QWORD *)v30 + 2) = v31;
  swift_release();
  v32 = (_QWORD *)((char *)v4 + 14 * v1);
  v33 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v32 = 0xD000000000000011;
  v32[1] = 0x80000001B4EF49F0;
  v32[2] = v33;
  swift_release();
  v34 = (_QWORD *)((char *)v4 + 15 * v1);
  v35 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *v34 = 0x7665446E4F727361;
  v34[1] = 0xEB00000000656369;
  v34[2] = v35;
  swift_release();
  v36 = &v4[2 * v1];
  v37 = swift_getKeyPath();
  type metadata accessor for RequestPositionInSession();
  swift_retain();
  TypeIdentifier.init(for:)();
  *v36 = 0xD000000000000011;
  v36[1] = 0x80000001B4F00060;
  v36[2] = v37;
  swift_release();
  v38 = makeStringKeys(_:)(v3);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v38;
}

uint64_t instantiation function for generic protocol witness table for CurrentDevice(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, MEMORY[0x1E0DA7F58], MEMORY[0x1E0DA7F50]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for NetworkAvailability(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, MEMORY[0x1E0DA81C0], MEMORY[0x1E0DA81B8]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for CurrentRequest(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type CurrentRequest and conformance CurrentRequest, (uint64_t (*)(uint64_t))MEMORY[0x1E0D98398], MEMORY[0x1E0D98260]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for CallStateEnvironmentProvider(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type CallStateEnvironmentProvider and conformance CallStateEnvironmentProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C3D8], MEMORY[0x1E0D9C3C0]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StringKeyedValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for TypeIdentifier();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for StringKeyedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_release();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for TypeIdentifier();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for StringKeyedValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for TypeIdentifier();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for StringKeyedValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for TypeIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for StringKeyedValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for TypeIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for StringKeyedValue(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_release();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for TypeIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for StringKeyedValue()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4EBE7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for TypeIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for StringKeyedValue()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4EBE870(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for TypeIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for StringKeyedValue()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TypeIdentifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t dispatch thunk of SiriEnvironmentStringKeyedValueFetching.providerName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SiriEnvironmentStringKeyedValueFetching.stringKeys.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for StringKeyedValueFetchingError()
{
  return &type metadata for StringKeyedValueFetchingError;
}

uint64_t sub_1B4EBE984@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of CallStateEnvironmentProvider.callState.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B4EBE9AC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of CallStateEnvironmentProvider.onSpeaker.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B4EBE9D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of CallStateEnvironmentProvider.isDropInCall.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B4EBEA04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.refId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B4EBEA2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.aceId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B4EBEA54@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.executionRequestId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B4EBEA7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.sessionHandoffContinuityID.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B4EBEAA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.peerName.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B4EBEACC()
{
  return CurrentRequest.inputOrigin.getter();
}

uint64_t sub_1B4EBEAEC()
{
  return CurrentRequest.interactionType.getter();
}

uint64_t sub_1B4EBEB0C()
{
  return CurrentRequest.audioSource.getter();
}

uint64_t sub_1B4EBEB2C()
{
  return CurrentRequest.audioDestination.getter();
}

uint64_t sub_1B4EBEB4C()
{
  return CurrentRequest.responseMode.getter();
}

uint64_t sub_1B4EBEB6C()
{
  return CurrentRequest.multiUserState.getter();
}

uint64_t sub_1B4EBEB8C()
{
  return CurrentRequest.bargeInContext.getter();
}

uint64_t sub_1B4EBEBAC()
{
  return CurrentRequest.originatingHome.getter();
}

uint64_t sub_1B4EBEBCC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CurrentRequest.speechPackage.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B4EBEBF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.resultCandidateId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B4EBEC1C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CurrentRequest.asrOnDevice.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B4EBEC44()
{
  return CurrentRequest.positionInSession.getter();
}

uint64_t sub_1B4EBEC64@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of NetworkAvailability.isAvailable.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B4EBEC90@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of NetworkAvailability.isExpensive.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B4EBECBC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of NetworkAvailability.isConstrained.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B4EBECE8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of NetworkAvailability.isInAirplaneMode.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B4EBED14()
{
  return dispatch thunk of CurrentDevice.deviceIdiom.getter();
}

uint64_t sub_1B4EBED34@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of CurrentDevice.isTextToSpeechEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B4EBED60@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of CurrentDevice.isLockedWithPasscode.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B4EBED8C()
{
  return dispatch thunk of CurrentDevice.siriVoiceGender.getter();
}

uint64_t sub_1B4EBEDAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = dispatch thunk of CurrentDevice.preferencesLanguageCode.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B4EBEDD4()
{
  return dispatch thunk of CurrentDevice.siriLocale.getter();
}

uint64_t sub_1B4EBEDF4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = dispatch thunk of CurrentDevice.isVoiceTriggerEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B4EBEE20()
{
  return dispatch thunk of CurrentDevice.personalDomainsAuthenticationMode.getter();
}

uint64_t sub_1B4EBEE40()
{
  return dispatch thunk of CurrentDevice.restrictedCommands.getter();
}

uint64_t sub_1B4EBEE60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = dispatch thunk of CurrentDevice.deviceRegionCode.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B4EBEE88()
{
  return dispatch thunk of CurrentDevice.deviceClass.getter();
}

uint64_t outlined assign with take of StringKeyedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StringKeyedValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *StubCamBridge.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static StubCamBridge.shared;
}

uint64_t StubCamBridge.camBridgeState.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t StubCamBridge.camBridgeState.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*StubCamBridge.camBridgeState.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t StubCamBridge.warmupCalls.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 24);
}

uint64_t StubCamBridge.warmupCalls.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*StubCamBridge.warmupCalls.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t StubCamBridge.rankCallsArgs.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t StubCamBridge.rankCallsArgs.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*StubCamBridge.rankCallsArgs.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t StubCamBridge.RankCallArgs.rcId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StubCamBridge.RankCallArgs.actions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StubCamBridge.RankCallArgs.rankerContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for StubCamBridge.RankCallArgs() + 24);
  v4 = type metadata accessor for RankerContext();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t StubCamBridge.RankCallArgs.init(rcId:actions:rankerContext:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  char *v6;
  uint64_t v7;

  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  v6 = (char *)a5 + *(int *)(type metadata accessor for StubCamBridge.RankCallArgs() + 24);
  v7 = type metadata accessor for RankerContext();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a4, v7);
}

uint64_t StubCamBridge.asyncWarmUpIfSupported()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v1);
  v3 = &v12[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v4 = *(_QWORD *)(v0 + 24);
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
    goto LABEL_5;
  }
  *(_QWORD *)(v0 + 24) = v6;
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
  if (one-time initialization token for shared != -1)
LABEL_5:
    swift_once();
  swift_beginAccess();
  v8 = static MessageBusActor.shared;
  v9 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v10 + 24) = v9;
  swift_retain();
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in StubCamBridge.asyncWarmUpIfSupported(), v10);
}

uint64_t StubCamBridge.commit(rcId:)()
{
  uint64_t v0;

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t StubCamBridge.commit(action:)()
{
  uint64_t v0;

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t StubCamBridge.rank(rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v9 = type metadata accessor for StubCamBridge.RankCallArgs();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (uint64_t *)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = (char *)v13 + *(int *)(v11 + 24);
  v15 = type metadata accessor for RankerContext();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, a4, v15);
  *v13 = a1;
  v13[1] = a2;
  v16 = (unint64_t *)(v4 + 32);
  v13[2] = a3;
  swift_beginAccess();
  v17 = *(_QWORD *)(v4 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 32) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
    *v16 = v17;
  }
  v20 = *(_QWORD *)(v17 + 16);
  v19 = *(_QWORD *)(v17 + 24);
  if (v20 >= v19 >> 1)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v17);
    *v16 = v17;
  }
  *(_QWORD *)(v17 + 16) = v20 + 1;
  outlined init with take of StubCamBridge.RankCallArgs((uint64_t)v13, v17+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v20);
  v21 = swift_endAccess();
  MEMORY[0x1E0C80A78](v21);
  *(&v25 - 2) = a3;
  v22 = swift_bridgeObjectRetain();
  v23 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay7SiriCam15ActionCandidateVGG_AH06RankedH0Vs5NeverOTg505_sSi7f5Cam15hi5VAA06j34C0VIgynr_Si6offset_AC7elementtAEs5K11OIegnrzr_TRSiAjNIgynr_Tf1cn_nTf4ng_n(v22, (void (*)(_QWORD, char *))partial apply for closure #1 in StubCamBridge.rank(rcId:actions:rankerContext:), (uint64_t)(&v25 - 4));
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t closure #1 in StubCamBridge.rank(rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = type metadata accessor for CamParse();
  MEMORY[0x1E0C80A78](v5);
  ActionCandidate.flowHandlerId.getter();
  result = ActionCandidate.parse.getter();
  if (__OFSUB__(*(_QWORD *)(a3 + 16), a1))
  {
    __break(1u);
  }
  else
  {
    ActionCandidate.userData.getter();
    return RankedAction.init(flowHandlerId:parse:score:alternatives:userData:)();
  }
  return result;
}

uint64_t StubCamBridge.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)()
{
  uint64_t v0;

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return StubCamBridge.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t StubCamBridge.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a1;
  v5[6] = a5;
  v6 = type metadata accessor for Parse();
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  v7 = type metadata accessor for CamParse();
  v5[11] = v7;
  v5[12] = *(_QWORD *)(v7 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t StubCamBridge.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 112);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
  {
    v3 = *(_QWORD *)(v0 + 96);
    v2 = *(_QWORD *)(v0 + 104);
    v4 = *(_QWORD *)(v0 + 88);
    type metadata accessor for RankedAction();
    RankedAction.parse.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 104))(*(_QWORD *)(v0 + 112), *MEMORY[0x1E0D97A48], *(_QWORD *)(v0 + 88));
  }
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD **)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 56);
  v11 = *(_QWORD *)(v0 + 64);
  v12 = *(_QWORD *)(v0 + 40);
  CamParse.asSKEParse()(v9);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v11 + 16))(v8, v9, v10);
  Input.init(parse:)();
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v9, v10);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v13 = type metadata accessor for CamOutput();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 0, 1, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *one-time initialization function for shared()
{
  uint64_t v0;
  _QWORD *result;

  type metadata accessor for StubCamBridge();
  v0 = swift_allocObject();
  result = StubCamBridge.init()();
  static StubCamBridge.shared = v0;
  return result;
}

uint64_t type metadata accessor for StubCamBridge.RankCallArgs()
{
  uint64_t result;

  result = type metadata singleton initialization cache for StubCamBridge.RankCallArgs;
  if (!type metadata singleton initialization cache for StubCamBridge.RankCallArgs)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B4EBF9FC()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in StubCamBridge.asyncWarmUpIfSupported()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in CamBridgeImpl.asyncWarmUpIfSupported()();
}

uint64_t StubCamBridge.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  StubCamBridge.init()();
  return v0;
}

uint64_t static StubCamBridge.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t static StubCamBridge.shared.setter(uint64_t a1)
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  static StubCamBridge.shared = a1;
  return swift_release();
}

uint64_t (*static StubCamBridge.shared.modify())()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

Swift::Void __swiftcall StubCamBridge.resetWarmupCount()()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 24) = 0;
}

uint64_t StubCamBridge.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t StubCamBridge.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

_QWORD *StubCamBridge.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v14;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v14 - v6;
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v14 - v8;
  v10 = type metadata accessor for UUID();
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v11(v7, 1, 1, v10);
  v11(v4, 1, 1, v10);
  type metadata accessor for CamBridgeState();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = MEMORY[0x1E0DEE9E0];
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v9, v12 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v7, v12 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v4, v12 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v0[2] = v12;
  v0[3] = 0;
  v0[4] = MEMORY[0x1E0DEE9D8];
  return v0;
}

uint64_t protocol witness for CamBridge.camBridgeState.getter in conformance StubCamBridge()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t protocol witness for CamBridge.asyncWarmUpIfSupported() in conformance StubCamBridge()
{
  return StubCamBridge.asyncWarmUpIfSupported()();
}

uint64_t protocol witness for CamBridge.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:) in conformance StubCamBridge()
{
  uint64_t v0;

  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return StubCamBridge.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t protocol witness for CamBridge.rank(rcId:actions:rankerContext:) in conformance StubCamBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t protocol witness for CamBridge.rank(rcId:actions:rankerContext:) in conformance StubCamBridge()
{
  uint64_t v0;
  uint64_t v1;

  v1 = StubCamBridge.rank(rcId:actions:rankerContext:)(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t outlined init with take of StubCamBridge.RankCallArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StubCamBridge.RankCallArgs();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in StubCamBridge.rank(rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in StubCamBridge.rank(rcId:actions:rankerContext:)(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay7SiriCam15ActionCandidateVGG_AH06RankedH0Vs5NeverOTg505_sSi7f5Cam15hi5VAA06j34C0VIgynr_Si6offset_AC7elementtAEs5K11OIegnrzr_TRSiAjNIgynr_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(_QWORD, char *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(_QWORD, char *);
  uint64_t v38;
  uint64_t v39;

  v37 = a2;
  v38 = a3;
  v36 = type metadata accessor for RankedAction();
  v4 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: ActionCandidate));
  v8 = MEMORY[0x1E0C80A78](v7);
  v35 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (uint64_t *)((char *)&v28 - v11);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v28 - v13;
  v39 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v15 = v39;
  v16 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v34 = v16;
  v28 = a1;
  if (v16)
  {
    v17 = type metadata accessor for ActionCandidate();
    v18 = 0;
    v19 = *(_QWORD *)(v17 - 8);
    v20 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v21 = *(_QWORD *)(v19 + 72);
    v31 = v19;
    v32 = v17;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    v30 = v21;
    v33 = v6;
    do
    {
      v22 = &v35[*(int *)(v7 + 48)];
      v23 = v32;
      v29(v22, v20, v32);
      v24 = (char *)v12 + *(int *)(v7 + 48);
      *v12 = v18;
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v24, v22, v23);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for (offset: Int, element: ActionCandidate));
      v37(*(_QWORD *)v14, &v14[*(int *)(v7 + 48)]);
      outlined destroy of (offset: Int, element: ActionCandidate)((uint64_t)v14);
      v15 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v39;
      }
      v26 = *(_QWORD *)(v15 + 16);
      v25 = *(_QWORD *)(v15 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v15 = v39;
      }
      ++v18;
      *(_QWORD *)(v15 + 16) = v26 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v26, v33, v36);
      v39 = v15;
      v20 += v30;
    }
    while (v34 != v18);
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t StubCamBridge.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t type metadata accessor for StubCamBridge()
{
  return objc_opt_self();
}

uint64_t method lookup function for StubCamBridge()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StubCamBridge.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t *initializeBufferWithCopyOfBuffer for StubCamBridge.RankCallArgs(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for RankerContext();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for StubCamBridge.RankCallArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for RankerContext();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for StubCamBridge.RankCallArgs(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for RankerContext();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for StubCamBridge.RankCallArgs(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for RankerContext();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for StubCamBridge.RankCallArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for RankerContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for StubCamBridge.RankCallArgs(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for RankerContext();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for StubCamBridge.RankCallArgs()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4EC05D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for RankerContext();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for StubCamBridge.RankCallArgs()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4EC065C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for RankerContext();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for StubCamBridge.RankCallArgs()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RankerContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined destroy of (offset: Int, element: ActionCandidate)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: ActionCandidate));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t FeatureToggle<>.isEnabled.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  char v10;
  uint64_t v12[5];

  v4 = v3;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a1, a3);
  MEMORY[0x1B5E4327C](v12, v4, v8, a1, MEMORY[0x1E0DEAFA0], *(_QWORD *)(a3 + 8));
  swift_bridgeObjectRelease();
  if (LOBYTE(v12[0]) == 2)
  {
    v12[3] = a1;
    v12[4] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v4, a1);
    v10 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    v10 = v12[0] & 1;
  }
  return v10 & 1;
}

uint64_t protocol witness for FeatureToggle.isEnabled.getter in conformance AmbiguityFeatureFlags()
{
  unsigned __int8 *v0;

  return specialized FeatureToggle<>.isEnabled.getter(*v0);
}

uint64_t FeatureToggle<>.withForcedEnabled<A>(_:block:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD *, _QWORD);
  uint64_t v20;
  _QWORD v22[2];
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  char v27;

  v24 = a5;
  v25 = a6;
  v22[1] = a3;
  v23 = a2;
  v11 = a1;
  v22[0] = a8;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v16, v15);
  MEMORY[0x1B5E4327C](v26, v8, v17, a4, MEMORY[0x1E0DEAFA0], *(_QWORD *)(a7 + 8));
  swift_bridgeObjectRelease();
  v18 = LOBYTE(v26[0]);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v8, a4);
  v27 = v11;
  v19 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a7 + 32))(v26, a4, a7);
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  v20 = v19(v26, 0);
  v23(v20);
  return $defer #1 <A><A1>() in FeatureToggle<>.withForcedEnabled<A>(_:block:)(v18, v8, a4, v24, v25, a7);
}

uint64_t FeatureToggle<>.withForcedEnabled<A>(_:block:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 96) = a8;
  *(_QWORD *)(v9 + 104) = v8;
  *(_QWORD *)(v9 + 80) = a6;
  *(_QWORD *)(v9 + 88) = a7;
  *(_QWORD *)(v9 + 64) = a4;
  *(_QWORD *)(v9 + 72) = a5;
  *(_BYTE *)(v9 + 146) = a2;
  *(_QWORD *)(v9 + 48) = a1;
  *(_QWORD *)(v9 + 56) = a3;
  *(_QWORD *)(v9 + 112) = *(_QWORD *)(a5 - 8);
  *(_QWORD *)(v9 + 120) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t FeatureToggle<>.withForcedEnabled<A>(_:block:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD);
  _QWORD *v9;
  char v11;
  uint64_t (*v12)(_QWORD);

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(int **)(v0 + 56);
  v11 = *(_BYTE *)(v0 + 146);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v5, v4);
  MEMORY[0x1B5E4327C](v3, v7, v5, MEMORY[0x1E0DEAFA0], *(_QWORD *)(v4 + 8));
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 147) = *(_BYTE *)(v0 + 144);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v3, v5);
  *(_BYTE *)(v0 + 145) = v11;
  v8 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v0 + 16, v5, v4);
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  v8(v0 + 16, 0);
  v12 = (uint64_t (*)(_QWORD))((char *)v6 + *v6);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v9;
  *v9 = v0;
  v9[1] = FeatureToggle<>.withForcedEnabled<A>(_:block:);
  return v12(*(_QWORD *)(v0 + 48));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  $defer #1 <A><A1>() in FeatureToggle<>.withForcedEnabled<A>(_:block:)(*(unsigned __int8 *)(v0 + 147), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  $defer #1 <A><A1>() in FeatureToggle<>.withForcedEnabled<A>(_:block:)(*(unsigned __int8 *)(v0 + 147), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t $defer #1 <A><A1>() in FeatureToggle<>.withForcedEnabled<A>(_:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t (*v13)(_BYTE *, _QWORD);
  uint64_t (*v15)(_BYTE *, _QWORD);
  _BYTE v17[40];

  v9 = a1;
  MEMORY[0x1E0C80A78](a1);
  if (v12 == 2)
  {
    v13 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a6 + 32))(v17, a3, a6);
    type metadata accessor for Dictionary();
    Dictionary.removeValue(forKey:)();
    return v13(v17, 0);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(&v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], a2, a3);
    v17[39] = v9;
    v15 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a6 + 32))(v17, a3, a6);
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    return v15(v17, 0);
  }
}

uint64_t *SydneyConversationFeatureFlags.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return &static SydneyConversationFeatureFlags.forceEnabled;
}

uint64_t static SydneyConversationFeatureFlags.forceEnabled.getter()
{
  return static SydneyConversationFeatureFlags.forceEnabled.getter(&one-time initialization token for forceEnabled);
}

uint64_t static SydneyConversationFeatureFlags.forceEnabled.setter(uint64_t a1)
{
  return static SydneyConversationFeatureFlags.forceEnabled.setter(a1, &one-time initialization token for forceEnabled, &static SydneyConversationFeatureFlags.forceEnabled);
}

uint64_t (*static SydneyConversationFeatureFlags.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

const char *SydneyConversationFeatureFlags.domain.getter()
{
  return "Siri";
}

const char *SydneyConversationFeatureFlags.feature.getter(char a1)
{
  if (!a1)
    return "fall2022_conversation_runtime";
  if (a1 == 1)
    return "SKESiriCorrectionsCheckUndo";
  return "SKESiriCorrectionsUndoFollowup";
}

BOOL static SydneyConversationFeatureFlags.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void SydneyConversationFeatureFlags.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int SydneyConversationFeatureFlags.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.setter in conformance SydneyConversationFeatureFlags(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static FeatureToggle.forceEnabled.setter in conformance SydneyConversationFeatureFlags(a1, a2, a3, &one-time initialization token for forceEnabled, &static SydneyConversationFeatureFlags.forceEnabled);
}

uint64_t (*protocol witness for static FeatureToggle.forceEnabled.modify in conformance SydneyConversationFeatureFlags())()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t protocol witness for FeatureToggle.isEnabled.getter in conformance SydneyConversationFeatureFlags()
{
  unsigned __int8 *v0;

  return specialized FeatureToggle<>.isEnabled.getter(*v0);
}

uint64_t *SiriKitFlowFeatureFlagDefinitions.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return &static SiriKitFlowFeatureFlagDefinitions.forceEnabled;
}

uint64_t static SiriKitFlowFeatureFlagDefinitions.forceEnabled.getter()
{
  return static SydneyConversationFeatureFlags.forceEnabled.getter(&one-time initialization token for forceEnabled);
}

uint64_t static SiriKitFlowFeatureFlagDefinitions.forceEnabled.setter(uint64_t a1)
{
  return static SydneyConversationFeatureFlags.forceEnabled.setter(a1, &one-time initialization token for forceEnabled, &static SiriKitFlowFeatureFlagDefinitions.forceEnabled);
}

uint64_t (*static SiriKitFlowFeatureFlagDefinitions.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

const char *SiriKitFlowFeatureFlagDefinitions.domain.getter()
{
  return "SiriKitFlow";
}

const char *SiriKitFlowFeatureFlagDefinitions.feature.getter()
{
  return "Link";
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.setter in conformance SiriKitFlowFeatureFlagDefinitions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static FeatureToggle.forceEnabled.setter in conformance SydneyConversationFeatureFlags(a1, a2, a3, &one-time initialization token for forceEnabled, &static SiriKitFlowFeatureFlagDefinitions.forceEnabled);
}

uint64_t (*protocol witness for static FeatureToggle.forceEnabled.modify in conformance SiriKitFlowFeatureFlagDefinitions())()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t *SiriPlaybackControlFeature.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return &static SiriPlaybackControlFeature.forceEnabled;
}

uint64_t static SiriPlaybackControlFeature.forceEnabled.getter()
{
  return static SydneyConversationFeatureFlags.forceEnabled.getter(&one-time initialization token for forceEnabled);
}

uint64_t static SiriPlaybackControlFeature.forceEnabled.setter(uint64_t a1)
{
  return static SydneyConversationFeatureFlags.forceEnabled.setter(a1, &one-time initialization token for forceEnabled, &static SiriPlaybackControlFeature.forceEnabled);
}

uint64_t (*static SiriPlaybackControlFeature.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

const char *SiriPlaybackControlFeature.domain.getter()
{
  return "SiriPlaybackControls";
}

const char *SiriPlaybackControlFeature.feature.getter()
{
  return "quick_stop_call_bell";
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.setter in conformance SiriPlaybackControlFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static FeatureToggle.forceEnabled.setter in conformance SydneyConversationFeatureFlags(a1, a2, a3, &one-time initialization token for forceEnabled, &static SiriPlaybackControlFeature.forceEnabled);
}

uint64_t (*protocol witness for static FeatureToggle.forceEnabled.modify in conformance SiriPlaybackControlFeature())()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t *SiriPhoneFeature.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return &static SiriPhoneFeature.forceEnabled;
}

uint64_t static SiriPhoneFeature.forceEnabled.getter()
{
  return static SydneyConversationFeatureFlags.forceEnabled.getter(&one-time initialization token for forceEnabled);
}

uint64_t static SiriPhoneFeature.forceEnabled.setter(uint64_t a1)
{
  return static SydneyConversationFeatureFlags.forceEnabled.setter(a1, &one-time initialization token for forceEnabled, &static SiriPhoneFeature.forceEnabled);
}

uint64_t (*static SiriPhoneFeature.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

const char *SiriPhoneFeature.domain.getter()
{
  return "SiriPhone";
}

const char *SiriPhoneFeature.feature.getter()
{
  return "CancelCallBell";
}

uint64_t static SiriPhoneFeature.== infix(_:_:)()
{
  return 1;
}

void SiriPhoneFeature.hash(into:)()
{
  Hasher._combine(_:)(0);
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.setter in conformance SiriPhoneFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static FeatureToggle.forceEnabled.setter in conformance SydneyConversationFeatureFlags(a1, a2, a3, &one-time initialization token for forceEnabled, &static SiriPhoneFeature.forceEnabled);
}

uint64_t (*protocol witness for static FeatureToggle.forceEnabled.modify in conformance SiriPhoneFeature())()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t *LinkFeature.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return &static LinkFeature.forceEnabled;
}

uint64_t static LinkFeature.forceEnabled.getter()
{
  return static SydneyConversationFeatureFlags.forceEnabled.getter(&one-time initialization token for forceEnabled);
}

uint64_t static SydneyConversationFeatureFlags.forceEnabled.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static LinkFeature.forceEnabled.setter(uint64_t a1)
{
  return static SydneyConversationFeatureFlags.forceEnabled.setter(a1, &one-time initialization token for forceEnabled, &static LinkFeature.forceEnabled);
}

uint64_t static SydneyConversationFeatureFlags.forceEnabled.setter(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  if (*a2 != -1)
    swift_once();
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static LinkFeature.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

const char *LinkFeature.domain.getter()
{
  return "Link";
}

const char *LinkFeature.feature.getter()
{
  return "conditionallyEnabledIntents";
}

uint64_t static LinkFeature.== infix(_:_:)()
{
  return 1;
}

void LinkFeature.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int LinkFeature.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t instantiation function for generic protocol witness table for SydneyConversationFeatureFlags(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SiriKitFlowFeatureFlagDefinitions(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SiriPlaybackControlFeature(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SiriPhoneFeature(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type SiriPhoneFeature and conformance SiriPhoneFeature();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.setter in conformance LinkFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static FeatureToggle.forceEnabled.setter in conformance SydneyConversationFeatureFlags(a1, a2, a3, &one-time initialization token for forceEnabled, &static LinkFeature.forceEnabled);
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.setter in conformance SydneyConversationFeatureFlags(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  if (*a4 != -1)
    swift_once();
  swift_beginAccess();
  *a5 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static FeatureToggle.forceEnabled.modify in conformance LinkFeature())()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

unint64_t instantiation function for generic protocol witness table for LinkFeature(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type LinkFeature and conformance LinkFeature();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of static FeatureToggle.forceEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static FeatureToggle.forceEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static FeatureToggle.forceEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of FeatureToggle.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t storeEnumTagSinglePayload for SydneyConversationFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B4EC19C8 + 4 * byte_1B4EF1945[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B4EC19FC + 4 * byte_1B4EF1940[v4]))();
}

uint64_t sub_1B4EC19FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EC1A04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4EC1A0CLL);
  return result;
}

uint64_t sub_1B4EC1A18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4EC1A20);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B4EC1A24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4EC1A2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SydneyConversationFeatureFlags()
{
  return &type metadata for SydneyConversationFeatureFlags;
}

ValueMetadata *type metadata accessor for SiriKitFlowFeatureFlagDefinitions()
{
  return &type metadata for SiriKitFlowFeatureFlagDefinitions;
}

ValueMetadata *type metadata accessor for SiriPlaybackControlFeature()
{
  return &type metadata for SiriPlaybackControlFeature;
}

ValueMetadata *type metadata accessor for SiriPhoneFeature()
{
  return &type metadata for SiriPhoneFeature;
}

uint64_t storeEnumTagSinglePayload for SiriKitFlowFeatureFlagDefinitions(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4EC1ABC + 4 * byte_1B4EF194A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4EC1ADC + 4 * byte_1B4EF194F[v4]))();
}

_BYTE *sub_1B4EC1ABC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4EC1ADC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4EC1AE4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4EC1AEC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4EC1AF4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4EC1AFC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LinkFeature()
{
  return &type metadata for LinkFeature;
}

SiriKitRuntime::SystemCommandsAffinityScorer __swiftcall SystemCommandsAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::SystemCommandsAffinityScorer result;

  v0 = (void *)0x80000001B4EF6C40;
  v1 = 0xD00000000000002FLL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t *SystemCommandsAffinityScorer.kSupportedIdentifierNamespaces.unsafeMutableAddressor()
{
  if (one-time initialization token for kSupportedIdentifierNamespaces != -1)
    swift_once();
  return &static SystemCommandsAffinityScorer.kSupportedIdentifierNamespaces;
}

uint64_t static SystemCommandsAffinityScorer.kSupportedIdentifierNamespaces.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kSupportedIdentifierNamespaces);
}

void one-time initialization function for kUnsupportedIdentifierValues()
{
  static SystemCommandsAffinityScorer.kUnsupportedIdentifierValues = (uint64_t)&outlined read-only object #0 of one-time initialization function for kUnsupportedIdentifierValues;
}

uint64_t *SystemCommandsAffinityScorer.kUnsupportedIdentifierValues.unsafeMutableAddressor()
{
  if (one-time initialization token for kUnsupportedIdentifierValues != -1)
    swift_once();
  return &static SystemCommandsAffinityScorer.kUnsupportedIdentifierValues;
}

uint64_t static SystemCommandsAffinityScorer.kUnsupportedIdentifierValues.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kUnsupportedIdentifierValues);
}

uint64_t *SystemCommandsAffinityScorer.kHKEntityTypes.unsafeMutableAddressor()
{
  if (one-time initialization token for kHKEntityTypes != -1)
    swift_once();
  return &static SystemCommandsAffinityScorer.kHKEntityTypes;
}

uint64_t static SystemCommandsAffinityScorer.kHKEntityTypes.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kHKEntityTypes);
}

uint64_t *SystemCommandsAffinityScorer.kHAExactNamespaceMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kHAExactNamespaceMatches != -1)
    swift_once();
  return &static SystemCommandsAffinityScorer.kHAExactNamespaceMatches;
}

uint64_t static SystemCommandsAffinityScorer.kHAExactNamespaceMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kHAExactNamespaceMatches);
}

uint64_t one-time initialization function for kCarCommandsExactNamespaceMatches()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kCarCommandsExactNamespaceMatches);
  result = swift_arrayDestroy();
  static SystemCommandsAffinityScorer.kCarCommandsExactNamespaceMatches = v0;
  return result;
}

uint64_t *SystemCommandsAffinityScorer.kCarCommandsExactNamespaceMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kCarCommandsExactNamespaceMatches != -1)
    swift_once();
  return &static SystemCommandsAffinityScorer.kCarCommandsExactNamespaceMatches;
}

uint64_t static SystemCommandsAffinityScorer.kCarCommandsExactNamespaceMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kCarCommandsExactNamespaceMatches);
}

void *SystemCommandsAffinityScorer.kSystemAttributeIdentifierNamespace.unsafeMutableAddressor()
{
  return &static SystemCommandsAffinityScorer.kSystemAttributeIdentifierNamespace;
}

uint64_t static SystemCommandsAffinityScorer.kSystemAttributeIdentifierNamespace.getter()
{
  return 0x74416D6574737973;
}

const char *SystemCommandsAffinityScorer.kSystemCategoryIdentifierNamespace.unsafeMutableAddressor()
{
  return "systemCategory";
}

uint64_t static SystemCommandsAffinityScorer.kSystemCategoryIdentifierNamespace.getter()
{
  return 0x61436D6574737973;
}

const char *SystemCommandsAffinityScorer.kAnswerProductIdentifierNamespace.unsafeMutableAddressor()
{
  return "answerProduct";
}

uint64_t static SystemCommandsAffinityScorer.kAnswerProductIdentifierNamespace.getter()
{
  return 0x7250726577736E61;
}

const char *SystemCommandsAffinityScorer.kSystemCategoryIdentifierScreen.unsafeMutableAddressor()
{
  return "screen";
}

uint64_t static SystemCommandsAffinityScorer.kSystemCategoryIdentifierScreen.getter()
{
  return 0x6E6565726373;
}

const char *SystemCommandsAffinityScorer.kSystemAttributeIdentifierLock.unsafeMutableAddressor()
{
  return "lock";
}

uint64_t static SystemCommandsAffinityScorer.kSystemAttributeIdentifierLock.getter()
{
  return 1801678700;
}

const char *SystemCommandsAffinityScorer.kSystemCategoryIdentifierGuestMode.unsafeMutableAddressor()
{
  return "sharingmode";
}

uint64_t static SystemCommandsAffinityScorer.kSystemCategoryIdentifierGuestMode.getter()
{
  return 0x6D676E6972616873;
}

uint64_t SystemCommandsAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t SystemCommandsAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized SystemCommandsAffinityScorer.score(input:environment:)(a1, a3, a4);
}

uint64_t SystemCommandsAffinityScorer.hasEverywhereUserEntity(usoTask:)()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t i;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v8[3])
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_17;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_ReferenceTrigger<UsoEntity_common_Setting>);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:
    LOBYTE(v1) = 0;
    return v1 & 1;
  }
  v0 = MEMORY[0x1B5E4081C]();
  v1 = v0;
  if (!v0)
  {
    swift_release();
    return v1 & 1;
  }
  v8[0] = MEMORY[0x1E0DEE9D8];
  if (!(v0 >> 62))
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_6;
LABEL_21:
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x1E0DEE9D8];
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    LOBYTE(v1) = specialized Sequence.contains(where:)(v6);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return v1 & 1;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_21;
LABEL_6:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x1B5E43B94](i, v1);
      else
        swift_retain();
      dispatch thunk of CodeGenListEntry.entry.getter();
      v5 = swift_release();
      if (v7)
      {
        MEMORY[0x1B5E43498](v5);
        if (*(_QWORD *)((v8[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v8[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v6 = v8[0];
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t UsoTask.isExpandedSupportedSettingTask.getter()
{
  uint64_t v0;
  _BYTE v2[32];
  _BYTE v3[24];
  uint64_t v4;

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v4)
    goto LABEL_9;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v3, (uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_checkExistence_common_Setting();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_noVerb_common_Setting();
    if (!swift_dynamicCast())
    {
      type metadata accessor for UsoTask_open_common_Setting();
      if (!swift_dynamicCast())
      {
        type metadata accessor for UsoTask_set_common_Setting();
        if (!swift_dynamicCast())
        {
          type metadata accessor for UsoTask_toggle_common_Setting();
          if (!swift_dynamicCast())
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
LABEL_9:
            v0 = 0;
            goto LABEL_10;
          }
        }
      }
    }
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  v0 = 1;
LABEL_10:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v0;
}

uint64_t Siri_Nlu_External_UsoGraph.isIdentifierMatchGuestMode.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v0 = type metadata accessor for Google_Protobuf_StringValue();
  v31 = *(_QWORD *)(v0 - 8);
  v32 = v0;
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v29 - v8;
  v10 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v13 = *(_QWORD *)(v4 + 72);
  v29 = v10;
  v30 = v13;
  v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  swift_bridgeObjectRetain();
  while (1)
  {
    v14(v9, v12, v3);
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    v17 = Google_Protobuf_StringValue.value.getter();
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v2, v32);
    if (v17 == 0x61436D6574737973 && v19 == 0xEE0079726F676574)
    {
      swift_bridgeObjectRelease();
      v14(v7, (unint64_t)v9, v3);
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v14(v7, (unint64_t)v9, v3);
      if ((v20 & 1) == 0)
      {
        v22 = *(void (**)(char *, uint64_t))(v4 + 8);
        v22(v7, v3);
        v22(v9, v3);
        goto LABEL_4;
      }
    }
    if (Siri_Nlu_External_UsoEntityIdentifier.value.getter() == 0x6D676E6972616873 && v21 == 0xEB0000000065646FLL)
      break;
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(char *, uint64_t))(v4 + 8);
    v16(v7, v3);
    v16(v9, v3);
    if ((v15 & 1) != 0)
      goto LABEL_15;
LABEL_4:
    v12 += v30;
    if (!--v11)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  v24 = *(void (**)(char *, uint64_t))(v4 + 8);
  v24(v7, v3);
  v24(v9, v3);
LABEL_15:
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for executor != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    _os_log_impl(&dword_1B4BE6000, v26, v27, "SystemCommandsAffinityScorer | Found guest mode identifier", v28, 2u);
    MEMORY[0x1B5E44758](v28, -1, -1);
  }

  return 1;
}

BOOL closure #1 in SystemCommandsAffinityScorer.hasHKFuzzyMatch(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  BOOL v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  char *v34;
  BOOL v35;
  Swift::Bool v36;
  BOOL v37;
  __int128 v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;

  v47 = a1;
  v1 = type metadata accessor for UsoEntitySpan();
  v43 = *(_QWORD *)(v1 - 8);
  v2 = MEMORY[0x1E0C80A78](v1);
  v44 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v2);
  v45 = (char *)&v39 - v5;
  v6 = MEMORY[0x1E0C80A78](v4);
  v46 = (char *)&v39 - v7;
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v39 - v8;
  v10 = type metadata accessor for IdentifierNamespace();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  v39 = xmmword_1B4EE3F50;
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
  v15 = *MEMORY[0x1E0DA0F58];
  v41 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
  v41(v13, v15, v10);
  v16 = IdentifierNamespace.rawValue.getter();
  v18 = v17;
  v40 = *(void (**)(char *, uint64_t))(v11 + 8);
  v40(v13, v10);
  *(_QWORD *)(inited + 32) = v16;
  *(_QWORD *)(inited + 40) = v18;
  if (*(_QWORD *)(inited + 16))
    v19 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  else
    v19 = MEMORY[0x1E0DEE9E8];
  swift_setDeallocating();
  swift_arrayDestroy();
  v20 = v47;
  v21 = UsoEntitySpan.anyPropertiesKeyMatchAny(value:)(v19);
  swift_bridgeObjectRelease();
  v22 = v43;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  v23(v9, v20, v1);
  if (v21)
  {
    if (one-time initialization token for kHKEntityTypes != -1)
      swift_once();
    v24 = UsoEntitySpan.anyPropertiesValueMatchAny(value:)(static SystemCommandsAffinityScorer.kHKEntityTypes);
  }
  else
  {
    v24 = 0;
  }
  v25 = *(void (**)(char *, uint64_t))(v22 + 8);
  v25(v9, v1);
  v26 = v46;
  v23(v46, v20, v1);
  if (v24)
  {
    v25(v26, v1);
    v27 = v45;
    v23(v45, v20, v1);
    v28 = v44;
  }
  else
  {
    v29 = swift_initStackObject();
    *(_OWORD *)(v29 + 16) = v39;
    v41(v13, *MEMORY[0x1E0DA0F60], v10);
    v30 = IdentifierNamespace.rawValue.getter();
    v32 = v31;
    v40(v13, v10);
    *(_QWORD *)(v29 + 32) = v30;
    *(_QWORD *)(v29 + 40) = v32;
    if (*(_QWORD *)(v29 + 16))
      v33 = specialized Set.init(_nonEmptyArrayLiteral:)(v29);
    else
      v33 = MEMORY[0x1E0DEE9E8];
    v28 = v44;
    v27 = v45;
    swift_setDeallocating();
    swift_arrayDestroy();
    v34 = v46;
    v35 = UsoEntitySpan.anyPropertiesKeyMatchAny(value:)(v33);
    swift_bridgeObjectRelease();
    v25(v34, v1);
    v23(v27, v47, v1);
    if (!v35)
    {
      v37 = 0;
      goto LABEL_20;
    }
  }
  v36 = UsoEntitySpan.hasNLFuzzyMatch()();
  v23(v28, (uint64_t)v27, v1);
  v37 = v36 || UsoEntitySpan.hasVocabFuzzyMatch()();
  v25(v28, v1);
LABEL_20:
  v25(v27, v1);
  return v37;
}

uint64_t specialized SystemCommandsAffinityScorer.hasAssociatedEverywhereUserEntity(userEntity:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t i;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v0 = type metadata accessor for UsoEntity_common_UserEntity.DefinedValues();
  v49 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v40 = (char *)&v39 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_UserEntity.DefinedValues?, UsoEntity_common_UserEntity.DefinedValues?));
  MEMORY[0x1E0C80A78](v48);
  v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v39 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v42 = (uint64_t)&v39 - v12;
  v13 = MEMORY[0x1B5E3FF4C](v11);
  if (!v13)
    return 0;
  v14 = v13;
  v41 = v7;
  v52 = MEMORY[0x1E0DEE9D8];
  if (!(v13 >> 62))
  {
    v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    v47 = v0;
    if (v15)
      goto LABEL_4;
LABEL_17:
    swift_bridgeObjectRelease();
    v19 = MEMORY[0x1E0DEE9D8];
LABEL_18:
    swift_bridgeObjectRelease();
    v21 = v42;
    if (v19 >> 62)
      goto LABEL_40;
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v20; v20 = _CocoaArrayWrapper.endIndex.getter())
    {
      v46 = v19 & 0xC000000000000001;
      v45 = *MEMORY[0x1E0DA01B0];
      v22 = 4;
      v23 = &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?;
      v43 = v20;
      v44 = v19;
      while (1)
      {
        v25 = v22 - 4;
        if (!v46)
          break;
        v26 = MEMORY[0x1B5E43B94](v22 - 4, v19);
        v27 = v22 - 3;
        if (__OFADD__(v25, 1))
          goto LABEL_39;
LABEL_29:
        v50 = v26;
        MEMORY[0x1B5E3FF58]();
        v28 = v49;
        v29 = v47;
        (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v10, v45, v47);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v10, 0, 1, v29);
        v30 = (uint64_t)&v3[*(int *)(v48 + 48)];
        v31 = v23;
        outlined init with copy of ReferenceResolutionClientProtocol?(v21, (uint64_t)v3, v23);
        outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v10, v30, v23);
        v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
        if (v32((uint64_t)v3, 1, v29) == 1)
        {
          v24 = v32(v30, 1, v29);
          v19 = v44;
          if (v24 == 1)
          {
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
            outlined destroy of ReferenceResolutionClientProtocol?(v21, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
            swift_release();
LABEL_36:
            v20 = 1;
            goto LABEL_37;
          }
          goto LABEL_22;
        }
        v33 = (uint64_t)v10;
        v34 = (uint64_t)v41;
        outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v3, (uint64_t)v41, v23);
        if (v32(v30, 1, v29) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v34, v29);
          v10 = (char *)v33;
          v21 = v42;
          v19 = v44;
LABEL_22:
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, &demangling cache variable for type metadata for (UsoEntity_common_UserEntity.DefinedValues?, UsoEntity_common_UserEntity.DefinedValues?));
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, v23);
          outlined destroy of ReferenceResolutionClientProtocol?(v21, v23);
          swift_release();
          goto LABEL_23;
        }
        v35 = v49;
        v36 = v40;
        (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v40, v30, v29);
        lazy protocol witness table accessor for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues();
        v37 = dispatch thunk of static Equatable.== infix(_:_:)();
        v38 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
        v38(v34, v29);
        v38((uint64_t)v36, v29);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, v31);
        v10 = (char *)v33;
        outlined destroy of ReferenceResolutionClientProtocol?(v33, v31);
        v21 = v42;
        outlined destroy of ReferenceResolutionClientProtocol?(v42, v31);
        swift_release();
        v19 = v44;
        v23 = v31;
        if ((v37 & 1) != 0)
          goto LABEL_36;
LABEL_23:
        ++v22;
        if (v27 == v43)
        {
          v20 = 0;
          goto LABEL_37;
        }
      }
      v26 = swift_retain();
      v27 = v22 - 3;
      if (!__OFADD__(v25, 1))
        goto LABEL_29;
LABEL_39:
      __break(1u);
LABEL_40:
      swift_bridgeObjectRetain();
    }
LABEL_37:
    swift_bridgeObjectRelease_n();
    return v20;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v15 = result;
  v47 = v0;
  if (!result)
    goto LABEL_17;
LABEL_4:
  if (v15 >= 1)
  {
    for (i = 0; i != v15; ++i)
    {
      if ((v14 & 0xC000000000000001) != 0)
        MEMORY[0x1B5E43B94](i, v14);
      else
        swift_retain();
      dispatch thunk of CodeGenListEntry.entry.getter();
      v18 = swift_release();
      if (v51)
      {
        MEMORY[0x1B5E43498](v18);
        if (*(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v19 = v52;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      v3 = 4;
      while (1)
      {
        v4 = v3 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1B5E43B94](v3 - 4, a1);
          v5 = v3 - 3;
          if (__OFADD__(v4, 1))
            goto LABEL_12;
        }
        else
        {
          swift_retain();
          v5 = v3 - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_12:
            __break(1u);
            goto LABEL_13;
          }
        }
        v6 = specialized SystemCommandsAffinityScorer.hasAssociatedEverywhereUserEntity(userEntity:)();
        swift_release();
        if ((v6 & 1) == 0)
        {
          ++v3;
          if (v5 != v2)
            continue;
        }
        goto LABEL_15;
      }
    }
  }
  v6 = 0;
LABEL_15:
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t specialized SystemCommandsAffinityScorer.isIdentifierMatchScreen(on:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v0 = type metadata accessor for Google_Protobuf_StringValue();
  v31 = *(_QWORD *)(v0 - 8);
  v32 = v0;
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v29 - v8;
  v10 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = v10 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v13 = *(_QWORD *)(v4 + 72);
  v29 = v10;
  v30 = v13;
  v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  swift_bridgeObjectRetain();
  while (1)
  {
    v14(v9, v12, v3);
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    v17 = Google_Protobuf_StringValue.value.getter();
    v19 = v18;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v2, v32);
    if (v17 == 0x61436D6574737973 && v19 == 0xEE0079726F676574)
    {
      swift_bridgeObjectRelease();
      v14(v7, (unint64_t)v9, v3);
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v14(v7, (unint64_t)v9, v3);
      if ((v20 & 1) == 0)
      {
        v22 = *(void (**)(char *, uint64_t))(v4 + 8);
        v22(v7, v3);
        v22(v9, v3);
        goto LABEL_4;
      }
    }
    if (Siri_Nlu_External_UsoEntityIdentifier.value.getter() == 0x6E6565726373 && v21 == 0xE600000000000000)
      break;
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(char *, uint64_t))(v4 + 8);
    v16(v7, v3);
    v16(v9, v3);
    if ((v15 & 1) != 0)
      goto LABEL_15;
LABEL_4:
    v12 += v30;
    if (!--v11)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  v24 = *(void (**)(char *, uint64_t))(v4 + 8);
  v24(v7, v3);
  v24(v9, v3);
LABEL_15:
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for executor != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    _os_log_impl(&dword_1B4BE6000, v26, v27, "SystemCommandsAffinityScorer | Found screen identifier", v28, 2u);
    MEMORY[0x1B5E44758](v28, -1, -1);
  }

  return 1;
}

uint64_t specialized SystemCommandsAffinityScorer.isIdentifierMatchAnswerProduct(on:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;

  v0 = type metadata accessor for Google_Protobuf_StringValue();
  v22 = *(_QWORD *)(v0 - 8);
  v23 = v0;
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = v7 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v10 = *(_QWORD *)(v4 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    v21[1] = v7;
    swift_bridgeObjectRetain();
    while (1)
    {
      v11(v6, v9, v3);
      Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
      v12 = Google_Protobuf_StringValue.value.getter();
      v14 = v13;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v2, v23);
      if (v12 == 0x7250726577736E61 && v14 == 0xED0000746375646FLL)
        break;
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if ((v15 & 1) != 0)
        goto LABEL_11;
      v9 += v10;
      if (!--v8)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
LABEL_11:
    swift_bridgeObjectRelease_n();
    if (one-time initialization token for executor != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1B4BE6000, v18, v19, "SystemCommandsAffinityScorer | Found answerProduct identifier", v20, 2u);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }

    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

BOOL specialized SystemCommandsAffinityScorer.hasHKExactMatch(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t inited;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int *v53;
  Swift::Int v54;
  Swift::Int v55;
  char v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  BOOL v59;
  char *v60;
  void (*v61)(char *, uint64_t);
  Swift::Bool v62;
  uint64_t v63;
  int64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  void (*v68)(char *, unint64_t, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Swift::Int *v79;
  Swift::Int v80;
  Swift::Int v81;
  char v82;
  char *v83;
  Swift::Bool v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  __int128 v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  void (*v117)(char *, uint64_t);
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, char *, uint64_t);
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v2 = type metadata accessor for SpanProperty();
  v3 = *(_QWORD *)(v2 - 8);
  v123 = v2;
  v124 = v3;
  MEMORY[0x1E0C80A78](v2);
  v122 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for IdentifierNamespace();
  v111 = *(_QWORD *)(v112 - 8);
  MEMORY[0x1E0C80A78](v112);
  v110 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UsoEntitySpan();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v97 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v109 = (char *)&v97 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v108 = (char *)&v97 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v97 - v18;
  v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  v20 = MEMORY[0x1E0C80A78](v99);
  v98 = (uint64_t)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v100 = (uint64_t)&v97 - v23;
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v97 - v24;
  v26 = *(_QWORD *)(a1 + 16);
  v116 = v6;
  v107 = v26;
  v101 = (char *)&v97 - v24;
  if (!v26)
  {
    v85 = 1;
    goto LABEL_49;
  }
  v106 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v105 = *MEMORY[0x1E0DA0F58];
  v104 = *(_QWORD *)(v7 + 72);
  v113 = v7;
  v27 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v97 = a1;
  swift_bridgeObjectRetain();
  v28 = 0;
  v103 = xmmword_1B4EE3F50;
  v115 = v13;
  v102 = v10;
  v120 = v27;
  v121 = v19;
  while (1)
  {
    v118 = v28;
    v27(v19, (char *)(v106 + v104 * v28), v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v103;
    v31 = v111;
    v32 = v110;
    v33 = v112;
    (*(void (**)(char *, _QWORD, uint64_t))(v111 + 104))(v110, v105, v112);
    v34 = IdentifierNamespace.rawValue.getter();
    v36 = v35;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
    *(_QWORD *)(inited + 32) = v34;
    *(_QWORD *)(inited + 40) = v36;
    v119 = *(_QWORD *)(inited + 16) ? specialized Set.init(_nonEmptyArrayLiteral:)(inited) : MEMORY[0x1E0DEE9E8];
    swift_setDeallocating();
    swift_arrayDestroy();
    v37 = UsoEntitySpan.properties.getter();
    v38 = *(_QWORD *)(v37 + 16);
    if (v38)
    {
      v125 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
      v39 = (*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80);
      v117 = (void (*)(char *, uint64_t))v37;
      v40 = v37 + v39;
      v41 = *(_QWORD *)(v124 + 72);
      v42 = *(void (**)(char *, unint64_t, uint64_t))(v124 + 16);
      do
      {
        v43 = v122;
        v44 = v123;
        v42(v122, v40, v123);
        v45 = SpanProperty.key.getter();
        v47 = v46;
        (*(void (**)(char *, uint64_t))(v124 + 8))(v43, v44);
        v48 = v125;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v48 + 16) + 1, 1);
          v48 = v125;
        }
        v50 = *(_QWORD *)(v48 + 16);
        v49 = *(_QWORD *)(v48 + 24);
        if (v50 >= v49 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
          v48 = v125;
        }
        *(_QWORD *)(v48 + 16) = v50 + 1;
        v51 = v48 + 16 * v50;
        *(_QWORD *)(v51 + 32) = v45;
        *(_QWORD *)(v51 + 40) = v47;
        v40 += v41;
        --v38;
      }
      while (v38);
      swift_bridgeObjectRelease();
      v13 = v115;
      v6 = v116;
    }
    else
    {
      swift_bridgeObjectRelease();
      v48 = MEMORY[0x1E0DEE9D8];
    }
    v126 = Set.init(minimumCapacity:)();
    v52 = *(_QWORD *)(v48 + 16);
    v19 = v121;
    if (v52)
    {
      v53 = (Swift::Int *)(v48 + 40);
      do
      {
        v54 = *(v53 - 1);
        v55 = *v53;
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v125, v54, v55);
        swift_bridgeObjectRelease();
        v53 += 2;
        --v52;
      }
      while (v52);
    }
    swift_bridgeObjectRelease();
    v56 = specialized Set.isDisjoint(with:)(v126, v119);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v57 = v108;
    v58 = v120;
    v120(v108, v19, v6);
    if ((v56 & 1) != 0)
    {
      v59 = 0;
      v60 = v109;
    }
    else
    {
      v60 = v109;
      if (one-time initialization token for kHKEntityTypes != -1)
        swift_once();
      v59 = UsoEntitySpan.anyPropertiesValueMatchAny(value:)(static SystemCommandsAffinityScorer.kHKEntityTypes);
    }
    v61 = *(void (**)(char *, uint64_t))(v113 + 8);
    v61(v57, v6);
    v58(v60, v19, v6);
    if (v59)
      break;
    v61(v60, v6);
    v58(v13, v19, v6);
LABEL_29:
    if (one-time initialization token for kHAExactNamespaceMatches != -1)
      swift_once();
    v119 = static SystemCommandsAffinityScorer.kHAExactNamespaceMatches;
    v63 = UsoEntitySpan.properties.getter();
    v64 = *(_QWORD *)(v63 + 16);
    v117 = v61;
    if (v64)
    {
      v125 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64, 0);
      v65 = (*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80);
      v114 = v63;
      v66 = v63 + v65;
      v67 = *(_QWORD *)(v124 + 72);
      v68 = *(void (**)(char *, unint64_t, uint64_t))(v124 + 16);
      do
      {
        v69 = v122;
        v70 = v123;
        v68(v122, v66, v123);
        v71 = SpanProperty.key.getter();
        v73 = v72;
        (*(void (**)(char *, uint64_t))(v124 + 8))(v69, v70);
        v74 = v125;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v74 + 16) + 1, 1);
          v74 = v125;
        }
        v76 = *(_QWORD *)(v74 + 16);
        v75 = *(_QWORD *)(v74 + 24);
        if (v76 >= v75 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v75 > 1, v76 + 1, 1);
          v74 = v125;
        }
        *(_QWORD *)(v74 + 16) = v76 + 1;
        v77 = v74 + 16 * v76;
        *(_QWORD *)(v77 + 32) = v71;
        *(_QWORD *)(v77 + 40) = v73;
        v66 += v67;
        --v64;
      }
      while (v64);
      swift_bridgeObjectRelease();
      v13 = v115;
      v6 = v116;
    }
    else
    {
      swift_bridgeObjectRelease();
      v74 = MEMORY[0x1E0DEE9D8];
    }
    v126 = Set.init(minimumCapacity:)();
    v78 = *(_QWORD *)(v74 + 16);
    v19 = v121;
    if (v78)
    {
      v79 = (Swift::Int *)(v74 + 40);
      do
      {
        v80 = *(v79 - 1);
        v81 = *v79;
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v125, v80, v81);
        swift_bridgeObjectRelease();
        v79 += 2;
        --v78;
      }
      while (v78);
    }
    swift_bridgeObjectRelease();
    v82 = specialized Set.isDisjoint(with:)(v126, v119);
    swift_bridgeObjectRelease();
    v83 = v102;
    v27 = v120;
    v120(v102, v13, v6);
    if ((v82 & 1) != 0)
    {
      v29 = v117;
      v117(v83, v6);
      v29(v13, v6);
    }
    else
    {
      v84 = UsoEntitySpan.isAttachmentFull()();
      v29 = v117;
      v117(v83, v6);
      v29(v13, v6);
      if (v84)
        goto LABEL_48;
    }
    v28 = v118 + 1;
    v29(v19, v6);
    if (v28 == v107)
    {
      swift_bridgeObjectRelease();
      v85 = 1;
      v7 = v113;
      v25 = v101;
      goto LABEL_49;
    }
  }
  v62 = UsoEntitySpan.hasExactMatch()();
  v61(v60, v6);
  v58(v13, v19, v6);
  if (!v62)
    goto LABEL_29;
  v61(v13, v6);
LABEL_48:
  swift_bridgeObjectRelease();
  v7 = v113;
  v25 = v101;
  (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v101, v19, v6);
  v85 = 0;
LABEL_49:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v25, v85, 1, v6);
  if (one-time initialization token for executor != -1)
    swift_once();
  v86 = type metadata accessor for Logger();
  __swift_project_value_buffer(v86, (uint64_t)static Logger.executor);
  v87 = v100;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v25, v100, &demangling cache variable for type metadata for UsoEntitySpan?);
  v88 = Logger.logObject.getter();
  v89 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v88, v89))
  {
    v90 = (uint8_t *)swift_slowAlloc();
    v91 = swift_slowAlloc();
    v125 = v91;
    *(_DWORD *)v90 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v87, v98, &demangling cache variable for type metadata for UsoEntitySpan?);
    v92 = String.init<A>(describing:)();
    v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, &v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v6 = v116;
    outlined destroy of ReferenceResolutionClientProtocol?(v87, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B4BE6000, v88, v89, "HomeAutomationAffinityScorer - Found HomeKitSpan with ExactMatch %s", v90, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v91, -1, -1);
    MEMORY[0x1B5E44758](v90, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v87, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  v94 = (uint64_t)v101;
  v95 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v101, 1, v6) != 1;
  outlined destroy of ReferenceResolutionClientProtocol?(v94, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v95;
}

BOOL specialized SystemCommandsAffinityScorer.hasHKFuzzyMatch(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BOOL8 v25;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = type metadata accessor for UsoEntitySpan();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  v6 = MEMORY[0x1E0C80A78](v29);
  v28 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (uint8_t *)&v27 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v27 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v27 = v10;
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v15 = *(_QWORD *)(v3 + 72);
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v16(v5, v14, v2);
      if (closure #1 in SystemCommandsAffinityScorer.hasHKFuzzyMatch(_:)((uint64_t)v5))
        break;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v14 += v15;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        v17 = 1;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v12, v5, v2);
    v17 = 0;
LABEL_8:
    v10 = v27;
  }
  else
  {
    v17 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v12, v17, 1, v2);
  if (one-time initialization token for executor != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t)v10, &demangling cache variable for type metadata for UsoEntitySpan?);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v31 = v22;
    *(_DWORD *)v21 = 136315138;
    v27 = v21 + 4;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v10, v28, &demangling cache variable for type metadata for UsoEntitySpan?);
    v23 = String.init<A>(describing:)();
    v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B4BE6000, v19, v20, "HomeAutomationAffinityScorer - Found HomeKitSpan with FuzzyMatch %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v22, -1, -1);
    MEMORY[0x1B5E44758](v21, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  v25 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) != 1;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v25;
}

uint64_t specialized SystemCommandsAffinityScorer.isIdentifierMatchCarCommands(on:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v0 = type metadata accessor for Google_Protobuf_StringValue();
  v23 = *(_QWORD *)(v0 - 8);
  v24 = v0;
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = v7 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v10 = *(_QWORD *)(v4 + 72);
    v21 = v7;
    v22 = v10;
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v11(v6, v9, v3);
      if (one-time initialization token for kCarCommandsExactNamespaceMatches != -1)
        swift_once();
      v12 = static SystemCommandsAffinityScorer.kCarCommandsExactNamespaceMatches;
      Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
      v13 = Google_Protobuf_StringValue.value.getter();
      v15 = v14;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v2, v24);
      LOBYTE(v13) = specialized Set.contains(_:)(v13, v15, v12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if ((v13 & 1) != 0)
        break;
      v9 += v22;
      if (!--v8)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease_n();
    if (one-time initialization token for executor != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1B4BE6000, v17, v18, "SystemCommandsAffinityScorer | Found car commands identifier", v19, 2u);
      MEMORY[0x1B5E44758](v19, -1, -1);
    }

    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t specialized SystemCommandsAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void (*v47)(char *, unint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char matched;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  char *v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  void (*v116)(char *, uint64_t);
  char *v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(char *, char *, uint64_t);
  char *v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  uint64_t v139;
  unint64_t v140;
  void (*v141)(char *, uint64_t);
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  NSObject *v146;
  os_log_type_t v147;
  uint8_t *v148;
  uint8_t *v149;
  void (*v150)(char *, uint64_t);
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  NSObject *v154;
  os_log_type_t v155;
  uint8_t *v156;
  const char *v157;
  uint64_t v158;
  uint8_t *v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(char *, char *, uint64_t);
  NSObject *v163;
  char *v164;
  os_log_type_t v165;
  uint8_t *v166;
  uint64_t v167;
  unint64_t v168;
  void (*v169)(char *, uint64_t);
  char *v170;
  void (*v171)(char *, uint64_t);
  unint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200[2];

  v175 = a3;
  v174 = a2;
  v3 = type metadata accessor for Google_Protobuf_StringValue();
  v188 = *(_QWORD *)(v3 - 8);
  v189 = v3;
  MEMORY[0x1E0C80A78](v3);
  v187 = (char *)&v172 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  MEMORY[0x1E0C80A78](v5);
  v178 = (char *)&v172 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v191 = *(_QWORD *)(v194 - 8);
  v7 = MEMORY[0x1E0C80A78](v194);
  v197 = (char *)&v172 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v176 = (char *)&v172 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v177 = (char *)&v172 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v186 = (char *)&v172 - v14;
  MEMORY[0x1E0C80A78](v13);
  v179 = (char *)&v172 - v15;
  v16 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v184 = *(_QWORD *)(v16 - 8);
  v185 = v16;
  MEMORY[0x1E0C80A78](v16);
  v183 = (char *)&v172 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v198 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v172 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Siri_Nlu_External_UserParse();
  v192 = *(_QWORD *)(v21 - 8);
  v193 = v21;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v172 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v24);
  v196 = (char *)&v172 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v182 = *(_QWORD *)(v195 - 8);
  v26 = MEMORY[0x1E0C80A78](v195);
  v181 = (char *)&v172 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v180 = (char *)&v172 - v29;
  MEMORY[0x1E0C80A78](v28);
  v190 = (char *)&v172 - v30;
  v31 = type metadata accessor for USOParse();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v172 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for Parse();
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v38 = (char *)&v172 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v36 + 88))(v38, v35) != *MEMORY[0x1E0D9C678])
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.executor);
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_1B4BE6000, v51, v52, "SystemCommandsAffinityScorer | Got unexpected parse", v53, 2u);
      MEMORY[0x1B5E44758](v53, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
    return 1;
  }
  (*(void (**)(char *, uint64_t))(v36 + 96))(v38, v35);
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v34, v38, v31);
  v39 = specialized static AffinityScorerUtils.getTask(_:)();
  if (!v39)
  {
    if (one-time initialization token for executor != -1)
      goto LABEL_122;
    goto LABEL_15;
  }
  v40 = v39;
  v41 = USOParse.userParse.getter();
  v42 = MEMORY[0x1B5E3FA6C](v41);
  (*(void (**)(char *, uint64_t))(v192 + 8))(v23, v193);
  v43 = *(_QWORD *)(v42 + 16);
  v173 = v34;
  if (v43)
  {
    v193 = v32;
    v44 = v31;
    v45 = v42 + ((*(unsigned __int8 *)(v198 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80));
    v46 = *(_QWORD *)(v198 + 72);
    v47 = *(void (**)(char *, unint64_t, uint64_t))(v198 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v47(v20, v45, v18);
      if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
        break;
      v48 = v198;
      (*(void (**)(char *, uint64_t))(v198 + 8))(v20, v18);
      v45 += v46;
      if (!--v43)
      {
        swift_bridgeObjectRelease();
        v49 = 1;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
    v48 = v198;
    (*(void (**)(char *, char *, uint64_t))(v198 + 32))(v196, v20, v18);
    v49 = 0;
LABEL_19:
    v31 = v44;
    v34 = v173;
    v32 = v193;
  }
  else
  {
    v49 = 1;
    v48 = v198;
  }
  v59 = (uint64_t)v196;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v196, v49, 1, v18);
  swift_bridgeObjectRelease();
  v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v59, 1, v18);
  v61 = v195;
  v62 = v197;
  if (v60 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v59, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v63 = type metadata accessor for Logger();
    __swift_project_value_buffer(v63, (uint64_t)static Logger.executor);
    v56 = Logger.logObject.getter();
    v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v65 = 0;
      _os_log_impl(&dword_1B4BE6000, v56, v64, "SystemCommandsAffinityScorer | Could not extract userStatedTask", v65, 2u);
      MEMORY[0x1B5E44758](v65, -1, -1);
    }
    swift_release();
    goto LABEL_26;
  }
  v66 = v32;
  v67 = v40;
  v68 = v183;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v59, v18);
  v69 = v180;
  Siri_Nlu_External_UserStatedTask.task.getter();
  v70 = v68;
  v71 = v67;
  (*(void (**)(char *, uint64_t))(v184 + 8))(v70, v185);
  v72 = v182;
  v73 = v190;
  (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v190, v69, v61);
  LOBYTE(v69) = UsoTask.isExpandedSupportedSettingTask.getter();
  v74 = v181;
  (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v181, v73, v61);
  if ((v69 & 1) != 0)
  {
    matched = Siri_Nlu_External_UsoGraph.isIdentifierMatchGuestMode.getter();
    v198 = *(_QWORD *)(v72 + 8);
    ((void (*)(char *, uint64_t))v198)(v74, v61);
    v76 = v194;
    if ((matched & 1) == 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v77 = type metadata accessor for Logger();
      __swift_project_value_buffer(v77, (uint64_t)static Logger.executor);
      swift_retain_n();
      v78 = Logger.logObject.getter();
      v79 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v78, v79))
      {
        v80 = (uint8_t *)swift_slowAlloc();
        v81 = swift_slowAlloc();
        v193 = v66;
        v82 = v81;
        v200[0] = v81;
        *(_DWORD *)v80 = 136315138;
        v83 = UsoTask.verbString.getter();
        v199 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v78, v79, "SystemCommandsAffinityScorer | found unsuported setting task %s", v80, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v82, -1, -1);
        MEMORY[0x1B5E44758](v80, -1, -1);
        swift_release();

        ((void (*)(char *, uint64_t))v198)(v73, v195);
        (*(void (**)(char *, uint64_t))(v193 + 8))(v173, v31);
      }
      else
      {
        swift_release_n();

        ((void (*)(char *, uint64_t))v198)(v73, v195);
        (*(void (**)(char *, uint64_t))(v66 + 8))(v173, v31);
      }
      return 0;
    }
  }
  else
  {
    v198 = *(_QWORD *)(v72 + 8);
    ((void (*)(char *, uint64_t))v198)(v74, v61);
    v76 = v194;
  }
  v85 = v66;
  if ((specialized SystemCommandsAffinityScorer.isIdentifierMatchLock(on:)() & 1) != 0)
  {
    v86 = specialized SystemCommandsAffinityScorer.isIdentifierMatchScreen(on:)();
    v87 = v173;
    if ((v86 & 1) != 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v88 = type metadata accessor for Logger();
      __swift_project_value_buffer(v88, (uint64_t)static Logger.executor);
      v89 = Logger.logObject.getter();
      v90 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v89, v90))
      {
        v91 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v91 = 0;
        _os_log_impl(&dword_1B4BE6000, v89, v90, "SystemCommandsAffinityScorer | providing override score for 'lock screen' task", v91, 2u);
        MEMORY[0x1B5E44758](v91, -1, -1);
      }
      swift_release();

      ((void (*)(char *, uint64_t))v198)(v73, v61);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v31);
      return 4;
    }
    if ((specialized SystemCommandsAffinityScorer.isIdentifierMatchAnswerProduct(on:)() & 1) != 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v112 = type metadata accessor for Logger();
      __swift_project_value_buffer(v112, (uint64_t)static Logger.executor);
      v113 = Logger.logObject.getter();
      v114 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v113, v114))
      {
        v115 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v115 = 0;
        _os_log_impl(&dword_1B4BE6000, v113, v114, "SystemCommandsAffinityScorer | providing high score for lock product task", v115, 2u);
        MEMORY[0x1B5E44758](v115, -1, -1);
      }
      swift_release();

      ((void (*)(char *, uint64_t))v198)(v73, v61);
      v116 = *(void (**)(char *, uint64_t))(v85 + 8);
      v117 = v87;
      v118 = v31;
LABEL_76:
      v116(v117, v118);
      return 3;
    }
    if (one-time initialization token for executor != -1)
      swift_once();
    v119 = type metadata accessor for Logger();
    __swift_project_value_buffer(v119, (uint64_t)static Logger.executor);
    v120 = Logger.logObject.getter();
    v121 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v120, v121))
    {
      v122 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v122 = 0;
      _os_log_impl(&dword_1B4BE6000, v120, v121, "SystemCommandsAffinityScorer | providing default score for ambiguous lock task", v122, 2u);
      MEMORY[0x1B5E44758](v122, -1, -1);
    }
    swift_release();

    ((void (*)(char *, uint64_t))v198)(v73, v61);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v31);
    return 2;
  }
  v184 = v31;
  v92 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  v93 = v173;
  v185 = *(_QWORD *)(v92 + 16);
  if (!v185)
  {
    v111 = 1;
    v98 = v191;
    v110 = v178;
LABEL_86:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v110, v111, 1, v76);
    swift_bridgeObjectRelease();
    v123 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v98 + 48))(v110, 1, v76);
    v124 = (uint64_t)v110;
    v125 = v184;
    v126 = v179;
    if (v123 == 1)
    {
      swift_release();
      ((void (*)(char *, uint64_t))v198)(v73, v195);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v93, v125);
      outlined destroy of ReferenceResolutionClientProtocol?(v124, &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
      return 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v179, v124, v76);
    if (one-time initialization token for kUnsupportedIdentifierValues != -1)
      swift_once();
    v127 = (_QWORD *)static SystemCommandsAffinityScorer.kUnsupportedIdentifierValues;
    swift_bridgeObjectRetain();
    v128 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
    v130 = specialized Sequence<>.contains(_:)(v128, v129, v127);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v130 & 1) != 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v131 = type metadata accessor for Logger();
      __swift_project_value_buffer(v131, (uint64_t)static Logger.executor);
      v132 = v191;
      v133 = *(void (**)(char *, char *, uint64_t))(v191 + 16);
      v134 = v177;
      v135 = v194;
      v133(v177, v179, v194);
      v136 = Logger.logObject.getter();
      v137 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v136, v137))
      {
        v138 = (uint8_t *)swift_slowAlloc();
        v197 = (char *)swift_slowAlloc();
        v200[0] = (uint64_t)v197;
        v172 = v71;
        v193 = v85;
        *(_DWORD *)v138 = 136315138;
        v133(v176, v134, v135);
        v139 = String.init<A>(describing:)();
        v199 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v139, v140, v200);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v141 = *(void (**)(char *, uint64_t))(v132 + 8);
        v141(v134, v135);
        _os_log_impl(&dword_1B4BE6000, v136, v137, "SystemCommandsAffinityScorer | found unsupported identifier %s", v138, 0xCu);
        v142 = v197;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v142, -1, -1);
        MEMORY[0x1B5E44758](v138, -1, -1);
        swift_release();

        v141(v179, v135);
        ((void (*)(char *, uint64_t))v198)(v190, v195);
        (*(void (**)(char *, uint64_t))(v193 + 8))(v173, v184);
      }
      else
      {
        swift_release();

        v150 = *(void (**)(char *, uint64_t))(v132 + 8);
        v150(v134, v135);
        v150(v179, v135);
        ((void (*)(char *, uint64_t))v198)(v73, v195);
        (*(void (**)(char *, uint64_t))(v85 + 8))(v93, v184);
      }
      return 0;
    }
    v143 = specialized static AffinityScorerUtils.getEntitySpans(_:)();
    if (specialized SystemCommandsAffinityScorer.hasHKExactMatch(_:)(v143)
      || (SystemCommandsAffinityScorer.hasEverywhereUserEntity(usoTask:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v144 = v194;
      if (one-time initialization token for executor != -1)
        swift_once();
      v145 = type metadata accessor for Logger();
      __swift_project_value_buffer(v145, (uint64_t)static Logger.executor);
      v146 = Logger.logObject.getter();
      v147 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v146, v147))
      {
        v148 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v148 = 0;
        _os_log_impl(&dword_1B4BE6000, v146, v147, "SystemCommandsAffinityScorer | found full match with HomeKit entity or everywhere, returning .low", v148, 2u);
        v149 = v148;
        v144 = v194;
        MEMORY[0x1B5E44758](v149, -1, -1);
      }
      swift_release();

      (*(void (**)(char *, uint64_t))(v191 + 8))(v126, v144);
      ((void (*)(char *, uint64_t))v198)(v73, v195);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v93, v125);
      return 1;
    }
    v151 = specialized SystemCommandsAffinityScorer.hasHKFuzzyMatch(_:)(v143);
    swift_bridgeObjectRelease();
    v152 = v194;
    if (v151)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v153 = type metadata accessor for Logger();
      __swift_project_value_buffer(v153, (uint64_t)static Logger.executor);
      v154 = Logger.logObject.getter();
      v155 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v154, v155))
        goto LABEL_114;
      v156 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v156 = 0;
      v157 = "SystemCommandsAffinityScorer | found fuzzy match with HomeKit entity, returning .default";
    }
    else
    {
      if ((specialized SystemCommandsAffinityScorer.isIdentifierMatchCarCommands(on:)() & 1) == 0)
      {
        if (one-time initialization token for executor != -1)
          swift_once();
        v160 = type metadata accessor for Logger();
        __swift_project_value_buffer(v160, (uint64_t)static Logger.executor);
        v161 = v191;
        v162 = *(void (**)(char *, char *, uint64_t))(v191 + 16);
        v162(v62, v179, v152);
        v163 = Logger.logObject.getter();
        v164 = v62;
        v165 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v163, v165))
        {
          v166 = (uint8_t *)swift_slowAlloc();
          v197 = (char *)swift_slowAlloc();
          v200[0] = (uint64_t)v197;
          v172 = v71;
          v193 = v85;
          *(_DWORD *)v166 = 136315138;
          v162(v176, v164, v152);
          v167 = String.init<A>(describing:)();
          v199 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v168, v200);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v169 = *(void (**)(char *, uint64_t))(v161 + 8);
          v169(v164, v152);
          _os_log_impl(&dword_1B4BE6000, v163, v165, "SystemCommandsAffinityScorer | Found matching identifier %s", v166, 0xCu);
          v170 = v197;
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v170, -1, -1);
          MEMORY[0x1B5E44758](v166, -1, -1);
          swift_release();

          v169(v179, v152);
          ((void (*)(char *, uint64_t))v198)(v190, v195);
          v116 = *(void (**)(char *, uint64_t))(v193 + 8);
          v117 = v173;
        }
        else
        {
          swift_release();

          v171 = *(void (**)(char *, uint64_t))(v161 + 8);
          v171(v164, v152);
          v171(v179, v152);
          ((void (*)(char *, uint64_t))v198)(v73, v195);
          v116 = *(void (**)(char *, uint64_t))(v85 + 8);
          v117 = v93;
        }
        v118 = v184;
        goto LABEL_76;
      }
      if (one-time initialization token for executor != -1)
        swift_once();
      v158 = type metadata accessor for Logger();
      __swift_project_value_buffer(v158, (uint64_t)static Logger.executor);
      v154 = Logger.logObject.getter();
      v155 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v154, v155))
        goto LABEL_114;
      v156 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v156 = 0;
      v157 = "SystemCommandsAffinityScorer | found a car commands identifier, returning .default";
    }
    _os_log_impl(&dword_1B4BE6000, v154, v155, v157, v156, 2u);
    v159 = v156;
    v152 = v194;
    MEMORY[0x1B5E44758](v159, -1, -1);
LABEL_114:
    swift_release();

    (*(void (**)(char *, uint64_t))(v191 + 8))(v126, v152);
    ((void (*)(char *, uint64_t))v198)(v73, v195);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v93, v125);
    return 2;
  }
  v196 = (char *)(v92 + ((*(unsigned __int8 *)(v191 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80)));
  v94 = *(_QWORD *)(v191 + 72);
  v192 = *(_QWORD *)(v191 + 16);
  v193 = v94;
  v183 = (char *)v92;
  swift_bridgeObjectRetain();
  v95 = 0;
  v96 = v71;
  v97 = v186;
  v172 = v96;
  while (1)
  {
    v31 = v85;
    v100 = v93;
    ((void (*)(char *, char *, uint64_t))v192)(v97, &v196[v193 * v95], v76);
    if (one-time initialization token for kSupportedIdentifierNamespaces != -1)
      swift_once();
    v32 = static SystemCommandsAffinityScorer.kSupportedIdentifierNamespaces;
    swift_bridgeObjectRetain();
    v101 = v187;
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    v34 = (char *)Google_Protobuf_StringValue.value.getter();
    v103 = v102;
    (*(void (**)(char *, uint64_t))(v188 + 8))(v101, v189);
    v104 = *(_QWORD *)(v32 + 16);
    if (!v104)
    {
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
    v105 = *(char **)(v32 + 32) == v34 && *(_QWORD *)(v32 + 40) == v103;
    if (v105 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_69:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v98 = v191;
      v110 = v178;
      v76 = v194;
      (*(void (**)(char *, char *, uint64_t))(v191 + 32))(v178, v186, v194);
      v111 = 0;
      v93 = v100;
      v85 = v31;
      v73 = v190;
      v71 = v172;
      v62 = v197;
      goto LABEL_86;
    }
    if (v104 != 1)
    {
      if (*(char **)(v32 + 48) == v34 && *(_QWORD *)(v32 + 56) == v103
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        goto LABEL_69;
      }
      if (v104 != 2)
        break;
    }
LABEL_44:
    swift_bridgeObjectRelease();
    v73 = v190;
    v76 = v194;
    v97 = v186;
LABEL_45:
    ++v95;
    swift_bridgeObjectRelease();
    v98 = v191;
    (*(void (**)(char *, uint64_t))(v191 + 8))(v97, v76);
    v93 = v100;
    v85 = v31;
    v99 = v172;
    v62 = v197;
    if (v95 == v185)
    {
      swift_bridgeObjectRelease();
      v111 = 1;
      v110 = v178;
      v71 = v99;
      goto LABEL_86;
    }
  }
  v106 = (_QWORD *)(v32 + 72);
  v107 = 2;
  while (1)
  {
    v108 = v107 + 1;
    if (__OFADD__(v107, 1))
      break;
    v109 = (char *)*(v106 - 1) == v34 && *v106 == v103;
    if (v109 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_69;
    v106 += 2;
    ++v107;
    if (v108 == v104)
      goto LABEL_44;
  }
  __break(1u);
LABEL_122:
  swift_once();
LABEL_15:
  v55 = type metadata accessor for Logger();
  __swift_project_value_buffer(v55, (uint64_t)static Logger.executor);
  v56 = Logger.logObject.getter();
  v57 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v58 = 0;
    _os_log_impl(&dword_1B4BE6000, v56, v57, "SystemCommandsAffinityScorer | Could not extract usoTask from parse", v58, 2u);
    MEMORY[0x1B5E44758](v58, -1, -1);
  }
LABEL_26:

  (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
  return 0;
}

ValueMetadata *type metadata accessor for SystemCommandsAffinityScorer()
{
  return &type metadata for SystemCommandsAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues)
  {
    v1 = type metadata accessor for UsoEntity_common_UserEntity.DefinedValues();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DA01C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues);
  }
  return result;
}

uint64_t protocol witness for Tagger.save(tag:) in conformance TaggingService(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E0D97858] + MEMORY[0x1E0D97858]);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v5(a1);
}

uint64_t dispatch thunk of Tagger.save(tag:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 8) + *(_QWORD *)(a3 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v9(a1, a2, a3);
}

uint64_t TaskData.activities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TaskData.attribute.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskData.meCardSet.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t TaskData.reformedIntent.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskData.refTaskId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskData.statusReason.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

