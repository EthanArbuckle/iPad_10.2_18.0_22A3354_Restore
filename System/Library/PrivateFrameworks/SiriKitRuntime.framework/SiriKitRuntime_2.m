uint64_t specialized Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[5];
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65[6];

  v59 = a8;
  v54 = a7;
  v55 = a6;
  v57 = a4;
  v56 = a3;
  v51 = a2;
  v50 = a9;
  v53 = type metadata accessor for DispatchTimeInterval();
  v15 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v52 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65[3] = a12;
  v65[4] = a13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v65);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a12 - 8) + 32))(boxed_opaque_existential_1, a10, a12);
  v63 = type metadata accessor for CorrectionsUndoManager();
  v64 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type CorrectionsUndoManager and conformance CorrectionsUndoManager, (uint64_t (*)(uint64_t))type metadata accessor for CorrectionsUndoManager, (uint64_t)&protocol conformance descriptor for CorrectionsUndoManager);
  v62[0] = a5;
  swift_defaultActor_initialize();
  type metadata accessor for Conversation.State(0);
  swift_storeEnumTagMultiPayload();
  v18 = a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  *(_QWORD *)(v18 + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_idleTrackerActivity) = 0;
  v19 = (_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  *v19 = 12589;
  v19[1] = 0xE200000000000000;
  v20 = a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  v21 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(_BYTE *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused) = 0;
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow) = 0;
  type metadata accessor for InstrumentedStack(0);
  v22 = (_QWORD *)swift_allocObject();
  v22[5] = MEMORY[0x1E0DEE9E0];
  v22[3] = 0;
  v22[4] = 0;
  v22[2] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>);
  v23 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  swift_weakInit();
  v23[6] = 0;
  v23[2] = a1;
  swift_beginAccess();
  swift_weakAssign();
  v23[4] = MEMORY[0x1E0DEE9D8];
  swift_weakAssign();
  v23[6] = 0;
  swift_retain_n();
  swift_retain();
  swift_release();
  specialized OrderedForest._push(_:)((uint64_t)v23);
  v24 = v23[2];
  type metadata accessor for InstrumentedStack.TrackedFlowAgent(0);
  swift_allocObject();
  v25 = swift_retain();
  v26 = InstrumentedStack.TrackedFlowAgent.init(agent:parent:)(v25, 0);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v61 = v22[5];
  v22[5] = 0x8000000000000000;
  v28 = (uint64_t)v26;
  v29 = v51;
  v30 = v24;
  v31 = v50;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, isUniquelyReferenced_nonNull_native);
  v22[5] = v61;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)(a11 + 112) = v22;
  v32 = v52;
  v33 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v52, v59, v53);
  type metadata accessor for OS_dispatch_queue();
  v34 = static OS_dispatch_queue.main.getter();
  type metadata accessor for JetsamHelper();
  v35 = (char *)swift_allocObject();
  v36 = &v35[OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction];
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0;
  *((_QWORD *)v35 + 2) = 0xD000000000000023;
  *((_QWORD *)v35 + 3) = 0x80000001B4EF8790;
  *((_QWORD *)v35 + 4) = dispatch_semaphore_create(1);
  *((_QWORD *)v35 + 5) = v34;
  v58 = v15;
  v37 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
  v38 = a1;
  v39 = v33;
  v37(&v35[OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout], v32, v33);
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_jetsamHelper) = v35;
  swift_beginAccess();
  *(_QWORD *)(v18 + 8) = v54;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskService) = v29;
  v40 = (_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginId);
  v41 = v57;
  *v40 = v56;
  v40[1] = v41;
  v42 = *(void **)(v38 + 160);
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginInfo) = v42;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v62, a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v65, a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils);
  if (v31)
  {
    swift_retain();
    v43 = v42;
  }
  else
  {
    type metadata accessor for SiriEnvironment();
    swift_retain();
    v44 = v42;
    static SiriEnvironment.default.getter();
  }
  type metadata accessor for SiriEnvironment();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rootEnvironment) = SiriEnvironment.init(parent:)();
  type metadata accessor for SiriCorrectionsClientProvider();
  swift_allocObject();
  swift_retain();
  SiriCorrectionsClientProvider.init()();
  SiriEnvironment.correctionsClientProvider.setter();
  swift_release();
  SiriEnvironment.correctionsClientProvider.getter();
  v45 = v63;
  v46 = v64;
  v47 = __swift_project_boxed_opaque_existential_1(v62, v63);
  v60[3] = v45;
  v60[4] = *(_QWORD *)(v46 + 8);
  v48 = __swift_allocate_boxed_opaque_existential_1(v60);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v48, v47, v45);
  dispatch thunk of SiriCorrectionsClientProvider.correctionsClient.setter();
  swift_release();
  type metadata accessor for UserIdentityProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserIdentityProvider and conformance UserIdentityProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C058], MEMORY[0x1E0D9C040]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for FlowTaskProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type FlowTaskProvider and conformance FlowTaskProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B088], MEMORY[0x1E0D9B078]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for CallStateEnvironmentProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type CallStateEnvironmentProvider and conformance CallStateEnvironmentProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C3D8], MEMORY[0x1E0D9C3C0]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for ScopedReferenceResolutionDataProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type ScopedReferenceResolutionDataProvider and conformance ScopedReferenceResolutionDataProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3C80], MEMORY[0x1E0DA3C70]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for AceServiceContextProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AceServiceContextProvider and conformance AceServiceContextProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C308], MEMORY[0x1E0D9C2F8]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  swift_retain();
  dispatch thunk of AnyFlow.siriEnvironment.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v39);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  return a11;
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[5];
  uint64_t v59;
  uint64_t v60[3];
  uint64_t v61;
  uint64_t v62;

  v56 = a8;
  v51 = a7;
  v52 = a6;
  v53 = a3;
  v54 = a4;
  v48 = a2;
  v50 = a10;
  v49 = a9;
  v57 = type metadata accessor for DispatchTimeInterval();
  v15 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v47 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = a12;
  v62 = a13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v60);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a12 - 8) + 32))(boxed_opaque_existential_1, a5, a12);
  swift_defaultActor_initialize();
  type metadata accessor for Conversation.State(0);
  swift_storeEnumTagMultiPayload();
  v18 = a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  *(_QWORD *)(v18 + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_idleTrackerActivity) = 0;
  v19 = (_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  *v19 = 12589;
  v19[1] = 0xE200000000000000;
  v20 = a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  v21 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(_BYTE *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused) = 0;
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow) = 0;
  type metadata accessor for InstrumentedStack(0);
  v22 = (_QWORD *)swift_allocObject();
  v22[5] = MEMORY[0x1E0DEE9E0];
  v22[3] = 0;
  v22[4] = 0;
  v22[2] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>);
  v23 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  swift_weakInit();
  v23[6] = 0;
  v23[2] = a1;
  swift_beginAccess();
  swift_weakAssign();
  v23[4] = MEMORY[0x1E0DEE9D8];
  swift_weakAssign();
  v23[6] = 0;
  swift_retain_n();
  swift_retain();
  swift_release();
  specialized OrderedForest._push(_:)((uint64_t)v23);
  v24 = v23[2];
  type metadata accessor for InstrumentedStack.TrackedFlowAgent(0);
  swift_allocObject();
  v25 = swift_retain();
  v26 = InstrumentedStack.TrackedFlowAgent.init(agent:parent:)(v25, 0);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v59 = v22[5];
  v22[5] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v26, v24, isUniquelyReferenced_nonNull_native);
  v22[5] = v59;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  v28 = v48;
  swift_release();
  swift_release();
  *(_QWORD *)(a11 + 112) = v22;
  v29 = v49;
  v30 = v47;
  v31 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v47, v56, v57);
  type metadata accessor for OS_dispatch_queue();
  v32 = static OS_dispatch_queue.main.getter();
  type metadata accessor for JetsamHelper();
  v33 = (_QWORD *)swift_allocObject();
  v34 = (_QWORD *)((char *)v33 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  *v34 = 0;
  v34[1] = 0;
  v33[2] = 0xD000000000000023;
  v33[3] = 0x80000001B4EF8790;
  v33[4] = dispatch_semaphore_create(1);
  v33[5] = v32;
  v55 = v15;
  v35 = v30;
  v36 = v50;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))((uint64_t)v33 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout, v35, v31);
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_jetsamHelper) = v33;
  swift_beginAccess();
  *(_QWORD *)(v18 + 8) = v51;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskService) = v28;
  v37 = (_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginId);
  v38 = v54;
  *v37 = v53;
  v37[1] = v38;
  v39 = *(void **)(a1 + 160);
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginInfo) = v39;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v60, a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine);
  outlined init with copy of ReferenceResolutionClientProtocol(v36, a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils);
  if (v29)
  {
    swift_retain();
    v40 = v39;
  }
  else
  {
    type metadata accessor for SiriEnvironment();
    swift_retain();
    v41 = v39;
    static SiriEnvironment.default.getter();
  }
  type metadata accessor for SiriEnvironment();
  swift_allocObject();
  swift_retain();
  *(_QWORD *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rootEnvironment) = SiriEnvironment.init(parent:)();
  type metadata accessor for SiriCorrectionsClientProvider();
  swift_allocObject();
  swift_retain();
  SiriCorrectionsClientProvider.init()();
  SiriEnvironment.correctionsClientProvider.setter();
  swift_release();
  SiriEnvironment.correctionsClientProvider.getter();
  v42 = v61;
  v43 = v62;
  v44 = __swift_project_boxed_opaque_existential_1(v60, v61);
  v58[3] = v42;
  v58[4] = *(_QWORD *)(v43 + 8);
  v45 = __swift_allocate_boxed_opaque_existential_1(v58);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v45, v44, v42);
  dispatch thunk of SiriCorrectionsClientProvider.correctionsClient.setter();
  swift_release();
  type metadata accessor for UserIdentityProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserIdentityProvider and conformance UserIdentityProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C058], MEMORY[0x1E0D9C040]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for FlowTaskProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type FlowTaskProvider and conformance FlowTaskProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B088], MEMORY[0x1E0D9B078]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for CallStateEnvironmentProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type CallStateEnvironmentProvider and conformance CallStateEnvironmentProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C3D8], MEMORY[0x1E0D9C3C0]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for ScopedReferenceResolutionDataProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type ScopedReferenceResolutionDataProvider and conformance ScopedReferenceResolutionDataProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3C80], MEMORY[0x1E0DA3C70]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for AceServiceContextProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AceServiceContextProvider and conformance AceServiceContextProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C308], MEMORY[0x1E0D9C2F8]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  swift_retain();
  dispatch thunk of AnyFlow.siriEnvironment.setter();
  __swift_destroy_boxed_opaque_existential_1(v36);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v56, v57);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
  return a11;
}

uint64_t specialized Conversation.__allocating_init(initialFlow:taskService:pluginId:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  uint64_t v38;

  v33 = a8;
  v34 = a4;
  v35 = a5;
  v36 = a6;
  v31 = a2;
  v32 = a3;
  v29 = a12;
  v30 = a1;
  v13 = type metadata accessor for DispatchTimeInterval();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a11 - 8);
  v19 = MEMORY[0x1E0C80A78](v15);
  v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v28 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))((char *)&v28 - v22, a9, a11);
  type metadata accessor for CorrectionsUndoManager();
  v24 = swift_allocObject();
  *(_OWORD *)(v24 + 40) = 0u;
  *(_QWORD *)(v24 + 56) = 0;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_QWORD *)(v24 + 16) = MEMORY[0x1E0DEE9D8];
  v38 = 0;
  memset(v37, 0, sizeof(v37));
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v37, v24 + 24, &demangling cache variable for type metadata for CorrectingFlow?);
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a7, v13);
  type metadata accessor for Conversation(0);
  v25 = swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, a11);
  v26 = specialized Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(v30, v31, v32, v34, v24, v35, v36, (uint64_t)v17, v33, (uint64_t)v21, v25, a11, v29);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v23, a11);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a7, v13);
  return v26;
}

uint64_t specialized Conversation.__allocating_init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a7;
  v26 = a8;
  v23 = a4;
  v24 = a6;
  v22 = a3;
  v16 = *(_QWORD *)(a12 - 8);
  MEMORY[0x1E0C80A78](a1);
  v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Conversation(0);
  v19 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a5, a12);
  return specialized Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(a1, a2, v22, v23, (uint64_t)v18, v24, v25, v26, a9, a10, v19, a12, a13);
}

uint64_t type metadata accessor for Conversation.State(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for Conversation.State);
}

uint64_t type metadata accessor for SiriRequest(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for SiriRequest);
}

uint64_t partial apply for closure #1 in Conversation.ensureReady(timeout:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in Conversation.ensureReady(timeout:)();
}

unint64_t lazy protocol witness table accessor for type TimedOutError and conformance TimedOutError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimedOutError and conformance TimedOutError;
  if (!lazy protocol witness table cache variable for type TimedOutError and conformance TimedOutError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for TimedOutError, &type metadata for TimedOutError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimedOutError and conformance TimedOutError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IllegalStateError and conformance IllegalStateError;
  if (!lazy protocol witness table cache variable for type IllegalStateError and conformance IllegalStateError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for IllegalStateError, &type metadata for IllegalStateError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IllegalStateError and conformance IllegalStateError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CancelledError and conformance CancelledError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CancelledError and conformance CancelledError;
  if (!lazy protocol witness table cache variable for type CancelledError and conformance CancelledError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for CancelledError, &type metadata for CancelledError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CancelledError and conformance CancelledError);
  }
  return result;
}

uint64_t outlined assign with take of Conversation.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Conversation.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B4D1162C()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Conversation.paraphrase()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in Conversation.paraphrase()(a1, v4, v5, v6);
}

uint64_t type metadata accessor for Conversation(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for Conversation);
}

uint64_t sub_1B4D116D8()
{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = (int *)type metadata accessor for SiriRequest(0);
  v2 = (*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v3 = v0 + v2 + v1[5];
  v4 = type metadata accessor for Input();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  v5 = (uint64_t *)(v0 + v2 + v1[7]);
  v6 = v5[1];
  if (v6 >> 60 != 15)
    outlined consume of Data._Representation(*v5, v6);
  swift_release();
  v7 = v0 + v2 + v1[9];
  v8 = type metadata accessor for SiriRequestIdentities(0);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v9 = type metadata accessor for IdentifiedUser();
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
      (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v7, v9);
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for SiriRequestIdentities(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for SiriRequestIdentities);
}

uint64_t partial apply for closure #1 in Conversation.prepare()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for SiriRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = v1 + v5;
  v10 = *(_QWORD *)(v1 + v6);
  v11 = *(_QWORD *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in Conversation.prepare()(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_1B4D1190C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for FlexibleExecutionSupportOptions();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in Conversation.flexibleExecutionSupport()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FlexibleExecutionSupportOptions() - 8) + 80);
  return implicit closure #3 in Conversation.flexibleExecutionSupport()(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_1B4D11998()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Conversation.commit()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in Conversation.commit()(a1, v4, v5, v6, v7, v8);
}

uint64_t outlined destroy of weak ConversationTaskObservationDelegate?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t sub_1B4D11A78@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  result = MEMORY[0x1B5E44848](v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1B4D11AD0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1B4D11B30@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  swift_beginAccess();
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B4D11B88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  swift_beginAccess();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v3, a2, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t sub_1B4D11BE8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_1B4D11C38(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t sub_1B4D11C84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Conversation.correctionsFlow.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B4D11CAC(_QWORD *a1, _QWORD *a2)
{
  *(_QWORD *)(*a2 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t dispatch thunk of Conversational.cancel()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 8) + *(_QWORD *)(a2 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v7(a1, a2);
}

uint64_t dispatch thunk of Conversational.ensureReady(timeout:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 16) + *(_QWORD *)(a3 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of Conversational.accept(request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 24) + *(_QWORD *)(a4 + 24));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of Conversational.paraphrase()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 32) + *(_QWORD *)(a3 + 32));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of Conversational.prepare()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 40) + *(_QWORD *)(a2 + 40));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v7(a1, a2);
}

uint64_t dispatch thunk of Conversational.commit()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 48) + *(_QWORD *)(a3 + 48));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of Conversational.isEmpty()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 56) + *(_QWORD *)(a2 + 56));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v7(a1, a2);
}

uint64_t dispatch thunk of Conversational.isCorrectable()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 64) + *(_QWORD *)(a2 + 64));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v7(a1, a2);
}

uint64_t dispatch thunk of Conversational.flexibleExecutionSupport()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 72) + *(_QWORD *)(a3 + 72));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v9(a1, a2, a3);
}

uint64_t ObjC metadata update function for Conversation()
{
  return type metadata accessor for Conversation(0);
}

void type metadata completion function for Conversation()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Conversation.State(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for Conversation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Conversation.taskObserver.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of Conversation.taskObserver.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of Conversation.taskObserver.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of Conversation.rcId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of Conversation.rcId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of Conversation.rcId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of Conversation.hypothesisId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of Conversation.hypothesisId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of Conversation.hypothesisId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of Conversation.isPaused.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of Conversation.isPaused.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of Conversation.isPaused.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of Conversation.correctionsFlow.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of Conversation.correctionsFlow.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of Conversation.correctionsFlow.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of Conversation.__allocating_init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 376))();
}

uint64_t dispatch thunk of Conversation.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 384) + *(_QWORD *)(*(_QWORD *)v0 + 384));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t dispatch thunk of Conversation.isCancelled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of Conversation.ensureReady(timeout:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 400) + *(_QWORD *)(*(_QWORD *)v1 + 400));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t dispatch thunk of Conversation.accept(request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 408) + *(_QWORD *)(*(_QWORD *)v2 + 408));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v8(a1, a2);
}

uint64_t dispatch thunk of Conversation.paraphrase()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 416) + *(_QWORD *)(*(_QWORD *)v1 + 416));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t dispatch thunk of Conversation.prepare()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 424) + *(_QWORD *)(*(_QWORD *)v0 + 424));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t dispatch thunk of Conversation.flexibleExecutionSupport()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 432) + *(_QWORD *)(*(_QWORD *)v1 + 432));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t dispatch thunk of Conversation.commit()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 440) + *(_QWORD *)(*(_QWORD *)v1 + 440));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t dispatch thunk of Conversation.isEmpty()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of Conversation.isCorrectable()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of Conversation.stackCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of Conversation.topFlowAgent.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of Conversation.isReady.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t *initializeBufferWithCopyOfBuffer for Conversation.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  _OWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v34;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        v8 = (int *)type metadata accessor for SiriRequest(0);
        v9 = v8[5];
        v10 = (char *)a1 + v9;
        v11 = (char *)a2 + v9;
        v12 = type metadata accessor for Input();
        v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
        swift_bridgeObjectRetain();
        v13(v10, v11, v12);
        *(uint64_t *)((char *)a1 + v8[6]) = *(uint64_t *)((char *)a2 + v8[6]);
        v14 = v8[7];
        v15 = (char *)a1 + v14;
        v16 = (_OWORD *)((char *)a2 + v14);
        v17 = *(uint64_t *)((char *)a2 + v14 + 8);
        swift_retain();
        if (v17 >> 60 == 15)
        {
          *(_OWORD *)v15 = *v16;
        }
        else
        {
          v22 = *(_QWORD *)v16;
          outlined copy of Data._Representation(v22, v17);
          *(_QWORD *)v15 = v22;
          *((_QWORD *)v15 + 1) = v17;
        }
        *(uint64_t *)((char *)a1 + v8[8]) = *(uint64_t *)((char *)a2 + v8[8]);
        v23 = v8[9];
        v24 = (char *)a1 + v23;
        v25 = (char *)a2 + v23;
        v26 = type metadata accessor for SiriRequestIdentities(0);
        v27 = *(_QWORD *)(v26 - 8);
        v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
        swift_retain();
        if (v28(v25, 1, v26))
        {
          v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          v30 = type metadata accessor for IdentifiedUser();
          v31 = *(_QWORD *)(v30 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v25, 1, v30))
          {
            v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v24, v25, v30);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v24, 0, 1, v30);
          }
          *(_QWORD *)&v24[*(int *)(v26 + 20)] = *(_QWORD *)&v25[*(int *)(v26 + 20)];
          v33 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56);
          swift_bridgeObjectRetain();
          v33(v24, 0, 1, v26);
        }
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
        *(uint64_t *)((char *)a1 + *(int *)(v34 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v34 + 48));
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v20 = *a2;
        v21 = a2[1];
        *a1 = v20;
        a1[1] = v21;
        swift_retain();
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
      case 3u:
        *a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for Conversation.State(uint64_t a1)
{
  uint64_t result;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = swift_getEnumCaseMultiPayload();
  if ((result - 2) >= 2)
  {
    if ((_DWORD)result == 1)
    {
      swift_release();
    }
    else
    {
      if ((_DWORD)result)
        return result;
      swift_bridgeObjectRelease();
      v3 = (int *)type metadata accessor for SiriRequest(0);
      v4 = a1 + v3[5];
      v5 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
      swift_release();
      v6 = (uint64_t *)(a1 + v3[7]);
      v7 = v6[1];
      if (v7 >> 60 != 15)
        outlined consume of Data._Representation(*v6, v7);
      swift_release();
      v8 = a1 + v3[9];
      v9 = type metadata accessor for SiriRequestIdentities(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
      {
        v10 = type metadata accessor for IdentifiedUser();
        v11 = *(_QWORD *)(v10 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
        swift_bridgeObjectRelease();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
    }
  }
  return swift_release();
}

_QWORD *initializeWithCopy for Conversation.State(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      v7 = (int *)type metadata accessor for SiriRequest(0);
      v8 = v7[5];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for Input();
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      swift_bridgeObjectRetain();
      v12(v9, v10, v11);
      *(_QWORD *)((char *)a1 + v7[6]) = *(_QWORD *)((char *)a2 + v7[6]);
      v13 = v7[7];
      v14 = (char *)a1 + v13;
      v15 = (_OWORD *)((char *)a2 + v13);
      v16 = *(_QWORD *)((char *)a2 + v13 + 8);
      swift_retain();
      if (v16 >> 60 == 15)
      {
        *(_OWORD *)v14 = *v15;
      }
      else
      {
        v19 = *(_QWORD *)v15;
        outlined copy of Data._Representation(v19, v16);
        *(_QWORD *)v14 = v19;
        *((_QWORD *)v14 + 1) = v16;
      }
      *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)((char *)a2 + v7[8]);
      v20 = v7[9];
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = type metadata accessor for SiriRequestIdentities(0);
      v24 = *(_QWORD *)(v23 - 8);
      v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
      swift_retain();
      if (v25(v22, 1, v23))
      {
        v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        v27 = type metadata accessor for IdentifiedUser();
        v28 = *(_QWORD *)(v27 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v22, 1, v27))
        {
          v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v21, v22, v27);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v21, 0, 1, v27);
        }
        *(_QWORD *)&v21[*(int *)(v23 + 20)] = *(_QWORD *)&v22[*(int *)(v23 + 20)];
        v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56);
        swift_bridgeObjectRetain();
        v30(v21, 0, 1, v23);
      }
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
      *(_QWORD *)((char *)a1 + *(int *)(v31 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v31 + 48));
      swift_retain();
      goto LABEL_15;
    case 1u:
      v17 = *a2;
      v18 = a2[1];
      *a1 = v17;
      a1[1] = v18;
      swift_retain();
      swift_retain();
      goto LABEL_15;
    case 2u:
    case 3u:
      *a1 = *a2;
      swift_retain();
LABEL_15:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for Conversation.State(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  _OWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v28;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for Conversation.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        v6 = (int *)type metadata accessor for SiriRequest(0);
        v7 = v6[5];
        v8 = (char *)a1 + v7;
        v9 = (char *)a2 + v7;
        v10 = type metadata accessor for Input();
        v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
        swift_bridgeObjectRetain();
        v11(v8, v9, v10);
        *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
        v12 = v6[7];
        v13 = (char *)a1 + v12;
        v14 = (_OWORD *)((char *)a2 + v12);
        v15 = *(_QWORD *)((char *)a2 + v12 + 8);
        swift_retain();
        if (v15 >> 60 == 15)
        {
          *(_OWORD *)v13 = *v14;
        }
        else
        {
          v16 = *(_QWORD *)v14;
          outlined copy of Data._Representation(v16, v15);
          *(_QWORD *)v13 = v16;
          *((_QWORD *)v13 + 1) = v15;
        }
        *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
        v17 = v6[9];
        v18 = (char *)a1 + v17;
        v19 = (char *)a2 + v17;
        v20 = type metadata accessor for SiriRequestIdentities(0);
        v21 = *(_QWORD *)(v20 - 8);
        v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
        swift_retain();
        if (v22(v19, 1, v20))
        {
          v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        else
        {
          v24 = type metadata accessor for IdentifiedUser();
          v25 = *(_QWORD *)(v24 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v19, 1, v24))
          {
            v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v18, v19, v24);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v18, 0, 1, v24);
          }
          *(_QWORD *)&v18[*(int *)(v20 + 20)] = *(_QWORD *)&v19[*(int *)(v20 + 20)];
          v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56);
          swift_bridgeObjectRetain();
          v27(v18, 0, 1, v20);
        }
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
        *(_QWORD *)((char *)a1 + *(int *)(v28 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v28 + 48));
        swift_retain();
        goto LABEL_16;
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_retain();
        swift_retain();
        goto LABEL_16;
      case 2u:
      case 3u:
        *a1 = *a2;
        swift_retain();
LABEL_16:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for Conversation.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    v6 = (int *)type metadata accessor for SiriRequest(0);
    v7 = v6[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Input();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
    *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
    *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
    v11 = v6[9];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for SiriRequestIdentities(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v17 = type metadata accessor for IdentifiedUser();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v17))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v12, v13, v17);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v17);
      }
      *(_QWORD *)&v12[*(int *)(v14 + 20)] = *(_QWORD *)&v13[*(int *)(v14 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
    *(_QWORD *)((char *)a1 + *(int *)(v20 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v20 + 48));
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *assignWithTake for Conversation.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for Conversation.State);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      v6 = (int *)type metadata accessor for SiriRequest(0);
      v7 = v6[5];
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for Input();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      *(_QWORD *)((char *)a1 + v6[6]) = *(_QWORD *)((char *)a2 + v6[6]);
      *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
      *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
      v11 = v6[9];
      v12 = (char *)a1 + v11;
      v13 = (char *)a2 + v11;
      v14 = type metadata accessor for SiriRequestIdentities(0);
      v15 = *(_QWORD *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      }
      else
      {
        v17 = type metadata accessor for IdentifiedUser();
        v18 = *(_QWORD *)(v17 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v17))
        {
          v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v12, v13, v17);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v17);
        }
        *(_QWORD *)&v12[*(int *)(v14 + 20)] = *(_QWORD *)&v13[*(int *)(v14 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
      *(_QWORD *)((char *)a1 + *(int *)(v20 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v20 + 48));
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for Conversation.State()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  _QWORD v3[8];

  result = type metadata accessor for SiriRequest(319);
  if (v1 <= 0x3F)
  {
    v2 = MEMORY[0x1E0DE9D48] + 64;
    swift_getTupleTypeLayout2();
    v3[4] = v3;
    v3[5] = &unk_1B4EE67D8;
    v3[6] = &unk_1B4EE6808;
    v3[7] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t dispatch thunk of ConversationTaskObservationDelegate.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a6 + 8)
                                                                                     + *(_QWORD *)(a6 + 8));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of ConversationTaskObservationDelegate.executionDidComplete()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 16) + *(_QWORD *)(a2 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v7(a1, a2);
}

uint64_t dispatch thunk of ConversationTaskObservationDelegate.activeTasksDidChange(activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 24) + *(_QWORD *)(a5 + 24));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t *initializeBufferWithCopyOfBuffer for SiriRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  _OWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Input();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    v14 = (char *)v4 + v13;
    v15 = (_OWORD *)((char *)a2 + v13);
    v16 = *(uint64_t *)((char *)a2 + v13 + 8);
    swift_retain();
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)v14 = *v15;
    }
    else
    {
      v18 = *(_QWORD *)v15;
      outlined copy of Data._Representation(v18, v16);
      *(_QWORD *)v14 = v18;
      *((_QWORD *)v14 + 1) = v16;
    }
    v19 = a3[9];
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    v20 = (char *)v4 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for SiriRequestIdentities(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_retain();
    if (v24(v21, 1, v22))
    {
      v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v26 = type metadata accessor for IdentifiedUser();
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v21, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v20, v21, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v20, 0, 1, v26);
      }
      *(_QWORD *)&v20[*(int *)(v22 + 20)] = *(_QWORD *)&v21[*(int *)(v22 + 20)];
      v29 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56);
      swift_bridgeObjectRetain();
      v29(v20, 0, 1, v22);
    }
  }
  return v4;
}

uint64_t destroy for SiriRequest(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  v6 = (uint64_t *)(a1 + a2[7]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(*v6, v7);
  swift_release();
  v8 = a1 + a2[9];
  v9 = type metadata accessor for SiriRequestIdentities(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    v11 = type metadata accessor for IdentifiedUser();
    v12 = *(_QWORD *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11))
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v8, v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for SiriRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  _OWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, _QWORD, uint64_t, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Input();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v13 = (char *)a1 + v12;
  v14 = (_OWORD *)((char *)a2 + v12);
  v15 = *(_QWORD *)((char *)a2 + v12 + 8);
  swift_retain();
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)v13 = *v14;
  }
  else
  {
    v16 = *(_QWORD *)v14;
    outlined copy of Data._Representation(v16, v15);
    *(_QWORD *)v13 = v16;
    *((_QWORD *)v13 + 1) = v15;
  }
  v17 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for SiriRequestIdentities(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  swift_retain();
  if (v22(v19, 1, v20))
  {
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v24 = type metadata accessor for IdentifiedUser();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v19, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v18, v19, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v18, 0, 1, v24);
    }
    *(_QWORD *)&v18[*(int *)(v20 + 20)] = *(_QWORD *)&v19[*(int *)(v20 + 20)];
    v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56);
    swift_bridgeObjectRetain();
    v27(v18, 0, 1, v20);
  }
  return a1;
}

_QWORD *assignWithCopy for SiriRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  void (*v35)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v36;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Input();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_retain();
  swift_release();
  v10 = a3[7];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = *(_QWORD *)((char *)a2 + v10 + 8);
  if (*(_QWORD *)((char *)a1 + v10 + 8) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      v14 = *v12;
      outlined copy of Data._Representation(v14, v13);
      *v11 = v14;
      v11[1] = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v11);
LABEL_6:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  v15 = *v12;
  outlined copy of Data._Representation(v15, v13);
  v16 = *v11;
  v17 = v11[1];
  *v11 = v15;
  v11[1] = v13;
  outlined consume of Data._Representation(v16, v17);
LABEL_8:
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  v18 = a3[9];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for SiriRequestIdentities(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (v25)
    {
      outlined destroy of CamOutput((uint64_t)v19, type metadata accessor for SiriRequestIdentities);
      goto LABEL_14;
    }
    v30 = type metadata accessor for IdentifiedUser();
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
    v33 = v32(v19, 1, v30);
    v34 = v32(v20, 1, v30);
    if (v33)
    {
      if (!v34)
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v19, v20, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v19, 0, 1, v30);
LABEL_23:
        *(_QWORD *)&v19[*(int *)(v21 + 20)] = *(_QWORD *)&v20[*(int *)(v21 + 20)];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    else
    {
      if (!v34)
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v19, v20, v30);
        goto LABEL_23;
      }
      (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v30);
    }
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_23;
  }
  if (v25)
  {
LABEL_14:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  v26 = type metadata accessor for IdentifiedUser();
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v20, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v19, v20, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v19, 0, 1, v26);
  }
  *(_QWORD *)&v19[*(int *)(v21 + 20)] = *(_QWORD *)&v20[*(int *)(v21 + 20)];
  v35 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56);
  swift_bridgeObjectRetain();
  v35(v19, 0, 1, v21);
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0CB0338] - 8) + 8))();
  return a1;
}

_OWORD *initializeWithTake for SiriRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Input();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for SiriRequestIdentities(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = type metadata accessor for IdentifiedUser();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v12, v13, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v17);
    }
    *(_QWORD *)&v12[*(int *)(v14 + 20)] = *(_QWORD *)&v13[*(int *)(v14 + 20)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for SiriRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Input();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  swift_release();
  v11 = a3[7];
  v12 = (uint64_t)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *(_QWORD *)((char *)a1 + v11 + 8);
  if (v14 >> 60 == 15)
    goto LABEL_4;
  v15 = *((_QWORD *)v13 + 1);
  if (v15 >> 60 == 15)
  {
    outlined destroy of Data(v12);
LABEL_4:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    goto LABEL_6;
  }
  v16 = *(_QWORD *)v12;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_QWORD *)(v12 + 8) = v15;
  outlined consume of Data._Representation(v16, v14);
LABEL_6:
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_release();
  v17 = a3[9];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for SiriRequestIdentities(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (v24)
    {
      outlined destroy of CamOutput((uint64_t)v18, type metadata accessor for SiriRequestIdentities);
      goto LABEL_12;
    }
    v29 = type metadata accessor for IdentifiedUser();
    v30 = *(_QWORD *)(v29 - 8);
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
    v32 = v31(v18, 1, v29);
    v33 = v31(v19, 1, v29);
    if (v32)
    {
      if (!v33)
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v18, v19, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v18, 0, 1, v29);
LABEL_21:
        *(_QWORD *)&v18[*(int *)(v20 + 20)] = *(_QWORD *)&v19[*(int *)(v20 + 20)];
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    else
    {
      if (!v33)
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v18, v19, v29);
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v29);
    }
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_21;
  }
  if (v24)
  {
LABEL_12:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  v25 = type metadata accessor for IdentifiedUser();
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v19, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v18, v19, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v18, 0, 1, v25);
  }
  *(_QWORD *)&v18[*(int *)(v20 + 20)] = *(_QWORD *)&v19[*(int *)(v20 + 20)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4D142D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Input();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SiriRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4D14380(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for Input();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 36);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for SiriRequest()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Input();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, &lazy cache variable for type metadata for SiriRequestIdentities?, (void (*)(uint64_t))type metadata accessor for SiriRequestIdentities);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for SiriRequestIdentities(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for IdentifiedUser();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SiriRequestIdentities(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for IdentifiedUser();
  v3 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for SiriRequestIdentities(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for IdentifiedUser();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for SiriRequestIdentities(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for IdentifiedUser();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for SiriRequestIdentities(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for IdentifiedUser();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for SiriRequestIdentities(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;

  v6 = type metadata accessor for IdentifiedUser();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriRequestIdentities()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4D149E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriRequestIdentities()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4D14A70(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

void type metadata completion function for SiriRequestIdentities()
{
  unint64_t v0;

  type metadata accessor for Input?(319, &lazy cache variable for type metadata for IdentifiedUser?, (void (*)(uint64_t))MEMORY[0x1E0D9B928]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1B4D14B70()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)()
{
  return closure #1 in Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)();
}

uint64_t partial apply for closure #1 in closure #1 in Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)()
{
  return dispatch thunk of AnyChildCompletion.completion(exitValue:)();
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

id ConversationalContextContainer.__allocating_init(dialogActs:activeTasks:executedTasks:entities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  char *v9;
  objc_super v11;

  v9 = (char *)objc_allocWithZone(v4);
  *(_QWORD *)&v9[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_systemDialogActs] = a1;
  *(_QWORD *)&v9[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_activeTasks] = a2;
  *(_QWORD *)&v9[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_executedTasks] = a3;
  *(_QWORD *)&v9[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_entities] = a4;
  v11.receiver = v9;
  v11.super_class = v4;
  return objc_msgSendSuper2(&v11, sel_init);
}

void *ConversationalContextContainer.supportsSecureCoding.unsafeMutableAddressor()
{
  return &static ConversationalContextContainer.supportsSecureCoding;
}

uint64_t static ConversationalContextContainer.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t ConversationalContextContainer.systemDialogActs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationalContextContainer.activeTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationalContextContainer.executedTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationalContextContainer.entities.getter()
{
  return swift_bridgeObjectRetain();
}

id ConversationalContextContainer.init(dialogActs:activeTasks:executedTasks:entities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  objc_super v6;

  *(_QWORD *)&v4[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_systemDialogActs] = a1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_activeTasks] = a2;
  *(_QWORD *)&v4[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_executedTasks] = a3;
  *(_QWORD *)&v4[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_entities] = a4;
  v6.receiver = v4;
  v6.super_class = (Class)type metadata accessor for ConversationalContextContainer();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for ConversationalContextContainer()
{
  return objc_opt_self();
}

Swift::Void __swiftcall ConversationalContextContainer.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Class isa;
  uint64_t v8;
  void *v9;
  char **v10;
  Class v11;
  uint64_t v12;
  void *v13;
  Class v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  Class v29;
  void *v30;
  _QWORD v31[2];
  objc_class *v32;
  uint64_t v33;
  __int128 v34;
  char *v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  _QWORD *v38;

  v3 = type metadata accessor for RREntity();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = *(Class *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_systemDialogActs);
  if (isa)
  {
    v8 = swift_bridgeObjectRetain();
    specialized Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)(v8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F6B0], (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct, MEMORY[0x1E0D9F688]);
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  v9 = (void *)MEMORY[0x1B5E432E8](0xD000000000000010, 0x80000001B4EF4BD0);
  v10 = &selRef_reason;
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v9);
  swift_unknownObjectRelease();

  v11 = *(Class *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_activeTasks);
  if (v11)
  {
    v12 = swift_bridgeObjectRetain();
    specialized Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)(v12, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F0B8], lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, MEMORY[0x1E0D9F090]);
    swift_bridgeObjectRelease();
    v11 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  v13 = (void *)MEMORY[0x1B5E432E8](0x6154657669746361, 0xEB00000000736B73);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11, v13);
  swift_unknownObjectRelease();

  v14 = *(Class *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_executedTasks);
  if (v14)
  {
    v15 = swift_bridgeObjectRetain();
    specialized Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)(v15, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F0B8], lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, MEMORY[0x1E0D9F090]);
    swift_bridgeObjectRelease();
    v14 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  v16 = (void *)MEMORY[0x1B5E432E8](0x6465747563657865, 0xED0000736B736154);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v14, v16);
  swift_unknownObjectRelease();

  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_entities);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v31[1] = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_entities);
      v32 = with.super.isa;
      v19 = v17 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      v20 = *(_QWORD *)(v4 + 72);
      v36 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
      v37 = v20;
      swift_bridgeObjectRetain_n();
      v38 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v21 = 136315138;
      v34 = v21;
      v33 = MEMORY[0x1E0DEE9B8] + 8;
      v35 = v6;
      do
      {
        v36(v6, v19, v3);
        type metadata accessor for JSONEncoder();
        swift_allocObject();
        JSONEncoder.init()();
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RREntity and conformance RREntity, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3E50], MEMORY[0x1E0DA3E60]);
        v22 = dispatch thunk of JSONEncoder.encode<A>(_:)();
        v24 = v23;
        swift_release();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v25 = v38;
        else
          v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
        v27 = v25[2];
        v26 = v25[3];
        if (v27 >= v26 >> 1)
          v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v27 + 1, 1, v25);
        v25[2] = v27 + 1;
        v38 = v25;
        v28 = &v25[2 * v27];
        v28[4] = v22;
        v28[5] = v24;
        v19 += v37;
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease_n();
      with.super.isa = v32;
      v10 = &selRef_reason;
    }
    v29 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = 0;
  }
  v30 = (void *)MEMORY[0x1B5E432E8](0x7365697469746E65, 0xE800000000000000);
  objc_msgSend(with.super.isa, v10[34], v29, v30);
  swift_unknownObjectRelease();

}

id ConversationalContextContainer.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ConversationalContextContainer.init(coder:)(a1);
}

id ConversationalContextContainer.init(coder:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  unint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  id v58;
  objc_class *v59;
  uint64_t v61;
  char *v62;
  id v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  objc_super v73;
  __int128 v74;
  __int128 v75;
  _QWORD v76[3];
  uint64_t v77;

  v3 = type metadata accessor for RREntity();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v70 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v61 - v8;
  v10 = MEMORY[0x1E0C80A78](v7);
  v68 = (char *)&v61 - v11;
  MEMORY[0x1E0C80A78](v10);
  v67 = (char *)&v61 - v12;
  v13 = v1;
  v14 = (void *)MEMORY[0x1B5E432E8](0xD000000000000010, 0x80000001B4EF4BD0);
  v15 = objc_msgSend(a1, sel_decodeObjectForKey_, v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v74 = 0u;
    v75 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v74, (uint64_t)v76);
  v16 = MEMORY[0x1E0DEE9B8];
  if (v77)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
    if (!swift_dynamicCast())
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_1B4BE6000, v21, v22, "Failed to decode the SystemDialogAct", v23, 2u);
        MEMORY[0x1B5E44758](v23, -1, -1);
      }

      goto LABEL_58;
    }
    v17 = specialized Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)(v72);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v17 = 0;
  }
  *(_QWORD *)&v13[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_systemDialogActs] = v17;
  v18 = (void *)MEMORY[0x1B5E432E8](0x6154657669746361, 0xEB00000000736B73);
  v19 = objc_msgSend(a1, sel_decodeObjectForKey_, v18);

  if (v19)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v74 = 0u;
    v75 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v74, (uint64_t)v76);
  v71 = v9;
  if (v77)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
    if (!swift_dynamicCast())
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_1B4BE6000, v29, v30, "Failed to decode the Active Tasks", v31, 2u);
        MEMORY[0x1B5E44758](v31, -1, -1);
      }

      goto LABEL_39;
    }
    v66 = v4;
    v24 = v3;
    v25 = specialized Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)(v72);
    swift_bridgeObjectRelease();
  }
  else
  {
    v66 = v4;
    v24 = v3;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v25 = 0;
  }
  *(_QWORD *)&v13[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_activeTasks] = v25;
  v26 = (void *)MEMORY[0x1B5E432E8](0x6465747563657865, 0xED0000736B736154);
  v27 = objc_msgSend(a1, sel_decodeObjectForKey_, v26);

  if (v27)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v74 = 0u;
    v75 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v74, (uint64_t)v76);
  if (!v77)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v32 = 0;
    goto LABEL_32;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  if (!swift_dynamicCast())
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.conversationBridge);
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1B4BE6000, v36, v37, "Failed to decode the Executed Tasks", v38, 2u);
      MEMORY[0x1B5E44758](v38, -1, -1);
    }

    swift_bridgeObjectRelease();
LABEL_39:
    swift_bridgeObjectRelease();

    goto LABEL_58;
  }
  v32 = specialized Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)(v72);
  swift_bridgeObjectRelease();
LABEL_32:
  *(_QWORD *)&v13[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_executedTasks] = v32;
  v33 = (void *)MEMORY[0x1B5E432E8](0x7365697469746E65, 0xE800000000000000);
  v34 = objc_msgSend(a1, sel_decodeObjectForKey_, v33);

  if (v34)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v74 = 0u;
    v75 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v74, (uint64_t)v76);
  if (!v77)
  {
    v63 = a1;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v53 = 0;
LABEL_62:
    *(_QWORD *)&v13[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_entities] = v53;

    v59 = (objc_class *)type metadata accessor for ConversationalContextContainer();
    v73.receiver = v13;
    v73.super_class = v59;
    v58 = objc_msgSendSuper2(&v73, sel_init);

    return v58;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v63 = a1;
    v62 = v13;
    v39 = v72;
    v40 = *(_QWORD *)(v72 + 16);
    if (v40)
    {
      type metadata accessor for JSONDecoder();
      swift_bridgeObjectRetain();
      v61 = v39;
      v41 = v39 + 40;
      v69 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v42 = 136315138;
      v65 = v42;
      v64 = v16 + 8;
      v43 = v24;
      v44 = v66;
      do
      {
        swift_allocObject();
        JSONDecoder.init()();
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RREntity and conformance RREntity, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3E50], MEMORY[0x1E0DA3E68]);
        v45 = v71;
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        swift_release();
        v46 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
        v47 = v68;
        v46(v68, v45, v43);
        v48 = v67;
        v46(v67, v47, v43);
        v46(v70, v48, v43);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v49 = v69;
        else
          v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v69 + 16) + 1, 1, v69);
        v51 = *(_QWORD *)(v49 + 16);
        v50 = *(_QWORD *)(v49 + 24);
        if (v51 >= v50 >> 1)
          v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1, v49);
        *(_QWORD *)(v49 + 16) = v51 + 1;
        v52 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
        v69 = v49;
        v46((char *)(v49 + v52 + *(_QWORD *)(v44 + 72) * v51), v70, v43);
        v41 += 16;
        --v40;
      }
      while (v40);
      swift_bridgeObjectRelease();
    }
    else
    {
      v69 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    v13 = v62;
    v53 = v69;
    goto LABEL_62;
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v54 = type metadata accessor for Logger();
  __swift_project_value_buffer(v54, (uint64_t)static Logger.conversationBridge);
  v55 = Logger.logObject.getter();
  v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v57 = 0;
    _os_log_impl(&dword_1B4BE6000, v55, v56, "Failed to decode the entities", v57, 2u);
    MEMORY[0x1B5E44758](v57, -1, -1);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
LABEL_58:
  type metadata accessor for ConversationalContextContainer();
  swift_deallocPartialClassInstance();
  return 0;
}

unint64_t specialized Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v2);
  v25 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_SystemDialogAct?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v24 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v23 = (char *)v22 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v22[1] = a1;
  v13 = (unint64_t *)(a1 + 40);
  v14 = MEMORY[0x1E0DEE9D8];
  do
  {
    v15 = *(v13 - 1);
    v16 = *v13;
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    outlined copy of Data._Representation(v15, v16);
    outlined copy of Data._Representation(v15, v16);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F6B0], MEMORY[0x1E0D9F688]);
    Message.init(serializedData:extensions:partial:options:)();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    outlined consume of Data._Representation(v15, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for Siri_Nlu_External_SystemDialogAct?);
    }
    else
    {
      v17 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v18 = v23;
      v17(v23, v6, v7);
      v17(v24, v18, v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
      v20 = *(_QWORD *)(v14 + 16);
      v19 = *(_QWORD *)(v14 + 24);
      if (v20 >= v19 >> 1)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v14);
      *(_QWORD *)(v14 + 16) = v20 + 1;
      v17((char *)(v14+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v20), v24, v7);
    }
    v13 += 2;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v14;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v2);
  v25 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nlu_External_Task();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v24 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v23 = (char *)v22 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v22[1] = a1;
  v13 = (unint64_t *)(a1 + 40);
  v14 = MEMORY[0x1E0DEE9D8];
  do
  {
    v15 = *(v13 - 1);
    v16 = *v13;
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    outlined copy of Data._Representation(v15, v16);
    outlined copy of Data._Representation(v15, v16);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F0B8], MEMORY[0x1E0D9F090]);
    Message.init(serializedData:extensions:partial:options:)();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    outlined consume of Data._Representation(v15, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for Siri_Nlu_External_Task?);
    }
    else
    {
      v17 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v18 = v23;
      v17(v23, v6, v7);
      v17(v24, v18, v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
      v20 = *(_QWORD *)(v14 + 16);
      v19 = *(_QWORD *)(v14 + 24);
      if (v20 >= v19 >> 1)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v14);
      *(_QWORD *)(v14 + 16) = v20 + 1;
      v17((char *)(v14+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v20), v24, v7);
    }
    v13 += 2;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v14;
}

id ConversationalContextContainer.__allocating_init(serializedBackingStore:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ConversationalContextContainer.init(serializedBackingStore:)(a1);
}

id ConversationalContextContainer.init(serializedBackingStore:)(uint64_t a1)
{
  void *v1;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint8_t *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id v22;
  unint64_t v24;
  uint64_t v25;
  objc_super v26;
  char *v27;
  unint64_t v28;
  _QWORD v29[4];

  outlined init with copy of Any(a1, (uint64_t)v29);
  v3 = v1;
  v4 = &unk_1EF0E3000;
  v5 = &unk_1EF0E3000;
  v6 = &unk_1EF0E3000;
  if ((swift_dynamicCast() & 1) == 0)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1B4BE6000, v8, v9, "The backing store for conversational context is not of type Data", v10, 2u);
      v11 = v10;
      v4 = &unk_1EF0E3000;
      MEMORY[0x1B5E44758](v11, -1, -1);
    }

    goto LABEL_14;
  }
  type metadata accessor for NSKeyedUnarchiver();
  static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)();
  if (!v29[3])
  {
    outlined consume of Data._Representation((uint64_t)v27, v28);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_14:
    v16 = 0;
    v15 = 0;
    v14 = 0;
    v13 = 0;
    goto LABEL_15;
  }
  type metadata accessor for ConversationalContextContainer();
  if ((swift_dynamicCast() & 1) == 0)
  {
    outlined consume of Data._Representation((uint64_t)v27, v28);
    goto LABEL_14;
  }
  v24 = v28;
  v25 = (uint64_t)v27;
  v12 = v27;
  v13 = *(_QWORD *)&v27[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_systemDialogActs];
  v14 = *(_QWORD *)&v27[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_activeTasks];
  v15 = *(_QWORD *)&v27[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_executedTasks];
  v16 = *(_QWORD *)&v27[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_entities];
  v17 = one-time initialization token for conversationBridge;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17 != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1B4BE6000, v19, v20, "Decoded the ConversationalContextContainer", v21, 2u);
    MEMORY[0x1B5E44758](v21, -1, -1);
    outlined consume of Data._Representation(v25, v24);

  }
  else
  {
    outlined consume of Data._Representation((uint64_t)v27, v28);

  }
  v6 = (_QWORD *)&unk_1EF0E3000;
  v5 = (_QWORD *)&unk_1EF0E3000;
  v4 = (_QWORD *)&unk_1EF0E3000;
LABEL_15:
  *(_QWORD *)&v3[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_systemDialogActs] = v13;
  *(_QWORD *)&v3[v4[87]] = v14;
  *(_QWORD *)&v3[v5[88]] = v15;
  *(_QWORD *)&v3[v6[89]] = v16;

  v26.receiver = v3;
  v26.super_class = (Class)type metadata accessor for ConversationalContextContainer();
  v22 = objc_msgSendSuper2(&v26, sel_init);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v22;
}

void ConversationalContextContainer.serializedBackingStore()(uint64_t *a1@<X8>)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  id v20[2];

  v20[1] = *(id *)MEMORY[0x1E0C80C00];
  v20[0] = 0;
  v3 = objc_msgSend((id)objc_opt_self(), sel_archivedDataWithRootObject_requiringSecureCoding_error_, v1, 1, v20);
  v4 = v20[0];
  if (v3)
  {
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

  }
  else
  {
    v8 = v4;
    v9 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    v11 = v9;
    v12 = v9;
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = (void *)swift_slowAlloc();
      v20[0] = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = v9;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v18 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, (uint64_t *)v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v13, v14, "Failed to encode the context: %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v16, -1, -1);
      MEMORY[0x1B5E44758](v15, -1, -1);

    }
    else
    {

    }
    v5 = 0;
    v7 = 0xC000000000000000;
  }
  a1[3] = MEMORY[0x1E0CB0338];
  *a1 = v5;
  a1[1] = v7;
}

id ConversationalContextContainer.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ConversationalContextContainer.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ConversationalContextContainer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationalContextContainer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

_QWORD *specialized Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);

  v27 = a2;
  v7 = a2(0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v12 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v25 = *(_QWORD *)(v8 + 72);
  v26 = v8;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v21 = a1;
  swift_bridgeObjectRetain();
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v22 = a3;
  v23 = a4;
  do
  {
    v24(v10, v12, v7);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(a3, v27, a4);
    v14 = Message.serializedData(partial:)();
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v7);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    v18 = v13[2];
    v17 = v13[3];
    if (v18 >= v17 >> 1)
      v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v13);
    v13[2] = v18 + 1;
    v19 = &v13[2 * v18];
    v19[4] = v14;
    v19[5] = v16;
    a3 = v22;
    a4 = v23;
    v12 += v25;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSKeyedUnarchiver()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSKeyedUnarchiver;
  if (!lazy cache variable for type metadata for NSKeyedUnarchiver)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSKeyedUnarchiver);
  }
  return result;
}

uint64_t method lookup function for ConversationalContextContainer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationalContextContainer.__allocating_init(dialogActs:activeTasks:executedTasks:entities:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ConversationalContextContainer.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ConversationalContextContainer.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ConversationalContextContainer.__allocating_init(serializedBackingStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of ConversationalContextContainer.serializedBackingStore()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t (*specialized closure #1 in ConversationRequestAwareBridgeBase.registerMessages()())(uint64_t a1)
{
  swift_retain();
  return partial apply for specialized closure #1 in closure #1 in ConversationRequestAwareBridgeBase.registerMessages();
}

uint64_t (*specialized closure #2 in ConversationRequestAwareBridgeBase.registerMessages()())(uint64_t a1)
{
  swift_retain();
  return partial apply for specialized closure #1 in closure #2 in ConversationRequestAwareBridgeBase.registerMessages();
}

uint64_t specialized ConversationMessageDispatchingBridgeBase.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + direct field offset for ConversationMessageDispatchingBridgeBase.logger;
  v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t static ConversationBridgeSPI.isEnabled.getter()
{
  unsigned __int8 *v0;
  os_unfair_lock_s *v1;
  unsigned __int8 v3;

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  v0 = (unsigned __int8 *)(static ConversationBridgeFeatureFlag.forceEnabled + 16);
  v1 = (os_unfair_lock_s *)(static ConversationBridgeFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static ConversationBridgeFeatureFlag.forceEnabled + 20));
  closure #1 in ConversationBridgeFeatureFlag.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

uint64_t ConversationBridgeSPI.asyncQueue.getter()
{
  return swift_retain();
}

uint64_t ConversationBridgeSPI.impl.getter()
{
  return swift_retain();
}

id ConversationBridgeSPI.queue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

_QWORD *ConversationBridgeSPI.__allocating_init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;

  swift_allocObject();
  v12 = specialized ConversationBridgeSPI.init(_:_:_:_:_:)(a1, a2, a3, a4, a5, a6);
  swift_unknownObjectRelease();
  return v12;
}

_QWORD *ConversationBridgeSPI.init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6 = specialized ConversationBridgeSPI.init(_:_:_:_:_:)(a1, a2, a3, a4, a5, a6);
  swift_unknownObjectRelease();
  return v6;
}

_QWORD *ConversationBridge.__allocating_init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;

  swift_allocObject();
  v12 = specialized ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:)(a1, a2, a3, a4, a5, a6);
  swift_unknownObjectRelease();
  return v12;
}

uint64_t ConversationBridgeSPI.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationBridgeSPI.messageTypesForSubscription()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 24) + 232))();
}

uint64_t ConversationBridgeSPI.aceCommandsGroups()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 24) + 240))();
}

uint64_t ConversationBridgeSPI.aceCommands(forGroup:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 24) + 248))();
}

uint64_t ConversationBridgeSPI.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ConversationBridgeSPI.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for QueueIsolatedBridge.init(_:_:_:_:_:) in conformance ConversationBridgeSPI()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t protocol witness for Bridge.messageTypesForSubscription() in conformance ConversationBridgeSPI()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t protocol witness for Bridge.aceCommandsGroups() in conformance ConversationBridgeSPI()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t protocol witness for Bridge.aceCommands(forGroup:) in conformance ConversationBridgeSPI()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t ConversationBridge.executionOutputSubmitter.getter()
{
  return swift_retain();
}

uint64_t ConversationBridge.overrideExecutionClient.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + direct field offset for ConversationBridge.overrideExecutionClient, a1, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
}

uint64_t key path setter for ConversationBridge.runSiriKitExecutorProcessor : ConversationBridge(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + direct field offset for ConversationBridge.runSiriKitExecutorProcessor);
  swift_beginAccess();
  *v3 = v2;
  swift_retain();
  return swift_release();
}

uint64_t ConversationBridge.runSiriKitExecutorProcessor.getter()
{
  return ConversationBridge.runSiriKitExecutorProcessor.getter();
}

{
  swift_beginAccess();
  return swift_retain();
}

_QWORD *closure #1 in ConversationBridge.executionClient.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8[2];

  outlined init with copy of ReferenceResolutionClientProtocol?(a1 + direct field offset for ConversationBridge.overrideExecutionClient, (uint64_t)&v6, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  if (v7)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v6, (uint64_t)v8);
    return (_QWORD *)outlined init with take of ReferenceResolutionClientProtocol(v8, (uint64_t)a2);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v6, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
    v4 = swift_allocObject();
    swift_weakInit();
    v5 = type metadata accessor for ConversationRuntimeClient();
    swift_allocObject();
    result = ConversationRuntimeClient.init(onConnectionInterrupted:)((uint64_t)partial apply for closure #1 in closure #1 in ConversationBridge.executionClient.getter, v4);
    a2[3] = v5;
    a2[4] = &protocol witness table for ConversationRuntimeClient;
    *a2 = result;
  }
  return result;
}

uint64_t closure #1 in closure #1 in ConversationBridge.executionClient.getter(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE v12[24];

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    v7 = type metadata accessor for TaskPriority();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
    swift_retain();
    v8 = a1;
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v9 = static MessageBusActor.shared;
    v10 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, 255, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = v9;
    v11[3] = v10;
    v11[4] = v6;
    v11[5] = a1;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in ConversationBridge.executionClient.getter, (uint64_t)v11);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationBridge.executionClient.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationBridge.executionClient.getter()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(**(_QWORD **)(v0 + 40) + 1136))(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationBridge.executionClient.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[40];

  outlined init with take of ReferenceResolutionClientProtocol(a1, (uint64_t)v4);
  v2 = v1 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v4, v2, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  return swift_endAccess();
}

void (*ConversationBridge.executionClient.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  ConversationBridge.executionClient.getter(v3);
  return ConversationBridge.executionClient.modify;
}

void ConversationBridge.executionClient.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)*a1;
  v3 = (__int128 *)(*a1 + 40);
  v4 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    v5 = v2[18];
    outlined init with copy of ReferenceResolutionClientProtocol(*a1, (uint64_t)v3);
    outlined init with take of ReferenceResolutionClientProtocol(v3, v4);
    v6 = v5 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient;
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v4, v6, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    v7 = v2[18];
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)*a1, (uint64_t)v3);
    v8 = v7 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient;
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v3, v8, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
    swift_endAccess();
  }
  free(v2);
}

uint64_t NonRequestExecutionBridgeDelegate.__allocating_init(executionOutputSubmitter:userId:serviceHelper:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  outlined init with take of UserID?(a2, v6 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_userId);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_serviceHelper) = a3;
  return v6;
}

uint64_t ConversationBridge.nonRequestBridgePublisher.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher) = a1;
  return swift_release();
}

uint64_t (*ConversationBridge.nonRequestBridgePublisher.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = ConversationBridge.nonRequestBridgePublisher.getter();
  return ConversationBridge.nonRequestBridgePublisher.modify;
}

uint64_t ConversationBridge.nonRequestBridgePublisher.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher) = *a1;
  return swift_release();
}

uint64_t ConversationBridge.rraasClient.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &direct field offset for ConversationBridge.rraasClient, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
}

uint64_t (*ConversationBridge.rraasClient.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ConversationBridge.correctionsPlatformClient.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &direct field offset for ConversationBridge.correctionsPlatformClient, (uint64_t *)&demangling cache variable for type metadata for CorrectionsHandling?);
}

uint64_t (*ConversationBridge.correctionsPlatformClient.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationBridge.networkAvailabilityProvider.setter(uint64_t a1)
{
  return ConversationBridge.networkAvailabilityProvider.setter(a1, &direct field offset for ConversationBridge.networkAvailabilityProvider);
}

uint64_t (*ConversationBridge.networkAvailabilityProvider.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationBridge.coreTelephonyServiceProvider.setter(uint64_t a1)
{
  return ConversationBridge.networkAvailabilityProvider.setter(a1, &direct field offset for ConversationBridge.coreTelephonyServiceProvider);
}

uint64_t ConversationBridge.networkAvailabilityProvider.setter(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_release();
}

uint64_t (*ConversationBridge.coreTelephonyServiceProvider.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ConversationBridge.currentSessionId : ConversationBridge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 888))(v6);
}

uint64_t ConversationBridge.currentSessionId.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &direct field offset for ConversationBridge.currentSessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t (*ConversationBridge.currentSessionId.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationBridge.sessionState.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &direct field offset for ConversationBridge.sessionState, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
}

uint64_t (*ConversationBridge.sessionState.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ConversationBridge.sessionUserId : ConversationBridge(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 936))(v6);
}

uint64_t ConversationBridge.sessionUserId.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &direct field offset for ConversationBridge.sessionUserId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
}

uint64_t (*ConversationBridge.sessionUserId.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationBridge.isMUXEnabled.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + direct field offset for ConversationBridge.isMUXEnabled);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ConversationBridge.isMUXEnabled.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

void ConversationBridge.muxContextMessage.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + direct field offset for ConversationBridge.muxContextMessage);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*ConversationBridge.muxContextMessage.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationBridge.recentDialogTracker.getter()
{
  return swift_retain();
}

_QWORD *ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6 = specialized ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:)(a1, a2, a3, a4, a5, a6);
  swift_unknownObjectRelease();
  return v6;
}

_QWORD *ConversationBridge.__allocating_init(name:messagePublisher:serviceHelper:conversationSessionsManaging:conversationClient:rrClient:correctionsPlatformClient:networkAvailabilityProvider:coreTelephonyServiceProvider:recentDialogTracker:isSystemAssistantExperienceSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  swift_allocObject();
  return ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:conversationClient:rrClient:correctionsPlatformClient:networkAvailabilityProvider:coreTelephonyServiceProvider:recentDialogTracker:isSystemAssistantExperienceSupported:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

_QWORD *ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:conversationClient:rrClient:correctionsPlatformClient:networkAvailabilityProvider:coreTelephonyServiceProvider:recentDialogTracker:isSystemAssistantExperienceSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v12;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void (*v54)(__int128 *__return_ptr, uint64_t);
  uint64_t v55;
  id v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE v75[24];
  ValueMetadata *v76;
  unint64_t v77;
  __int128 v78;

  v70 = a8;
  v71 = a7;
  v73 = a3;
  v69 = a2;
  v68 = a1;
  v66 = type metadata accessor for Logger();
  v65 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66);
  v67 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (uint64_t *)(v12 + direct field offset for ConversationBridge.contextDonator);
  v18 = one-time initialization token for sharedInstance;
  swift_retain();
  if (v18 != -1)
    swift_once();
  v72 = a5;
  v64 = a11;
  v63 = a10;
  v74 = a9;
  v19 = static DeviceContextHelper.sharedInstance;
  v17[3] = type metadata accessor for DeviceContextHelper();
  v17[4] = (uint64_t)&protocol witness table for DeviceContextHelper;
  *v17 = v19;
  *(_QWORD *)(v12 + direct field offset for ConversationBridge.runSiriKitExecutorProcessor) = 0;
  *(_BYTE *)(v12 + direct field offset for ConversationBridge.isFirstRequestInSession) = 1;
  v20 = v12 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient;
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v12 + direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher) = 0;
  v21 = v12 + direct field offset for ConversationBridge.rraasClient;
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_QWORD *)(v21 + 32) = 0;
  v22 = v12 + direct field offset for ConversationBridge.correctionsPlatformClient;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  v58 = v22;
  *(_QWORD *)(v22 + 32) = 0;
  v59 = (_QWORD *)(v12 + direct field offset for ConversationBridge.networkAvailabilityProvider);
  *(_QWORD *)(v12 + direct field offset for ConversationBridge.networkAvailabilityProvider) = 0;
  v60 = (_QWORD *)(v12 + direct field offset for ConversationBridge.coreTelephonyServiceProvider);
  *(_QWORD *)(v12 + direct field offset for ConversationBridge.coreTelephonyServiceProvider) = 0;
  v23 = v12 + direct field offset for ConversationBridge.currentSessionId;
  v24 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = v12 + direct field offset for ConversationBridge.sessionState;
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_QWORD *)(v25 + 32) = 0;
  v26 = v12 + direct field offset for ConversationBridge.sessionUserId;
  v27 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = (char *)(v12 + direct field offset for ConversationBridge.isMUXEnabled);
  swift_retain();
  *v28 = AFDeviceSupportsSiriMUX();
  *(_QWORD *)(v12 + direct field offset for ConversationBridge.muxContextMessage) = 0;
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  v61 = a12;
  v29 = direct field offset for ConversationBridge.instrumentationUtil;
  *(_QWORD *)(v12 + direct field offset for ConversationBridge.instrumentationUtil) = static ConversationBridgeInstrumentationUtil.sharedInstance;
  v62 = a6;
  outlined init with copy of ReferenceResolutionClientProtocol(a6, v12 + direct field offset for ConversationBridge.overrideExecutionClient);
  swift_beginAccess();
  v30 = *v28;
  v31 = v73;
  outlined init with copy of ReferenceResolutionClientProtocol(v73, (uint64_t)&v78);
  type metadata accessor for FeatureChecker();
  v32 = swift_allocObject();
  swift_retain();
  swift_unknownObjectRetain();
  *(_BYTE *)(v32 + 16) = AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags();
  v76 = &type metadata for IntelligenceFlowFeatureFlag;
  v77 = lazy protocol witness table accessor for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag();
  v33 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  *(_BYTE *)(v32 + 17) = v33 & 1;
  type metadata accessor for ConversationOutputSubmitter();
  v34 = swift_allocObject();
  v35 = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:featureChecker:)(a4, v30, &v78, v32, v34);
  *(_QWORD *)(v12 + direct field offset for ConversationBridge.executionOutputSubmitter) = v35;
  type metadata accessor for PreExecutionDecisionMaker();
  *(_QWORD *)(v12 + direct field offset for ConversationBridge.decisionMaker) = swift_allocObject();
  v36 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  type metadata accessor for PreExecutionActionHandler();
  swift_getObjectType();
  v37 = *(_QWORD *)(v12 + v29);
  type metadata accessor for PreExecutionDialogHandler();
  v38 = swift_allocObject();
  *(_QWORD *)(v38 + 16) = v35;
  *(_QWORD *)(v38 + 24) = v36;
  swift_retain_n();
  v39 = v36;
  swift_unknownObjectRetain();
  v40 = v39;
  swift_retain();
  v57 = v40;
  v41 = (uint64_t)v40;
  v42 = v31;
  *(_QWORD *)(v12 + direct field offset for ConversationBridge.preExecutionActionHandler) = specialized PreExecutionActionHandler.__allocating_init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(a4, v37, v35, v41, v38);
  swift_beginAccess();
  v43 = v71;
  outlined assign with copy of ReferenceResolutionClientProtocol?(v71, v21, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  swift_endAccess();
  v44 = v58;
  swift_beginAccess();
  v45 = v70;
  outlined assign with copy of ReferenceResolutionClientProtocol?(v70, v44, (uint64_t *)&demangling cache variable for type metadata for CorrectionsHandling?);
  swift_endAccess();
  v46 = v59;
  swift_beginAccess();
  *v46 = v74;
  swift_retain();
  swift_release();
  v47 = v60;
  swift_beginAccess();
  *v47 = v63;
  swift_retain();
  swift_release();
  *(_QWORD *)(v12 + direct field offset for ConversationBridge.recentDialogTracker) = v64;
  swift_retain();
  swift_release();
  outlined init with copy of ReferenceResolutionClientProtocol(v42, (uint64_t)&v78);
  v48 = v72;
  outlined init with copy of ReferenceResolutionClientProtocol(v72, (uint64_t)v75);
  v49 = one-time initialization token for conversationBridge;
  swift_unknownObjectRetain();
  if (v49 != -1)
    swift_once();
  v50 = v66;
  v51 = __swift_project_value_buffer(v66, (uint64_t)static Logger.conversationBridge);
  v52 = (uint64_t)v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v67, v51, v50);
  v53 = specialized ConversationRequestAwareBridgeBase.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(v68, v69, (uint64_t)&v78, a4, (uint64_t)v75, 1, v52);
  swift_unknownObjectRelease();
  v54 = *(void (**)(__int128 *__return_ptr, uint64_t))(*v53 + 736);
  v55 = swift_retain();
  v54(&v78, v55);
  (*(void (**)(__int128 *))(*v53 + 744))(&v78);
  ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(v61 & 1);

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v45, (uint64_t *)&demangling cache variable for type metadata for CorrectionsHandling?);
  outlined destroy of ReferenceResolutionClientProtocol?(v43, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  __swift_destroy_boxed_opaque_existential_1(v62);
  __swift_destroy_boxed_opaque_existential_1(v48);
  __swift_destroy_boxed_opaque_existential_1(v73);
  return v53;
}

uint64_t ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v4)(uint64_t (*(*)())(uint64_t), _QWORD, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t (*(*)())(uint64_t), _QWORD, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t started;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  void (*v54)(uint64_t (*(*)())(uint64_t, uint64_t, uint64_t, uint64_t), _QWORD, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v62)(uint64_t (*(*)())(uint64_t, uint64_t, uint64_t, uint64_t), _QWORD, uint64_t);

  v2 = v1;
  v4 = *(void (**)(uint64_t (*(*)())(uint64_t), _QWORD, uint64_t))(*(_QWORD *)v1 + 288);
  v5 = type metadata accessor for SessionStartedMessage();
  v4(closure #1 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v5);
  v6 = type metadata accessor for SessionEndedMessage();
  v4(closure #2 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v6);
  v7 = type metadata accessor for MUXContextMessage();
  v4(closure #3 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v7);
  v8 = type metadata accessor for ExecutionSystemSwitchedMessage();
  v4(closure #4 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v8);
  v9 = *(void (**)(uint64_t (*(*)())(uint64_t), _QWORD, uint64_t))(*(_QWORD *)v1 + 464);
  v10 = type metadata accessor for FlowOutputResponseMessage();
  v9(closure #5 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v10);
  v11 = type metadata accessor for RequestContextMessage();
  v9(closure #6 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v11);
  v12 = type metadata accessor for AsrResultCandidateMessage();
  v9(closure #7 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v12);
  v13 = type metadata accessor for MUXAsrResultCandidateMessage();
  v9(closure #8 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v13);
  v14 = type metadata accessor for MultiUserTRPCandidateRequestMessage();
  v9(closure #9 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v14);
  v15 = type metadata accessor for UserIdentificationMessage();
  v9(closure #10 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v15);
  v16 = type metadata accessor for NLResultCandidateMessage();
  v9(closure #11 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v16);
  v17 = type metadata accessor for PommesResultCandidateMessage();
  v9(closure #12 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v17);
  v18 = type metadata accessor for ResultSelectedMessage();
  v9(closure #13 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v18);
  v19 = type metadata accessor for CancelRequestMessage();
  v9(closure #14 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v19);
  v20 = type metadata accessor for ExecuteNLOnServerMessage();
  v9(closure #15 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v20);
  started = type metadata accessor for StartTextRequestMessage();
  v9(closure #16 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, started);
  v22 = type metadata accessor for StartDirectActionRequestMessage();
  v9(closure #17 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v22);
  v23 = type metadata accessor for StartLocalRequestMessage();
  v9(closure #18 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v23);
  v24 = type metadata accessor for StartUnderstandingOnServerRequestMessage();
  v9(closure #19 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v24);
  v25 = type metadata accessor for StartUnderstandingOnServerTextRequestMessage();
  v9(closure #20 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v25);
  v26 = type metadata accessor for StartCandidateRequestMessage();
  v9(closure #21 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v26);
  v27 = type metadata accessor for TextBasedResultCandidateMessage();
  v9(closure #22 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v27);
  v28 = type metadata accessor for GestureBasedResultCandidateMessage();
  v9(closure #23 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v28);
  v29 = type metadata accessor for DirectActionResultCandidateMessage();
  v9(closure #24 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v29);
  v30 = type metadata accessor for NLRepetitionMessage();
  v9(closure #25 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v30);
  v31 = type metadata accessor for StartCorrectedSpeechRequestMessage();
  v9(closure #26 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v31);
  v32 = type metadata accessor for StartSpeechRequestMessage();
  v9(closure #27 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v32);
  v33 = type metadata accessor for StartChildTextRequestMessage();
  v9(closure #28 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v33);
  v34 = type metadata accessor for StartChildSpeechRequestMessage();
  v9(closure #29 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v34);
  v35 = type metadata accessor for StartIFRequestMessage();
  v9(closure #30 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v35);
  v36 = type metadata accessor for TRPCandidateRequestMessage();
  v9(closure #31 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v36);
  v37 = type metadata accessor for TextBasedTRPCandidateMessage();
  v9(closure #32 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v37);
  v38 = type metadata accessor for TTResponseMessage();
  v9(closure #33 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v38);
  v39 = type metadata accessor for SpeechStopDetectedMessage();
  v9(closure #34 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v39);
  v40 = type metadata accessor for MultiUserStoppedListeningForSpeechContinuationMessage();
  v9(closure #35 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v40);
  v41 = type metadata accessor for StoppedListeningForSpeechContinuationMessage();
  v9(closure #36 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v41);
  v42 = type metadata accessor for StoppedListeningForTextContinuationMessage();
  v9(closure #37 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v42);
  v43 = type metadata accessor for RunPommesResponseMessage();
  v9((uint64_t (*(*)())(uint64_t))closure #38 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v43);
  v44 = type metadata accessor for PommesTRPCandidateMessage();
  v9(closure #39 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v44);
  if ((a1 & 1) != 0)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.conversationBridge);
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      _os_log_impl(&dword_1B4BE6000, v46, v47, "AssistantEngine feature flag is enabled, listening for RunSiriKitExecutorMessage on message bus instead of RunSiriKitExecutor ACE command", v48, 2u);
      MEMORY[0x1B5E44758](v48, -1, -1);
    }

    v49 = type metadata accessor for RunSiriKitExecutorMessage();
    v4(closure #40 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v49);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.conversationBridge);
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_1B4BE6000, v51, v52, "AssistantEngine feature flag is disabled, listening for RunSiriKitExecutor ACE command instead of RunSiriKitExecutorMessage from message bus", v53, 2u);
      MEMORY[0x1B5E44758](v53, -1, -1);
    }

    v54 = *(void (**)(uint64_t (*(*)())(uint64_t, uint64_t, uint64_t, uint64_t), _QWORD, uint64_t))(*(_QWORD *)v2 + 296);
    v55 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor);
    v54(closure #41 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v55);
  }
  v62 = *(void (**)(uint64_t (*(*)())(uint64_t, uint64_t, uint64_t, uint64_t), _QWORD, uint64_t))(*(_QWORD *)v2 + 296);
  v56 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDServerContextUpdateCandidate);
  v62(closure #42 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v56);
  v57 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SARDFlowOutputCandidate);
  v62(closure #43 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v57);
  v58 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupSiriKitPluginSignal);
  v62(closure #44 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v58);
  v59 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupSiriKitClearContext);
  v62(closure #45 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v59);
  v60 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDRemoteExecutionContextUpdate);
  return ((uint64_t (*)(uint64_t (*(*)())(uint64_t, uint64_t, uint64_t, uint64_t), _QWORD, uint64_t))v62)(closure #46 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v60);
}

uint64_t (*closure #1 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #1 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #2 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #2 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #3 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #3 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #4 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #4 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #5 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #5 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #6 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #6 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #7 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #7 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #8 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #8 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #9 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #9 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #10 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #10 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #11 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #11 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #12 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #12 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #13 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #13 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #14 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #14 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #15 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #15 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #16 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #16 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #17 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #17 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #18 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #18 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #19 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #19 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #20 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #20 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #21 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #21 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #22 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #22 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #23 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #23 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #24 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #24 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #25 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #25 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #26 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #26 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #27 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #27 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #28 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #28 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #29 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #29 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #30 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #30 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #31 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #31 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #32 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #32 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #33 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #33 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #34 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #34 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #35 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #35 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #36 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #36 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #37 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #37 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #38 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(void *a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #38 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #39 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #39 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #40 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  swift_retain();
  return partial apply for closure #1 in closure #40 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #41 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  return partial apply for closure #1 in closure #41 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #42 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  return partial apply for closure #1 in closure #42 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #43 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  return partial apply for closure #1 in closure #43 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #44 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  return partial apply for closure #1 in closure #44 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #45 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  return partial apply for closure #1 in closure #45 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #46 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  return partial apply for closure #1 in closure #46 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t closure #1 in ConversationBridge.asyncInit()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[10] = a4;
  v5 = type metadata accessor for OSSignpostID();
  v4[11] = v5;
  v4[12] = *(_QWORD *)(v5 - 8);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationBridge.asyncInit()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  _UNKNOWN **v24;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 80);
  v2 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  v3 = os_signpost(_:dso:log:name:signpostID:_:_:)();
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 784))(v3);
  v4 = *(_QWORD *)(v0 + 40);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  if (!v4)
  {
    v5 = *(_QWORD *)(v0 + 80);
    v6 = type metadata accessor for ReferenceResolutionClient();
    v7 = ReferenceResolutionClient.__allocating_init()();
    v23 = v6;
    v24 = (_UNKNOWN **)MEMORY[0x1E0D9C7B0];
    v22[0] = v7;
    (*(void (**)(_QWORD *))(*(_QWORD *)v5 + 792))(v22);
  }
  v8 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 104);
  v20 = *(_QWORD *)(v0 + 120);
  v21 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 88);
  static os_signpost_type_t.end.getter();
  v12 = (void *)static Log.executor;
  os_signpost(_:dso:log:name:signpostID:)();
  v13 = v12;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  v14 = type metadata accessor for CorrectionsPlatformClient();
  swift_allocObject();
  v15 = CorrectionsPlatformClient.init()();
  v23 = v14;
  v24 = &protocol witness table for CorrectionsPlatformClient;
  v22[0] = v15;
  (*(void (**)(_QWORD *))(*(_QWORD *)v11 + 816))(v22);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v16 = v13;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  v17 = SiriEnvironment.networkAvailability.getter();
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 840))(v17);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v18 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  v18(v9, v10);
  v18(v8, v10);
  v18(v20, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void ConversationBridge.handleMUXContextMessage(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  _QWORD *v17;
  id v18;
  char *v19;
  id v20;
  uint8_t *v21;
  void (*v22)(id);
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  id v32;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v29 - v8;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  v12 = a1;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v29 = v11;
    v15 = swift_slowAlloc();
    v30 = v7;
    v16 = (uint8_t *)v15;
    v17 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v16 = 138412290;
    v32 = v12;
    v18 = v12;
    v31 = v2;
    v19 = v9;
    v20 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v17 = v12;

    v9 = v19;
    v2 = v31;
    _os_log_impl(&dword_1B4BE6000, v13, v14, "ExecutionBridge received message: %@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v17, -1, -1);
    v21 = v16;
    v7 = v30;
    MEMORY[0x1B5E44758](v21, -1, -1);

  }
  else
  {

  }
  if (((*(uint64_t (**)(void))(*(_QWORD *)v2 + 952))() & 1) != 0)
  {
    v22 = *(void (**)(id))(*(_QWORD *)v2 + 984);
    v23 = v12;
    v22(v12);
    MUXContextMessage.userIdOfPrimaryUser()((uint64_t)v7);
    v24 = type metadata accessor for UserID();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v7, 1, v24) == 1)
    {
      (*(void (**)(void))(*(_QWORD *)v2 + 928))();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v9, v7, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v9, 0, 1, v24);
    }
    (*(void (**)(char *))(*(_QWORD *)v2 + 936))(v9);
  }
  else
  {
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_1B4BE6000, v26, v27, "Ignoring MUXContextMessage since MUX is not enabled", v28, 2u);
      MEMORY[0x1B5E44758](v28, -1, -1);
    }

  }
}

uint64_t ConversationBridge.handleRunSiriKitExecutorMessage(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = a1;
  swift_retain();
  v6 = (void *)RunSiriKitExecutorMessage.command.getter();
  v7 = (void *)RunSiriKitExecutorMessage.commandExecutionInfo.getter();
  v8 = RunSiriKitExecutorMessage.invocationId.getter();
  v10 = v9;
  swift_retain();
  ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:)((uint64_t)v6, v7, v8, v10, (uint64_t)partial apply for closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:), v4);
  swift_release_n();

  return swift_bridgeObjectRelease();
}

void closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = a3;
  v26 = a1;
  v27 = a2;
  v11 = objc_allocWithZone((Class)type metadata accessor for RunSiriKitExecutorResponseMessage());
  v12 = RunSiriKitExecutorResponseMessage.init(build:)();
  if (v12)
  {
    v13 = (void *)v12;
    v14 = type metadata accessor for TaskPriority();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 1, 1, v14);
    v15 = one-time initialization token for shared;
    swift_retain();
    v16 = v13;
    if (v15 != -1)
      swift_once();
    swift_beginAccess();
    v17 = static MessageBusActor.shared;
    v18 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, 255, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
    v19 = (_QWORD *)swift_allocObject();
    v19[2] = v17;
    v19[3] = v18;
    v19[4] = a4;
    v19[5] = v16;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSb_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:), (uint64_t)v19);

    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1B4BE6000, v21, v22, "Could not build RunSiriKitExecutorResponseMessage: missing fields?", v23, 2u);
      MEMORY[0x1B5E44758](v23, -1, -1);
    }

  }
}

uint64_t closure #1 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v19;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MessageBase.assistantId.getter();
  RunSiriKitExecutorResponseMessage.Builder.assistantId.setter();
  RequestMessageBase.requestId.getter();
  RunSiriKitExecutorResponseMessage.Builder.requestId.setter();
  SessionMessageBase.sessionId.getter();
  v12 = type metadata accessor for UUID();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
  RunSiriKitExecutorResponseMessage.Builder.sessionId.setter();
  v13 = *MEMORY[0x1E0D9E668];
  v14 = type metadata accessor for MessageSource();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v8, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v8, 0, 1, v14);
  RunSiriKitExecutorResponseMessage.Builder.source.setter();
  v16 = a3;
  RunSiriKitExecutorResponseMessage.Builder.response.setter();
  v17 = a4;
  RunSiriKitExecutorResponseMessage.Builder.error.setter();
  RunSiriKitExecutorMessage.invocationId.getter();
  return RunSiriKitExecutorResponseMessage.Builder.invocationId.setter();
}

uint64_t closure #2 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #2 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = *(_BYTE **)(v0 + 40);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 48) + 32), *(_QWORD *)(*(_QWORD *)(v0 + 48) + 56));
  *v1 = dispatch thunk of MessagePublishing.postMessage(_:)() & 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationBridge.handleStartSessionMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  _QWORD *v17;
  id v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD v36[2];
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;

  v2 = v1;
  v36[1] = *v2;
  v4 = type metadata accessor for UUID();
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  MEMORY[0x1E0C80A78](v4);
  v38 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v37 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
  v12 = a1;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v36[0] = v10;
    v16 = (uint8_t *)v15;
    v17 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v16 = 138412290;
    v41[0] = v12;
    v18 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v17 = v12;

    _os_log_impl(&dword_1B4BE6000, v13, v14, "ExecutionBridge received message: %@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v17, -1, -1);
    v19 = v16;
    v10 = (char *)v36[0];
    MEMORY[0x1B5E44758](v19, -1, -1);

  }
  else
  {

  }
  type metadata accessor for ClearExecutionContext();
  v20 = swift_allocObject();
  SessionStartedMessage.userId.getter();
  v21 = type metadata accessor for UserID();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v10, 0, 1, v21);
  v22 = (*(uint64_t (**)(char *))(*v2 + 936))(v10);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*v2 + 736))(v41, v22);
  v23 = v42;
  v24 = v43;
  __swift_project_boxed_opaque_existential_1(v41, v42);
  v25 = (*(uint64_t (**)(void))(*v2 + 760))();
  (*(void (**)(uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v24 + 32))(v20, v25, &protocol witness table for NonRequestExecutionBridgeDelegate, v23, v24);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  if (AFIsInternalInstall() && (SessionStartedMessage.understandingOnDevice.getter() & 1) == 0)
  {
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v28 = v27;
    v29 = (void *)v2[9];
    swift_getObjectType();
    specialized static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(v26, v28, v29, 0, 0, 0, 0);
    swift_bridgeObjectRelease();
  }
  v30 = (char *)v2 + direct field offset for ConversationBridge.isFirstRequestInSession;
  swift_beginAccess();
  *v30 = 1;
  v31 = v37;
  SessionMessageBase.sessionId.getter();
  v33 = v39;
  v32 = v40;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v31, 0, 1, v40);
  (*(void (**)(char *))(*v2 + 888))(v31);
  __swift_project_boxed_opaque_existential_1(v2 + 10, v2[13]);
  v34 = v38;
  SessionMessageBase.sessionId.getter();
  dispatch thunk of ConversationSessionsManaging.conversationSessionState(forConversationSessionId:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
  (*(void (**)(_QWORD *))(*v2 + 912))(v41);
  return swift_release();
}

void static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_getObjectType();
  specialized static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(a1, a2, a3, a4, a5, a6, a7);
}

void ConversationBridge.handleSessionEndedMessage(_:)(void *a1)
{
  uint8_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(uint64_t);
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  char *v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint8_t *v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  void (*v40)(_OWORD *, _QWORD);
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint8_t *v46;
  char *v47;
  id v48;
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v47 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v45 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v45 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v45 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v45 - v19;
  v21 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 880);
  v46 = v1;
  v21(v18);
  v48 = a1;
  SessionMessageBase.sessionId.getter();
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v22(v17, 0, 1, v3);
  v23 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v20, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v17, v23, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v24((uint64_t)v8, 1, v3) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (v24(v23, 1, v3) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_13:
      v38 = v46;
      v39 = v22;
      v40 = (void (*)(_OWORD *, _QWORD))(*(uint64_t (**)(_OWORD *))(*(_QWORD *)v46 + 416))(v49);
      v42 = v41;
      swift_bridgeObjectRelease();
      *v42 = MEMORY[0x1E0DEE9E0];
      v40(v49, 0);
      v43 = v45;
      v39(v45, 1, 1, v3);
      (*(void (**)(char *))(*(_QWORD *)v38 + 888))(v43);
      v50 = 0;
      memset(v49, 0, sizeof(v49));
      v44 = (*(uint64_t (**)(_OWORD *))(*(_QWORD *)v38 + 912))(v49);
      (*(void (**)(uint64_t))(**(_QWORD **)&v38[direct field offset for ConversationBridge.recentDialogTracker]
                                      + 240))(v44);
      return;
    }
    goto LABEL_6;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (v24(v23, 1, v3) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v14, v3);
LABEL_6:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_7;
  }
  v35 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v47, v23, v3);
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
  v36 = dispatch thunk of static Equatable.== infix(_:_:)();
  v37 = *(void (**)(char *, uint64_t))(v4 + 8);
  v37(v35, v3);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v37(v14, v3);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if ((v36 & 1) != 0)
    goto LABEL_13;
LABEL_7:
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
  v26 = v48;
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v48 = (id)swift_slowAlloc();
    *(_QWORD *)&v49[0] = v48;
    *(_DWORD *)v29 = 136315138;
    v46 = v29 + 4;
    v30 = v47;
    SessionMessageBase.sessionId.getter();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v31 = dispatch thunk of CustomStringConvertible.description.getter();
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v30, v3);
    v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, (uint64_t *)v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v27, v28, "SessionId: %s is not the current session, ignoring", v29, 0xCu);
    v34 = v48;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v34, -1, -1);
    MEMORY[0x1B5E44758](v29, -1, -1);

  }
  else
  {

  }
}

void ConversationBridge.handleExecutionSystemSwitchedMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  _BYTE *v37;
  uint64_t v38;
  void (*v39)(_BYTE *, uint64_t, uint64_t);
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  void (*v43)(_BYTE *, uint64_t);
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(void);
  _OWORD *v69;
  _OWORD *v70;
  _OWORD *v71;
  _OWORD *v72;
  _OWORD *v73;
  _OWORD *v74;
  _BYTE *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  id v83;
  NSObject *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  _BYTE v100[4];
  int v101;
  void *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  _BYTE *v106;
  void (*v107)(void);
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  _QWORD *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120[3];
  uint64_t v121;
  uint64_t v122;

  v2 = v1;
  v105 = type metadata accessor for UserID();
  v104 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  v103 = &v100[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for ExecutionSystemSwitchedMessage.SwitchType();
  v109 = *(_QWORD *)(v5 - 8);
  v110 = v5;
  MEMORY[0x1E0C80A78](v5);
  v108 = &v100[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v100[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1E0C80A78](v113);
  v115 = &v100[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v106 = &v100[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = MEMORY[0x1E0C80A78](v13);
  v111 = &v100[-v16];
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = &v100[-v18];
  MEMORY[0x1E0C80A78](v17);
  v21 = &v100[-v20];
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  v26 = os_log_type_enabled(v24, v25);
  v112 = v10;
  v116 = v2;
  v114 = v21;
  if (v26)
  {
    v27 = swift_slowAlloc();
    v107 = (void (*)(void))v23;
    v28 = (uint8_t *)v27;
    v29 = swift_slowAlloc();
    v120[0] = v29;
    *(_DWORD *)v28 = 136315138;
    *(_QWORD *)&v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001B4EF88C0, v120);
    v2 = v116;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v24, v25, "%s", v28, 0xCu);
    swift_arrayDestroy();
    v30 = v29;
    v21 = v114;
    MEMORY[0x1B5E44758](v30, -1, -1);
    v31 = v28;
    v23 = (uint64_t)v107;
    MEMORY[0x1B5E44758](v31, -1, -1);
  }

  v107 = *(void (**)(void))(*v2 + 880);
  v107();
  SessionMessageBase.sessionId.getter();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v19, 0, 1, v7);
  v32 = v115;
  v33 = (uint64_t)&v115[*(int *)(v113 + 48)];
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t)v115, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v19, v33, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v34 = v8;
  v35 = (uint64_t)v21;
  v113 = v34;
  v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  if (v36((uint64_t)v32, 1, v7) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?(v35, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (v36(v33, 1, v7) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  v37 = v111;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v32, (uint64_t)v111, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (v36(v33, 1, v7) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v114, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(_BYTE *, uint64_t))(v113 + 8))(v37, v7);
LABEL_10:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v32, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_18;
  }
  v38 = v113;
  v39 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v113 + 32);
  v102 = a1;
  v40 = v23;
  v41 = v112;
  v39(v112, v33, v7);
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
  v101 = dispatch thunk of static Equatable.== infix(_:_:)();
  v42 = v32;
  v43 = *(void (**)(_BYTE *, uint64_t))(v38 + 8);
  v44 = v41;
  v23 = v40;
  a1 = v102;
  v43(v44, v7);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v114, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v43(v37, v7);
  v45 = (uint64_t)v42;
  v2 = v116;
  outlined destroy of ReferenceResolutionClientProtocol?(v45, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if ((v101 & 1) == 0)
  {
LABEL_18:
    swift_retain_n();
    v83 = a1;
    v84 = Logger.logObject.getter();
    v85 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v84, (os_log_type_t)v85))
    {
      LODWORD(v115) = v85;
      v86 = v113;
      v87 = swift_slowAlloc();
      v114 = (_BYTE *)swift_slowAlloc();
      v120[0] = (uint64_t)v114;
      *(_DWORD *)v87 = 136315394;
      v88 = (uint64_t)v106;
      v107();
      if (v36(v88, 1, v7))
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v88, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v89 = 0xE500000000000000;
        v90 = 0x3E6C696E3CLL;
        v91 = v112;
      }
      else
      {
        v91 = v112;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v86 + 16))(v112, v88, v7);
        outlined destroy of ReferenceResolutionClientProtocol?(v88, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v90 = UUID.uuidString.getter();
        v89 = v92;
        (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v91, v7);
      }
      *(_QWORD *)&v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v89, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v87 + 12) = 2080;
      SessionMessageBase.sessionId.getter();
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v93 = dispatch thunk of CustomStringConvertible.description.getter();
      v95 = v94;
      (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v91, v7);
      *(_QWORD *)&v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v95, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v84, (os_log_type_t)v115, "SessionId mismatch. CurrentSessionId: %s, executionSystemSwitchedMessage.sessionId: %s", (uint8_t *)v87, 0x16u);
      v96 = (uint64_t)v114;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v96, -1, -1);
      MEMORY[0x1B5E44758](v87, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    return;
  }
LABEL_12:
  v46 = v108;
  ExecutionSystemSwitchedMessage.switchType.getter();
  v48 = v109;
  v47 = v110;
  v49 = (*(uint64_t (**)(_BYTE *, uint64_t))(v109 + 88))(v46, v110);
  v50 = *MEMORY[0x1E0D9DB10];
  (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v46, v47);
  if (v49 == v50)
  {
    v107 = (void (*)(void))v23;
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_1B4BE6000, v51, v52, "Sending ClearExecutionContext to Conversation", v53, 2u);
      MEMORY[0x1B5E44758](v53, -1, -1);
    }

    type metadata accessor for ClearExecutionContext();
    v54 = swift_allocObject();
    (*(void (**)(uint64_t *__return_ptr))(*v2 + 736))(v120);
    v55 = v121;
    v56 = v122;
    __swift_project_boxed_opaque_existential_1(v120, v121);
    v57 = (*(uint64_t (**)(void))(*v2 + 760))();
    (*(void (**)(uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v56 + 32))(v54, v57, &protocol witness table for NonRequestExecutionBridgeDelegate, v55, v56);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v120);
    __swift_project_boxed_opaque_existential_1(v2 + 10, v2[13]);
    v58 = v112;
    SessionMessageBase.sessionId.getter();
    dispatch thunk of ConversationSessionsManaging.conversationSessionState(forConversationSessionId:)();
    (*(void (**)(_BYTE *, uint64_t))(v113 + 8))(v58, v7);
    if (v119)
    {
      outlined init with take of ReferenceResolutionClientProtocol(&v118, (uint64_t)v120);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ConversationSessionKey, Any?)>);
      v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationSessionKey, Any?));
      v60 = *(_QWORD *)(v59 - 8);
      v61 = *(_QWORD *)(v60 + 72);
      v62 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
      v63 = swift_allocObject();
      *(_OWORD *)(v63 + 16) = xmmword_1B4EE6910;
      v64 = v63 + v62;
      v65 = (_OWORD *)(v64 + *(int *)(v59 + 48));
      v66 = *MEMORY[0x1E0D9EDA0];
      v67 = type metadata accessor for ConversationSessionKey();
      v68 = *(void (**)(void))(*(_QWORD *)(v67 - 8) + 104);
      ((void (*)(unint64_t, uint64_t, uint64_t))v68)(v64, v66, v67);
      *v65 = 0u;
      v65[1] = 0u;
      v69 = (_OWORD *)(v64 + v61 + *(int *)(v59 + 48));
      v68();
      *v69 = 0u;
      v69[1] = 0u;
      v70 = (_OWORD *)(v64 + 2 * v61 + *(int *)(v59 + 48));
      v68();
      *v70 = 0u;
      v70[1] = 0u;
      v71 = (_OWORD *)(v64 + 3 * v61 + *(int *)(v59 + 48));
      v68();
      *v71 = 0u;
      v71[1] = 0u;
      v72 = (_OWORD *)(v64 + 4 * v61 + *(int *)(v59 + 48));
      v68();
      *v72 = 0u;
      v72[1] = 0u;
      v73 = (_OWORD *)(v64 + 5 * v61 + *(int *)(v59 + 48));
      v68();
      *v73 = 0u;
      v73[1] = 0u;
      v74 = (_OWORD *)(v64 + 6 * v61 + *(int *)(v59 + 48));
      v68();
      *v74 = 0u;
      v74[1] = 0u;
      specialized Dictionary.init(dictionaryLiteral:)(v63);
      __swift_project_boxed_opaque_existential_1(v120, v121);
      v75 = v103;
      ExecutionSystemSwitchedMessage.userId.getter();
      dispatch thunk of ConversationSessionState.updateValues(data:userId:)();
      (*(void (**)(_BYTE *, uint64_t))(v104 + 8))(v75, v105);
      swift_bridgeObjectRetain();
      v76 = Logger.logObject.getter();
      v77 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v76, v77))
      {
        v78 = (uint8_t *)swift_slowAlloc();
        v79 = swift_slowAlloc();
        *(_QWORD *)&v118 = v79;
        *(_DWORD *)v78 = 136315138;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08], MEMORY[0x1E0D9EE18]);
        v80 = Dictionary.Keys.description.getter();
        v82 = v81;
        swift_bridgeObjectRelease();
        v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v82, (uint64_t *)&v118);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v76, v77, "Cleared following keys from ConversationSessionState: %s", v78, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v79, -1, -1);
        MEMORY[0x1B5E44758](v78, -1, -1);

        swift_release();
      }
      else
      {

        swift_release();
        swift_bridgeObjectRelease_n();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v120);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v118, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
      v97 = Logger.logObject.getter();
      v98 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v97, v98))
      {
        v99 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v99 = 0;
        _os_log_impl(&dword_1B4BE6000, v97, v98, "Could not find a ConversationSessionState for given sessionId", v99, 2u);
        MEMORY[0x1B5E44758](v99, -1, -1);
      }

      swift_release();
    }
  }
}

_QWORD *ConversationBridge.createRequestProcessor(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  _QWORD *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  void (*v58)(char *, uint64_t, uint64_t);
  uint64_t v59;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(void);
  void *v80;
  uint64_t v81;
  void (*v82)(_QWORD *__return_ptr, uint64_t);
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t);
  uint64_t v97;
  void *v98;
  char v99;
  unsigned __int8 v100;
  _QWORD *v101;
  _BYTE *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  __int128 v119;
  _QWORD v120[2];
  id v121;
  unsigned int (*v122)(uint64_t, uint64_t, uint64_t);
  void (*v123)(void);
  void (*v124)(char *, uint64_t, uint64_t);
  char *v125;
  uint64_t v126;
  _QWORD *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE v142[40];
  _BYTE v143[40];
  _BYTE v144[40];
  _QWORD v145[5];
  __int128 v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  _BYTE v152[48];

  v131 = a2;
  v132 = a7;
  v129 = a1;
  v130 = a6;
  v139 = a5;
  v140 = a3;
  v134 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UserID();
  v136 = *(_QWORD *)(v11 - 8);
  v137 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v128 = (char *)v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v135 = (char *)v120 - v14;
  v15 = type metadata accessor for UUID();
  v141 = *(_QWORD *)(v15 - 8);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v120 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v138 = (char *)v120 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v133 = (char *)v120 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v28 = (char *)v120 - v27;
  v29 = MEMORY[0x1E0C80A78](v26);
  v31 = (char *)v120 - v30;
  v32 = MEMORY[0x1E0C80A78](v29);
  v34 = (char *)v120 - v33;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*v7 + 784))(&v150, v32);
  if (!v151)
  {
    v44 = v7;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v150, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.conversationBridge);
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.error.getter();
    v43 = v44;
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      _os_log_impl(&dword_1B4BE6000, v46, v47, "Did not finish initializing ReferenceResolutionClient before receiving a new request. THIS SHOULD NOT HAPPEN!", v48, 2u);
      MEMORY[0x1B5E44758](v48, -1, -1);
    }

    goto LABEL_47;
  }
  v35 = outlined init with take of ReferenceResolutionClientProtocol(&v150, (uint64_t)v152);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*v7 + 808))(&v148, v35);
  if (!v149)
  {
    v49 = v7;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v148, (uint64_t *)&demangling cache variable for type metadata for CorrectionsHandling?);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.conversationBridge);
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.error.getter();
    v43 = v49;
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_1B4BE6000, v51, v52, "Did not finish initializing CorrectionsPlatformClient before receiving a new request. THIS SHOULD NOT HAPPEN!", v53, 2u);
      MEMORY[0x1B5E44758](v53, -1, -1);
    }

    goto LABEL_46;
  }
  v36 = outlined init with take of ReferenceResolutionClientProtocol(&v148, (uint64_t)&v150);
  v37 = (*(uint64_t (**)(uint64_t))(*v7 + 832))(v36);
  if (!v37)
  {
    v43 = v7;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.conversationBridge);
    v55 = Logger.logObject.getter();
    v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v57 = 0;
      _os_log_impl(&dword_1B4BE6000, v55, v56, "Did not finish initializing NetworkAvailabilityProvider before receiving a new request. THIS SHOULD NOT HAPPEN!", v57, 2u);
      MEMORY[0x1B5E44758](v57, -1, -1);
    }

    goto LABEL_45;
  }
  v125 = v18;
  v126 = v37;
  v38 = *(void (**)(void))(*v7 + 880);
  v127 = v7;
  v123 = v38;
  v38();
  v39 = v141;
  v124 = *(void (**)(char *, uint64_t, uint64_t))(v141 + 16);
  v124(v31, v140, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v31, 0, 1, v15);
  v40 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v34, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v31, v40, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  if (v41((uint64_t)v22, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (v41(v40, 1, v15) == 1)
    {
      v42 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v43 = v127;
      goto LABEL_32;
    }
    goto LABEL_24;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (v41(v40, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v15);
LABEL_24:
    v122 = v41;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, &demangling cache variable for type metadata for (UUID?, UUID?));
    v43 = v127;
LABEL_25:
    v58 = v124;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v59 = type metadata accessor for Logger();
    __swift_project_value_buffer(v59, (uint64_t)static Logger.conversationBridge);
    v60 = v125;
    v58(v125, v140, v15);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v61 = Logger.logObject.getter();
    v62 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v61, v62))
    {
      swift_bridgeObjectRelease_n();

      swift_release();
      (*(void (**)(char *, uint64_t))(v141 + 8))(v60, v15);
      swift_release_n();
LABEL_45:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v150);
LABEL_46:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
LABEL_47:
      v102 = (char *)v43 + direct field offset for ConversationBridge.isFirstRequestInSession;
      swift_beginAccess();
      v101 = 0;
      goto LABEL_48;
    }
    v63 = swift_slowAlloc();
    v140 = swift_slowAlloc();
    *(_QWORD *)&v148 = v140;
    *(_DWORD *)v63 = 136315650;
    v64 = (uint64_t)v133;
    v123();
    if (v122(v64, 1, v15))
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v64, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v65 = 0xE300000000000000;
      v66 = 7104878;
    }
    else
    {
      v103 = (uint64_t)v138;
      v58(v138, v64, v15);
      outlined destroy of ReferenceResolutionClientProtocol?(v64, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v66 = UUID.uuidString.getter();
      v65 = v104;
      (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v103, v15);
    }
    *(_QWORD *)&v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v65, (uint64_t *)&v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v43 = v127;
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v63 + 12) = 2080;
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v105 = v125;
    v106 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)&v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v107, (uint64_t *)&v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v141 + 8))(v105, v15);
    *(_WORD *)(v63 + 22) = 2080;
    v108 = v139;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v108, (uint64_t *)&v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v61, v62, "Request does not belong to current session id: %s, request session id: %s for request id: %s", (uint8_t *)v63, 0x20u);
    v109 = v140;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v109, -1, -1);
    MEMORY[0x1B5E44758](v63, -1, -1);

LABEL_44:
    swift_release();
    goto LABEL_45;
  }
  v122 = v41;
  v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32);
  v68 = v39;
  v69 = (uint64_t)v138;
  v67((uint64_t)v138, v40, v15);
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
  LODWORD(v121) = dispatch thunk of static Equatable.== infix(_:_:)();
  v70 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
  v70(v69, v15);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v70((uint64_t)v28, v15);
  v42 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v43 = v127;
  if ((v121 & 1) == 0)
    goto LABEL_25;
LABEL_32:
  (*(void (**)(uint64_t))(*v43 + 928))(v42);
  v72 = v136;
  v71 = v137;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v10, 1, v137) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v73 = type metadata accessor for Logger();
    __swift_project_value_buffer(v73, (uint64_t)static Logger.conversationBridge);
    v74 = Logger.logObject.getter();
    v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v76 = 0;
      _os_log_impl(&dword_1B4BE6000, v74, v75, "UserId has not been set for current session", v76, 2u);
      MEMORY[0x1B5E44758](v76, -1, -1);
    }

    goto LABEL_44;
  }
  v77 = (*(uint64_t (**)(char *, char *, uint64_t))(v72 + 32))(v135, v10, v71);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*v43 + 904))(&v146, v77);
  if (!v147)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v146, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v111 = type metadata accessor for Logger();
    __swift_project_value_buffer(v111, (uint64_t)static Logger.conversationBridge);
    v112 = Logger.logObject.getter();
    v113 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v112, v113))
    {
      v114 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v114 = 0;
      _os_log_impl(&dword_1B4BE6000, v112, v113, "Unable to find SessionState to pass to RequestProcessor", v114, 2u);
      MEMORY[0x1B5E44758](v114, -1, -1);
    }

    swift_release();
    goto LABEL_59;
  }
  v78 = outlined init with take of ReferenceResolutionClientProtocol(&v146, (uint64_t)&v148);
  v79 = *(void (**)(void))(*v43 + 952);
  if ((((uint64_t (*)(uint64_t))v79)(v78) & 1) != 0)
  {
    v80 = (void *)(*(uint64_t (**)(void))(*v43 + 976))();

    if (!v80)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v115 = type metadata accessor for Logger();
      __swift_project_value_buffer(v115, (uint64_t)static Logger.conversationBridge);
      v116 = Logger.logObject.getter();
      v117 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v116, v117))
      {
        v118 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v118 = 0;
        _os_log_impl(&dword_1B4BE6000, v116, v117, "MUX is enabled but MUXContextMessage is not received. Cannot create a RequestProcessor", v118, 2u);
        MEMORY[0x1B5E44758](v118, -1, -1);
      }

      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
LABEL_59:
      (*(void (**)(char *, uint64_t))(v72 + 8))(v135, v71);
      goto LABEL_45;
    }
  }
  v124(v138, v140, v15);
  v81 = v43[2];
  v140 = v43[3];
  v141 = v81;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v43 + 4), (uint64_t)&v146);
  v82 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*v43 + 736);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v83 = swift_bridgeObjectRetain();
  v82(v145, v83);
  v123 = v79;
  v133 = *(char **)((char *)v43 + direct field offset for ConversationBridge.executionOutputSubmitter);
  v84 = *(char **)((char *)v43 + direct field offset for ConversationBridge.decisionMaker);
  v124 = *(void (**)(char *, uint64_t, uint64_t))((char *)v43
                                                         + direct field offset for ConversationBridge.preExecutionActionHandler);
  v125 = v84;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v148, (uint64_t)v144);
  v85 = *(_QWORD *)((char *)v43 + direct field offset for ConversationBridge.instrumentationUtil);
  v86 = v72;
  v87 = v43[9];
  v88 = *(uint64_t (**)(uint64_t))(*v43 + 712);
  swift_retain();
  swift_retain();
  swift_retain();
  v89 = v85;
  swift_retain();
  v90 = v87;
  v91 = swift_unknownObjectRetain();
  LODWORD(v122) = v88(v91);
  v92 = (*(uint64_t (**)(void))(*v43 + 856))();
  v120[1] = v92;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v152, (uint64_t)v143);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v150, (uint64_t)v142);
  v93 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
  v94 = (uint64_t)v128;
  v93(v128, v135, v71);
  v95 = *(_QWORD *)((char *)v43 + direct field offset for ConversationBridge.recentDialogTracker);
  v96 = *(uint64_t (**)(uint64_t))(*v43 + 976);
  v97 = swift_retain();
  v98 = (void *)v96(v97);
  v121 = v98;
  v99 = ((uint64_t (*)(void))v123)();
  v100 = AFDeviceSupportsSAE();
  type metadata accessor for ServerFallbackCapableRequestProcessor();
  swift_allocObject();
  *((_QWORD *)&v119 + 1) = v125;
  *(_QWORD *)&v119 = v133;
  v101 = specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(v129, v131, (uint64_t)v138, v134, v139, v130, v132, v141, v140, (uint64_t)&v146, (uint64_t)v145, v119, (uint64_t)v124, (uint64_t)v144, v89, v90, v122 & 1, v126, v92,
           (uint64_t)v143,
           (uint64_t)v142,
           v94,
           v95,
           v98,
           v99 & 1,
           v100);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v148);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v135, v137);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v150);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
  v102 = (char *)v127 + direct field offset for ConversationBridge.isFirstRequestInSession;
  swift_beginAccess();
LABEL_48:
  *v102 = 0;
  return v101;
}

uint64_t ConversationBridge.createRunSiriKitExecutorProcessor(command:executionContext:reply:source:userId:sessionId:plannerInvocationId:)(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unsigned int *v25;
  char v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(_QWORD *__return_ptr, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  char v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  _BYTE v63[40];
  _OWORD v64[2];
  uint64_t v65;
  _QWORD v66[6];

  v60 = a8;
  v57 = a7;
  v56 = a6;
  v62 = a3;
  v55 = a2;
  v59 = a9;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v13);
  v58 = (uint64_t)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for RequestType();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v50 - v23;
  v61 = a5;
  if (a5 == 1)
  {
    swift_bridgeObjectRelease();
    v25 = (unsigned int *)MEMORY[0x1E0D9E898];
  }
  else
  {
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v25 = (unsigned int *)MEMORY[0x1E0D9E880];
    if ((v26 & 1) != 0)
      v25 = (unsigned int *)MEMORY[0x1E0D9E898];
  }
  v27 = *v25;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 104);
  v53 = v19;
  v52 = v24;
  v28(v24, v27, v18);
  v29 = *(_QWORD *)((char *)v9 + direct field offset for ConversationBridge.executionOutputSubmitter);
  v30 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*v9 + 736);
  v54 = a1;
  v55 = v55;
  v31 = v18;
  v51 = v18;
  v32 = v62;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(v62);
  v33 = swift_retain();
  v30(v66, v33);
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v50 = a4;
  v34 = *(_QWORD *)((char *)v9 + direct field offset for ConversationBridge.instrumentationUtil);
  v35 = v9[9];
  v36 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v37 = v22;
  v36(v22, v24, v31);
  v38 = v17;
  outlined init with copy of ReferenceResolutionClientProtocol?(v56, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  v39 = v58;
  outlined init with copy of ReferenceResolutionClientProtocol?(v57, v58, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v9 + 4), (uint64_t)v63);
  v40 = *(uint64_t (**)(uint64_t))(*v9 + 952);
  v41 = v59;
  swift_bridgeObjectRetain();
  swift_retain();
  v42 = swift_unknownObjectRetain();
  v43 = v40(v42);
  type metadata accessor for RunSiriKitExecutorProcessor();
  swift_allocObject();
  v48 = (uint64_t)v37;
  v49 = (uint64_t)v38;
  v44 = v54;
  v45 = v55;
  v46 = specialized RunSiriKitExecutorProcessor.init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:)(v54, v55, v32, v50, v29, (uint64_t)v66, (uint64_t)v64, 0, 0, v61, 0, 0, v34, v35, 0, 0, 0, v48, v49,
          v39,
          v60,
          v41,
          (uint64_t)v63,
          v43 & 1);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v32);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v51);
  return v46;
}

uint64_t (*_s14SiriKitRuntime37ServerFallbackCapableRequestProcessorCSo23SARDFlowOutputCandidateCSo22AFCommandExecutionInfoCSo13SABaseCommandCSgs5Error_pSgIeghgg_SgIegggg_Iggo_ACxAgMRlzCRi_zRi0_zlyAEIsegggg_Ieggo_TR04_s14ab40Runtime18ConversationBridgeC25handleFlowj32CandidateyySo08SARDFlowhI0C_So22lmn6CySo13op6CSg_s5q47_pSgtYbcSgtFyAF_AhNtAA15MessageBusActorCYccAA37defgH5Ccfu_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #2 in implicit closure #1 in ConversationBridge.handleFlowOutputCandidate(_:_:_:);
}

uint64_t ConversationBridge.handleServerContextUpdateCandidate(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ConversationBridge.handleFlowOutputCandidate(_:_:_:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for SARDServerContextUpdateCandidate, 0x1E0D88388, (uint64_t)_s14SiriKitRuntime37ServerFallbackCapableRequestProcessorCSo32SARDServerContextUpdateCandidateCSo22AFCommandExecutionInfoCSo13SABaseCommandCSgs5Error_pSgIeghgg_SgIegggg_Iggo_ACxAgMRlzCRi_zRi0_zlyAEIsegggg_Ieggo_TR04_s14ab36Runtime18ConversationBridgeC34handledjk36CandidateyySo010SARDServerhiJ0C_So22mno6CySo13pq6CSg_s5r49_pSgtYbcSgtFyAF_AhNtAA15MessageBusActorCYccAA0G31efgH5Ccfu_Tf3npf_n);
}

uint64_t (*_s14SiriKitRuntime37ServerFallbackCapableRequestProcessorCSo32SARDServerContextUpdateCandidateCSo22AFCommandExecutionInfoCSo13SABaseCommandCSgs5Error_pSgIeghgg_SgIegggg_Iggo_ACxAgMRlzCRi_zRi0_zlyAEIsegggg_Ieggo_TR04_s14ab36Runtime18ConversationBridgeC34handledjk36CandidateyySo010SARDServerhiJ0C_So22mno6CySo13pq6CSg_s5r49_pSgtYbcSgtFyAF_AhNtAA15MessageBusActorCYccAA0G31efgH5Ccfu_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #2 in implicit closure #1 in ConversationBridge.handleServerContextUpdateCandidate(_:_:_:);
}

uint64_t ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, void *, uint64_t, uint64_t, uint64_t (*(*)(uint64_t))(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t *, uint64_t);
  uint64_t v27;
  uint64_t result;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;

  v7 = v6;
  v38 = a5;
  v39 = a6;
  v40 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = a2;
  v17 = objc_msgSend(a2, sel_originPeerInfo);
  v18 = v17;
  if (v17)

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v36 = a3;
    v23 = v22;
    *(_DWORD *)v22 = 67109120;
    v41 = v18 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v20, v21, "RSKE isRemote=%{BOOL}d", v23, 8u);
    v24 = v23;
    a3 = v36;
    MEMORY[0x1B5E44758](v24, -1, -1);
  }

  if (v18
    || (MEMORY[0x1E0C80A78](v25),
        v26 = *(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t (*(*)(uint64_t))(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t *, uint64_t))(*(_QWORD *)v7 + 480),
        v27 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor), result = v26(v40, v37, v38, v39, partial apply for closure #1 in ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:), &v36 - 4, v27), (result & 1) == 0))
  {
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1B4BE6000, v29, v30, "Handing RSKE outside of any request processor", v31, 2u);
      MEMORY[0x1B5E44758](v31, -1, -1);
    }

    v32 = (*(uint64_t (**)(void))(*(_QWORD *)v7 + 928))();
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 880))(v32);
    if (v18)
      v33 = 1;
    else
      v33 = 2;
    v34 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t))(*(_QWORD *)v7 + 1072))(v40, v37, v38, v39, v33, v16, v13, a3, a4);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    v35 = (uint64_t *)(v7 + direct field offset for ConversationBridge.runSiriKitExecutorProcessor);
    swift_beginAccess();
    *v35 = v34;
    swift_retain();
    swift_release();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 432))(1, 0);
    return swift_release();
  }
  return result;
}

uint64_t (*closure #1 in ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;

  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  return partial apply for closure #1 in closure #1 in ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:);
}

uint64_t ConversationBridge.handleSiriKitClearContext(_:_:_:)(void *a1, uint64_t a2, void (*a3)(id, id))
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1B4BE6000, v6, v7, "Received SiriKitClearContext. Ignoring since this command is deprecated in Siri X", v8, 2u);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }

  return specialized static ConversationBridgeUtils.replyCommandIgnored(forCommand:errorCode:reason:replyHandler:)(a1, -1, 0xD00000000000002BLL, 0x80000001B4EF88F0, a3);
}

uint64_t ConversationBridge.handleRemoteExecutionContextUpdate(_:_:_:)(void *a1, uint64_t a2, void (*a3)(id, id), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  uint64_t (*v28)(void *, uint64_t, void (*)(id, id), uint64_t, uint64_t (*(*)())(), _QWORD, uint64_t);
  uint64_t v29;
  uint64_t result;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v5 = v4;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1B4BE6000, v11, v12, "Received RemoteExecutionContextUpdate command", v13, 2u);
    MEMORY[0x1B5E44758](v13, -1, -1);
  }

  v14 = objc_msgSend(a1, sel_refId);
  if (v14)
  {

  }
  else
  {
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 376))();
    if (v15)
    {
      v36 = a2;
      v16 = *(_QWORD *)(v15 + 80);
      v17 = *(_QWORD *)(v15 + 88);
      swift_bridgeObjectRetain_n();
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v34 = a4;
        v20 = (uint8_t *)swift_slowAlloc();
        v35 = v16;
        v21 = swift_slowAlloc();
        v37 = v21;
        *(_DWORD *)v20 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v17, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B4BE6000, v18, v19, "RemoteExecutionContextUpdate refId is nil. Setting to current rootRequestId: %s", v20, 0xCu);
        swift_arrayDestroy();
        v22 = v21;
        v16 = v35;
        MEMORY[0x1B5E44758](v22, -1, -1);
        v23 = v20;
        a4 = v34;
        MEMORY[0x1B5E44758](v23, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v27 = (void *)MEMORY[0x1B5E432E8](v16, v17);
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_setRefId_, v27);
      swift_release();

      a2 = v36;
    }
    else
    {
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v26 = 0;
        _os_log_impl(&dword_1B4BE6000, v24, v25, "RemoteExecutionContextUpdate refId is nil, and there is no currentRequestProcessor, so we don't know the current refId.", v26, 2u);
        MEMORY[0x1B5E44758](v26, -1, -1);
      }

    }
  }
  v28 = *(uint64_t (**)(void *, uint64_t, void (*)(id, id), uint64_t, uint64_t (*(*)())(), _QWORD, uint64_t))(*(_QWORD *)v5 + 480);
  v29 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDRemoteExecutionContextUpdate);
  result = v28(a1, a2, a3, a4, _s14SiriKitRuntime37ServerFallbackCapableRequestProcessorCSo32SARDRemoteExecutionContextUpdateCSo09AFCommandJ4InfoCSo13SABaseCommandCSgs5Error_pSgIeghgg_SgIegggg_Iggo_ACxAgMRlzCRi_zRi0_zlyAEIsegggg_Ieggo_TR04_s14ab42Runtime18ConversationBridgeC34handleRemotejk33UpdateyySo010SARDRemotehiJ0C_So09m2H4n6CySo13op6CSg_s5q47_pSgtYbcSgtFyAF_AhNtAA15MessageBusActorCYccAA37defgH6Ccfu0_Tf3npf_n, 0, v29);
  if ((result & 1) == 0)
  {
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_1B4BE6000, v31, v32, "Could not handle RemoteExecutionContextUpdate", v33, 2u);
      MEMORY[0x1B5E44758](v33, -1, -1);
    }

    return specialized static ConversationBridgeUtils.replyCommandIgnored(forCommand:errorCode:reason:replyHandler:)(a1, -1, 0xD00000000000002DLL, 0x80000001B4EF8920, a3);
  }
  return result;
}

uint64_t (*_s14SiriKitRuntime37ServerFallbackCapableRequestProcessorCSo32SARDRemoteExecutionContextUpdateCSo09AFCommandJ4InfoCSo13SABaseCommandCSgs5Error_pSgIeghgg_SgIegggg_Iggo_ACxAgMRlzCRi_zRi0_zlyAEIsegggg_Ieggo_TR04_s14ab42Runtime18ConversationBridgeC34handleRemotejk33UpdateyySo010SARDRemotehiJ0C_So09m2H4n6CySo13op6CSg_s5q47_pSgtYbcSgtFyAF_AhNtAA15MessageBusActorCYccAA37defgH6Ccfu0_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #3 in implicit closure #2 in ConversationBridge.handleRemoteExecutionContextUpdate(_:_:_:);
}

void ConversationBridge.handleExecutionServiceRuntimeError(error:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;

  v2 = v1;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = a1;
  v6 = a1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v32 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v12 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v7, v8, "Runtime error occurred in Execution service: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }
  else
  {

  }
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 376))(v14, v15);
  if (v16)
  {
    v18 = v16;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1B4BE6000, v19, v20, "Dispatching runtime error to the request processor", v21, 2u);
      MEMORY[0x1B5E44758](v21, -1, -1);
    }

    v22 = _convertErrorToNSError(_:)();
    (*(void (**)(NSObject *, uint64_t))(*(_QWORD *)v18 + 1048))(v22, v23);
    swift_release();
  }
  else
  {
    v24 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v2 + 688))(0, v17);
    if (v24)
    {
      v25 = v24;
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v28 = 0;
        _os_log_impl(&dword_1B4BE6000, v26, v27, "Dispatching runtime error to RSKE processor", v28, 2u);
        MEMORY[0x1B5E44758](v28, -1, -1);
      }

      v22 = _convertErrorToNSError(_:)();
      (*(void (**)(NSObject *, uint64_t))(*(_QWORD *)v25 + 448))(v22, v29);
      swift_release();
    }
    else
    {
      v22 = Logger.logObject.getter();
      v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_1B4BE6000, v22, v30, "There is no request processor to send the runtime error to", v31, 2u);
        MEMORY[0x1B5E44758](v31, -1, -1);
      }
    }
  }

}

void ConversationBridge.__allocating_init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ConversationBridge.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t ConversationBridge.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for ConversationBridge.contextDonator);
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.overrideExecutionClient, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.rraasClient, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.correctionsPlatformClient, (uint64_t *)&demangling cache variable for type metadata for CorrectionsHandling?);
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.currentSessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.sessionState, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.sessionUserId, (uint64_t *)&demangling cache variable for type metadata for UserID?);

  return swift_release();
}

uint64_t ConversationBridge.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = specialized ConversationMessageDispatchingBridgeBase.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v1 = v0 + direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout;
  v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + direct field offset for ConversationBridge.contextDonator);
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.overrideExecutionClient, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.rraasClient, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.correctionsPlatformClient, (uint64_t *)&demangling cache variable for type metadata for CorrectionsHandling?);
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.currentSessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.sessionState, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.sessionUserId, (uint64_t *)&demangling cache variable for type metadata for UserID?);

  swift_release();
  return v0;
}

uint64_t ConversationBridge.__deallocating_deinit()
{
  ConversationBridge.deinit();
  return swift_deallocClassInstance();
}

uint64_t NonRequestExecutionBridgeDelegate.executionOutputSubmitter.getter()
{
  return swift_retain();
}

uint64_t NonRequestExecutionBridgeDelegate.userId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_userId, a1, (uint64_t *)&demangling cache variable for type metadata for UserID?);
}

uint64_t NonRequestExecutionBridgeDelegate.serviceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NonRequestExecutionBridgeDelegate.init(executionOutputSubmitter:userId:serviceHelper:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  outlined init with take of UserID?(a2, v3 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_userId);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_serviceHelper) = a3;
  return v3;
}

void NonRequestExecutionBridgeDelegate.submit(executionOutput:completion:)(_QWORD *a1, void (*a2)(_QWORD, id), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(_QWORD, id);
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  void (*v39)(_QWORD, id);
  uint64_t v40;
  _OWORD v41[2];
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v38 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4);
  v37 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RequestType();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UserID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v35 - v18;
  v36 = v3;
  outlined init with copy of ReferenceResolutionClientProtocol?(v3 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_userId, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v20 = v39;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1B4BE6000, v22, v23, "UserID is nil. Cannot process ExecutionOutput", v24, 2u);
      MEMORY[0x1B5E44758](v24, -1, -1);
    }

    v25 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v26 = (void *)MEMORY[0x1B5E432E8](0x6920444972657355, 0xED00006C696E2073);
    v27 = objc_msgSend(v25, sel_initWithDomain_code_userInfo_, v26, -1, 0);

    v20(0, v27);
  }
  else
  {
    v35 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v35(v19, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0D9E890], v6);
    v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 16))(v17, v19, v13);
    v29 = v38;
    v30 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v38) + 0xA0))(v28);
    type metadata accessor for ConversationContextUpdateMetadata();
    v31 = swift_allocObject();
    *(_BYTE *)(v31 + 16) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v9, v6);
    *(_QWORD *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = 0;
    v35((char *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId), v17, v13);
    *(_BYTE *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = v30 & 1;
    v32 = *(_QWORD *)(v36 + 16);
    v33 = type metadata accessor for UUID();
    memset(v41, 0, sizeof(v41));
    v42 = 0;
    v34 = (uint64_t)v37;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v37, 1, 1, v33);
    (*(void (**)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _OWORD *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, void (*)(_QWORD, id), uint64_t))(*(_QWORD *)v32 + 264))(v29, 0, 0, 0, 0, v41, 0, v31, 0, 0, v34, 0, 0, v39, v40);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v34, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v41, &demangling cache variable for type metadata for ContextUpdating?);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  }
}

uint64_t NonRequestExecutionBridgeDelegate.close(withExecutionOutput:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t (*)(), _QWORD))(*(_QWORD *)v1 + 112))(a1, destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions, 0);
}

uint64_t NonRequestExecutionBridgeDelegate.close(withExecutionOutput:needsUserInput:)(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t (*)(), _QWORD))(*(_QWORD *)v1 + 112))(a1, destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions, 0);
}

uint64_t NonRequestExecutionBridgeDelegate.close(withExecutionOutput:errorString:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v3;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v14 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v9, v10, "There was an error while running execution: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v12, -1, -1);
    MEMORY[0x1B5E44758](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t (*)(_QWORD), _QWORD))(*(_QWORD *)v4 + 112))(a1, destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions, 0);
}

void NonRequestExecutionBridgeDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  uint64_t v3;
  NSObject *oslog;
  uint64_t v5;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    v3 = swift_slowAlloc();
    v5 = v3;
    *(_DWORD *)v2 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000039, 0x80000001B4EF8A00, &v5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "Ignoring %s outside of a request", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v3, -1, -1);
    MEMORY[0x1B5E44758](v2, -1, -1);

  }
  else
  {

  }
}

void NonRequestExecutionBridgeDelegate.fallbackToServer(forResultCandidateId:serverFallbackReason:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "Server-fallback not supported outside of a request", v2, 2u);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

}

Swift::Void __swiftcall NonRequestExecutionBridgeDelegate.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v2, "Fallback to info domain not yet supported: Incomplete feature work", v3, 2u);
    MEMORY[0x1B5E44758](v3, -1, -1);
  }

}

void NonRequestExecutionBridgeDelegate.fallbackToIntelligenceFlow(prescribedTool:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "Fallback to IntelligenceFlow not yet supported: Incomplete feature work", v2, 2u);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

}

uint64_t NonRequestExecutionBridgeDelegate.prepareForAudioHandoff(completion:)(uint64_t (*a1)(_QWORD))
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "prepareForAudioHandoff not supported outside of a request", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  return a1(0);
}

uint64_t NonRequestExecutionBridgeDelegate.prepareForAudioHandoffFailed(completion:)(uint64_t (*a1)(void))
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "prepareForAudioHandoffFailed not supported outside of a request", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  return a1();
}

uint64_t NonRequestExecutionBridgeDelegate.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1B4BE6000, v5, v6, "fetchContext() not supported outside of a request", v7, 2u);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  return a3(0);
}

uint64_t NonRequestExecutionBridgeDelegate.fetchSpeechInfo(reply:)(uint64_t (*a1)(_QWORD))
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v8;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v8 = v6;
    *(_DWORD *)v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000001B4EF8A40, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "%s: There is no SpeechInfo outside of a request", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  return a1(0);
}

void NonRequestExecutionBridgeDelegate.flowPluginWillExecute(flowPluginInfo:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "Ignoring FlowPluginInfo outside of a request", v2, 2u);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

}

uint64_t NonRequestExecutionBridgeDelegate.acquireConversationUserInput(forUserId:requestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v12 = v10;
    *(_DWORD *)v9 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000038, 0x80000001B4EF8A60, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v7, v8, "Ignoring %s outside of a request", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }

  return a5(0);
}

uint64_t NonRequestExecutionBridgeDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD))
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v14 = v12;
    *(_DWORD *)v11 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000060, 0x80000001B4EF8AA0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v9, v10, "Ignoring %s outside of a request", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v12, -1, -1);
    MEMORY[0x1B5E44758](v11, -1, -1);
  }

  return a7(0);
}

Swift::Void __swiftcall NonRequestExecutionBridgeDelegate.closeServerRequest(forExecutionRequestId:)(Swift::String forExecutionRequestId)
{
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  NSObject *oslog;
  uint64_t v6;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v6 = v4;
    *(_DWORD *)v3 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x80000001B4EF8B10, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, oslog, v2, "Ignoring %s outside of a request", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v4, -1, -1);
    MEMORY[0x1B5E44758](v3, -1, -1);

  }
  else
  {

  }
}

uint64_t NonRequestExecutionBridgeDelegate.fetchRecentDialogs(reply:)(uint64_t (*a1)(_QWORD))
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v8;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v8 = v6;
    *(_DWORD *)v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x80000001B4EF8B40, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "Ignoring %s outside of a request", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  return a1(MEMORY[0x1E0DEE9D8]);
}

Swift::Void __swiftcall NonRequestExecutionBridgeDelegate.actionCandidatesGenerated(_:rcId:)(Swift::OpaquePointer _, Swift::String rcId)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *oslog;
  uint64_t v7;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v7 = v5;
    *(_DWORD *)v4 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x80000001B4EF8B60, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, oslog, v3, "Ignoring %s outside of a request", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v5, -1, -1);
    MEMORY[0x1B5E44758](v4, -1, -1);

  }
  else
  {

  }
}

void NonRequestExecutionBridgeDelegate.willExecute(executionInputInfo:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  uint64_t v3;
  NSObject *oslog;
  uint64_t v5;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    v3 = swift_slowAlloc();
    v5 = v3;
    *(_DWORD *)v2 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x80000001B4EF8B90, &v5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "Ignoring %s outside of a request", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v3, -1, -1);
    MEMORY[0x1B5E44758](v2, -1, -1);

  }
  else
  {

  }
}

uint64_t NonRequestExecutionBridgeDelegate.fetchSelfReflectionDecision(reply:)(uint64_t (*a1)(uint64_t *))
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v8;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v8 = v6;
    *(_DWORD *)v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x80000001B4EF8BC0, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "Ignoring %s outside of a request", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  LOBYTE(v8) = 2;
  return a1(&v8);
}

uint64_t NonRequestExecutionBridgeDelegate.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return static ServiceBridgeDelegate.defaultSubmitExternalActivationRequest(withRequestInfo:serviceHelper:completion:)(a1, *(id *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_serviceHelper), a2, a3);
}

uint64_t NonRequestExecutionBridgeDelegate.deinit()
{
  uint64_t v0;

  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_userId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NonRequestExecutionBridgeDelegate.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_userId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ServiceBridgeDelegate.submit(executionOutput:completion:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t protocol witness for ServiceBridgeDelegate.close(withExecutionOutput:needsUserInput:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t protocol witness for ServiceBridgeDelegate.close(withExecutionOutput:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t protocol witness for ServiceBridgeDelegate.close(withExecutionOutput:errorString:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t protocol witness for ServiceBridgeDelegate.close(withExecutionOutput:errorString:shouldFailRequest:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fallbackToServer(forResultCandidateId:serverFallbackReason:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fallbackToInfoDomainResults(forResultCandidateId:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fallbackToIntelligenceFlow(prescribedTool:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t protocol witness for ServiceBridgeDelegate.flowPluginWillExecute(flowPluginInfo:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t protocol witness for ServiceBridgeDelegate.prepareForAudioHandoff(completion:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t protocol witness for ServiceBridgeDelegate.prepareForAudioHandoffFailed(completion:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fetchContexts(for:includesNearByDevices:completion:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fetchSpeechInfo(reply:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t protocol witness for ServiceBridgeDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t protocol witness for ServiceBridgeDelegate.closeServerRequest(forExecutionRequestId:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fetchRecentDialogs(reply:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t protocol witness for ServiceBridgeDelegate.actionCandidatesGenerated(_:rcId:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t protocol witness for ServiceBridgeDelegate.willExecute(executionInputInfo:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fetchSelfReflectionDecision(reply:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t protocol witness for ServiceBridgeDelegate.submitExternalActivationRequest(withRequestInfo:completion:) in conformance NonRequestExecutionBridgeDelegate()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:featureChecker:)(uint64_t a1, char a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  _UNKNOWN **v16;

  v15 = type metadata accessor for FeatureChecker();
  v16 = &protocol witness table for FeatureChecker;
  *(_QWORD *)&v14 = a4;
  type metadata accessor for ConcurrentTaskPool();
  v10 = swift_allocObject();
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v10 + 16) = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v10 + 24) = v12;
  *(_QWORD *)(a5 + 16) = v10;
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 88) = specialized Dictionary.init(dictionaryLiteral:)(v11);
  *(_QWORD *)(a5 + 96) = 30000000000;
  *(_QWORD *)(a5 + 24) = a1;
  *(_BYTE *)(a5 + 72) = a2;
  outlined init with take of ReferenceResolutionClientProtocol(a3, a5 + 32);
  outlined init with take of ReferenceResolutionClientProtocol(&v14, a5 + 104);
  return a5;
}

_QWORD *specialized ConversationRequestAwareBridgeBase.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t (*(*)())(uint64_t), _QWORD, uint64_t);
  uint64_t started;
  void (*v32)(uint64_t (*(*)())(uint64_t), _QWORD, uint64_t);
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41[2];
  __int128 v42[2];

  v38 = a7;
  v39 = a5;
  v36 = a2;
  v37 = a4;
  v40 = a3;
  v35 = a1;
  v9 = type metadata accessor for Logger();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (uint64_t *)((char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for DispatchTimeInterval();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (uint64_t *)((char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)((char *)v7 + direct field offset for ConversationRequestAwareBridgeBase.currentRequestProcessor) = 0;
  *(_QWORD *)((char *)v7 + direct field offset for ConversationRequestAwareBridgeBase.candidateRequestProcessors) = MEMORY[0x1E0DEE9E0];
  v20 = direct field offset for ConversationRequestAwareBridgeBase.requestMessagesHandledByBridgeBase;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<[RequestMessageBase.Type], os_unfair_lock_s>);
  v21 = swift_allocObject();
  *(_DWORD *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)((char *)v7 + v20) = v21;
  v22 = direct field offset for ConversationRequestAwareBridgeBase.hasRegisteredToAnyStartRequest;
  *((_BYTE *)v7 + direct field offset for ConversationRequestAwareBridgeBase.hasRegisteredToAnyStartRequest) = 0;
  *((_BYTE *)v7 + direct field offset for ConversationRequestAwareBridgeBase.hasAutoRegisteredStartRequestMessageBase) = a6;
  *((_BYTE *)v7 + v22) = a6;
  swift_retain();
  static ConversationRequestAwareBridgeBase.readPreviousProcessorTimeoutFromDefault()(v15);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    *v19 = 500;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E0DEF490], v16);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for DispatchTimeInterval?);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 32))((uint64_t)v7 + direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout, v19, v16);
  }
  else
  {
    v23 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(v17 + 32);
    v23(v19, v15, v16);
    v23((_QWORD *)((char *)v7 + direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout), v19, v16);
  }
  swift_release();
  v24 = v40;
  outlined init with copy of ReferenceResolutionClientProtocol(v40, (uint64_t)v42);
  v25 = v39;
  outlined init with copy of ReferenceResolutionClientProtocol(v39, (uint64_t)v41);
  v26 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v38, v9);
  v27 = v37;
  swift_unknownObjectRetain();
  v28 = MEMORY[0x1E0DEE9D8];
  v7[15] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v7[16] = specialized Dictionary.init(dictionaryLiteral:)(v28);
  v7[17] = specialized Dictionary.init(dictionaryLiteral:)(v28);
  v29 = v36;
  v7[2] = v35;
  v7[3] = v29;
  outlined init with take of ReferenceResolutionClientProtocol(v42, (uint64_t)(v7 + 4));
  v7[9] = v27;
  outlined init with take of ReferenceResolutionClientProtocol(v41, (uint64_t)(v7 + 10));
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))((uint64_t)v7 + direct field offset for ConversationMessageDispatchingBridgeBase.logger, v12, v9);
  if (*((_BYTE *)v7
       + direct field offset for ConversationRequestAwareBridgeBase.hasAutoRegisteredStartRequestMessageBase) == 1)
  {
    v30 = *(void (**)(uint64_t (*(*)())(uint64_t), _QWORD, uint64_t))(*v7 + 464);
    started = type metadata accessor for StartRequestMessageBase();
    swift_retain();
    v30(specialized closure #1 in ConversationRequestAwareBridgeBase.registerMessages(), 0, started);
  }
  else
  {
    swift_retain();
  }
  v32 = *(void (**)(uint64_t (*(*)())(uint64_t), _QWORD, uint64_t))(*v7 + 464);
  v33 = type metadata accessor for EndRequestMessageBase();
  v32(specialized closure #2 in ConversationRequestAwareBridgeBase.registerMessages(), 0, v33);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v26, v9);
  __swift_destroy_boxed_opaque_existential_1(v25);
  __swift_destroy_boxed_opaque_existential_1(v24);
  return v7;
}

_QWORD *specialized ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  id v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[24];
  ValueMetadata *v75;
  unint64_t v76;
  __int128 v77[2];

  v7 = v6;
  v73 = a5;
  v66 = a1;
  v67 = a2;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11);
  v68 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for Logger();
  v63 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64);
  v65 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OSSignpostID();
  v70 = *(_QWORD *)(v14 - 8);
  v71 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (uint64_t *)(v6 + direct field offset for ConversationBridge.contextDonator);
  v18 = one-time initialization token for sharedInstance;
  swift_retain();
  if (v18 != -1)
    swift_once();
  v19 = static DeviceContextHelper.sharedInstance;
  v17[3] = type metadata accessor for DeviceContextHelper();
  v17[4] = (uint64_t)&protocol witness table for DeviceContextHelper;
  *v17 = v19;
  *(_QWORD *)(v7 + direct field offset for ConversationBridge.runSiriKitExecutorProcessor) = 0;
  *(_BYTE *)(v7 + direct field offset for ConversationBridge.isFirstRequestInSession) = 1;
  v20 = v7 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient;
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_QWORD *)(v20 + 32) = 0;
  *(_QWORD *)(v7 + direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher) = 0;
  v21 = v7 + direct field offset for ConversationBridge.rraasClient;
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_QWORD *)(v21 + 32) = 0;
  v22 = v7 + direct field offset for ConversationBridge.correctionsPlatformClient;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v7 + direct field offset for ConversationBridge.networkAvailabilityProvider) = 0;
  *(_QWORD *)(v7 + direct field offset for ConversationBridge.coreTelephonyServiceProvider) = 0;
  v23 = v7 + direct field offset for ConversationBridge.currentSessionId;
  v24 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = v7 + direct field offset for ConversationBridge.sessionState;
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_QWORD *)(v25 + 32) = 0;
  v26 = v7 + direct field offset for ConversationBridge.sessionUserId;
  v27 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = (char *)(v7 + direct field offset for ConversationBridge.isMUXEnabled);
  swift_retain();
  *v28 = AFDeviceSupportsSiriMUX();
  *(_QWORD *)(v7 + direct field offset for ConversationBridge.muxContextMessage) = 0;
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  v72 = a6;
  v29 = direct field offset for ConversationBridge.instrumentationUtil;
  *(_QWORD *)(v7 + direct field offset for ConversationBridge.instrumentationUtil) = static ConversationBridgeInstrumentationUtil.sharedInstance;
  v30 = one-time initialization token for executor;
  swift_retain();
  if (v30 != -1)
    swift_once();
  v31 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  v69 = v16;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_beginAccess();
  v32 = *v28;
  outlined init with copy of ReferenceResolutionClientProtocol(a3, (uint64_t)v77);
  type metadata accessor for FeatureChecker();
  v33 = swift_allocObject();
  swift_unknownObjectRetain();
  *(_BYTE *)(v33 + 16) = AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags();
  v75 = &type metadata for IntelligenceFlowFeatureFlag;
  v76 = lazy protocol witness table accessor for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag();
  v34 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
  *(_BYTE *)(v33 + 17) = v34 & 1;
  type metadata accessor for ConversationOutputSubmitter();
  v35 = swift_allocObject();
  v36 = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:featureChecker:)(a4, v32, v77, v33, v35);
  *(_QWORD *)(v7 + direct field offset for ConversationBridge.executionOutputSubmitter) = v36;
  type metadata accessor for PreExecutionDecisionMaker();
  *(_QWORD *)(v7 + direct field offset for ConversationBridge.decisionMaker) = swift_allocObject();
  v37 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  type metadata accessor for PreExecutionActionHandler();
  swift_getObjectType();
  v38 = *(_QWORD *)(v7 + v29);
  type metadata accessor for PreExecutionDialogHandler();
  v39 = a3;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = v36;
  *(_QWORD *)(v40 + 24) = v37;
  swift_retain_n();
  v41 = v37;
  swift_unknownObjectRetain();
  v42 = v41;
  swift_retain();
  v62 = v42;
  v43 = v40;
  v44 = v39;
  *(_QWORD *)(v7 + direct field offset for ConversationBridge.preExecutionActionHandler) = specialized PreExecutionActionHandler.__allocating_init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(a4, v38, v36, (uint64_t)v42, v43);
  v45 = v7 + direct field offset for ConversationBridge.overrideExecutionClient;
  *(_OWORD *)v45 = 0u;
  *(_OWORD *)(v45 + 16) = 0u;
  *(_QWORD *)(v45 + 32) = 0;
  swift_beginAccess();
  v46 = v72;
  outlined assign with copy of ReferenceResolutionClientProtocol?(v72, v21, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  swift_endAccess();
  type metadata accessor for RecentDialogTracker();
  swift_allocObject();
  *(_QWORD *)(v7 + direct field offset for ConversationBridge.recentDialogTracker) = RecentDialogTracker.init(timeProvider:)((uint64_t)closure #1 in RecentDialogTracker.init(), 0);
  swift_release();
  outlined init with copy of ReferenceResolutionClientProtocol(v39, (uint64_t)v77);
  v47 = v73;
  outlined init with copy of ReferenceResolutionClientProtocol(v73, (uint64_t)v74);
  v48 = one-time initialization token for conversationBridge;
  swift_unknownObjectRetain();
  if (v48 != -1)
    swift_once();
  v49 = v64;
  v50 = __swift_project_value_buffer(v64, (uint64_t)static Logger.conversationBridge);
  v51 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v65, v50, v49);
  v52 = specialized ConversationRequestAwareBridgeBase.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(v66, v67, (uint64_t)v77, a4, (uint64_t)v74, 1, v51);
  swift_unknownObjectRelease();
  swift_retain();
  v53 = AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags();
  ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(v53);
  v54 = type metadata accessor for TaskPriority();
  v55 = (uint64_t)v68;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v68, 1, 1, v54);
  v56 = one-time initialization token for shared;
  swift_retain();
  if (v56 != -1)
    swift_once();
  swift_beginAccess();
  v57 = static MessageBusActor.shared;
  v58 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, 255, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v59 = (_QWORD *)swift_allocObject();
  v59[2] = v57;
  v59[3] = v58;
  v59[4] = v52;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v55, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationBridge.asyncInit(), (uint64_t)v59);
  swift_release();

  static os_signpost_type_t.end.getter();
  v60 = v69;
  os_signpost(_:dso:log:name:signpostID:)();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v46, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  __swift_destroy_boxed_opaque_existential_1(v47);
  __swift_destroy_boxed_opaque_existential_1(v44);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v60, v71);
  return v52;
}

_QWORD *specialized ConversationBridgeSPI.init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  _BYTE v26[40];
  _BYTE v27[40];

  v7 = v6;
  v23 = a4;
  v13 = type metadata accessor for Logger();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v17 = __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, v13);
  type metadata accessor for AsyncSerialQueue();
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = MEMORY[0x1E0DEE9D8];
  v18[3] = 0;
  v18[4] = 0;
  v18[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v19 = swift_allocObject();
  *(_DWORD *)(v19 + 16) = 0;
  v18[6] = v19;
  v18[7] = 0xD000000000000012;
  v18[8] = 0x80000001B4EE6A10;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))((uint64_t)v18 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger, v16, v13);
  v7[2] = v18;
  v7[4] = a5;
  v7[5] = a1;
  v7[6] = a2;
  outlined init with copy of ReferenceResolutionClientProtocol(a3, (uint64_t)v27);
  outlined init with copy of ReferenceResolutionClientProtocol(a6, (uint64_t)v26);
  type metadata accessor for ConversationBridge(0);
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  swift_allocObject();
  swift_bridgeObjectRetain();
  v20 = specialized ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:)(a1, a2, (uint64_t)v27, v23, (uint64_t)v26, (uint64_t)v24);
  __swift_destroy_boxed_opaque_existential_1(a6);
  __swift_destroy_boxed_opaque_existential_1(a3);
  v7[3] = v20;
  return v7;
}

uint64_t sub_1B4D20CB4()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1B4D20CE0()
{
  uint64_t v0;

  swift_release();

  if (*(_QWORD *)(v0 + 40))
    swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for NonRequestExecutionBridgeDelegate(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for NonRequestExecutionBridgeDelegate);
}

uint64_t outlined init with take of UserID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B4D20D80()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t base witness table accessor for Bridge in ConversationBridgeSPI(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type ConversationBridgeSPI and conformance ConversationBridgeSPI, a2, (uint64_t (*)(uint64_t))type metadata accessor for ConversationBridgeSPI, (uint64_t)&protocol conformance descriptor for ConversationBridgeSPI);
}

uint64_t type metadata accessor for ConversationBridgeSPI()
{
  return objc_opt_self();
}

uint64_t sub_1B4D20E00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 688))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4D20E34@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 712))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4D20E68(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + direct field offset for ConversationBridge.isFirstRequestInSession);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t sub_1B4D20EB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 736))();
}

uint64_t sub_1B4D20EDC(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 744))(v4);
}

uint64_t sub_1B4D20F1C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 760))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4D20F4C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 768);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B4D20F7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 784))();
}

uint64_t sub_1B4D20FA4(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  return (*(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 792))(v4);
}

uint64_t sub_1B4D20FEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 808))();
}

uint64_t sub_1B4D21014(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for CorrectionsHandling?);
  return (*(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 816))(v4);
}

uint64_t sub_1B4D2105C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 832))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4D2108C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 840);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B4D210BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 856))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4D210EC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 864);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B4D2111C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 880))();
}

uint64_t sub_1B4D21148(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 904))();
}

uint64_t sub_1B4D21170(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  return (*(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 912))(v4);
}

uint64_t sub_1B4D211B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 928))();
}

uint64_t sub_1B4D211E4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 952))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4D21218(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 960))(*a1);
}

uint64_t sub_1B4D21244@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 976))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4D21274(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 984);
  v4 = *a1;
  return v3(v2);
}

uint64_t method lookup function for ConversationBridgeSPI()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationBridgeSPI.__allocating_init(_:_:_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ConversationBridgeSPI.messageTypesForSubscription()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of ConversationBridgeSPI.aceCommandsGroups()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ConversationBridgeSPI.aceCommands(forGroup:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ConversationBridgeSPI.handleMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ConversationBridgeSPI.handle(_:executionContextInfo:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

void type metadata completion function for ConversationBridge()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for UserID?, (void (*)(uint64_t))MEMORY[0x1E0D9EF80]);
    if (v1 <= 0x3F)
      swift_initClassMetadata2();
  }
}

uint64_t method lookup function for ConversationBridge()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationBridge.runSiriKitExecutorProcessor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 688))();
}

uint64_t dispatch thunk of ConversationBridge.isFirstRequestInSession.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 712))();
}

uint64_t dispatch thunk of ConversationBridge.executionClient.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 736))();
}

uint64_t dispatch thunk of ConversationBridge.executionClient.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 744))();
}

uint64_t dispatch thunk of ConversationBridge.executionClient.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 752))();
}

uint64_t dispatch thunk of ConversationBridge.nonRequestBridgePublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 760))();
}

uint64_t dispatch thunk of ConversationBridge.nonRequestBridgePublisher.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 768))();
}

uint64_t dispatch thunk of ConversationBridge.nonRequestBridgePublisher.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 776))();
}

uint64_t dispatch thunk of ConversationBridge.rraasClient.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 784))();
}

uint64_t dispatch thunk of ConversationBridge.rraasClient.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 792))();
}

uint64_t dispatch thunk of ConversationBridge.rraasClient.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 800))();
}

uint64_t dispatch thunk of ConversationBridge.correctionsPlatformClient.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 808))();
}

uint64_t dispatch thunk of ConversationBridge.correctionsPlatformClient.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 816))();
}

uint64_t dispatch thunk of ConversationBridge.correctionsPlatformClient.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 824))();
}

uint64_t dispatch thunk of ConversationBridge.networkAvailabilityProvider.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 832))();
}

uint64_t dispatch thunk of ConversationBridge.networkAvailabilityProvider.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 840))();
}

uint64_t dispatch thunk of ConversationBridge.networkAvailabilityProvider.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 848))();
}

uint64_t dispatch thunk of ConversationBridge.coreTelephonyServiceProvider.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 856))();
}

uint64_t dispatch thunk of ConversationBridge.coreTelephonyServiceProvider.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 864))();
}

uint64_t dispatch thunk of ConversationBridge.coreTelephonyServiceProvider.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 872))();
}

uint64_t dispatch thunk of ConversationBridge.currentSessionId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 880))();
}

uint64_t dispatch thunk of ConversationBridge.currentSessionId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 888))();
}

uint64_t dispatch thunk of ConversationBridge.currentSessionId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 896))();
}

uint64_t dispatch thunk of ConversationBridge.sessionState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 904))();
}

uint64_t dispatch thunk of ConversationBridge.sessionState.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 912))();
}

uint64_t dispatch thunk of ConversationBridge.sessionState.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 920))();
}

uint64_t dispatch thunk of ConversationBridge.sessionUserId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 928))();
}

uint64_t dispatch thunk of ConversationBridge.sessionUserId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 936))();
}

uint64_t dispatch thunk of ConversationBridge.sessionUserId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 944))();
}

uint64_t dispatch thunk of ConversationBridge.isMUXEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 952))();
}

uint64_t dispatch thunk of ConversationBridge.isMUXEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 960))();
}

uint64_t dispatch thunk of ConversationBridge.isMUXEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 968))();
}

uint64_t dispatch thunk of ConversationBridge.muxContextMessage.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 976))();
}

uint64_t dispatch thunk of ConversationBridge.muxContextMessage.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 984))();
}

uint64_t dispatch thunk of ConversationBridge.muxContextMessage.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 992))();
}

uint64_t dispatch thunk of ConversationBridge.__allocating_init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1000))();
}

uint64_t dispatch thunk of ConversationBridge.__allocating_init(name:messagePublisher:serviceHelper:conversationSessionsManaging:conversationClient:rrClient:correctionsPlatformClient:networkAvailabilityProvider:coreTelephonyServiceProvider:recentDialogTracker:isSystemAssistantExperienceSupported:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1008))();
}

uint64_t dispatch thunk of ConversationBridge.handleMUXContextMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1032))();
}

uint64_t dispatch thunk of ConversationBridge.handleRunSiriKitExecutorMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1040))();
}

uint64_t dispatch thunk of ConversationBridge.handleStartSessionMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1048))();
}

uint64_t dispatch thunk of ConversationBridge.handleSessionEndedMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1056))();
}

uint64_t dispatch thunk of ConversationBridge.handleExecutionSystemSwitchedMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1064))();
}

uint64_t dispatch thunk of ConversationBridge.createRunSiriKitExecutorProcessor(command:executionContext:reply:source:userId:sessionId:plannerInvocationId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1072))();
}

uint64_t dispatch thunk of ConversationBridge.handleFlowOutputCandidate(_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1080))();
}

uint64_t dispatch thunk of ConversationBridge.handleServerContextUpdateCandidate(_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1088))();
}

uint64_t dispatch thunk of ConversationBridge.handleRunSiriKitExecutor(_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1096))();
}

uint64_t dispatch thunk of ConversationBridge.handleSiriKitPluginSignal(_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1112))();
}

uint64_t dispatch thunk of ConversationBridge.handleSiriKitClearContext(_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1120))();
}

uint64_t dispatch thunk of ConversationBridge.handleRemoteExecutionContextUpdate(_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1128))();
}

uint64_t dispatch thunk of ConversationBridge.handleExecutionServiceRuntimeError(error:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1136))();
}

uint64_t ObjC metadata update function for NonRequestExecutionBridgeDelegate()
{
  return type metadata accessor for NonRequestExecutionBridgeDelegate(0);
}

void type metadata completion function for NonRequestExecutionBridgeDelegate()
{
  unint64_t v0;

  type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for UserID?, (void (*)(uint64_t))MEMORY[0x1E0D9EF80]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for NonRequestExecutionBridgeDelegate()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.__allocating_init(executionOutputSubmitter:userId:serviceHelper:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.submit(executionOutput:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.close(withExecutionOutput:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.close(withExecutionOutput:needsUserInput:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.close(withExecutionOutput:errorString:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fallbackToServer(forResultCandidateId:serverFallbackReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fallbackToInfoDomainResults(forResultCandidateId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fallbackToIntelligenceFlow(prescribedTool:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.prepareForAudioHandoff(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.prepareForAudioHandoffFailed(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fetchContexts(for:includesNearByDevices:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fetchSpeechInfo(reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.flowPluginWillExecute(flowPluginInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.acquireConversationUserInput(forUserId:requestId:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.closeServerRequest(forExecutionRequestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fetchRecentDialogs(reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.actionCandidatesGenerated(_:rcId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.willExecute(executionInputInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fetchSelfReflectionDecision(reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.submitExternalActivationRequest(withRequestInfo:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in ConversationBridge.handleRemoteExecutionContextUpdate(_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 888))();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ConversationBridge.handleServerContextUpdateCandidate(_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1512))();
}

uint64_t sub_1B4D21844()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t (*partial apply for closure #1 in ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:)(uint64_t a1))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v1;

  return closure #1 in ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B4D21880()
{
  return objectdestroy_38Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30], (void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 16) + 1504))(a1, a2, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), a3, a4);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1B4D218D8()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #2 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in closure #40 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 1040);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #46 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 1128);
  swift_retain();
  v9(a1, a2, a3, a4);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #45 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 1120);
  swift_retain();
  v9(a1, a2, a3, a4);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #44 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 1112);
  swift_retain();
  v9(a1, a2, a3, a4);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #43 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 1080);
  swift_retain();
  v9(a1, a2, a3, a4);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #42 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 1088);
  swift_retain();
  v9(a1, a2, a3, a4);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #41 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 1096);
  swift_retain();
  v9(a1, a2, a3, a4);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #39 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 832);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #38 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(void *a1)
{
  swift_retain();
  ConversationRequestProcessor.handleRunPommesResponseMessage(_:)(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #37 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 800);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #36 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 792);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #35 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 784);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #34 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 752);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #33 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 776);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #32 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 768);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #31 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 760);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #30 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 616);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #29 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 560);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #28 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 552);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #27 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 544);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #26 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 608);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #25 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 720);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #24 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 704);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #23 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 696);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #22 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 688);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #21 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 624);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #20 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 592);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #19 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 584);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #18 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 600);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #17 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 576);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #16 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 568);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #15 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 1456);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #14 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 880);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #13 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 856);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #12 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 744);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #11 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 712);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #10 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 840);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #9 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 680);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #8 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 672);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #7 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 664);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #6 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 640);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #5 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 896);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #4 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 1064);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #3 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 1032);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #2 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 1056);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for closure #1 in closure #1 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 1048);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for specialized closure #1 in closure #1 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 136);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t partial apply for specialized closure #1 in closure #2 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(*(_QWORD *)v1 + 144);
  swift_retain();
  v3(a1);
  return swift_release();
}

uint64_t sub_1B4D22634()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ConversationBridge.executionClient.getter(void *a1)
{
  return closure #1 in closure #1 in ConversationBridge.executionClient.getter(a1);
}

uint64_t sub_1B4D22660()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ConversationBridge.executionClient.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in closure #1 in ConversationBridge.executionClient.getter(a1, v4, v5, v7, v6);
}

uint64_t sub_1B4D2270C()
{
  return objectdestroy_38Tm((void (*)(_QWORD))MEMORY[0x1E0DEEEC0], (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t objectdestroy_38Tm(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 32));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationBridge.asyncInit()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationBridge.asyncInit()(a1, v4, v5, v6);
}

uint64_t ConversationOutputError.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4D22808 + 4 * byte_1B4EE6B10[a1]))(0x5464696C61766E69, 0xED000064496E7275);
}

uint64_t sub_1B4D22808()
{
  return 0x636E61436E727574;
}

unint64_t sub_1B4D22828()
{
  return 0xD000000000000024;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationOutputError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = ConversationOutputError.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == ConversationOutputError.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationOutputError()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  ConversationOutputError.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationOutputError()
{
  unsigned __int8 *v0;

  ConversationOutputError.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationOutputError()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  ConversationOutputError.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationOutputError@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized ConversationOutputError.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConversationOutputError@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ConversationOutputError.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t specialized ConversationOutputError.init(rawValue:)()
{
  unint64_t v0;

  v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x12)
    return 18;
  else
    return v0;
}

uint64_t getEnumTagSinglePayload for ConversationOutputError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationOutputError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1B4D22CC0 + 4 * byte_1B4EE6B27[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1B4D22CF4 + 4 * byte_1B4EE6B22[v4]))();
}

uint64_t sub_1B4D22CF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4D22CFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4D22D04);
  return result;
}

uint64_t sub_1B4D22D10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4D22D18);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1B4D22D1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4D22D24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationOutputError()
{
  return &type metadata for ConversationOutputError;
}

uint64_t ConversationBridgeFeatureFlag.isEnabled.getter()
{
  unsigned __int8 *v0;
  os_unfair_lock_s *v1;
  unsigned __int8 v3;

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  v0 = (unsigned __int8 *)(static ConversationBridgeFeatureFlag.forceEnabled + 16);
  v1 = (os_unfair_lock_s *)(static ConversationBridgeFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static ConversationBridgeFeatureFlag.forceEnabled + 20));
  closure #1 in ConversationBridgeFeatureFlag.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

uint64_t *ConversationBridgeFeatureFlag.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return &static ConversationBridgeFeatureFlag.forceEnabled;
}

uint64_t static ConversationBridgeFeatureFlag.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return swift_retain();
}

const char *ConversationBridgeFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *ConversationBridgeFeatureFlag.feature.getter()
{
  return "conversationBridge";
}

unsigned __int8 *closure #1 in ConversationBridgeFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  char v4;
  char v5;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;

  v3 = *result;
  if (v3 == 2)
  {
    v7 = &type metadata for ConversationBridgeFeatureFlag;
    v8 = lazy protocol witness table accessor for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag();
    v4 = isFeatureEnabled(_:)();
    result = (unsigned __int8 *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    v5 = v4 & 1;
  }
  else
  {
    v5 = v3 & 1;
  }
  *a2 = v5;
  return result;
}

uint64_t static ConversationBridgeFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void ConversationBridgeFeatureFlag.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int ConversationBridgeFeatureFlag.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag;
  if (!lazy protocol witness table cache variable for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationBridgeFeatureFlag, &type metadata for ConversationBridgeFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag;
  if (!lazy protocol witness table cache variable for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationBridgeFeatureFlag, &type metadata for ConversationBridgeFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance ConversationBridgeFeatureFlag()
{
  return "conversationBridge";
}

uint64_t storeEnumTagSinglePayload for ConversationBridgeFeatureFlag(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4D23028 + 4 * asc_1B4EE6C30[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4D23048 + 4 * byte_1B4EE6C35[v4]))();
}

_BYTE *sub_1B4D23028(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4D23048(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4D23050(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4D23058(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4D23060(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4D23068(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ConversationBridgeFeatureFlag()
{
  return &type metadata for ConversationBridgeFeatureFlag;
}

uint64_t *ConversationBridgeInstrumentationUtil.sharedInstance.unsafeMutableAddressor()
{
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  return &static ConversationBridgeInstrumentationUtil.sharedInstance;
}

uint64_t one-time initialization function for sharedInstance()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  void *v4;
  uint64_t result;
  __int128 v6;
  ValueMetadata *v7;
  _UNKNOWN **v8;

  v0 = type metadata accessor for FeatureChecker();
  v1 = swift_allocObject();
  *(_BYTE *)(v1 + 16) = AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags();
  v7 = &type metadata for IntelligenceFlowFeatureFlag;
  v8 = (_UNKNOWN **)lazy protocol witness table accessor for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag();
  v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v6);
  *(_BYTE *)(v1 + 17) = v2 & 1;
  v7 = (ValueMetadata *)v0;
  v8 = &protocol witness table for FeatureChecker;
  *(_QWORD *)&v6 = v1;
  type metadata accessor for ConversationBridgeInstrumentationUtil();
  v3 = (_QWORD *)swift_allocObject();
  v4 = (void *)objc_opt_self();
  swift_retain();
  v3[2] = objc_msgSend(v4, sel_sharedStream);
  type metadata accessor for InstrumentationUtil();
  v3[3] = swift_allocObject();
  v3[7] = &type metadata for ComponentIdGeneratorImpl;
  v3[8] = &protocol witness table for ComponentIdGeneratorImpl;
  v3[9] = objc_msgSend(v4, sel_sharedAnalytics);
  outlined init with take of ReferenceResolutionClientProtocol(&v6, (uint64_t)(v3 + 10));
  result = swift_release();
  static ConversationBridgeInstrumentationUtil.sharedInstance = (uint64_t)v3;
  return result;
}

uint64_t static ConversationBridgeInstrumentationUtil.sharedInstance.getter()
{
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  return swift_retain();
}

uint64_t ConversationBridgeInstrumentationUtil.stream.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationBridgeInstrumentationUtil.commonInstrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t ConversationBridgeInstrumentationUtil.componentIdGenerator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 32, a1);
}

id ConversationBridgeInstrumentationUtil.analyticsClient.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 72);
}

_QWORD *ConversationBridgeInstrumentationUtil.__allocating_init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  outlined init with take of ReferenceResolutionClientProtocol(a3, (uint64_t)(v10 + 4));
  v10[9] = a4;
  outlined init with take of ReferenceResolutionClientProtocol(a5, (uint64_t)(v10 + 10));
  return v10;
}

_QWORD *ConversationBridgeInstrumentationUtil.init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5)
{
  _QWORD *v5;

  v5[2] = a1;
  v5[3] = a2;
  outlined init with take of ReferenceResolutionClientProtocol(a3, (uint64_t)(v5 + 4));
  v5[9] = a4;
  outlined init with take of ReferenceResolutionClientProtocol(a5, (uint64_t)(v5 + 10));
  return v5;
}

Swift::Void __swiftcall ConversationBridgeInstrumentationUtil.logExecutionRequestStarted(executionForRSKE:source:preExecutionType:rootRequestId:requestId:resultCandidateId:triggerlessFollowupHandledLocally:)(Swift::Bool executionForRSKE, SiriKitRuntime::RSKESource_optional source, SiriKitRuntime::PreExecutionRuleType_optional preExecutionType, Swift::String rootRequestId, Swift::String requestId, Swift::String_optional resultCandidateId, Swift::Bool triggerlessFollowupHandledLocally)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  char *v37;
  id v38;
  uint64_t v39;
  Class isa;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  uint64_t v48;
  Class v49;
  id v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  void *v56;
  uint64_t v57;
  void *object;
  NSObject *countAndFlagsBits;
  NSObject *v60;

  v8 = v7;
  object = rootRequestId._object;
  countAndFlagsBits = resultCandidateId.value._countAndFlagsBits;
  v56 = requestId._object;
  v54 = requestId._countAndFlagsBits;
  v9 = rootRequestId._countAndFlagsBits;
  v10 = *(_QWORD *)&preExecutionType;
  v11 = *(_QWORD *)&source;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v55 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v51 - v16;
  v57 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v57 - 8);
  v19 = MEMORY[0x1E0C80A78](v57);
  v52 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v53 = (char *)&v51 - v21;
  v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F40]), sel_init);
  if (!v60)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.conversationBridge);
    v60 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_1B4BE6000, v60, v32, "Failed to create ORCHSchemaORCHExecutionRequestReceived event", v33, 2u);
      MEMORY[0x1B5E44758](v33, -1, -1);
    }
    goto LABEL_24;
  }
  v51 = v18;
  if (executionForRSKE)
  {
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 248))(v11);
    -[NSObject setCommandSource:](v60, sel_setCommandSource_, v22);
  }
  -[NSObject setExecutionForRSKE:](v60, sel_setExecutionForRSKE_, executionForRSKE, v51);
  v23 = v8;
  v24 = (*(uint64_t (**)(uint64_t, Swift::Bool))(*(_QWORD *)v8 + 256))(v10, triggerlessFollowupHandledLocally);
  if ((v24 & 0x100000000) == 0)
    -[NSObject setPreExecutionDecision:](v60, sel_setPreExecutionDecision_, v24);
  v25 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(v9, (uint64_t)object, (uint64_t)countAndFlagsBits, (uint64_t)resultCandidateId.value._object, 1);
  if (!v25)
  {
LABEL_24:

    return;
  }
  v26 = v25;
  v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F28]), sel_init);
  if (!v27)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.conversationBridge);
    countAndFlagsBits = Logger.logObject.getter();
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(countAndFlagsBits, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1B4BE6000, countAndFlagsBits, v35, "Failed to create ORCHSchemaORCHExecutionBridgeContext event", v36, 2u);
      MEMORY[0x1B5E44758](v36, -1, -1);

      return;
    }

    goto LABEL_24;
  }
  v28 = v27;
  objc_msgSend(v27, sel_setStartedOrChanged_, v60);
  v29 = v57;
  if (resultCandidateId.value._object)
  {
    UUID.init(uuidString:)();
    v30 = v51;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v17, 1, v29) == 1)
    {
      outlined destroy of UUID?((uint64_t)v17);
    }
    else
    {
      v37 = v53;
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v53, v17, v29);
      v38 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
      v39 = v30;
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v41 = objc_msgSend(v38, sel_initWithNSUUID_, isa);

      objc_msgSend(v28, sel_setTrpId_, v41);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v29);
    }
  }
  v42 = *(_QWORD *)(v23 + 104);
  v43 = *(_QWORD *)(v23 + 112);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v23 + 80), v42);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v43 + 16))(v42, v43) & 1) != 0)
  {
    v44 = (uint64_t)v55;
    UUID.init(uuidString:)();
    v45 = v51;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v44, 1, v29) == 1)
    {
      outlined destroy of UUID?(v44);
    }
    else
    {
      v46 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v52, v44, v29);
      v47 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
      v48 = v45;
      v49 = UUID._bridgeToObjectiveC()().super.isa;
      v50 = objc_msgSend(v47, sel_initWithNSUUID_, v49);

      objc_msgSend(v28, sel_setSubRequestId_, v50);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v46, v29);
    }
  }
  objc_msgSend(v26, sel_setExecutionBridgeContext_, v28);
  objc_msgSend(*(id *)(v23 + 16), sel_emitMessage_, v26);

}

Swift::Void __swiftcall ConversationBridgeInstrumentationUtil.logExecutionRequestEnded(rootRequestId:requestId:resultCandidateId:)(Swift::String rootRequestId, Swift::String requestId, Swift::String resultCandidateId)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  id v31;
  Class isa;
  id v33;
  NSObject *v34;
  uint64_t v35;
  Class v36;
  char *v37;
  id v38;
  Class v39;
  id v40;
  uint64_t v41;
  char *v42;
  Swift::String v43;
  NSObject *v44;
  NSObject *v45;

  v43 = requestId;
  object = resultCandidateId._object;
  countAndFlagsBits = resultCandidateId._countAndFlagsBits;
  v5 = rootRequestId._object;
  v6 = rootRequestId._countAndFlagsBits;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v41 - v11;
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v42 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v41 - v17;
  v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F30]), sel_init);
  if (!v19)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
    v45 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1B4BE6000, v45, v26, "Failed to create ORCHSchemaORCHExecutionEnded event", v27, 2u);
      MEMORY[0x1B5E44758](v27, -1, -1);
    }
    goto LABEL_19;
  }
  v45 = v19;
  -[NSObject setExists:](v19, sel_setExists_, 1);
  v20 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(v6, (uint64_t)v5, countAndFlagsBits, (uint64_t)object, 1);
  if (!v20)
  {
LABEL_19:

    return;
  }
  v21 = v20;
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F28]), sel_init);
  if (!v22)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
    v44 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_1B4BE6000, v44, v29, "Failed to create ORCHSchemaORCHExecutionBridgeContext event", v30, 2u);
      MEMORY[0x1B5E44758](v30, -1, -1);

      return;
    }

    goto LABEL_19;
  }
  v23 = v22;
  UUID.init(uuidString:)();
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v24(v12, 1, v13) == 1)
  {
    outlined destroy of UUID?((uint64_t)v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v12, v13);
    v31 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v33 = objc_msgSend(v31, sel_initWithNSUUID_, isa);

    objc_msgSend(v23, sel_setTrpId_, v33);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  }
  v34 = v44;
  v35 = (uint64_t)v44[13].isa;
  v36 = v44[14].isa;
  __swift_project_boxed_opaque_existential_1(&v44[10].isa, v35);
  if (((*((uint64_t (**)(uint64_t, Class))v36 + 2))(v35, v36) & 1) != 0)
  {
    UUID.init(uuidString:)();
    if (v24(v10, 1, v13) == 1)
    {
      outlined destroy of UUID?((uint64_t)v10);
    }
    else
    {
      v37 = v42;
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v42, v10, v13);
      v38 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
      v39 = UUID._bridgeToObjectiveC()().super.isa;
      v40 = objc_msgSend(v38, sel_initWithNSUUID_, v39);

      objc_msgSend(v23, sel_setSubRequestId_, v40);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v37, v13);
    }
  }
  objc_msgSend(v23, sel_setEnded_, v45);
  objc_msgSend(v21, sel_setExecutionBridgeContext_, v23);
  -[objc_class emitMessage:](v34[2].isa, sel_emitMessage_, v21);

}

Swift::Void __swiftcall ConversationBridgeInstrumentationUtil.logExecutionRequestFailed(error:rootRequestId:requestId:resultCandidateId:)(Swift::String error, Swift::String rootRequestId, Swift::String requestId, Swift::String_optional resultCandidateId)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  Class v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  id v36;
  Class v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  Class v42;
  char *v43;
  id v44;
  Class v45;
  id v46;
  uint64_t v47;
  char *v48;
  Swift::String v49;
  uint64_t v50;
  Class isa;
  NSObject *v52;
  NSObject *v53;

  v49 = requestId;
  object = resultCandidateId.value._object;
  countAndFlagsBits = resultCandidateId.value._countAndFlagsBits;
  v6 = rootRequestId._object;
  v7 = rootRequestId._countAndFlagsBits;
  v8 = error._object;
  v9 = error._countAndFlagsBits;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v47 - v14;
  v16 = type metadata accessor for UUID();
  isa = v16[-1].isa;
  v52 = v16;
  v17 = MEMORY[0x1E0C80A78](v16);
  v48 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v47 - v19;
  v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F38]), sel_init);
  if (!v21)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.conversationBridge);
    v53 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1B4BE6000, v53, v31, "Failed to create ORCHSchemaORCHExecutionFailed event", v32, 2u);
      MEMORY[0x1B5E44758](v32, -1, -1);
    }
    goto LABEL_20;
  }
  v53 = v21;
  v22 = (void *)MEMORY[0x1B5E432E8](v9, v8);
  -[NSObject setErrorString:](v53, sel_setErrorString_, v22);

  v23 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(v7, (uint64_t)v6, countAndFlagsBits, (uint64_t)object, 1);
  if (!v23)
  {
LABEL_20:

    return;
  }
  v24 = v23;
  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F28]), sel_init);
  if (!v25)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.conversationBridge);
    v52 = Logger.logObject.getter();
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_1B4BE6000, v52, v34, "Failed to create ORCHSchemaORCHExecutionBridgeContext event", v35, 2u);
      MEMORY[0x1B5E44758](v35, -1, -1);

      return;
    }

    goto LABEL_20;
  }
  v26 = v25;
  v27 = v50;
  if (object)
  {
    UUID.init(uuidString:)();
    v29 = isa;
    v28 = v52;
    if ((*((unsigned int (**)(char *, uint64_t, NSObject *))isa + 6))(v15, 1, v52) == 1)
    {
      outlined destroy of UUID?((uint64_t)v15);
    }
    else
    {
      (*((void (**)(char *, char *, NSObject *))v29 + 4))(v20, v15, v28);
      v36 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
      v37 = UUID._bridgeToObjectiveC()().super.isa;
      v38 = objc_msgSend(v36, sel_initWithNSUUID_, v37);

      objc_msgSend(v26, sel_setTrpId_, v38);
      (*((void (**)(char *, NSObject *))v29 + 1))(v20, v28);
    }
  }
  v39 = *(_QWORD *)(v27 + 104);
  v40 = *(_QWORD *)(v27 + 112);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v27 + 80), v39);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v40 + 16))(v39, v40) & 1) != 0)
  {
    UUID.init(uuidString:)();
    v42 = isa;
    v41 = v52;
    if ((*((unsigned int (**)(char *, uint64_t, NSObject *))isa + 6))(v13, 1, v52) == 1)
    {
      outlined destroy of UUID?((uint64_t)v13);
    }
    else
    {
      v43 = v48;
      (*((void (**)(char *, char *, NSObject *))v42 + 4))(v48, v13, v41);
      v44 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
      v45 = UUID._bridgeToObjectiveC()().super.isa;
      v46 = objc_msgSend(v44, sel_initWithNSUUID_, v45);

      objc_msgSend(v26, sel_setSubRequestId_, v46);
      (*((void (**)(char *, NSObject *))v42 + 1))(v43, v41);
    }
  }
  objc_msgSend(v26, sel_setFailed_, v53);
  objc_msgSend(v24, sel_setExecutionBridgeContext_, v26);
  objc_msgSend(*(id *)(v27 + 16), sel_emitMessage_, v24);

}

void ConversationBridgeInstrumentationUtil.logFlowOutputSubmitted(outputSubmissionId:flowCommandReceived:flowCommandResponseError:requestId:rootRequestId:executionOutput:)(uint64_t a1, char a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint32_t *p_ivar_base_size;
  id v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  id v45;
  Class isa;
  id v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  void *v52;
  unint64_t v53;
  Class v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  NSArray v58;
  id v59;
  void *v60;
  id v61;
  void *v62;
  uint64_t v63;
  char *v64;
  id v65;
  Class v66;
  id v67;
  id v68;
  id v69;
  void *v70;
  uint64_t v71;
  id v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  char *v78;
  id v79;
  Class v80;
  id v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  id v86[2];
  id v87;
  char *v88;
  char *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  id v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;

  v91 = a4;
  v92 = a5;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v89 = (char *)v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v97 = (char *)v86 - v18;
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v86 - v19;
  v96 = type metadata accessor for UUID();
  v98 = *(NSObject **)(v96 - 8);
  v21 = MEMORY[0x1E0C80A78](v96);
  v88 = (char *)v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v93 = (char *)v86 - v24;
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)v86 - v25;
  v27 = a7;
  if (!a7)
  {
    v27 = v92;
    swift_bridgeObjectRetain();
    a6 = v91;
  }
  swift_bridgeObjectRetain();
  v28 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(a6, v27, 0, 0, 0);
  if (!v28)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain();
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      v100 = v41;
      *(_DWORD *)v40 = 136315138;
      swift_bridgeObjectRetain();
      v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, v27, &v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v38, v39, "Failed to create wrapper event with rootRequestId = %s for logFlowOutputSubmitted", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v41, -1, -1);
      MEMORY[0x1B5E44758](v40, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  v94 = v28;
  swift_bridgeObjectRelease();
  v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99F48]), sel_init);
  if (!v29)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.conversationBridge);
    v98 = Logger.logObject.getter();
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v98, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v44 = 0;
      _os_log_impl(&dword_1B4BE6000, v98, v43, "Failed to create ORCHSchemaORCHFlowOutputSubmitted event", v44, 2u);
      MEMORY[0x1B5E44758](v44, -1, -1);

    }
    else
    {

    }
    return;
  }
  v30 = v29;
  objc_msgSend(v29, sel_setFlowOutputSubmissionId_, a1);
  objc_msgSend(v30, sel_setFlowCommandReceived_, a2 & 1);
  objc_msgSend(v30, sel_setFlowCommandResponseError_, a3 & 1);
  v31 = *(void **)(a8 + OBJC_IVAR___SKRExecutionOutput_command);
  v32 = v96;
  if (!v31)
    goto LABEL_48;
  p_ivar_base_size = &ConversationTurnStateImpl.CommandHandler.ivar_base_size;
  v34 = objc_msgSend(v31, sel_aceId);
  if (v34)
  {
    v35 = v34;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.init(uuidString:)();
    v36 = v98;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v98[6].isa)(v20, 1, v32) == 1)
    {
      outlined destroy of UUID?((uint64_t)v20);
      swift_bridgeObjectRelease();
      p_ivar_base_size = (_DWORD *)(&ConversationTurnStateImpl.CommandHandler + 8);
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v36[4].isa)(v26, v20, v32);
      v45 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v47 = objc_msgSend(v45, sel_initWithNSUUID_, isa);

      ((void (*)(char *, uint64_t))v36[1].isa)(v26, v32);
      swift_bridgeObjectRelease();
      p_ivar_base_size = (_DWORD *)(&ConversationTurnStateImpl.CommandHandler + 8);
      if (v47)
      {
        objc_msgSend(v30, sel_setAceCommandId_, v47);

      }
    }
  }
  objc_opt_self();
  v48 = swift_dynamicCastObjCClass();
  if (!v48)
  {
LABEL_48:
    v73 = v90;
    v74 = v90[13];
    v75 = v90[14];
    __swift_project_boxed_opaque_existential_1(v90 + 10, v74);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v75 + 16))(v74, v75) & 1) != 0)
    {
      v76 = (uint64_t)v89;
      UUID.init(uuidString:)();
      v77 = v98;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v98[6].isa)(v76, 1, v32) == 1)
      {
        outlined destroy of UUID?(v76);
LABEL_54:
        if (one-time initialization token for conversationBridge != -1)
          swift_once();
        v82 = type metadata accessor for Logger();
        __swift_project_value_buffer(v82, (uint64_t)static Logger.conversationBridge);
        v83 = Logger.logObject.getter();
        v84 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v83, v84))
        {
          v85 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v85 = 0;
          _os_log_impl(&dword_1B4BE6000, v83, v84, "Failed to convert subRequestLogId for logFlowOutputSubmitted", v85, 2u);
          MEMORY[0x1B5E44758](v85, -1, -1);

          return;
        }

        goto LABEL_59;
      }
      v78 = v88;
      ((void (*)(char *, uint64_t, uint64_t))v77[4].isa)(v88, v76, v32);
      v79 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
      v80 = UUID._bridgeToObjectiveC()().super.isa;
      v81 = objc_msgSend(v79, sel_initWithNSUUID_, v80);

      ((void (*)(char *, uint64_t))v77[1].isa)(v78, v32);
      if (!v81)
        goto LABEL_54;
      objc_msgSend(v30, sel_setSubRequestId_, v81);

    }
    objc_msgSend(v94, sel_setFlowOutputSubmitted_, v30);
    objc_msgSend((id)v73[2], sel_emitMessage_, v94);
LABEL_59:

    return;
  }
  v49 = (void *)v48;
  v50 = v31;
  v51 = objc_msgSend(v49, sel_views);
  if (!v51)
  {

    goto LABEL_48;
  }
  v52 = v51;
  v86[0] = v50;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v86[1] = (id)type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SISchemaUUID);
  v54 = Array._bridgeToObjectiveC()().super.isa;
  v87 = v30;
  objc_msgSend(v30, sel_setAceViewIds_, v54);

  if (v53 >> 62)
  {
    swift_bridgeObjectRetain();
    v55 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v55)
      goto LABEL_25;
    goto LABEL_47;
  }
  v55 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v55)
  {
LABEL_47:

    swift_bridgeObjectRelease();
    v30 = v87;
    goto LABEL_48;
  }
LABEL_25:
  if (v55 >= 1)
  {
    v56 = 0;
    v95 = v53 & 0xC000000000000001;
    v57 = v98;
    while (1)
    {
      if (v95)
        v59 = (id)MEMORY[0x1B5E43B94](v56, v53);
      else
        v59 = *(id *)(v53 + 8 * v56 + 32);
      v60 = v59;
      v61 = objc_msgSend(v59, *((SEL *)p_ivar_base_size + 494));
      if (v61)
      {
        v62 = v61;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        v63 = (uint64_t)v97;
        UUID.init(uuidString:)();
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v57[6].isa)(v63, 1, v32) == 1)
        {
          outlined destroy of UUID?(v63);

          swift_bridgeObjectRelease();
          goto LABEL_30;
        }
        v64 = v93;
        ((void (*)(char *, uint64_t, uint64_t))v57[4].isa)(v93, v63, v32);
        v65 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
        v66 = UUID._bridgeToObjectiveC()().super.isa;
        v67 = objc_msgSend(v65, sel_initWithNSUUID_, v66);

        v32 = v96;
        ((void (*)(char *, uint64_t))v57[1].isa)(v64, v96);
        swift_bridgeObjectRelease();
        if (!v67)
          goto LABEL_44;
        v68 = v87;
        v69 = objc_msgSend(v87, sel_aceViewIds);
        if (!v69)
        {
          objc_msgSend(v68, sel_setAceViewIds_, 0);
          swift_bridgeObjectRelease();

LABEL_44:
          p_ivar_base_size = (_DWORD *)(&ConversationTurnStateImpl.CommandHandler + 8);
          goto LABEL_30;
        }
        v70 = v69;
        v71 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v100 = v71;
        v72 = v67;
        MEMORY[0x1B5E43498]();
        if (*(_QWORD *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        p_ivar_base_size = &ConversationTurnStateImpl.CommandHandler.ivar_base_size;
        if (v100)
        {
          v58.super.isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
        }
        else
        {
          v58.super.isa = 0;
        }
        objc_msgSend(v87, sel_setAceViewIds_, v58.super.isa);

      }
LABEL_30:
      if (v55 == ++v56)
        goto LABEL_47;
    }
  }
  __break(1u);
}

uint64_t ConversationBridgeInstrumentationUtil.logRequestCancelledForMitigation(requestId:mitigationSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  (*(void (**)(void))(*(_QWORD *)v3 + 184))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 192))(a3, a1, a2);
}

Swift::Void __swiftcall ConversationBridgeInstrumentationUtil.logRequestCancelled(requestId:)(Swift::String requestId)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *v16;
  NSObject *oslog;

  v2 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(requestId._countAndFlagsBits, (uint64_t)requestId._object, 0, 0, 0);
  if (!v2)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    oslog = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1B4BE6000, oslog, v8, "Failed to create wrapper for ORCHSchemaORCHRequestCancelled event", v9, 2u);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }
    goto LABEL_18;
  }
  v3 = v2;
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99FC0]), sel_init);
  if (!v4)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    oslog = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v11))
    {

      v16 = v3;
      goto LABEL_19;
    }
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v11, "Failed to create ORCHSchemaORCHRequestContext event", v12, 2u);
    MEMORY[0x1B5E44758](v12, -1, -1);
    goto LABEL_17;
  }
  v5 = v4;
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99FB0]), sel_init);
  if (!v6)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
    oslog = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v14))
    {

      v16 = v5;
      goto LABEL_19;
    }
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v14, "Failed to create ORCHSchemaORCHRequestCancelled event", v15, 2u);
    MEMORY[0x1B5E44758](v15, -1, -1);

LABEL_17:
    goto LABEL_18;
  }
  oslog = v6;
  -[NSObject setReason:](v6, sel_setReason_, 1);
  -[NSObject setCancelled:](v5, sel_setCancelled_, oslog);
  -[NSObject setRequestContext:](v3, sel_setRequestContext_, v5);
  objc_msgSend(*(id *)(v1 + 16), sel_emitMessage_, v3);

LABEL_18:
  v16 = oslog;
LABEL_19:

}

void ConversationBridgeInstrumentationUtil.logRequestMitigated(mitigationSource:requestId:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSObject *oslog;
  uint64_t v20;

  v4 = v3;
  v8 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(a2, a3, 0, 0, 0);
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D99FD8]), sel_init);
    objc_msgSend(v10, sel_setMitigationSource_, a1);
    objc_msgSend(v9, sel_setRequestMitigated_, v10);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v20 = v15;
      *(_DWORD *)v14 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v12, v13, "Sending SELF RequestMitigated event for requestId %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v15, -1, -1);
      MEMORY[0x1B5E44758](v14, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    objc_msgSend(*(id *)(v4 + 16), sel_emitMessage_, v9);

  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
    oslog = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B4BE6000, oslog, v17, "Could not build wrapper when logging requestMitigatedEvent", v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);
    }

  }
}

Swift::Void __swiftcall ConversationBridgeInstrumentationUtil.logServerFallbackFailed(errorCode:requestId:)(Swift::Int32 errorCode, Swift::String requestId)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  NSObject *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSObject *v19;
  NSObject *oslog;
  NSObject *v21;

  object = requestId._object;
  countAndFlagsBits = requestId._countAndFlagsBits;
  v5 = *(_QWORD *)&errorCode;
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A018]), sel_init);
  if (!v6)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
    v21 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v21, v14, "Failed to create ORCHSchemaORCHServerFallbackFailed event", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }
    goto LABEL_16;
  }
  v21 = v6;
  -[NSObject setErrorCode:](v6, sel_setErrorCode_, v5);
  v7 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(countAndFlagsBits, (uint64_t)object, 0, 0, 1);
  if (!v7)
  {
LABEL_16:
    v19 = v21;
    goto LABEL_17;
  }
  v8 = v7;
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A010]), sel_init);
  if (!v9)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
    oslog = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B4BE6000, oslog, v17, "Failed to create ORCHSchemaORCHServerFallbackContext event", v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);

      v19 = oslog;
LABEL_17:

      return;
    }

    goto LABEL_16;
  }
  v10 = v9;
  objc_msgSend(v9, sel_setFailed_, v21);
  objc_msgSend(v8, sel_setServerFallbackContext_, v10);
  objc_msgSend(*(id *)(v2 + 16), sel_emitMessage_, v8);
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v11 = type metadata accessor for InsightRequestSummaryLogger();
  v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.insightRequestSummaryLogger);
  swift_bridgeObjectRetain();
  specialized InsightRequestSummaryLogger.emitDebug(_:)(v12, countAndFlagsBits, (uint64_t)object, v5);

  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ConversationBridgeInstrumentationUtil.logRequestLinkEvent(requestId:)(Swift::String requestId)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  object = requestId._object;
  countAndFlagsBits = requestId._countAndFlagsBits;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v28 - v13;
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v7);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v29 = v19;
      *(_DWORD *)v18 = 136315138;
      swift_bridgeObjectRetain();
      v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v16, v17, "RequestId=%s isn't in the right format of a uuid string", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v19, -1, -1);
      MEMORY[0x1B5E44758](v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    v20 = *(_QWORD *)(v2 + 56);
    v21 = *(_QWORD *)(v2 + 64);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + 32), v20);
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v21 + 8))(3, v14, v20, v21);
    v22 = specialized InstrumentationUtil.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(1, (uint64_t)v14, 3);
    if (v22)
    {
      v23 = v22;
      objc_msgSend(*(id *)(v2 + 16), sel_emitMessage_, v22);
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
      v23 = Logger.logObject.getter();
      v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v26 = 0;
        _os_log_impl(&dword_1B4BE6000, v23, v25, "Failed to create RequestLink event for ExecutionBridge", v26, 2u);
        MEMORY[0x1B5E44758](v26, -1, -1);
      }
    }

    v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v12, v8);
    v27(v14, v8);
  }
}

void ConversationBridgeInstrumentationUtil.logSensitiveCondition(forSensitiveCondition:requestId:)(unsigned int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  char *v28;
  id v29;
  Class isa;
  unsigned int v31;
  id v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  uint64_t aBlock[6];
  uint64_t v44;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v42 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  v16 = os_log_type_enabled(v14, v15);
  v41 = a1;
  if (v16)
  {
    v17 = swift_slowAlloc();
    v39 = v10;
    v18 = v17;
    v37 = swift_slowAlloc();
    aBlock[0] = v37;
    *(_DWORD *)v18 = 136315394;
    v38 = v13;
    v19 = SISchemaDeviceSensitivityState.description.getter();
    v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v14, v15, "Logging SiriAnalytics sensitive condition: %s for requestId: %s", (uint8_t *)v18, 0x16u);
    v21 = v37;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v21, -1, -1);
    v22 = v18;
    v10 = v39;
    MEMORY[0x1B5E44758](v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    v23 = a2;
    outlined destroy of UUID?((uint64_t)v8);
    swift_bridgeObjectRetain_n();
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      aBlock[0] = v27;
      *(_DWORD *)v26 = 136315138;
      swift_bridgeObjectRetain();
      v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, a3, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v24, v25, "Failed to redact SiriAnalytics since requestId %s is malformed", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v27, -1, -1);
      MEMORY[0x1B5E44758](v26, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    v28 = v42;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v42, v8, v9);
    v29 = objc_allocWithZone(MEMORY[0x1E0D978B0]);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v31 = v41;
    v32 = objc_msgSend(v29, sel_initWithConditionType_requestId_joined_, v41, isa, 1);

    v33 = *(void **)(v40 + 72);
    v34 = swift_allocObject();
    *(_DWORD *)(v34 + 16) = v31;
    *(_QWORD *)(v34 + 24) = a2;
    *(_QWORD *)(v34 + 32) = a3;
    aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationBridgeInstrumentationUtil.logSensitiveCondition(forSensitiveCondition:requestId:);
    aBlock[5] = v34;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_3;
    v35 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_release();
    objc_msgSend(v33, sel_createTag_completion_, v32, v35);
    _Block_release(v35);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v28, v9);
  }
}

void closure #1 in ConversationBridgeInstrumentationUtil.logSensitiveCondition(forSensitiveCondition:requestId:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  id v9;
  id v10;
  os_log_type_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *oslog;
  uint64_t v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain();
  v9 = a2;
  swift_bridgeObjectRetain();
  v10 = a2;
  oslog = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v11))
  {
    v12 = swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v20[0] = v18;
    *(_DWORD *)v12 = 136315906;
    v14 = SISchemaDeviceSensitivityState.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 22) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 28) = 2112;
    if (a2)
    {
      v16 = a2;
      v17 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v17 = 0;
    }
    *v13 = v17;

    _os_log_impl(&dword_1B4BE6000, oslog, v11, "Logged sensitive condition: %s for requestId: %s successfully: %{BOOL}d. Error: %@", (uint8_t *)v12, 0x26u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v18, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n();

  }
}

void ConversationBridgeInstrumentationUtil.logSREvent(requestId:strategy:predictedErrorType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  Class isa;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;

  v5 = v4;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of UUID?((uint64_t)v10);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B4BE6000, v16, v17, "The requestId is not a valid UUID.", v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v19 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v21 = objc_msgSend(v19, sel_initWithNSUUID_, isa);

    v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A540]), sel_init);
    v23 = v22;
    if (v22)
      objc_msgSend(v22, sel_setRequestId_, v21);
    v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A530]), sel_init);
    objc_msgSend(v24, sel_setSelectedRecoveryStrategy_, a3);
    objc_msgSend(v24, sel_setPredictedErrorType_, a4);
    v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A548]), sel_init);
    objc_msgSend(v25, sel_setCheckErrorResponse_, v24);
    v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A538]), sel_init);
    if (v26)
    {
      v27 = v26;
      objc_msgSend(v26, sel_setEventMetadata_, v23);
      objc_msgSend(v27, sel_setErrorChecked_, v25);
      objc_msgSend(*(id *)(v5 + 16), sel_emitMessage_, v27);

    }
    else
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_1B4BE6000, v29, v30, "Failed to create SRSchemaSRClientEvent.", v31, 2u);
        MEMORY[0x1B5E44758](v31, -1, -1);
      }

    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t ConversationBridgeInstrumentationUtil.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  return v0;
}

uint64_t ConversationBridgeInstrumentationUtil.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  return swift_deallocClassInstance();
}

uint64_t sub_1B4D2665C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for ServerFallbackReason();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t sub_1B4D26720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1B4D2679C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationBridgeInstrumentationUtil.logSensitiveCondition(forSensitiveCondition:requestId:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #1 in ConversationBridgeInstrumentationUtil.logSensitiveCondition(forSensitiveCondition:requestId:)(a1, a2, *(unsigned int *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t type metadata accessor for ConversationBridgeInstrumentationUtil()
{
  return objc_opt_self();
}

uint64_t method lookup function for ConversationBridgeInstrumentationUtil()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.__allocating_init(_:_:_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logExecutionRequestStarted(executionForRSKE:source:preExecutionType:rootRequestId:requestId:resultCandidateId:triggerlessFollowupHandledLocally:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logExecutionRequestEnded(rootRequestId:requestId:resultCandidateId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logExecutionRequestFailed(error:rootRequestId:requestId:resultCandidateId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logFlowOutputSubmitted(outputSubmissionId:flowCommandReceived:flowCommandResponseError:requestId:rootRequestId:executionOutput:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logContextFlowSubmitted(contextUpdateReceived:contextUpdateError:requestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logRequestCancelledForMitigation(requestId:mitigationSource:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logRequestCancelled(requestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logRequestMitigated(mitigationSource:requestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logServerFallbackInitiated(requestId:resultCandidateId:contextId:fallbackReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logServerFallbackResponseReceived(requestId:contextId:rcId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logServerFallbackFailed(errorCode:requestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logRequestLinkEvent(requestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logSensitiveCondition(forSensitiveCondition:requestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logSREvent(requestId:strategy:predictedErrorType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.mapRSKESourceToLogRSKESource(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.mapPreExecutionRuleTypeToLogRuleType(_:_:)()
{
  uint64_t v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.mapServerFallbackReasonToLoggingReason(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t ConversationBridgeProcessorDelegate.executionProcessor.getter()
{
  swift_beginAccess();
  return swift_weakLoadStrong();
}

uint64_t ConversationBridgeProcessorDelegate.__allocating_init(requestDispatcherServiceHelper:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v2 + 24) = a1;
  return v2;
}

uint64_t ConversationBridgeProcessorDelegate.init(requestDispatcherServiceHelper:)(uint64_t a1)
{
  uint64_t v1;

  swift_weakInit();
  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

void ConversationBridgeProcessorDelegate.setExecutionProcessor(executionProcessor:)()
{
  uint64_t Strong;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  swift_release();
  if (Strong)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1B4BE6000, v2, v3, "executionProcessor was already set on ExecutionBridgeProcessorDelegate ignoring this operation", v4, 2u);
      MEMORY[0x1B5E44758](v4, -1, -1);
    }

  }
  else
  {
    swift_weakAssign();
  }
}

void ConversationBridgeProcessorDelegate.close(withExecutionOutput:)(void *a1)
{
  uint64_t Strong;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *))(*(_QWORD *)Strong + 912))(a1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    v4 = a1;
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v11 = v8;
      *(_DWORD *)v7 = 136315138;
      v9 = *(_QWORD *)&v4[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      v10 = *(_QWORD *)&v4[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v5, v6, "ConversationRequestProcessor already released, ignoring close of %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v7, -1, -1);

    }
    else
    {

    }
  }
}

void ConversationBridgeProcessorDelegate.close(withExecutionOutput:errorString:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t Strong;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)Strong + 920))(a1, a2, a3);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    v8 = a1;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v15 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = *(_QWORD *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      v14 = *(_QWORD *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v9, v10, "ConversationRequestProcessor already released, ignoring close of %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v12, -1, -1);
      MEMORY[0x1B5E44758](v11, -1, -1);

    }
    else
    {

    }
  }
}

void ConversationBridgeProcessorDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t Strong;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)Strong + 928))(a1, a2, a3, a4 & 1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
    v10 = a1;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v17 = v14;
      *(_DWORD *)v13 = 136315138;
      v15 = *(_QWORD *)&v10[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      v16 = *(_QWORD *)&v10[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v11, v12, "ConversationRequestProcessor already released, ignoring close of %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v14, -1, -1);
      MEMORY[0x1B5E44758](v13, -1, -1);

    }
    else
    {

    }
  }
}

void ConversationBridgeProcessorDelegate.fallbackToServer(forResultCandidateId:serverFallbackReason:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t Strong;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)Strong + 944))(a1, a2, a3);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v13 = v11;
      *(_DWORD *)v10 = 136315138;
      if (a2)
      {
        v12 = a2;
      }
      else
      {
        a1 = 7104878;
        v12 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v8, v9, "ConversationRequestProcessor already released, ignoring fallbackToServer of %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v11, -1, -1);
      MEMORY[0x1B5E44758](v10, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

Swift::Void __swiftcall ConversationBridgeProcessorDelegate.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t Strong;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  object = forResultCandidateId.value._object;
  countAndFlagsBits = forResultCandidateId.value._countAndFlagsBits;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, void *))(*(_QWORD *)Strong + 952))(countAndFlagsBits, object);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v10 = v8;
      *(_DWORD *)v7 = 136315138;
      if (object)
      {
        v9 = (unint64_t)object;
      }
      else
      {
        countAndFlagsBits = 7104878;
        v9 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v5, v6, "ConversationRequestProcessor already released, ignoring fallbackToInfoDomainResults of %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v7, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void ConversationBridgeProcessorDelegate.fallbackToIntelligenceFlow(prescribedTool:)(uint64_t a1)
{
  uint64_t Strong;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)Strong + 736))(a1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "ConversationRequestProcessor already released, ignoring fallbackToIntelligenceFlow", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }

  }
}

void ConversationBridgeProcessorDelegate.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  static ServiceBridgeDelegate.prepareForAudioHandoffDefault(_:completion:)(*(void **)(v2 + 24), a1, a2, *(_QWORD *)v2, (uint64_t)&protocol witness table for ConversationBridgeProcessorDelegate);
}

void ConversationBridgeProcessorDelegate.prepareForAudioHandoffFailed(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  static ServiceBridgeDelegate.prepareForAudioHandoffFailedDefault(_:completion:)(*(void **)(v2 + 24), a1, a2, *(_QWORD *)v2, (uint64_t)&protocol witness table for ConversationBridgeProcessorDelegate);
}

uint64_t ConversationBridgeProcessorDelegate.fetchSpeechInfo(reply:)(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  uint64_t Strong;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t (*)(_QWORD), uint64_t))(*(_QWORD *)Strong + 960))(a1, a2);
    return swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1B4BE6000, v7, v8, "ConversationRequestProcessor already released, ignoring fetchSpeechInfo", v9, 2u);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

    return a1(0);
  }
}

void ConversationBridgeProcessorDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t a8)
{
  uint64_t Strong;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  void *v22;
  _BYTE *v23;
  uint64_t v24;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(void), uint64_t))(*(_QWORD *)Strong + 1064))(a1, a2, a3, a4, a5, a6, a7, a8);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = swift_slowAlloc();
      v24 = v21;
      *(_DWORD *)v20 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v18, v19, "ConversationRequestProcessor already released, ignoring retriggerOriginalRequest for request id %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v21, -1, -1);
      MEMORY[0x1B5E44758](v20, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    v22 = (void *)swift_allocError();
    *v23 = 0;
    a7();

  }
}

uint64_t ConversationBridgeProcessorDelegate.fetchRecentDialogs(reply:)(void (*a1)(void))
{
  uint64_t Strong;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void))(*(_QWORD *)Strong + 968))();
    a1();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1B4BE6000, v5, v6, "ConversationRequestProcessor already released, ignoring fetchRecentDialogs", v7, 2u);
      MEMORY[0x1B5E44758](v7, -1, -1);
    }

    return ((uint64_t (*)(_QWORD))a1)(MEMORY[0x1E0DEE9D8]);
  }
}

Swift::Void __swiftcall ConversationBridgeProcessorDelegate.actionCandidatesGenerated(_:rcId:)(Swift::OpaquePointer _, Swift::String rcId)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t Strong;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  object = rcId._object;
  countAndFlagsBits = rcId._countAndFlagsBits;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, uint64_t, void *))(*(_QWORD *)Strong + 1248))(_._rawValue, countAndFlagsBits, object);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1B4BE6000, v7, v8, "ConversationRequestProcessor already released, ignoring actionCandidatesGenerated", v9, 2u);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

  }
}

void ConversationBridgeProcessorDelegate.willExecute(executionInputInfo:)(void *a1)
{
  uint64_t Strong;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *))(*(_QWORD *)Strong + 984))(a1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    v4 = a1;
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v7 = 138412290;
      v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v8 = v4;

      _os_log_impl(&dword_1B4BE6000, v5, v6, "ConversationRequestProcessor already released, ignoring willExecute for request id %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v7, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t ConversationBridgeProcessorDelegate.fetchSelfReflectionDecision(reply:)(void (*a1)(_QWORD *))
{
  uint64_t Strong;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD v8[3];

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)Strong + 992))(v8);
    a1(v8);
    return swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1B4BE6000, v5, v6, "ConversationRequestProcessor already released, ignoring fetchSelfReflectionDecision", v7, 2u);
      MEMORY[0x1B5E44758](v7, -1, -1);
    }

    LOBYTE(v8[0]) = 2;
    return ((uint64_t (*)(_QWORD *))a1)(v8);
  }
}

uint64_t ConversationBridgeProcessorDelegate.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  v4 = v3;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)Strong + 1000))(a1, a2, a3);
    return swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1B4BE6000, v11, v12, "ConversationRequestProcessor not in scope. Routing the external activation request directly", v13, 2u);
      MEMORY[0x1B5E44758](v13, -1, -1);
    }

    return static ServiceBridgeDelegate.defaultSubmitExternalActivationRequest(withRequestInfo:serviceHelper:completion:)(a1, *(id *)(v4 + 24), a2, a3);
  }
}

uint64_t ConversationBridgeProcessorDelegate.deinit()
{
  uint64_t v0;

  swift_weakDestroy();
  swift_unknownObjectRelease();
  return v0;
}

void protocol witness for ServiceBridgeDelegate.prepareForAudioHandoffFailed(completion:) in conformance ConversationBridgeProcessorDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  static ServiceBridgeDelegate.prepareForAudioHandoffFailedDefault(_:completion:)(*(void **)(v2 + 24), a1, a2, *(_QWORD *)v2, (uint64_t)&protocol witness table for ConversationBridgeProcessorDelegate);
}

uint64_t sub_1B4D28190@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_1B4D281DC()
{
  swift_beginAccess();
  return swift_weakAssign();
}

uint64_t method lookup function for ConversationBridgeProcessorDelegate()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationBridgeProcessorDelegate.__allocating_init(requestDispatcherServiceHelper:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

unint64_t lazy protocol witness table accessor for type NetworkAvailability.Status and conformance NetworkAvailability.Status()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NetworkAvailability.Status and conformance NetworkAvailability.Status;
  if (!lazy protocol witness table cache variable for type NetworkAvailability.Status and conformance NetworkAvailability.Status)
  {
    v1 = type metadata accessor for NetworkAvailability.Status();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DA81A8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkAvailability.Status and conformance NetworkAvailability.Status);
  }
  return result;
}

uint64_t static ConversationBridgeUtils.replyCommandSucceeded(forCommand:replyHandler:)(void *a1, void (*a2)(id, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v9 = objc_allocWithZone(MEMORY[0x1E0D87FF8]);
    swift_retain();
    v10 = objc_msgSend(v9, sel_init);
    UUID.init()();
    v11 = UUID.uuidString.getter();
    v13 = v12;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v14 = (void *)MEMORY[0x1B5E432E8](v11, v13);
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setAceId_, v14);

    v15 = v10;
    v16 = objc_msgSend(a1, sel_aceId);
    objc_msgSend(v15, sel_setRefId_, v16);

    v17 = v15;
    a2(v15, 0);

    return _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)a2);
  }
  return result;
}

void closure #1 in static ConversationBridgeUtils.failRequest(serviceHelper:executionRequestId:reason:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "Sent CommandFailed to fail this request", v2, 2u);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

}

uint64_t specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(id, id), uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  unint64_t v27;
  void *v28;
  uint64_t inited;
  uint64_t v30;
  unint64_t v31;
  id v32;
  id v33;
  void *v34;
  Class isa;
  id v36;
  _QWORD v37[2];

  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  result = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5)
  {
    v37[0] = a3;
    v17 = a2;
    v18 = objc_allocWithZone(MEMORY[0x1E0D87FE8]);
    v37[1] = a6;
    swift_retain();
    v19 = objc_msgSend(v18, sel_init);
    UUID.init()();
    v20 = UUID.uuidString.getter();
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    v23 = (void *)MEMORY[0x1B5E432E8](v20, v22);
    swift_bridgeObjectRelease();
    objc_msgSend(v19, sel_setAceId_, v23);

    v24 = v17;
    v25 = v19;
    v26 = objc_msgSend(a1, sel_aceId);
    objc_msgSend(v25, sel_setRefId_, v26);

    objc_msgSend(v25, sel_setErrorCode_, v17);
    if (a4)
    {
      v27 = v37[0];
      v28 = (void *)MEMORY[0x1B5E432E8](v37[0], a4);
    }
    else
    {
      v28 = 0;
      v27 = 0xD000000000000017;
    }
    objc_msgSend(v25, sel_setReason_, v28);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    v30 = inited;
    *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
    *(_QWORD *)(inited + 32) = 0x6567617373654DLL;
    *(_QWORD *)(inited + 40) = 0xE700000000000000;
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    v31 = 0x80000001B4EF90F0;
    if (a4)
      v31 = a4;
    *(_QWORD *)(inited + 48) = v27;
    *(_QWORD *)(inited + 56) = v31;
    v32 = v25;
    swift_bridgeObjectRetain();
    specialized Dictionary.init(dictionaryLiteral:)(v30);
    v33 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v34 = (void *)MEMORY[0x1B5E432E8](0x6F69747563657845, 0xEF6567646972426ELL);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v36 = objc_msgSend(v33, sel_initWithDomain_code_userInfo_, v34, v24, isa);

    a5(v25, v36);
    return _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)a5);
  }
  return result;
}

uint64_t specialized static ConversationBridgeUtils.replyCommandIgnored(forCommand:errorCode:reason:replyHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(id, id))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  uint64_t inited;
  id v25;
  id v26;
  void *v27;
  Class isa;
  id v29;
  uint64_t v30;
  uint64_t v31;

  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  result = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5)
  {
    v15 = objc_allocWithZone(MEMORY[0x1E0D87FF0]);
    v30 = a3;
    v16 = v15;
    swift_retain();
    v17 = objc_msgSend(v16, sel_init);
    UUID.init()();
    v18 = UUID.uuidString.getter();
    v31 = a2;
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v21 = (void *)MEMORY[0x1B5E432E8](v18, v20);
    swift_bridgeObjectRelease();
    objc_msgSend(v17, sel_setAceId_, v21);

    v22 = v17;
    v23 = objc_msgSend(a1, sel_aceId);
    objc_msgSend(v22, sel_setRefId_, v23);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
    *(_QWORD *)(inited + 32) = 0x6567617373654DLL;
    *(_QWORD *)(inited + 40) = 0xE700000000000000;
    *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(inited + 48) = v30;
    *(_QWORD *)(inited + 56) = a4;
    v25 = v22;
    swift_bridgeObjectRetain();
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    v26 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v27 = (void *)MEMORY[0x1B5E432E8](0x6F69747563657845, 0xEF6567646972426ELL);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v29 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, v31, isa);

    a5(v22, v29);
    return _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)a5);
  }
  return result;
}

void specialized static ConversationBridgeUtils.failRequest(serviceHelper:executionRequestId:reason:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v27 = a4;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1B4BE6000, v14, v15, "Sending CommandFailed to fail this request.", v16, 2u);
    MEMORY[0x1B5E44758](v16, -1, -1);
  }

  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D87FE8]), sel_init);
  UUID.init()();
  v18 = UUID.uuidString.getter();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v21 = (void *)MEMORY[0x1B5E432E8](v18, v20);
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_setAceId_, v21);

  v22 = v17;
  v23 = (void *)MEMORY[0x1B5E432E8](a2, a3);
  objc_msgSend(v22, sel_setRefId_, v23);

  if (a5)
    a5 = (void *)MEMORY[0x1B5E432E8](v27, a5);
  objc_msgSend(v22, sel_setReason_, a5);

  aBlock[4] = closure #1 in static ConversationBridgeUtils.failRequest(serviceHelper:executionRequestId:reason:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_4;
  v24 = _Block_copy(aBlock);
  v25 = v22;
  objc_msgSend(a1, sel_handleCommand_completion_, v25, v24);
  _Block_release(v24);

}

ValueMetadata *type metadata accessor for ConversationBridgeUtils()
{
  return &type metadata for ConversationBridgeUtils;
}

uint64_t static ConversationCanHandleResult.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static ConversationCanHandleResult.supportsSecureCoding;
}

uint64_t static ConversationCanHandleResult.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static ConversationCanHandleResult.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ConversationCanHandleResult.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ConversationCanHandleResult.directlySupported.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported);
}

uint64_t ConversationCanHandleResult.exclude.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude);
}

uint64_t ConversationCanHandleResult.reformedInput.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput, a1, &demangling cache variable for type metadata for Input?);
}

uint64_t ConversationCanHandleResult.flowIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier, a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t one-time initialization function for unsupported()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  objc_class *CanHandleResult;
  _BYTE *v9;
  id v10;
  uint64_t result;
  objc_super v12;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
  CanHandleResult = (objc_class *)type metadata accessor for ConversationCanHandleResult();
  v9 = objc_allocWithZone(CanHandleResult);
  v9[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 0;
  v9[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t)&v9[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v2, (uint64_t)&v9[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v12.receiver = v9;
  v12.super_class = CanHandleResult;
  v10 = objc_msgSendSuper2(&v12, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for Input?);
  static ConversationCanHandleResult.unsupported = (uint64_t)v10;
  return result;
}

uint64_t *ConversationCanHandleResult.unsupported.unsafeMutableAddressor()
{
  if (one-time initialization token for unsupported != -1)
    swift_once();
  return &static ConversationCanHandleResult.unsupported;
}

id static ConversationCanHandleResult.unsupported.getter()
{
  if (one-time initialization token for unsupported != -1)
    swift_once();
  return (id)static ConversationCanHandleResult.unsupported;
}

id static ConversationCanHandleResult.supported(flowIdentifier:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  objc_class *CanHandleResult;
  _BYTE *v10;
  id v11;
  objc_super v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  CanHandleResult = (objc_class *)type metadata accessor for ConversationCanHandleResult();
  v10 = objc_allocWithZone(CanHandleResult);
  v10[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
  v10[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t)&v10[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t)&v10[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v13.receiver = v10;
  v13.super_class = CanHandleResult;
  v11 = objc_msgSendSuper2(&v13, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Input?);
  return v11;
}

id ConversationCanHandleResult.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ConversationCanHandleResult.init(coder:)(a1);
}

uint64_t ConversationCanHandleResult.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4D2929C + 4 * byte_1B4EE6E30[a1]))(0xD000000000000011, 0x80000001B4EF47E0);
}

uint64_t sub_1B4D2929C()
{
  return 0x6564756C637865;
}

uint64_t sub_1B4D292C8()
{
  return 0x6E656449776F6C66;
}

Swift::Void __swiftcall ConversationCanHandleResult.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Class isa;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Class v27;
  void *v28;
  uint64_t v29;
  char *v30;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Input();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v30 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v18 = (void *)MEMORY[0x1B5E432E8](0x6E656449776F6C66, 0xEE00726569666974);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v18);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  v19 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported);
  v20 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EF47E0);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v19, v20);

  v21 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude);
  v22 = (void *)MEMORY[0x1B5E432E8](0x6564756C637865, 0xE700000000000000);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v21, v22);

  outlined init with copy of ReferenceResolutionClientProtocol?(v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput, (uint64_t)v6, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for Input?);
  }
  else
  {
    v23 = v30;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v30, v6, v7);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    lazy protocol witness table accessor for type Input and conformance Input((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x1E0D9C598]);
    v24 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    v26 = v25;
    swift_release();
    v27 = Data._bridgeToObjectiveC()().super.isa;
    v28 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EF4800);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v27, v28);
    outlined consume of Data._Representation(v24, v26);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v23, v7);
  }
}

SiriKitRuntime::ConversationCanHandleResult::CodingKeys_optional __swiftcall ConversationCanHandleResult.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationCanHandleResult.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return (SiriKitRuntime::ConversationCanHandleResult::CodingKeys_optional)4;
  else
    return (SiriKitRuntime::ConversationCanHandleResult::CodingKeys_optional)v3;
}

SiriKitRuntime::ConversationCanHandleResult::CodingKeys_optional __swiftcall ConversationCanHandleResult.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriKitRuntime::ConversationCanHandleResult::CodingKeys_optional)4;
}

uint64_t ConversationCanHandleResult.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ConversationCanHandleResult.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4D2980C + 4 * byte_1B4EE6E34[a1]))(0xD000000000000011, 0x80000001B4EF47E0);
}

uint64_t sub_1B4D2980C()
{
  return 0x6564756C637865;
}

uint64_t sub_1B4D29838()
{
  return 0x6E656449776F6C66;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ConversationCanHandleResult.CodingKeys(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1B4D298AC@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B4D29914 + 4 * byte_1B4EE6E3C[a1]))(0x6564756C637865);
}

uint64_t sub_1B4D29914(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6564756C637865 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance ConversationCanHandleResult.CodingKeys()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1B4D29A18()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ConversationCanHandleResult.CodingKeys()
{
  __asm { BR              X10 }
}

uint64_t sub_1B4D29AD8()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationCanHandleResult.CodingKeys()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1B4D29B8C()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationCanHandleResult.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ConversationCanHandleResult.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConversationCanHandleResult.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B4D29C6C + 4 * byte_1B4EE6E4C[*v0]))();
}

void sub_1B4D29C6C(_QWORD *a1@<X8>)
{
  *a1 = 0x6564756C637865;
  a1[1] = 0xE700000000000000;
}

void sub_1B4D29C88(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  a1[1] = 0x80000001B4EF4800;
}

void sub_1B4D29CA0(char *a1@<X8>)
{
  strcpy(a1, "flowIdentifier");
  a1[15] = -18;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ConversationCanHandleResult.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4D29CFC + 4 * byte_1B4EE6E50[*v0]))(0xD000000000000011, 0x80000001B4EF47E0);
}

uint64_t sub_1B4D29CFC()
{
  return 0x6564756C637865;
}

uint64_t sub_1B4D29D28()
{
  return 0x6E656449776F6C66;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance ConversationCanHandleResult.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ConversationCanHandleResult.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ConversationCanHandleResult.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConversationCanHandleResult.CodingKeys()
{
  lazy protocol witness table accessor for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConversationCanHandleResult.CodingKeys()
{
  lazy protocol witness table accessor for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id ConversationCanHandleResult.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ConversationCanHandleResult.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ConversationCanHandleResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationCanHandleResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized static ConversationCanHandleResult.reformTo(input:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *CanHandleResult;
  _BYTE *v12;
  id v13;
  objc_super v15;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Input();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  v10 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  CanHandleResult = (objc_class *)type metadata accessor for ConversationCanHandleResult();
  v12 = objc_allocWithZone(CanHandleResult);
  v12[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 0;
  v12[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t)&v12[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t)&v12[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v15.receiver = v12;
  v15.super_class = CanHandleResult;
  v13 = objc_msgSendSuper2(&v15, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Input?);
  return v13;
}

unint64_t specialized ConversationCanHandleResult.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationCanHandleResult.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationCanHandleResult.CodingKeys, &type metadata for ConversationCanHandleResult.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationCanHandleResult.CodingKeys, &type metadata for ConversationCanHandleResult.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationCanHandleResult.CodingKeys, &type metadata for ConversationCanHandleResult.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationCanHandleResult.CodingKeys, &type metadata for ConversationCanHandleResult.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys);
  }
  return result;
}

uint64_t ObjC metadata update function for ConversationCanHandleResult()
{
  return type metadata accessor for ConversationCanHandleResult();
}

void type metadata completion function for ConversationCanHandleResult()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for Input?, (void (*)(uint64_t))MEMORY[0x1E0D9C588]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ConversationCanHandleResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationCanHandleResult.toConversationSearchResult(remoteConversationClient:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ConversationCanHandleResult.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ConversationCanHandleResult.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t storeEnumTagSinglePayload for ConversationCanHandleResult.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B4D2A294 + 4 * byte_1B4EE6E59[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B4D2A2C8 + 4 * byte_1B4EE6E54[v4]))();
}

uint64_t sub_1B4D2A2C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4D2A2D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4D2A2D8);
  return result;
}

uint64_t sub_1B4D2A2E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4D2A2ECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B4D2A2F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4D2A2F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationCanHandleResult.CodingKeys()
{
  return &type metadata for ConversationCanHandleResult.CodingKeys;
}

void ConversationCommitResult.xpcRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v10 = type metadata accessor for PluginAction();
  MEMORY[0x1E0C80A78](v10);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrescribedTool?);
  MEMORY[0x1E0C80A78](v1);
  v9 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for FlowUnhandledReason();
  v4 = MEMORY[0x1E0C80A78](v3);
  v5 = MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  v6 = type metadata accessor for ConversationCommitResult();
  MEMORY[0x1E0C80A78](v6);
  outlined init with copy of ConversationCommitResult(v0, (uint64_t)&v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (char *)sub_1B4D2A4CC + 4 * byte_1B4EE7010[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

id sub_1B4D2A4CC()
{
  uint64_t *v0;

  return specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(1, *v0, v0[1], 0, 0, 1, 0, 0, 0xF000000000000000, 0, 0, 0, 0);
}

id static ConversationCommitResultXPC.flowWasHandled(activeTasks:completedTasks:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(1, a1, a2, 0, 0, 1, 0, 0, 0xF000000000000000, 0, 0, 0, 0);
}

uint64_t outlined init with copy of ConversationCommitResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConversationCommitResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id static ConversationCommitResultXPC.flowNeedsReparse(executionRequestID:userID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(4, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0, 0, 1, 0, 0, 0xF000000000000000, a1, a2, a3, a4);
}

uint64_t ConversationCommitResultXPC.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___SKRConversationCommitResult_type);
}

uint64_t ConversationCommitResultXPC.activeTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationCommitResultXPC.completedTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationCommitResultXPC.flowUnhandledReason.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___SKRConversationCommitResult_flowUnhandledReason);
}

uint64_t ConversationCommitResultXPC.prescribedTool.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___SKRConversationCommitResult_prescribedTool);
}

void *ConversationCommitResultXPC.error.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___SKRConversationCommitResult_error);
  v2 = v1;
  return v1;
}

uint64_t ConversationCommitResultXPC.nextPluginActionData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData);
  outlined copy of Data?(v1, *(_QWORD *)(v0 + OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData + 8));
  return v1;
}

uint64_t ConversationCommitResultXPC.reparseExecutionRequestID.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKRConversationCommitResult_reparseExecutionRequestID);
}

uint64_t ConversationCommitResultXPC.reparseUserID.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKRConversationCommitResult_reparseUserID);
}

uint64_t ConversationCommitResultXPC.reparseExecutionRequestID.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t FlowUnhandledReason.xpcRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;

  v1 = type metadata accessor for FlowUnhandledReason();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == *MEMORY[0x1E0D9B0A0])
  {
    (*(void (**)(char *, uint64_t))(v2 + 96))(v4, v1);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for PrescribedTool?);
    return 4;
  }
  else if (v5 == *MEMORY[0x1E0D9B0B0])
  {
    return 1;
  }
  else if (v5 == *MEMORY[0x1E0D9B0A8])
  {
    return 2;
  }
  else if (v5 == *MEMORY[0x1E0D9B0B8])
  {
    return 3;
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1B4BE6000, v8, v9, "Unknown FlowUnhandledReason, returning nil", v10, 2u);
      MEMORY[0x1B5E44758](v10, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return 0;
  }
}

uint64_t PrescribedTool.xpcRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;

  v1 = type metadata accessor for PrescribedTool();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B950];
  v3 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v15 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v15 - v7, v0, v1);
  static PrescribedTool.searchTool.getter();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type PrescribedTool and conformance PrescribedTool, v2, MEMORY[0x1E0D9B960]);
  LOBYTE(v2) = dispatch thunk of static Equatable.== infix(_:_:)();
  v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v6, v1);
  v9(v8, v1);
  if ((v2 & 1) == 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1B4BE6000, v11, v12, "Unknown PrescribedToolXPC, returning nil", v13, 2u);
      MEMORY[0x1B5E44758](v13, -1, -1);
    }

  }
  return 0;
}

uint64_t PrescribedToolXPC.swiftRepresentation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  if (a1)
  {
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    static PrescribedTool.searchTool.getter();
    v3 = type metadata accessor for PrescribedTool();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 0, 1, v3);
  }
  return result;
}

uint64_t static ConversationCommitResultXPC.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static ConversationCommitResultXPC.supportsSecureCoding;
}

uint64_t static ConversationCommitResultXPC.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static ConversationCommitResultXPC.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ConversationCommitResultXPC.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

Swift::Void __swiftcall ConversationCommitResultXPC.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  Class v26;
  void *v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  Class v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  Class v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  _QWORD v61[2];
  uint64_t v62;
  objc_class *isa;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;

  v3 = type metadata accessor for Siri_Nlu_External_Task();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v64 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v61 - v7;
  v9 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_type);
  v10 = (void *)MEMORY[0x1B5E432E8](1701869940, 0xE400000000000000);
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v9, v10);

  v11 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_activeTasks);
  v12 = *(_QWORD *)(v11 + 16);
  v65 = v4;
  v62 = v1;
  isa = with.super.isa;
  if (v12)
  {
    v13 = v11 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v14 = *(_QWORD *)(v4 + 72);
    v66 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v67 = v14;
    v61[1] = v11;
    swift_bridgeObjectRetain_n();
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v16 = v4;
    do
    {
      v66(v8, v13, v3);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F0B8], MEMORY[0x1E0D9F090]);
      v17 = Message.serializedData(partial:)();
      v19 = v18;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
      v20 = v15;
      v21 = v15[2];
      v22 = v20;
      v23 = v20[3];
      if (v21 >= v23 >> 1)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v21 + 1, 1, v22);
      v22[2] = v21 + 1;
      v24 = &v22[2 * v21];
      v15 = v22;
      v24[4] = v17;
      v24[5] = v19;
      v16 = v65;
      v13 += v67;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease_n();
    v1 = v62;
    with.super.isa = isa;
  }
  v25 = v64;
  v26 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v27 = (void *)MEMORY[0x1B5E432E8](0x6154657669746361, 0xEB00000000736B73);
  v28 = &selRef_reason;
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v26, v27);

  v29 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_completedTasks);
  v30 = *(_QWORD *)(v29 + 16);
  if (v30)
  {
    v31 = v65;
    v32 = v29 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
    v33 = *(_QWORD *)(v65 + 72);
    v66 = *(void (**)(char *, uint64_t, uint64_t))(v1 + OBJC_IVAR___SKRConversationCommitResult_completedTasks);
    v67 = v33;
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
    swift_bridgeObjectRetain_n();
    v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v34(v25, v32, v3);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F0B8], MEMORY[0x1E0D9F090]);
      v36 = Message.serializedData(partial:)();
      v38 = v37;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v25, v3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
      v40 = v35[2];
      v39 = v35[3];
      if (v40 >= v39 >> 1)
        v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v35);
      v35[2] = v40 + 1;
      v41 = &v35[2 * v40];
      v41[4] = v36;
      v41[5] = v38;
      v25 = v64;
      v31 = v65;
      v32 += v67;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease_n();
    v1 = v62;
    with.super.isa = isa;
    v28 = &selRef_reason;
  }
  v42 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v43 = (void *)MEMORY[0x1B5E432E8](0x6574656C706D6F63, 0xEE00736B73615464);
  objc_msgSend(with.super.isa, v28[34], v42, v43);

  v44 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_flowUnhandledReason);
  if ((unint64_t)(v44 - 1) < 3)
  {
    v45 = 0x80000001B4EF4850;
    v46 = 0xD000000000000013;
LABEL_21:
    v47 = (void *)MEMORY[0x1B5E432E8](v46, v45);
    -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v44, v47);

    goto LABEL_25;
  }
  if (v44)
  {
    if (v44 != 4)
    {
      v68 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_flowUnhandledReason);
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      return;
    }
    v48 = (void *)MEMORY[0x1B5E432E8](0xD000000000000013, 0x80000001B4EF4850);
    -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, 4, v48);

    if ((*(_BYTE *)(v1 + OBJC_IVAR___SKRConversationCommitResult_prescribedTool + 8) & 1) == 0)
    {
      v44 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_prescribedTool);
      v46 = 0x6269726373657270;
      v45 = 0xEE006C6F6F546465;
      goto LABEL_21;
    }
  }
LABEL_25:
  v49 = *(void **)(v1 + OBJC_IVAR___SKRConversationCommitResult_error);
  if (v49)
  {
    v50 = v49;
    v51 = (void *)MEMORY[0x1B5E432E8](0x726F727265, 0xE500000000000000);
    objc_msgSend(with.super.isa, v28[34], v50, v51);

  }
  v52 = (uint64_t *)(v1 + OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData);
  v53 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData + 8);
  if (v53 >> 60 != 15)
  {
    v54 = *v52;
    outlined copy of Data._Representation(*v52, *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData + 8));
    v55 = Data._bridgeToObjectiveC()().super.isa;
    v56 = (void *)MEMORY[0x1B5E432E8](0xD000000000000014, 0x80000001B4EF4880);
    objc_msgSend(with.super.isa, v28[34], v55, v56);

    outlined consume of Data?(v54, v53);
  }
  if (*(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseExecutionRequestID + 8))
  {
    v57 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseExecutionRequestID));
    v58 = (void *)MEMORY[0x1B5E432E8](0xD000000000000019, 0x80000001B4EF48A0);
    objc_msgSend(with.super.isa, v28[34], v57, v58);

  }
  if (*(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseUserID + 8))
  {
    v59 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseUserID));
    v60 = (void *)MEMORY[0x1B5E432E8](0x5565737261706572, 0xED00004449726573);
    objc_msgSend(with.super.isa, v28[34], v59, v60);

  }
}

uint64_t ConversationCommitResultXPC.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4D2B558 + 4 * byte_1B4EE701E[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1B4D2B558()
{
  return 0x6154657669746361;
}

uint64_t sub_1B4D2B578()
{
  return 0x6574656C706D6F63;
}

unint64_t sub_1B4D2B59C()
{
  return 0xD000000000000013;
}

uint64_t sub_1B4D2B5B8()
{
  return 0x6269726373657270;
}

uint64_t sub_1B4D2B5DC()
{
  return 0x726F727265;
}

unint64_t sub_1B4D2B5F0()
{
  return 0xD000000000000014;
}

uint64_t sub_1B4D2B628()
{
  return 0x5565737261706572;
}

id ConversationCommitResultXPC.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ConversationCommitResultXPC.init(coder:)(a1);
}

unint64_t FlowUnhandledReasonXPC.init(rawValue:)(unint64_t a1)
{
  return specialized FlowUnhandledReasonXPC.init(rawValue:)(a1);
}

uint64_t PrescribedToolXPC.init(rawValue:)()
{
  return 0;
}

SiriKitRuntime::ConversationCommitResultXPC::CodingKeys_optional __swiftcall ConversationCommitResultXPC.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriKitRuntime::ConversationCommitResultXPC::CodingKeys_optional)9;
}

uint64_t ConversationCommitResultXPC.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ConversationCommitResultXPC.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4D2B748 + 4 * byte_1B4EE7027[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1B4D2B748()
{
  return 0x6154657669746361;
}

uint64_t sub_1B4D2B768()
{
  return 0x6574656C706D6F63;
}

unint64_t sub_1B4D2B78C()
{
  return 0xD000000000000013;
}

uint64_t sub_1B4D2B7A8()
{
  return 0x6269726373657270;
}

uint64_t sub_1B4D2B7CC()
{
  return 0x726F727265;
}

unint64_t sub_1B4D2B7E0()
{
  return 0xD000000000000014;
}

uint64_t sub_1B4D2B818()
{
  return 0x5565737261706572;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationCommitResultXPC.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = ConversationCommitResultXPC.CodingKeys.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == ConversationCommitResultXPC.CodingKeys.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationCommitResultXPC.CodingKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  ConversationCommitResultXPC.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationCommitResultXPC.CodingKeys()
{
  unsigned __int8 *v0;

  ConversationCommitResultXPC.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationCommitResultXPC.CodingKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  ConversationCommitResultXPC.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationCommitResultXPC.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ConversationCommitResultXPC.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConversationCommitResultXPC.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ConversationCommitResultXPC.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ConversationCommitResultXPC.CodingKeys()
{
  unsigned __int8 *v0;

  return ConversationCommitResultXPC.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance ConversationCommitResultXPC.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ConversationCommitResultXPC.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ConversationCommitResultXPC.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConversationCommitResultXPC.CodingKeys()
{
  lazy protocol witness table accessor for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConversationCommitResultXPC.CodingKeys()
{
  lazy protocol witness table accessor for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id ConversationCommitResultXPC.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ConversationCommitResultXPC.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ConversationCommitResultXPC.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationCommitResultXPC();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for XPCRepresentation.swiftRepresentation() in conformance ConversationCommitResultXPC()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

void protocol witness for Hashable.hash(into:) in conformance PrescribedToolXPC()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance PrescribedToolXPC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t FlowUnhandledReasonXPC.swiftRepresentation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  switch(a1)
  {
    case 0:
      v3 = type metadata accessor for FlowUnhandledReason();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
    case 1:
      v6 = (unsigned int *)MEMORY[0x1E0D9B0B0];
      goto LABEL_7;
    case 2:
      v6 = (unsigned int *)MEMORY[0x1E0D9B0A8];
      goto LABEL_7;
    case 3:
      v6 = (unsigned int *)MEMORY[0x1E0D9B0B8];
      goto LABEL_7;
    case 4:
      v5 = type metadata accessor for PrescribedTool();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a2, 1, 1, v5);
      v6 = (unsigned int *)MEMORY[0x1E0D9B0A0];
LABEL_7:
      v7 = *v6;
      v8 = type metadata accessor for FlowUnhandledReason();
      v9 = *(_QWORD *)(v8 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104))(a2, v7, v8);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
      break;
    default:
      result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      break;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationCommitResultTypeXPC()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationCommitResultTypeXPC()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FlowUnhandledReasonXPC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = specialized FlowUnhandledReasonXPC.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

id specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  objc_class *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  objc_super v28;

  v20 = (objc_class *)type metadata accessor for ConversationCommitResultXPC();
  v21 = (char *)objc_allocWithZone(v20);
  *(_QWORD *)&v21[OBJC_IVAR___SKRConversationCommitResult_type] = a1;
  *(_QWORD *)&v21[OBJC_IVAR___SKRConversationCommitResult_activeTasks] = a2;
  *(_QWORD *)&v21[OBJC_IVAR___SKRConversationCommitResult_completedTasks] = a3;
  *(_QWORD *)&v21[OBJC_IVAR___SKRConversationCommitResult_flowUnhandledReason] = a4;
  v22 = &v21[OBJC_IVAR___SKRConversationCommitResult_prescribedTool];
  *(_QWORD *)v22 = a5;
  v22[8] = a6 & 1;
  *(_QWORD *)&v21[OBJC_IVAR___SKRConversationCommitResult_error] = a7;
  v23 = &v21[OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData];
  *(_QWORD *)v23 = a8;
  *((_QWORD *)v23 + 1) = a9;
  v24 = &v21[OBJC_IVAR___SKRConversationCommitResult_reparseExecutionRequestID];
  *(_QWORD *)v24 = a10;
  *((_QWORD *)v24 + 1) = a11;
  v25 = &v21[OBJC_IVAR___SKRConversationCommitResult_reparseUserID];
  *(_QWORD *)v25 = a12;
  *((_QWORD *)v25 + 1) = a13;
  v28.receiver = v21;
  v28.super_class = v20;
  return objc_msgSendSuper2(&v28, sel_init);
}

id specialized static ConversationCommitResultXPC.flowWasNotHandled(flowUnhandledReason:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  char v15;
  id v16;
  uint64_t v18;

  v2 = type metadata accessor for PrescribedTool();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FlowUnhandledReason();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrescribedTool?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  if ((*(unsigned int (**)(char *, uint64_t))(v7 + 88))(v9, v6) == *MEMORY[0x1E0D9B0A0])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
    outlined init with take of PrescribedTool?((uint64_t)v9, (uint64_t)v12);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v12, 1, 1, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v13 = FlowUnhandledReason.xpcRepresentation.getter();
  v14 = 1;
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2))
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v12, v2);
    PrescribedTool.xpcRepresentation.getter();
    v14 = v15 & 1;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v16 = specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(2, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], v13, 0, v14, 0, 0, 0xF000000000000000, 0, 0, 0, 0);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for PrescribedTool?);
  return v16;
}

id specialized static ConversationCommitResultXPC.flowWantsToRedirect(nextPluginAction:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = PluginAction.serialize()();
  return specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(3, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0, 0, 1, 0, v0, v1, 0, 0, 0, 0);
}

uint64_t outlined init with take of PrescribedTool?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrescribedTool?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PrescribedTool?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrescribedTool?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id specialized static ConversationCommitResultXPC.error(_:)(void *a1)
{
  uint64_t inited;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  Class isa;
  id v9;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
  *(_QWORD *)(inited + 32) = 0x7470697263736564;
  *(_QWORD *)(inited + 40) = 0xEB000000006E6F69;
  v3 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v4 = String.init<A>(describing:)();
  *(_QWORD *)(inited + 72) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 56) = v5;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  v6 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
  v7 = (void *)MEMORY[0x1B5E432E8](0xD00000000000001DLL, 0x80000001B4EF9500);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v6, sel_initWithDomain_code_userInfo_, v7, -1, isa);

  return specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(0, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], 0, 0, 1, (uint64_t)v9, 0, 0xF000000000000000, 0, 0, 0, 0);
}

unint64_t specialized FlowUnhandledReasonXPC.init(rawValue:)(unint64_t result)
{
  if (result > 4)
    return 0;
  return result;
}

unint64_t specialized ConversationCommitResultXPC.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationCommitResultXPC.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationCommitResultXPC.CodingKeys, &type metadata for ConversationCommitResultXPC.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationCommitResultXPC.CodingKeys, &type metadata for ConversationCommitResultXPC.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationCommitResultXPC.CodingKeys, &type metadata for ConversationCommitResultXPC.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationCommitResultXPC.CodingKeys, &type metadata for ConversationCommitResultXPC.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for XPCRepresentation.SwiftRepresentation : XPCConvertible in ConversationCommitResultXPC()
{
  return &protocol witness table for ConversationCommitResult;
}

unint64_t lazy protocol witness table accessor for type ConversationCommitResultTypeXPC and conformance ConversationCommitResultTypeXPC()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationCommitResultTypeXPC and conformance ConversationCommitResultTypeXPC;
  if (!lazy protocol witness table cache variable for type ConversationCommitResultTypeXPC and conformance ConversationCommitResultTypeXPC)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationCommitResultTypeXPC, &type metadata for ConversationCommitResultTypeXPC);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCommitResultTypeXPC and conformance ConversationCommitResultTypeXPC);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrescribedToolXPC and conformance PrescribedToolXPC()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PrescribedToolXPC and conformance PrescribedToolXPC;
  if (!lazy protocol witness table cache variable for type PrescribedToolXPC and conformance PrescribedToolXPC)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for PrescribedToolXPC, &type metadata for PrescribedToolXPC);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrescribedToolXPC and conformance PrescribedToolXPC);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FlowUnhandledReasonXPC and conformance FlowUnhandledReasonXPC()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlowUnhandledReasonXPC and conformance FlowUnhandledReasonXPC;
  if (!lazy protocol witness table cache variable for type FlowUnhandledReasonXPC and conformance FlowUnhandledReasonXPC)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for FlowUnhandledReasonXPC, &type metadata for FlowUnhandledReasonXPC);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowUnhandledReasonXPC and conformance FlowUnhandledReasonXPC);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ConversationCommitResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1B4D2C62C + 4 * byte_1B4EE7035[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t assignWithCopy for ConversationCommitResult(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of ConversationCommitResult(result);
    v2 = (char *)&loc_1B4D2C764 + 4 * byte_1B4EE7041[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t outlined destroy of ConversationCommitResult(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ConversationCommitResult();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for ConversationCommitResult(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for PluginAction();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for FlowUnhandledReason();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ConversationCommitResult(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of ConversationCommitResult((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v8 = type metadata accessor for PluginAction();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for FlowUnhandledReason();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for ConversationCommitResult()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for FlowUnhandledReason();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for PluginAction();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ConversationCommitResultXPC()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationCommitResultXPC.swiftRepresentation()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ConversationCommitResultXPC.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ConversationCommitResultXPC.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t getEnumTagSinglePayload for ConversationCommitResultXPC.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationCommitResultXPC.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1B4D2CBE8 + 4 * byte_1B4EE704A[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1B4D2CC1C + 4 * byte_1B4EE7045[v4]))();
}

uint64_t sub_1B4D2CC1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4D2CC24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4D2CC2CLL);
  return result;
}

uint64_t sub_1B4D2CC38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4D2CC40);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1B4D2CC44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4D2CC4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationCommitResultXPC.CodingKeys()
{
  return &type metadata for ConversationCommitResultXPC.CodingKeys;
}

ValueMetadata *type metadata accessor for ConversationCommitResultTypeXPC()
{
  return &type metadata for ConversationCommitResultTypeXPC;
}

ValueMetadata *type metadata accessor for PrescribedToolXPC()
{
  return &type metadata for PrescribedToolXPC;
}

ValueMetadata *type metadata accessor for FlowUnhandledReasonXPC()
{
  return &type metadata for FlowUnhandledReasonXPC;
}

uint64_t ConversationContextUpdateMetadata.__allocating_init(didFallbackToServer:requestType:flowPluginInfo:currentUserId:emptyServerContext:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v10 = swift_allocObject();
  *(_BYTE *)(v10 + 16) = a1;
  v11 = v10 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType;
  v12 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a2, v12);
  *(_QWORD *)(v10 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = a3;
  v13 = v10 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId;
  v14 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, a4, v14);
  *(_BYTE *)(v10 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = a5;
  return v10;
}

uint64_t ConversationContextUpdateMetadata.didFallbackToServer.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ConversationContextUpdateMetadata.requestType.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9E8C0], a1);
}

void *ConversationContextUpdateMetadata.flowPluginInfo.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo);
  v2 = v1;
  return v1;
}

uint64_t ConversationContextUpdateMetadata.currentUserId.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9EF80], a1);
}

uint64_t ConversationContextUpdateMetadata.emptyServerContext.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext);
}

uint64_t ConversationContextUpdateMetadata.init(didFallbackToServer:requestType:flowPluginInfo:currentUserId:emptyServerContext:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)(v5 + 16) = a1;
  v10 = v5 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType;
  v11 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a2, v11);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = a3;
  v12 = v5 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId;
  v13 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a4, v13);
  *(_BYTE *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = a5;
  return v5;
}

uint64_t ConversationContextUpdateMetadata.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType;
  v2 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId;
  v4 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConversationContextUpdateMetadata()
{
  return ConversationContextUpdateMetadata.description.getter();
}

uint64_t ObjC metadata update function for ConversationContextUpdateMetadata()
{
  return type metadata accessor for ConversationContextUpdateMetadata();
}

uint64_t type metadata completion function for ConversationContextUpdateMetadata()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for RequestType();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for UserID();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ConversationContextUpdateMetadata()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationContextUpdateMetadata.__allocating_init(didFallbackToServer:requestType:flowPluginInfo:currentUserId:emptyServerContext:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t FlexibleExecutionSupportOptions.none.unsafeMutableAddressor()
{
  return FlexibleExecutionSupportOptions.none.unsafeMutableAddressor(&one-time initialization token for none, (uint64_t)static FlexibleExecutionSupportOptions.none);
}

id FlexibleExecutionSupportOptions.xpcRepresentation.getter()
{
  uint64_t v0;
  objc_class *v1;
  char *v2;
  objc_super v4;

  v0 = FlexibleExecutionSupportOptions.rawValue.getter();
  v1 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  v2 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v2[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = v0;
  v4.receiver = v2;
  v4.super_class = v1;
  return objc_msgSendSuper2(&v4, sel_init);
}

id ConversationFlexibleExecutionSupportXPC.__allocating_init(rawValue:)(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t one-time initialization function for all()
{
  uint64_t v0;

  v0 = type metadata accessor for FlexibleExecutionSupportOptions();
  __swift_allocate_value_buffer(v0, static FlexibleExecutionSupportOptions.all);
  __swift_project_value_buffer(v0, (uint64_t)static FlexibleExecutionSupportOptions.all);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FlexibleExecutionSupportOptions>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1B4EE3BA0;
  static FlexibleExecutionSupportOptions.executeBeforeEndpoint.getter();
  static FlexibleExecutionSupportOptions.inputContinuation.getter();
  lazy protocol witness table accessor for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FlexibleExecutionSupportOptions]);
  lazy protocol witness table accessor for type [FlexibleExecutionSupportOptions] and conformance [A]();
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t FlexibleExecutionSupportOptions.all.unsafeMutableAddressor()
{
  return FlexibleExecutionSupportOptions.none.unsafeMutableAddressor(&one-time initialization token for all, (uint64_t)static FlexibleExecutionSupportOptions.all);
}

uint64_t FlexibleExecutionSupportOptions.none.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for FlexibleExecutionSupportOptions();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static FlexibleExecutionSupportOptions.all.getter@<X0>(uint64_t a1@<X8>)
{
  return static FlexibleExecutionSupportOptions.all.getter(&one-time initialization token for all, (uint64_t)static FlexibleExecutionSupportOptions.all, a1);
}

uint64_t one-time initialization function for none()
{
  uint64_t v0;

  v0 = type metadata accessor for FlexibleExecutionSupportOptions();
  __swift_allocate_value_buffer(v0, static FlexibleExecutionSupportOptions.none);
  __swift_project_value_buffer(v0, (uint64_t)static FlexibleExecutionSupportOptions.none);
  lazy protocol witness table accessor for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FlexibleExecutionSupportOptions]);
  lazy protocol witness table accessor for type [FlexibleExecutionSupportOptions] and conformance [A]();
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t static FlexibleExecutionSupportOptions.none.getter@<X0>(uint64_t a1@<X8>)
{
  return static FlexibleExecutionSupportOptions.all.getter(&one-time initialization token for none, (uint64_t)static FlexibleExecutionSupportOptions.none, a1);
}

uint64_t static FlexibleExecutionSupportOptions.all.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for FlexibleExecutionSupportOptions();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

id protocol witness for XPCConvertible.xpcRepresentation.getter in conformance FlexibleExecutionSupportOptions()
{
  uint64_t v0;
  objc_class *v1;
  char *v2;
  objc_super v4;

  v0 = FlexibleExecutionSupportOptions.rawValue.getter();
  v1 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  v2 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v2[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = v0;
  v4.receiver = v2;
  v4.super_class = v1;
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t ConversationFlexibleExecutionSupportXPC.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue);
}

id ConversationFlexibleExecutionSupportXPC.init(rawValue:)(uint64_t a1)
{
  char *v1;
  objc_super v3;

  *(_QWORD *)&v1[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t static ConversationFlexibleExecutionSupportXPC.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static ConversationFlexibleExecutionSupportXPC.supportsSecureCoding;
}

uint64_t static ConversationFlexibleExecutionSupportXPC.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static ConversationFlexibleExecutionSupportXPC.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ConversationFlexibleExecutionSupportXPC.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

Swift::Void __swiftcall ConversationFlexibleExecutionSupportXPC.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue);
  v4 = (id)MEMORY[0x1B5E432E8](0x6E6F6974706FLL, 0xE600000000000000);
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v3, v4);

}

id ConversationFlexibleExecutionSupportXPC.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  char *v3;
  void *v4;
  id v5;
  id v6;
  objc_super v8;

  v3 = (char *)objc_allocWithZone(v1);
  v4 = (void *)MEMORY[0x1B5E432E8](0x6E6F6974706FLL, 0xE600000000000000);
  v5 = objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  *(_QWORD *)&v3[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = v5;
  v8.receiver = v3;
  v8.super_class = v1;
  v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id ConversationFlexibleExecutionSupportXPC.init(coder:)(void *a1)
{
  void *v1;
  char *v3;
  void *v4;
  id v5;
  id v6;
  objc_super v8;

  v3 = v1;
  v4 = (void *)MEMORY[0x1B5E432E8](0x6E6F6974706FLL, 0xE600000000000000);
  v5 = objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  *(_QWORD *)&v3[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = v5;
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id static ConversationFlexibleExecutionSupportXPC.error(_:)()
{
  objc_class *v0;
  char *v1;
  objc_super v3;

  v0 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  v1 = (char *)objc_allocWithZone(v0);
  *(_QWORD *)&v1[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = -1;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

id ConversationFlexibleExecutionSupportXPC.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ConversationFlexibleExecutionSupportXPC.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ConversationFlexibleExecutionSupportXPC.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

_UNKNOWN **associated type witness table accessor for XPCRepresentation.SwiftRepresentation : XPCConvertible in ConversationFlexibleExecutionSupportXPC()
{
  return &protocol witness table for FlexibleExecutionSupportOptions;
}

uint64_t protocol witness for XPCRepresentation.swiftRepresentation() in conformance ConversationFlexibleExecutionSupportXPC()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t method lookup function for ConversationFlexibleExecutionSupportXPC()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationFlexibleExecutionSupportXPC.__allocating_init(rawValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of ConversationFlexibleExecutionSupportXPC.swiftRepresentation()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ConversationFlexibleExecutionSupportXPC.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ConversationFlexibleExecutionSupportXPC.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

unint64_t lazy protocol witness table accessor for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions;
  if (!lazy protocol witness table cache variable for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions)
  {
    v1 = type metadata accessor for FlexibleExecutionSupportOptions();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0D9C470], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [FlexibleExecutionSupportOptions] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [FlexibleExecutionSupportOptions] and conformance [A];
  if (!lazy protocol witness table cache variable for type [FlexibleExecutionSupportOptions] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [FlexibleExecutionSupportOptions]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [FlexibleExecutionSupportOptions] and conformance [A]);
  }
  return result;
}

uint64_t dispatch thunk of ConversationHandler.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ConversationHandler.warmup(refId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 24) + *(_QWORD *)(a4 + 24));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a8 + 32) + *(_QWORD *)(a8 + 32));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v19(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of ConversationHandler.findConversation(for:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a6 + 40)
                                                                                     + *(_QWORD *)(a6 + 40));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of ConversationHandler.affinityScore(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t specialized withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedContinuation<SABaseCommand?>);
  v5 = swift_allocObject();
  v2[3] = v5;
  v6 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 88);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 96);
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = -1;
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 104)) = v9;
  v10 = v9;
  v11 = (void *)MEMORY[0x1B5E432E8](0xD000000000000027, 0x80000001B4EF7540);
  objc_msgSend(v10, sel_setName_, v11);

  v12 = (_QWORD *)swift_task_alloc();
  v2[4] = v12;
  v12[2] = v5;
  v12[3] = a1;
  v12[4] = a2;
  v13 = (_QWORD *)swift_task_alloc();
  v2[5] = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  *v13 = v2;
  v13[1] = specialized withCancellableContinuation<A>(body:);
  return withTaskCancellationHandler<A>(operation:onCancel:)();
}

{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedContinuation<RemoteConversation?>);
  v5 = swift_allocObject();
  v2[4] = v5;
  v6 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 88);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = v5 + *(_QWORD *)(*(_QWORD *)v5 + 96);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 16) = -1;
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  *(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 104)) = v9;
  v10 = v9;
  v11 = (void *)MEMORY[0x1B5E432E8](0xD000000000000027, 0x80000001B4EF7540);
  objc_msgSend(v10, sel_setName_, v11);

  v12 = (_QWORD *)swift_task_alloc();
  v2[5] = v12;
  v12[2] = v5;
  v12[3] = a1;
  v12[4] = a2;
  v13 = (_QWORD *)swift_task_alloc();
  v2[6] = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversation?);
  *v13 = v2;
  v13[1] = specialized withCancellableContinuation<A>(body:);
  return withTaskCancellationHandler<A>(operation:onCancel:)();
}

uint64_t specialized withCancellableContinuation<A>(body:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 16);
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v3 + 8))(v5);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 16);
    v5 = *(_QWORD *)(v2 + 24);
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v5);
  }
}

uint64_t specialized withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedContinuation<()>);
  v6 = swift_allocObject();
  v3[2] = v6;
  v7 = v6 + *(_QWORD *)(*(_QWORD *)v6 + 88);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v6 + *(_QWORD *)(*(_QWORD *)v6 + 96);
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = -1;
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  *(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)v6 + 104)) = v10;
  v11 = v10;
  v12 = (void *)MEMORY[0x1B5E432E8](0xD000000000000027, 0x80000001B4EF7540);
  objc_msgSend(v11, sel_setName_, v12);

  v13 = (_QWORD *)swift_task_alloc();
  v3[3] = v13;
  v13[2] = v6;
  v13[3] = a2;
  v13[4] = a3;
  v14 = (_QWORD *)swift_task_alloc();
  v3[4] = v14;
  *v14 = v3;
  v14[1] = withCancellableContinuation<A>(body:);
  return withTaskCancellationHandler<A>(operation:onCancel:)();
}

uint64_t ConversationHandlerLocator.allHandlers(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[50] = a2;
  v3[51] = v2;
  v3[49] = a1;
  v4 = type metadata accessor for IntentTopic();
  v3[52] = v4;
  v3[53] = *(_QWORD *)(v4 - 8);
  v3[54] = swift_task_alloc();
  v3[55] = swift_task_alloc();
  v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  v3[56] = v5;
  v3[57] = *(_QWORD *)(v5 - 8);
  v3[58] = swift_task_alloc();
  v6 = type metadata accessor for USOParse();
  v3[59] = v6;
  v3[60] = *(_QWORD *)(v6 - 8);
  v3[61] = swift_task_alloc();
  v7 = type metadata accessor for Input();
  v3[62] = v7;
  v3[63] = *(_QWORD *)(v7 - 8);
  v3[64] = swift_task_alloc();
  v8 = type metadata accessor for Parse();
  v3[65] = v8;
  v3[66] = *(_QWORD *)(v8 - 8);
  v3[67] = swift_task_alloc();
  v3[68] = swift_task_alloc();
  v3[69] = swift_task_alloc();
  v3[70] = swift_task_alloc();
  v3[71] = swift_task_alloc();
  v9 = type metadata accessor for UUID();
  v3[72] = v9;
  v3[73] = *(_QWORD *)(v9 - 8);
  v3[74] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, Parse));
  v3[75] = v10;
  v3[76] = *(_QWORD *)(v10 - 8);
  v3[77] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[78] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t ConversationHandlerLocator.allHandlers(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  int64_t v70;
  int isUniquelyReferenced_nonNull_native;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  _QWORD *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  void (*v93)(uint64_t, unint64_t, uint64_t);
  _QWORD *v94[2];

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 400);
  *(_QWORD *)(v0 + 376) = MEMORY[0x1E0DEE9D8];
  v3 = specialized ImmutableSimpleOrderedDictionary.items()(v1, v2);
  *(_QWORD *)(v0 + 632) = v3;
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v0 + 640) = v4;
  if (v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)(v0 + 608);
    *(_DWORD *)(v0 + 776) = *(_DWORD *)(*(_QWORD *)(v0 + 600) + 48);
    *(_DWORD *)(v0 + 780) = *(_DWORD *)(v6 + 80);
    *(_DWORD *)(v0 + 784) = *MEMORY[0x1E0D9C678];
    while (1)
    {
      *(_QWORD *)(v0 + 656) = v5;
      *(_QWORD *)(v0 + 648) = 0;
      v19 = *(_QWORD *)(v0 + 632);
      if (v5 >= *(_QWORD *)(v19 + 16))
      {
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        return _fatalErrorMessage(_:_:file:line:flags:)();
      }
      v91 = *(_DWORD *)(v0 + 784);
      v20 = *(_QWORD *)(v0 + 616);
      v21 = *(_QWORD *)(v0 + 592);
      v22 = *(_QWORD *)(v0 + 584);
      v23 = *(_QWORD *)(v0 + 576);
      v24 = *(_QWORD *)(v0 + 568);
      v25 = *(_QWORD *)(v0 + 560);
      v26 = *(_QWORD *)(v0 + 528);
      v27 = *(_QWORD *)(v0 + 520);
      v89 = *(_QWORD *)(v0 + 552);
      v28 = v20 + *(int *)(v0 + 776);
      outlined init with copy of ReferenceResolutionClientProtocol?(v19+ ((*(unsigned __int8 *)(v0 + 780) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 780))+ *(_QWORD *)(*(_QWORD *)(v0 + 608) + 72) * v5, v20, &demangling cache variable for type metadata for (UUID, Parse));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v21, v20, v23);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32))(v24, v28, v27);
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
      *(_QWORD *)(v0 + 664) = v29;
      v29(v25, v24, v27);
      Input.init(parse:)();
      v29(v89, v24, v27);
      v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 88))(v89, v27);
      v31 = *(_QWORD *)(v0 + 552);
      v32 = *(_QWORD *)(v0 + 528);
      v33 = *(_QWORD *)(v0 + 520);
      if (v30 != v91)
      {
        (*(void (**)(_QWORD, uint64_t))(v32 + 8))(*(_QWORD *)(v0 + 552), v33);
        goto LABEL_14;
      }
      v35 = *(_QWORD *)(v0 + 480);
      v34 = *(_QWORD *)(v0 + 488);
      v37 = *(_QWORD *)(v0 + 464);
      v36 = *(_QWORD *)(v0 + 472);
      v38 = *(_QWORD *)(v0 + 448);
      v39 = *(_QWORD *)(v0 + 456);
      (*(void (**)(_QWORD, uint64_t))(v32 + 96))(*(_QWORD *)(v0 + 552), v33);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v34, v31, v36);
      USOParse.userParse.getter();
      v40 = Siri_Nlu_External_UserParse.isSNLC.getter();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
      if ((v40 & 1) == 0)
        break;
      if (one-time initialization token for executor != -1)
        swift_once();
      v41 = *(_QWORD *)(v0 + 568);
      v42 = *(_QWORD *)(v0 + 544);
      v43 = *(_QWORD *)(v0 + 520);
      v44 = type metadata accessor for Logger();
      __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
      v29(v42, v41, v43);
      v45 = Logger.logObject.getter();
      v46 = static os_log_type_t.debug.getter();
      v47 = os_log_type_enabled(v45, v46);
      v48 = *(_QWORD *)(v0 + 568);
      if (v47)
      {
        v49 = *(_QWORD *)(v0 + 560);
        v50 = *(_QWORD *)(v0 + 544);
        v51 = *(_QWORD *)(v0 + 528);
        v92 = *(_QWORD *)(v0 + 568);
        v52 = *(_QWORD *)(v0 + 520);
        v87 = *(_QWORD *)(v0 + 480);
        v88 = *(_QWORD *)(v0 + 472);
        v90 = *(_QWORD *)(v0 + 488);
        v53 = swift_slowAlloc();
        v54 = (_QWORD *)swift_slowAlloc();
        v94[0] = v54;
        *(_DWORD *)v53 = 136315138;
        v29(v49, v50, v52);
        v55 = String.init<A>(describing:)();
        *(_QWORD *)(v53 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)v94);
        swift_bridgeObjectRelease();
        v13 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
        v13(v50, v52);
        _os_log_impl(&dword_1B4BE6000, v45, v46, "allHandlers(for:) Skipping SNLC parse %s", (uint8_t *)v53, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v54, -1, -1);
        MEMORY[0x1B5E44758](v53, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v90, v88);
        v14 = v92;
        v15 = v52;
      }
      else
      {
        v7 = *(_QWORD *)(v0 + 544);
        v8 = *(_QWORD *)(v0 + 528);
        v9 = *(_QWORD *)(v0 + 520);
        v11 = *(_QWORD *)(v0 + 480);
        v10 = *(_QWORD *)(v0 + 488);
        v12 = *(_QWORD *)(v0 + 472);

        v13 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
        v13(v7, v9);
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
        v14 = v48;
        v15 = v9;
      }
      v13(v14, v15);
      v16 = *(_QWORD *)(v0 + 592);
      v17 = *(_QWORD *)(v0 + 584);
      v18 = *(_QWORD *)(v0 + 576);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 504) + 8))(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 496));
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
      v5 = *(_QWORD *)(v0 + 656) + 1;
      if (v5 == *(_QWORD *)(v0 + 640))
        goto LABEL_37;
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 480) + 8))(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 472));
LABEL_14:
    v57 = static IntentTopic.make(from:)();
    v58 = *(_QWORD *)(v57 + 16);
    if (v58)
    {
      v59 = *(_QWORD *)(v0 + 424);
      v60 = (*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
      v61 = v57 + v60;
      v62 = *(_QWORD *)(v59 + 72);
      v93 = *(void (**)(uint64_t, unint64_t, uint64_t))(v59 + 16);
      swift_bridgeObjectRetain();
      v63 = MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v64 = *(_QWORD *)(v0 + 440);
        v66 = *(_QWORD *)(v0 + 416);
        v65 = *(_QWORD *)(v0 + 424);
        v93(v64, v61, v66);
        v67 = IntentTopic.makeWildcardFallbacks()();
        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
        v68 = *(_QWORD *)(v67 + 16);
        v69 = *(_QWORD *)(v63 + 16);
        v70 = v69 + v68;
        if (__OFADD__(v69, v68))
        {
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if (isUniquelyReferenced_nonNull_native && v70 <= *(_QWORD *)(v63 + 24) >> 1)
        {
          if (*(_QWORD *)(v67 + 16))
            goto LABEL_27;
        }
        else
        {
          if (v69 <= v70)
            v72 = v69 + v68;
          else
            v72 = v69;
          v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v72, 1, v63);
          if (*(_QWORD *)(v67 + 16))
          {
LABEL_27:
            v73 = *(_QWORD *)(v63 + 16);
            if ((*(_QWORD *)(v63 + 24) >> 1) - v73 < v68)
              goto LABEL_48;
            v74 = v63 + v60 + v73 * v62;
            if (v67 + v60 < v74 + v68 * v62 && v74 < v67 + v60 + v68 * v62)
              return _fatalErrorMessage(_:_:file:line:flags:)();
            swift_arrayInitWithCopy();
            if (v68)
            {
              v76 = *(_QWORD *)(v63 + 16);
              v77 = __OFADD__(v76, v68);
              v78 = v76 + v68;
              if (v77)
                goto LABEL_49;
              *(_QWORD *)(v63 + 16) = v78;
            }
            goto LABEL_17;
          }
        }
        if (v68)
        {
          __break(1u);
          goto LABEL_46;
        }
LABEL_17:
        swift_bridgeObjectRelease();
        v61 += v62;
        if (!--v58)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_44;
        }
      }
    }
    swift_bridgeObjectRelease();
    v63 = MEMORY[0x1E0DEE9D8];
LABEL_44:
    *(_QWORD *)(v0 + 672) = v63;
    *(_QWORD *)(v0 + 680) = static MessageBusActor.shared;
    swift_retain();
    return swift_task_switch();
  }
  else
  {
LABEL_37:
    swift_bridgeObjectRelease();
    v79 = (_QWORD *)(v0 + 376);
    swift_release();
    if (one-time initialization token for executor != -1)
      swift_once();
    v80 = type metadata accessor for Logger();
    __swift_project_value_buffer(v80, (uint64_t)static Logger.executor);
    v81 = (_QWORD *)*v79;
    swift_bridgeObjectRetain();
    v82 = Logger.logObject.getter();
    v83 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v82, v83))
    {
      v84 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v84 = 134217984;
      *(_QWORD *)(v0 + 360) = v81[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v82, v83, "allHandlers(for:) Total handlers found: %ld", v84, 0xCu);
      MEMORY[0x1B5E44758](v84, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    swift_beginAccess();
    v94[0] = *(_QWORD **)v79;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(v94);
    swift_bridgeObjectRelease_n();
    v85 = v94[0];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v85);
  }
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 688) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PluginLookupByIntentTopic);
  *v1 = v0;
  v1[1] = ConversationHandlerLocator.allHandlers(for:);
  return Task<>.value.getter();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void (*v34)(uint64_t, unint64_t, uint64_t);
  uint64_t v35;
  _QWORD *v36;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t);
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  os_log_type_t v112;
  _BOOL4 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int64_t v133;
  int64_t v134;
  int isUniquelyReferenced_nonNull_native;
  int64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  __int128 *v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t, uint64_t, uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  void (*v170)(uint64_t, unint64_t, uint64_t);
  _QWORD *v171[2];

  v1 = (unint64_t)(v0 + 46);
  v2 = v0[84];
  v3 = MEMORY[0x1E0DEE9D8];
  v0[46] = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    v5 = v0[53];
    v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain();
    do
    {
      v8 = v0[15];
      v9 = v0[16];
      __swift_project_boxed_opaque_existential_1(v0 + 12, v8);
      v10 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 8))(v6, v8, v9);
      specialized Array.append<A>(contentsOf:)(v10);
      v6 += v7;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    v11 = v0[46];
    v3 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v11 = v3;
  }
  v0[87] = v11;
  v146 = (uint64_t)(v0 + 12);
  if ((unint64_t)v11 >> 62)
    goto LABEL_82;
  if (!*(_QWORD *)(((unint64_t)v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_8:
    if (one-time initialization token for executor != -1)
      swift_once();
    v12 = (void (*)(uint64_t, uint64_t, uint64_t))v0[83];
    v13 = v0[71];
    v14 = v0[67];
    v15 = v0[65];
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    v12(v14, v13, v15);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v156 = (void (*)(uint64_t, uint64_t, uint64_t))v0[83];
      v19 = v0[70];
      v20 = v0[67];
      v165 = v0[66];
      v21 = v0[65];
      v149 = v1;
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = (_QWORD *)swift_slowAlloc();
      v171[0] = v23;
      *(_DWORD *)v22 = 136315138;
      v156(v19, v20, v21);
      v24 = String.init<A>(describing:)();
      v0[48] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, (uint64_t *)v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v20, v21);
      _os_log_impl(&dword_1B4BE6000, v17, v18, "allHandlers(for:) Found no plugins for parse: %s", v22, 0xCu);
      swift_arrayDestroy();
      v26 = v23;
      v3 = MEMORY[0x1E0DEE9D8];
      MEMORY[0x1B5E44758](v26, -1, -1);
      v27 = v22;
      v1 = v149;
      MEMORY[0x1B5E44758](v27, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0[66] + 8))(v0[67], v0[65]);
    }

  }
LABEL_14:
  v28 = *(_QWORD *)(v2 + 16);
  v0[88] = v28;
  if (v28)
  {
    v30 = (_QWORD *)v0[51];
    v29 = v0[52];
    v0[89] = v30[3];
    v0[90] = v30[5];
    v0[91] = v30[6];
    v32 = v0[53];
    v31 = v0[54];
    v33 = *(_DWORD *)(v32 + 80);
    *((_DWORD *)v0 + 197) = v33;
    v0[92] = *(_QWORD *)(v32 + 72);
    v34 = *(void (**)(uint64_t, unint64_t, uint64_t))(v32 + 16);
    v0[95] = v3;
    v35 = v0[84];
    v0[93] = v34;
    v0[94] = 0;
    v34(v31, v35 + ((v33 + 32) & ~(unint64_t)v33), v29);
    v36 = (_QWORD *)swift_task_alloc();
    v0[96] = v36;
    *v36 = v0;
    v36[1] = ConversationHandlerLocator.allHandlers(for:);
    return FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:)((uint64_t)(v0 + 27), v0[54], v0[90], v0[91]);
  }
  swift_bridgeObjectRelease();
  v38 = v0[87];
  if (v38 >> 62)
  {
    swift_bridgeObjectRetain();
    v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v150 = v1;
    if (v39)
      goto LABEL_18;
  }
  else
  {
    v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
    v150 = v1;
    if (v39)
    {
LABEL_18:
      v0[44] = v3;
      v161 = v0 + 44;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39 & ~(v39 >> 63), 0);
      if (v39 < 0)
      {
        __break(1u);
        goto LABEL_87;
      }
      v40 = v0;
      v41 = 0;
      v153 = (__int128 *)(v40 + 32);
      v157 = (uint64_t)(v40 + 2);
      v166 = v40;
      v42 = v40[87];
      v151 = v42 & 0xC000000000000001;
      v147 = v42 + 32;
      v158 = v39;
      do
      {
        if (v151)
        {
          v43 = (_QWORD *)MEMORY[0x1B5E43B94](v41, v166[87]);
        }
        else
        {
          v43 = *(_QWORD **)(v147 + 8 * v41);
          swift_retain();
        }
        if (one-time initialization token for executor != -1)
          swift_once();
        v44 = type metadata accessor for Logger();
        v45 = __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
        specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/RemoteFlowPluginPackage.swift", 44, 2, (uint64_t)"loadRemoteConversationHandler()", 31, 2, v45);
        v47 = v43[2];
        v46 = v43[3];
        v48 = v43[6];
        v49 = v43[7];
        outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v43 + 8), (uint64_t)v153);
        v50 = v43[4];
        v51 = type metadata accessor for RemoteFlowPluginBundleConversationHandler();
        v52 = (_QWORD *)swift_allocObject();
        v52[12] = 0;
        v52[13] = 0;
        v52[2] = v47;
        v52[3] = v46;
        v52[4] = v48;
        v52[5] = v49;
        outlined init with take of ReferenceResolutionClientProtocol(v153, (uint64_t)(v52 + 7));
        v52[6] = v50;
        v166[5] = v51;
        v166[6] = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, (uint64_t (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler, (uint64_t)&protocol conformance descriptor for RemoteFlowPluginBundleConversationHandler);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release();
        v166[2] = v52;
        v53 = v166[44];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v53 + 16) + 1, 1);
          v53 = *v161;
        }
        v55 = *(_QWORD *)(v53 + 16);
        v54 = *(_QWORD *)(v53 + 24);
        if (v55 >= v54 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
        ++v41;
        v57 = v166[5];
        v56 = v166[6];
        v58 = __swift_mutable_project_boxed_opaque_existential_1(v157, v57);
        v59 = *(_QWORD *)(v57 - 8);
        v60 = swift_task_alloc();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v60, v58, v57);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v60, v161, v57, v56);
        __swift_destroy_boxed_opaque_existential_1(v157);
        swift_task_dealloc();
      }
      while (v158 != v41);
      v0 = v166;
      v61 = (_QWORD *)v166[44];
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease();
  v61 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_33:
  v2 = v0[81];
  v62 = v0[74];
  v162 = v0[73];
  v167 = v0[72];
  v171[0] = v61;
  v152 = v0[71];
  v144 = v0[66];
  v148 = v0[65];
  v63 = v0[64];
  v154 = v0[63];
  v159 = v0[62];
  v64 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v64);
  v65 = v171[0];
  v66 = swift_task_alloc();
  *(_QWORD *)(v66 + 16) = v63;
  v3 = specialized Sequence.compactMap<A>(_:)((void (*)(_QWORD))partial apply for closure #4 in ConversationHandlerLocator.allHandlers(for:), v66, (uint64_t)v65);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v67 = swift_task_alloc();
  *(_QWORD *)(v67 + 16) = v62;
  v68 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime26ConversationHandlerLocatorC06ScoredH0VG_10Foundation4UUIDV4uuid_AJ06scoredH0ts5NeverOTg5((void (*)(uint64_t))partial apply for closure #5 in ConversationHandlerLocator.allHandlers(for:), v67, (uint64_t)v3);
  v156 = (void (*)(uint64_t, uint64_t, uint64_t))v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v145 = v0 + 47;
  specialized Array.append<A>(contentsOf:)(v68);
  (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v152, v148);
  __swift_destroy_boxed_opaque_existential_1(v146);
  (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v63, v159);
  (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v62, v167);
  v69 = v0[82] + 1;
  v1 = v150;
  if (v69 == v0[80])
  {
LABEL_34:
    swift_bridgeObjectRelease();
    swift_release();
    if (one-time initialization token for executor == -1)
    {
LABEL_35:
      v70 = type metadata accessor for Logger();
      __swift_project_value_buffer(v70, (uint64_t)static Logger.executor);
      v71 = (_QWORD *)*v145;
      swift_bridgeObjectRetain();
      v72 = Logger.logObject.getter();
      v73 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v72, v73))
      {
        v74 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v74 = 134217984;
        v0[45] = v71[2];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v72, v73, "allHandlers(for:) Total handlers found: %ld", v74, 0xCu);
        MEMORY[0x1B5E44758](v74, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      swift_beginAccess();
      v171[0] = *(_QWORD **)v145;
      swift_bridgeObjectRetain_n();
      specialized MutableCollection<>.sort(by:)(v171);
      if (v156)
        return swift_release();
      swift_bridgeObjectRelease_n();
      v123 = v171[0];
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return ((uint64_t (*)(_QWORD *))v0[1])(v123);
    }
LABEL_87:
    swift_once();
    goto LABEL_35;
  }
  while (1)
  {
    v0[82] = v69;
    v0[81] = v156;
    v86 = v0[79];
    if (v69 >= *(_QWORD *)(v86 + 16))
    {
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      swift_bridgeObjectRetain();
      v143 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v143)
        goto LABEL_8;
      goto LABEL_14;
    }
    v168 = *((_DWORD *)v0 + 196);
    v87 = v0[77];
    v88 = v0[74];
    v89 = v0[73];
    v90 = v0[72];
    v91 = v0[71];
    v92 = v0[70];
    v93 = v0[66];
    v94 = v0[65];
    v163 = v0[69];
    v95 = v87 + *((int *)v0 + 194);
    outlined init with copy of ReferenceResolutionClientProtocol?(v86+ ((*((unsigned __int8 *)v0 + 780) + 32) & ~(unint64_t)*((unsigned __int8 *)v0 + 780))+ *(_QWORD *)(v0[76] + 72) * v69, v87, &demangling cache variable for type metadata for (UUID, Parse));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 32))(v88, v87, v90);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 32))(v91, v95, v94);
    v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 16);
    v0[83] = v96;
    v96(v92, v91, v94);
    Input.init(parse:)();
    v96(v163, v91, v94);
    v97 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 88))(v163, v94);
    v98 = v0[69];
    v99 = v0[66];
    v100 = v0[65];
    if (v97 != v168)
    {
      (*(void (**)(_QWORD, uint64_t))(v99 + 8))(v0[69], v100);
      goto LABEL_53;
    }
    v102 = v0[60];
    v101 = v0[61];
    v104 = v0[58];
    v103 = v0[59];
    v105 = v0[56];
    v106 = v0[57];
    (*(void (**)(_QWORD, uint64_t))(v99 + 96))(v0[69], v100);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v102 + 32))(v101, v98, v103);
    USOParse.userParse.getter();
    v107 = Siri_Nlu_External_UserParse.isSNLC.getter();
    (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v104, v105);
    if ((v107 & 1) == 0)
      break;
    if (one-time initialization token for executor != -1)
      swift_once();
    v108 = v0[71];
    v109 = v0[68];
    v110 = v0[65];
    v111 = type metadata accessor for Logger();
    __swift_project_value_buffer(v111, (uint64_t)static Logger.executor);
    v96(v109, v108, v110);
    v3 = Logger.logObject.getter();
    v112 = static os_log_type_t.debug.getter();
    v113 = os_log_type_enabled(v3, v112);
    v114 = v0[71];
    if (v113)
    {
      v115 = v0[70];
      v116 = v0[68];
      v117 = v0[66];
      v169 = v0[71];
      v118 = v0[65];
      v155 = v0[60];
      v160 = v0[59];
      v164 = v0[61];
      v119 = swift_slowAlloc();
      v120 = (_QWORD *)swift_slowAlloc();
      v171[0] = v120;
      *(_DWORD *)v119 = 136315138;
      v96(v115, v116, v118);
      v121 = String.init<A>(describing:)();
      *(_QWORD *)(v119 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v121, v122, (uint64_t *)v171);
      swift_bridgeObjectRelease();
      v81 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
      v81(v116, v118);
      _os_log_impl(&dword_1B4BE6000, v3, v112, "allHandlers(for:) Skipping SNLC parse %s", (uint8_t *)v119, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v120, -1, -1);
      MEMORY[0x1B5E44758](v119, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v164, v160);
      v82 = v169;
      v83 = v118;
    }
    else
    {
      v75 = v0[68];
      v76 = v0[66];
      v77 = v0[65];
      v79 = v0[60];
      v78 = v0[61];
      v80 = v0[59];

      v81 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
      v81(v75, v77);
      (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
      v82 = v114;
      v83 = v77;
    }
    v81(v82, v83);
    v1 = v150;
    v84 = v0[74];
    v2 = v0[73];
    v85 = v0[72];
    (*(void (**)(_QWORD, _QWORD))(v0[63] + 8))(v0[64], v0[62]);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v84, v85);
    v69 = v0[82] + 1;
    if (v69 == v0[80])
      goto LABEL_34;
  }
  (*(void (**)(_QWORD, _QWORD))(v0[60] + 8))(v0[61], v0[59]);
LABEL_53:
  v124 = static IntentTopic.make(from:)();
  v3 = *(NSObject **)(v124 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    v2 = MEMORY[0x1E0DEE9D8];
LABEL_77:
    v0[84] = v2;
    v0[85] = static MessageBusActor.shared;
    swift_retain();
    return swift_task_switch();
  }
  v125 = v0[53];
  v1 = (*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80);
  v126 = v124 + v1;
  v127 = *(_QWORD *)(v125 + 72);
  v170 = *(void (**)(uint64_t, unint64_t, uint64_t))(v125 + 16);
  swift_bridgeObjectRetain();
  v2 = MEMORY[0x1E0DEE9D8];
  while (2)
  {
    v128 = v0[55];
    v130 = v0[52];
    v129 = v0[53];
    v170(v128, v126, v130);
    v131 = IntentTopic.makeWildcardFallbacks()();
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v128, v130);
    v132 = *(_QWORD *)(v131 + 16);
    v133 = *(_QWORD *)(v2 + 16);
    v134 = v133 + v132;
    if (__OFADD__(v133, v132))
      goto LABEL_79;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v134 <= *(_QWORD *)(v2 + 24) >> 1)
    {
      if (!*(_QWORD *)(v131 + 16))
      {
LABEL_55:
        if (v132)
        {
          __break(1u);
LABEL_79:
          __break(1u);
          goto LABEL_80;
        }
        goto LABEL_56;
      }
    }
    else
    {
      if (v133 <= v134)
        v136 = v133 + v132;
      else
        v136 = v133;
      v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v136, 1, v2);
      if (!*(_QWORD *)(v131 + 16))
        goto LABEL_55;
    }
    v137 = *(_QWORD *)(v2 + 16);
    if ((*(_QWORD *)(v2 + 24) >> 1) - v137 < v132)
      goto LABEL_81;
    v138 = v2 + v1 + v137 * v127;
    if (v131 + v1 < v138 + v132 * v127 && v138 < v131 + v1 + v132 * v127)
      return _fatalErrorMessage(_:_:file:line:flags:)();
    swift_arrayInitWithCopy();
    if (!v132)
    {
LABEL_56:
      swift_bridgeObjectRelease();
      v126 += v127;
      v3 = ((char *)v3 - 1);
      if (!v3)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_77;
      }
      continue;
    }
    break;
  }
  v140 = *(_QWORD *)(v2 + 16);
  v141 = __OFADD__(v140, v132);
  v142 = v140 + v132;
  if (!v141)
  {
    *(_QWORD *)(v2 + 16) = v142;
    goto LABEL_56;
  }
  __break(1u);
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  int64_t v125;
  int v126;
  int64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  __int128 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  __int128 *v152;
  _QWORD *v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  void (*v157)(uint64_t, unint64_t, uint64_t);
  _QWORD *v158[2];

  v1 = (uint64_t)(v0 + 27);
  if (v0[30])
  {
    v152 = (__int128 *)(v0 + 7);
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 27), (uint64_t)(v0 + 22));
    if (one-time initialization token for executor != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v0 + 22), (uint64_t)(v0 + 17));
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = swift_slowAlloc();
      v6 = (_QWORD *)swift_slowAlloc();
      v158[0] = v6;
      *(_DWORD *)v5 = 136315138;
      v8 = v0[20];
      v7 = v0[21];
      __swift_project_boxed_opaque_existential_1(v0 + 17, v8);
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v8, v7);
      *(_QWORD *)(v5 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, (uint64_t *)v158);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 17));
      _os_log_impl(&dword_1B4BE6000, v3, v4, "allHandlers(for:) Found extension with id: %s", (uint8_t *)v5, 0xCu);
      swift_arrayDestroy();
      v11 = v6;
      v1 = (uint64_t)(v0 + 27);
      MEMORY[0x1B5E44758](v11, -1, -1);
      MEMORY[0x1B5E44758](v5, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 17));
    }

    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v0 + 22), (uint64_t)v152);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = (_QWORD *)v0[95];
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, (_QWORD *)v0[95]);
    v15 = v12[2];
    v14 = v12[3];
    if (v15 >= v14 >> 1)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
    v17 = v0[53];
    v16 = v0[54];
    v18 = v0[52];
    v12[2] = v15 + 1;
    outlined init with take of ReferenceResolutionClientProtocol(v152, (uint64_t)&v12[5 * v15 + 4]);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 22));
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[53] + 8))(v0[54], v0[52]);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 27), &demangling cache variable for type metadata for ConversationHandler?);
    v12 = (_QWORD *)v0[95];
  }
  v19 = v0[94] + 1;
  if (v19 != v0[88])
  {
    v0[95] = v12;
    v0[94] = v19;
    ((void (*)(_QWORD, unint64_t, _QWORD))v0[93])(v0[54], v0[84]+ ((*((unsigned __int8 *)v0 + 788) + 32) & ~(unint64_t)*((unsigned __int8 *)v0 + 788))+ v0[92] * v19, v0[52]);
    v43 = (_QWORD *)swift_task_alloc();
    v0[96] = v43;
    *v43 = v0;
    v43[1] = ConversationHandlerLocator.allHandlers(for:);
    return FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:)(v1, v0[54], v0[90], v0[91]);
  }
  swift_bridgeObjectRelease();
  v20 = v0[87];
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v136 = v12;
    if (v21)
      goto LABEL_16;
  }
  else
  {
    v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    v136 = v12;
    if (v21)
    {
LABEL_16:
      v0[44] = MEMORY[0x1E0DEE9D8];
      v148 = v0 + 44;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21 & ~(v21 >> 63), 0);
      if (v21 < 0)
      {
        __break(1u);
        goto LABEL_84;
      }
      v22 = v0;
      v23 = 0;
      v141 = (__int128 *)(v22 + 32);
      v145 = (uint64_t)(v22 + 2);
      v153 = v22;
      v24 = v22[87];
      v137 = v24 + 32;
      v139 = v24 & 0xC000000000000001;
      v146 = v21;
      do
      {
        if (v139)
        {
          v25 = (_QWORD *)MEMORY[0x1B5E43B94](v23, v153[87]);
        }
        else
        {
          v25 = *(_QWORD **)(v137 + 8 * v23);
          swift_retain();
        }
        if (one-time initialization token for executor != -1)
          swift_once();
        v26 = type metadata accessor for Logger();
        v27 = __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
        specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/RemoteFlowPluginPackage.swift", 44, 2, (uint64_t)"loadRemoteConversationHandler()", 31, 2, v27);
        v29 = v25[2];
        v28 = v25[3];
        v30 = v25[6];
        v31 = v25[7];
        outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v25 + 8), (uint64_t)v141);
        v32 = v25[4];
        v33 = type metadata accessor for RemoteFlowPluginBundleConversationHandler();
        v34 = (_QWORD *)swift_allocObject();
        v34[12] = 0;
        v34[13] = 0;
        v34[2] = v29;
        v34[3] = v28;
        v34[4] = v30;
        v34[5] = v31;
        outlined init with take of ReferenceResolutionClientProtocol(v141, (uint64_t)(v34 + 7));
        v34[6] = v32;
        v153[5] = v33;
        v153[6] = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, (uint64_t (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler, (uint64_t)&protocol conformance descriptor for RemoteFlowPluginBundleConversationHandler);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release();
        v153[2] = v34;
        v35 = v153[44];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v35 + 16) + 1, 1);
          v35 = *v148;
        }
        v37 = *(_QWORD *)(v35 + 16);
        v36 = *(_QWORD *)(v35 + 24);
        if (v37 >= v36 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
        ++v23;
        v39 = v153[5];
        v38 = v153[6];
        v40 = __swift_mutable_project_boxed_opaque_existential_1(v145, v39);
        v41 = *(_QWORD *)(v39 - 8);
        v42 = swift_task_alloc();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v42, v40, v39);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v42, v148, v39, v38);
        __swift_destroy_boxed_opaque_existential_1(v145);
        swift_task_dealloc();
      }
      while (v146 != v23);
      v0 = v153;
      v45 = (_QWORD *)v153[44];
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease();
  v45 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_32:
  v46 = v0[81];
  v47 = v0[74];
  v149 = v0[73];
  v154 = v0[72];
  v158[0] = v45;
  v134 = v0[66];
  v135 = v0[65];
  v48 = v0[64];
  v138 = v0[71];
  v140 = v0[63];
  v142 = v0[62];
  v49 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v49);
  v50 = v158[0];
  v51 = swift_task_alloc();
  *(_QWORD *)(v51 + 16) = v48;
  v52 = specialized Sequence.compactMap<A>(_:)((void (*)(_QWORD))partial apply for closure #4 in ConversationHandlerLocator.allHandlers(for:), v51, (uint64_t)v50);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v53 = swift_task_alloc();
  *(_QWORD *)(v53 + 16) = v47;
  v54 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime26ConversationHandlerLocatorC06ScoredH0VG_10Foundation4UUIDV4uuid_AJ06scoredH0ts5NeverOTg5((void (*)(uint64_t))partial apply for closure #5 in ConversationHandlerLocator.allHandlers(for:), v53, v52);
  v144 = v46;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v136 = v0 + 47;
  specialized Array.append<A>(contentsOf:)(v54);
  (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v138, v135);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 12));
  (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v48, v142);
  (*(void (**)(uint64_t, uint64_t))(v149 + 8))(v47, v154);
  v55 = v0[82] + 1;
  if (v55 == v0[80])
  {
LABEL_33:
    swift_bridgeObjectRelease();
    swift_release();
    if (one-time initialization token for executor == -1)
    {
LABEL_34:
      v56 = type metadata accessor for Logger();
      __swift_project_value_buffer(v56, (uint64_t)static Logger.executor);
      v57 = (_QWORD *)*v136;
      swift_bridgeObjectRetain();
      v58 = Logger.logObject.getter();
      v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v60 = 134217984;
        v0[45] = v57[2];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v58, v59, "allHandlers(for:) Total handlers found: %ld", v60, 0xCu);
        MEMORY[0x1B5E44758](v60, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      swift_beginAccess();
      v158[0] = *(_QWORD **)v136;
      swift_bridgeObjectRetain_n();
      specialized MutableCollection<>.sort(by:)(v158);
      if (v144)
        return swift_release();
      swift_bridgeObjectRelease_n();
      v111 = v158[0];
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return ((uint64_t (*)(_QWORD *))v0[1])(v111);
    }
LABEL_84:
    swift_once();
    goto LABEL_34;
  }
  while (1)
  {
    v0[82] = v55;
    v0[81] = v144;
    v73 = v0[79];
    if (v55 >= *(_QWORD *)(v73 + 16))
    {
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
      return _fatalErrorMessage(_:_:file:line:flags:)();
    }
    v155 = *((_DWORD *)v0 + 196);
    v74 = v0[77];
    v75 = v0[74];
    v76 = v0[73];
    v77 = v0[72];
    v78 = v0[71];
    v79 = v0[70];
    v80 = v0[66];
    v81 = v0[65];
    v150 = v0[69];
    v82 = v74 + *((int *)v0 + 194);
    outlined init with copy of ReferenceResolutionClientProtocol?(v73+ ((*((unsigned __int8 *)v0 + 780) + 32) & ~(unint64_t)*((unsigned __int8 *)v0 + 780))+ *(_QWORD *)(v0[76] + 72) * v55, v74, &demangling cache variable for type metadata for (UUID, Parse));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 32))(v75, v74, v77);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 32))(v78, v82, v81);
    v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 16);
    v0[83] = v83;
    v83(v79, v78, v81);
    Input.init(parse:)();
    v83(v150, v78, v81);
    v84 = (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 88))(v150, v81);
    v85 = v0[69];
    v86 = v0[66];
    v87 = v0[65];
    if (v84 != v155)
    {
      (*(void (**)(_QWORD, uint64_t))(v86 + 8))(v0[69], v87);
      goto LABEL_52;
    }
    v89 = v0[60];
    v88 = v0[61];
    v91 = v0[58];
    v90 = v0[59];
    v92 = v0[56];
    v93 = v0[57];
    (*(void (**)(_QWORD, uint64_t))(v86 + 96))(v0[69], v87);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 32))(v88, v85, v90);
    USOParse.userParse.getter();
    v94 = Siri_Nlu_External_UserParse.isSNLC.getter();
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v91, v92);
    if ((v94 & 1) == 0)
      break;
    if (one-time initialization token for executor != -1)
      swift_once();
    v95 = v0[71];
    v96 = v0[68];
    v97 = v0[65];
    v98 = type metadata accessor for Logger();
    __swift_project_value_buffer(v98, (uint64_t)static Logger.executor);
    v83(v96, v95, v97);
    v99 = Logger.logObject.getter();
    v100 = static os_log_type_t.debug.getter();
    v101 = os_log_type_enabled(v99, v100);
    v102 = v0[71];
    if (v101)
    {
      v103 = v0[70];
      v156 = v0[71];
      v104 = v0[68];
      v105 = v0[66];
      v106 = v0[65];
      v143 = v0[60];
      v147 = v0[59];
      v151 = v0[61];
      v107 = swift_slowAlloc();
      v108 = (_QWORD *)swift_slowAlloc();
      v158[0] = v108;
      *(_DWORD *)v107 = 136315138;
      v83(v103, v104, v106);
      v109 = String.init<A>(describing:)();
      *(_QWORD *)(v107 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, (uint64_t *)v158);
      swift_bridgeObjectRelease();
      v67 = *(void (**)(uint64_t, uint64_t))(v105 + 8);
      v67(v104, v106);
      _os_log_impl(&dword_1B4BE6000, v99, v100, "allHandlers(for:) Skipping SNLC parse %s", (uint8_t *)v107, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v108, -1, -1);
      MEMORY[0x1B5E44758](v107, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v151, v147);
      v68 = v156;
      v69 = v106;
    }
    else
    {
      v61 = v0[68];
      v62 = v0[66];
      v63 = v0[65];
      v65 = v0[60];
      v64 = v0[61];
      v66 = v0[59];

      v67 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
      v67(v61, v63);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
      v68 = v102;
      v69 = v63;
    }
    v67(v68, v69);
    v70 = v0[74];
    v71 = v0[73];
    v72 = v0[72];
    (*(void (**)(_QWORD, _QWORD))(v0[63] + 8))(v0[64], v0[62]);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
    v55 = v0[82] + 1;
    if (v55 == v0[80])
      goto LABEL_33;
  }
  (*(void (**)(_QWORD, _QWORD))(v0[60] + 8))(v0[61], v0[59]);
LABEL_52:
  v112 = static IntentTopic.make(from:)();
  v113 = *(_QWORD *)(v112 + 16);
  if (v113)
  {
    v114 = v0[53];
    v115 = (*(unsigned __int8 *)(v114 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
    v116 = v112 + v115;
    v117 = *(_QWORD *)(v114 + 72);
    v157 = *(void (**)(uint64_t, unint64_t, uint64_t))(v114 + 16);
    swift_bridgeObjectRetain();
    v118 = MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v119 = v0[55];
      v121 = v0[52];
      v120 = v0[53];
      v157(v119, v116, v121);
      v122 = IntentTopic.makeWildcardFallbacks()();
      (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v119, v121);
      v123 = *(_QWORD *)(v122 + 16);
      v124 = *(_QWORD *)(v118 + 16);
      v125 = v124 + v123;
      if (__OFADD__(v124, v123))
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }
      v126 = swift_isUniquelyReferenced_nonNull_native();
      if (v126 && v125 <= *(_QWORD *)(v118 + 24) >> 1)
      {
        if (*(_QWORD *)(v122 + 16))
          goto LABEL_65;
      }
      else
      {
        if (v124 <= v125)
          v127 = v124 + v123;
        else
          v127 = v124;
        v118 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v126, v127, 1, v118);
        if (*(_QWORD *)(v122 + 16))
        {
LABEL_65:
          v128 = *(_QWORD *)(v118 + 16);
          if ((*(_QWORD *)(v118 + 24) >> 1) - v128 < v123)
            goto LABEL_80;
          v129 = v118 + v115 + v128 * v117;
          if (v122 + v115 < v129 + v123 * v117 && v129 < v122 + v115 + v123 * v117)
            return _fatalErrorMessage(_:_:file:line:flags:)();
          swift_arrayInitWithCopy();
          if (v123)
          {
            v131 = *(_QWORD *)(v118 + 16);
            v132 = __OFADD__(v131, v123);
            v133 = v131 + v123;
            if (v132)
              goto LABEL_81;
            *(_QWORD *)(v118 + 16) = v133;
          }
          goto LABEL_55;
        }
      }
      if (v123)
      {
        __break(1u);
        goto LABEL_78;
      }
LABEL_55:
      swift_bridgeObjectRelease();
      v116 += v117;
      if (!--v113)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_76;
      }
    }
  }
  swift_bridgeObjectRelease();
  v118 = MEMORY[0x1E0DEE9D8];
LABEL_76:
  v0[84] = v118;
  v0[85] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

void specialized closure #1 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t *a2, uint64_t *a3, void (*a4)(char *, void *, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF05E0], MEMORY[0x1E0DF05E8]);
  v10 = (void *)swift_allocError();
  CancellationError.init()();
  v11 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  v12 = v10;
  a4(v9, v10, 1);

  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, a2);
}

void specialized closure #1 in withCancellableContinuation<A>(body:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(unint64_t, char *, uint64_t);
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (void (*)(unint64_t, char *, uint64_t))((char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF05E0], MEMORY[0x1E0DF05E8]);
  v3 = (void *)swift_allocError();
  CancellationError.init()();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
  (*(void (**)(void (*)(unint64_t, char *, uint64_t), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  v5 = v3;
  specialized ManagedContinuation.updateState(continuation:result:)(v2, v3, 0, 1u);

  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
}

uint64_t specialized closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch();
}

{
  _QWORD *v4;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  return swift_task_switch();
}

uint64_t specialized closure #2 in withCancellableContinuation<A>(body:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *v3 = v0;
  v3[1] = closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  *v3 = v0;
  v3[1] = specialized closure #2 in withCancellableContinuation<A>(body:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = *(_QWORD **)(v2 + 24);
  swift_task_dealloc();
  *v4 = *(_QWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversation?);
  *v3 = v0;
  v3[1] = specialized closure #2 in withCancellableContinuation<A>(body:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _OWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = *(_OWORD **)(v2 + 32);
  swift_task_dealloc();
  *v4 = *(_OWORD *)(v2 + 16);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t one-time initialization function for lastSeenFlowPluginServiceClient()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<SharedFlowPluginServiceClient?, os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  static ConversationHandlerLocator.lastSeenFlowPluginServiceClient = result;
  return result;
}

uint64_t *ConversationHandlerLocator.lastSeenFlowPluginServiceClient.unsafeMutableAddressor()
{
  if (one-time initialization token for lastSeenFlowPluginServiceClient != -1)
    swift_once();
  return &static ConversationHandlerLocator.lastSeenFlowPluginServiceClient;
}

uint64_t static ConversationHandlerLocator.lastSeenFlowPluginServiceClient.getter()
{
  if (one-time initialization token for lastSeenFlowPluginServiceClient != -1)
    swift_once();
  return swift_retain();
}

_QWORD *ConversationHandlerLocator.__allocating_init(pluginCatalogTask:flowExtensionDiscoverer:sharedFlowPluginServiceClient:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  result[6] = a5;
  return result;
}

_QWORD *ConversationHandlerLocator.init(pluginCatalogTask:flowExtensionDiscoverer:sharedFlowPluginServiceClient:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[2] = a1;
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = a5;
  return v5;
}

_QWORD *ConversationHandlerLocator.__allocating_init(onConnectionInterrupted:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_signpost_type_t v26;
  char v27;
  void (*v28)(char *, char *, uint64_t);
  uint8_t *v29;
  os_signpost_id_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  char *v39;
  os_signpost_type_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  const char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  BOOL v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint8_t *v65;
  os_signpost_id_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  char *v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *result;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v90 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for OSSignpostError();
  v6 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v89 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL();
  v87 = *(_QWORD *)(v8 - 8);
  v88 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OSSignpostID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v86 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v82 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v82 - v18;
  type metadata accessor for SharedFlowPluginServiceClient();
  v20 = (_QWORD *)swift_allocObject();
  v92 = a1;
  v21 = specialized SharedFlowPluginServiceClient.init(connectionProvider:onConnectionInterrupted:)(a1, a2, v20);
  v93 = a2;
  v94 = v21;
  v22 = one-time initialization token for executor;
  swift_retain();
  if (v22 != -1)
    swift_once();
  v23 = type metadata accessor for OSSignposter();
  v24 = __swift_project_value_buffer(v23, (uint64_t)static Signposter.executor);
  static OSSignpostID.exclusive.getter();
  v25 = OSSignposter.logHandle.getter();
  v26 = static os_signpost_type_t.begin.getter();
  v27 = OS_os_log.signpostsEnabled.getter();
  v84 = v6;
  if ((v27 & 1) != 0)
  {
    v83 = (void (*)(char *, char *, uint64_t))v24;
    v28 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v28(v17, v19, v11);
    v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v29 = 0;
    v30 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v25, v26, v30, "LoadPluginCatalog", "", v29, 2u);
    MEMORY[0x1B5E44758](v29, -1, -1);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    v31 = v28;
  }
  else
  {

    v31 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  }
  v83 = v31;
  v31(v17, v19, v11);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  v32 = OSSignpostIntervalState.init(id:isOpen:)();
  v33 = *(void (**)(char *, uint64_t))(v12 + 8);
  v33(v19, v11);
  static ConversationHandlerLocator.conversationHandlerCacheURL.getter();
  v34 = specialized static CachedPluginCatalog.load(cacheUrl:sharedFlowPluginServiceClient:ignoreOSVersion:)((uint64_t)v10, (uint64_t)v94, 0);
  v36 = v35;
  (*(void (**)(char *, uint64_t))(v87 + 8))(v10, v88);
  v37 = v89;
  if (v34)
  {
    v88 = v36;
    v38 = OSSignposter.logHandle.getter();
    v39 = v86;
    OSSignpostIntervalState.signpostID.getter();
    v40 = static os_signpost_type_t.end.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v87 = v34;
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      v41 = v37;
      v43 = v84;
      v42 = v85;
      v44 = (*(uint64_t (**)(char *, uint64_t))(v84 + 88))(v41, v85);
      v45 = *MEMORY[0x1E0DF2190];
      v82 = v32;
      if (v44 == v45)
      {
        v46 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v43 + 8))(v41, v42);
        v46 = "";
      }
      v83(v17, v39, v11);
      v64 = v39;
      v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v65 = 0;
      v66 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v38, v40, v66, "LoadPluginCatalog", v46, v65, 2u);
      MEMORY[0x1B5E44758](v65, -1, -1);

      v33(v64, v11);
      v63 = v91;
      v34 = v87;
    }
    else
    {

      v17 = v39;
      v63 = v91;
    }
    v33(v17, v11);
    if (one-time initialization token for executor != -1)
      swift_once();
    v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)static Logger.executor);
    v68 = Logger.logObject.getter();
    v69 = static os_log_type_t.debug.getter();
    v70 = os_log_type_enabled(v68, v69);
    v71 = v90;
    v53 = (uint64_t)v94;
    if (v70)
    {
      v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v72 = 0;
      _os_log_impl(&dword_1B4BE6000, v68, v69, "ConversationHandlerLocator: Found plugin catalog from cache", v72, 2u);
      MEMORY[0x1B5E44758](v72, -1, -1);
    }

    v73 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v71, 1, 1, v73);
    v74 = one-time initialization token for shared;
    swift_retain();
    if (v74 != -1)
      swift_once();
    swift_beginAccess();
    v75 = static MessageBusActor.shared;
    v76 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
    v77 = (_QWORD *)swift_allocObject();
    v77[2] = v75;
    v77[3] = v76;
    v77[4] = v53;
    v77[5] = v34;
    v77[6] = v88;
    v77[7] = v63;
    swift_retain();
    v60 = &async function pointer to partial apply for closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:);
    v61 = (uint64_t)v71;
    v62 = (uint64_t)v77;
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.executor);
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.debug.getter();
    v50 = os_log_type_enabled(v48, v49);
    v51 = v90;
    v52 = v91;
    v53 = (uint64_t)v94;
    if (v50)
    {
      v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v54 = 0;
      _os_log_impl(&dword_1B4BE6000, v48, v49, "ConversationHandlerLocator: No plugin catalog cache found, will construct a new one", v54, 2u);
      MEMORY[0x1B5E44758](v54, -1, -1);
    }

    v55 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v51, 1, 1, v55);
    v56 = one-time initialization token for shared;
    swift_retain();
    swift_retain();
    if (v56 != -1)
      swift_once();
    swift_beginAccess();
    v57 = static MessageBusActor.shared;
    v58 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
    v59 = (_QWORD *)swift_allocObject();
    v59[2] = v57;
    v59[3] = v58;
    v59[4] = v32;
    v59[5] = v53;
    v59[6] = v52;
    swift_retain();
    v60 = &async function pointer to partial apply for closure #2 in ConversationHandlerLocator.init(onConnectionInterrupted:);
    v61 = (uint64_t)v51;
    v62 = (uint64_t)v59;
  }
  v78 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5(v61, (uint64_t)v60, v62);
  if (one-time initialization token for shared != -1)
    swift_once();
  v79 = static FlowExtensionDiscoverer.shared;
  swift_retain();
  swift_release();
  result = (_QWORD *)swift_allocObject();
  result[2] = v78;
  result[3] = v79;
  v81 = v92;
  result[4] = v53;
  result[5] = v81;
  result[6] = v93;
  return result;
}

uint64_t static ConversationHandlerLocator.conversationHandlerCacheURL.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t result;
  id v9;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x1E0C80C00];
  v0 = type metadata accessor for URL();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v11[0] = 0;
  v5 = objc_msgSend(v4, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 13, 1, 0, 0, v11);

  v6 = v11[0];
  if (v5)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

    URL.appendingPathComponent(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  else
  {
    v9 = v11[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000001ELL, 0x80000001B4EF97A0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/ConversationHandler/ConversationHandlerLocator.swift", 121, 2, 99);
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a1;
  v6[6] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t (*v8)(void);

  if (one-time initialization token for lastSeenFlowPluginServiceClient != -1)
    swift_once();
  v1 = v0[7];
  v2 = v0[8];
  v4 = (_QWORD *)v0[5];
  v3 = v0[6];
  v5 = static ConversationHandlerLocator.lastSeenFlowPluginServiceClient;
  v6 = (os_unfair_lock_s *)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 24));
  swift_release();
  *(_QWORD *)(v5 + 16) = v3;
  swift_retain();
  os_unfair_lock_unlock(v6);
  v4[3] = &type metadata for CachedPluginCatalog;
  v4[4] = &protocol witness table for CachedPluginCatalog;
  *v4 = v1;
  v4[1] = v2;
  v8 = (uint64_t (*)(void))v0[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v8();
}

uint64_t closure #2 in ConversationHandlerLocator.init(onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[32] = a5;
  v6[33] = a6;
  v6[30] = a1;
  v6[31] = a4;
  v7 = type metadata accessor for OSSignpostError();
  v6[34] = v7;
  v6[35] = *(_QWORD *)(v7 - 8);
  v6[36] = swift_task_alloc();
  v8 = type metadata accessor for OSSignpostID();
  v6[37] = v8;
  v6[38] = *(_QWORD *)(v8 - 8);
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v6[41] = swift_task_alloc();
  v9 = type metadata accessor for URL();
  v6[42] = v9;
  v6[43] = *(_QWORD *)(v9 - 8);
  v6[44] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #2 in ConversationHandlerLocator.init(onConnectionInterrupted:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_signpost_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  os_signpost_id_t v27;
  __int128 *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v29 = (__int128 *)(v0 + 136);
  v32 = v0 + 16;
  if (one-time initialization token for lastSeenFlowPluginServiceClient != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 256);
  v30 = *(_QWORD *)(v0 + 344);
  v31 = *(uint64_t **)(v0 + 240);
  v5 = static ConversationHandlerLocator.lastSeenFlowPluginServiceClient;
  v6 = (os_unfair_lock_s *)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 24));
  swift_release();
  *(_QWORD *)(v5 + 16) = v4;
  swift_retain();
  os_unfair_lock_unlock(v6);
  v7 = (id)MEMORY[0x1B5E43FFC]();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:isDirectory:)();
  swift_bridgeObjectRelease();
  v8 = MEMORY[0x1E0DA7A68];
  *(_QWORD *)(v0 + 80) = v2;
  *(_QWORD *)(v0 + 88) = v8;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 56));
  URL.appendingPathComponent(_:isDirectory:)();
  *(_QWORD *)(v0 + 120) = v2;
  *(_QWORD *)(v0 + 128) = v8;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 96));
  URL.appendingPathComponent(_:isDirectory:)();
  <+> infix(_:_:)();
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  outlined init with copy of ReferenceResolutionClientProtocol(v32, (uint64_t)v29);
  v9 = type metadata accessor for FlowPluginPackageFinder();
  v10 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(v29, v10 + 16);
  *(_QWORD *)(v10 + 56) = v4;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PluginCapabilityCatalog<RemoteFlowPluginPackage>);
  *(_QWORD *)(v0 + 200) = v9;
  *(_QWORD *)(v0 + 208) = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type FlowPluginPackageFinder and conformance FlowPluginPackageFinder, (uint64_t (*)(uint64_t))type metadata accessor for FlowPluginPackageFinder, (uint64_t)&protocol conformance descriptor for FlowPluginPackageFinder);
  *(_QWORD *)(v0 + 176) = v10;
  swift_retain();
  swift_retain();
  static ConversationHandlerLocator.conversationHandlerCacheURL.getter();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v3, 0, 1, v2);
  v12 = static PluginCapabilityCatalog.load<A>(finder:cache:)();
  outlined destroy of ReferenceResolutionClientProtocol?(v3, &demangling cache variable for type metadata for URL?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 176);
  v31[3] = v11;
  v31[4] = (uint64_t)&protocol witness table for <> PluginCapabilityCatalog<A>;
  swift_release();
  *v31 = v12;
  __swift_destroy_boxed_opaque_existential_1(v32);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v1, v2);
  if (one-time initialization token for executor != -1)
    swift_once();
  v13 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v13, (uint64_t)static Signposter.executor);
  v14 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  v15 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v17 = *(_QWORD *)(v0 + 280);
    v16 = *(_QWORD *)(v0 + 288);
    v18 = *(_QWORD *)(v0 + 272);
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v17 + 88))(v16, v18) == *MEMORY[0x1E0DF2190])
    {
      v19 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 272));
      v19 = "";
    }
    v20 = (uint64_t *)(v0 + 312);
    v23 = *(_QWORD *)(v0 + 320);
    v24 = *(_QWORD *)(v0 + 296);
    v25 = *(_QWORD *)(v0 + 304);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v25 + 16))(*(_QWORD *)(v0 + 312), v23, v24);
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    v27 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v14, v15, v27, "LoadPluginCatalog", v19, v26, 2u);
    MEMORY[0x1B5E44758](v26, -1, -1);

    v22 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v22(v23, v24);
  }
  else
  {
    v20 = (uint64_t *)(v0 + 320);
    v21 = *(_QWORD *)(v0 + 304);

    v22 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  }
  v22(*v20, *(_QWORD *)(v0 + 296));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t specialized ImmutableSimpleOrderedDictionary.items()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  unint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t);
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v32[2];
  void (*v33)(void);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, Parse));
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  MEMORY[0x1E0C80A78](v4);
  v46 = (uint64_t)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for Parse();
  v6 = *(_QWORD **)(v45 - 8);
  v7 = MEMORY[0x1E0C80A78](v45);
  v40 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v44 = (char *)v32 - v9;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a2 + 16);
  if (!v14)
    return MEMORY[0x1E0DEE9D8];
  v15 = a2 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  v16 = *(_QWORD *)(v11 + 72);
  v17 = *(void (**)(void))(v11 + 16);
  v32[1] = a2;
  swift_bridgeObjectRetain();
  v18 = MEMORY[0x1E0DEE9D8];
  v38 = v11;
  v39 = v6;
  v36 = v10;
  v37 = v16;
  v34 = a1;
  v35 = v13;
  v33 = v17;
  do
  {
    ((void (*)(char *, uint64_t, uint64_t))v17)(v13, v15, v10);
    if (*(_QWORD *)(a1 + 16))
    {
      v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
      if ((v20 & 1) != 0)
      {
        v21 = *(_QWORD *)(a1 + 56) + v6[9] * v19;
        v22 = (void (*)(char *, unint64_t, uint64_t))v6[2];
        v23 = v40;
        v24 = v45;
        v22(v40, v21, v45);
        v25 = (void (*)(char *, char *, uint64_t))v6[4];
        v43 = v18;
        v26 = v44;
        v25(v44, v23, v24);
        v27 = (char *)(v46 + *(int *)(v42 + 48));
        v17();
        v28 = v26;
        v18 = v43;
        v22(v27, (unint64_t)v28, v24);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
        v30 = *(_QWORD *)(v18 + 16);
        v29 = *(_QWORD *)(v18 + 24);
        v16 = v37;
        v11 = v38;
        a1 = v34;
        v13 = v35;
        v17 = v33;
        if (v30 >= v29 >> 1)
          v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v18);
        *(_QWORD *)(v18 + 16) = v30 + 1;
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v46, v18+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(_QWORD *)(v41 + 72) * v30, &demangling cache variable for type metadata for (UUID, Parse));
        v6 = v39;
        ((void (*)(char *, uint64_t))v39[1])(v44, v45);
        v10 = v36;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v15 += v16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t closure #4 in ConversationHandlerLocator.allHandlers(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v12[5];

  v6 = type metadata accessor for Input();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v12[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  return ConversationHandlerLocator.ScoredHandler.init(handler:input:)(v12, v9, a3);
}

uint64_t closure #5 in ConversationHandlerLocator.allHandlers(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a3
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler))
              + 48);
  v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, a2, v7);
  return outlined init with copy of ConversationHelperInput(a1, v6, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
}

uint64_t ConversationHandlerLocator.handler(id:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  v5 = *(_QWORD *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  v4[9] = v5;
  v4[10] = *(_QWORD *)(v5 + 64);
  v4[11] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[12] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:)()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = static MessageBusActor.shared;
  v0[13] = *(_QWORD *)(v0[8] + 32);
  v0[14] = v1;
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v9;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v9 = *(_OWORD *)(v0 + 48);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 40), v1, type metadata accessor for RemoteConversationTurnData);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (v2 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = swift_allocObject();
  *(_QWORD *)(v0 + 120) = v6;
  outlined init with take of StringKeyedValue(v1, v6 + v4, type metadata accessor for RemoteConversationTurnData);
  *(_OWORD *)(v6 + v5) = v9;
  swift_unknownObjectRetain();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v7;
  *v7 = v0;
  v7[1] = ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:);
  return specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:), v6);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_release();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationHandlerLocator.ScoredHandler.affinity.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ConversationHandlerLocator.ScoredHandler.handler.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 8, a1);
}

uint64_t ConversationHandlerLocator.ScoredHandler.input.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ConversationHandlerLocator.ScoredHandler() + 24);
  v4 = type metadata accessor for Input();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ConversationHandlerLocator.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ConversationHandlerLocator.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a1;
  v17[7] = a4;
  v17[8] = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, a7, (uint64_t)v17);
  return swift_release();
}

uint64_t specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[6] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  v8[11] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v8;

  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[8] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  v8[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v13;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 96) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 56);
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13 = v6;
    *(_DWORD *)v5 = 136315394;
    v8 = *(_QWORD *)(v4 + 16);
    v7 = *(_QWORD *)(v4 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v5 + 12) = 2048;
    *(_QWORD *)(v0 + 40) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "%s: task %lu begin", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }
  else
  {
    swift_release();
  }

  v12 = (uint64_t (*)(void))(**(int **)(v0 + 72) + *(_QWORD *)(v0 + 72));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v9;
  *v9 = v0;
  v9[1] = specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:);
  return v12();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  specialized ManagedContinuation.updateState(continuation:result:)(v1, 0, 0);
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  swift_retain();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 48);
    v6 = *(_QWORD *)(v0 + 56);
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    v12 = v8;
    *(_DWORD *)v7 = 136315394;
    v9 = *(_QWORD *)(v5 + 16);
    v10 = *(_QWORD *)(v5 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v7 + 12) = 2048;
    *(_QWORD *)(v0 + 24) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "%s: task %lu succeeded", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }
  else
  {
    swift_release();
  }

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  id v6;
  uint64_t v7;
  id v8;

  v1 = *(void **)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(Swift::String **)(v0 + 48);
  swift_retain();
  v6 = v1;
  specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/InterruptibleTaskManager.swift", 45, 2, (uint64_t)"perform(_:)", 11, 2, v3, v5, v4, v1);

  swift_release();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
  v8 = v1;
  specialized ManagedContinuation.updateState(continuation:result:)(v2, v1, 1u);
  outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 112) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 64);
    v11 = *(_QWORD *)(v0 + 72);
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13 = v6;
    *(_DWORD *)v5 = 136315394;
    v8 = *(_QWORD *)(v4 + 16);
    v7 = *(_QWORD *)(v4 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v5 + 12) = 2048;
    *(_QWORD *)(v0 + 56) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "%s: task %lu begin", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }
  else
  {
    swift_release();
  }

  v12 = (uint64_t (*)(uint64_t))(**(int **)(v0 + 88) + *(_QWORD *)(v0 + 88));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v9;
  *v9 = v0;
  v9[1] = specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:);
  return v12(v0 + 16);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(unint64_t, char *, uint64_t);
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v1 = *(void (**)(unint64_t, char *, uint64_t))(v0 + 104);
  v2 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
  (*(void (**)(void (*)(unint64_t, char *, uint64_t), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 1, 1, v4);
  swift_unknownObjectRetain();
  specialized ManagedContinuation.updateState(continuation:result:)(v1, v2, v3, 0);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v1, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_retain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 72);
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v14 = v10;
    *(_DWORD *)v9 = 136315394;
    v11 = *(_QWORD *)(v7 + 16);
    v12 = *(_QWORD *)(v7 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v9 + 12) = 2048;
    *(_QWORD *)(v0 + 40) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "%s: task %lu succeeded", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }
  else
  {
    swift_release();
  }

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(unint64_t, char *, uint64_t);
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  id v6;
  uint64_t v7;
  id v8;

  v1 = *(void **)(v0 + 128);
  v2 = *(void (**)(unint64_t, char *, uint64_t))(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(Swift::String **)(v0 + 64);
  swift_retain();
  v6 = v1;
  specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/InterruptibleTaskManager.swift", 45, 2, (uint64_t)"perform(_:)", 11, 2, v3, v5, v4, v1);

  swift_release();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
  (*(void (**)(void (*)(unint64_t, char *, uint64_t), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
  v8 = v1;
  specialized ManagedContinuation.updateState(continuation:result:)(v2, v1, 0, 1u);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized closure #2 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (one-time initialization token for executor != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  swift_retain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "%s: task cancelled", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);

  }
  else
  {

    swift_release();
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InterruptibleTaskResult<()>);
  return MEMORY[0x1B5E436B4](a2, v11, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (one-time initialization token for executor != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  swift_retain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "%s: task cancelled", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);

  }
  else
  {

    swift_release();
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InterruptibleTaskResult<RemoteConversation?>);
  return MEMORY[0x1B5E436B4](a2, v11, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
}

uint64_t specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v8;
  *v8 = v5;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v10(a1, a5);
}

{
  uint64_t v5;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  *(_QWORD *)(v5 + 32) = a1;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 40) = v7;
  *v7 = v5;
  v7[1] = specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
  return v9(v5 + 16, a5);
}

uint64_t specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v7;
  *v7 = v4;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v9(a1, a4);
}

{
  uint64_t v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  *(_QWORD *)(v4 + 32) = a1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 40) = v6;
  *v6 = v4;
  v6[1] = specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
  return v8(v4 + 16, a4);
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  Swift::Int result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  Swift::Int v22;
  char *v23;
  unint64_t v24;
  Swift::Int v25;
  Swift::Int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  Swift::Int v62;
  uint64_t v63;
  uint64_t v64;
  Swift::Int v65;
  Swift::Int v66;
  uint64_t v67;
  uint64_t v68;
  Swift::Int v69;
  unint64_t v70;
  uint64_t v71;
  Swift::Int v72;
  char *v73;
  uint64_t v74;
  Swift::Int v75;
  Swift::Int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t, uint64_t);
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  Swift::Int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  char v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  Swift::Int v160;
  uint64_t v161;
  uint64_t v162;
  Swift::Int v163;
  Swift::Int v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  uint64_t v170;
  char *v171;
  void (*v172)(char *, uint64_t, uint64_t);
  uint64_t v173;
  uint64_t v174;
  char *v175;
  Swift::Int v176;
  uint64_t v177;
  uint64_t v178;
  Swift::Int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;

  v2 = v1;
  v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  v4 = *(_QWORD *)(v177 - 8);
  v5 = MEMORY[0x1E0C80A78](v177);
  v166 = (uint64_t)&v158 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v178 = (uint64_t)&v158 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v175 = (char *)&v158 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v184 = (char *)&v158 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v174 = (uint64_t)&v158 - v14;
  MEMORY[0x1E0C80A78](v13);
  v185 = (uint64_t)&v158 - v15;
  v16 = a1[1];
  result = _minimumMergeRunLength(_:)(v16);
  if (result >= v16)
  {
    if (v16 < 0)
      goto LABEL_142;
    if (v16)
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v16, 1, a1);
    return result;
  }
  if (v16 >= 0)
    v18 = v16;
  else
    v18 = v16 + 1;
  if (v16 < -1)
    goto LABEL_150;
  v160 = result;
  if (v16 < 2)
  {
    v169 = MEMORY[0x1E0DEE9D8]
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v159 = MEMORY[0x1E0DEE9D8];
    if (v16 != 1)
    {
      v24 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v23 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_108:
      if (v24 >= 2)
      {
        v151 = *a1;
        do
        {
          v152 = v24 - 2;
          if (v24 < 2)
            goto LABEL_137;
          if (!v151)
            goto LABEL_149;
          v153 = v23;
          v154 = *(_QWORD *)&v23[16 * v152 + 32];
          v155 = *(_QWORD *)&v23[16 * v24 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v151 + *(_QWORD *)(v4 + 72) * v154, v151 + *(_QWORD *)(v4 + 72) * *(_QWORD *)&v23[16 * v24 + 16], v151 + *(_QWORD *)(v4 + 72) * v155, v169);
          if (v2)
            break;
          if (v155 < v154)
            goto LABEL_138;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v153 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v153);
          if (v152 >= *((_QWORD *)v153 + 2))
            goto LABEL_139;
          v156 = &v153[16 * v152 + 32];
          *(_QWORD *)v156 = v154;
          *((_QWORD *)v156 + 1) = v155;
          v157 = *((_QWORD *)v153 + 2);
          if (v24 > v157)
            goto LABEL_140;
          memmove(&v153[16 * v24 + 16], &v153[16 * v24 + 32], 16 * (v157 - v24));
          v23 = v153;
          *((_QWORD *)v153 + 2) = v157 - 1;
          v24 = v157 - 1;
        }
        while (v157 > 2);
      }
LABEL_119:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v159 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v19 = v18 >> 1;
    v20 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v20 + 16) = v19;
    v21 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v159 = v20;
    v169 = v20 + v21;
  }
  v22 = 0;
  v23 = (char *)MEMORY[0x1E0DEE9D8];
  v168 = a1;
  v170 = v4;
  while (1)
  {
    v25 = v22;
    v26 = v22 + 1;
    v165 = v23;
    v167 = v25;
    if (v26 >= v16)
    {
      v43 = v26;
    }
    else
    {
      v161 = v2;
      v27 = *a1;
      v28 = *(_QWORD *)(v4 + 72);
      v182 = v28;
      v162 = v27;
      v176 = v26;
      v29 = v185;
      outlined init with copy of ReferenceResolutionClientProtocol?(v27 + v28 * v26, v185, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      v30 = v174;
      outlined init with copy of ReferenceResolutionClientProtocol?(v27 + v28 * v25, v174, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      v31 = v177;
      v32 = *(int *)(v177 + 48);
      v33 = v184;
      v34 = (uint64_t *)&v184[v32];
      v181 = v29 + v32;
      v35 = type metadata accessor for UUID();
      v183 = *(_QWORD *)(v35 - 8);
      v36 = *(void (**)(char *, uint64_t, uint64_t))(v183 + 16);
      v36(v33, v29, v35);
      outlined init with copy of ConversationHelperInput(v181, (uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      v181 = *v34;
      outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v34);
      v37 = *(int *)(v31 + 48);
      v38 = v175;
      v39 = (uint64_t *)&v175[v37];
      v180 = v30 + v37;
      v172 = v36;
      v36(v175, v30, v35);
      outlined init with copy of ConversationHelperInput(v180, (uint64_t)v39, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      v180 = *v39;
      outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v39);
      v40 = *(void (**)(char *, uint64_t))(v183 + 8);
      v25 = v167;
      v40(v38, v35);
      v173 = v35;
      v41 = v35;
      v42 = v162;
      v171 = (char *)v40;
      v40(v33, v41);
      outlined destroy of ReferenceResolutionClientProtocol?(v30, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      outlined destroy of ReferenceResolutionClientProtocol?(v185, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
      v43 = v25 + 2;
      v179 = v16;
      if (v25 + 2 >= v16)
      {
        v4 = v170;
      }
      else
      {
        v164 = v182 * v176;
        v163 = v182 * v43;
        while (1)
        {
          v176 = v43;
          LODWORD(v183) = v180 < v181;
          v44 = v185;
          outlined init with copy of ReferenceResolutionClientProtocol?(v42 + v163, v185, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          v45 = v174;
          outlined init with copy of ReferenceResolutionClientProtocol?(v42 + v164, v174, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          v46 = v177;
          v47 = *(int *)(v177 + 48);
          v48 = v184;
          v49 = &v184[v47];
          v50 = v44 + v47;
          v52 = v172;
          v51 = v173;
          v172(v184, v44, v173);
          outlined init with copy of ConversationHelperInput(v50, (uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
          v53 = *(_QWORD *)v49;
          outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v49);
          v54 = *(int *)(v46 + 48);
          v55 = v175;
          v56 = &v175[v54];
          v57 = v45 + v54;
          v52(v175, v45, v51);
          outlined init with copy of ConversationHelperInput(v57, (uint64_t)v56, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
          v58 = *(_QWORD *)v56;
          outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v56);
          v59 = v55;
          v60 = (void (*)(char *, uint64_t))v171;
          ((void (*)(char *, uint64_t))v171)(v59, v51);
          v60(v48, v51);
          outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          outlined destroy of ReferenceResolutionClientProtocol?(v185, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          if ((_DWORD)v183 == v58 >= v53)
            break;
          v43 = v176 + 1;
          v42 += v182;
          if (v179 == v176 + 1)
          {
            v16 = v179;
            v43 = v179;
            v4 = v170;
            v25 = v167;
            a1 = v168;
            goto LABEL_25;
          }
        }
        v4 = v170;
        v25 = v167;
        a1 = v168;
        v43 = v176;
      }
      v16 = v179;
LABEL_25:
      v2 = v161;
      if (v180 < v181)
      {
        v61 = v182;
        if (v43 < v25)
          goto LABEL_143;
        if (v25 < v43)
        {
          v62 = v25;
          v63 = 0;
          v64 = v182 * (v43 - 1);
          v65 = v43 * v182;
          v66 = v62;
          v67 = v62 * v182;
          do
          {
            if (v66 != v43 + v63 - 1)
            {
              v68 = v162;
              if (!v162)
                goto LABEL_148;
              v69 = v43;
              v70 = v162 + v67;
              v71 = v162 + v64;
              outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v162 + v67, v166, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
              if (v67 < v64 || v70 >= v68 + v65)
              {
                swift_arrayInitWithTakeFrontToBack();
                v61 = v182;
              }
              else
              {
                v61 = v182;
                if (v67 != v64)
                  swift_arrayInitWithTakeBackToFront();
              }
              outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v166, v71, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
              v43 = v69;
            }
            ++v66;
            --v63;
            v64 -= v61;
            v65 -= v61;
            v67 += v61;
          }
          while (v66 < v43 + v63);
          v2 = v161;
          v25 = v167;
          a1 = v168;
          v16 = v179;
        }
        v4 = v170;
      }
    }
    if (v43 < v16)
    {
      if (__OFSUB__(v43, v25))
        goto LABEL_141;
      if (v43 - v25 < v160)
        break;
    }
LABEL_58:
    if (v43 < v25)
      goto LABEL_136;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v176 = v43;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      v23 = v165;
    else
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v165 + 2) + 1, 1, v165);
    v100 = *((_QWORD *)v23 + 2);
    v99 = *((_QWORD *)v23 + 3);
    v24 = v100 + 1;
    if (v100 >= v99 >> 1)
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v99 > 1), v100 + 1, 1, v23);
    *((_QWORD *)v23 + 2) = v24;
    v101 = v23 + 32;
    v102 = &v23[16 * v100 + 32];
    v103 = v176;
    *(_QWORD *)v102 = v167;
    *((_QWORD *)v102 + 1) = v103;
    if (v100)
    {
      while (1)
      {
        v104 = v24 - 1;
        if (v24 >= 4)
        {
          v109 = &v101[16 * v24];
          v110 = *((_QWORD *)v109 - 8);
          v111 = *((_QWORD *)v109 - 7);
          v115 = __OFSUB__(v111, v110);
          v112 = v111 - v110;
          if (v115)
            goto LABEL_125;
          v114 = *((_QWORD *)v109 - 6);
          v113 = *((_QWORD *)v109 - 5);
          v115 = __OFSUB__(v113, v114);
          v107 = v113 - v114;
          v108 = v115;
          if (v115)
            goto LABEL_126;
          v116 = v24 - 2;
          v117 = &v101[16 * v24 - 32];
          v119 = *(_QWORD *)v117;
          v118 = *((_QWORD *)v117 + 1);
          v115 = __OFSUB__(v118, v119);
          v120 = v118 - v119;
          if (v115)
            goto LABEL_128;
          v115 = __OFADD__(v107, v120);
          v121 = v107 + v120;
          if (v115)
            goto LABEL_131;
          if (v121 >= v112)
          {
            v139 = &v101[16 * v104];
            v141 = *(_QWORD *)v139;
            v140 = *((_QWORD *)v139 + 1);
            v115 = __OFSUB__(v140, v141);
            v142 = v140 - v141;
            if (v115)
              goto LABEL_135;
            v132 = v107 < v142;
            goto LABEL_95;
          }
        }
        else
        {
          if (v24 != 3)
          {
            v133 = *((_QWORD *)v23 + 4);
            v134 = *((_QWORD *)v23 + 5);
            v115 = __OFSUB__(v134, v133);
            v126 = v134 - v133;
            v127 = v115;
            goto LABEL_89;
          }
          v106 = *((_QWORD *)v23 + 4);
          v105 = *((_QWORD *)v23 + 5);
          v115 = __OFSUB__(v105, v106);
          v107 = v105 - v106;
          v108 = v115;
        }
        if ((v108 & 1) != 0)
          goto LABEL_127;
        v116 = v24 - 2;
        v122 = &v101[16 * v24 - 32];
        v124 = *(_QWORD *)v122;
        v123 = *((_QWORD *)v122 + 1);
        v125 = __OFSUB__(v123, v124);
        v126 = v123 - v124;
        v127 = v125;
        if (v125)
          goto LABEL_130;
        v128 = &v101[16 * v104];
        v130 = *(_QWORD *)v128;
        v129 = *((_QWORD *)v128 + 1);
        v115 = __OFSUB__(v129, v130);
        v131 = v129 - v130;
        if (v115)
          goto LABEL_133;
        if (__OFADD__(v126, v131))
          goto LABEL_134;
        if (v126 + v131 >= v107)
        {
          v132 = v107 < v131;
LABEL_95:
          if (v132)
            v104 = v116;
          goto LABEL_97;
        }
LABEL_89:
        if ((v127 & 1) != 0)
          goto LABEL_129;
        v135 = &v101[16 * v104];
        v137 = *(_QWORD *)v135;
        v136 = *((_QWORD *)v135 + 1);
        v115 = __OFSUB__(v136, v137);
        v138 = v136 - v137;
        if (v115)
          goto LABEL_132;
        if (v138 < v126)
          goto LABEL_14;
LABEL_97:
        v143 = v104 - 1;
        if (v104 - 1 >= v24)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        v144 = *a1;
        if (!*a1)
          goto LABEL_147;
        v145 = v23;
        v146 = &v101[16 * v143];
        v147 = *(_QWORD *)v146;
        v148 = &v101[16 * v104];
        v149 = *((_QWORD *)v148 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v144 + *(_QWORD *)(v170 + 72) * *(_QWORD *)v146, v144 + *(_QWORD *)(v170 + 72) * *(_QWORD *)v148, v144 + *(_QWORD *)(v170 + 72) * v149, v169);
        if (v2)
          goto LABEL_119;
        if (v149 < v147)
          goto LABEL_122;
        if (v104 > *((_QWORD *)v145 + 2))
          goto LABEL_123;
        *(_QWORD *)v146 = v147;
        *(_QWORD *)&v101[16 * v143 + 8] = v149;
        v150 = *((_QWORD *)v145 + 2);
        if (v104 >= v150)
          goto LABEL_124;
        v24 = v150 - 1;
        memmove(&v101[16 * v104], v148 + 16, 16 * (v150 - 1 - v104));
        v23 = v145;
        *((_QWORD *)v145 + 2) = v150 - 1;
        a1 = v168;
        if (v150 <= 2)
          goto LABEL_14;
      }
    }
    v24 = 1;
LABEL_14:
    v16 = a1[1];
    v22 = v176;
    v4 = v170;
    if (v176 >= v16)
      goto LABEL_108;
  }
  if (__OFADD__(v25, v160))
    goto LABEL_144;
  if (v25 + v160 >= v16)
    v72 = v16;
  else
    v72 = v25 + v160;
  if (v72 >= v25)
  {
    if (v43 != v72)
    {
      v161 = v2;
      v73 = *(char **)(v4 + 72);
      v74 = (_QWORD)v73 * (v43 - 1);
      v171 = v73;
      v75 = v43 * (_QWORD)v73;
      v164 = v72;
      do
      {
        v77 = 0;
        v78 = v167;
        v176 = v43;
        v172 = (void (*)(char *, uint64_t, uint64_t))v75;
        v173 = v74;
        while (1)
        {
          v181 = v78;
          v79 = *a1;
          v180 = v75 + v77;
          v80 = a1;
          v81 = v185;
          outlined init with copy of ReferenceResolutionClientProtocol?(v75 + v77 + v79, v185, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          v179 = v74 + v77;
          v82 = v74 + v77 + v79;
          v83 = v174;
          outlined init with copy of ReferenceResolutionClientProtocol?(v82, v174, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          v84 = v177;
          v85 = *(int *)(v177 + 48);
          v86 = v184;
          v87 = (uint64_t *)&v184[v85];
          v183 = v81 + v85;
          v88 = type metadata accessor for UUID();
          v182 = *(_QWORD *)(v88 - 8);
          v89 = *(void (**)(char *, uint64_t, uint64_t))(v182 + 16);
          v89(v86, v81, v88);
          outlined init with copy of ConversationHelperInput(v183, (uint64_t)v87, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
          v183 = *v87;
          outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v87);
          v90 = *(int *)(v84 + 48);
          v91 = v175;
          v92 = (uint64_t *)&v175[v90];
          v93 = v83 + v90;
          v89(v175, v83, v88);
          outlined init with copy of ConversationHelperInput(v93, (uint64_t)v92, (uint64_t (*)(_QWORD))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
          v94 = *v92;
          outlined destroy of ConversationHandlerLocator.ScoredHandler((uint64_t)v92);
          v95 = *(void (**)(char *, uint64_t))(v182 + 8);
          v95(v91, v88);
          v95(v184, v88);
          outlined destroy of ReferenceResolutionClientProtocol?(v83, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          outlined destroy of ReferenceResolutionClientProtocol?(v185, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          if (v94 >= v183)
            break;
          v96 = *v80;
          if (!*v80)
            goto LABEL_146;
          a1 = v80;
          v75 = (Swift::Int)v172;
          v74 = v173;
          v97 = v96 + v173 + v77;
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v172 + v96 + v77, v178, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v178, v97, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
          v77 -= (uint64_t)v171;
          v78 = v181 + 1;
          v76 = v176;
          if (v176 == v181 + 1)
            goto LABEL_51;
        }
        a1 = v80;
        v76 = v176;
        v75 = (Swift::Int)v172;
        v74 = v173;
LABEL_51:
        v43 = v76 + 1;
        v74 += (uint64_t)v171;
        v75 += (Swift::Int)v171;
      }
      while (v43 != v164);
      v43 = v164;
      v2 = v161;
      v25 = v167;
    }
    goto LABEL_58;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized SharedFlowPluginServiceClient.init(connectionProvider:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  a3[10] = &type metadata for SharedFlowPluginServiceXPCConnectionProvider;
  a3[11] = &protocol witness table for SharedFlowPluginServiceXPCConnectionProvider;
  type metadata accessor for SharedFlowPluginServiceClient.LoadedConversationTracker();
  a3[2] = 0;
  a3[3] = 0;
  v6 = swift_allocObject();
  v7 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v6 + 16) = MEMORY[0x1E0DEE9E0];
  a3[4] = v6;
  a3[5] = 0;
  type metadata accessor for InterruptibleTaskManager();
  v8 = (_QWORD *)swift_allocObject();
  v8[4] = v7;
  v8[5] = 0;
  v8[2] = 0xD00000000000001DLL;
  v8[3] = 0x80000001B4EF9A10;
  a3[6] = v8;
  a3[12] = a1;
  a3[13] = a2;
  return a3;
}

uint64_t specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v12;

  *(_QWORD *)(v7 + 16) = a1;
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v12;
  *v12 = v7;
  v12[1] = specialized closure #1 in InterruptibleTaskManager.perform<A>(_:);
  return specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(a4, a5, a6, a7);
}

{
  uint64_t v7;
  _QWORD *v12;

  *(_QWORD *)(v7 + 16) = a1;
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v12;
  *v12 = v7;
  v12[1] = specialized closure #1 in InterruptibleTaskManager.perform<A>(_:);
  return specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(a4, a5, a6, a7);
}

uint64_t specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v7;

  v5 = *(_QWORD *)(*v2 + 16);
  v7 = *v2;
  swift_task_dealloc();
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2;
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_OWORD *)*(_QWORD *)(v0 + 32) = *(_OWORD *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v9;

  v7 = *(_QWORD *)(*v3 + 16);
  v9 = *v3;
  swift_task_dealloc();
  *(_QWORD *)v7 = a1;
  *(_QWORD *)(v7 + 8) = a2;
  *(_BYTE *)(v7 + 16) = a3;
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t partial apply for closure #4 in ConversationHandlerLocator.allHandlers(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #4 in ConversationHandlerLocator.allHandlers(for:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t partial apply for closure #5 in ConversationHandlerLocator.allHandlers(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #5 in ConversationHandlerLocator.allHandlers(for:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_1B4D35C80()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ConversationHandlerLocator.init(onConnectionInterrupted:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #2 in ConversationHandlerLocator.init(onConnectionInterrupted:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B4D35D34()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:)(a1, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler;
  if (!lazy protocol witness table cache variable for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for FlowExtensionConversationHandler, &type metadata for FlowExtensionConversationHandler);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler;
  if (!lazy protocol witness table cache variable for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for FlowExtensionConversationHandler, &type metadata for FlowExtensionConversationHandler);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler);
  }
  return result;
}

uint64_t sub_1B4D35E40()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;

  v1 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v3 = v2 + v1[7];
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_release();

  v6 = (uint64_t *)(v2 + v1[11]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(*v6, v7);
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t type metadata accessor for ConversationHandlerLocator()
{
  return objc_opt_self();
}

uint64_t method lookup function for ConversationHandlerLocator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationHandlerLocator.__allocating_init(pluginCatalogTask:flowExtensionDiscoverer:sharedFlowPluginServiceClient:onConnectionInterrupted:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

_QWORD *initializeBufferWithCopyOfBuffer for ConversationHandlerLocator.ScoredHandler(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, (uint64_t)(a2 + 1));
    v8 = *(int *)(a3 + 24);
    v9 = (char *)v4 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for Input();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return v4;
}

_QWORD *assignWithCopy for ConversationHandlerLocator.ScoredHandler(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Input();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for ConversationHandlerLocator.ScoredHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for ConversationHandlerLocator.ScoredHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_1B4D36194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Input();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_1B4D36210(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Input();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for ConversationHandlerLocator.ScoredHandler()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError;
  if (!lazy protocol witness table cache variable for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SharedFlowPluginServiceConnectionError, &type metadata for SharedFlowPluginServiceConnectionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError;
  if (!lazy protocol witness table cache variable for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SharedFlowPluginServiceConnectionError, &type metadata for SharedFlowPluginServiceConnectionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError);
  }
  return result;
}

uint64_t sub_1B4D36348()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  return closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)();
}

uint64_t partial apply for closure #3 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  return closure #3 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)();
}

void *outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(void *result)
{
  if (result)
  {

    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t partial apply for specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = (int *)v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)
                                                                   + async function pointer to specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)))(a1, v4, v5, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v4 = *(int **)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v7 = (_QWORD *)swift_task_alloc();
  v6[2] = v7;
  *v7 = v6;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v9(a1, v5);
}

uint64_t partial apply for specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)
                                                                                                + async function pointer to specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)))(a1, v4, v5, v6, v7, v9, v8);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)
                                                                                                + async function pointer to specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)))(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for specialized closure #2 in InterruptibleTaskManager.perform<A>(_:)()
{
  uint64_t v0;

  return specialized closure #2 in InterruptibleTaskManager.perform<A>(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #2 in InterruptibleTaskManager.perform<A>(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[8] = a3;
  v4[9] = a4;
  v4[6] = a1;
  v4[7] = a2;
  v5 = type metadata accessor for CancellationError();
  v4[10] = v5;
  v4[11] = *(_QWORD *)(v5 - 8);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[14] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  _QWORD *v4;
  uint64_t v5;

  v4[8] = a3;
  v4[9] = a4;
  v4[6] = a1;
  v4[7] = a2;
  v5 = type metadata accessor for CancellationError();
  v4[10] = v5;
  v4[11] = *(_QWORD *)(v5 - 8);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[14] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v2 = v0[8];
  v1 = v0[9];
  v3 = v0[6];
  v4 = v0[7];
  v5 = (_QWORD *)swift_allocObject();
  v0[15] = v5;
  v5[2] = v3;
  v5[3] = v4;
  v5[4] = v2;
  v5[5] = v1;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized withCancellableContinuation<A>(body:)
                                                         + async function pointer to specialized withCancellableContinuation<A>(body:));
  swift_retain();
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  v0[16] = v6;
  *v6 = v0;
  v6[1] = specialized closure #1 in InterruptibleTaskManager.perform<A>(_:);
  return v8((uint64_t)v8, (uint64_t)partial apply for specialized closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v5);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 136);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 40) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 136);
  if ((v3 & 1) != 0)
  {
    v6 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 88);

    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v9(v6, v5, v7);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF05E0], MEMORY[0x1E0DF05E8]);
    v4 = (void *)swift_allocError();
    v9(v10, v6, v7);
    v11 = 2;
  }
  else
  {
    v11 = 1;
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void *, uint64_t))(v0 + 8))(v4, v11);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v2 = v0[8];
  v1 = v0[9];
  v3 = v0[6];
  v4 = v0[7];
  v5 = (_QWORD *)swift_allocObject();
  v0[15] = v5;
  v5[2] = v3;
  v5[3] = v4;
  v5[4] = v2;
  v5[5] = v1;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized withCancellableContinuation<A>(body:)
                                                + async function pointer to specialized withCancellableContinuation<A>(body:));
  swift_retain();
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  v0[16] = v6;
  *v6 = v0;
  v6[1] = specialized closure #1 in InterruptibleTaskManager.perform<A>(_:);
  return v8((uint64_t)partial apply for specialized closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v0 + 8))(v2, v1, 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 136);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 40) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 136);
  if ((v3 & 1) != 0)
  {
    v6 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 88);

    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v9(v6, v5, v7);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF05E0], MEMORY[0x1E0DF05E8]);
    v4 = (void *)swift_allocError();
    v9(v10, v6, v7);
    v11 = 2;
  }
  else
  {
    v11 = 1;
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void *, _QWORD, uint64_t))(v0 + 8))(v4, 0, v11);
}

uint64_t specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 136) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    swift_release();
    *(_QWORD *)(v6 + 144) = a2;
    *(_QWORD *)(v6 + 152) = a1;
  }
  return swift_task_switch();
}

uint64_t partial apply for specialized closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1)
{
  uint64_t *v1;

  return specialized closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)&unk_1E68465D0, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:));
}

{
  uint64_t *v1;

  return specialized closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)&unk_1E6846738, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:));
}

void partial apply for specialized closure #1 in withCancellableContinuation<A>(body:)()
{
  specialized closure #1 in withCancellableContinuation<A>(body:)();
}

{
  uint64_t v0;

  specialized closure #1 in withCancellableContinuation<A>(body:)(v0, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?, &demangling cache variable for type metadata for CheckedContinuation<(), Error>, (void (*)(char *, void *, uint64_t))specialized ManagedContinuation.updateState(continuation:result:));
}

{
  uint64_t v0;

  specialized closure #1 in withCancellableContinuation<A>(body:)(v0, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>, (void (*)(char *, void *, uint64_t))specialized ManagedContinuation.updateState(continuation:result:));
}

uint64_t partial apply for specialized closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in withCancellableContinuation<A>(body:)
                                                                     + async function pointer to specialized closure #2 in withCancellableContinuation<A>(body:)))(a1, v4, v5, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch();
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in withCancellableContinuation<A>(body:)
                                                                     + async function pointer to specialized closure #2 in withCancellableContinuation<A>(body:)))(a1, v4, v5, v6);
}

void partial apply for specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1)
{
  uint64_t v1;

  specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

{
  uint64_t v1;

  specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), &demangling cache variable for type metadata for CheckedContinuation<(), Error>?, &demangling cache variable for type metadata for CheckedContinuation<(), Error>, (void (*)(char *, void *, uint64_t))specialized ManagedContinuation.updateState(continuation:result:));
}

{
  uint64_t v1;

  specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>, (void (*)(char *, void *, uint64_t))specialized ManagedContinuation.updateState(continuation:result:));
}

uint64_t partial apply for specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t objectdestroy_27Tm()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_33Tm()
{
  uint64_t v0;

  swift_release();

  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_40Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_44Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_49Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_58Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

id ConversationHelperInput.speechData.getter()
{
  id *v0;

  return *v0;
}

uint64_t ConversationHelperInput.turnData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ConversationHelperInput(0);
  return outlined init with copy of ConversationHelperInput(v1 + *(int *)(v3 + 20), a1, type metadata accessor for RemoteConversationTurnData);
}

uint64_t ConversationHelperInput.bridge.getter()
{
  type metadata accessor for ConversationHelperInput(0);
  return swift_unknownObjectRetain();
}

uint64_t ConversationHelperInput.init(speechData:turnData:bridge:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;

  *a5 = a1;
  v9 = type metadata accessor for ConversationHelperInput(0);
  result = outlined init with take of StringKeyedValue(a2, (uint64_t)a5 + *(int *)(v9 + 20), type metadata accessor for RemoteConversationTurnData);
  v11 = (_QWORD *)((char *)a5 + *(int *)(v9 + 24));
  *v11 = a3;
  v11[1] = a4;
  return result;
}

uint64_t ConversationHelper.__allocating_init(conversationHandlerLocator:preFlowBlockingWork:)(uint64_t a1, __int128 *a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  outlined init with take of ReferenceResolutionClientProtocol(a2, v4 + 24);
  return v4;
}

uint64_t ConversationHelper.init(conversationHandlerLocator:preFlowBlockingWork:)(uint64_t a1, __int128 *a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  outlined init with take of ReferenceResolutionClientProtocol(a2, v2 + 24);
  return v2;
}

uint64_t ConversationHelper.deinit()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return v0;
}

uint64_t ConversationHelper.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocClassInstance();
}

uint64_t RemoteConversationOrReformedInput.remoteConversationOrNil.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v6;

  v1 = type metadata accessor for RemoteConversationOrReformedInput(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ConversationHelperInput(v0, (uint64_t)v3, v4);
  if (swift_getEnumCaseMultiPayload() != 1)
    return *(_QWORD *)v3;
  outlined destroy of CamOutput((uint64_t)v3, type metadata accessor for RemoteConversationOrReformedInput);
  return 0;
}

void **initializeBufferWithCopyOfBuffer for ConversationHelperInput(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v28;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  char *__dst;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (void **)((char *)a1 + v6);
    v8 = (char *)a2 + v6;
    v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    *v7 = *(void **)((char *)a2 + v6);
    v7[1] = v9;
    v10 = *(uint64_t *)((char *)a2 + v6 + 24);
    v7[2] = *(void **)((char *)a2 + v6 + 16);
    v7[3] = v10;
    v11 = *(void **)((char *)a2 + v6 + 32);
    v7[4] = v11;
    v12 = (int *)type metadata accessor for RemoteConversationTurnData(0);
    v13 = v12[7];
    __dst = (char *)v7 + v13;
    v14 = &v8[v13];
    v15 = type metadata accessor for UUID();
    v28 = *(_QWORD *)(v15 - 8);
    v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    v16 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = v11;
    if (v31(v14, 1, v15))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dst, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v15);
    }
    *(_QWORD *)((char *)v7 + v12[8]) = *(_QWORD *)&v8[v12[8]];
    *((_BYTE *)v7 + v12[9]) = v8[v12[9]];
    v19 = v12[10];
    v20 = *(void **)&v8[v19];
    *(_QWORD *)((char *)v7 + v19) = v20;
    v21 = v12[11];
    v22 = (char *)v7 + v21;
    v23 = (uint64_t *)&v8[v21];
    v24 = v23[1];
    swift_retain();
    v25 = v20;
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
    }
    else
    {
      v26 = *v23;
      outlined copy of Data._Representation(*v23, v24);
      *(_QWORD *)v22 = v26;
      *((_QWORD *)v22 + 1) = v24;
    }
    *(_OWORD *)((char *)v5 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
    swift_unknownObjectRetain();
  }
  return v5;
}

void **initializeWithCopy for ConversationHelperInput(void **a1, void **a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  char *__dst;

  v3 = *a2;
  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (void **)((char *)a1 + v4);
  v6 = (char *)a2 + v4;
  v7 = *(uint64_t *)((char *)a2 + v4 + 8);
  *v5 = *(void **)((char *)a2 + v4);
  v5[1] = v7;
  v8 = *(uint64_t *)((char *)a2 + v4 + 24);
  v5[2] = *(void **)((char *)a2 + v4 + 16);
  v5[3] = v8;
  v9 = *(void **)((char *)a2 + v4 + 32);
  v5[4] = v9;
  v10 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  v11 = v10[7];
  __dst = (char *)v5 + v11;
  v12 = &v6[v11];
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v15 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = v9;
  if (v30(v12, 1, v13))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  *(_QWORD *)((char *)v5 + v10[8]) = *(_QWORD *)&v6[v10[8]];
  *((_BYTE *)v5 + v10[9]) = v6[v10[9]];
  v18 = v10[10];
  v19 = *(void **)&v6[v18];
  *(_QWORD *)((char *)v5 + v18) = v19;
  v20 = v10[11];
  v21 = (char *)v5 + v20;
  v22 = (uint64_t *)&v6[v20];
  v23 = v22[1];
  swift_retain();
  v24 = v19;
  if (v23 >> 60 == 15)
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
  }
  else
  {
    v25 = *v22;
    outlined copy of Data._Representation(*v22, v23);
    *(_QWORD *)v21 = v25;
    *((_QWORD *)v21 + 1) = v23;
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_unknownObjectRetain();
  return a1;
}

void **assignWithCopy for ConversationHelperInput(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  id v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v42;
  void **v43;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v42 = a3;
  v43 = a2;
  v9 = *(int *)(a3 + 20);
  v10 = (void **)((char *)a1 + v9);
  v11 = (void **)((char *)a2 + v9);
  *v10 = *(void **)((char *)a2 + v9);
  v10[1] = *(void **)((char *)a2 + v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[2] = v11[2];
  v10[3] = v11[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = (void *)v11[4];
  v13 = (void *)v10[4];
  v10[4] = v12;
  v14 = v12;

  v15 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  v16 = v15[7];
  v17 = (char *)v10 + v16;
  v18 = (char *)v11 + v16;
  v19 = type metadata accessor for UUID();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
LABEL_7:
  *(_QWORD *)((char *)v10 + v15[8]) = *(_QWORD *)((char *)v11 + v15[8]);
  swift_retain();
  swift_release();
  *((_BYTE *)v10 + v15[9]) = *((_BYTE *)v11 + v15[9]);
  v25 = v15[10];
  v26 = *(void **)((char *)v10 + v25);
  v27 = *(void **)((char *)v11 + v25);
  *(_QWORD *)((char *)v10 + v25) = v27;
  v28 = v27;

  v29 = v15[11];
  v30 = (_QWORD *)((char *)v10 + v29);
  v31 = (_QWORD *)((char *)v11 + v29);
  v32 = *(_QWORD *)((char *)v11 + v29 + 8);
  if (*(_QWORD *)((char *)v10 + v29 + 8) >> 60 != 15)
  {
    if (v32 >> 60 != 15)
    {
      v34 = *v31;
      outlined copy of Data._Representation(*v31, v32);
      v35 = *v30;
      v36 = v30[1];
      *v30 = v34;
      v30[1] = v32;
      outlined consume of Data._Representation(v35, v36);
      goto LABEL_14;
    }
    outlined destroy of Data((uint64_t)v30);
    goto LABEL_12;
  }
  if (v32 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)v30 = *(_OWORD *)v31;
    goto LABEL_14;
  }
  v33 = *v31;
  outlined copy of Data._Representation(*v31, v32);
  *v30 = v33;
  v30[1] = v32;
LABEL_14:
  v37 = *(int *)(v42 + 24);
  v38 = (void **)((char *)a1 + v37);
  v39 = (void **)((char *)v43 + v37);
  v40 = v39[1];
  *v38 = *v39;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v38[1] = v40;
  return a1;
}

_QWORD *initializeWithTake for ConversationHelperInput(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = *(_OWORD *)((char *)a2 + v6 + 16);
  *(_OWORD *)v7 = *(_OWORD *)((char *)a2 + v6);
  *((_OWORD *)v7 + 1) = v9;
  *((_QWORD *)v7 + 4) = *(_QWORD *)((char *)a2 + v6 + 32);
  v10 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  v11 = v10[7];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = type metadata accessor for UUID();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  *(_QWORD *)&v7[v10[8]] = *(_QWORD *)&v8[v10[8]];
  v7[v10[9]] = v8[v10[9]];
  *(_QWORD *)&v7[v10[10]] = *(_QWORD *)&v8[v10[10]];
  *(_OWORD *)&v7[v10[11]] = *(_OWORD *)&v8[v10[11]];
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void **assignWithTake for ConversationHelperInput(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  void **v37;

  v6 = *a1;
  *a1 = *a2;

  v36 = a3;
  v37 = a2;
  v7 = *(int *)(a3 + 20);
  v8 = (void **)((char *)a1 + v7);
  v9 = (void **)((char *)a2 + v7);
  v10 = *(uint64_t *)((char *)a2 + v7 + 8);
  *v8 = *(void **)((char *)a2 + v7);
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  swift_bridgeObjectRelease();
  v12 = (void *)v8[4];
  v8[4] = v9[4];

  v13 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  v14 = v13[7];
  v15 = (char *)v8 + v14;
  v16 = (char *)v9 + v14;
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  *(_QWORD *)((char *)v8 + v13[8]) = *(_QWORD *)((char *)v9 + v13[8]);
  swift_release();
  *((_BYTE *)v8 + v13[9]) = *((_BYTE *)v9 + v13[9]);
  v23 = v13[10];
  v24 = *(void **)((char *)v8 + v23);
  *(_QWORD *)((char *)v8 + v23) = *(_QWORD *)((char *)v9 + v23);

  v25 = v13[11];
  v26 = (_QWORD *)((char *)v8 + v25);
  v27 = (_QWORD *)((char *)v9 + v25);
  v28 = *(_QWORD *)((char *)v8 + v25 + 8);
  if (v28 >> 60 != 15)
  {
    v29 = v27[1];
    if (v29 >> 60 != 15)
    {
      v30 = *v26;
      *v26 = *v27;
      v26[1] = v29;
      outlined consume of Data._Representation(v30, v28);
      goto LABEL_12;
    }
    outlined destroy of Data((uint64_t)v26);
  }
  *(_OWORD *)v26 = *(_OWORD *)v27;
LABEL_12:
  v31 = *(int *)(v36 + 24);
  v32 = (void **)((char *)a1 + v31);
  v33 = (void **)((char *)v37 + v31);
  v34 = v33[1];
  *v32 = *v33;
  swift_unknownObjectRelease();
  v32[1] = v34;
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationHelperInput()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4D37E04(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for RemoteConversationTurnData(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ConversationHelperInput()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1B4D37E8C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for RemoteConversationTurnData(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for ConversationHelperInput()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for RemoteConversationTurnData(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ConversationHelper()
{
  return objc_opt_self();
}

uint64_t method lookup function for ConversationHelper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationHelper.__allocating_init(conversationHandlerLocator:preFlowBlockingWork:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t *initializeBufferWithCopyOfBuffer for RemoteConversationOrReformedInput(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Input();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *assignWithCopy for RemoteConversationOrReformedInput(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for RemoteConversationOrReformedInput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for Input();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for RemoteConversationOrReformedInput(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for RemoteConversationOrReformedInput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Input();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for RemoteConversationOrReformedInput()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void MUXContextMessage.userIdOfPrimaryUser()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[32];
  _BYTE v39[32];

  v1 = MUXContextMessage.userIdToHomeMember.getter();
  v2 = v1;
  v3 = v1 + 64;
  v4 = 1 << *(_BYTE *)(v1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v8 = 0;
  v9 = &selRef_reason;
  v34 = swift_bridgeObjectRetain();
  v31 = v7;
  v32 = v3;
  while (1)
  {
    while (1)
    {
LABEL_5:
      if (v6)
      {
        v10 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        v11 = v10 | (v8 << 6);
      }
      else
      {
        v12 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          goto LABEL_52;
        }
        if (v12 >= v7)
          goto LABEL_48;
        v13 = *(_QWORD *)(v3 + 8 * v12);
        ++v8;
        if (!v13)
        {
          v8 = v12 + 1;
          if (v12 + 1 >= v7)
            goto LABEL_48;
          v13 = *(_QWORD *)(v3 + 8 * v8);
          if (!v13)
          {
            v8 = v12 + 2;
            if (v12 + 2 >= v7)
              goto LABEL_48;
            v13 = *(_QWORD *)(v3 + 8 * v8);
            if (!v13)
            {
              v8 = v12 + 3;
              if (v12 + 3 >= v7)
                goto LABEL_48;
              v13 = *(_QWORD *)(v3 + 8 * v8);
              if (!v13)
              {
                v8 = v12 + 4;
                if (v12 + 4 >= v7)
                  goto LABEL_48;
                v13 = *(_QWORD *)(v3 + 8 * v8);
                if (!v13)
                {
                  v14 = v12 + 5;
                  if (v14 >= v7)
                  {
LABEL_48:
                    swift_release();
                    swift_bridgeObjectRelease();
                    goto LABEL_49;
                  }
                  v13 = *(_QWORD *)(v3 + 8 * v14);
                  if (!v13)
                  {
                    while (1)
                    {
                      v8 = v14 + 1;
                      if (__OFADD__(v14, 1))
                        break;
                      if (v8 >= v7)
                        goto LABEL_48;
                      v13 = *(_QWORD *)(v3 + 8 * v8);
                      ++v14;
                      if (v13)
                        goto LABEL_24;
                    }
LABEL_52:
                    __break(1u);
                    return;
                  }
                  v8 = v14;
                }
              }
            }
          }
        }
LABEL_24:
        v6 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v8 << 6);
      }
      v15 = *(id *)(*(_QWORD *)(v2 + 56) + 8 * v11);
      v16 = objc_msgSend(v15, v9[97]);
      if (v16)
        break;

    }
    v17 = v16;
    v35 = v8;
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
      break;

    swift_bridgeObjectRelease();
    v8 = v35;
  }
  v20 = v18 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of Any(v20, (uint64_t)v39);
    outlined init with copy of Any((uint64_t)v39, (uint64_t)v38);
    v21 = swift_dynamicCast();
    if (v21)
      v22 = v36;
    else
      v22 = 0;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v21)
      v25 = v37 == 0;
    else
      v25 = 1;
    if (v25)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      goto LABEL_29;
    }
    if (v22 == v23 && v37 == v24)
      break;
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    if ((v27 & 1) != 0)
      goto LABEL_46;
LABEL_29:
    v20 += 32;
    if (!--v19)
    {

      swift_bridgeObjectRelease_n();
      v2 = v34;
      v7 = v31;
      v3 = v32;
      v9 = &selRef_reason;
      v8 = v35;
      goto LABEL_5;
    }
  }
  swift_bridgeObjectRelease_n();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
LABEL_46:
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease();
  v28 = objc_msgSend(v15, sel_sharedUserId);

  if (v28)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    UserID.init(sharedUserId:)();
    v29 = type metadata accessor for UserID();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a1, 0, 1, v29);
    return;
  }
LABEL_49:
  v30 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a1, 1, 1, v30);
}

uint64_t static ConversationMUXUtils.userAttribute(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = specialized static ConversationMUXUtils.isOwner(_:)(a1);
  if ((result & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    result = specialized static ConversationMUXUtils.isOwner(_:)(a1);
    if ((result & 1) != 0)
      v5 = 1;
    else
      v5 = 2;
  }
  *a2 = v5;
  return result;
}

uint64_t static ConversationMUXUtils.isOwner(_:)(void *a1)
{
  return specialized static ConversationMUXUtils.isOwner(_:)(a1) & 1;
}

uint64_t static ConversationMUXUtils.isUnknownUser(_:)(void *a1)
{
  return specialized static ConversationMUXUtils.isOwner(_:)(a1) & 1;
}

unint64_t static ConversationMUXUtils.toUserIdentityClassification(from:)@<X0>(unint64_t result@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  BOOL v3;
  unint64_t v4;

  v3 = result < 5 && (a2 & 1) == 0;
  v4 = 0x1030204uLL >> (8 * result);
  if (!v3)
    LOBYTE(v4) = 4;
  *a3 = v4;
  return result;
}

uint64_t static ConversationMUXUtils.isUnknownUser(withUserId:fromMUXContextMessage:)(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  id v5;
  char v6;

  v2 = MUXContextMessage.userIdToHomeMember.getter();
  if (*(_QWORD *)(v2 + 16) && (v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    v5 = *(id *)(*(_QWORD *)(v2 + 56) + 8 * v3);
    swift_bridgeObjectRelease();
    v6 = specialized static ConversationMUXUtils.isOwner(_:)(v5);

  }
  else
  {
    swift_bridgeObjectRelease();
    v6 = 1;
  }
  return v6 & 1;
}

uint64_t static ConversationMUXUtils.getAllUserIds(from:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t i;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for UserID();
  v19 = *(_QWORD *)(v2 - 8);
  v20 = v2;
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v18 - v6;
  v8 = objc_msgSend(a1, sel_homeMembers);
  if (!v8)
    return MEMORY[0x1E0DEE9E8];
  v9 = v8;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAHomeMemberInfo);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  result = MEMORY[0x1E0DEE9E8];
  v21 = MEMORY[0x1E0DEE9E8];
  if (!v10)
    return result;
  if (!(v10 >> 62))
  {
    v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v12)
      goto LABEL_5;
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v12 = result;
  if (!result)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
    return MEMORY[0x1E0DEE9E8];
  }
LABEL_5:
  if (v12 < 1)
  {
    __break(1u);
  }
  else
  {
    for (i = 0; i != v12; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0)
        v14 = (id)MEMORY[0x1B5E43B94](i, v10);
      else
        v14 = *(id *)(v10 + 8 * i + 32);
      v15 = v14;
      v16 = objc_msgSend(v14, sel_sharedUserId);
      if (v16)
      {
        v17 = v16;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        UserID.init(sharedUserId:)();
        specialized Set._Variant.insert(_:)((uint64_t)v7, v5);

        (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v20);
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease_n();
    return v21;
  }
  return result;
}

uint64_t static ConversationMUXUtils.getUserIdToLoggableSharedUserIdDict(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  char v50;
  char v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t result;
  int64_t v58;
  uint64_t v59;
  int64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  unint64_t v67;
  id v68;
  _QWORD *v69;

  v0 = type metadata accessor for UserID();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v58 - v8;
  v10 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v65 = MUXContextMessage.userIdToHomeMember.getter();
  v66 = 0;
  v11 = *(_QWORD *)(v65 + 64);
  v59 = v65 + 64;
  v12 = 1 << *(_BYTE *)(v65 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v60 = (unint64_t)(v12 + 63) >> 6;
  v61 = v9;
  v58 = v60 - 1;
  v63 = v3;
  v64 = v1;
  v62 = v7;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v17 = (v14 - 1) & v14;
      v18 = v16 | (v66 << 6);
LABEL_9:
      v19 = v65;
      (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v7, *(_QWORD *)(v65 + 48) + *(_QWORD *)(v1 + 72) * v18, v0);
      v20 = *(_QWORD *)(v19 + 56);
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
      v22 = *(void **)(v20 + 8 * v18);
      *(_QWORD *)&v7[*(int *)(v21 + 48)] = v22;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v7, 0, 1, v21);
      v23 = v22;
      goto LABEL_28;
    }
    v24 = v66 + 1;
    if (__OFADD__(v66, 1))
      goto LABEL_48;
    if (v24 < v60)
    {
      v25 = *(_QWORD *)(v59 + 8 * v24);
      if (v25)
        goto LABEL_13;
      v26 = v66 + 2;
      ++v66;
      if (v24 + 1 < v60)
      {
        v25 = *(_QWORD *)(v59 + 8 * v26);
        if (v25)
          goto LABEL_16;
        v66 = v24 + 1;
        if (v24 + 2 < v60)
        {
          v25 = *(_QWORD *)(v59 + 8 * (v24 + 2));
          if (v25)
          {
            v24 += 2;
            goto LABEL_13;
          }
          v26 = v24 + 3;
          v66 = v24 + 2;
          if (v24 + 3 < v60)
            break;
        }
      }
    }
LABEL_27:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v7, 1, 1, v27);
    v17 = 0;
LABEL_28:
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v7, (uint64_t)v9, &demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v9, 1, v28) == 1)
    {
      swift_release();
      return (uint64_t)v10;
    }
    v67 = v17;
    v29 = *(void **)&v9[*(int *)(v28 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v9, v0);
    v30 = UserID.sharedUserId.getter();
    v32 = v31;
    v68 = v29;
    v33 = objc_msgSend(v29, sel_loggableMultiUserSharedUserId);
    if (v33)
    {
      v34 = v33;
      v35 = v0;
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v38 = v37;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v69 = v10;
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
      v42 = v10[2];
      v43 = (v40 & 1) == 0;
      v44 = v42 + v43;
      if (__OFADD__(v42, v43))
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      v45 = v40;
      if (v10[3] >= v44)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v10 = v69;
          if ((v40 & 1) == 0)
            goto LABEL_41;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v10 = v69;
          if ((v45 & 1) == 0)
            goto LABEL_41;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, isUniquelyReferenced_nonNull_native);
        v46 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
        if ((v45 & 1) != (v47 & 1))
          goto LABEL_51;
        v41 = v46;
        v10 = v69;
        if ((v45 & 1) == 0)
        {
LABEL_41:
          v10[(v41 >> 6) + 8] |= 1 << v41;
          v52 = (uint64_t *)(v10[6] + 16 * v41);
          *v52 = v30;
          v52[1] = v32;
          v53 = (uint64_t *)(v10[7] + 16 * v41);
          *v53 = v36;
          v53[1] = v38;
          v54 = v10[2];
          v55 = __OFADD__(v54, 1);
          v56 = v54 + 1;
          if (v55)
            goto LABEL_49;
          v10[2] = v56;
          swift_bridgeObjectRetain();
          goto LABEL_5;
        }
      }
      v15 = (uint64_t *)(v10[7] + 16 * v41);
      swift_bridgeObjectRelease();
      *v15 = v36;
      v15[1] = v38;
LABEL_5:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v0 = v35;
      v3 = v63;
      v1 = v64;
      v9 = v61;
      v7 = v62;
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    v48 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
    v50 = v49;
    swift_bridgeObjectRelease();
    if ((v50 & 1) != 0)
    {
      v51 = swift_isUniquelyReferenced_nonNull_native();
      v69 = v10;
      if ((v51 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v10 = v69;
      }
      swift_bridgeObjectRelease();
      specialized _NativeDictionary._delete(at:)(v48, (uint64_t)v10);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
LABEL_6:
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v14 = v67;
  }
  v25 = *(_QWORD *)(v59 + 8 * v26);
  if (v25)
  {
LABEL_16:
    v24 = v26;
LABEL_13:
    v17 = (v25 - 1) & v25;
    v18 = __clz(__rbit64(v25)) + (v24 << 6);
    v66 = v24;
    goto LABEL_9;
  }
  while (1)
  {
    v24 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v24 >= v60)
    {
      v66 = v58;
      goto LABEL_27;
    }
    v25 = *(_QWORD *)(v59 + 8 * v24);
    ++v26;
    if (v25)
      goto LABEL_13;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static ConversationMUXUtils.getUserIdForPrimaryUser(from:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char **v6;
  id v7;
  void *v8;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v21;
  id v22;
  uint64_t v23;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[32];
  _BYTE v33[32];

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_35;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v2)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_3:
  v3 = 0;
  v4 = v1 & 0xC000000000000001;
  v5 = v1 + 32;
  v6 = &selRef_reason;
  v28 = v1;
  v26 = v1 & 0xC000000000000001;
  v27 = v2;
  v25 = v1 + 32;
  while (1)
  {
    if (v4)
      v7 = (id)MEMORY[0x1B5E43B94](v3, v1);
    else
      v7 = *(id *)(v5 + 8 * v3);
    v8 = v7;
    if (__OFADD__(v3++, 1))
    {
      __break(1u);
LABEL_35:
      swift_bridgeObjectRetain();
      v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2)
        goto LABEL_36;
      goto LABEL_3;
    }
    v10 = objc_msgSend(v7, v6[97]);
    if (v10)
      break;

LABEL_5:
    if (v3 == v2)
      goto LABEL_36;
  }
  v11 = v10;
  v29 = v8;
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {

    swift_bridgeObjectRelease();
LABEL_30:
    v6 = &selRef_reason;
    goto LABEL_5;
  }
  v14 = v12 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of Any(v14, (uint64_t)v33);
    outlined init with copy of Any((uint64_t)v33, (uint64_t)v32);
    v15 = swift_dynamicCast();
    if (v15)
      v16 = v30;
    else
      v16 = 0;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v15)
      v19 = v31 == 0;
    else
      v19 = 1;
    if (v19)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      goto LABEL_14;
    }
    if (v16 == v17 && v31 == v18)
      break;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    if ((v21 & 1) != 0)
      goto LABEL_32;
LABEL_14:
    v14 += 32;
    if (!--v13)
    {

      swift_bridgeObjectRelease_n();
      v2 = v27;
      v1 = v28;
      v5 = v25;
      v4 = v26;
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRelease_n();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
LABEL_32:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v29, sel_sharedUserId);

  if (!v22)
    return 0;
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v23;
}

uint64_t static ConversationMUXUtils.getUserIdForUnknownUser(fromHomeMemberInfo:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  specialized static ConversationMUXUtils.getUserIdForUnknownUserAsString(from:)(a1);
  if (v3)
  {
    UserID.init(sharedUserId:)();
    v4 = type metadata accessor for UserID();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a2;
    v7 = 0;
  }
  else
  {
    v4 = type metadata accessor for UserID();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a2;
    v7 = 1;
  }
  return v5(v6, v7, 1, v4);
}

uint64_t static ConversationMUXUtils.getUserIdForUnknownUser(fromHomeMemberInfoDict:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = swift_bridgeObjectRetain();
  v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  specialized static ConversationMUXUtils.getUserIdForUnknownUserAsString(from:)((unint64_t)v3);
  if (v4)
  {
    UserID.init(sharedUserId:)();
    v5 = type metadata accessor for UserID();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 0, 1, v5);
  }
  else
  {
    v6 = type metadata accessor for UserID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 1, 1, v6);
  }
  return swift_release();
}

void *static ConversationMUXUtils.homeMember(withUserId:from:)(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  void *v5;
  id v6;

  v2 = MUXContextMessage.userIdToHomeMember.getter();
  if (*(_QWORD *)(v2 + 16) && (v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    v5 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v3);
    v6 = v5;
  }
  else
  {
    v5 = 0;
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t static ConversationMUXUtils.singleKnownUserInHome(muxContextMessage:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58[32];
  _BYTE v59[40];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v45 - v4;
  result = MUXContextMessage.userIdToHomeMember.getter();
  v53 = 0;
  v7 = 0;
  v8 = *(_QWORD *)(result + 64);
  v48 = result + 64;
  v9 = 1 << *(_BYTE *)(result + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v49 = (unint64_t)(v9 + 63) >> 6;
  v50 = result;
  v45 = v49 - 1;
  v46 = v49 - 5;
  v47 = result + 104;
  v51 = v3;
  v52 = MEMORY[0x1E0DEE9B8] + 8;
  if ((v10 & v8) == 0)
    goto LABEL_7;
LABEL_25:
  v18 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  v15 = v18 | (v7 << 6);
LABEL_26:
  v19 = v50;
  v20 = *(_QWORD *)(v50 + 48);
  v21 = type metadata accessor for UserID();
  (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v3, v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v15, v21);
  v22 = *(_QWORD *)(v19 + 56);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
  v24 = *(void **)(v22 + 8 * v15);
  *(_QWORD *)&v3[*(int *)(v23 + 48)] = v24;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v3, 0, 1, v23);
  v25 = v24;
  while (1)
  {
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v3, (uint64_t)v5, &demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v5, 1, v26) == 1)
    {
      swift_release();
      v43 = v53;
      return v43 & 1;
    }
    v27 = *(void **)&v5[*(int *)(v26 + 48)];
    v28 = objc_msgSend(v27, sel_attributes);
    if (!v28)
    {

      if ((v53 & 1) != 0)
        goto LABEL_54;
LABEL_48:
      v42 = type metadata accessor for UserID();
      result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(v5, v42);
      v53 = 1;
      if (!v11)
        goto LABEL_7;
      goto LABEL_25;
    }
    v29 = v28;
    v54 = v11;
    v55 = v7;
    v30 = v5;
    v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v32 = *(_QWORD *)(v31 + 16);
    if (!v32)
    {

      swift_bridgeObjectRelease();
LABEL_47:
      v5 = v30;
      v3 = v51;
      v11 = v54;
      v7 = v55;
      if ((v53 & 1) == 0)
        goto LABEL_48;
LABEL_54:
      swift_release();
      v44 = type metadata accessor for UserID();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v44 - 8) + 8))(v5, v44);
      v43 = 0;
      return v43 & 1;
    }
    v33 = v31 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of Any(v33, (uint64_t)v59);
      outlined init with copy of Any((uint64_t)v59, (uint64_t)v58);
      v34 = swift_dynamicCast();
      v35 = v57;
      if (v34)
        v36 = v56;
      else
        v36 = 0;
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v34)
        v39 = v35 == 0;
      else
        v39 = 1;
      if (v39)
      {
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
        goto LABEL_32;
      }
      if (v36 == v37 && v35 == v38)
        break;
      v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
      if ((v41 & 1) != 0)
        goto LABEL_6;
LABEL_32:
      v33 += 32;
      if (!--v32)
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_47;
      }
    }
    swift_bridgeObjectRelease_n();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
LABEL_6:
    swift_bridgeObjectRelease_n();

    v12 = type metadata accessor for UserID();
    v5 = v30;
    result = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v30, v12);
    v3 = v51;
    v11 = v54;
    v7 = v55;
    if (v54)
      goto LABEL_25;
LABEL_7:
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
      break;
    if (v13 >= v49)
    {
      v16 = v7;
      goto LABEL_12;
    }
    v14 = *(_QWORD *)(v48 + 8 * v13);
    if (v14)
      goto LABEL_10;
    v16 = v7 + 1;
    if (v7 + 2 < v49)
    {
      v14 = *(_QWORD *)(v48 + 8 * (v7 + 2));
      if (v14)
      {
        v13 = v7 + 2;
        goto LABEL_10;
      }
      v16 = v7 + 2;
      if (v7 + 3 < v49)
      {
        v14 = *(_QWORD *)(v48 + 8 * (v7 + 3));
        if (v14)
        {
          v13 = v7 + 3;
          goto LABEL_10;
        }
        v13 = v7 + 4;
        v16 = v7 + 3;
        if (v7 + 4 < v49)
        {
          v14 = *(_QWORD *)(v48 + 8 * v13);
          if (!v14)
          {
            while (v46 != v7)
            {
              v14 = *(_QWORD *)(v47 + 8 * v7++);
              if (v14)
              {
                v13 = v7 + 4;
                goto LABEL_10;
              }
            }
            v16 = v45;
            goto LABEL_12;
          }
LABEL_10:
          v11 = (v14 - 1) & v14;
          v15 = __clz(__rbit64(v14)) + (v13 << 6);
          v7 = v13;
          goto LABEL_26;
        }
      }
    }
LABEL_12:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v3, 1, 1, v17);
    v11 = 0;
    v7 = v16;
  }
  __break(1u);
  return result;
}

uint64_t static ConversationMUXUtils.isMUXEnabled()()
{
  return AFDeviceSupportsSiriMUX();
}

uint64_t static ConversationMUXUtils.convertToUserIDToSpeechPackageDict(sharedUserIdToSpeechRecognitionDict:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  int64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(unint64_t, uint64_t);
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  id v31;
  int isUniquelyReferenced_nonNull_native;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  char v43;
  int v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  int64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;

  v2 = type metadata accessor for UserID();
  v3 = *(_QWORD **)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v49 - v7;
  v9 = *(_QWORD *)(a1 + 64);
  v50 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v51 = (unint64_t)(v10 + 63) >> 6;
  v52 = a1;
  v13 = v8;
  swift_bridgeObjectRetain();
  v14 = 0;
  v15 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v54 = v6;
  while (1)
  {
    if (v12)
    {
      v55 = (v12 - 1) & v12;
      v18 = __clz(__rbit64(v12)) | (v14 << 6);
      goto LABEL_23;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_42;
    if (v19 >= v51)
    {
LABEL_40:
      swift_release();
      return (uint64_t)v15;
    }
    v20 = *(_QWORD *)(v50 + 8 * v19);
    ++v14;
    if (!v20)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v51)
        goto LABEL_40;
      v20 = *(_QWORD *)(v50 + 8 * v14);
      if (!v20)
      {
        v14 = v19 + 2;
        if (v19 + 2 >= v51)
          goto LABEL_40;
        v20 = *(_QWORD *)(v50 + 8 * v14);
        if (!v20)
          break;
      }
    }
LABEL_22:
    v55 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_23:
    v22 = *(void **)(*(_QWORD *)(v52 + 56) + 8 * v18);
    swift_bridgeObjectRetain();
    v23 = v22;
    UserID.init(sharedUserId:)();
    v24 = objc_allocWithZone(MEMORY[0x1E0CFEA20]);
    v25 = v23;
    v26 = objc_msgSend(v24, sel_init);
    v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CFEA48]), sel_initWithRecognition_rawRecognition_audioAnalytics_isFinal_utteranceStart_, v25, v25, v26, 1, 0.0);

    v28 = (void (*)(char *, char *, uint64_t))v3[2];
    v28(v6, v13, v2);
    if (v27)
    {
      v53 = v14;
      v29 = v13;
      v30 = v2;
      v31 = v27;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v56 = v15;
      v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
      v35 = v15[2];
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      v38 = v33;
      if (v15[3] < v37)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, isUniquelyReferenced_nonNull_native, &demangling cache variable for type metadata for _DictionaryStorage<UserID, AFSpeechPackage>);
        v39 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v54);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_45;
        v34 = v39;
        v15 = v56;
        if ((v38 & 1) == 0)
          goto LABEL_35;
LABEL_4:
        v16 = v15[7];

        *(_QWORD *)(v16 + 8 * v34) = v31;
        v2 = v30;
LABEL_5:
        swift_bridgeObjectRelease();
        v17 = (void (*)(unint64_t, uint64_t))v3[1];
        v13 = v29;
        v14 = v53;
        v6 = v54;
        goto LABEL_6;
      }
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v15 = v56;
        if ((v33 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UserID, AFSpeechPackage>);
        v15 = v56;
        if ((v38 & 1) != 0)
          goto LABEL_4;
      }
LABEL_35:
      v15[(v34 >> 6) + 8] |= 1 << v34;
      v2 = v30;
      v28((char *)(v15[6] + v3[9] * v34), v54, v30);
      *(_QWORD *)(v15[7] + 8 * v34) = v31;
      v45 = v15[2];
      v46 = __OFADD__(v45, 1);
      v47 = v45 + 1;
      if (v46)
        goto LABEL_43;
      v15[2] = v47;
      goto LABEL_5;
    }
    swift_bridgeObjectRetain();
    v41 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    v43 = v42;
    swift_bridgeObjectRelease();
    if ((v43 & 1) != 0)
    {
      v44 = swift_isUniquelyReferenced_nonNull_native();
      v56 = v15;
      if (!v44)
      {
        specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UserID, AFSpeechPackage>);
        v15 = v56;
      }
      v17 = (void (*)(unint64_t, uint64_t))v3[1];
      v17(v15[6] + v3[9] * v41, v2);
      v15 = v56;
      v31 = *(id *)(v56[7] + 8 * v41);
      specialized _NativeDictionary._delete(at:)(v41, (uint64_t)v56);
      swift_bridgeObjectRelease();
      v6 = v54;
    }
    else
    {
      v31 = 0;
      v17 = (void (*)(unint64_t, uint64_t))v3[1];
      v6 = v54;
    }
LABEL_6:
    v12 = v55;
    v17((unint64_t)v6, v2);

    v17((unint64_t)v13, v2);
  }
  v21 = v19 + 3;
  if (v21 >= v51)
    goto LABEL_40;
  v20 = *(_QWORD *)(v50 + 8 * v21);
  if (v20)
  {
    v14 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v14 >= v51)
      goto LABEL_40;
    v20 = *(_QWORD *)(v50 + 8 * v14);
    ++v21;
    if (v20)
      goto LABEL_22;
  }
LABEL_44:
  __break(1u);
LABEL_45:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id static ConversationMUXUtils.voiceIdentificationSignal(withRefId:requestType:isPersonalRequest:isServerFallback:voiceIdClassification:voiceIdOverridden:selectedUserId:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t a6, char a7, int a8, uint64_t a9)
{
  return specialized static ConversationMUXUtils.voiceIdentificationSignal(withRefId:requestType:isPersonalRequest:isServerFallback:voiceIdClassification:voiceIdOverridden:selectedUserId:)(a1, a2, a3, a4, a5, a6, a7 & 1, a8, a9);
}

uint64_t Dictionary<>.toEncodableDictionary()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  void *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(uint64_t, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int isUniquelyReferenced_nonNull_native;
  char v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  void *v68;
  uint64_t result;
  int64_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int64_t v85;
  _QWORD *v86;
  char *v87;
  id v88[3];

  v88[1] = *(id *)MEMORY[0x1E0C80C00];
  v82 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v78 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UserID();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v87 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v70 - v9;
  v83 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v12 = type metadata accessor for Optional();
  v79 = *(_QWORD *)(v12 - 8);
  v80 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v70 - v16;
  v18 = *(_QWORD *)(a1 + 64);
  v71 = a1 + 64;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v72 = (unint64_t)(v19 + 63) >> 6;
  v73 = a1;
  v70 = v72 - 1;
  swift_bridgeObjectRetain();
  v22 = 0;
  v86 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v76 = TupleTypeMetadata2;
  v77 = v10;
  v74 = v17;
  v75 = v15;
  v81 = v6;
  while (1)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v27 = (v21 - 1) & v21;
      v85 = v22;
      v28 = v26 | (v22 << 6);
LABEL_8:
      v29 = v73;
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v15, *(_QWORD *)(v73 + 48) + *(_QWORD *)(v6 + 72) * v28, v5);
      (*(void (**)(char *, unint64_t, uint64_t))(v82 + 16))(&v15[*(int *)(TupleTypeMetadata2 + 48)], *(_QWORD *)(v29 + 56) + *(_QWORD *)(v82 + 72) * v28, v83);
      v30 = 0;
      goto LABEL_15;
    }
    v31 = v22 + 1;
    if (__OFADD__(v22, 1))
      goto LABEL_44;
    if (v31 >= v72)
    {
      v85 = v22;
LABEL_14:
      v27 = 0;
      v30 = 1;
      goto LABEL_15;
    }
    v32 = *(_QWORD *)(v71 + 8 * v31);
    if (v32)
      goto LABEL_12;
    v66 = v22 + 2;
    if (v22 + 2 >= v72)
    {
      v27 = 0;
      v30 = 1;
      v85 = v22 + 1;
    }
    else
    {
      v32 = *(_QWORD *)(v71 + 8 * v66);
      if (v32)
      {
        v31 = v22 + 2;
LABEL_12:
        v27 = (v32 - 1) & v32;
        v28 = __clz(__rbit64(v32)) + (v31 << 6);
        v85 = v31;
        goto LABEL_8;
      }
      v67 = v22 + 3;
      if (v67 >= v72)
      {
        v85 = v66;
        goto LABEL_14;
      }
      v32 = *(_QWORD *)(v71 + 8 * v67);
      if (v32)
      {
        v31 = v67;
        goto LABEL_12;
      }
      while (1)
      {
        v31 = v67 + 1;
        if (__OFADD__(v67, 1))
          goto LABEL_45;
        if (v31 >= v72)
          break;
        v32 = *(_QWORD *)(v71 + 8 * v31);
        ++v67;
        if (v32)
          goto LABEL_12;
      }
      v27 = 0;
      v30 = 1;
      v85 = v70;
    }
LABEL_15:
    v33 = *(_QWORD *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v15, v30, 1, TupleTypeMetadata2);
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v17, v15, v80);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v17, 1, TupleTypeMetadata2) == 1)
    {
      swift_release();
      return (uint64_t)v86;
    }
    v84 = v27;
    v34 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v17, v5);
    v35 = (void *)objc_opt_self();
    v36 = v82;
    v37 = v78;
    v38 = v34;
    v39 = v83;
    (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v78, v38, v83);
    v40 = v5;
    v41 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v39);
    v88[0] = 0;
    v42 = objc_msgSend(v35, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v41, 1, v88);
    swift_unknownObjectRelease();
    v43 = v88[0];
    if (!v42)
    {
      v68 = v43;
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v40);
      swift_release();
      return (uint64_t)v86;
    }
    v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v45 = v10;
    v47 = v46;

    v48 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 16);
    v49 = (uint64_t)v87;
    v50 = v40;
    v48((uint64_t)v87, v45, v40);
    outlined copy of Data._Representation(v44, v47);
    v51 = v86;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v88[0] = v51;
    v54 = specialized __RawDictionaryStorage.find<A>(_:)(v49);
    v55 = v51[2];
    v56 = (v53 & 1) == 0;
    v57 = v55 + v56;
    if (__OFADD__(v55, v56))
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
    }
    v58 = v53;
    if (v51[3] < v57)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
LABEL_23:
    v61 = v88[0];
    v86 = v88[0];
    if ((v58 & 1) != 0)
    {
      v23 = *((_QWORD *)v88[0] + 7) + 16 * v54;
      outlined consume of Data._Representation(*(_QWORD *)v23, *(_QWORD *)(v23 + 8));
      *(_QWORD *)v23 = v44;
      *(_QWORD *)(v23 + 8) = v47;
      v24 = v50;
    }
    else
    {
      *((_QWORD *)v88[0] + (v54 >> 6) + 8) |= 1 << v54;
      v48(v61[6] + *(_QWORD *)(v81 + 72) * v54, v87, v50);
      v62 = (uint64_t *)(v61[7] + 16 * v54);
      *v62 = v44;
      v62[1] = v47;
      v63 = v61[2];
      v64 = __OFADD__(v63, 1);
      v65 = v63 + 1;
      if (v64)
        goto LABEL_43;
      v61[2] = v65;
      v24 = v50;
    }
    swift_bridgeObjectRelease();
    v6 = v81;
    v25 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
    v25((uint64_t)v87, v24);
    outlined consume of Data._Representation(v44, v47);
    v10 = v77;
    v25((uint64_t)v77, v24);
    v15 = v75;
    TupleTypeMetadata2 = v76;
    v17 = v74;
    v5 = v24;
    v21 = v84;
    v22 = v85;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, isUniquelyReferenced_nonNull_native);
  v59 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v87);
  if ((v58 & 1) == (v60 & 1))
  {
    v54 = v59;
    goto LABEL_23;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Dictionary<>.decodeWithValueAs<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  int64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  int64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v4 = v3;
  v7 = type metadata accessor for Optional();
  v67 = *(_QWORD *)(v7 - 8);
  v68 = v7;
  v8 = MEMORY[0x1E0C80A78](v7);
  v66 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v77 = (char *)&v59 - v11;
  v78 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v10);
  v65 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UserID();
  v14 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80];
  v15 = *(_QWORD *)(v13 - 8);
  v16 = MEMORY[0x1E0C80A78](v13);
  v64 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v59 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UserID, value: Data)?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v74 = (char *)&v59 - v24;
  v25 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserID and conformance UserID, v14, MEMORY[0x1E0D9EF90]);
  v79 = v13;
  v26 = a3;
  v63 = v25;
  v27 = Dictionary.init()();
  v28 = *(_QWORD *)(a2 + 64);
  v61 = a2 + 64;
  v80 = v27;
  v29 = 1 << *(_BYTE *)(a2 + 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v31 = v30 & v28;
  v62 = (unint64_t)(v29 + 63) >> 6;
  v60 = v62 - 1;
  v69 = a2;
  result = swift_bridgeObjectRetain();
  v33 = 0;
  v72 = v15;
  v73 = v19;
  v71 = v23;
  while (1)
  {
    if (v31)
    {
      v75 = v33;
      v76 = (v31 - 1) & v31;
      v35 = __clz(__rbit64(v31)) | (v33 << 6);
      v36 = (uint64_t)v74;
LABEL_8:
      v37 = v69;
      (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v23, *(_QWORD *)(v69 + 48) + *(_QWORD *)(v15 + 72) * v35, v79);
      v38 = (uint64_t *)(*(_QWORD *)(v37 + 56) + 16 * v35);
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: Data));
      v40 = (uint64_t *)&v23[*(int *)(v39 + 48)];
      v41 = *v38;
      v42 = v38[1];
      *v40 = v41;
      v40[1] = v42;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v23, 0, 1, v39);
      outlined copy of Data._Representation(v41, v42);
      goto LABEL_21;
    }
    v43 = v33 + 1;
    v36 = (uint64_t)v74;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v43 < v62)
    {
      v44 = *(_QWORD *)(v61 + 8 * v43);
      if (v44)
        goto LABEL_12;
      v33 += 2;
      if (v43 + 1 >= v62)
      {
LABEL_33:
        v75 = v43;
        goto LABEL_20;
      }
      v44 = *(_QWORD *)(v61 + 8 * v33);
      if (v44)
        goto LABEL_15;
      if (v43 + 2 < v62)
        break;
    }
    v75 = v33;
LABEL_20:
    v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: Data));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v23, 1, 1, v45);
    v76 = 0;
LABEL_21:
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v23, v36, (uint64_t *)&demangling cache variable for type metadata for (key: UserID, value: Data)?);
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: Data));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v36, 1, v46) == 1)
    {
      swift_release();
      return v80;
    }
    v47 = (uint64_t *)(v36 + *(int *)(v46 + 48));
    v49 = *v47;
    v48 = v47[1];
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v19, v36, v79);
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSKeyedUnarchiver);
    static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)();
    if (v4)
    {
      outlined consume of Data._Representation(v49, v48);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v79);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
    v50 = swift_dynamicCast();
    v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56);
    if ((v50 & 1) != 0)
    {
      v52 = v77;
      v51(v77, 0, 1, v26);
      v53 = v78;
      v54 = v65;
      (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v65, v52, v26);
      v55 = v79;
      (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v64, v73, v79);
      v56 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
      v70 = 0;
      v57 = v66;
      v56(v66, v54, v26);
      v51(v57, 0, 1, v26);
      type metadata accessor for Dictionary();
      v4 = v70;
      Dictionary.subscript.setter();
      outlined consume of Data._Representation(v49, v48);
      v58 = v54;
      v15 = v72;
      v19 = v73;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v58, v26);
      result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v55);
    }
    else
    {
      v34 = v77;
      v51(v77, 1, 1, v26);
      outlined consume of Data._Representation(v49, v48);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v79);
      result = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v34, v68);
    }
    v23 = v71;
    v33 = v75;
    v31 = v76;
  }
  v44 = *(_QWORD *)(v61 + 8 * (v43 + 2));
  if (v44)
  {
    v43 += 2;
    goto LABEL_12;
  }
  v33 = v43 + 3;
  if (v43 + 3 >= v62)
  {
    v75 = v43 + 2;
    goto LABEL_20;
  }
  v44 = *(_QWORD *)(v61 + 8 * v33);
  if (v44)
  {
LABEL_15:
    v43 = v33;
LABEL_12:
    v75 = v43;
    v76 = (v44 - 1) & v44;
    v35 = __clz(__rbit64(v44)) + (v43 << 6);
    goto LABEL_8;
  }
  while (1)
  {
    v43 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v43 >= v62)
    {
      v43 = v60;
      goto LABEL_33;
    }
    v44 = *(_QWORD *)(v61 + 8 * v43);
    ++v33;
    if (v44)
      goto LABEL_12;
  }
LABEL_37:
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall SAMultiUserInfo.toUserIdToHomeMemberDictionary()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  Swift::Bool v5;
  void *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  NSObject *v18;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  Swift::OpaquePointer_optional result;

  v39 = type metadata accessor for UserID();
  v1 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(v0, sel_homeMembers);
  if (v4)
  {
    v6 = v4;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAHomeMemberInfo);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v7 >> 62)
    {
LABEL_34:
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9)
        goto LABEL_4;
    }
    else
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9)
      {
LABEL_4:
        v41 = v7 & 0xC000000000000001;
        v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
        v11 = 4;
        *(_QWORD *)&v8 = 138412290;
        v37 = v8;
        v38 = v7;
        v40 = v9;
        while (1)
        {
          if (v41)
            v13 = (id)MEMORY[0x1B5E43B94](v11 - 4, v7);
          else
            v13 = *(id *)(v7 + 8 * v11);
          v14 = v13;
          v15 = v11 - 3;
          if (__OFADD__(v11 - 4, 1))
          {
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
          v16 = objc_msgSend(v13, sel_sharedUserId);
          if (!v16)
          {
            if (one-time initialization token for conversationBridge != -1)
              swift_once();
            v27 = type metadata accessor for Logger();
            __swift_project_value_buffer(v27, (uint64_t)static Logger.conversationBridge);
            v28 = v14;
            v18 = Logger.logObject.getter();
            v29 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v18, v29))
            {
              v30 = swift_slowAlloc();
              v31 = (_QWORD *)swift_slowAlloc();
              *(_DWORD *)v30 = v37;
              *(_QWORD *)(v30 + 4) = v28;
              *v31 = v28;
              _os_log_impl(&dword_1B4BE6000, v18, v29, "Ignoring HomeMemberInfo: %@ for lack of sharedUserId", (uint8_t *)v30, 0xCu);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              swift_arrayDestroy();
              v32 = v31;
              v7 = v38;
              MEMORY[0x1B5E44758](v32, -1, -1);
              MEMORY[0x1B5E44758](v30, -1, -1);

            }
            else
            {

              v18 = v28;
            }
            goto LABEL_7;
          }
          v17 = v16;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          UserID.init(sharedUserId:)();
          v18 = v14;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v42 = v10;
          v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v3);
          v22 = v10[2];
          v23 = (v20 & 1) == 0;
          v24 = v22 + v23;
          if (__OFADD__(v22, v23))
            goto LABEL_32;
          v7 = v20;
          if (v10[3] >= v24)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              v10 = v42;
              if ((v20 & 1) == 0)
                goto LABEL_24;
            }
            else
            {
              specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UserID, SAHomeMemberInfo>);
              v10 = v42;
              if ((v7 & 1) == 0)
                goto LABEL_24;
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native, &demangling cache variable for type metadata for _DictionaryStorage<UserID, SAHomeMemberInfo>);
            v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v3);
            if ((v7 & 1) != (v26 & 1))
            {
              v36 = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              goto LABEL_38;
            }
            v21 = v25;
            v10 = v42;
            if ((v7 & 1) == 0)
            {
LABEL_24:
              v10[(v21 >> 6) + 8] |= 1 << v21;
              (*(void (**)(unint64_t, char *, uint64_t))(v1 + 16))(v10[6] + *(_QWORD *)(v1 + 72) * v21, v3, v39);
              *(_QWORD *)(v10[7] + 8 * v21) = v18;
              v33 = v10[2];
              v34 = __OFADD__(v33, 1);
              v35 = v33 + 1;
              if (v34)
                goto LABEL_33;
              v10[2] = v35;
              goto LABEL_6;
            }
          }
          v12 = v10[7];

          *(_QWORD *)(v12 + 8 * v21) = v18;
LABEL_6:
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v39);
          v7 = v38;
LABEL_7:

          ++v11;
          if (v15 == v40)
          {
            swift_bridgeObjectRelease();
            goto LABEL_36;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  else
  {
    v10 = 0;
  }
LABEL_36:
  v36 = v10;
LABEL_38:
  result.value._rawValue = v36;
  result.is_nil = v5;
  return result;
}

Swift::String __swiftcall AFUserIdentityClassfication.toAceUserIdentityClassification()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

id SAConfidenceScores.toVoiceIdScoreCard()()
{
  void *v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSNumber v21;
  NSNumber v22;

  objc_msgSend(v0, sel_processedAudioDurationMilliseconds);
  v22.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v21.super.super.isa = NSNumber.init(integerLiteral:)(-1).super.super.isa;
  v1 = SAConfidenceScores.scoresDict()();
  v2 = objc_msgSend(v0, sel_scoringSchemeVersion);
  v3 = objc_msgSend(v0, sel_thresholdType);
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  v8 = objc_msgSend(v0, sel_assetVersion);
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v13 = objc_msgSend(v0, sel_classifiedUser);
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v18 = SAConfidenceScores.af_userIdentityClassification()();
  v19 = objc_allocWithZone(MEMORY[0x1E0CFEAB8]);
  return @nonobjc AFVoiceIdScoreCard.init(spIdAudioProcessedDuration:spIdUnknownUserScore:spIdKnownUserScores:spIdUserScoresVersion:spIdScoreThresholdingType:spIdAssetVersion:userClassified:userIdentityClassification:)(v22.super.super.isa, v21.super.super.isa, v1, v2, v5, v7, v10, v12, v15, v17, v18);
}

uint64_t SAConfidenceScores.scoresDict()()
{
  void *v0;
  void *v1;
  _QWORD *v2;
  id v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  NSNumber v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v1 = v0;
  v2 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v3 = objc_msgSend(v1, sel_scores);
  if (!v3)
    return (uint64_t)v2;
  v4 = v3;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAUserConfidenceScore);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_4;
    goto LABEL_28;
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
LABEL_4:
  v32 = v5;
  v33 = v5 & 0xC000000000000001;
  v7 = 4;
  v31 = v6;
  while (1)
  {
    if (v33)
      v8 = (id)MEMORY[0x1B5E43B94](v7 - 4, v5);
    else
      v8 = *(id *)(v5 + 8 * v7);
    v9 = v8;
    v10 = v7 - 3;
    if (__OFADD__(v7 - 4, 1))
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v11 = objc_msgSend(v8, sel_sharedUserId);
    if (v11)
      break;

LABEL_6:
    ++v7;
    if (v10 == v6)
      goto LABEL_28;
  }
  v12 = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v14;

  objc_msgSend(v9, sel_confidenceScore);
  v15.super.super.isa = Int._bridgeToObjectiveC()().super.super.isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v5);
  v19 = v2[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
    goto LABEL_25;
  v22 = v17;
  if (v2[3] >= v21)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v17 & 1) != 0)
        goto LABEL_19;
    }
    else
    {
      specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, NSNumber>);
      if ((v22 & 1) != 0)
        goto LABEL_19;
    }
LABEL_21:
    v2[(v18 >> 6) + 8] |= 1 << v18;
    v26 = (uint64_t *)(v2[6] + 16 * v18);
    *v26 = v13;
    v26[1] = v5;
    *(NSNumber *)(v2[7] + 8 * v18) = v15;
    v27 = v2[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_26;
    v2[2] = v29;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native, &demangling cache variable for type metadata for _DictionaryStorage<String, NSNumber>);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v5);
  if ((v22 & 1) == (v24 & 1))
  {
    v18 = v23;
    if ((v22 & 1) == 0)
      goto LABEL_21;
LABEL_19:
    v25 = v2[7];

    *(NSNumber *)(v25 + 8 * v18) = v15;
LABEL_23:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = v31;
    v5 = v32;
    goto LABEL_6;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t SAConfidenceScores.af_userIdentityClassification()()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v11;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v1 = objc_msgSend(v0, sel_userIdentityClassification);
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v3 && v6 == v5)
    {
      v9 = 4;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
      {
        v9 = 4;
LABEL_11:
        swift_bridgeObjectRelease();
        return v9;
      }
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v3 && v11 == v5)
      {
        v9 = 3;
      }
      else
      {
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v13 & 1) != 0)
        {
          v9 = 3;
          goto LABEL_11;
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v3 && v14 == v5)
        {
          v9 = 1;
        }
        else
        {
          v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v15 & 1) != 0)
          {
            v9 = 1;
            goto LABEL_11;
          }
          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v3 && v16 == v5)
          {
            v9 = 2;
          }
          else
          {
            v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v17 & 1) != 0)
            {
              v9 = 2;
              goto LABEL_11;
            }
            if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v3 && v18 == v5)
            {
              v9 = 0;
            }
            else
            {
              _stringCompareWithSmolCheck(_:_:expecting:)();
              v9 = 0;
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  return 0;
}

id AFVoiceIdScoreCard.toSAConfidenceScores()()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t countAndFlagsBits;
  void *v11;
  Class isa;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88000]), sel_init);
  v2 = objc_msgSend(v0, sel_spIdAudioProcessedDuration);
  if (v2)
  {
    v3 = v2;
    v4 = (uint64_t)objc_msgSend(v2, sel_integerValue);

  }
  else
  {
    v4 = -1;
  }
  objc_msgSend(v1, sel_setProcessedAudioDurationMilliseconds_, v4);
  v5 = objc_msgSend(v0, sel_spIdUserScoresVersion);
  objc_msgSend(v1, sel_setScoringSchemeVersion_, v5);

  v6 = AFVoiceIdScoreCard.thresholdType()();
  v7 = (void *)MEMORY[0x1B5E432E8](v6);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setThresholdType_, v7);

  v8 = objc_msgSend(v0, sel_spIdAssetVersion);
  objc_msgSend(v1, sel_setAssetVersion_, v8);

  v9 = objc_msgSend(v0, sel_userClassified);
  objc_msgSend(v1, sel_setClassifiedUser_, v9);

  objc_msgSend(v0, sel_userIdentityClassification);
  countAndFlagsBits = AFUserIdentityClassfication.toAceUserIdentityClassification()()._countAndFlagsBits;
  v11 = (void *)MEMORY[0x1B5E432E8](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setUserIdentityClassification_, v11);

  AFVoiceIdScoreCard.scoresArray()();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAUserConfidenceScore);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setScores_, isa);

  return v1;
}

uint64_t AFVoiceIdScoreCard.thresholdType()()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = objc_msgSend(v0, sel_spIdScoreThresholdingType);
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

    if (v3 == 0xD000000000000025 && v5 == 0x80000001B4EF9C60
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v3 == 0xD000000000000028 && v5 == 0x80000001B4EF9C90)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

void AFVoiceIdScoreCard.scoresArray()()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;

  v24 = MEMORY[0x1E0DEE9D8];
  v1 = objc_msgSend(v0, sel_spIdKnownUserScores);
  if (!v1)
    return;
  v2 = v1;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v4 = 0;
  v5 = v3 + 64;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v3 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  if (!v8)
    goto LABEL_6;
LABEL_5:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(void **)(*(_QWORD *)(v3 + 56) + 8 * i);
    v19 = objc_allocWithZone(MEMORY[0x1E0D885E8]);
    swift_bridgeObjectRetain();
    v20 = v18;
    v21 = objc_msgSend(v19, sel_init);
    objc_msgSend(v21, sel_setConfidenceScore_, objc_msgSend(v20, sel_integerValue));
    v22 = (void *)MEMORY[0x1B5E432E8](v16, v17);
    swift_bridgeObjectRelease();
    objc_msgSend(v21, sel_setSharedUserId_, v22);

    v23 = v21;
    MEMORY[0x1B5E43498]();
    if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    if (v8)
      goto LABEL_5;
LABEL_6:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      goto LABEL_24;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        goto LABEL_24;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          goto LABEL_24;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_19:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
  {
LABEL_24:
    swift_release();
    return;
  }
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      goto LABEL_24;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_19;
  }
LABEL_27:
  __break(1u);
}

id @nonobjc AFVoiceIdScoreCard.init(spIdAudioProcessedDuration:spIdUnknownUserScore:spIdKnownUserScores:spIdUserScoresVersion:spIdScoreThresholdingType:spIdAssetVersion:userClassified:userIdentityClassification:)(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  void *v12;
  NSDictionary v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;

  v12 = v11;
  if (a3)
  {
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v20.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (a6)
      goto LABEL_3;
  }
  else
  {
    v20.super.isa = 0;
    if (a6)
    {
LABEL_3:
      v21 = (void *)MEMORY[0x1B5E432E8](a5, a6);
      swift_bridgeObjectRelease();
      v22 = a10;
      if (a8)
        goto LABEL_4;
LABEL_8:
      v23 = 0;
      v24 = a11;
      if (v22)
        goto LABEL_5;
LABEL_9:
      v25 = 0;
      goto LABEL_10;
    }
  }
  v21 = 0;
  v22 = a10;
  if (!a8)
    goto LABEL_8;
LABEL_4:
  v23 = (void *)MEMORY[0x1B5E432E8](a7, a8);
  swift_bridgeObjectRelease();
  v24 = a11;
  if (!v22)
    goto LABEL_9;
LABEL_5:
  v25 = (void *)MEMORY[0x1B5E432E8](a9, v22);
  swift_bridgeObjectRelease();
LABEL_10:
  v26 = objc_msgSend(v12, sel_initWithSpIdAudioProcessedDuration_spIdUnknownUserScore_spIdKnownUserScores_spIdUserScoresVersion_spIdScoreThresholdingType_spIdAssetVersion_userClassified_userIdentityClassification_, a1, a2, v20.super.isa, a4, v21, v23, v25, v24);

  return v26;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String : Bool]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String : NSNumber]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt32 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32?, [UsoIdentifier]>);
  v36 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v34)
          goto LABEL_36;
        v19 = v35[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_36;
          v19 = v35[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v34)
            {
LABEL_36:
              if ((v36 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_43;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v35 = -1 << v33;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v35[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_45;
                if (v8 >= v34)
                  goto LABEL_36;
                v19 = v35[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = 8 * v17;
      v22 = *(_QWORD *)(v5 + 48) + v21;
      v23 = *(_DWORD *)v22;
      v24 = *(unsigned __int8 *)(v22 + 4);
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v21);
      if ((v36 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      if (v24)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v23);
      }
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v7 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = 8 * v13;
      v15 = *(_QWORD *)(v7 + 48) + v14;
      *(_DWORD *)v15 = v23;
      *(_BYTE *)(v15 + 4) = v24;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v14) = v25;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [RRCandidate]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, AffinityScoring>, (void (*)(uint64_t, _BYTE *))outlined init with take of ReferenceResolutionClientProtocol);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, ConversationAction>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, ResultCandidateState>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, SASRecognition>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [IntentTopic]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, RemoteFlowPluginPackage>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UInt, ()>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ContextTypeKey, AFContextSnapshot>);
  v33 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v31 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_31;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v20 >= v31)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v32 + 8 * v20);
    ++v13;
    if (!v22)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v31)
        goto LABEL_33;
      v22 = *(_QWORD *)(v32 + 8 * v13);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v31)
        {
LABEL_33:
          swift_release();
          if ((v33 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v22 = *(_QWORD *)(v32 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v13 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_42;
            if (v13 >= v31)
              goto LABEL_33;
            v22 = *(_QWORD *)(v32 + 8 * v13);
            ++v23;
            if (v22)
              goto LABEL_30;
          }
        }
        v13 = v23;
      }
    }
LABEL_30:
    v10 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_31:
    v28 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v19);
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    if ((v33 & 1) == 0)
      swift_unknownObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v26 = v16 == v25;
        if (v16 == v25)
          v16 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v27 == -1);
      v17 = __clz(__rbit64(~v27)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v28;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v29;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v21 = (_QWORD *)(v5 + 64);
  if ((v33 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v30 = 1 << *(_BYTE *)(v5 + 32);
  if (v30 >= 64)
    bzero(v21, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v30;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Task<ConversationService.EagerResult, Error>>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyEncodable>);
  v6 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35)
          goto LABEL_33;
        v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v35)
            goto LABEL_33;
          v24 = v36[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v14 >= v35)
                  goto LABEL_33;
                v24 = v36[v14];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v14 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = 16 * v22;
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *v31;
      v32 = v31[1];
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v19) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ContextTypeKey, AFContextSnapshot?>);
  v33 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v32 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v31 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_31;
    }
    v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v20 >= v31)
      break;
    v21 = (_QWORD *)(v5 + 64);
    v22 = *(_QWORD *)(v32 + 8 * v20);
    ++v13;
    if (!v22)
    {
      v13 = v20 + 1;
      if (v20 + 1 >= v31)
        goto LABEL_33;
      v22 = *(_QWORD *)(v32 + 8 * v13);
      if (!v22)
      {
        v23 = v20 + 2;
        if (v23 >= v31)
        {
LABEL_33:
          swift_release();
          if ((v33 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v22 = *(_QWORD *)(v32 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            v13 = v23 + 1;
            if (__OFADD__(v23, 1))
              goto LABEL_42;
            if (v13 >= v31)
              goto LABEL_33;
            v22 = *(_QWORD *)(v32 + 8 * v13);
            ++v23;
            if (v22)
              goto LABEL_30;
          }
        }
        v13 = v23;
      }
    }
LABEL_30:
    v10 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_31:
    v28 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v19);
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v19);
    if ((v33 & 1) == 0)
      swift_unknownObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v26 = v16 == v25;
        if (v16 == v25)
          v16 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v27 == -1);
      v17 = __clz(__rbit64(~v27)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v28;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v29;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v21 = (_QWORD *)(v5 + 64);
  if ((v33 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v30 = 1 << *(_BYTE *)(v5 + 32);
  if (v30 >= 64)
    bzero(v21, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v21 = -1 << v30;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, InstrumentedStack.TrackedFlowAgent>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33)
          goto LABEL_33;
        v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          v8 = v21 + 1;
          if (v21 + 1 >= v33)
            goto LABEL_33;
          v22 = v9[v8];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero((void *)(v5 + 64), 8 * v33);
                else
                  *v9 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                v8 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v22 = v9[v8];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v8 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_retain();
      result = static Hasher._hash(seed:_:)();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, NSExtensionProtocol>, (void (*)(uint64_t, _BYTE *))outlined init with take of ReferenceResolutionClientProtocol);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [LNSystemProtocol : [LinkActionMetadata]]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LNSystemProtocol, [LinkActionMetadata]>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      v33 = v31;
      swift_bridgeObjectRetain();
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [UsoIdentifier]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<Int, @Sendable ()>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, FlowPluginAndBundle>);
  v43 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v41 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_22;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v41)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v42 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v41)
        goto LABEL_34;
      v24 = *(_QWORD *)(v42 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_34:
          swift_release();
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = *(_QWORD *)(v42 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v13 >= v41)
              goto LABEL_34;
            v24 = *(_QWORD *)(v42 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v13 = v25;
      }
    }
LABEL_21:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_22:
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = (__int128 *)(*(_QWORD *)(v5 + 56) + 80 * v21);
    if ((v43 & 1) != 0)
    {
      v44 = *v29;
      v30 = v29[1];
      v31 = v29[2];
      v32 = v29[3];
      v48 = v29[4];
      v46 = v31;
      v47 = v32;
      v45 = v30;
    }
    else
    {
      outlined init with copy of FlowPluginAndBundle((uint64_t)v29, (uint64_t)&v44);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v7 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v11 + 8 * (v34 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v11 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v11 + 8 * v35);
      }
      while (v39 == -1);
      v14 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v28;
    v15[1] = v27;
    v16 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 80 * v14);
    *v16 = v44;
    v17 = v45;
    v18 = v46;
    v19 = v48;
    v16[3] = v47;
    v16[4] = v19;
    v16[1] = v17;
    v16[2] = v18;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v40 = 1 << *(_BYTE *)(v5 + 32);
  if (v40 >= 64)
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v40;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UUID, [String : Any]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, Int>, &lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[4];
  int v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;

  v3 = v2;
  v5 = type metadata accessor for Parse();
  v51 = *(_QWORD *)(v5 - 8);
  v52 = v5;
  MEMORY[0x1E0C80A78](v5);
  v50 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for UUID();
  v49 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Parse>);
  v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v46 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v44 = v2;
  v45 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  v48 = v10;
  result = swift_retain();
  v19 = 0;
  v43 = a2;
  v20 = 16;
  if ((a2 & 1) != 0)
    v20 = 32;
  v47 = v20;
  v21 = v20;
  while (1)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v24 = v23 | (v19 << 6);
      goto LABEL_24;
    }
    v25 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v45)
      break;
    v26 = v46;
    v27 = v46[v25];
    ++v19;
    if (!v27)
    {
      v19 = v25 + 1;
      if (v25 + 1 >= v45)
        goto LABEL_34;
      v27 = v46[v19];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_34:
          v40 = v48;
          swift_release();
          v3 = v44;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            v19 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_43;
            if (v19 >= v45)
              goto LABEL_34;
            v27 = v46[v19];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v19 = v28;
      }
    }
LABEL_23:
    v16 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_24:
    v29 = v48;
    v30 = *(_QWORD *)(v49 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v49 + v21))(v9, *(_QWORD *)(v48 + 48) + v30 * v24, v7);
    v31 = *(_QWORD *)(v29 + 56);
    v32 = *(_QWORD *)(v51 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v51 + v21))(v50, v31 + v32 * v24, v52);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v33 = -1 << *(_BYTE *)(v12 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v17 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v17 + 8 * v35);
      }
      while (v39 == -1);
      v22 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v17 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v49 + 32))(*(_QWORD *)(v12 + 48) + v30 * v22, v9, v7);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v51 + 32))(*(_QWORD *)(v12 + 56) + v32 * v22, v50, v52);
    ++*(_QWORD *)(v12 + 16);
  }
  v40 = v48;
  swift_release();
  v3 = v44;
  v26 = v46;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v41 = 1 << *(_BYTE *)(v40 + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(v40 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;

  v3 = v2;
  v5 = type metadata accessor for StringKeyedValue();
  v42 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, StringKeyedValue>);
  v43 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v41 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v39 = v2;
  v40 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = v41;
    v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_34;
      v24 = v41[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v17 >= v40)
              goto LABEL_34;
            v24 = v41[v17];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v17 = v25;
      }
    }
LABEL_21:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    v26 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v42 + 72);
    v30 = *(_QWORD *)(v8 + 56) + v29 * v21;
    if ((v43 & 1) != 0)
    {
      outlined init with take of StringKeyedValue(v30, (uint64_t)v7);
    }
    else
    {
      outlined init with copy of StringKeyedValue(v30, (uint64_t)v7);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v10 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    result = outlined init with take of StringKeyedValue((uint64_t)v7, *(_QWORD *)(v10 + 56) + v29 * v18);
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v39;
  v23 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v8 + 32);
  if (v38 >= 64)
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v38;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UUID, [UUID]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
  v42 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (topAction: RankedAction, alternativeParses: [CamParse])>);
  v43 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_41;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v41 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v39 = v2;
  v40 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = v41;
    v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_34;
      v24 = v41[v17];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            v17 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v17 >= v40)
              goto LABEL_34;
            v24 = v41[v17];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v17 = v25;
      }
    }
LABEL_21:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    v26 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v42 + 72);
    v30 = *(_QWORD *)(v8 + 56) + v29 * v21;
    if ((v43 & 1) != 0)
    {
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v30, (uint64_t)v7, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    }
    else
    {
      outlined init with copy of ReferenceResolutionClientProtocol?(v30, (uint64_t)v7, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v10 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v7, *(_QWORD *)(v10 + 56) + v29 * v18, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v3 = v39;
  v23 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v8 + 32);
  if (v38 >= 64)
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v38;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = type metadata accessor for UserID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UserID, ContextUpdater>);
  v42 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_retain();
    }
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EF90]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int v39;
  _OWORD v40[2];

  v3 = v2;
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  v39 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v38 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v36 = v2;
  v37 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = v38;
    v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_34;
      v24 = v38[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v37)
              goto LABEL_34;
            v24 = v38[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v21), v40);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      outlined init with copy of Any(*(_QWORD *)(v9 + 56) + 32 * v21, (uint64_t)v40);
    }
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    result = (uint64_t)outlined init with take of Any(v40, (_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v19));
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = v38;
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int v39;
  _OWORD v40[2];

  v3 = v2;
  v5 = type metadata accessor for ConversationSessionKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Sendable>);
  v39 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v38 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v36 = v2;
  v37 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = v38;
    v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_34;
      v24 = v38[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v37)
              goto LABEL_34;
            v24 = v38[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      outlined init with take of Any((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v21), v40);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      outlined init with copy of Any(*(_QWORD *)(v9 + 56) + 32 * v21, (uint64_t)v40);
    }
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08], MEMORY[0x1E0D9EE18]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    result = (uint64_t)outlined init with take of Any(v40, (_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v19));
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = v38;
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  int v39;
  _BYTE v40[32];

  v3 = v2;
  v5 = type metadata accessor for ConversationSessionKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Sendable?>);
  v39 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v38 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v36 = v2;
  v37 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = v38;
    v24 = v38[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_34;
      v24 = v38[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v38[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v37)
              goto LABEL_34;
            v24 = v38[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(*(_QWORD *)(v9 + 56) + 32 * v21, (uint64_t)v40, &demangling cache variable for type metadata for Sendable?);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v9 + 56) + 32 * v21, (uint64_t)v40, &demangling cache variable for type metadata for Sendable?);
    }
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08], MEMORY[0x1E0D9EE18]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v28 = -1 << *(_BYTE *)(v11 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v16 + 8 * v30);
      }
      while (v34 == -1);
      v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v40, *(_QWORD *)(v11 + 56) + 32 * v19, &demangling cache variable for type metadata for Sendable?);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = v38;
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v9 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], &demangling cache variable for type metadata for _DictionaryStorage<UserID, Int>, &lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E0D9EF90]);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t i;
  int v47;

  v3 = v2;
  v5 = type metadata accessor for UserID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UserID, Data>);
  v47 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (*(_QWORD *)(v9 + 16))
  {
    v42 = v2;
    v12 = 1 << *(_BYTE *)(v9 + 32);
    v13 = *(_QWORD *)(v9 + 64);
    v44 = (_QWORD *)(v9 + 64);
    if (v12 < 64)
      v14 = ~(-1 << v12);
    else
      v14 = -1;
    v15 = v14 & v13;
    v43 = (unint64_t)(v12 + 63) >> 6;
    v16 = v10 + 64;
    result = swift_retain();
    v18 = 0;
    v45 = v6;
    for (i = v9; ; v9 = i)
    {
      if (v15)
      {
        v22 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v23 = v22 | (v18 << 6);
      }
      else
      {
        v24 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v24 >= v43)
          goto LABEL_34;
        v25 = v44[v24];
        ++v18;
        if (!v25)
        {
          v18 = v24 + 1;
          if (v24 + 1 >= v43)
            goto LABEL_34;
          v25 = v44[v18];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v43)
            {
LABEL_34:
              swift_release();
              v3 = v42;
              if ((v47 & 1) != 0)
              {
                v41 = 1 << *(_BYTE *)(v9 + 32);
                if (v41 >= 64)
                  bzero(v44, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v44 = -1 << v41;
                *(_QWORD *)(v9 + 16) = 0;
              }
              break;
            }
            v25 = v44[v26];
            if (!v25)
            {
              while (1)
              {
                v18 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_41;
                if (v18 >= v43)
                  goto LABEL_34;
                v25 = v44[v18];
                ++v26;
                if (v25)
                  goto LABEL_21;
              }
            }
            v18 = v26;
          }
        }
LABEL_21:
        v15 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v18 << 6);
      }
      v27 = v6;
      v28 = *(_QWORD *)(v6 + 72);
      v29 = *(_QWORD *)(v9 + 48) + v28 * v23;
      if ((v47 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v27 + 32))(v8, v29, v5);
        v30 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v23);
        v31 = *v30;
        v32 = v30[1];
      }
      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v27 + 16))(v8, v29, v5);
        v33 = (uint64_t *)(*(_QWORD *)(v9 + 56) + 16 * v23);
        v31 = *v33;
        v32 = v33[1];
        outlined copy of Data._Representation(*v33, v32);
      }
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EF90]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v34 = -1 << *(_BYTE *)(v11 + 32);
      v35 = result & ~v34;
      v36 = v35 >> 6;
      if (((-1 << v35) & ~*(_QWORD *)(v16 + 8 * (v35 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v16 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v37 = 0;
        v38 = (unint64_t)(63 - v34) >> 6;
        do
        {
          if (++v36 == v38 && (v37 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v39 = v36 == v38;
          if (v36 == v38)
            v36 = 0;
          v37 |= v39;
          v40 = *(_QWORD *)(v16 + 8 * v36);
        }
        while (v40 == -1);
        v19 = __clz(__rbit64(~v40)) + (v36 << 6);
      }
      *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = *(_QWORD *)(v11 + 48) + v28 * v19;
      v6 = v45;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))(v20, v8, v5);
      v21 = (uint64_t *)(*(_QWORD *)(v11 + 56) + 16 * v19);
      *v21 = v31;
      v21[1] = v32;
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F520], &demangling cache variable for type metadata for _DictionaryStorage<String, Siri_Nlu_External_ResponseStatus.StatusCode>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C588], &demangling cache variable for type metadata for _DictionaryStorage<String, Input>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment), &demangling cache variable for type metadata for _DictionaryStorage<UUID, (Input, ActingFlow, SiriEnvironment)>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment), &demangling cache variable for type metadata for _DictionaryStorage<UUID, (Input, AnyFlow, SiriEnvironment)>);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t i;
  int v44;

  v5 = v3;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v44 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v42 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v40 = v3;
  v41 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  for (i = v11; ; v11 = i)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = v42;
    v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_34;
      v26 = v42[v20];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          v5 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            v20 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_43;
            if (v20 >= v41)
              goto LABEL_34;
            v26 = v42[v20];
            ++v27;
            if (v26)
              goto LABEL_21;
          }
        }
        v20 = v27;
      }
    }
LABEL_21:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    v28 = *(_QWORD *)(v8 + 72);
    v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v29, v7);
      v30 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v29, v7);
      v30 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v31 = -1 << *(_BYTE *)(v13 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v28 * v21, v10, v7);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v21) = v30;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v5 = v40;
  v25 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v11 + 32);
  if (v38 >= 64)
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v38;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v5 = v13;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t i;
  int v44;

  v5 = v3;
  v7 = type metadata accessor for UserID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v44 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v42 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v40 = v3;
  v41 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  for (i = v11; ; v11 = i)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = v42;
    v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_34;
      v26 = v42[v20];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          v5 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            v20 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_43;
            if (v20 >= v41)
              goto LABEL_34;
            v26 = v42[v20];
            ++v27;
            if (v26)
              goto LABEL_21;
          }
        }
        v20 = v27;
      }
    }
LABEL_21:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    v28 = *(_QWORD *)(v8 + 72);
    v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v29, v7);
      v30 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v29, v7);
      v30 = *(id *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EF90]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v31 = -1 << *(_BYTE *)(v13 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v28 * v21, v10, v7);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v21) = v30;
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v5 = v40;
  v25 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v38 = 1 << *(_BYTE *)(v11 + 32);
  if (v38 >= 64)
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v38;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v5 = v13;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_33;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          v4 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v37)
              goto LABEL_33;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v36;
  v23 = (_QWORD *)(v6 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int128 v33;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v6 + 64);
    v11 = 1 << *(_BYTE *)(v6 + 32);
    v30 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v31 = 1 << *(_BYTE *)(v6 + 32);
    v32 = v4;
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v22 >= v14)
          goto LABEL_33;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v14)
            goto LABEL_33;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v14)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v4 = v32;
                goto LABEL_40;
              }
              if (v31 >= 64)
                bzero((void *)(v6 + 64), 8 * v14);
              else
                *v10 = v30;
              v4 = v32;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v9 >= v14)
                  goto LABEL_33;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v9 = v24;
          }
        }
LABEL_30:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v21);
      v33 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + 16 * v21);
      if ((a2 & 1) == 0)
        swift_retain();
      result = static Hasher._hash(seed:_:)();
      v16 = -1 << *(_BYTE *)(v8 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v18 == v26;
          if (v18 == v26)
            v18 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v15 + 8 * v18);
        }
        while (v28 == -1);
        v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v29;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v19) = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t (*a3)(uint64_t), uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;

  v52 = a5;
  v53 = a6;
  v8 = v6;
  v51 = a3;
  v10 = a3(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v45 - v12;
  v14 = *v6;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_41;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v49 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v47 = v6;
  v48 = (unint64_t)(v17 + 63) >> 6;
  v21 = a2;
  v22 = v15 + 64;
  v54 = v14;
  result = swift_retain();
  v24 = 0;
  v46 = v21;
  v25 = 16;
  if ((v21 & 1) != 0)
    v25 = 32;
  v50 = v25;
  while (1)
  {
    if (v20)
    {
      v27 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v28 = v27 | (v24 << 6);
      goto LABEL_24;
    }
    v29 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v29 >= v48)
      break;
    v30 = v49;
    v31 = v49[v29];
    ++v24;
    if (!v31)
    {
      v24 = v29 + 1;
      if (v29 + 1 >= v48)
        goto LABEL_34;
      v31 = v49[v24];
      if (!v31)
      {
        v32 = v29 + 2;
        if (v32 >= v48)
        {
LABEL_34:
          v43 = v54;
          swift_release();
          v8 = v47;
          if ((v46 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v31 = v49[v32];
        if (!v31)
        {
          while (1)
          {
            v24 = v32 + 1;
            if (__OFADD__(v32, 1))
              goto LABEL_43;
            if (v24 >= v48)
              goto LABEL_34;
            v31 = v49[v24];
            ++v32;
            if (v31)
              goto LABEL_23;
          }
        }
        v24 = v32;
      }
    }
LABEL_23:
    v20 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v24 << 6);
LABEL_24:
    v33 = v54;
    v34 = *(_QWORD *)(v11 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + v50))(v13, *(_QWORD *)(v54 + 48) + v34 * v28, v10);
    v35 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v28);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(v52, v51, v53);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v36 = -1 << *(_BYTE *)(v16 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v22 + 8 * (v37 >> 6))) != 0)
    {
      v26 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v22 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v22 + 8 * v38);
      }
      while (v42 == -1);
      v26 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 32))(*(_QWORD *)(v16 + 48) + v34 * v26, v13, v10);
    *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v26) = v35;
    ++*(_QWORD *)(v16 + 16);
  }
  v43 = v54;
  swift_release();
  v8 = v47;
  v30 = v49;
  if ((v46 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v44 = 1 << *(_BYTE *)(v43 + 32);
  if (v44 >= 64)
    bzero(v30, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v30 = -1 << v44;
  *(_QWORD *)(v43 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v8 = v16;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;

  v6 = v4;
  v48 = a3(0);
  v8 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v47 = (char *)&v42 - v9;
  v10 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v46 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  v12 = v11;
  if (*(_QWORD *)(v10 + 16))
  {
    v43 = v4;
    v13 = 1 << *(_BYTE *)(v10 + 32);
    v14 = *(_QWORD *)(v10 + 64);
    v45 = (_QWORD *)(v10 + 64);
    if (v13 < 64)
      v15 = ~(-1 << v13);
    else
      v15 = -1;
    v16 = v15 & v14;
    v44 = (unint64_t)(v13 + 63) >> 6;
    v17 = v11 + 64;
    result = swift_retain();
    v19 = 0;
    while (1)
    {
      if (v16)
      {
        v22 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v23 = v22 | (v19 << 6);
      }
      else
      {
        v24 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v24 >= v44)
          goto LABEL_34;
        v25 = v45[v24];
        ++v19;
        if (!v25)
        {
          v19 = v24 + 1;
          if (v24 + 1 >= v44)
            goto LABEL_34;
          v25 = v45[v19];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v44)
            {
LABEL_34:
              swift_release();
              v6 = v43;
              if ((v46 & 1) != 0)
              {
                v41 = 1 << *(_BYTE *)(v10 + 32);
                if (v41 >= 64)
                  bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v45 = -1 << v41;
                *(_QWORD *)(v10 + 16) = 0;
              }
              break;
            }
            v25 = v45[v26];
            if (!v25)
            {
              while (1)
              {
                v19 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_41;
                if (v19 >= v44)
                  goto LABEL_34;
                v25 = v45[v19];
                ++v26;
                if (v25)
                  goto LABEL_21;
              }
            }
            v19 = v26;
          }
        }
LABEL_21:
        v16 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v19 << 6);
      }
      v27 = *(_QWORD *)(v10 + 56);
      v28 = v10;
      v29 = (uint64_t *)(*(_QWORD *)(v10 + 48) + 16 * v23);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v8 + 72);
      v33 = v27 + v32 * v23;
      if ((v46 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v47, v33, v48);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v47, v33, v48);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v34 = -1 << *(_BYTE *)(v12 + 32);
      v35 = result & ~v34;
      v36 = v35 >> 6;
      if (((-1 << v35) & ~*(_QWORD *)(v17 + 8 * (v35 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v17 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v37 = 0;
        v38 = (unint64_t)(63 - v34) >> 6;
        do
        {
          if (++v36 == v38 && (v37 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v39 = v36 == v38;
          if (v36 == v38)
            v36 = 0;
          v37 |= v39;
          v40 = *(_QWORD *)(v17 + 8 * v36);
        }
        while (v40 == -1);
        v20 = __clz(__rbit64(~v40)) + (v36 << 6);
      }
      *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v20);
      *v21 = v31;
      v21[1] = v30;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v12 + 56) + v32 * v20, v47, v48);
      ++*(_QWORD *)(v12 + 16);
      v10 = v28;
    }
  }
  result = swift_release();
  *v6 = v12;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t, _BYTE *))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  char v38;
  _BYTE v39[40];

  v6 = v4;
  v8 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v38 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = v9;
  if (*(_QWORD *)(v8 + 16))
  {
    v11 = 1 << *(_BYTE *)(v8 + 32);
    v37 = (_QWORD *)(v8 + 64);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v8 + 64);
    v36 = (unint64_t)(v11 + 63) >> 6;
    v14 = v9 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v20 = v19 | (v16 << 6);
      }
      else
      {
        v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v36)
          goto LABEL_34;
        v22 = v37[v21];
        ++v16;
        if (!v22)
        {
          v16 = v21 + 1;
          if (v21 + 1 >= v36)
            goto LABEL_34;
          v22 = v37[v16];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_34:
              swift_release();
              v6 = v4;
              if ((v38 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v8 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v8 + 16) = 0;
              }
              break;
            }
            v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                v16 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v16 >= v36)
                  goto LABEL_34;
                v22 = v37[v16];
                ++v23;
                if (v22)
                  goto LABEL_21;
              }
            }
            v16 = v23;
          }
        }
LABEL_21:
        v13 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      v24 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v20);
      v26 = *v24;
      v25 = v24[1];
      v27 = *(_QWORD *)(v8 + 56) + 40 * v20;
      if ((v38 & 1) != 0)
      {
        a4(v27, v39);
      }
      else
      {
        outlined init with copy of ReferenceResolutionClientProtocol(v27, (uint64_t)v39);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v10 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v14 + 8 * v30);
        }
        while (v34 == -1);
        v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v17);
      *v18 = v26;
      v18[1] = v25;
      result = ((uint64_t (*)(_BYTE *, unint64_t))a4)(v39, *(_QWORD *)(v10 + 56) + 40 * v17);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
  *v6 = v10;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t i;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;

  v6 = v4;
  v51 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v48 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v50 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v49 = a2;
  v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_41;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v46 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v44 = v4;
  v45 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 64;
  result = swift_retain();
  v23 = 0;
  for (i = v14; ; v14 = i)
  {
    if (v20)
    {
      v25 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v26 = v25 | (v23 << 6);
      goto LABEL_22;
    }
    v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v27 >= v45)
      break;
    v28 = v46;
    v29 = v46[v27];
    ++v23;
    if (!v29)
    {
      v23 = v27 + 1;
      if (v27 + 1 >= v45)
        goto LABEL_34;
      v29 = v46[v23];
      if (!v29)
      {
        v30 = v27 + 2;
        if (v30 >= v45)
        {
LABEL_34:
          swift_release();
          v6 = v44;
          if ((v49 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v29 = v46[v30];
        if (!v29)
        {
          while (1)
          {
            v23 = v30 + 1;
            if (__OFADD__(v30, 1))
              goto LABEL_43;
            if (v23 >= v45)
              goto LABEL_34;
            v29 = v46[v23];
            ++v30;
            if (v29)
              goto LABEL_21;
          }
        }
        v23 = v30;
      }
    }
LABEL_21:
    v20 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v23 << 6);
LABEL_22:
    v31 = *(_QWORD *)(v11 + 72);
    v32 = *(_QWORD *)(v14 + 48) + v31 * v26;
    if ((v49 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 32))(v13, v32, v10);
      v33 = *(_QWORD *)(v14 + 56);
      v34 = *(_QWORD *)(v48 + 72);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v33 + v34 * v26, v50, v51);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v13, v32, v10);
      v35 = *(_QWORD *)(v14 + 56);
      v34 = *(_QWORD *)(v48 + 72);
      outlined init with copy of ReferenceResolutionClientProtocol?(v35 + v34 * v26, v50, v51);
    }
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v36 = -1 << *(_BYTE *)(v16 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v21 + 8 * (v37 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v21 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v21 + 8 * v38);
      }
      while (v42 == -1);
      v24 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v21 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(*(_QWORD *)(v16 + 48) + v31 * v24, v13, v10);
    result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v50, *(_QWORD *)(v16 + 56) + v34 * v24, v51);
    ++*(_QWORD *)(v16 + 16);
  }
  swift_release();
  v6 = v44;
  v28 = v46;
  if ((v49 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v43 = 1 << *(_BYTE *)(v14 + 32);
  if (v43 >= 64)
    bzero(v28, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v43;
  *(_QWORD *)(v14 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v6 = v16;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v10 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_OWORD *)(v11 + 16 * v3);
        v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]))
                                    - 8)
                        + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        result = Hasher._finalize()();
        v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8)
            goto LABEL_5;
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          v10 = *(_QWORD *)(a2 + 48);
          v11 = (_BYTE *)(v10 + v3);
          v12 = (_BYTE *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1)
            *v11 = *v12;
          v13 = *(_QWORD *)(a2 + 56);
          v14 = (_QWORD *)(v13 + 8 * v3);
          v15 = (_QWORD *)(v13 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v14 >= v15 + 1))
          {
            *v14 = *v15;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_QWORD *)(v15 + 8 * v3);
            v17 = (_QWORD *)(v15 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v11 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = v16 + 40 * v3;
          v18 = (__int128 *)(v16 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            v9 = *v18;
            v10 = v18[1];
            *(_QWORD *)(v17 + 32) = *((_QWORD *)v18 + 4);
            *(_OWORD *)v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_OWORD *)(v15 + 16 * v3);
            v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          result = v14 + 80 * v3;
          v15 = (const void *)(v14 + 80 * v6);
          if (v3 != v6 || (v3 = v6, result >= (unint64_t)v15 + 80))
          {
            result = (unint64_t)memmove((void *)result, v15, 0x50uLL);
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v17 = *v16;
    v18 = (-1 << v3) - 1;
  }
  else
  {
    v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    v18 = *v16;
    v17 = (-1 << result) - 1;
  }
  *v16 = v18 & v17;
  v19 = *(_QWORD *)(a2 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for UUID();
  v37 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v36 = (result + 1) & v11;
      v12 = *(_QWORD *)(v37 + 72);
      v35 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v35(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v8 = v14;
            if (v15 * a1 < v16
              || *(_QWORD *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v22 = *(_QWORD *)(a2 + 56);
            v23 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for Parse() - 8) + 72);
            v24 = v23 * a1;
            result = v22 + v23 * a1;
            v25 = v23 * v10;
            v26 = v22 + v23 * v10 + v23;
            if (v24 < v25 || result >= v26)
            {
              result = swift_arrayInitWithTakeFrontToBack();
              a1 = v10;
              v13 = v17;
            }
            else
            {
              a1 = v10;
              v13 = v17;
              if (v24 != v25)
              {
                result = swift_arrayInitWithTakeBackToFront();
                v13 = v17;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
LABEL_5:
        v10 = (v10 + 1) & v13;
        v12 = v15;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v28;
    v30 = (-1 << a1) - 1;
  }
  else
  {
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v28;
    v29 = (-1 << a1) - 1;
  }
  *v28 = v30 & v29;
  v31 = *(_QWORD *)(a2 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for UUID();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_QWORD *)(v23 + 8 * a1);
            v25 = (_QWORD *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for CodingUserInfoKey();
  v36 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v35 = (result + 1) & v11;
      v12 = *(_QWORD *)(v36 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v34(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v35)
        {
          if (v19 >= v35 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v12 = v15;
              v13 = v17;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 32 * a1);
            v25 = (_OWORD *)(v23 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 2))
            {
              v26 = v25[1];
              *v24 = *v25;
              v24[1] = v26;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v35 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v27;
    v29 = (-1 << a1) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for ConversationSessionKey();
  v36 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v35 = (result + 1) & v11;
      v12 = *(_QWORD *)(v36 + 72);
      v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v34(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08], MEMORY[0x1E0D9EE18]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v35)
        {
          if (v19 >= v35 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 32 * a1);
            v25 = (_OWORD *)(v23 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 2))
            {
              v26 = v25[1];
              *v24 = *v25;
              v24[1] = v26;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v35 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v27;
    v29 = (-1 << a1) - 1;
  }
  else
  {
    v27 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v27;
    v28 = (-1 << a1) - 1;
  }
  *v27 = v29 & v28;
  v30 = *(_QWORD *)(a2 + 16);
  v31 = __OFSUB__(v30, 1);
  v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for UUID();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_OWORD *)(v23 + 16 * a1);
            v25 = (_OWORD *)(v23 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  unint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for UserID();
  v35 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v34 = (result + 1) & v11;
      v12 = *(_QWORD *)(v35 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v35 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v33(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EF90]);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v34)
        {
          if (v19 >= v34 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v22 + v16 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v23 = *(_QWORD *)(a2 + 56);
            v24 = (_QWORD *)(v23 + 8 * a1);
            v25 = (_QWORD *)(v23 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v24 >= v25 + 1))
            {
              *v24 = *v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v34 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  return specialized _NativeDictionary._delete(at:)(a1, a2, &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
}

{
  return specialized _NativeDictionary._delete(at:)(a1, a2, &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  return specialized _NativeDictionary._delete(at:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F520]);
}

{
  return specialized _NativeDictionary._delete(at:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C588]);
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v4 = result;
  v5 = a2 + 64;
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(_QWORD *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    v9 = ~v6;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      v10 = (result + 1) & v9;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v11 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v9;
        if (v4 >= (uint64_t)v10)
          break;
        if (v12 < v10)
          goto LABEL_11;
LABEL_12:
        v13 = *(_QWORD *)(a2 + 48);
        v14 = (_OWORD *)(v13 + 16 * v4);
        v15 = (_OWORD *)(v13 + 16 * v7);
        if (v4 != v7 || v14 >= v15 + 1)
          *v14 = *v15;
        v16 = *(_QWORD *)(a2 + 56);
        v17 = *(_QWORD *)(*(_QWORD *)(a3(0) - 8) + 72);
        v18 = v17 * v4;
        result = v16 + v17 * v4;
        v19 = v17 * v7;
        v20 = v16 + v17 * v7 + v17;
        if (v18 < v19 || result >= v20)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v4 = v7;
          if (v18 == v19)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v4 = v7;
LABEL_6:
        v7 = (v7 + 1) & v9;
        if (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          goto LABEL_21;
      }
      if (v12 < v10)
        goto LABEL_6;
LABEL_11:
      if (v4 < (uint64_t)v12)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v22 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    v23 = *v22;
    v24 = (-1 << v4) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v5 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  void (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;

  v32 = a3;
  v5 = type metadata accessor for UUID();
  v34 = *(_QWORD *)(v5 - 8);
  result = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    v35 = a2 + 64;
    result = _HashTable.previousHole(before:)();
    v12 = v35;
    if ((*(_QWORD *)(v35 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (result + 1) & v11;
      v14 = *(_QWORD *)(v34 + 72);
      v33 = *(void (**)(char *, unint64_t, uint64_t))(v34 + 16);
      do
      {
        v15 = v14 * v10;
        v33(v8, *(_QWORD *)(a2 + 48) + v14 * v10, v5);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
        v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
        result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v8, v5);
        v17 = v16 & v11;
        if (a1 >= (uint64_t)v13)
        {
          if (v17 < v13 || a1 < (uint64_t)v17)
            goto LABEL_6;
        }
        else if (v17 < v13 && a1 < (uint64_t)v17)
        {
          goto LABEL_6;
        }
        if (v14 * a1 < v15 || *(_QWORD *)(a2 + 48) + v14 * a1 >= (unint64_t)(*(_QWORD *)(a2 + 48) + v15 + v14))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v14 * a1 != v15)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v20 = *(_QWORD *)(a2 + 56);
        v21 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(v32) - 8) + 72);
        v22 = v21 * a1;
        result = v20 + v21 * a1;
        v23 = v21 * v10;
        v24 = v20 + v21 * v10 + v21;
        if (v22 < v23 || result >= v24)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v22 == v23)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
        v12 = v35;
      }
      while (((*(_QWORD *)(v35 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v26 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    v27 = *v26;
    v28 = (-1 << a1) - 1;
  }
  else
  {
    v26 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    v28 = *v26;
    v27 = (-1 << a1) - 1;
  }
  *v26 = v28 & v27;
  v29 = *(_QWORD *)(a2 + 16);
  v30 = __OFSUB__(v29, 1);
  v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for Parse();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UserID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0DEC990], (uint64_t (*)(uint64_t, uint64_t))outlined init with take of Any);
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9EE08], (uint64_t (*)(uint64_t, uint64_t))outlined init with take of Any);
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
  result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F520]);
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C588]);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_BYTE *)(a5[7] + result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v11 = a4[6];
  v12 = a5(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, a2, v12);
  result = a6(a3, a4[7] + 32 * a1);
  v14 = a4[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a4[2] = v16;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(_QWORD))
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v9 = (_QWORD *)(a5[6] + 16 * a1);
  *v9 = a2;
  v9[1] = a3;
  v10 = a5[7];
  v11 = a6(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a4, v11);
  v13 = a5[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a5[2] = v15;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of ReferenceResolutionClientProtocol(a4, a5[7] + 40 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v12 = a4[7];
  v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
  result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a3, v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a5);
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = (_OWORD *)(a5[7] + 80 * result);
  v7 = a4[4];
  v8 = a4[2];
  v6[3] = a4[3];
  v6[4] = v7;
  v9 = a4[1];
  *v6 = *a4;
  v6[1] = v9;
  v6[2] = v8;
  v10 = a5[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a5[2] = v12;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = (_BYTE)v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String : Bool]>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String : NSNumber]>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, [String : Any]>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, Int>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for StringKeyedValue();
  v30 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, StringKeyedValue>);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v28 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v29 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v15)
        goto LABEL_26;
      v25 = *(_QWORD *)(v29 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_25:
    v14 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(v30 + 72) * v17;
    outlined init with copy of StringKeyedValue(*(_QWORD *)(v5 + 56) + v22, (uint64_t)v4);
    v23 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v23 = v21;
    v23[1] = v20;
    outlined init with take of StringKeyedValue((uint64_t)v4, *(_QWORD *)(v7 + 56) + v22);
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v28;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v29 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v29 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, AffinityScoring>, (void (*)(_BYTE *, uint64_t))outlined init with take of ReferenceResolutionClientProtocol);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, [UUID]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
  v28 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (topAction: RankedAction, alternativeParses: [CamParse])>);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_25:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v27 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v10;
    if (!v23)
    {
      v10 = v22 + 1;
      if (v22 + 1 >= v27)
        goto LABEL_23;
      v23 = *(_QWORD *)(v26 + 8 * v10);
      if (!v23)
        break;
    }
LABEL_22:
    v13 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_9:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v28 + 72) * v15;
    outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v5 + 56) + v20, (uint64_t)v4, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    v21 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v27)
  {
LABEL_23:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_25;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v10 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v10 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v10);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, ConversationAction>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = (_BYTE)v16;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UserID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UserID, ContextUpdater>);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, ResultCandidateState>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0DEC990], &demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>, (void (*)(uint64_t, _BYTE *))outlined init with copy of Any, (uint64_t (*)(_BYTE *, uint64_t))outlined init with take of Any);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [IntentTopic]>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, RemoteFlowPluginPackage>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UInt, ()>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ContextTypeKey, AFContextSnapshot>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_unknownObjectRetain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D9EE08], &demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Sendable>, (void (*)(uint64_t, _BYTE *))outlined init with copy of Any, (uint64_t (*)(_BYTE *, uint64_t))outlined init with take of Any);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  _BYTE v27[32];

  v1 = v0;
  v2 = type metadata accessor for ConversationSessionKey();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Sendable?>);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v26 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v12);
      if (!v21)
        break;
    }
LABEL_25:
    v15 = (v21 - 1) & v21;
    v17 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v18, v2);
    v19 = 32 * v17;
    outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v6 + 56) + v19, (uint64_t)v27, &demangling cache variable for type metadata for Sendable?);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v18, v5, v2);
    result = (void *)outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v27, *(_QWORD *)(v8 + 56) + v19, &demangling cache variable for type metadata for Sendable?);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, char *, uint64_t);
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;

  v1 = v0;
  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, @MessageBusActor (_:_:)>);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v26 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v27 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v23 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v16)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v12;
    if (!v24)
    {
      v12 = v23 + 1;
      if (v23 + 1 >= v16)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v12);
      if (!v24)
        break;
    }
LABEL_25:
    v15 = (v24 - 1) & v24;
    v18 = __clz(__rbit64(v24)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 16 * v18;
    v21 = *(_QWORD *)(v8 + 48) + v19;
    v22 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    v28 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v20);
    v22(v21, v5, v2);
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + v20) = v28;
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v12 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v12);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D9EF80], &demangling cache variable for type metadata for _DictionaryStorage<UserID, Int>);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = type metadata accessor for UserID();
  v1 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v36 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UserID, Data>);
  v33 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = *(_QWORD *)(v3 + 16);
  v39 = v4;
  if (!v5)
  {
    result = (void *)swift_release();
    v31 = v39;
    v30 = v33;
LABEL_28:
    *v30 = v31;
    return result;
  }
  v6 = v4;
  result = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    v6 = v39;
  }
  v34 = v3 + 64;
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v38 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v35 = (unint64_t)(v11 + 63) >> 6;
  v15 = v36;
  v14 = v37;
  v16 = v39;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v10 << 6);
      v19 = v38;
      goto LABEL_12;
    }
    v27 = v10 + 1;
    v19 = v38;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v35)
      goto LABEL_26;
    v28 = *(_QWORD *)(v34 + 8 * v27);
    ++v10;
    if (!v28)
    {
      v10 = v27 + 1;
      if (v27 + 1 >= v35)
        goto LABEL_26;
      v28 = *(_QWORD *)(v34 + 8 * v10);
      if (!v28)
        break;
    }
LABEL_25:
    v13 = (v28 - 1) & v28;
    v18 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(_QWORD *)(v19 + 48) + v20, v14);
    v21 = *(_QWORD *)(v19 + 56);
    v22 = 16 * v18;
    v23 = (uint64_t *)(v21 + 16 * v18);
    v24 = *v23;
    v25 = v23[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v16 + 48) + v20, v15, v14);
    v26 = (uint64_t *)(*(_QWORD *)(v16 + 56) + v22);
    *v26 = v24;
    v26[1] = v25;
    result = (void *)outlined copy of Data._Representation(v24, v25);
  }
  v29 = v27 + 2;
  if (v29 >= v35)
  {
LABEL_26:
    result = (void *)swift_release();
    v30 = v33;
    v31 = v39;
    goto LABEL_28;
  }
  v28 = *(_QWORD *)(v34 + 8 * v29);
  if (v28)
  {
    v10 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v10 >= v35)
      goto LABEL_26;
    v28 = *(_QWORD *)(v34 + 8 * v10);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D9F520], &demangling cache variable for type metadata for _DictionaryStorage<String, Siri_Nlu_External_ResponseStatus.StatusCode>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Task<ConversationService.EagerResult, Error>>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t (*)(_QWORD))MEMORY[0x1E0D9C588], &demangling cache variable for type metadata for _DictionaryStorage<String, Input>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyEncodable>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ContextTypeKey, AFContextSnapshot?>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_unknownObjectRetain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, InstrumentedStack.TrackedFlowAgent>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, NSExtensionProtocol>, (void (*)(_BYTE *, uint64_t))outlined init with take of ReferenceResolutionClientProtocol);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [LNSystemProtocol : [LinkActionMetadata]]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LNSystemProtocol, [LinkActionMetadata]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment), &demangling cache variable for type metadata for _DictionaryStorage<UUID, (Input, ActingFlow, SiriEnvironment)>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment), &demangling cache variable for type metadata for _DictionaryStorage<UUID, (Input, AnyFlow, SiriEnvironment)>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Int, @Sendable ()>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  _OWORD v30[5];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, FlowPluginAndBundle>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v29 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 80 * v15;
    outlined init with copy of FlowPluginAndBundle(*(_QWORD *)(v2 + 56) + 80 * v15, (uint64_t)v30);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    v22 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v22 = v30[0];
    v23 = v30[1];
    v24 = v30[2];
    v25 = v30[4];
    v22[3] = v30[3];
    v22[4] = v25;
    v22[1] = v23;
    v22[2] = v24;
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v29;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

char *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  char *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;

  v41 = type metadata accessor for Parse();
  v37 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41);
  v40 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for UUID();
  v36 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v38 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Parse>);
  v33 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = *(_QWORD *)(v3 + 16);
  v43 = v4;
  if (!v5)
  {
    result = (char *)swift_release();
    v32 = v43;
    v31 = v33;
LABEL_25:
    *v31 = v32;
    return result;
  }
  v6 = v4;
  result = (char *)(v4 + 64);
  v8 = (char *)(v3 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    result = (char *)memmove(result, v8, 8 * v9);
    v6 = v43;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v42 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v35 = (unint64_t)(v11 + 63) >> 6;
  v14 = v36;
  v15 = v37;
  v17 = v38;
  v16 = v39;
  v18 = v41;
  v19 = v43;
  while (1)
  {
    if (v13)
    {
      v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v44 = v10;
      v21 = v20 | (v10 << 6);
      v22 = v42;
      goto LABEL_9;
    }
    v27 = v10 + 1;
    v22 = v42;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v35)
      goto LABEL_23;
    v28 = *(_QWORD *)(v34 + 8 * v27);
    v29 = v10 + 1;
    if (!v28)
    {
      v29 = v27 + 1;
      if (v27 + 1 >= v35)
        goto LABEL_23;
      v28 = *(_QWORD *)(v34 + 8 * v29);
      if (!v28)
        break;
    }
LABEL_22:
    v13 = (v28 - 1) & v28;
    v44 = v29;
    v21 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_9:
    v23 = *(_QWORD *)(v14 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v17, *(_QWORD *)(v22 + 48) + v23, v16);
    v24 = *(_QWORD *)(v15 + 72) * v21;
    v25 = *(_QWORD *)(v22 + 56) + v24;
    v26 = v40;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v40, v25, v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(_QWORD *)(v19 + 48) + v23, v17, v16);
    result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v15 + 32))(*(_QWORD *)(v19 + 56) + v24, v26, v18);
    v10 = v44;
  }
  v30 = v27 + 2;
  if (v30 >= v35)
  {
LABEL_23:
    result = (char *)swift_release();
    v31 = v33;
    v32 = v43;
    goto LABEL_25;
  }
  v28 = *(_QWORD *)(v34 + 8 * v30);
  if (v28)
  {
    v29 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    v29 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v29 >= v35)
      goto LABEL_23;
    v28 = *(_QWORD *)(v34 + 8 * v29);
    ++v30;
    if (v28)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v26 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v26 = v9;
    return result;
  }
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v27 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v19 = 16 * v16;
    v20 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + v19);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + v19) = v20;
    result = (void *)swift_retain();
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, SASRecognition>);
}

void *specialized _NativeDictionary.copy()(uint64_t (*a1)(_QWORD), uint64_t *a2, void (*a3)(uint64_t, _BYTE *), uint64_t (*a4)(_BYTE *, uint64_t))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  unint64_t v15;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void (*v31)(uint64_t, _BYTE *);
  uint64_t (*v32)(_BYTE *, uint64_t);
  _BYTE v33[32];

  v31 = a3;
  v32 = a4;
  v6 = v4;
  v7 = a1(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v29 - v9;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v11 = *v4;
  v12 = static _DictionaryStorage.copy(original:)();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v6 = v13;
    return result;
  }
  v29 = v6;
  result = (void *)(v12 + 64);
  v15 = (unint64_t)((1 << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  if (v13 != v11 || (unint64_t)result >= v11 + 64 + 8 * v15)
    result = memmove(result, (const void *)(v11 + 64), 8 * v15);
  v30 = v11 + 64;
  v17 = 0;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v11 + 16);
  v18 = 1 << *(_BYTE *)(v11 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v11 + 64);
  v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    v26 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v21)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v17;
    if (!v27)
    {
      v17 = v26 + 1;
      if (v26 + 1 >= v21)
        goto LABEL_26;
      v27 = *(_QWORD *)(v30 + 8 * v17);
      if (!v27)
        break;
    }
LABEL_25:
    v20 = (v27 - 1) & v27;
    v23 = __clz(__rbit64(v27)) + (v17 << 6);
LABEL_12:
    v24 = *(_QWORD *)(v8 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, *(_QWORD *)(v11 + 48) + v24, v7);
    v25 = 32 * v23;
    v31(*(_QWORD *)(v11 + 56) + v25, v33);
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v24, v10, v7);
    result = (void *)v32(v33, *(_QWORD *)(v13 + 56) + v25);
  }
  v28 = v26 + 2;
  if (v28 >= v21)
  {
LABEL_26:
    result = (void *)swift_release();
    v6 = v29;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v17 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v17 >= v21)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v17);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v4 = a1(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v26 - v6;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v27 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v27 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v28 = v8 + 64;
  v29 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v29)
        goto LABEL_26;
      v24 = *(_QWORD *)(v28 + 8 * v14);
      if (!v24)
        break;
    }
LABEL_25:
    v17 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v20, v4);
    v21 = 8 * v19;
    v22 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + v21);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v20, v7, v4);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + v21) = v22;
  }
  v25 = v23 + 2;
  if (v25 >= v29)
    goto LABEL_26;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = a1(0);
  v4 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v6 = (char *)&v33 - v5;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v34 = v2;
  v7 = *v2;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = *(_QWORD *)(v7 + 16);
  v38 = v8;
  if (!v9)
  {
    result = (void *)swift_release();
    v32 = v38;
    v31 = v34;
LABEL_28:
    *v31 = v32;
    return result;
  }
  v10 = v8;
  result = (void *)(v8 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    v10 = v38;
  }
  v35 = v7 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 64);
  v36 = (unint64_t)(v15 + 63) >> 6;
  v18 = v37;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      v14 = v28 + 1;
      if (v28 + 1 >= v36)
        goto LABEL_26;
      v29 = *(_QWORD *)(v35 + 8 * v14);
      if (!v29)
        break;
    }
LABEL_25:
    v17 = (v29 - 1) & v29;
    v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    v21 = 16 * v20;
    v22 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v20);
    v24 = *v22;
    v23 = v22[1];
    v25 = *(_QWORD *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 56) + v25, v18);
    v26 = v38;
    v27 = (_QWORD *)(*(_QWORD *)(v38 + 48) + v21);
    *v27 = v24;
    v27[1] = v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v26 + 56) + v25, v6, v18);
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    result = (void *)swift_release();
    v31 = v34;
    v32 = v38;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v35 + 8 * v30);
  if (v29)
  {
    v14 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v14 >= v36)
      goto LABEL_26;
    v29 = *(_QWORD *)(v35 + 8 * v14);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = type metadata accessor for UserID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v26 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)();
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v26 = v9;
    return result;
  }
  result = (id)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v27 = v7 + 64;
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(void **)(*(_QWORD *)(v7 + 56) + v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    result = v21;
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1, void (*a2)(_BYTE *, uint64_t))
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE v29[40];

  v4 = v2;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v5 = *v2;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v4 = v7;
    return result;
  }
  v27 = v4;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v28 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v15)
        goto LABEL_26;
      v25 = *(_QWORD *)(v28 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_25:
    v14 = (v25 - 1) & v25;
    v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v20 = *v19;
    v21 = v19[1];
    v22 = 40 * v17;
    outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v5 + 56) + 40 * v17, (uint64_t)v29);
    v23 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v23 = v20;
    v23[1] = v21;
    a2(v29, *(_QWORD *)(v7 + 56) + v22);
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    result = (void *)swift_release();
    v4 = v27;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v28 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t i;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v40 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v39 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v37 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v34 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)();
  v10 = *(_QWORD *)(v8 + 16);
  v43 = v9;
  if (!v10)
  {
    result = (void *)swift_release();
    v33 = v43;
    v32 = v34;
LABEL_25:
    *v32 = v33;
    return result;
  }
  v11 = v9;
  result = (void *)(v9 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    v11 = v43;
  }
  v14 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v42 = v8;
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v35 = v8 + 64;
  v36 = (unint64_t)(v15 + 63) >> 6;
  v19 = v37;
  v18 = v38;
  v20 = (uint64_t)v39;
  for (i = v43;
        ;
        result = (void *)outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v20, *(_QWORD *)(i + 56) + v28, v27))
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v14 << 6);
      v24 = v42;
      goto LABEL_9;
    }
    v29 = v14 + 1;
    v24 = v42;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v36)
      goto LABEL_23;
    v30 = *(_QWORD *)(v35 + 8 * v29);
    ++v14;
    if (!v30)
    {
      v14 = v29 + 1;
      if (v29 + 1 >= v36)
        goto LABEL_23;
      v30 = *(_QWORD *)(v35 + 8 * v14);
      if (!v30)
        break;
    }
LABEL_22:
    v17 = (v30 - 1) & v30;
    v23 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_9:
    v25 = *(_QWORD *)(v6 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v19, *(_QWORD *)(v24 + 48) + v25, v18);
    v26 = *(_QWORD *)(v24 + 56);
    v27 = v41;
    v28 = *(_QWORD *)(v40 + 72) * v23;
    outlined init with copy of ReferenceResolutionClientProtocol?(v26 + v28, v20, v41);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(i + 48) + v25, v19, v18);
  }
  v31 = v29 + 2;
  if (v31 >= v36)
  {
LABEL_23:
    result = (void *)swift_release();
    v32 = v34;
    v33 = v43;
    goto LABEL_25;
  }
  v30 = *(_QWORD *)(v35 + 8 * v31);
  if (v30)
  {
    v14 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v14 >= v36)
      goto LABEL_23;
    v30 = *(_QWORD *)(v35 + 8 * v14);
    ++v31;
    if (v30)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized static ConversationMUXUtils.getAllUserIds(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  void (*v26)(uint64_t, uint64_t);
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;

  v0 = type metadata accessor for UserID();
  v50 = *(_QWORD *)(v0 - 8);
  v1 = MEMORY[0x1E0C80A78](v0);
  v47 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = MEMORY[0x1E0C80A78](v1);
  v46 = (char *)&v40 - v4;
  MEMORY[0x1E0C80A78](v3);
  v45 = (char *)&v40 - v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v48 = (char *)&v40 - v10;
  v11 = MUXContextMessage.userIdToHomeMember.getter();
  v12 = *(_QWORD *)(v11 + 64);
  v42 = v11 + 64;
  v51 = MEMORY[0x1E0DEE9E8];
  v13 = 1 << *(_BYTE *)(v11 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v43 = (unint64_t)(v13 + 63) >> 6;
  v44 = v11;
  v41 = v43 - 1;
  result = swift_bridgeObjectRetain();
  v49 = 0;
  v17 = (uint64_t *)&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo);
  v18 = v50;
  v19 = v45;
  v20 = (uint64_t)v46;
  if (!v15)
    goto LABEL_8;
LABEL_6:
  v27 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  v28 = (uint64_t)v48;
  v29 = v27 | (v49 << 6);
  while (2)
  {
    v30 = v44;
    (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v9, *(_QWORD *)(v44 + 48) + *(_QWORD *)(v50 + 72) * v29, v0);
    v31 = *(_QWORD *)(v30 + 56);
    v32 = __swift_instantiateConcreteTypeFromMangledName(v17);
    v33 = *(void **)(v31 + 8 * v29);
    *(_QWORD *)&v9[*(int *)(v32 + 48)] = v33;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v9, 0, 1, v32);
    v34 = v33;
    while (1)
    {
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v9, v28, &demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
      v39 = __swift_instantiateConcreteTypeFromMangledName(v17);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v28, 1, v39) == 1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return v51;
      }
      v21 = *(void **)(v28 + *(int *)(v39 + 48));
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v19, v28, v0);
      v22 = v9;
      v23 = v17;
      v24 = v47;
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v47, v19, v0);
      v25 = v24;
      v17 = v23;
      v9 = v22;
      specialized Set._Variant.insert(_:)(v20, v25);

      v26 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v26(v20, v0);
      result = ((uint64_t (*)(char *, uint64_t))v26)(v19, v0);
      if (v15)
        goto LABEL_6;
LABEL_8:
      v28 = (uint64_t)v48;
      v35 = v49 + 1;
      if (__OFADD__(v49, 1))
      {
        __break(1u);
        goto LABEL_32;
      }
      if (v35 < v43)
      {
        v36 = *(_QWORD *)(v42 + 8 * v35);
        if (v36)
          goto LABEL_11;
        v37 = v49 + 2;
        ++v49;
        if (v35 + 1 < v43)
        {
          v36 = *(_QWORD *)(v42 + 8 * v37);
          if (v36)
            goto LABEL_14;
          v49 = v35 + 1;
          if (v35 + 2 < v43)
          {
            v36 = *(_QWORD *)(v42 + 8 * (v35 + 2));
            if (v36)
            {
              v35 += 2;
              goto LABEL_11;
            }
            v49 = v35 + 2;
            if (v35 + 3 < v43)
            {
              v36 = *(_QWORD *)(v42 + 8 * (v35 + 3));
              if (v36)
              {
                v35 += 3;
                goto LABEL_11;
              }
              v37 = v35 + 4;
              v49 = v35 + 3;
              if (v35 + 4 < v43)
                break;
            }
          }
        }
      }
LABEL_28:
      v38 = __swift_instantiateConcreteTypeFromMangledName(v17);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v9, 1, 1, v38);
      v15 = 0;
    }
    v36 = *(_QWORD *)(v42 + 8 * v37);
    if (v36)
    {
LABEL_14:
      v35 = v37;
LABEL_11:
      v15 = (v36 - 1) & v36;
      v29 = __clz(__rbit64(v36)) + (v35 << 6);
      v49 = v35;
      continue;
    }
    break;
  }
  while (1)
  {
    v35 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v35 >= v43)
    {
      v49 = v41;
      goto LABEL_28;
    }
    v36 = *(_QWORD *)(v42 + 8 * v35);
    ++v37;
    if (v36)
      goto LABEL_11;
  }
LABEL_32:
  __break(1u);
  return result;
}

void specialized static ConversationMUXUtils.getAllKnownUserIds(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  char v49;
  int64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69[32];
  _BYTE v70[32];
  uint64_t v71;

  v0 = type metadata accessor for UserID();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2);
  v62 = (uint64_t)&v51 - v6;
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v51 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v51 - v13;
  v15 = MUXContextMessage.userIdToHomeMember.getter();
  v71 = MEMORY[0x1E0DEE9E8];
  v16 = *(_QWORD *)(v15 + 64);
  v54 = v15 + 64;
  v17 = 1 << *(_BYTE *)(v15 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v20 = (unint64_t)(v17 + 63) >> 6;
  v51 = v20 - 1;
  v21 = swift_bridgeObjectRetain();
  v22 = 0;
  v59 = v20;
  v53 = v20 - 6;
  v63 = v21;
  v52 = v21 + 112;
  v61 = MEMORY[0x1E0DEE9B8] + 8;
  v57 = v1;
  v58 = v0;
  v56 = v4;
  v55 = v8;
  v60 = v12;
  v64 = v14;
  while (v19)
  {
    v65 = (v19 - 1) & v19;
    v66 = v22;
    v25 = __clz(__rbit64(v19)) | (v22 << 6);
LABEL_10:
    v26 = v63;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v12, *(_QWORD *)(v63 + 48) + *(_QWORD *)(v1 + 72) * v25, v0);
    v27 = *(_QWORD *)(v26 + 56);
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    v29 = *(void **)(v27 + 8 * v25);
    *(_QWORD *)&v12[*(int *)(v28 + 48)] = v29;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v12, 0, 1, v28);
    v30 = v29;
LABEL_17:
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v14, 1, v35) == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    v36 = *(void **)&v14[*(int *)(v35 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v8, v14, v0);
    v37 = objc_msgSend(v36, sel_attributes);
    if (!v37)
      goto LABEL_6;
    v38 = v37;
    v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v40 = *(_QWORD *)(v39 + 16);
    if (!v40)
    {
      swift_bridgeObjectRelease();
LABEL_5:
      v12 = v60;
LABEL_6:
      (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v8, v0);
      v23 = v62;
      specialized Set._Variant.insert(_:)(v62, v4);

      v24 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
      v24(v23, v0);
      v24((uint64_t)v8, v0);
      goto LABEL_7;
    }
    v41 = v39 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of Any(v41, (uint64_t)v70);
      outlined init with copy of Any((uint64_t)v70, (uint64_t)v69);
      v42 = swift_dynamicCast();
      v43 = v68;
      if (v42)
        v44 = v67;
      else
        v44 = 0;
      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v42)
        v47 = v43 == 0;
      else
        v47 = 1;
      if (v47)
      {
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
        goto LABEL_22;
      }
      if (v44 == v45 && v43 == v46)
        break;
      v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
      if ((v49 & 1) != 0)
        goto LABEL_38;
LABEL_22:
      v41 += 32;
      if (!--v40)
      {
        swift_bridgeObjectRelease_n();
        v1 = v57;
        v0 = v58;
        v4 = v56;
        v8 = v55;
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease_n();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
LABEL_38:
    swift_bridgeObjectRelease_n();
    v1 = v57;
    v0 = v58;
    v8 = v55;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v55, v58);

    v4 = v56;
    v12 = v60;
LABEL_7:
    v14 = v64;
    v19 = v65;
    v22 = v66;
  }
  v31 = v22 + 1;
  if (!__OFADD__(v22, 1))
  {
    if (v31 >= v59)
    {
      v33 = v22;
LABEL_16:
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v12, 1, 1, v34);
      v65 = 0;
      v66 = v33;
      goto LABEL_17;
    }
    v32 = *(_QWORD *)(v54 + 8 * v31);
    if (v32)
      goto LABEL_14;
    v50 = v22 + 2;
    v33 = v22 + 1;
    if ((uint64_t)(v22 + 2) >= v59)
      goto LABEL_16;
    v32 = *(_QWORD *)(v54 + 8 * v50);
    if (!v32)
    {
      v33 = v22 + 2;
      if ((uint64_t)(v22 + 3) >= v59)
        goto LABEL_16;
      v32 = *(_QWORD *)(v54 + 8 * (v22 + 3));
      if (v32)
      {
        v31 = v22 + 3;
        goto LABEL_14;
      }
      v50 = v22 + 4;
      v33 = v22 + 3;
      if ((uint64_t)(v22 + 4) >= v59)
        goto LABEL_16;
      v32 = *(_QWORD *)(v54 + 8 * v50);
      if (!v32)
      {
        v31 = v22 + 5;
        v33 = v22 + 4;
        if ((uint64_t)(v22 + 5) >= v59)
          goto LABEL_16;
        v32 = *(_QWORD *)(v54 + 8 * v31);
        if (!v32)
        {
          while (v53 != v22)
          {
            v32 = *(_QWORD *)(v52 + 8 * v22++);
            if (v32)
            {
              v31 = v22 + 5;
              goto LABEL_14;
            }
          }
          v33 = v51;
          goto LABEL_16;
        }
        goto LABEL_14;
      }
    }
    v31 = v50;
LABEL_14:
    v65 = (v32 - 1) & v32;
    v66 = v31;
    v25 = __clz(__rbit64(v32)) + (v31 << 6);
    goto LABEL_10;
  }
  __break(1u);
}

id specialized static ConversationMUXUtils.voiceIdentificationSignal(withRefId:requestType:isPersonalRequest:isServerFallback:voiceIdClassification:voiceIdOverridden:selectedUserId:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t a6, int a7, int a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  const char *v26;
  char v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  _BYTE v49[4];
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v55 = a7;
  v54 = a6;
  v53 = a4;
  v51 = a1;
  v52 = a2;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v11);
  v13 = &v49[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for UUID();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = &v49[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for RequestType();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = &v49[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a5 & 1) == 0)
  {
    v50 = a8;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E0D9E8A0], v18);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D8]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v58 == v56 && v59 == v57)
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v21, v18);
    }
    else
    {
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v19 + 8))(v21, v18);
      if ((v27 & 1) == 0)
      {
        if (one-time initialization token for conversationBridge != -1)
          swift_once();
        v43 = type metadata accessor for Logger();
        __swift_project_value_buffer(v43, (uint64_t)static Logger.conversationBridge);
        v23 = Logger.logObject.getter();
        v24 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v23, v24))
          goto LABEL_26;
        v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v25 = 0;
        v26 = "Not sending VoiceIdentification since this is not a speech request";
        goto LABEL_25;
      }
    }
    v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88418]), sel_init);
    UUID.init()();
    v29 = UUID.uuidString.getter();
    v31 = v30;
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v17, v14);
    v32 = (void *)MEMORY[0x1B5E432E8](v29, v31);
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_setAceId_, v32);

    v33 = v28;
    v34 = (void *)MEMORY[0x1B5E432E8](v51, v52);
    objc_msgSend(v33, sel_setRefId_, v34);

    objc_msgSend(v33, sel_setRecordUserAudio_, (v53 & 1) == 0);
    v36 = (v55 & 1) == 0 && (unint64_t)(v54 - 3) < 2;
    outlined init with copy of ReferenceResolutionClientProtocol?(a9, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    v37 = type metadata accessor for UserID();
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v38 + 48))(v13, 1, v37) == 1)
    {
      outlined destroy of UserID?((uint64_t)v13);
    }
    else
    {
      v39 = UserID.sharedUserId.getter();
      v41 = v40;
      (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v13, v37);
      if (v36)
      {
        v42 = v50;
        if ((v50 & 1) == 0)
        {
          v45 = MEMORY[0x1B5E432E8](v39, v41);
          swift_bridgeObjectRelease();
          objc_msgSend(v33, sel_setSelectedSharedUserId_, v45);
LABEL_34:

          return v33;
        }
        swift_bridgeObjectRelease();
LABEL_29:
        if (one-time initialization token for conversationBridge != -1)
          swift_once();
        v44 = type metadata accessor for Logger();
        __swift_project_value_buffer(v44, (uint64_t)static Logger.conversationBridge);
        v45 = Logger.logObject.getter();
        v46 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v45, v46))
        {
          v47 = swift_slowAlloc();
          *(_DWORD *)v47 = 67109376;
          LODWORD(v58) = v36;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v47 + 8) = 1024;
          LODWORD(v58) = v42 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1B4BE6000, v45, v46, "Not updating selectedSharedUserId in VoiceIdentificationSignal because either selectedUserId is nil or isConfidentEnough: %{BOOL}d, voiceIDOverridden: %{BOOL}d", (uint8_t *)v47, 0xEu);
          MEMORY[0x1B5E44758](v47, -1, -1);
        }
        goto LABEL_34;
      }
      swift_bridgeObjectRelease();
    }
    v42 = v50;
    goto LABEL_29;
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v23, v24))
    goto LABEL_26;
  v25 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v25 = 0;
  v26 = "Not sending VoiceIdenfiticationSignal in case of server fallback";
LABEL_25:
  _os_log_impl(&dword_1B4BE6000, v23, v24, v26, v25, 2u);
  MEMORY[0x1B5E44758](v25, -1, -1);
LABEL_26:

  return 0;
}

uint64_t specialized static ConversationMUXUtils.isOwner(_:)(void *a1)
{
  uint64_t result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[32];

  result = (uint64_t)objc_msgSend(a1, sel_attributes);
  if (!result)
    return result;
  v2 = (void *)result;
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v5 = v3 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of Any(v5, (uint64_t)v16);
    outlined init with copy of Any((uint64_t)v16, (uint64_t)v15);
    v6 = swift_dynamicCast();
    if (v6)
      v7 = v13;
    else
      v7 = 0;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v6)
      v10 = v14 == 0;
    else
      v10 = 1;
    if (v10)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      goto LABEL_5;
    }
    if (v7 == v8 && v14 == v9)
      break;
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    if ((v12 & 1) != 0)
      goto LABEL_23;
LABEL_5:
    v5 += 32;
    if (!--v4)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease_n();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
LABEL_23:
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t specialized static ConversationMUXUtils.getUserIdForUnknownUserAsString(from:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char **v6;
  id v7;
  void *v8;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char v21;
  id v22;
  uint64_t v23;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[32];
  _BYTE v33[32];

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_35;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v2)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_3:
  v3 = 0;
  v4 = v1 & 0xC000000000000001;
  v5 = v1 + 32;
  v6 = &selRef_reason;
  v28 = v1;
  v26 = v1 & 0xC000000000000001;
  v27 = v2;
  v25 = v1 + 32;
  while (1)
  {
    if (v4)
      v7 = (id)MEMORY[0x1B5E43B94](v3, v1);
    else
      v7 = *(id *)(v5 + 8 * v3);
    v8 = v7;
    if (__OFADD__(v3++, 1))
    {
      __break(1u);
LABEL_35:
      swift_bridgeObjectRetain();
      v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2)
        goto LABEL_36;
      goto LABEL_3;
    }
    v10 = objc_msgSend(v7, v6[97]);
    if (v10)
      break;

LABEL_5:
    if (v3 == v2)
      goto LABEL_36;
  }
  v11 = v10;
  v29 = v8;
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
  {

    swift_bridgeObjectRelease();
LABEL_30:
    v6 = &selRef_reason;
    goto LABEL_5;
  }
  v14 = v12 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of Any(v14, (uint64_t)v33);
    outlined init with copy of Any((uint64_t)v33, (uint64_t)v32);
    v15 = swift_dynamicCast();
    if (v15)
      v16 = v30;
    else
      v16 = 0;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v15)
      v19 = v31 == 0;
    else
      v19 = 1;
    if (v19)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
      goto LABEL_14;
    }
    if (v16 == v17 && v31 == v18)
      break;
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
    if ((v21 & 1) != 0)
      goto LABEL_32;
LABEL_14:
    v14 += 32;
    if (!--v13)
    {

      swift_bridgeObjectRelease_n();
      v2 = v27;
      v1 = v28;
      v5 = v25;
      v4 = v26;
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRelease_n();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
LABEL_32:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend(v29, sel_sharedUserId);

  if (!v22)
    return 0;
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v23;
}

ValueMetadata *type metadata accessor for ConversationMUXUtils()
{
  return &type metadata for ConversationMUXUtils;
}

uint64_t outlined init with copy of StringKeyedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StringKeyedValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of StringKeyedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StringKeyedValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of FlowPluginAndBundle(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SiriRequestContext(a2, a1);
  return a2;
}

uint64_t ConversationOutputSubmitter.__allocating_init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:featureChecker:)(uint64_t a1, char a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v8 = swift_allocObject();
  v9 = *(_QWORD *)(a4 + 24);
  v10 = *(_QWORD *)(a4 + 32);
  v11 = __swift_mutable_project_boxed_opaque_existential_1(a4, v9);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  v15 = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:featureChecker:)(a1, a2, a3, (uint64_t)v13, v8, v9, v10);
  __swift_destroy_boxed_opaque_existential_1(a4);
  return v15;
}

uint64_t ConversationOutputSubmitter.asyncWork.getter()
{
  return swift_retain();
}

uint64_t ConversationOutputSubmitter.requestDispatcherServiceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationOutputSubmitter.messagePublisher.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 32, a1);
}

uint64_t ConversationOutputSubmitter.isMUXEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 72) = a1;
  return result;
}

uint64_t (*ConversationOutputSubmitter.isMUXEnabled.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ConversationOutputSubmitter.selfReflectionAgent.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t ConversationOutputSubmitter.selfReflectionAgent.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 80) = a1;
  return swift_release();
}

uint64_t (*ConversationOutputSubmitter.selfReflectionAgent.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationOutputSubmitter.flowCommandCompletions.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t ConversationOutputSubmitter.flowCommandCompletions.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 88) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ConversationOutputSubmitter.flowCommandCompletions.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationOutputSubmitter.plannerTimeout.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 96);
}

uint64_t ConversationOutputSubmitter.plannerTimeout.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 96) = a1;
  return result;
}

uint64_t (*ConversationOutputSubmitter.plannerTimeout.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:featureChecker:)(uint64_t a1, char a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = *(_QWORD *)(a4 + 24);
  v10 = *(_QWORD *)(a4 + 32);
  v11 = __swift_mutable_project_boxed_opaque_existential_1(a4, v9);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  v15 = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:featureChecker:)(a1, a2, a3, (uint64_t)v13, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1(a4);
  return v15;
}

uint64_t ConversationOutputSubmitter.__allocating_init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:selfReflection:featureChecker:)(uint64_t a1, char a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v10 = swift_allocObject();
  v11 = *(_QWORD *)(a5 + 24);
  v12 = *(_QWORD *)(a5 + 32);
  v13 = __swift_mutable_project_boxed_opaque_existential_1(a5, v11);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  v17 = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:selfReflection:featureChecker:)(a1, a2, a3, a4, (uint64_t)v15, v10, v11, v12);
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v17;
}

uint64_t ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:selfReflection:featureChecker:)(uint64_t a1, char a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v11 = *(_QWORD *)(a5 + 24);
  v12 = *(_QWORD *)(a5 + 32);
  v13 = __swift_mutable_project_boxed_opaque_existential_1(a5, v11);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  v17 = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:selfReflection:featureChecker:)(a1, a2, a3, a4, (uint64_t)v15, v5, v11, v12);
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v17;
}

uint64_t ConversationOutputSubmitter.handleMitigation(mitigationResult:executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(id, _QWORD), uint64_t a16)
{
  uint64_t v16;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  _QWORD *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  uint64_t inited;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  objc_class *v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  void *v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(id, _QWORD);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100[5];

  v96 = a7;
  v97 = a3;
  v98 = (char *)a2;
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_QWORD *)(v23 + 64);
  v25 = MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *a1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 168))(v25);
  if (result)
  {
    v29 = result;
    v89 = a5;
    v90 = v16;
    v91 = (void *)a8;
    v93 = a4;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    v88 = __swift_project_value_buffer(v30, (uint64_t)static Logger.conversationBridge);
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.debug.getter();
    v33 = os_log_type_enabled(v31, v32);
    v95 = v29;
    v92 = a6;
    if (v33)
    {
      v34 = swift_slowAlloc();
      v35 = swift_slowAlloc();
      v100[0] = v35;
      *(_DWORD *)v34 = 136315394;
      v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000BFLL, 0x80000001B4EF9D00, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 12) = 2080;
      LOBYTE(v99) = v27;
      v36 = SelfReflectionAgentDecision.description.getter();
      v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v31, v32, "ConversationOutputSubmitter.%s self reflection decision: <%s>", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v35, -1, -1);
      MEMORY[0x1B5E44758](v34, -1, -1);
    }

    v94 = a16;
    switch(v27)
    {
      case 2:
        return swift_release();
      case 3:
      case 6:
        if (*(_QWORD *)&v98[OBJC_IVAR___SKRExecutionOutput_command])
        {
          v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D87FF8]), sel_init);
          a15(v38, 0);

        }
        else
        {
          a15(0, 0);
        }
        break;
      case 4:
        v85 = a12;
        v86 = a10;
        v83 = a15;
        specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/ConversationOutputSubmitter.swift", 48, 2, (uint64_t)"handleMitigation(mitigationResult:executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)", 191, 2, v88);
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v54 = SelfReflectionAgent.createCloseAssitantAction(closeAssistantReason:)(v52, v53);
        swift_bridgeObjectRelease();
        v55 = SelfReflectionAgent.createCancelRequestAction()();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1B4EE7750;
        *(_QWORD *)(inited + 32) = v54;
        *(_QWORD *)(inited + 40) = v55;
        v100[0] = inited;
        specialized Array._endMutation()();
        v57 = v100[0];
        v58 = *(_QWORD *)&v98[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
        v88 = *(_QWORD *)&v98[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
        v87 = a13;
        if ((v100[0] & 0xC000000000000001) != 0)
        {
          v59 = (id)MEMORY[0x1B5E43B94](0, v100[0]);
        }
        else
        {
          if (*(_QWORD *)((v100[0] & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
          {
            __break(1u);
            JUMPOUT(0x1B4D4ABC0);
          }
          v59 = *(id *)(v100[0] + 32);
        }
        v60 = v59;
        v61 = (objc_class *)type metadata accessor for ExecutionOutput();
        v62 = objc_allocWithZone(v61);
        v63 = v60;
        swift_bridgeObjectRetain();
        v64 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(v60, 0, 0, 0, 0, 0, 0, 0, 0, 0, v88, v58);

        specialized ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)((uint64_t)v64, v97, v93, v89, v92, v96, (uint64_t)v91, a9, v86, a11, v85, v87, a14, v90);
        if ((v57 & 0xC000000000000001) != 0)
          v65 = (id)MEMORY[0x1B5E43B94](1, v57);
        else
          v65 = *(id *)(v57 + 40);
        v77 = v65;
        v78 = objc_allocWithZone(v61);
        v79 = v77;
        swift_bridgeObjectRetain();
        v80 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(v77, 0, 0, 0, 0, 0, 0, 0, 0, 0, v88, v58);

        specialized ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)((uint64_t)v80, v97, v93, v89, v92, v96, (uint64_t)v91, a9, v86, a11, v85, v87, a14, v90);
        swift_bridgeObjectRelease();

        if (*(_QWORD *)&v98[OBJC_IVAR___SKRExecutionOutput_command])
        {
          v76 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D87FF8]), sel_init);
          v83(v76, 0);
          goto LABEL_20;
        }
        v83(0, 0);
        break;
      case 5:
        v81 = v94;
        v66 = (uint64_t)v98;
        v85 = a12;
        v84 = a9;
        v67 = v92;
        v68 = v89;
        v88 = a14;
        v87 = a13;
        v69 = v90;
        v70 = (uint64_t)v91;
        v94 = a11;
        ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)((uint64_t)v98, v97, v93, v89, v92, v96, (uint64_t)v91, a9, a10, a11, a12, a13, a14, (uint64_t)a15, v81);
        SelfReflectionAgent.createRevealRecognizedSpeech()();
        v72 = v71;
        v74 = *(_QWORD *)(v66 + OBJC_IVAR___SKRExecutionOutput_executionRequestId);
        v73 = *(_QWORD *)(v66 + OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8);
        objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
        v75 = v72;
        swift_bridgeObjectRetain();
        v76 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(v72, 0, 0, 0, 0, 0, 0, 0, 0, 0, v74, v73);

        specialized ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)((uint64_t)v76, v97, v93, v68, v67, v96, v70, v84, a10, v94, v85, v87, v88, v69);
LABEL_20:

        break;
      default:
        LODWORD(v88) = v27 & 1;
        v86 = a10;
        outlined init with copy of ReferenceResolutionClientProtocol?(v96, (uint64_t)v100, &demangling cache variable for type metadata for ContextUpdating?);
        outlined init with copy of ReferenceResolutionClientProtocol?(a12, (uint64_t)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v39 = (*(unsigned __int8 *)(v23 + 80) + 152) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
        v87 = a13;
        v40 = (v24 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
        v41 = (_QWORD *)swift_allocObject();
        v42 = v94;
        v41[2] = a15;
        v41[3] = v42;
        v43 = v97;
        v44 = v98;
        v45 = v90;
        v41[4] = v98;
        v41[5] = v45;
        v46 = v93;
        v41[6] = v43;
        v41[7] = v46;
        v47 = v92;
        v41[8] = v89;
        v41[9] = v47;
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v100, (uint64_t)(v41 + 10), &demangling cache variable for type metadata for ContextUpdating?);
        v48 = v91;
        v41[15] = v91;
        v41[16] = a9;
        v41[17] = v86;
        v41[18] = a11;
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v26, (uint64_t)v41 + v39, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v49 = (_QWORD *)((char *)v41 + v40);
        *v49 = v87;
        v49[1] = a14;
        swift_bridgeObjectRetain();
        swift_retain();
        v50 = v44;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v51 = v48;
        swift_retain();
        swift_bridgeObjectRetain();
        SelfReflectionAgent.createAskToRepeatAction(revealSpeech:_:)(v88, (void (*)(_QWORD, _QWORD, _QWORD, void *))partial apply for closure #1 in ConversationOutputSubmitter.handleMitigation(mitigationResult:executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:), (uint64_t)v41);
        swift_release();
        break;
    }
    return swift_release();
  }
  return result;
}

void closure #1 in ConversationOutputSubmitter.handleMitigation(mitigationResult:executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(void *a1, void *a2, void *a3, void *a4, void (*a5)(id, _QWORD), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  id v36;
  unint64_t v37;
  id v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  void *v54;
  void *v55;
  Swift::String v56;
  uint64_t v57;
  unint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v67;
  unint64_t v68;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v62 = a7;
    v28 = (uint8_t *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    *(_DWORD *)v28 = 136315138;
    v67 = v29;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000BFLL, 0x80000001B4EF9D00, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v26, v27, "ConversationOutputSubmitter.%s handling ask to repeat action", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v29, -1, -1);
    v30 = v28;
    a7 = v62;
    MEMORY[0x1B5E44758](v30, -1, -1);
  }

  if (a1)
  {
    if (a2)
    {
      v31 = a7 + OBJC_IVAR___SKRExecutionOutput_executionRequestId;
      v63 = a7;
      v33 = *(_QWORD *)(a7 + OBJC_IVAR___SKRExecutionOutput_executionRequestId);
      v32 = *(_QWORD *)(v31 + 8);
      v34 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
      v35 = a2;
      outlined copy of (SAUIAddViews, SAUIRevealRecognizedSpeech?, ExecutionContextUpdate)?(a1, a2, a3);
      swift_bridgeObjectRetain();
      v61 = v33;
      a7 = v63;
      v36 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(a2, 0, 0, 0, 0, 0, 0, 0, 0, 0, v61, v32);

      specialized ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)((uint64_t)v36, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a8);
    }
    else
    {
      v47 = a1;
      v48 = a3;
    }
    v50 = *(_QWORD *)(a7 + OBJC_IVAR___SKRExecutionOutput_executionRequestId);
    v49 = *(_QWORD *)(a7 + OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8);
    objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
    v51 = a1;
    v52 = a3;
    swift_bridgeObjectRetain();
    v53 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(a1, a3, 0, 0, 0, 0, 0, 0, 0, 0, v50, v49);

    ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)((uint64_t)v53, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, (uint64_t)a5, a6);
  }
  else
  {
    v37 = 0xD000000000000037;
    v38 = a4;
    v39 = a4;
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc();
      v43 = swift_slowAlloc();
      v67 = v43;
      *(_DWORD *)v42 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000BFLL, 0x80000001B4EF9D00, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2080;
      if (a4)
      {
        swift_getErrorValue();
        v44 = Error.localizedDescription.getter();
        v46 = v45;
      }
      else
      {
        v46 = 0x80000001B4EF9E60;
        v44 = 0xD000000000000037;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v40, v41, "ConversationOutputSubmitter.%s error: %s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v43, -1, -1);
      MEMORY[0x1B5E44758](v42, -1, -1);
    }
    else
    {

    }
    v67 = 0;
    v68 = 0xE000000000000000;
    if (a4)
    {
      swift_getErrorValue();
      v37 = Error.localizedDescription.getter();
      v55 = v54;
    }
    else
    {
      v55 = (void *)0x80000001B4EF9E60;
    }
    v56._countAndFlagsBits = v37;
    v56._object = v55;
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    v57 = v67;
    v58 = v68;
    v59 = objc_allocWithZone(MEMORY[0x1E0D87FE8]);
    v60 = (void *)MEMORY[0x1B5E432E8](v57, v58);
    swift_bridgeObjectRelease();
    v53 = objc_msgSend(v59, sel_initWithReason_, v60);

    a5(v53, 0);
  }

}

uint64_t ConversationOutputSubmitter.submit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  os_log_type_t type;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v64[2];

  v16 = v15;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  v21 = a1;
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v55 = a7;
    v24 = swift_slowAlloc();
    v25 = swift_slowAlloc();
    v64[0] = v25;
    *(_DWORD *)v24 = 136315394;
    v26 = *(void **)&v21[OBJC_IVAR___SKRExecutionOutput_command];
    v57 = v16;
    if (v26)
    {
      v27 = objc_msgSend(v26, sel_aceId);
      if (v27)
      {
        v28 = v27;
        v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v31 = v30;

      }
      else
      {
        v31 = 0xE300000000000000;
        v29 = 7104878;
      }
    }
    else
    {
      v29 = 7104878;
      v31 = 0xE300000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    if (a3)
      v32 = a2;
    else
      v32 = 7104878;
    if (a3)
      v33 = a3;
    else
      v33 = 0xE300000000000000;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v22, v23, "About to submit ExecutionOutput with AceCommand aceId: %s for requestId:<%s>", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v25, -1, -1);
    MEMORY[0x1B5E44758](v24, -1, -1);

    a7 = v55;
    v16 = v57;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v34 = a12;
  v35 = a10;
  v36 = a11;
  v37 = (*(uint64_t (**)(void))(*(_QWORD *)v16 + 168))();
  if (!v37)
    return ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)((uint64_t)v21, a2, a3, a4, a5, a6, a7, a8, a9, v35, v36, v34, a13, a14, a15);
  (*(void (**)(uint64_t *__return_ptr, char *))(*(_QWORD *)v37 + 424))(v64, v21);
  v54 = LOBYTE(v64[0]);
  v38 = v21;
  swift_bridgeObjectRetain_n();
  v39 = v38;
  v40 = Logger.logObject.getter();
  v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v56 = a7;
    v42 = swift_slowAlloc();
    v52 = (_QWORD *)swift_slowAlloc();
    v53 = swift_slowAlloc();
    v64[0] = v53;
    *(_DWORD *)v42 = 136315650;
    v58 = v16;
    v43 = SelfReflectionAgentDecision.description.getter();
    type = v41;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 12) = 2080;
    if (a3)
      v45 = a2;
    else
      v45 = 7104878;
    if (a3)
      v46 = a3;
    else
      v46 = 0xE300000000000000;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 22) = 2112;
    v47 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v52 = v39;

    v16 = v58;
    _os_log_impl(&dword_1B4BE6000, v40, type, "Self reflection decision: <%s> for requestId:<%s> execution output: %@", (uint8_t *)v42, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v52, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v53, -1, -1);
    v48 = v42;
    a7 = v56;
    MEMORY[0x1B5E44758](v48, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v49 = v39;
  v36 = a11;
  v35 = a10;
  v34 = a12;
  if (v54 == 2)
  {
    swift_release();
    return ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)((uint64_t)v21, a2, a3, a4, a5, a6, a7, a8, a9, v35, v36, v34, a13, a14, a15);
  }
  LOBYTE(v64[0]) = v54;
  (*(void (**)(uint64_t *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 256))(v64, v49, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return swift_release();
}

uint64_t specialized ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v21;
  uint64_t (*v22)(void);
  id v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;

  outlined init with copy of ReferenceResolutionClientProtocol?(a6, (uint64_t)&v37, &demangling cache variable for type metadata for ContextUpdating?);
  v36 = a4;
  if (v38)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v37, (uint64_t)v39);
    if (a8)
    {
      v21 = *(void **)(a1 + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
      if (v21)
      {
        v34 = a5;
        v35 = a7;
        v22 = *(uint64_t (**)(void))(*(_QWORD *)a14 + 144);
        swift_retain();
        v23 = v21;
        v24 = a8;
        v25 = v22();
        v26 = ContextUpdateScope.toExecutionContextUpdateScope(isMUXEnabled:)(v25 & 1);
        v28 = v40;
        v27 = v41;
        __swift_project_boxed_opaque_existential_1(v39, v40);
        (*(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8))(v23, v24, v26, v28, v27);

        a7 = v35;
        a5 = v34;
      }
      else
      {
        swift_retain();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      swift_release();
      goto LABEL_14;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v37, &demangling cache variable for type metadata for ContextUpdating?);
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.conversationBridge);
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v32 = 0;
    _os_log_impl(&dword_1B4BE6000, v30, v31, "Not applying any context but just submitting ExecutionOutput since ContextUpdater or metadata or both are nil", v32, 2u);
    MEMORY[0x1B5E44758](v32, -1, -1);
  }

LABEL_14:
  ConversationOutputSubmitter.sendOutputMessagesIfNecessary(output:requestId:commandExecutionInfo:assistantId:sessionId:invocationId:)(a1, a2, a3, a7, a9, a10, a11);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(_QWORD), _QWORD))(*(_QWORD *)a14 + 296))(*(_QWORD *)(a1 + OBJC_IVAR___SKRExecutionOutput_command), a2, a3, v36, a5, a7, a9, a10, a11, destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions, 0);
}

uint64_t ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v24;
  void *v25;
  uint64_t (*v26)(void);
  id v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;

  v16 = v15;
  v24 = a14;
  outlined init with copy of ReferenceResolutionClientProtocol?(a6, (uint64_t)&v40, &demangling cache variable for type metadata for ContextUpdating?);
  v39 = a5;
  v38 = a4;
  if (v41)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v40, (uint64_t)v42);
    if (a8)
    {
      v25 = *(void **)(a1 + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
      if (v25)
      {
        v37 = a7;
        v26 = *(uint64_t (**)(void))(*(_QWORD *)v16 + 144);
        swift_retain();
        v27 = v25;
        v28 = v26();
        v29 = ContextUpdateScope.toExecutionContextUpdateScope(isMUXEnabled:)(v28 & 1);
        v31 = v43;
        v30 = v44;
        __swift_project_boxed_opaque_existential_1(v42, v43);
        (*(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8))(v27, a8, v29, v31, v30);

        v24 = a14;
        a7 = v37;
      }
      else
      {
        swift_retain();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
      swift_release();
      goto LABEL_14;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v40, &demangling cache variable for type metadata for ContextUpdating?);
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v35 = 0;
    _os_log_impl(&dword_1B4BE6000, v33, v34, "Not applying any context but just submitting ExecutionOutput since ContextUpdater or metadata or both are nil", v35, 2u);
    MEMORY[0x1B5E44758](v35, -1, -1);
  }

LABEL_14:
  ConversationOutputSubmitter.sendOutputMessagesIfNecessary(output:requestId:commandExecutionInfo:assistantId:sessionId:invocationId:)(a1, a2, a3, a7, a9, a10, a11);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 296))(*(_QWORD *)(a1 + OBJC_IVAR___SKRExecutionOutput_command), a2, a3, v38, v39, a7, a9, a10, a11, v24, a15);
}

void ConversationOutputSubmitter.flowOutputCompleted(flowOutputMessageId:result:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t);
  id v30;
  char *v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  os_log_t v35;
  uint64_t v36;
  void (*v37)(uint64_t *, _QWORD);
  void (*v38)(uint64_t *, uint64_t *);
  NSObject *v39;
  os_log_type_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  os_log_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[5];

  v4 = v3;
  v58[4] = *MEMORY[0x1E0C80C00];
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v55 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v47 - v12;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
  v52 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v52(v13, a1, v8);
  v16 = a2;
  v17 = a3;
  v18 = v16;
  v19 = a3;
  v20 = v18;
  v21 = a3;
  v22 = v20;
  v23 = a3;
  v53 = v15;
  v24 = Logger.logObject.getter();
  v54 = static os_log_type_t.debug.getter();
  v25 = os_log_type_enabled(v24, (os_log_type_t)v54);
  v56 = (uint64_t)a2;
  if (v25)
  {
    v49 = v24;
    v50 = v4;
    v51 = a1;
    v26 = swift_slowAlloc();
    v47 = (_QWORD *)swift_slowAlloc();
    v48 = swift_slowAlloc();
    v58[0] = v48;
    *(_DWORD *)v26 = 136315650;
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v27 = dispatch thunk of CustomStringConvertible.description.getter();
    v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v29 = *(void (**)(char *, uint64_t))(v9 + 8);
    v29(v13, v8);
    *(_WORD *)(v26 + 12) = 2112;
    if (a2)
    {
      v57 = (uint64_t)v22;
      v30 = v22;
    }
    else
    {
      v57 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v32 = v47;
    *v47 = v56;

    *(_WORD *)(v26 + 22) = 2112;
    v31 = v55;
    if (a3)
    {
      v33 = a3;
      v34 = _swift_stdlib_bridgeErrorToNSError();
      v57 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      v57 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v34 = 0;
    }
    v32[1] = v34;

    v35 = v49;
    _os_log_impl(&dword_1B4BE6000, v49, (os_log_type_t)v54, "Flow output completed for messageId: %s result: (%@, %@)", (uint8_t *)v26, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v32, -1, -1);
    v36 = v48;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v36, -1, -1);
    MEMORY[0x1B5E44758](v26, -1, -1);

    v4 = v50;
    a1 = v51;
  }
  else
  {
    v29 = *(void (**)(char *, uint64_t))(v9 + 8);
    v29(v13, v8);

    v31 = v55;
  }
  v37 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v4 + 208))(v58);
  v38 = (void (*)(uint64_t *, uint64_t *))specialized Dictionary._Variant.removeValue(forKey:)(a1);
  v37(v58, 0);
  if (v38)
  {
    v57 = (uint64_t)a3;
    v58[0] = v56;
    v38(v58, &v57);
    _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v38);
  }
  else
  {
    v52(v31, a1, v8);
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = v29;
      v42 = v31;
      v43 = (uint8_t *)swift_slowAlloc();
      v44 = swift_slowAlloc();
      v58[0] = v44;
      *(_DWORD *)v43 = 136315138;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      v45 = dispatch thunk of CustomStringConvertible.description.getter();
      v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v41(v42, v8);
      _os_log_impl(&dword_1B4BE6000, v39, v40, "Could not find flow command completion. commandId: %s", v43, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v44, -1, -1);
      MEMORY[0x1B5E44758](v43, -1, -1);
    }
    else
    {
      v29(v31, v8);
    }

  }
}

void ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, unint64_t a8, uint64_t a9, void (*a10)(_QWORD, void *), uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  id v38;
  id v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  os_log_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  id v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  id v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void (*v112)(_QWORD, _QWORD);
  void *v113;
  _QWORD *v114;
  void *v115;
  id v116;
  id v117;
  id v118;
  uint64_t v119;
  void *v120;
  _QWORD *v121;
  void (*v122)(_QWORD, _QWORD);
  void *v123;
  id v124;
  uint64_t v125;
  os_log_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  void (*v138)(_QWORD, void *);
  id v139;
  uint64_t v140;
  id v141;
  uint64_t v142;
  unint64_t v143;
  id v144;
  uint64_t v145;
  uint64_t aBlock;
  uint64_t v147;
  void (*v148)(uint64_t, void *, void *);
  void *v149;
  uint64_t (*v150)(void *, void *);
  _QWORD *v151;

  v143 = a8;
  v137 = a7;
  v141 = a6;
  v144 = (id)a9;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v132 = (uint64_t)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v136 = (char *)&v125 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v134 = (uint64_t)&v125 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v125 - v24;
  v26 = MEMORY[0x1E0C80A78](v23);
  v135 = (uint64_t)&v125 - v27;
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v125 - v28;
  v30 = type metadata accessor for UUID();
  v31 = MEMORY[0x1E0C80A78](v30);
  v32 = MEMORY[0x1E0C80A78](v31);
  v36 = (char *)&v125 - v35;
  if (!a1)
  {
    a10(0, 0);
    return;
  }
  v128 = v34;
  v130 = v33;
  v131 = v32;
  v138 = a10;
  v140 = a11;
  v37 = a1;
  v129 = a2;
  v133 = a3;
  v139 = v37;
  v38 = SABaseCommand.copyWithFilledInIdentifiers(requestId:requestIdOverride:)(a2, a3, a4, a5);
  if (!v38)
  {
    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    v45 = (void *)swift_allocError();
    *v46 = 15;
    v138(0, v45);

    return;
  }
  v39 = v38;
  v40 = SABaseCommand.isListenAfterSpeaking.getter();
  v41 = v133;
  v42 = v143;
  if ((v40 & 1) != 0)
  {
    if (v143)
    {
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v144, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v43 = v130;
      v44 = v131;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v29, 1, v131) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v36, v29, v44);
        if (v41)
        {
          ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)();
          (*(void (**)(char *, uint64_t))(v43 + 8))(v36, v44);
          goto LABEL_29;
        }
        (*(void (**)(char *, uint64_t))(v43 + 8))(v36, v44);
      }
    }
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.conversationBridge);
    v48 = v135;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v144, v135, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, (os_log_type_t)v50))
    {
      v127 = v50;
      v126 = v49;
      v51 = 0x3E6C696E3CLL;
      v52 = swift_slowAlloc();
      v53 = swift_slowAlloc();
      aBlock = v53;
      *(_DWORD *)v52 = 136315650;
      if (v42)
      {
        v51 = v137;
        v54 = v42;
      }
      else
      {
        v54 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v54, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 12) = 2080;
      outlined init with copy of ReferenceResolutionClientProtocol?(v48, (uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v55 = v130;
      v56 = v131;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(v25, 1, v131) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v57 = 0xE500000000000000;
        v58 = 0x3E6C696E3CLL;
      }
      else
      {
        v58 = UUID.uuidString.getter();
        v57 = v59;
        (*(void (**)(char *, uint64_t))(v55 + 8))(v25, v56);
      }
      v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v57, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?(v48, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      *(_WORD *)(v52 + 22) = 2080;
      if (v41)
        v60 = v129;
      else
        v60 = 0x3E6C696E3CLL;
      if (v41)
        v61 = v41;
      else
        v61 = 0xE500000000000000;
      swift_bridgeObjectRetain();
      v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v62 = v126;
      _os_log_impl(&dword_1B4BE6000, v126, (os_log_type_t)v127, "Cannot send SiriWillPrompt: one of assistantId(%s), sessionId(%s), or requestId(%s) is nil", (uint8_t *)v52, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v53, -1, -1);
      MEMORY[0x1B5E44758](v52, -1, -1);

      v42 = v143;
    }
    else
    {
      swift_bridgeObjectRelease_n();
      outlined destroy of ReferenceResolutionClientProtocol?(v48, (uint64_t *)&demangling cache variable for type metadata for UUID?);

      swift_bridgeObjectRelease_n();
    }
  }
LABEL_29:
  if ((SABaseCommand.isConfirmation.getter() & 1) != 0)
  {
    v63 = (uint64_t)v136;
    if (!v42)
    {
LABEL_36:
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v68 = type metadata accessor for Logger();
      __swift_project_value_buffer(v68, (uint64_t)static Logger.conversationBridge);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v144, v63, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v69 = Logger.logObject.getter();
      v70 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v69, v70))
      {
        v144 = v39;
        v71 = 0x3E6C696E3CLL;
        v72 = v42;
        v73 = swift_slowAlloc();
        v74 = swift_slowAlloc();
        aBlock = v74;
        *(_DWORD *)v73 = 136315650;
        if (v72)
        {
          v71 = v137;
          v75 = v72;
        }
        else
        {
          v75 = 0xE500000000000000;
        }
        swift_bridgeObjectRetain();
        v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v75, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v73 + 12) = 2080;
        v76 = v132;
        outlined init with copy of ReferenceResolutionClientProtocol?(v63, v132, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        v77 = v130;
        v78 = v131;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v76, 1, v131) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v76, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          v79 = 0xE500000000000000;
          v80 = 0x3E6C696E3CLL;
        }
        else
        {
          v80 = UUID.uuidString.getter();
          v79 = v81;
          (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v78);
        }
        v82 = v129;
        v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v79, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v63, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        *(_WORD *)(v73 + 22) = 2080;
        if (v133)
          v83 = v82;
        else
          v83 = 0x3E6C696E3CLL;
        if (v133)
          v84 = v133;
        else
          v84 = 0xE500000000000000;
        swift_bridgeObjectRetain();
        v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v69, v70, "Cannot send SiriWillAskForConfirmation: one of assistantId(%s), sessionId(%s), or requestId(%s) is nil", (uint8_t *)v73, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v74, -1, -1);
        MEMORY[0x1B5E44758](v73, -1, -1);

        v39 = v144;
      }
      else
      {
        swift_bridgeObjectRelease_n();
        outlined destroy of ReferenceResolutionClientProtocol?(v63, (uint64_t *)&demangling cache variable for type metadata for UUID?);

        swift_bridgeObjectRelease_n();
      }
      goto LABEL_53;
    }
    v64 = v134;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v144, v134, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v65 = v130;
    v66 = v131;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v64, 1, v131) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v64, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      goto LABEL_36;
    }
    v67 = v128;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v128, v64, v66);
    if (!v41)
    {
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v67, v66);
      goto LABEL_36;
    }
    ConversationOutputSubmitter.sendSiriWillAskForConfirmation(assistantId:sessionId:requestId:)();
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v67, v66);
  }
LABEL_53:
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v85 = type metadata accessor for Logger();
    __swift_project_value_buffer(v85, (uint64_t)static Logger.conversationBridge);
    v86 = Logger.logObject.getter();
    v87 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v86, v87))
    {
      v88 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v88 = 0;
      _os_log_impl(&dword_1B4BE6000, v86, v87, "Execution is sending SACFProvideContext which is deprecated in SKY since the handling of this command on server races with a new request. Please use ContextUpdater.SARDNativeFlowContextUpdate instead to ensure consistency of state management on server.", v88, 2u);
      MEMORY[0x1B5E44758](v88, -1, -1);
    }

  }
  if (v141)
  {
    v89 = one-time initialization token for conversationBridge;
    v90 = v141;
    if (v89 != -1)
      swift_once();
    v91 = type metadata accessor for Logger();
    __swift_project_value_buffer(v91, (uint64_t)static Logger.conversationBridge);
    v92 = v39;
    v93 = Logger.logObject.getter();
    v94 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v93, v94))
    {
      v95 = (uint8_t *)swift_slowAlloc();
      v96 = swift_slowAlloc();
      aBlock = v96;
      *(_DWORD *)v95 = 136315138;
      v144 = v90;
      v97 = objc_msgSend(v92, sel_debugDescription);
      v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v100 = v99;

      v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v100, &aBlock);
      v90 = v144;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v93, v94, "Submitting FlowCommand: %s with commandExecutionInfo", v95, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v96, -1, -1);
      MEMORY[0x1B5E44758](v95, -1, -1);

    }
    else
    {

    }
    v111 = v140;
    v112 = (void (*)(_QWORD, _QWORD))v138;
    v113 = *(void **)(v142 + 24);
    v114 = (_QWORD *)swift_allocObject();
    v114[2] = v92;
    v114[3] = v112;
    v114[4] = v111;
    v150 = (uint64_t (*)(void *, void *))partial apply for closure #1 in ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:completion:);
    v151 = v114;
    aBlock = MEMORY[0x1E0C809B0];
    v147 = 1107296256;
    v148 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    v149 = &block_descriptor_9;
    v115 = _Block_copy(&aBlock);
    v116 = v92;
    v117 = v90;
    v118 = v116;
    swift_retain();
    swift_release();
    objc_msgSend(v113, sel_handleCommand_withExecutionContextMatchingInfo_completion_, v118, v117, v115);

    _Block_release(v115);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v101 = type metadata accessor for Logger();
    __swift_project_value_buffer(v101, (uint64_t)static Logger.conversationBridge);
    v102 = v39;
    v103 = Logger.logObject.getter();
    v104 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc();
      v106 = swift_slowAlloc();
      aBlock = v106;
      *(_DWORD *)v105 = 136315138;
      v107 = objc_msgSend(v102, sel_debugDescription);
      v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v110 = v109;

      v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v110, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v103, v104, "Submitting FlowCommand: %s", v105, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v106, -1, -1);
      MEMORY[0x1B5E44758](v105, -1, -1);

    }
    else
    {

    }
    v119 = v140;
    v120 = *(void **)(v142 + 24);
    v121 = (_QWORD *)swift_allocObject();
    v122 = (void (*)(_QWORD, _QWORD))v138;
    v121[2] = v102;
    v121[3] = v122;
    v121[4] = v119;
    v150 = partial apply for closure #2 in ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:completion:);
    v151 = v121;
    aBlock = MEMORY[0x1E0C809B0];
    v147 = 1107296256;
    v148 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    v149 = &block_descriptor_6;
    v123 = _Block_copy(&aBlock);
    v124 = v102;
    swift_retain();
    swift_release();
    objc_msgSend(v120, sel_handleCommand_completion_, v124, v123);

    _Block_release(v123);
  }
}

id SABaseCommand.copyWithFilledInIdentifiers(requestId:requestIdOverride:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  id v28;

  v5 = v4;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(v5, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
  if (swift_dynamicCast())
  {
    v14 = v28;
    v15 = objc_msgSend(v28, sel_aceId);
    v27 = a1;
    if (v15)
    {
      v16 = v15;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v19 = v18;

    }
    else
    {
      UUID.init()();
      v17 = UUID.uuidString.getter();
      v19 = v20;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    v21 = (void *)MEMORY[0x1B5E432E8](v17, v19);
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_setAceId_, v21);

    if (a4)
    {
      a2 = a4;
    }
    else
    {
      v22 = objc_msgSend(v14, sel_refId);
      if (v22)
      {
        v23 = v22;
        a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        a2 = v24;

      }
      else
      {
        if (!a2)
        {
          v25 = 0;
          goto LABEL_13;
        }
        swift_bridgeObjectRetain();
        a3 = v27;
      }
    }
    swift_bridgeObjectRetain();
    v25 = (void *)MEMORY[0x1B5E432E8](a3, a2);
    swift_bridgeObjectRelease();
LABEL_13:
    objc_msgSend(v14, sel_setRefId_, v25, v27);

    return v14;
  }
  return 0;
}

uint64_t closure #1 in ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:completion:)(void *a1, void *a2, void *a3, uint64_t (*a4)(void *, void *))
{
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v31;
  uint64_t v33;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
  v8 = a3;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v33 = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = a1;
    v14 = objc_msgSend(v8, sel_debugDescription);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v31 = a2;
    v17 = v16;

    a1 = v13;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a2 = v31;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v9, v10, "Submitted FlowCommand: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v12, -1, -1);
    MEMORY[0x1B5E44758](v11, -1, -1);

    if (!v31)
      return a4(a1, a2);
  }
  else
  {

    if (!a2)
      return a4(a1, a2);
  }
  v18 = a1;
  v19 = a2;
  v20 = v18;
  v21 = a2;
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc();
    v25 = swift_slowAlloc();
    v33 = v25;
    *(_DWORD *)v24 = 136315394;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
    v26 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    v28 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v22, v23, "Error while submitting command. Response received: %s, error: %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v25, -1, -1);
    MEMORY[0x1B5E44758](v24, -1, -1);
  }
  else
  {

  }
  return a4(a1, a2);
}

void ConversationOutputSubmitter.publishDialogEngineOutput(fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:requestId:assistantId:sessionId:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;

  v1 = v0;
  v2 = objc_allocWithZone((Class)type metadata accessor for DialogEngineOutputMessage());
  v3 = DialogEngineOutputMessage.init(build:)();
  if (v3)
  {
    v4 = (void *)v3;
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 56));
    v5 = v4;
    if ((dispatch thunk of MessagePublishing.postMessage(_:)() & 1) == 0)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
      v7 = Logger.logObject.getter();
      v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1B4BE6000, v7, v8, "Could not post DialogEngineOutputMessage", v9, 2u);
        MEMORY[0x1B5E44758](v9, -1, -1);

        goto LABEL_13;
      }

    }
    v7 = v5;
    goto LABEL_13;
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  v7 = Logger.logObject.getter();
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1B4BE6000, v7, v11, "Could not construct DialogEngineOutputMessage. Missing fields?", v12, 2u);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }
LABEL_13:

}

uint64_t closure #1 in ConversationOutputSubmitter.publishDialogEngineOutput(fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:requestId:assistantId:sessionId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v35 = a7;
  v36 = a8;
  v31 = a4;
  v32 = a5;
  v39 = a13;
  v40 = a14;
  v37 = a11;
  v38 = a12;
  v33 = a9;
  v34 = a10;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID();
  v29 = *(_QWORD *)(v19 - 8);
  v30 = v19;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *MEMORY[0x1E0D9E668];
  v26 = type metadata accessor for MessageSource();
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 104))(v24, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  DialogEngineOutputMessage.Builder.source.setter();
  if (!a3)
  {
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v30);
  }
  swift_bridgeObjectRetain();
  DialogEngineOutputMessage.Builder.assistantId.setter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v31, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  DialogEngineOutputMessage.Builder.sessionId.setter();
  if (!a6)
  {
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v30);
  }
  swift_bridgeObjectRetain();
  DialogEngineOutputMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  DialogEngineOutputMessage.Builder.fullPrint.setter();
  swift_bridgeObjectRetain();
  DialogEngineOutputMessage.Builder.fullSpeak.setter();
  swift_bridgeObjectRetain();
  DialogEngineOutputMessage.Builder.redactedFullPrint.setter();
  swift_bridgeObjectRetain();
  return DialogEngineOutputMessage.Builder.redactedFullSpeak.setter();
}

void ConversationOutputSubmitter.sendOutputMessagesIfNecessary(output:requestId:commandExecutionInfo:assistantId:sessionId:invocationId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];

  v14 = v7[16];
  v15 = v7[17];
  __swift_project_boxed_opaque_existential_1(v7 + 13, v14);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15) & 1) != 0)
  {
    ConversationOutputSubmitter.sendDialogEngineOutputMessageIfNecessary(output:requestId:assistantId:sessionId:)(a1, a2, a3, a5, a6, a7);
    v16 = *(void **)(a1 + OBJC_IVAR___SKRExecutionOutput_command);
    if (v16)
    {
      v42[1] = &unk_1EF0FAB00;
      v17 = swift_dynamicCastObjCProtocolConditional();
      if (v17)
      {
        v18 = v17;
        v42[0] = MEMORY[0x1E0DEE9D8];
        v37 = v16;
        ConversationOutputSubmitter.extractAllCommands(inside:results:)(v18, v42);
        v19 = v42[0];
        v40 = a3;
        if (v42[0] >> 62)
        {
          swift_bridgeObjectRetain();
          v20 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v20)
            goto LABEL_6;
        }
        else
        {
          v20 = *(_QWORD *)((v42[0] & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v20)
          {
LABEL_6:
            if (v20 < 1)
            {
              __break(1u);
              return;
            }
            v21 = 0;
            v38 = v20;
            v39 = a2;
            do
            {
              if ((v19 & 0xC000000000000001) != 0)
                MEMORY[0x1B5E43B94](v21, v19);
              else
                swift_unknownObjectRetain();
              objc_opt_self();
              if (swift_dynamicCastObjCClass()
                && ((objc_opt_self(), swift_dynamicCastObjCClass())
                 || (objc_opt_self(), swift_dynamicCastObjCClass())
                 || (objc_opt_self(), swift_dynamicCastObjCClass())
                 || (objc_opt_self(), swift_dynamicCastObjCClass())
                 || (objc_opt_self(), swift_dynamicCastObjCClass())))
              {
                swift_unknownObjectRetain();
                v22 = SABaseCommand.copyWithFilledInIdentifiers(requestId:requestIdOverride:)(a2, v40, 0, 0);
                MEMORY[0x1E0C80A78](v22);
                v23 = objc_allocWithZone((Class)type metadata accessor for FlowOutputMessage());
                v24 = (void *)FlowOutputMessage.init(build:)();
                if (v24)
                {
                  v25 = one-time initialization token for conversationBridge;
                  v26 = v24;
                  if (v25 != -1)
                    swift_once();
                  v27 = type metadata accessor for Logger();
                  __swift_project_value_buffer(v27, (uint64_t)static Logger.conversationBridge);
                  v28 = v22;
                  v29 = Logger.logObject.getter();
                  v30 = static os_log_type_t.debug.getter();
                  if (os_log_type_enabled(v29, v30))
                  {
                    v31 = swift_slowAlloc();
                    v32 = (_QWORD *)swift_slowAlloc();
                    *(_DWORD *)v31 = 138412290;
                    *(_QWORD *)(v31 + 4) = v28;
                    *v32 = v22;
                    _os_log_impl(&dword_1B4BE6000, v29, v30, "Mirroring FlowOutputMessage with command %@ to IntelligenceFlowBridge, but will also submit command directly.", (uint8_t *)v31, 0xCu);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
                    swift_arrayDestroy();
                    MEMORY[0x1B5E44758](v32, -1, -1);
                    MEMORY[0x1B5E44758](v31, -1, -1);
                  }
                  else
                  {

                    v29 = v28;
                  }
                  a2 = v39;

                  __swift_project_boxed_opaque_existential_1((_QWORD *)(v41 + 32), *(_QWORD *)(v41 + 56));
                  dispatch thunk of MessagePublishing.postMessage(_:)();
                  swift_unknownObjectRelease_n();

                }
                else
                {
                  if (one-time initialization token for conversationBridge != -1)
                    swift_once();
                  v33 = type metadata accessor for Logger();
                  __swift_project_value_buffer(v33, (uint64_t)static Logger.conversationBridge);
                  v34 = Logger.logObject.getter();
                  v35 = static os_log_type_t.error.getter();
                  a2 = v39;
                  if (os_log_type_enabled(v34, v35))
                  {
                    v36 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)v36 = 0;
                    _os_log_impl(&dword_1B4BE6000, v34, v35, "Could not construct FlowOutputMessage. Missing fields?", v36, 2u);
                    MEMORY[0x1B5E44758](v36, -1, -1);
                  }

                  swift_unknownObjectRelease_n();
                }
                v20 = v38;
              }
              else
              {
                swift_unknownObjectRelease();
              }
              ++v21;
            }
            while (v20 != v21);
          }
        }

        swift_bridgeObjectRelease();
      }
    }
  }
}

void ConversationOutputSubmitter.sendDialogEngineOutputMessageIfNecessary(output:requestId:assistantId:sessionId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[2];

  v38 = a6;
  v39 = a5;
  v40 = a4;
  v41 = a3;
  v9 = type metadata accessor for CharacterSet();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PommesContext();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + OBJC_IVAR___SKRExecutionOutput_command)
    && *(_QWORD *)(a1 + OBJC_IVAR___SKRExecutionOutput_fullPrint + 8) | *(_QWORD *)(a1
                                                                                  + OBJC_IVAR___SKRExecutionOutput_fullSpeak
                                                                                  + 8))
  {
    ConversationOutputSubmitter.publishDialogEngineOutput(fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:requestId:assistantId:sessionId:)();
    return;
  }
  v20 = *(_QWORD *)(a1 + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
    goto LABEL_13;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v20 + OBJC_IVAR___SKRExecutionContextUpdate_pommesContext, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
LABEL_13:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    return;
  }
  v35 = a2;
  v36 = v6;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
  v43[0] = PommesContext.renderedTexts.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v21 = BidirectionalCollection<>.joined(separator:)();
  v23 = v22;
  swift_bridgeObjectRelease();
  v37 = v21;
  v43[0] = v21;
  v43[1] = v23;
  static CharacterSet.whitespacesAndNewlines.getter();
  lazy protocol witness table accessor for type String and conformance String();
  v24 = StringProtocol.trimmingCharacters(in:)();
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRelease();
  v27 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0)
    v27 = v24 & 0xFFFFFFFFFFFFLL;
  if (v27)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v43[0] = v34;
      *(_DWORD *)v31 = 136315138;
      v33 = v31 + 4;
      swift_bridgeObjectRetain();
      v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v23, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v29, v30, "Publishing DialogEngineOutput for Pommes using renderedText: %s", v31, 0xCu);
      v32 = v34;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v32, -1, -1);
      MEMORY[0x1B5E44758](v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain();
    ConversationOutputSubmitter.publishDialogEngineOutput(fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:requestId:assistantId:sessionId:)();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    swift_bridgeObjectRelease();
  }
}

uint64_t closure #1 in ConversationOutputSubmitter.sendFlowOutputMessage(command:commandExecutionInfo:requestId:assistantId:sessionId:invocationId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;

  v31 = a7;
  v32 = a8;
  v29 = a4;
  v30 = a5;
  v33 = a10;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID();
  v27 = *(_QWORD *)(v15 - 8);
  v28 = v15;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *MEMORY[0x1E0D9E668];
  v22 = type metadata accessor for MessageSource();
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 104))(v20, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  FlowOutputMessage.Builder.source.setter();
  if (!a3)
  {
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v28);
  }
  swift_bridgeObjectRetain();
  FlowOutputMessage.Builder.assistantId.setter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v29, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  FlowOutputMessage.Builder.sessionId.setter();
  if (!a6)
  {
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v28);
  }
  swift_bridgeObjectRetain();
  FlowOutputMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  FlowOutputMessage.Builder.invocationId.setter();
  a9;
  FlowOutputMessage.Builder.command.setter();
  v24 = v33;
  FlowOutputMessage.Builder.commandExecutionInfo.setter();
  if (a9)
    SABaseCommand.isListenAfterSpeaking.getter();
  return FlowOutputMessage.Builder.listenAfterSpeaking.setter();
}

id ConversationOutputSubmitter.extractAllCommands(inside:results:)(unint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  id result;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  id v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v4 = swift_unknownObjectRetain();
  MEMORY[0x1B5E43498](v4);
  if (*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    goto LABEL_29;
  while (1)
  {
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    result = objc_msgSend((id)a1, sel_callbacks);
    if (!result)
      return result;
    v6 = result;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAResultCallback);
    a1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v7)
        return (id)swift_bridgeObjectRelease();
    }
    else
    {
      v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v7)
        return (id)swift_bridgeObjectRelease();
    }
    v8 = 0;
    v9 = a1 & 0xC000000000000001;
    v19 = a1 + 32;
    v20 = a1 & 0xFFFFFFFFFFFFFF8;
    v22 = v7;
    v23 = a1;
    v21 = a1 & 0xC000000000000001;
    while (1)
    {
      if (v9)
      {
        v10 = (id)MEMORY[0x1B5E43B94](v8, a1);
      }
      else
      {
        if (v8 >= *(_QWORD *)(v20 + 16))
          goto LABEL_28;
        v10 = *(id *)(v19 + 8 * v8);
      }
      v11 = v10;
      if (__OFADD__(v8++, 1))
        break;
      v13 = objc_msgSend(v10, sel_commands);
      if (v13)
      {
        v14 = v13;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
        v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v15 >> 62)
        {
          swift_bridgeObjectRetain();
          v16 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v16)
          {
LABEL_24:

            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
        }
        else
        {
          v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v16)
            goto LABEL_24;
        }
        if (v16 < 1)
          goto LABEL_27;
        for (i = 0; i != v16; ++i)
        {
          if ((v15 & 0xC000000000000001) != 0)
          {
            v18 = MEMORY[0x1B5E43B94](i, v15);
          }
          else
          {
            v18 = *(_QWORD *)(v15 + 8 * i + 32);
            swift_unknownObjectRetain();
          }
          ConversationOutputSubmitter.extractAllCommands(inside:results:)(v18, a2);
          swift_unknownObjectRelease();
        }

        swift_bridgeObjectRelease();
        v7 = v22;
        a1 = v23;
        v9 = v21;
      }
      else
      {

      }
LABEL_7:
      if (v8 == v7)
        return (id)swift_bridgeObjectRelease();
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
}

void ConversationOutputSubmitter.sendSiriWillAskForConfirmation(assistantId:sessionId:requestId:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;

  v1 = v0;
  v2 = objc_allocWithZone((Class)type metadata accessor for SiriWillAskForConfirmationMessage());
  v3 = SiriWillAskForConfirmationMessage.init(build:)();
  if (v3)
  {
    v4 = v3;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1B4BE6000, v6, v7, "Going to post SiriWillAskForConfirmationMessage", v8, 2u);
      MEMORY[0x1B5E44758](v8, -1, -1);
    }

    __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 56));
    dispatch thunk of MessagePublishing.postMessage(_:)();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
    v4 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v10, "Could not create SiriWillAskForConfirmationMessage", v11, 2u);
      MEMORY[0x1B5E44758](v11, -1, -1);
    }
  }

}

uint64_t closure #1 in ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(char *), void (*a8)(uint64_t, uint64_t), void (*a9)(char *), uint64_t (*a10)(uint64_t, uint64_t))
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(char *);
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;

  v27 = a8;
  v28 = a4;
  v30 = a10;
  v31 = a5;
  v29 = a9;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *MEMORY[0x1E0D9E668];
  v21 = type metadata accessor for MessageSource();
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 104))(v19, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  a7(v19);
  swift_bridgeObjectRetain();
  v27(a2, a3);
  v23 = type metadata accessor for UUID();
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v16, v28, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v16, 0, 1, v23);
  v29(v16);
  swift_bridgeObjectRetain();
  return v30(v31, a6);
}

uint64_t ConversationOutputSubmitter.deinit()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  return v0;
}

uint64_t ConversationOutputSubmitter.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  return swift_deallocClassInstance();
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  double result;
  uint64_t v16;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v16 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v16;
    }
    swift_bridgeObjectRelease();
    v12 = (_OWORD *)(*(_QWORD *)(v11 + 56) + 80 * v8);
    v13 = v12[3];
    a3[2] = v12[2];
    a3[3] = v13;
    a3[4] = v12[4];
    v14 = v12[1];
    *a3 = *v12;
    a3[1] = v14;
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    a3[3] = 0u;
    a3[4] = 0u;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = type metadata accessor for Parse();
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 32))(a2, v12 + *(_QWORD *)(v14 + 72) * v6, v13);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for Parse();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment), (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy(), a2);
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment), (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy(), a2);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v17;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    v14 = *(_QWORD *)(v13 - 8);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v12 + *(_QWORD *)(v14 + 72) * v8, a3, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a3, 0, 1, v13);
  }
  else
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a3, 1, 1, v16);
  }
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F520], (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy(), a3);
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C588], (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy(), a3);
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v13 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v13;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for ConversationSessionKey();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = v0;
  v2 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v3 & 1) == 0)
    return 0;
  v4 = v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v0;
  v9 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v6 = v9;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v6);
  *v1 = v6;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v12;
  }
  v8 = *(_QWORD *)(v7 + 48);
  v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * v4, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = v1;
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v1;
  v10 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v7 = v10;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  *v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(unint64_t, uint64_t)@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t *v10;
  unint64_t v14;
  char v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v10 = v6;
  swift_bridgeObjectRetain();
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v15;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v10;
    v23 = *v10;
    *v10 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a5();
      v17 = v23;
    }
    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v17 + 56);
    v19 = a3(0);
    v20 = *(_QWORD *)(v19 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a6, v18 + *(_QWORD *)(v20 + 72) * v14, v19);
    a4(v14, v17);
    *v10 = v17;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(a6, 0, 1, v19);
  }
  else
  {
    v22 = a3(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a6, 1, 1, v22);
  }
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(*(_QWORD *)(v11 + 56) + 40 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t, uint64_t)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v9;
  unint64_t v12;
  char v13;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v9 = v5;
  swift_bridgeObjectRetain();
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v13;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v9;
    v23 = *v9;
    *v9 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      v15 = v23;
    }
    v16 = *(_QWORD *)(v15 + 48);
    v17 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16 + *(_QWORD *)(*(_QWORD *)(v17 - 8) + 72) * v12, v17);
    v18 = *(_QWORD *)(v15 + 56);
    v19 = __swift_instantiateConcreteTypeFromMangledName(a2);
    v20 = *(_QWORD *)(v19 - 8);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v18 + *(_QWORD *)(v20 + 72) * v12, a5, a2);
    a3(v12, v15);
    *v9 = v15;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(a5, 0, 1, v19);
  }
  else
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a5, 1, 1, v22);
  }
}

uint64_t specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:selfReflection:featureChecker:)(uint64_t a1, char a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a7;
  v22 = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v20);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(boxed_opaque_existential_1, a5, a7);
  type metadata accessor for ConcurrentTaskPool();
  v16 = swift_allocObject();
  v17 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v16 + 16) = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v16 + 24) = v18;
  *(_QWORD *)(a6 + 16) = v16;
  *(_QWORD *)(a6 + 80) = 0;
  *(_QWORD *)(a6 + 88) = specialized Dictionary.init(dictionaryLiteral:)(v17);
  *(_QWORD *)(a6 + 96) = 30000000000;
  *(_QWORD *)(a6 + 24) = a1;
  *(_BYTE *)(a6 + 72) = a2;
  outlined init with take of ReferenceResolutionClientProtocol(a3, a6 + 32);
  swift_beginAccess();
  *(_QWORD *)(a6 + 80) = a4;
  swift_release();
  outlined init with take of ReferenceResolutionClientProtocol(&v20, a6 + 104);
  return a6;
}

uint64_t specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:featureChecker:)(uint64_t a1, char a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a6;
  v20 = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v18);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_1, a4, a6);
  type metadata accessor for ConcurrentTaskPool();
  v14 = swift_allocObject();
  v15 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v14 + 16) = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v16 = swift_allocObject();
  *(_DWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v14 + 24) = v16;
  *(_QWORD *)(a5 + 16) = v14;
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 88) = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(_QWORD *)(a5 + 96) = 30000000000;
  *(_QWORD *)(a5 + 24) = a1;
  *(_BYTE *)(a5 + 72) = a2;
  outlined init with take of ReferenceResolutionClientProtocol(a3, a5 + 32);
  outlined init with take of ReferenceResolutionClientProtocol(&v18, a5 + 104);
  return a5;
}

uint64_t sub_1B4D502B4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 152) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + 104))
    __swift_destroy_boxed_opaque_existential_1(v0 + 80);

  swift_release();
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in ConversationOutputSubmitter.handleMitigation(mitigationResult:executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 152) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in ConversationOutputSubmitter.handleMitigation(mitigationResult:executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(a1, a2, a3, a4, *(void (**)(id, _QWORD))(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(_QWORD *)(v4 + 72), v4 + 80, *(_QWORD *)(v4 + 120), *(_QWORD *)(v4 + 128), *(_QWORD *)(v4 + 136), *(_QWORD *)(v4 + 144), v4 + v10, *(_QWORD *)(v4 + v11),
    *(_QWORD *)(v4 + v11 + 8));
}

uint64_t partial apply for closure #2 in ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:completion:)(void *a1, void *a2)
{
  uint64_t v2;

  return closure #1 in ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:completion:)(a1, a2, *(void **)(v2 + 16), *(uint64_t (**)(void *, void *))(v2 + 24));
}

uint64_t sub_1B4D504A4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4D504D8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 152))(*a1);
}

uint64_t sub_1B4D50504@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 168))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4D50534(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 176);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B4D50564@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 192))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4D50594(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 200);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B4D505C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 216))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4D505F4(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 224))(*a1);
}

uint64_t type metadata accessor for ConversationOutputSubmitter()
{
  return objc_opt_self();
}

uint64_t method lookup function for ConversationOutputSubmitter()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.isMUXEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.isMUXEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.isMUXEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.selfReflectionAgent.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.selfReflectionAgent.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.selfReflectionAgent.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.flowCommandCompletions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.flowCommandCompletions.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.flowCommandCompletions.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.plannerTimeout.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.plannerTimeout.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.plannerTimeout.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.__allocating_init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:featureChecker:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.__allocating_init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:selfReflection:featureChecker:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.handleMitigation(mitigationResult:executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.submit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.flowOutputCompleted(flowOutputMessageId:result:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t partial apply for closure #1 in ConversationOutputSubmitter.sendFlowOutputMessage(command:commandExecutionInfo:requestId:assistantId:sessionId:invocationId:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ConversationOutputSubmitter.sendFlowOutputMessage(command:commandExecutionInfo:requestId:assistantId:sessionId:invocationId:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(void **)(v1 + 72), *(void **)(v1 + 80));
}

uint64_t partial apply for closure #1 in ConversationOutputSubmitter.publishDialogEngineOutput(fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:requestId:assistantId:sessionId:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ConversationOutputSubmitter.publishDialogEngineOutput(fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:requestId:assistantId:sessionId:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11], v1[12], v1[13], v1[14]);
}

uint64_t partial apply for closure #1 in ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)(uint64_t a1)
{
  return partial apply for closure #1 in ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)(a1, MEMORY[0x1E0D9E698], MEMORY[0x1E0D9E690], MEMORY[0x1E0D9E6A8], MEMORY[0x1E0D9E6A0]);
}

uint64_t partial apply for closure #1 in ConversationOutputSubmitter.sendSiriWillAskForConfirmation(assistantId:sessionId:requestId:)(uint64_t a1)
{
  return partial apply for closure #1 in ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)(a1, MEMORY[0x1E0D9E6C8], MEMORY[0x1E0D9E6C0], MEMORY[0x1E0D9E6D8], MEMORY[0x1E0D9E6D0]);
}

uint64_t partial apply for closure #1 in ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)(uint64_t a1, void (*a2)(char *), void (*a3)(uint64_t, uint64_t), void (*a4)(char *), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t *v5;

  return closure #1 in ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)(a1, v5[2], v5[3], v5[4], v5[5], v5[6], a2, a3, a4, a5);
}

id outlined copy of (SAUIAddViews, SAUIRevealRecognizedSpeech?, ExecutionContextUpdate)?(id result, void *a2, void *a3)
{
  id v4;
  id v5;
  id v6;

  if (result)
  {
    v6 = result;
    v4 = a2;
    v5 = a3;
    return v6;
  }
  return result;
}

id ConversationParaphraseResult.xpcRepresentation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  char *v15;
  char *v16;
  id v17;
  objc_class *v18;
  char *v19;
  char *v20;
  objc_super v22;
  objc_super v23;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ActionParaphrase();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ConversationParaphraseResult(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (uint64_t *)((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ConversationParaphraseResult(v1, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v13 = *v11;
    v12 = v11[1];
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    v14 = (objc_class *)type metadata accessor for ConversationParaphraseResultXPC(0);
    v15 = (char *)objc_allocWithZone(v14);
    outlined init with copy of ActionParaphrase?((uint64_t)v4, (uint64_t)&v15[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase]);
    v16 = &v15[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg];
    *(_QWORD *)v16 = v13;
    *((_QWORD *)v16 + 1) = v12;
    v23.receiver = v15;
    v23.super_class = v14;
    swift_bridgeObjectRetain();
    v17 = objc_msgSendSuper2(&v23, sel_init);
    outlined destroy of ActionParaphrase?((uint64_t)v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v8, v11, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v8, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    v18 = (objc_class *)type metadata accessor for ConversationParaphraseResultXPC(0);
    v19 = (char *)objc_allocWithZone(v18);
    outlined init with copy of ActionParaphrase?((uint64_t)v4, (uint64_t)&v19[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase]);
    v20 = &v19[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg];
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    v22.receiver = v19;
    v22.super_class = v18;
    v17 = objc_msgSendSuper2(&v22, sel_init);
    outlined destroy of ActionParaphrase?((uint64_t)v4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v17;
}

id static ConversationParaphraseResultXPC.paraphrase(paraphrase:)(uint64_t a1)
{
  objc_class *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  id v10;
  objc_super v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ActionParaphrase();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  v8 = (char *)objc_allocWithZone(v1);
  outlined init with copy of ActionParaphrase?((uint64_t)v5, (uint64_t)&v8[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase]);
  v9 = &v8[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v12.receiver = v8;
  v12.super_class = v1;
  v10 = objc_msgSendSuper2(&v12, sel_init);
  outlined destroy of ActionParaphrase?((uint64_t)v5);
  return v10;
}

uint64_t type metadata accessor for ConversationParaphraseResult(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ConversationParaphraseResult);
}

uint64_t outlined init with copy of ConversationParaphraseResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConversationParaphraseResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id static ConversationParaphraseResultXPC.error(errorMsg:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  id v11;
  objc_super v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ActionParaphrase();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (char *)objc_allocWithZone(v2);
  outlined init with copy of ActionParaphrase?((uint64_t)v7, (uint64_t)&v9[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase]);
  v10 = &v9[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg];
  *(_QWORD *)v10 = a1;
  *((_QWORD *)v10 + 1) = a2;
  v13.receiver = v9;
  v13.super_class = v2;
  swift_bridgeObjectRetain();
  v11 = objc_msgSendSuper2(&v13, sel_init);
  outlined destroy of ActionParaphrase?((uint64_t)v7);
  return v11;
}

uint64_t type metadata accessor for ConversationParaphraseResultXPC(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ConversationParaphraseResultXPC);
}

uint64_t outlined destroy of ActionParaphrase?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ConversationParaphraseResultXPC.swiftRepresentation()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg + 8);
  if (v6)
  {
    *a1 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg);
    a1[1] = v6;
    type metadata accessor for ConversationParaphraseResult(0);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    outlined init with copy of ActionParaphrase?(v1 + OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase, (uint64_t)v5);
    v7 = type metadata accessor for ActionParaphrase();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) == 1)
    {
      static ActionParaphrase.noParaphrase()();
      outlined destroy of ActionParaphrase?((uint64_t)v5);
    }
    else
    {
      (*(void (**)(_QWORD *, char *, uint64_t))(v8 + 32))(a1, v5, v7);
    }
    type metadata accessor for ConversationParaphraseResult(0);
    swift_storeEnumTagMultiPayload();
  }
  return swift_bridgeObjectRetain();
}

uint64_t static ConversationParaphraseResultXPC.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static ConversationParaphraseResultXPC.supportsSecureCoding;
}

uint64_t static ConversationParaphraseResultXPC.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static ConversationParaphraseResultXPC.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ConversationParaphraseResultXPC.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

Swift::Void __swiftcall ConversationParaphraseResultXPC.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Class isa;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ActionParaphrase();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActionParaphrase?(v2 + OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of ActionParaphrase?((uint64_t)v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    lazy protocol witness table accessor for type ActionParaphrase and conformance ActionParaphrase((unint64_t *)&lazy protocol witness table cache variable for type ActionParaphrase and conformance ActionParaphrase, MEMORY[0x1E0D9BBD8]);
    v11 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    v13 = v12;
    swift_release();
    isa = Data._bridgeToObjectiveC()().super.isa;
    v15 = (void *)MEMORY[0x1B5E432E8](0x6172687061726170, 0xEA00000000006573);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, isa, v15);
    outlined consume of Data._Representation(v11, v13);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg + 8))
  {
    v16 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v2
                                                + OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg));
    v17 = (void *)MEMORY[0x1B5E432E8](0x67734D726F727265, 0xE800000000000000);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v16, v17);

  }
}

uint64_t ConversationParaphraseResultXPC.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x67734D726F727265;
  else
    return 0x6172687061726170;
}

id ConversationParaphraseResultXPC.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized ConversationParaphraseResultXPC.init(coder:)(a1);

  return v4;
}

id ConversationParaphraseResultXPC.init(coder:)(void *a1)
{
  id v2;

  v2 = specialized ConversationParaphraseResultXPC.init(coder:)(a1);

  return v2;
}

SiriKitRuntime::ConversationParaphraseResultXPC::CodingKeys_optional __swiftcall ConversationParaphraseResultXPC.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  SiriKitRuntime::ConversationParaphraseResultXPC::CodingKeys_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationParaphraseResultXPC.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = SiriKitRuntime_ConversationParaphraseResultXPC_CodingKeys_errorMsg;
  else
    v4.value = SiriKitRuntime_ConversationParaphraseResultXPC_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

SiriKitRuntime::ConversationParaphraseResultXPC::CodingKeys_optional __swiftcall ConversationParaphraseResultXPC.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  SiriKitRuntime::ConversationParaphraseResultXPC::CodingKeys_optional v4;

  object = stringValue._object;
  v2._countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationParaphraseResultXPC.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = SiriKitRuntime_ConversationParaphraseResultXPC_CodingKeys_errorMsg;
  else
    v4.value = SiriKitRuntime_ConversationParaphraseResultXPC_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

SiriKitRuntime::ConversationParaphraseResultXPC::CodingKeys_optional __swiftcall ConversationParaphraseResultXPC.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriKitRuntime::ConversationParaphraseResultXPC::CodingKeys_optional)2;
}

uint64_t ConversationParaphraseResultXPC.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ConversationParaphraseResultXPC.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x67734D726F727265;
  else
    return 0x6172687061726170;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationParaphraseResultXPC.CodingKeys(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x67734D726F727265;
  else
    v3 = 0x6172687061726170;
  if (v2)
    v4 = 0xEA00000000006573;
  else
    v4 = 0xE800000000000000;
  if (*a2)
    v5 = 0x67734D726F727265;
  else
    v5 = 0x6172687061726170;
  if (*a2)
    v6 = 0xE800000000000000;
  else
    v6 = 0xEA00000000006573;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationParaphraseResultXPC.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationParaphraseResultXPC.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationParaphraseResultXPC.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationParaphraseResultXPC.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationParaphraseResultXPC.CodingKeys.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ConversationParaphraseResultXPC.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6172687061726170;
  if (*v1)
    v2 = 0x67734D726F727265;
  v3 = 0xEA00000000006573;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ConversationParaphraseResultXPC.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x67734D726F727265;
  else
    return 0x6172687061726170;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ConversationParaphraseResultXPC.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationParaphraseResultXPC.CodingKeys.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ConversationParaphraseResultXPC.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConversationParaphraseResultXPC.CodingKeys()
{
  lazy protocol witness table accessor for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConversationParaphraseResultXPC.CodingKeys()
{
  lazy protocol witness table accessor for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys();
  return CodingKey.debugDescription.getter();
}

id ConversationParaphraseResultXPC.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ConversationParaphraseResultXPC.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ConversationParaphraseResultXPC.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for XPCRepresentation.swiftRepresentation() in conformance ConversationParaphraseResultXPC@<X0>(_QWORD *a1@<X8>)
{
  return ConversationParaphraseResultXPC.swiftRepresentation()(a1);
}

id specialized ConversationParaphraseResultXPC.init(coder:)(void *a1)
{
  void *v1;
  void *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  objc_class *v27;
  objc_super v28;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2;
  v9 = (void *)MEMORY[0x1B5E432E8](0x67734D726F727265, 0xE800000000000000);
  v10 = objc_msgSend(a1, sel_containsValueForKey_, v9);

  v11 = 0;
  v12 = 0;
  if (v10)
  {
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
    v13 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v13)
    {
      v14 = (void *)v13;
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v15;

    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
  v16 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v16)
  {
    v17 = (void *)v16;
    v27 = ObjectType;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    v18 = type metadata accessor for ActionParaphrase();
    v19 = v17;
    v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;

    lazy protocol witness table accessor for type ActionParaphrase and conformance ActionParaphrase((unint64_t *)&lazy protocol witness table cache variable for type ActionParaphrase and conformance ActionParaphrase, MEMORY[0x1E0D9BBE0]);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();

    outlined consume of Data._Representation(v20, v22);
    swift_release();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v7, 0, 1, v18);
    outlined init with take of ActionParaphrase?((uint64_t)v7, (uint64_t)&v8[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase]);
    ObjectType = v27;
  }
  else
  {
    v23 = &v8[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase];
    v24 = type metadata accessor for ActionParaphrase();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  }
  v25 = (uint64_t *)&v8[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg];
  *v25 = v11;
  v25[1] = v12;

  v28.receiver = v8;
  v28.super_class = ObjectType;
  return objc_msgSendSuper2(&v28, sel_init);
}

unint64_t lazy protocol witness table accessor for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationParaphraseResultXPC.CodingKeys, &type metadata for ConversationParaphraseResultXPC.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationParaphraseResultXPC.CodingKeys, &type metadata for ConversationParaphraseResultXPC.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationParaphraseResultXPC.CodingKeys, &type metadata for ConversationParaphraseResultXPC.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationParaphraseResultXPC.CodingKeys, &type metadata for ConversationParaphraseResultXPC.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for XPCRepresentation.SwiftRepresentation : XPCConvertible in ConversationParaphraseResultXPC()
{
  return &protocol witness table for ConversationParaphraseResult;
}

uint64_t *initializeBufferWithCopyOfBuffer for ConversationParaphraseResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
    }
    else
    {
      v8 = type metadata accessor for ActionParaphrase();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ConversationParaphraseResult(uint64_t a1)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() == 1)
    return swift_bridgeObjectRelease();
  v3 = type metadata accessor for ActionParaphrase();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_QWORD *initializeWithCopy for ConversationParaphraseResult(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = type metadata accessor for ActionParaphrase();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for ConversationParaphraseResult(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of ConversationParaphraseResult((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      v4 = type metadata accessor for ActionParaphrase();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of ConversationParaphraseResult(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ConversationParaphraseResult(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for ConversationParaphraseResult(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for ActionParaphrase();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for ConversationParaphraseResult(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of ConversationParaphraseResult((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for ActionParaphrase();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for ConversationParaphraseResult()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ActionParaphrase();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for ConversationParaphraseResultXPC()
{
  return type metadata accessor for ConversationParaphraseResultXPC(0);
}

void type metadata completion function for ConversationParaphraseResultXPC()
{
  unint64_t v0;

  type metadata accessor for ActionParaphrase?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ConversationParaphraseResultXPC()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationParaphraseResultXPC.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void type metadata accessor for ActionParaphrase?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ActionParaphrase?)
  {
    type metadata accessor for ActionParaphrase();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ActionParaphrase?);
  }
}

uint64_t getEnumTagSinglePayload for ConversationParaphraseResultXPC.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationParaphraseResultXPC.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B4D52570 + 4 * byte_1B4EE77E5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B4D525A4 + 4 * byte_1B4EE77E0[v4]))();
}

uint64_t sub_1B4D525A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4D525AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4D525B4);
  return result;
}

uint64_t sub_1B4D525C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4D525C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B4D525CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4D525D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for ConversationParaphraseResultXPC.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationParaphraseResultXPC.CodingKeys()
{
  return &type metadata for ConversationParaphraseResultXPC.CodingKeys;
}

uint64_t lazy protocol witness table accessor for type ActionParaphrase and conformance ActionParaphrase(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ActionParaphrase();
    result = MEMORY[0x1B5E44668](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of ActionParaphrase?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleASRResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleMUXASRResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleMultiUserTRPCandidateRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleUserIdentificationMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleNLResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handlePommesResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleResultSelectedMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleCancelRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleRequestContextMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleStartTextRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleStartDirectActionRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleStartLocalRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleStartUnderstandingOnServerRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleStartUnderstandingOnServerTextRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleTextBasedResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleGestureBasedResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleDirectActionResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleNLRepetitionMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleStartCorrectedSpeechRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleStartSpeechRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 160))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleRuntimeError(error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 168))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleAceRemoteExecutionContextUpdate(_:executionContext:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 176))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handlePommesTRPCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 184))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessing.handleAceFlowOutputCandidate(_:executionContextInfo:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessing.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 32))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessing.handleAceServerContextUpdateCandidate(_:executionContextInfo:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

void ConversationRequestProcessor.handleRunPommesResponseMessage(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = v1;
  v4 = type metadata accessor for RunPommesResponseMessage.UserInput();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v25 = v9;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v26 = v5;
    v14 = v4;
    v15 = v13;
    v28 = v13;
    *(_DWORD *)v12 = 136315138;
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x80000001B4EF9F20, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "%s", v12, 0xCu);
    swift_arrayDestroy();
    v16 = v15;
    v4 = v14;
    v5 = v26;
    MEMORY[0x1B5E44758](v16, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }

  if ((*(uint64_t (**)(void))(*(_QWORD *)v2 + 528))())
  {
    RunPommesResponseMessage.userInput.getter();
    v17 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
    if (v17 == *MEMORY[0x1E0D9D218])
    {
      (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
      v18 = *(char **)v7;
      ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(*(char **)v7, a1);

LABEL_13:
      swift_release();
      return;
    }
    if (v17 == *MEMORY[0x1E0D9D210])
    {
      (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
      ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(*(_QWORD *)v7, *((void **)v7 + 1), (uint64_t)a1);
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1B4BE6000, v22, v23, "Unknown UserInput type received with RunPommesResponseMessage", v24, 2u);
      MEMORY[0x1B5E44758](v24, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1B4BE6000, v19, v20, "PommesTRPCandidateMessage received for an inactive request. Dropping it on the floor.", v21, 2u);
      MEMORY[0x1B5E44758](v21, -1, -1);
    }

  }
}

uint64_t ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(char *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  int v18;
  id v19;
  _QWORD *v20;
  void *v21;
  char *v22;
  id v23;
  uint64_t v24;
  void *v25;
  char *v26;
  id v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  char *v56;
  uint8_t *v57;
  id v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint8_t *v63;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  void *v74;
  _QWORD aBlock[6];

  v73 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UserID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  v14 = (void *)UUID.uuidString.getter();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v74 = a2;
  RunPommesResponseMessage.userId.getter();
  v17 = v7;
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  v70 = v7;
  v71 = v6;
  v19 = v72;
  if (v18 == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v9, &v72[OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId], v6);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v9, v5, v6);
  }
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v14;
  v20[3] = v16;
  v21 = v16;
  v22 = v73;
  v20[4] = v73;
  v23 = objc_allocWithZone(MEMORY[0x1E0D9EFF8]);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = partial apply for closure #1 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:);
  *(_QWORD *)(v24 + 24) = v20;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed SMTTCUPackageMutating?) -> ();
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed SMTTCUPackageMutating?) -> ();
  aBlock[3] = &block_descriptor_7;
  v25 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  v26 = v22;
  swift_release();
  v27 = objc_msgSend(v23, sel_initWithBuilder_, v25);
  _Block_release(v25);
  v29 = v74;
  if (!v27)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.conversationBridge);
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      _os_log_impl(&dword_1B4BE6000, v45, v46, "Could not construct TCUPackage", v47, 2u);
      MEMORY[0x1B5E44758](v47, -1, -1);
    }

    goto LABEL_20;
  }
  MEMORY[0x1E0C80A78](v28);
  *(&v69 - 6) = v19;
  *(&v69 - 5) = v14;
  *(&v69 - 4) = v21;
  *(&v69 - 3) = v9;
  *(&v69 - 2) = v27;
  v30 = objc_allocWithZone((Class)type metadata accessor for TRPCandidateRequestMessage());
  v31 = TRPCandidateRequestMessage.init(build:)();
  if (!v31)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.conversationBridge);
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v51 = 0;
      _os_log_impl(&dword_1B4BE6000, v49, v50, "Could not construct TRPCandidateRequestMessage", v51, 2u);
      MEMORY[0x1B5E44758](v51, -1, -1);
    }

LABEL_20:
    (*(void (**)(char *, uint64_t))(v70 + 8))(v9, v71);
    return swift_release();
  }
  v32 = (char *)v31;
  swift_retain();
  v72 = v32;
  specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v32, (uint64_t)v19);
  v33 = swift_release();
  MEMORY[0x1E0C80A78](v33);
  *(&v69 - 6) = v19;
  *(&v69 - 5) = v14;
  *(&v69 - 4) = v21;
  *(&v69 - 3) = v9;
  v73 = v9;
  *(&v69 - 2) = v27;
  *(&v69 - 1) = v29;
  v34 = objc_allocWithZone((Class)type metadata accessor for TTResponseMessage());
  v35 = TTResponseMessage.init(build:)();
  if (!v35)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.conversationBridge);
    v53 = Logger.logObject.getter();
    v54 = static os_log_type_t.error.getter();
    v55 = os_log_type_enabled(v53, v54);
    v56 = v73;
    if (v55)
    {
      v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v57 = 0;
      _os_log_impl(&dword_1B4BE6000, v53, v54, "Could not construct TTResponseMessage", v57, 2u);
      MEMORY[0x1B5E44758](v57, -1, -1);
    }

    v58 = v72;
    goto LABEL_31;
  }
  v36 = (void *)v35;
  swift_retain();
  v69 = v36;
  specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v36, (uint64_t)v19);
  v37 = swift_release();
  MEMORY[0x1E0C80A78](v37);
  *(&v69 - 4) = v19;
  *(&v69 - 3) = v14;
  *(&v69 - 2) = v21;
  *(&v69 - 1) = v29;
  v38 = objc_allocWithZone((Class)type metadata accessor for PommesTRPCandidateMessage());
  v39 = PommesTRPCandidateMessage.init(build:)();
  if (!v39)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v59 = type metadata accessor for Logger();
    __swift_project_value_buffer(v59, (uint64_t)static Logger.conversationBridge);
    v60 = Logger.logObject.getter();
    v61 = static os_log_type_t.error.getter();
    v62 = os_log_type_enabled(v60, v61);
    v56 = v73;
    if (v62)
    {
      v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v63 = 0;
      _os_log_impl(&dword_1B4BE6000, v60, v61, "Could not construct PommesTRPCandidateMessage", v63, 2u);
      MEMORY[0x1B5E44758](v63, -1, -1);
    }

    v58 = v69;
LABEL_31:

    (*(void (**)(char *, uint64_t))(v70 + 8))(v56, v71);
    return swift_release();
  }
  v40 = (void *)v39;
  swift_retain();
  specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v40, (uint64_t)v19);
  v41 = swift_release();
  MEMORY[0x1E0C80A78](v41);
  *(&v69 - 4) = v19;
  *(&v69 - 3) = v14;
  *(&v69 - 2) = v21;
  v42 = objc_allocWithZone((Class)type metadata accessor for StoppedListeningForSpeechContinuationMessage());
  v43 = (void *)StoppedListeningForSpeechContinuationMessage.init(build:)();
  swift_bridgeObjectRelease();
  if (v43)
  {
    swift_retain();
    specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v43, (uint64_t)v19);

    (*(void (**)(char *, uint64_t))(v70 + 8))(v73, v71);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.conversationBridge);
    v66 = Logger.logObject.getter();
    v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v68 = 0;
      _os_log_impl(&dword_1B4BE6000, v66, v67, "Could not construct StoppedListeningForSpeechContinuationMessage", v68, 2u);
      MEMORY[0x1B5E44758](v68, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v70 + 8))(v73, v71);
  }
  return swift_release();
}

uint64_t ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char *v39;
  id v40;
  uint64_t v41;
  void *v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  void *v65;
  void *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;

  v4 = v3;
  v75 = a1;
  v76 = a2;
  v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  MEMORY[0x1E0C80A78](v71);
  v72 = (void **)((char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1E0C80A78](v7);
  v73 = (uint64_t)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UserID();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  v77 = UUID.uuidString.getter();
  v21 = v20;
  v22 = *(void (**)(char *, uint64_t))(v17 + 8);
  v23 = v12;
  v22(v19, v16);
  v24 = a3;
  RunPommesResponseMessage.userId.getter();
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v78 = v23;
  v26 = v25(v11, 1, v23);
  v74 = v13;
  if (v26 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId, v78);
    v27 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  }
  else
  {
    v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v78);
  }
  MEMORY[0x1E0C80A78](v27);
  *(&v71 - 6) = v4;
  *(&v71 - 5) = (uint64_t)v15;
  v28 = v15;
  v29 = v77;
  *(&v71 - 4) = v77;
  *(&v71 - 3) = v21;
  v30 = (uint64_t)v76;
  *(&v71 - 2) = v75;
  *(&v71 - 1) = v30;
  v31 = objc_allocWithZone((Class)type metadata accessor for TextBasedResultCandidateMessage());
  v32 = TextBasedResultCandidateMessage.init(build:)();
  if (!v32)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.conversationBridge);
    v50 = Logger.logObject.getter();
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v52 = 0;
      _os_log_impl(&dword_1B4BE6000, v50, v51, "Could not construct TextBasedResultCandidateMessage", v52, 2u);
      MEMORY[0x1B5E44758](v52, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v28, v78);
  }
  v33 = (void *)v32;
  swift_retain();
  specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v33, v4);
  v34 = swift_release();
  MEMORY[0x1E0C80A78](v34);
  *(&v71 - 4) = v4;
  *(&v71 - 3) = v29;
  *(&v71 - 2) = v21;
  v35 = objc_allocWithZone((Class)type metadata accessor for ResultSelectedMessage());
  v36 = MEMORY[0x1B5E41908](partial apply for closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:), &v71 - 6);
  if (!v36)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.conversationBridge);
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v56 = 0;
      _os_log_impl(&dword_1B4BE6000, v54, v55, "Could not construct ResultSelectedMessage", v56, 2u);
      MEMORY[0x1B5E44758](v56, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v28, v78);
  }
  v37 = (void *)v36;
  swift_retain();
  v76 = v37;
  specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v37, v4);
  v38 = swift_release();
  MEMORY[0x1E0C80A78](v38);
  *(&v71 - 6) = v4;
  *(&v71 - 5) = v29;
  *(&v71 - 4) = v21;
  *(&v71 - 3) = (uint64_t)v28;
  v39 = v28;
  *(&v71 - 2) = v24;
  v40 = objc_allocWithZone((Class)type metadata accessor for NLResultCandidateMessage());
  v41 = NLResultCandidateMessage.init(build:)();
  if (v41)
  {
    v42 = (void *)v41;
    swift_retain();
    specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v42, v4);
    swift_release();
    v43 = v72;
    RunPommesResponseMessage.pommesResult.getter();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v44 = type metadata accessor for PommesError();
      v45 = *(_QWORD *)(v44 - 8);
      v46 = v73;
      (*(void (**)(uint64_t, void **, uint64_t))(v45 + 32))(v73, v43, v44);
      v47 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v46, 0, 1, v44);
      v48 = 0;
    }
    else
    {
      v48 = *v43;
      v62 = type metadata accessor for PommesError();
      v46 = v73;
      v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v73, 1, 1, v62);
    }
    MEMORY[0x1E0C80A78](v47);
    v63 = v77;
    *(&v71 - 6) = v4;
    *(&v71 - 5) = v63;
    *(&v71 - 4) = v21;
    *(&v71 - 3) = (uint64_t)v48;
    *(&v71 - 2) = v46;
    *(&v71 - 1) = v24;
    v64 = objc_allocWithZone((Class)type metadata accessor for PommesResultCandidateMessage());
    v65 = v48;
    v66 = (void *)PommesResultCandidateMessage.init(build:)();
    swift_bridgeObjectRelease();
    if (v66)
    {
      swift_retain();
      specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v66, v4);

      outlined destroy of ReferenceResolutionClientProtocol?(v46, &demangling cache variable for type metadata for PommesError?);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v39, v78);
      return swift_release();
    }
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)static Logger.conversationBridge);
    v68 = Logger.logObject.getter();
    v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v70 = 0;
      _os_log_impl(&dword_1B4BE6000, v68, v69, "Could not construct PommesResultCandidateMessage", v70, 2u);
      MEMORY[0x1B5E44758](v70, -1, -1);
    }

    outlined destroy of ReferenceResolutionClientProtocol?(v73, &demangling cache variable for type metadata for PommesError?);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)static Logger.conversationBridge);
    v59 = Logger.logObject.getter();
    v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v61 = 0;
      _os_log_impl(&dword_1B4BE6000, v59, v60, "Could not construct NLResultCandidateMessage", v61, 2u);
      MEMORY[0x1B5E44758](v61, -1, -1);
    }

  }
  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v39, v78);
}

id closure #1 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(id result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;

  if (result)
  {
    v5 = result;
    v6 = (void *)MEMORY[0x1B5E432E8](a2, a3);
    objc_msgSend(v5, sel_setTcuId_, v6);

    return objc_msgSend(v5, sel_setSpeechPackage_, a4);
  }
  return result;
}

uint64_t closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  _QWORD v29[4];

  v27[1] = a3;
  v28 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *MEMORY[0x1E0D9E668];
  v18 = type metadata accessor for MessageSource();
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v16, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  TRPCandidateRequestMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  TRPCandidateRequestMessage.Builder.assistantId.setter();
  v20 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v21 = type metadata accessor for UUID();
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v13, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v13, 0, 1, v21);
  TRPCandidateRequestMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  TRPCandidateRequestMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  TRPCandidateRequestMessage.Builder.trpCandidateId.setter();
  v23 = type metadata accessor for UserID();
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v10, v28, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v10, 0, 1, v23);
  TRPCandidateRequestMessage.Builder.userId.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(SMTTCUPackage, ImmutableConversationSessionState)>);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1B4EE3F50;
  *(_QWORD *)(v25 + 32) = a6;
  (*(void (**)(_QWORD *__return_ptr, void *))(*(_QWORD *)a2 + 392))(v29, a6);
  __swift_project_boxed_opaque_existential_1(v29, v29[3]);
  dispatch thunk of ConversationSessionState.immutableSnapshot()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return TRPCandidateRequestMessage.Builder.tcuToContextList.setter();
}

id closure #3 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id result;
  void *v35;
  uint64_t v36;
  _QWORD v37[4];
  uint64_t v38;
  id v39;

  v37[1] = a7;
  v37[2] = a4;
  v38 = a5;
  v39 = a6;
  v37[3] = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TCUMappedNLResponse?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *MEMORY[0x1E0D9E668];
  v24 = type metadata accessor for MessageSource();
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  TTResponseMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  TTResponseMessage.Builder.assistantId.setter();
  v26 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v27 = type metadata accessor for UUID();
  v28 = *(_QWORD *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v19, v26, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v19, 0, 1, v27);
  TTResponseMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  TTResponseMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  TTResponseMessage.Builder.trpCandidateId.setter();
  v29 = type metadata accessor for UserID();
  v30 = *(_QWORD *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v16, v38, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v16, 0, 1, v29);
  TTResponseMessage.Builder.userId.setter();
  v31 = *MEMORY[0x1E0D9C968];
  v32 = type metadata accessor for TTResponseMessage.MitigationDecision();
  v33 = *(_QWORD *)(v32 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 104))(v13, v31, v32);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v13, 0, 1, v32);
  TTResponseMessage.Builder.mitigationDecision.setter();
  result = objc_msgSend(v39, sel_tcuId);
  if (result)
  {
    v35 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    RunPommesResponseMessage.nlResponse.getter();
    TCUMappedNLResponse.init(tcuId:nlResponse:)();
    v36 = type metadata accessor for TCUMappedNLResponse();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v10, 0, 1, v36);
    TTResponseMessage.Builder.tcuMappedNLResponse.setter();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    return (id)TTResponseMessage.Builder.tcuStateDict.setter();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #4 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];

  v27[0] = a3;
  v27[1] = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<PommesResponse, PommesError>?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *MEMORY[0x1E0D9E668];
  v19 = type metadata accessor for MessageSource();
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  PommesTRPCandidateMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  PommesTRPCandidateMessage.Builder.assistantId.setter();
  v21 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v22 = type metadata accessor for UUID();
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v14, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v14, 0, 1, v22);
  PommesTRPCandidateMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  PommesTRPCandidateMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  PommesTRPCandidateMessage.Builder.trpCandidateId.setter();
  RunPommesResponseMessage.pommesResult.getter();
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v11, 0, 1, v24);
  PommesTRPCandidateMessage.Builder.pommesResult.setter();
  RunPommesResponseMessage.pommesSearchReason.getter();
  v25 = type metadata accessor for PommesSearchReason();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v8, 0, 1, v25);
  PommesTRPCandidateMessage.Builder.searchReason.setter();
  swift_bridgeObjectRetain();
  return PommesTRPCandidateMessage.Builder.tcuId.setter();
}

uint64_t closure #5 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *MEMORY[0x1E0D9E668];
  v10 = type metadata accessor for MessageSource();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  StoppedListeningForSpeechContinuationMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  StoppedListeningForSpeechContinuationMessage.Builder.assistantId.setter();
  v12 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v5, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v5, 0, 1, v13);
  StoppedListeningForSpeechContinuationMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  StoppedListeningForSpeechContinuationMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  return StoppedListeningForSpeechContinuationMessage.Builder.lastTRPId.setter();
}

uint64_t closure #1 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a4;
  v28 = a6;
  v26 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *MEMORY[0x1E0D9E668];
  v17 = type metadata accessor for MessageSource();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  TextBasedResultCandidateMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  TextBasedResultCandidateMessage.Builder.assistantId.setter();
  v19 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v20 = type metadata accessor for UUID();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v12, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v12, 0, 1, v20);
  TextBasedResultCandidateMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  TextBasedResultCandidateMessage.Builder.requestId.setter();
  v22 = type metadata accessor for UserID();
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v9, v26, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v9, 0, 1, v22);
  TextBasedResultCandidateMessage.Builder.userId.setter();
  swift_bridgeObjectRetain();
  TextBasedResultCandidateMessage.Builder.resultCandidateId.setter();
  swift_bridgeObjectRetain();
  return TextBasedResultCandidateMessage.Builder.utterance.setter();
}

uint64_t closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *MEMORY[0x1E0D9E668];
  v10 = type metadata accessor for MessageSource();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  ResultSelectedMessageBase.Builder.source.setter();
  swift_bridgeObjectRetain();
  ResultSelectedMessageBase.Builder.assistantId.setter();
  v12 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v5, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v5, 0, 1, v13);
  ResultSelectedMessageBase.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  ResultSelectedMessageBase.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  ResultSelectedMessageBase.Builder.resultCandidateId.setter();
  ResultSelectedMessageBase.Builder.isMitigated.setter();
  return ResultSelectedMessageBase.Builder.endpointMode.setter();
}

uint64_t closure #3 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD v38[3];
  uint64_t v39;
  char *v40;
  char *v41;

  v38[2] = a3;
  v39 = a5;
  v38[1] = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  MEMORY[0x1E0C80A78](v6);
  v41 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v8);
  v40 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *MEMORY[0x1E0D9E668];
  v23 = type metadata accessor for MessageSource();
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 104))(v21, v22, v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  NLResultCandidateMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  NLResultCandidateMessage.Builder.assistantId.setter();
  v25 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v26 = type metadata accessor for UUID();
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v18, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v18, 0, 1, v26);
  NLResultCandidateMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  NLResultCandidateMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  NLResultCandidateMessage.Builder.resultCandidateId.setter();
  v28 = *MEMORY[0x1E0D9F518];
  v29 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  v30 = *(_QWORD *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v15, v28, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v15, 0, 1, v29);
  NLResultCandidateMessage.Builder.responseStatusCode.setter();
  v31 = type metadata accessor for UserID();
  v32 = *(_QWORD *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v12, v39, v31);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v12, 0, 1, v31);
  NLResultCandidateMessage.Builder.userId.setter();
  v33 = (void *)RunPommesResponseMessage.nlResponse.getter();
  NLParseResponse.userParses.getter();

  NLResultCandidateMessage.Builder.userParses.setter();
  v34 = (void *)RunPommesResponseMessage.nlResponse.getter();
  NLParseResponse.fallbackParse.getter();

  NLResultCandidateMessage.Builder.fallbackParse.setter();
  v35 = (void *)RunPommesResponseMessage.nlResponse.getter();
  NLParseResponse.languageVariantResult.getter();

  NLResultCandidateMessage.Builder.languageVariantResult.setter();
  v36 = (void *)RunPommesResponseMessage.nlResponse.getter();
  NLParseResponse.responseVariantResult.getter();

  return NLResultCandidateMessage.Builder.responseVariantResult.setter();
}

uint64_t closure #4 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;

  v31 = a6;
  v32 = a7;
  v30[0] = a4;
  v30[1] = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *MEMORY[0x1E0D9E668];
  v22 = type metadata accessor for MessageSource();
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 104))(v20, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  v24 = a5;
  PommesResultCandidateMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  PommesResultCandidateMessage.Builder.assistantId.setter();
  v25 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v26 = type metadata accessor for UUID();
  v27 = *(_QWORD *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v17, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v17, 0, 1, v26);
  PommesResultCandidateMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  PommesResultCandidateMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  PommesResultCandidateMessage.Builder.resultCandidateId.setter();
  PommesResultCandidateMessage.Builder.pommesResponse.setter();
  outlined init with copy of PommesError?(v31, (uint64_t)v14);
  PommesResultCandidateMessage.Builder.error.setter();
  RunPommesResponseMessage.pommesSearchReason.getter();
  v28 = type metadata accessor for PommesSearchReason();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v11, 0, 1, v28);
  return PommesResultCandidateMessage.Builder.searchReason.setter();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed SMTTCUPackageMutating?) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B4D551A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

id partial apply for closure #1 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(void *a1)
{
  uint64_t *v1;

  return closure #1 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B4D551D8()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed SMTTCUPackageMutating?) -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1)
{
  return partial apply for closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:));
}

uint64_t specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10 = v8;
    *(_DWORD *)v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x80000001B4EF9FF0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 760))(a1);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10 = v8;
    *(_DWORD *)v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x80000001B4EF9FD0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 776))(a1);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10 = v8;
    *(_DWORD *)v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x80000001B4EF9FB0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 832))(a1);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10 = v8;
    *(_DWORD *)v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x80000001B4EF9F80, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 792))(a1);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10 = v8;
    *(_DWORD *)v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x80000001B4EFA070, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 688))(a1);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10 = v8;
    *(_DWORD *)v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x80000001B4EFA050, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 856))(a1);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10 = v8;
    *(_DWORD *)v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000018, 0x80000001B4EFA030, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 712))(a1);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10 = v8;
    *(_DWORD *)v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x80000001B4EFA010, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 744))(a1);
}

id partial apply for closure #3 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t partial apply for closure #4 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #4 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #5 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1)
{
  uint64_t v1;

  return closure #5 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t partial apply for closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #3 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1)
{
  return partial apply for closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #3 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:));
}

uint64_t partial apply for closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t partial apply for closure #4 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1)
{
  uint64_t v1;

  return closure #4 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t outlined init with copy of PommesError?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ConversationRequestProcessor.asyncWork.getter()
{
  return swift_retain();
}

uint64_t one-time initialization function for warmUpSignals()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSSet);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B4EE6D00;
  v1 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupIntentSignal);
  *(_QWORD *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SAIntentGroupIntentSignal.Type);
  *(_QWORD *)(v0 + 32) = v1;
  v2 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupSiriKitPluginSignal);
  *(_QWORD *)(v0 + 88) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAIntentGroupSiriKitPluginSignal.Type);
  *(_QWORD *)(v0 + 64) = v2;
  v3 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAAceDomainSignal);
  *(_QWORD *)(v0 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAAceDomainSignal.Type);
  *(_QWORD *)(v0 + 96) = v3;
  v4 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAMPMusicPlaybackImminent);
  *(_QWORD *)(v0 + 152) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAMPMusicPlaybackImminent.Type);
  *(_QWORD *)(v0 + 128) = v4;
  v5 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SADonateRankedQueriesToPortrait);
  *(_QWORD *)(v0 + 184) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SADonateRankedQueriesToPortrait.Type);
  *(_QWORD *)(v0 + 160) = v5;
  result = MEMORY[0x1B5E4390C](v0);
  static ConversationRequestProcessor.warmUpSignals = result;
  return result;
}

uint64_t *ConversationRequestProcessor.warmUpSignals.unsafeMutableAddressor()
{
  if (one-time initialization token for warmUpSignals != -1)
    swift_once();
  return &static ConversationRequestProcessor.warmUpSignals;
}

id static ConversationRequestProcessor.warmUpSignals.getter()
{
  if (one-time initialization token for warmUpSignals != -1)
    swift_once();
  return (id)static ConversationRequestProcessor.warmUpSignals;
}

uint64_t (*ConversationRequestProcessor.state.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationRequestProcessor.sessionState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionState;
  swift_beginAccess();
  return outlined init with copy of ReferenceResolutionClientProtocol(v3, a1);
}

uint64_t ConversationRequestProcessor.sessionState.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionState;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of ReferenceResolutionClientProtocol(a1, v3);
  return swift_endAccess();
}

uint64_t (*ConversationRequestProcessor.sessionState.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t (*ConversationRequestProcessor.sentResultCandidateSelected.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

void *ConversationRequestProcessor.defaultLowVoiceIdThreshold.unsafeMutableAddressor()
{
  return &static ConversationRequestProcessor.defaultLowVoiceIdThreshold;
}

uint64_t static ConversationRequestProcessor.defaultLowVoiceIdThreshold.getter()
{
  return 45;
}

uint64_t ConversationRequestProcessor.recentDialogTracker.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestProcessor.executionOutputSubmitter.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestProcessor.executionClient.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient, a1);
}

uint64_t ConversationRequestProcessor.requestDispatcherServiceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationRequestProcessor.preExecutionActionHandler.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestProcessor.isFirstRequestInSession.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isFirstRequestInSession);
}

uint64_t ConversationRequestProcessor.networkAvailabilityProvider.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestProcessor.coreTelephonyServiceProvider.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestProcessor.decisionMaker.getter()
{
  return swift_retain();
}

void *ConversationRequestProcessor.muxContextMessage.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_muxContextMessage);
  v2 = v1;
  return v1;
}

uint64_t ConversationRequestProcessor.sessionUserId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId;
  v4 = type metadata accessor for UserID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ConversationRequestProcessor.isMUXEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled);
}

uint64_t ConversationRequestProcessor.instrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestProcessor.rrClient.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient, a1);
}

uint64_t ConversationRequestProcessor.correctionsPlatformClient.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_correctionsPlatformClient, a1);
}

uint64_t ConversationRequestProcessor.contextUpdater.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, a1, &demangling cache variable for type metadata for ContextUpdating?);
}

uint64_t ConversationRequestProcessor.selfReflectionAgent.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestProcessor.userIdentification.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userIdentification;
  swift_beginAccess();
  v2 = *(_QWORD *)v1;
  outlined copy of ConversationRequestProcessor.UserIdentification?(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(void **)(v1 + 16));
  return v2;
}

uint64_t outlined copy of ConversationRequestProcessor.UserIdentification?(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t result;

  if (a2)
  {
    v3 = a3;
    return swift_bridgeObjectRetain();
  }
  return result;
}

void ConversationRequestProcessor.userIdentification.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userIdentification);
  swift_beginAccess();
  v8 = *v7;
  v9 = v7[1];
  v10 = (void *)v7[2];
  *v7 = a1;
  v7[1] = a2;
  v7[2] = a3;
  outlined consume of ConversationRequestProcessor.UserIdentification?(v8, v9, v10);
}

void outlined consume of ConversationRequestProcessor.UserIdentification?(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease();

  }
}

uint64_t (*ConversationRequestProcessor.userIdentification.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

_QWORD *ConversationRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,unsigned __int8 a26,unsigned __int8 a27)
{
  _QWORD *v27;

  swift_allocObject();
  v27 = specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  return v27;
}

_QWORD *ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,unsigned __int8 a26,unsigned __int8 a27)
{
  _QWORD *v27;

  v27 = specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  return v27;
}

double closure #1 in ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)@<D0>(char a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  id v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(unint64_t, uint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v31;
  uint64_t v32;
  double result;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  __int128 v47[2];
  __int128 v48[2];
  __int128 v49[3];

  if ((a1 & 1) == 0)
  {
    v42 = a4;
    v43 = a5;
    v44 = a8;
    v45 = (uint64_t *)a9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UserID>);
    v22 = type metadata accessor for UserID();
    v23 = *(_QWORD *)(v22 - 8);
    v39 = a6;
    v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_1B4EE3F50;
    v26 = *(void (**)(unint64_t, uint64_t, uint64_t))(v23 + 16);
    v26(v25 + v24, a3, v22);
    v41 = specialized Set.init(_nonEmptyArrayLiteral:)(v25);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1B4EE3F50;
    v28 = v27 + v24;
    a6 = v39;
    v26(v28, a3, v22);
    v40 = specialized Set.init(_nonEmptyArrayLiteral:)(v27);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    goto LABEL_5;
  }
  if (a2)
  {
    v42 = a4;
    v43 = a5;
    v44 = a8;
    v45 = (uint64_t *)a9;
    v19 = a2;
    v41 = specialized static ConversationMUXUtils.getAllUserIds(from:)();
    specialized static ConversationMUXUtils.getAllKnownUserIds(from:)();
    v40 = v20;

LABEL_5:
    v29 = type metadata accessor for MultiUserContextUpdater();
    outlined init with copy of ReferenceResolutionClientProtocol(v42, (uint64_t)v49);
    outlined init with copy of ReferenceResolutionClientProtocol(v43, (uint64_t)v48);
    outlined init with copy of ReferenceResolutionClientProtocol(a6, (uint64_t)v47);
    ObjectType = swift_getObjectType();
    v46 = a15;
    v31 = type metadata accessor for DeviceContextHelper();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    *((_QWORD *)&v38 + 1) = v41;
    *(_QWORD *)&v38 = a16;
    v32 = specialized MultiUserContextUpdater.__allocating_init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(v49, v48, v47, a7, v44, a10, a11, a12, a13, a14, (uint64_t)&v46, v38, v40, v29, v31, ObjectType, (uint64_t)&protocol witness table for DeviceContextHelper);
    v45[3] = v29;
    v45[4] = (uint64_t)&protocol witness table for MultiUserContextUpdater;
    *v45 = v32;
    return result;
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.conversationBridge);
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v37 = 0;
    _os_log_impl(&dword_1B4BE6000, v35, v36, "Cannot create an instance of ContextUpdater since MUXContextMessage is unavailable", v37, 2u);
    MEMORY[0x1B5E44758](v37, -1, -1);
  }

  *(_QWORD *)(a9 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  return result;
}

_QWORD *ConversationRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,unsigned __int8 a27,unsigned __int8 a28)
{
  _QWORD *v28;

  swift_allocObject();
  v28 = specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  return v28;
}

_QWORD *ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,unsigned __int8 a27,unsigned __int8 a28)
{
  _QWORD *v28;

  v28 = specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  return v28;
}

uint64_t ConversationRequestProcessor.pendingTurn.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
  v4 = v3;
  if (v2 == 1)
  {
    v1 = swift_retain();
    v2 = 1;
    v5 = v1;
  }
  else
  {
    v5 = 0;
  }
  outlined consume of ConversationRequestProcessor.State(v1, v4, v2);
  return v5;
}

void ConversationRequestProcessor.handleStartRequest(_:)(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  NSObject *v22;

  v2 = v1;
  v4 = type metadata accessor for InputOrigin();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RequestType();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StartSpeechDictationRequestMessage();
  if (swift_dynamicCastClass())
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
    v22 = Logger.logObject.getter();
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1B4BE6000, v22, v13, "Ignoring dictation start request", v14, 2u);
      MEMORY[0x1B5E44758](v14, -1, -1);
    }

  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0D9E8A0], v8);
    v15 = RequestMessageBase.requestId.getter();
    v22 = v2;
    v16 = v15;
    v18 = v17;
    StartRequestMessageBase.inputOrigin.getter();
    type metadata accessor for ConversationRequestProcessorTurnState();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
    *(_DWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
    *(_OWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1B4EE7A40;
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v11, v8);
    v20 = (uint64_t *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    *v20 = v16;
    v20[1] = v18;
    *(_BYTE *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v7, v4);
    specialized ConversationRequestProcessor.handleStartRequestInternal(_:turnState:isTapToEdit:)(a1, v19, 0, v22);
    swift_release();
  }
}

uint64_t static ConversationRequestProcessor.createUtteranceRREntity(utterance:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UsoIdentifier();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.md5String.getter();
  if (v12)
  {
    type metadata accessor for UsoEntityBuilder_common_LocalisedString();
    swift_allocObject();
    v13 = UsoEntityBuilder_common_LocalisedString.init()();
    MEMORY[0x1B5E4096C](a1, a2);
    swift_bridgeObjectRetain();
    UsoIdentifier.init(value:appBundleId:namespace:)();
    dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if (MEMORY[0x1B5E402AC](v13))
    {
      v14 = type metadata accessor for GroupIdentifier();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 1, 1, v14);
      v15 = v29;
      RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
      swift_release();
      v16 = type metadata accessor for RREntity();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 0, 1, v16);
    }
    else
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v26 = 0;
        _os_log_impl(&dword_1B4BE6000, v24, v25, "#donateUtteranceForReferenceResolution: failed to create UsoEntity_common_LocalisedString entity", v26, 2u);
        MEMORY[0x1B5E44758](v26, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
      }
      v27 = type metadata accessor for RREntity();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v29, 1, 1, v27);
    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1B4BE6000, v19, v20, "#donateUtteranceForReferenceResolution: failed to get md5String from utterance string", v21, 2u);
      MEMORY[0x1B5E44758](v21, -1, -1);
    }

    v22 = type metadata accessor for RREntity();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v29, 1, 1, v22);
  }
}

uint64_t ConversationRequestProcessor.handleStartChildTextRequestMessage(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v23 = type metadata accessor for TextRequestType();
  v2 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for InputOrigin();
  v21 = *(_QWORD *)(v5 - 8);
  v22 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RequestType();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0D9E888], v8);
  v12 = a1;
  v13 = RequestMessageBase.requestId.getter();
  v15 = v14;
  v16 = v12;
  StartRequestMessageBase.inputOrigin.getter();

  type metadata accessor for ConversationRequestProcessorTurnState();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v17 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v17 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1B4EE7A40;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v17 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v11, v8);
  v18 = (uint64_t *)(v17 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *v18 = v13;
  v18[1] = v15;
  *(_BYTE *)(v17 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v17 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v7, v22);
  StartChildTextRequestMessage.textRequestType.getter();
  v19 = v23;
  LODWORD(v15) = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v23) == *MEMORY[0x1E0D9EB60];
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v19);
  specialized ConversationRequestProcessor.handleStartRequestInternal(_:turnState:isTapToEdit:)(v16, v17, v15, v24);
  return swift_release();
}

uint64_t ConversationRequestProcessor.handleStartSpeechRequestMessage(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char started;
  id v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD v18[2];

  v18[0] = type metadata accessor for InputOrigin();
  v2 = *(_QWORD *)(v18[0] - 8);
  MEMORY[0x1E0C80A78](v18[0]);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RequestType();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0D9E8A0], v5);
  v9 = a1;
  v10 = RequestMessageBase.requestId.getter();
  v12 = v11;
  started = StartSpeechRequestMessage.asrOnServer.getter();
  v14 = v9;
  StartRequestMessageBase.inputOrigin.getter();

  type metadata accessor for ConversationRequestProcessorTurnState();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1B4EE7A40;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v8, v5);
  v16 = (uint64_t *)(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *v16 = v10;
  v16[1] = v12;
  *(_BYTE *)(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = started & 1;
  (*(void (**)(uint64_t, char *, _QWORD))(v2 + 32))(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v4, v18[0]);
  specialized ConversationRequestProcessor.handleStartRequestInternal(_:turnState:isTapToEdit:)(v14, v15, 0, (_QWORD *)v18[1]);
  return swift_release();
}

uint64_t ConversationRequestProcessor.handleStartDirectActionRequestMessage(_:)(void *a1)
{
  return ConversationRequestProcessor.handleStartTextRequestMessage(_:)(a1, MEMORY[0x1E0D9E860], 0);
}

uint64_t ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:)(void *a1)
{
  return ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:)(a1, MEMORY[0x1E0D9E880], (uint64_t)&unk_1E6846A70, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:));
}

uint64_t closure #1 in ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v4 + 48) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:)()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient), *(_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient + 24));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = closure #1 in ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:);
  return ReferenceResolutionClientProtocol.collectSalientEntities()();
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  else
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationRequestProcessor.handleStartUnderstandingOnServerTextRequestMessage(_:)(void *a1)
{
  return ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:)(a1, MEMORY[0x1E0D9E8A8], (uint64_t)&unk_1E6846A98, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationRequestProcessor.handleStartUnderstandingOnServerTextRequestMessage(_:));
}

uint64_t ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:)(void *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t *v23;
  void (*v24)(uint64_t, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a3;
  v36 = a4;
  v6 = v4;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8);
  v34 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for InputOrigin();
  v10 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for RequestType();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, *a2, v13);
  v17 = a1;
  v18 = RequestMessageBase.requestId.getter();
  v20 = v19;
  v21 = v17;
  StartRequestMessageBase.inputOrigin.getter();

  type metadata accessor for ConversationRequestProcessorTurnState();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1B4EE7A40;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v16, v13);
  v23 = (uint64_t *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *v23 = v18;
  v23[1] = v20;
  *(_BYTE *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
  v24 = *(void (**)(uint64_t, char *, uint64_t))(v10 + 32);
  v25 = (uint64_t)v34;
  v24(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v12, v33);
  v26 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = one-time initialization token for shared;
  swift_retain();
  if (v27 != -1)
    swift_once();
  swift_beginAccess();
  v28 = static MessageBusActor.shared;
  v29 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v30 = (_QWORD *)swift_allocObject();
  v30[2] = v28;
  v30[3] = v29;
  v30[4] = v6;
  swift_retain();
  *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rraasCollectionTask) = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v25, v36, (uint64_t)v30);
  swift_release();
  specialized ConversationRequestProcessor.handleStartRequestInternal(_:turnState:isTapToEdit:)(v21, v22, 0, v6);
  return swift_release();
}

uint64_t closure #1 in ConversationRequestProcessor.handleStartUnderstandingOnServerTextRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v4 + 48) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationRequestProcessor.handleStartUnderstandingOnServerTextRequestMessage(_:)()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient), *(_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient + 24));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = closure #1 in ConversationRequestProcessor.handleStartUnderstandingOnServerTextRequestMessage(_:);
  return ReferenceResolutionClientProtocol.collectSalientEntities()();
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  else
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t ConversationRequestProcessor.handleStartLocalRequestMessage(_:)(void *a1)
{
  return ConversationRequestProcessor.handleStartTextRequestMessage(_:)(a1, MEMORY[0x1E0D9E890], 0);
}

uint64_t ConversationRequestProcessor.handleStartCorrectedSpeechRequestMessage(_:)(void *a1)
{
  return ConversationRequestProcessor.handleStartTextRequestMessage(_:)(a1, MEMORY[0x1E0D9E888], 1);
}

uint64_t ConversationRequestProcessor.handleStartIFRequestMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v4 = type metadata accessor for InputOrigin();
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RequestType();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v27 = a1;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc();
    v28 = v2;
    v17 = v16;
    v32 = v16;
    *(_DWORD *)v15 = 136315138;
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x80000001B4EFA0D0, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v12, v13, "%s", v15, 0xCu);
    swift_arrayDestroy();
    v18 = v17;
    v2 = v28;
    MEMORY[0x1B5E44758](v18, -1, -1);
    v19 = v15;
    a1 = v27;
    MEMORY[0x1B5E44758](v19, -1, -1);
  }

  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0D9E888], v7);
  v20 = a1;
  v21 = RequestMessageBase.requestId.getter();
  v23 = v22;
  StartIFRequestMessage.inputOrigin.getter();

  type metadata accessor for ConversationRequestProcessorTurnState();
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1B4EE7A40;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v10, v7);
  v25 = (uint64_t *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *v25 = v21;
  v25[1] = v23;
  *(_BYTE *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v6, v30);
  specialized ConversationRequestProcessor.handleStartRequestInternal(_:turnState:isTapToEdit:)(v20, v24, 0, v2);
  return swift_release();
}

void ConversationRequestProcessor.handleStartCandidateRequestMessage(_:)(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v9 = a1;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc();
    v6 = (_QWORD *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v10 = v7;
    *(_DWORD *)v5 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000026, 0x80000001B4EFA0F0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2112;
    v8 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v6 = v9;

    _os_log_impl(&dword_1B4BE6000, v3, v4, "%s: %@", (uint8_t *)v5, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);

  }
  else
  {

  }
}

void ConversationRequestProcessor.sendRequestContextData(_:turn:candidateRequestMessages:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v8)(uint64_t, void *, uint64_t);
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint8_t *buf;
  uint64_t v32;
  os_log_type_t type;
  _QWORD *typea;
  void *v35;
  NSObject *v36;

  v4 = v3;
  v8 = *(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v4 + 376);
  swift_retain();
  v9 = a1;
  v35 = a1;
  v8(a2, a1, 2);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  v11 = v9;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    type = v13;
    v14 = (uint8_t *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v36 = v32;
    *(_DWORD *)v14 = 136315138;
    buf = v14;
    v15 = v11;
    v16 = objc_msgSend(v15, sel_description);
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, (uint64_t *)&v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v12, type, "RequestContextData: %s", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v32, -1, -1);
    MEMORY[0x1B5E44758](buf, -1, -1);

  }
  else
  {

  }
  (*(void (**)(id))(**(_QWORD **)(v4
                                           + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent)
                             + 408))(v11);
  v20 = *(_QWORD *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient + 24);
  v21 = *(_QWORD *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient), v20);
  (*(void (**)(id, _QWORD, _UNKNOWN **, uint64_t, uint64_t))(v21 + 16))(v11, *(_QWORD *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate), &protocol witness table for ConversationBridgeProcessorDelegate, v20, v21);
  v22 = v11;
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    typea = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v25 = 138412290;
    v36 = v22;
    v26 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *typea = v35;

    _os_log_impl(&dword_1B4BE6000, v23, v24, "Successfully sent: %@", v25, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](typea, -1, -1);
    MEMORY[0x1B5E44758](v25, -1, -1);
  }
  else
  {

    v23 = v22;
  }

  v27 = *(_QWORD *)(a3 + 16);
  if (v27)
  {
    swift_bridgeObjectRetain();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v30 = 134217984;
      v36 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v28, v29, "Replaying %ld cached candidate messages that were received for this request prior to the start-turn signal", v30, 0xCu);
      MEMORY[0x1B5E44758](v30, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    __asm { BR              X10 }
  }
}

void ConversationRequestProcessor.handleASRResultCandidateMessage(_:)(void *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;

  v2 = v1;
  v4 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestType>);
  v7 = type metadata accessor for RequestType();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B4EE3F50;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v8 + 104))(v10 + v9, *MEMORY[0x1E0D9E8A0], v7);
  LODWORD(v7) = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled);
  swift_retain();
  v11 = a1;
  specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(v11, v4, v6, v10, (void (*)(os_log_t, uint64_t))0xF000000000000007, v7, v2, (uint64_t)v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

}

void ConversationRequestProcessor.handleMUXASRResultCandidateMessage(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  id v16;
  id v17;
  os_log_t v18;
  uint8_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  char v23;
  NSObject *v24;
  os_log_type_t v25;
  _DWORD *v26;
  void (*v28)(char *, uint64_t);
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  uint64_t v39;
  id v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  os_log_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  os_log_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[2];
  uint64_t v58;

  v2 = type metadata accessor for RequestType();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v52 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v48 - v7;
  MEMORY[0x1E0C80A78](v6);
  v53 = (char *)&v48 - v9;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  v11 = a1;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v51 = v3;
    v15 = (uint8_t *)v14;
    v49 = (os_log_t)swift_slowAlloc();
    *(_DWORD *)v15 = 138412290;
    v58 = (uint64_t)v11;
    v16 = v11;
    v50 = v8;
    v17 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v18 = v49;
    v49->isa = (Class)v11;

    v8 = v50;
    _os_log_impl(&dword_1B4BE6000, v12, v13, "ConversationBridge handling message: %@", v15, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v18, -1, -1);
    v19 = v15;
    v3 = v51;
    MEMORY[0x1B5E44758](v19, -1, -1);

  }
  else
  {

  }
  v20 = (*(uint64_t (**)(void))(*(_QWORD *)v54 + 528))();
  if (!v20)
  {
    swift_retain_n();
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (_DWORD *)swift_slowAlloc();
      v58 = swift_slowAlloc();
      *v26 = 136315138;
      (*(void (**)(void))(*(_QWORD *)v54 + 368))();
      __asm { BR              X10 }
    }

LABEL_26:
    swift_release_n();
    return;
  }
  v21 = v11;
  v22 = v20 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  v54 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v54(v53, v22, v2);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v8, *MEMORY[0x1E0D9E8A0], v2);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D8]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v57[0] == v55 && v57[1] == v56)
    v23 = 1;
  else
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28 = *(void (**)(char *, uint64_t))(v3 + 8);
  v28(v8, v2);
  v28(v53, v2);
  if ((v23 & 1) == 0)
  {
    v34 = v21;
    swift_retain_n();
    v35 = v34;
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    v38 = v37;
    if (os_log_type_enabled(v36, v37))
    {
      v39 = swift_slowAlloc();
      v53 = (char *)swift_slowAlloc();
      v51 = swift_slowAlloc();
      v57[0] = v51;
      *(_DWORD *)v39 = 138412546;
      LODWORD(v50) = v38;
      v49 = v36;
      v55 = (uint64_t)v35;
      v40 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_QWORD *)v53 = v35;

      *(_WORD *)(v39 + 12) = 2080;
      v41 = v52;
      v54(v52, v22, v2);
      v42 = RequestType.rawValue.getter();
      v44 = v43;
      v28(v41, v2);
      v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v45 = v49;
      _os_log_impl(&dword_1B4BE6000, v49, (os_log_type_t)v50, "%@ is not supported for this requestType: %s", (uint8_t *)v39, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v46 = v53;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v46, -1, -1);
      v47 = v51;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v47, -1, -1);
      MEMORY[0x1B5E44758](v39, -1, -1);
      swift_release();

      return;
    }

    goto LABEL_26;
  }
  specialized ConversationRequestProcessor.makeResultCandidateStatesForMultiUser(from:)(v21);
  v30 = v29;
  if (v29 >> 62)
  {
    v31 = _CocoaArrayWrapper.endIndex.getter();
    if (v31)
      goto LABEL_16;
  }
  else
  {
    v31 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v31)
    {
LABEL_16:
      if (v31 < 1)
      {
        __break(1u);
        JUMPOUT(0x1B4D5947CLL);
      }
      v32 = 0;
      do
      {
        if ((v30 & 0xC000000000000001) != 0)
        {
          v33 = MEMORY[0x1B5E43B94](v32, v30);
        }
        else
        {
          v33 = *(_QWORD *)(v30 + 8 * v32 + 32);
          swift_retain();
        }
        ++v32;
        ConversationRequestProcessorTurnState.addResultCandidateState(_:)(v33);
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 384))(4);
        swift_release();
      }
      while (v31 != v32);
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t ConversationRequestProcessor.handleMultiUserTRPCandidateRequestMessage(_:)(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  id v28;
  id v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t (*v42)(uint64_t *, _QWORD);
  uint64_t v43;
  int64_t v44;
  unsigned int v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52[5];

  if (one-time initialization token for conversationBridge != -1)
    goto LABEL_33;
  while (1)
  {
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
    v3 = a1;
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc();
      v7 = (_QWORD *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v52[0] = v8;
      *(_DWORD *)v6 = 138412546;
      v9 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v7 = v3;

      *(_WORD *)(v6 + 12) = 2080;
      v10 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v4, v5, "ConversationBridge handling message: %@ for top level trpId %s", (uint8_t *)v6, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v7, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v6, -1, -1);

    }
    else
    {

    }
    if (!(*(uint64_t (**)(void))(*(_QWORD *)v48 + 528))())
      break;
    v46 = v3;
    a1 = v3;
    v12 = MultiUserTRPCandidateRequestMessage.userIdToTRPCandidateDict.getter();
    v13 = 0;
    v43 = v12 + 64;
    v47 = v12;
    v14 = 1 << *(_BYTE *)(v12 + 32);
    v15 = -1;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    v16 = v15 & *(_QWORD *)(v12 + 64);
    v44 = (unint64_t)(v14 + 63) >> 6;
    v45 = *MEMORY[0x1E0D9E8A0];
    while (1)
    {
      if (v16)
      {
        v50 = (v16 - 1) & v16;
        v51 = v13;
        v17 = __clz(__rbit64(v16)) | (v13 << 6);
        goto LABEL_10;
      }
      v30 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
        goto LABEL_32;
      }
      if (v30 >= v44)
        goto LABEL_26;
      v31 = *(_QWORD *)(v43 + 8 * v30);
      v32 = v13 + 1;
      if (!v31)
      {
        v32 = v13 + 2;
        if (v13 + 2 >= v44)
          goto LABEL_26;
        v31 = *(_QWORD *)(v43 + 8 * v32);
        if (!v31)
        {
          v32 = v13 + 3;
          if (v13 + 3 >= v44)
            goto LABEL_26;
          v31 = *(_QWORD *)(v43 + 8 * v32);
          if (!v31)
            break;
        }
      }
LABEL_25:
      v50 = (v31 - 1) & v31;
      v51 = v32;
      v17 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_10:
      v18 = (uint64_t *)(*(_QWORD *)(v47 + 48) + 16 * v17);
      v19 = v18[1];
      v49 = *v18;
      v20 = (unint64_t)*(id *)(*(_QWORD *)(v47 + 56) + 8 * v17);
      swift_bridgeObjectRetain();
      v21 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
      a1 = v22;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestType>);
      v23 = type metadata accessor for RequestType();
      v24 = *(_QWORD *)(v23 - 8);
      v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_1B4EE3F50;
      (*(void (**)(unint64_t, _QWORD, uint64_t))(v24 + 104))(v26 + v25, v45, v23);
      v27 = (void (*)(char *, unint64_t, uint64_t))(v20 | 0x2000000000000000);
      v28 = v46;
      v29 = (id)v20;
      swift_bridgeObjectRetain();
      swift_retain();
      specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(v29, v21, (void (*)(char *, uint64_t))a1, v26, v27, 0, v48, v48, v29, v28, v49, v19);
      swift_release();

      swift_bridgeObjectRelease();
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v16 = v50;
      v13 = v51;
    }
    v33 = v13 + 4;
    if (v13 + 4 >= v44)
    {
LABEL_26:
      swift_release();
      return swift_release();
    }
    v31 = *(_QWORD *)(v43 + 8 * v33);
    if (v31)
    {
      v32 = v13 + 4;
      goto LABEL_25;
    }
    while (1)
    {
      v32 = v33 + 1;
      if (__OFADD__(v33, 1))
        break;
      if (v32 >= v44)
        goto LABEL_26;
      v31 = *(_QWORD *)(v43 + 8 * v32);
      ++v33;
      if (v31)
        goto LABEL_25;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once();
  }
  v35 = v3;
  v36 = Logger.logObject.getter();
  v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc();
    v39 = swift_slowAlloc();
    v52[0] = v39;
    *(_DWORD *)v38 = 136315138;
    swift_getObjectType();
    v40 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v36, v37, "%s received for an inactive request. Will cache it for when we get a start-turn signal.", v38, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v39, -1, -1);
    MEMORY[0x1B5E44758](v38, -1, -1);

  }
  else
  {

  }
  v42 = (uint64_t (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v48 + 384))(v52);
  ConversationRequestProcessor.State.cacheCandidateMessage(_:)();
  return v42(v52, 0);
}

void ConversationRequestProcessor.State.cacheCandidateMessage(_:)()
{
  __asm { BR              X10 }
}

void sub_1B4D59B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  id v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v4 = (id)(v2 & 0x1FFFFFFFFFFFFFFFLL);
  swift_retain();
  swift_bridgeObjectRetain();
  v5 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v7 = v5[2];
  v6 = v5[3];
  v8 = v7 + 1;
  if (v7 >= v6 >> 1)
  {
    v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
    v8 = v7 + 1;
    v5 = v9;
  }
  v5[2] = v8;
  v5[v7 + 4] = v2;
  outlined consume of ConversationRequestProcessor.State(v0, v3, 1);

  *(_QWORD *)v1 = v0;
  *(_QWORD *)(v1 + 8) = v5;
  *(_BYTE *)(v1 + 16) = 1;
}

void ConversationRequestProcessor.handleGestureBasedResultCandidateMessage(_:)(void *a1)
{
  ConversationRequestProcessor.handleGestureBasedResultCandidateMessage(_:)(a1, MEMORY[0x1E0D9E890], (void (*)(id))specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:));
}

void ConversationRequestProcessor.handleDirectActionResultCandidateMessage(_:)(void *a1)
{
  ConversationRequestProcessor.handleGestureBasedResultCandidateMessage(_:)(a1, MEMORY[0x1E0D9E860], (void (*)(id))specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:));
}

void ConversationRequestProcessor.handleGestureBasedResultCandidateMessage(_:)(void *a1, unsigned int *a2, void (*a3)(id))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;

  ResultCandidateRequestMessageBase.resultCandidateId.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestType>);
  v6 = type metadata accessor for RequestType();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B4EE3F50;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v7 + 104))(v9 + v8, *a2, v6);
  swift_retain();
  v10 = a1;
  a3(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

}

void ConversationRequestProcessor.fallbackToIntelligenceFlow(prescribedTool:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v1 = v0;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "Trying to fallback to IntelligenceFlow", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  MEMORY[0x1E0C80A78](v6);
  v7 = objc_allocWithZone((Class)type metadata accessor for FallbackToIFRequestedMessage());
  v8 = FallbackToIFRequestedMessage.init(build:)();
  if (v8)
  {
    v9 = (void *)v8;
    __swift_project_boxed_opaque_existential_1(v1 + 3, v1[6]);
    dispatch thunk of MessagePublishing.postMessage(_:)();
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1B4BE6000, v10, v11, "Posted FallbackToIFRequestedMessage to the bus", v12, 2u);
      MEMORY[0x1B5E44758](v12, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    swift_retain();
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v19 = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = v1[8];
      v18 = v1[9];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v13, v14, "Failed to create FallbackToIFRequestedMessage for requestId: %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v16, -1, -1);
      MEMORY[0x1B5E44758](v15, -1, -1);

    }
    else
    {

      swift_release();
    }
  }
}

uint64_t closure #1 in ConversationRequestProcessor.fallbackToIntelligenceFlow(prescribedTool:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrescribedTool?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FallbackToIFRequestedMessage.PrescribedTool?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *MEMORY[0x1E0D9E648];
  v18 = type metadata accessor for MessageSource();
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v16, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  FallbackToIFRequestedMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  FallbackToIFRequestedMessage.Builder.assistantId.setter();
  v20 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v21 = type metadata accessor for UUID();
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v13, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v13, 0, 1, v21);
  FallbackToIFRequestedMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  FallbackToIFRequestedMessage.Builder.requestId.setter();
  outlined init with copy of ReferenceResolutionClientProtocol?(a3, (uint64_t)v7, &demangling cache variable for type metadata for PrescribedTool?);
  v23 = type metadata accessor for PrescribedTool();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v7, 1, v23) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for PrescribedTool?);
    v25 = type metadata accessor for FallbackToIFRequestedMessage.PrescribedTool();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v10, 1, 1, v25);
  }
  else
  {
    PrescribedTool.messageBusRepresentation.getter((uint64_t)v10);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v23);
  }
  return FallbackToIFRequestedMessage.Builder.prescribedTool.setter();
}

uint64_t PrescribedTool.messageBusRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;

  v3 = type metadata accessor for PrescribedTool();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B950];
  v5 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v22 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v22 - v9, v1, v3);
  static PrescribedTool.searchTool.getter();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type PrescribedTool and conformance PrescribedTool, v4, MEMORY[0x1E0D9B960]);
  v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v3);
  v12(v10, v3);
  if ((v11 & 1) != 0)
  {
    v13 = *MEMORY[0x1E0D9D6E8];
    v14 = type metadata accessor for FallbackToIFRequestedMessage.PrescribedTool();
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 104))(a1, v13, v14);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1B4BE6000, v18, v19, "Unknown PrescribedTool", v20, 2u);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }

    v21 = type metadata accessor for FallbackToIFRequestedMessage.PrescribedTool();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a1, 1, 1, v21);
  }
}

void ConversationRequestProcessor.handleSpeechStopDetectedMessage(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  void (*v40)(uint64_t *, _QWORD);
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  char v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  unint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75[4];

  v2 = v1;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v75[0] = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = v5;
    v11 = v5;
    v12 = objc_msgSend(v10, sel_description);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v73 = v2;
    v15 = v14;

    v5 = v11;
    v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v2 = v73;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v6, v7, "ConversationBridge received SpeechStopDetectedMessage: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);

  }
  else
  {

  }
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) & 1) != 0)
  {
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B4BE6000, v16, v17, "SpeechStopDetectedMessage handling was never undertaken for multi user devices as Flexible Endpoitning was deprecated before multi user on Medoc work started.", v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);
    }

    return;
  }
  v19 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 528))();
  if (v19)
  {
    v20 = v19;
    v21 = (uint64_t *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v23 = *(_QWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v22 = *(_QWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
    swift_bridgeObjectRetain();
    if (v23 == RequestMessageBase.requestId.getter() && v22 == v24)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
      {
        v27 = v5;
        swift_retain_n();
        v28 = v27;
        v29 = Logger.logObject.getter();
        v30 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v29, v30))
        {
          v31 = swift_slowAlloc();
          v32 = swift_slowAlloc();
          v75[0] = v32;
          *(_DWORD *)v31 = 136315394;
          v33 = RequestMessageBase.requestId.getter();
          v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v31 + 12) = 2080;
          v35 = *v21;
          v36 = v21[1];
          swift_bridgeObjectRetain();
          v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v29, v30, "SpeechStopDetectedMessage request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v31, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v32, -1, -1);
          MEMORY[0x1B5E44758](v31, -1, -1);
          swift_release();

        }
        else
        {

          swift_release_n();
        }
        return;
      }
    }
    v41 = SpeechStopDetectedMessage.lastTRPId.getter();
    v43 = v42;
    v44 = (unint64_t *)(v20 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    v46 = *v44;
    v45 = (void *)v44[1];
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v46, v45);
    v47 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v41, v43, v46, v45);
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v46, v45);
    if (v47)
    {
      swift_retain_n();
      v48 = Logger.logObject.getter();
      v49 = static os_log_type_t.debug.getter();
      v72 = v41;
      if (os_log_type_enabled(v48, v49))
      {
        v70 = v43;
        v50 = (uint8_t *)swift_slowAlloc();
        v51 = swift_slowAlloc();
        v74 = v51;
        *(_DWORD *)v50 = 136315138;
        v71 = v5;
        v52 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 800);
        v53 = swift_retain();
        v54 = v52(v53);
        v56 = v55;
        swift_release();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        v5 = v71;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v48, v49, "SpeechStopDetectedMessage received for TRP state: %s", v50, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v51, -1, -1);
        v57 = v50;
        v43 = v70;
        MEMORY[0x1B5E44758](v57, -1, -1);

      }
      else
      {

        v58 = swift_release_n();
      }
      v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 376))(v58);
      if (ResultCandidateProcessingStatus.rawValue.getter(v63) == 0x64656C65636E6163 && v64 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v66 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(id, uint64_t, uint64_t))(*(_QWORD *)v2 + 864))(v5, v20, v47);
LABEL_39:
          swift_release();
          swift_release();
          return;
        }
      }
      swift_bridgeObjectRetain();
      v59 = Logger.logObject.getter();
      v67 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v59, v67))
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_39;
      }
      v68 = (uint8_t *)swift_slowAlloc();
      v69 = swift_slowAlloc();
      v74 = v69;
      *(_DWORD *)v68 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v43, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v59, v67, "TRP ID: %s already canceled. Not sending commit signal.", v68, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v69, -1, -1);
      MEMORY[0x1B5E44758](v68, -1, -1);
      swift_release();
    }
    else
    {
      swift_bridgeObjectRetain();
      v59 = Logger.logObject.getter();
      v60 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v59, v60))
      {

        swift_bridgeObjectRelease_n();
        swift_release();
        return;
      }
      v61 = (uint8_t *)swift_slowAlloc();
      v62 = swift_slowAlloc();
      v74 = v62;
      *(_DWORD *)v61 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v59, v60, "Received SpeechStopDetectedMessage before RC state was created for TRP ID: %s. Dropping it on the floor.", v61, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v62, -1, -1);
      MEMORY[0x1B5E44758](v61, -1, -1);
    }
    swift_release();

    return;
  }
  v37 = Logger.logObject.getter();
  v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v39 = 0;
    _os_log_impl(&dword_1B4BE6000, v37, v38, "SpeechStopDetectedMessage received for an inactive request. Will cache it for when we get a start-turn signal.", v39, 2u);
    MEMORY[0x1B5E44758](v39, -1, -1);
  }

  v40 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v2 + 384))(v75);
  ConversationRequestProcessor.State.cacheCandidateMessage(_:)();
  v40(v75, 0);
}

void ConversationRequestProcessor.handleTRPCandidateRequestMessage(_:)(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(unint64_t, _QWORD, uint64_t);
  id v14;

  v2 = v1;
  v4 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestType>);
  v7 = type metadata accessor for RequestType();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B4EE3BA0;
  v12 = v11 + v10;
  v13 = *(void (**)(unint64_t, _QWORD, uint64_t))(v8 + 104);
  v13(v12, *MEMORY[0x1E0D9E8A0], v7);
  v13(v12 + v9, *MEMORY[0x1E0D9E890], v7);
  LODWORD(v12) = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled);
  swift_retain();
  v14 = (id)a1;
  specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(v14, v4, v6, v11, a1 | 0x2000000000000000, v12, v2, v2, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

}

void ConversationRequestProcessor.handleTextBasedTRPCandidateMessage(_:)(void *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;

  v2 = v1;
  v4 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestType>);
  v7 = type metadata accessor for RequestType();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B4EE3F50;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v8 + 104))(v10 + v9, *MEMORY[0x1E0D9E888], v7);
  swift_retain();
  v11 = a1;
  specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(v11, v4, v6, v10, 0xF000000000000007, 0, v2, (uint64_t)v11, (uint64_t (*)(uint64_t))specialized ConversationRequestProcessor.makeResultCandidateState(from:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

}

void ConversationRequestProcessor.handleTTResponseMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  void (*v54)(uint64_t *, _QWORD);
  char v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  _QWORD *v62;
  unsigned __int8 v63;
  uint64_t v64;
  id v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  id v82;
  id v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  char v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint8_t *v100;
  os_log_type_t v101;
  uint8_t *v102;
  NSObject *v103;
  os_log_type_t v104;
  _BOOL4 v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t);
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  void (*v118)(char *);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  os_log_type_t v124;
  uint8_t *v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  os_log_type_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  int v139;
  BOOL v140;
  os_log_type_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  void *v146;
  uint64_t v147;
  void *v148;
  char *v149;
  void *v150;
  char *v151;
  char *v152;
  void *v153;
  char *v154;
  void *v155;
  char *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  NSObject *v166;
  os_log_type_t v167;
  uint8_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  NSObject *v174;
  os_log_type_t v175;
  uint8_t *v176;
  NSObject *v177;
  os_log_type_t v178;
  uint8_t *v179;
  unsigned int v180;
  _QWORD *v181;
  unint64_t v182;
  uint8_t *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206[5];

  v2 = v1;
  v4 = type metadata accessor for RequestType();
  v202 = *(_QWORD *)(v4 - 8);
  v203 = (uint64_t *)v4;
  MEMORY[0x1E0C80A78](v4);
  v201 = (uint64_t)&v181 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  MEMORY[0x1E0C80A78](v6);
  v191 = (char *)&v181 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  MEMORY[0x1E0C80A78](v8);
  v190 = (char *)&v181 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  MEMORY[0x1E0C80A78](v10);
  v189 = (char *)&v181 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v12);
  v188 = (char *)&v181 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v14);
  v187 = (char *)&v181 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TCUMappedNLResponse?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v181 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for TCUMappedNLResponse();
  v194 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v181 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = type metadata accessor for TTResponseMessage.MitigationDecision();
  v198 = *(_QWORD *)(v200 - 8);
  v22 = MEMORY[0x1E0C80A78](v200);
  v185 = (char *)&v181 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x1E0C80A78](v22);
  v184 = (char *)&v181 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v197 = (char *)&v181 - v27;
  MEMORY[0x1E0C80A78](v26);
  v196 = (char *)&v181 - v28;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.conversationBridge);
  v31 = a1;
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  v34 = os_log_type_enabled(v32, v33);
  v195 = v19;
  v192 = v21;
  v193 = v18;
  if (v34)
  {
    v35 = swift_slowAlloc();
    v186 = v30;
    v36 = (uint8_t *)v35;
    v37 = swift_slowAlloc();
    v206[0] = v37;
    *(_DWORD *)v36 = 136315138;
    v199 = v2;
    v183 = v36 + 4;
    v38 = v31;
    v39 = v31;
    v40 = objc_msgSend(v38, sel_description);
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;

    v31 = v39;
    v205 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, v206);
    v2 = v199;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v32, v33, "ConversationBridge received TTResponseMessage: %s", v36, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v37, -1, -1);
    v44 = v36;
    v30 = v186;
    MEMORY[0x1B5E44758](v44, -1, -1);

  }
  else
  {

  }
  v45 = (*(uint64_t (**)(void))(*v2 + 528))();
  if (v45)
  {
    v46 = v45;
    v47 = (uint64_t *)(v45 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v49 = *(_QWORD *)(v45 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v48 = *(_QWORD *)(v45 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
    swift_bridgeObjectRetain();
    if (v49 == RequestMessageBase.requestId.getter() && v48 == v50)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v55 & 1) == 0)
      {
        v82 = v31;
        swift_retain_n();
        v83 = v82;
        v84 = Logger.logObject.getter();
        v85 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v84, v85))
        {
          v86 = swift_slowAlloc();
          v87 = swift_slowAlloc();
          v206[0] = v87;
          *(_DWORD *)v86 = 136315394;
          v88 = RequestMessageBase.requestId.getter();
          v205 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, v206);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v86 + 12) = 2080;
          v90 = *v47;
          v91 = v47[1];
          swift_bridgeObjectRetain();
          v205 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, v206);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v84, v85, "TTResponseMessage request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v86, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v87, -1, -1);
          v92 = v86;
          goto LABEL_29;
        }

LABEL_31:
        swift_release_n();
        return;
      }
    }
    if (ConversationRequestProcessorTurnState.requestSupportedForOnDeviceExecution()())
    {
      v56 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
      v58 = v57;
      v59 = (unint64_t *)(v46
                               + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      v60 = *v59;
      v61 = (void *)v59[1];
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(*v59, v61);
      v62 = (_QWORD *)ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v56, v58, v60, v61);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v60, v61);
      if (v62)
      {
        if ((v56 != v62[2] || v58 != v62[3]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          v84 = Logger.logObject.getter();
          v101 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v84, v101))
          {
            v102 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v102 = 0;
            _os_log_impl(&dword_1B4BE6000, v84, v101, "TTResponse is for a TRP that does not match the finalized TRP, ignoring this.", v102, 2u);
            v100 = v102;
            goto LABEL_39;
          }

          goto LABEL_45;
        }
        v203 = (uint64_t *)v59;
        v63 = (*(uint64_t (**)(void))(*v62 + 376))();
        if (ResultCandidateProcessingStatus.rawValue.getter(v63) == 0x64656C65636E6163 && v64 == 0xE800000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_33:
          swift_bridgeObjectRetain();
          v84 = Logger.logObject.getter();
          v97 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v84, v97))
          {
            v98 = (uint8_t *)swift_slowAlloc();
            v99 = swift_slowAlloc();
            v205 = v99;
            *(_DWORD *)v98 = 136315138;
            swift_bridgeObjectRetain();
            v204 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v58, &v205);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1B4BE6000, v84, v97, "TRP ID: %s has already been cancelled. Not handling TTResponseMessage any further", v98, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v99, -1, -1);
            v100 = v98;
LABEL_39:
            MEMORY[0x1B5E44758](v100, -1, -1);
LABEL_40:
            swift_release();
            goto LABEL_41;
          }

          swift_bridgeObjectRelease_n();
          goto LABEL_45;
        }
        v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v96 & 1) != 0)
          goto LABEL_33;
        v202 = (uint64_t)v31;
        swift_retain_n();
        v103 = Logger.logObject.getter();
        v104 = static os_log_type_t.debug.getter();
        v105 = os_log_type_enabled(v103, v104);
        v183 = (uint8_t *)v46;
        v199 = v2;
        v201 = v56;
        if (v105)
        {
          v106 = (uint8_t *)swift_slowAlloc();
          v107 = swift_slowAlloc();
          v182 = v58;
          v108 = v107;
          v205 = v107;
          *(_DWORD *)v106 = 136315138;
          v109 = *(uint64_t (**)(uint64_t))(*v62 + 800);
          v110 = swift_retain();
          v111 = v109(v110);
          v113 = v112;
          swift_release();
          v204 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v113, &v205);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v103, v104, "Received TTResponseMessage when RC state: %s", v106, 0xCu);
          swift_arrayDestroy();
          v114 = v108;
          v58 = v182;
          MEMORY[0x1B5E44758](v114, -1, -1);
          MEMORY[0x1B5E44758](v106, -1, -1);

        }
        else
        {

          swift_release_n();
        }
        v115 = v196;
        TTResponseMessage.mitigationDecision.getter();
        v116 = v197;
        v117 = v198;
        v118 = *(void (**)(char *))(v198 + 104);
        LODWORD(v186) = *MEMORY[0x1E0D9C950];
        v119 = v200;
        v118(v197);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C978], MEMORY[0x1E0D9C990]);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        v121 = v204;
        v120 = v205;
        v122 = *(void (**)(char *, uint64_t))(v117 + 8);
        v122(v116, v119);
        v123 = ((uint64_t (*)(char *, uint64_t))v122)(v115, v119);
        if (v120 == v121)
        {
          swift_bridgeObjectRetain();
          v84 = Logger.logObject.getter();
          v124 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v84, v124))
          {

            swift_release();
            swift_bridgeObjectRelease_n();
            goto LABEL_46;
          }
          v125 = (uint8_t *)swift_slowAlloc();
          v126 = swift_slowAlloc();
          v205 = v126;
          *(_DWORD *)v125 = 136315138;
          swift_bridgeObjectRetain();
          v204 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v201, v58, &v205);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          v127 = "TTResponseMessage with TRP ID: %s has mitigationDecision as forceMitigate, not proceeding further";
LABEL_54:
          _os_log_impl(&dword_1B4BE6000, v84, v124, v127, v125, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v126, -1, -1);
          MEMORY[0x1B5E44758](v125, -1, -1);
          goto LABEL_40;
        }
        v128 = (*(uint64_t (**)(uint64_t))(*v62 + 280))(v123);
        swift_bridgeObjectRelease();
        if (v128)
        {
          swift_bridgeObjectRetain();
          v84 = Logger.logObject.getter();
          v124 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v84, v124))
          {
            v125 = (uint8_t *)swift_slowAlloc();
            v126 = swift_slowAlloc();
            v205 = v126;
            *(_DWORD *)v125 = 136315138;
            swift_bridgeObjectRetain();
            v204 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v201, v58, &v205);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            v127 = "Already received TTResponseMessage for this TRP ID: %s .. this happened because we received multiple "
                   "NL outputs for the same TRP ID.";
            goto LABEL_54;
          }

LABEL_67:
          swift_bridgeObjectRelease_n();
LABEL_45:
          swift_release();
          goto LABEL_46;
        }
        v129 = (uint64_t)v193;
        v130 = (void *)v202;
        TTResponseMessage.tcuMappedNLResponse.getter();
        v132 = v194;
        v131 = v195;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v194 + 48))(v129, 1, v195) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v129, &demangling cache variable for type metadata for TCUMappedNLResponse?);
          v133 = v130;
          swift_bridgeObjectRetain();
          v84 = Logger.logObject.getter();
          v134 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v84, v134))
          {

            goto LABEL_67;
          }
          v135 = swift_slowAlloc();
          v202 = swift_slowAlloc();
          v205 = v202;
          *(_DWORD *)v135 = 136315394;
          swift_bridgeObjectRetain();
          v204 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v201, v58, &v205);
          v203 = &v205;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v135 + 12) = 2080;
          v136 = v184;
          TTResponseMessage.mitigationDecision.getter();
          v137 = v185;
          v138 = v200;
          (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v185, v136, v200);
          v139 = (*(uint64_t (**)(char *, uint64_t))(v117 + 88))(v137, v138);
          v140 = v139 == *MEMORY[0x1E0D9C968];
          v181 = v62;
          if (v140)
          {
            v141 = v134;
            v142 = 0xE800000000000000;
            v143 = 0x64657463656C6573;
            v144 = v202;
          }
          else
          {
            v144 = v202;
            if (v139 == *MEMORY[0x1E0D9C970])
            {
              v141 = v134;
              v142 = 0xE900000000000064;
              v143 = 0x657461676974696DLL;
            }
            else
            {
              v141 = v134;
              if (v139 == *MEMORY[0x1E0D9C958])
              {
                v142 = 0xEE00646574616769;
                v180 = 1652121965;
              }
              else
              {
                if (v139 != (_DWORD)v186)
                {
                  v122(v185, v200);
                  v143 = 0;
                  v142 = 0xE000000000000000;
                  goto LABEL_91;
                }
                v142 = 0xED00006574616769;
                v180 = 1668444006;
              }
              v143 = v180 | 0x74694D6500000000;
            }
          }
LABEL_91:
          v122(v136, v200);
          v204 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v142, &v205);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v84, v141, "TTResponseMessage with TRP ID: %s has no tcuMapedNLResponse and has mitigationDecision as %s... ignoring this message.", (uint8_t *)v135, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v144, -1, -1);
          MEMORY[0x1B5E44758](v135, -1, -1);
          swift_release();
          goto LABEL_41;
        }
        v182 = v58;
        v145 = v192;
        (*(void (**)(char *, uint64_t, uint64_t))(v132 + 32))(v192, v129, v131);
        v146 = (void *)TCUMappedNLResponse.nlResponse.getter();
        v147 = NLParseResponse.userParses.getter();

        (*(void (**)(uint64_t))(*v62 + 288))(v147);
        v148 = (void *)TCUMappedNLResponse.nlResponse.getter();
        v149 = v187;
        NLParseResponse.fallbackParse.getter();

        (*(void (**)(char *))(*v62 + 648))(v149);
        v150 = (void *)TCUMappedNLResponse.nlResponse.getter();
        v151 = v188;
        NLParseResponse.serverFallbackReason.getter();

        (*(void (**)(char *))(*v62 + 672))(v151);
        (*(void (**)(uint64_t))(*v62 + 384))(5);
        v152 = v189;
        TTResponseMessage.mitigationDecision.getter();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v152, 0, 1, v200);
        (*(void (**)(char *))(*v62 + 528))(v152);
        v153 = (void *)TCUMappedNLResponse.nlResponse.getter();
        v154 = v190;
        NLParseResponse.responseStatusCode.getter();

        (*(void (**)(char *))(*v62 + 552))(v154);
        v155 = (void *)TCUMappedNLResponse.nlResponse.getter();
        v156 = v191;
        NLParseResponse.languageVariantResult.getter();

        (*(void (**)(char *))(*v62 + 312))(v156);
        v157 = (void *)TCUMappedNLResponse.nlResponse.getter();
        v158 = NLParseResponse.responseVariantResult.getter();
        v160 = v159;

        v161 = (*(uint64_t (**)(uint64_t, uint64_t))(*v62 + 336))(v158, v160);
        v162 = (*(uint64_t (**)(uint64_t))(*v62 + 872))(v161);
        if (v162)
        {
          v163 = v162;
          v164 = TCUMappedNLResponse.tcuId.getter();
          (*(void (**)(uint64_t))(*(_QWORD *)v163 + 224))(v164);
          swift_release();
        }
        v165 = v182;
        swift_bridgeObjectRetain_n();
        v166 = Logger.logObject.getter();
        v167 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v166, v167))
        {
          v168 = (uint8_t *)swift_slowAlloc();
          v169 = swift_slowAlloc();
          v186 = v30;
          v170 = v169;
          v205 = v169;
          *(_DWORD *)v168 = 136315138;
          swift_bridgeObjectRetain();
          v204 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v201, v165, &v205);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B4BE6000, v166, v167, "Cached NL output for TRP ID: %s", v168, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v170, -1, -1);
          MEMORY[0x1B5E44758](v168, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v171 = *v203;
        if ((unint64_t)*v203 >> 62 == 1)
        {
          v172 = v171 & 0x3FFFFFFFFFFFFFFFLL;
          if (*(_QWORD *)(v171 + 16) == v201 && *(_QWORD *)(v171 + 24) == v182)
          {
            swift_retain();
            swift_bridgeObjectRelease();
LABEL_75:
            v174 = Logger.logObject.getter();
            v175 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v174, v175))
            {
              v176 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v176 = 0;
              _os_log_impl(&dword_1B4BE6000, v174, v175, "TTResponse for a finalizedTRP has been received, will handle StoppedListeningForText|SpeechContinuation now", v176, 2u);
              MEMORY[0x1B5E44758](v176, -1, -1);
            }

            (*(void (**)(uint64_t))(*v199 + 816))(v172);
            swift_release();
            swift_release();
            swift_release();
LABEL_84:
            (*(void (**)(char *, uint64_t))(v194 + 8))(v145, v195);
            return;
          }
          v173 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_retain();
          swift_bridgeObjectRelease();
          if ((v173 & 1) != 0)
            goto LABEL_75;
          swift_release();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v177 = Logger.logObject.getter();
        v178 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v177, v178))
        {
          v179 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v179 = 0;
          _os_log_impl(&dword_1B4BE6000, v177, v178, "StoppedListeningForText|SpeechContinuation has not yet been received or this TTResponse does not correspond to a finalized TRP.", v179, 2u);
          MEMORY[0x1B5E44758](v179, -1, -1);
        }
        swift_release();
        swift_release();

        goto LABEL_84;
      }
      swift_bridgeObjectRetain();
      v84 = Logger.logObject.getter();
      v93 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v84, v93))
      {

        swift_bridgeObjectRelease_n();
LABEL_46:
        swift_release();
        return;
      }
      v94 = (uint8_t *)swift_slowAlloc();
      v95 = swift_slowAlloc();
      v205 = v95;
      *(_DWORD *)v94 = 136315138;
      swift_bridgeObjectRetain();
      v204 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v58, &v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v84, v93, "Received TTResponseMessage before RC state is created for TRP ID: %s ..this may happen if no ASR or text input message was received before the NL output message is received from the message bus.", v94, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v95, -1, -1);
      v92 = (uint64_t)v94;
LABEL_29:
      MEMORY[0x1B5E44758](v92, -1, -1);
LABEL_41:
      swift_release();

      return;
    }
    v65 = v31;
    swift_retain_n();
    v66 = v65;
    v67 = Logger.logObject.getter();
    v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = swift_slowAlloc();
      v70 = (_QWORD *)swift_slowAlloc();
      v199 = v70;
      v200 = swift_slowAlloc();
      v205 = v200;
      v206[0] = (uint64_t)v66;
      *(_DWORD *)v69 = 138412546;
      v71 = v46;
      v72 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v70 = v66;

      *(_WORD *)(v69 + 12) = 2080;
      v73 = v71 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
      swift_beginAccess();
      v74 = v201;
      v75 = v202;
      v76 = v203;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(v202 + 16))(v201, v73, v203);
      v77 = RequestType.rawValue.getter();
      v79 = v78;
      (*(void (**)(uint64_t, uint64_t *))(v75 + 8))(v74, v76);
      v204 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v79, &v205);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v67, v68, "%@ is not supported for this requestType: %s", (uint8_t *)v69, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v80 = v199;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v80, -1, -1);
      v81 = v200;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v81, -1, -1);
      MEMORY[0x1B5E44758](v69, -1, -1);
      swift_release();

      return;
    }

    goto LABEL_31;
  }
  v51 = Logger.logObject.getter();
  v52 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v53 = 0;
    _os_log_impl(&dword_1B4BE6000, v51, v52, "TTResponseMessage received for an inactive request. Will cache it for when we get a start-turn signal.", v53, 2u);
    MEMORY[0x1B5E44758](v53, -1, -1);
  }

  v54 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*v2 + 384))(v206);
  ConversationRequestProcessor.State.cacheCandidateMessage(_:)();
  v54(v206, 0);
}

void ConversationRequestProcessor.handleMultiUserStoppedListeningForSpeechContinuationMessage(_:)(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v12 = a1;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = v12;
    v8 = objc_msgSend(v7, sel_description);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "ConversationBridge received %s, dropping it.", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);

  }
  else
  {

  }
}

uint64_t ConversationRequestProcessor.handleStoppedListeningForSpeechContinuationMessage(_:)(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = StoppedListeningForSpeechContinuationMessage.lastTRPId.getter();
  ConversationRequestProcessor.handleStoppedListeningForContinuationMessage(_:trpId:messageToCacheIfNotInActiveTurn:)((void *)a1, v2, v3, a1 | 0xA000000000000000);
  return swift_bridgeObjectRelease();
}

uint64_t ConversationRequestProcessor.handleStoppedListeningForTextContinuationMessage(_:)(void *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = StoppedListeningForTextContinuationMessage.lastTRPId.getter();
  ConversationRequestProcessor.handleStoppedListeningForContinuationMessage(_:trpId:messageToCacheIfNotInActiveTurn:)(a1, v2, v3, 0xF000000000000007);
  return swift_bridgeObjectRelease();
}

void ConversationRequestProcessor.handleStoppedListeningForContinuationMessage(_:trpId:messageToCacheIfNotInActiveTurn:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v9;
  uint64_t v10;
  void *ObjectType;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  unint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  uint64_t (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t (*v76)(uint64_t);
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  void (*v87)(uint64_t *, _QWORD);
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  char v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  os_log_type_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121[4];
  uint64_t v122;

  v5 = v4;
  v118 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  MEMORY[0x1E0C80A78](v9);
  v116 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectType = (void *)swift_getObjectType();
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
  v14 = a1;
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  v17 = os_log_type_enabled(v15, v16);
  v119 = v14;
  if (v17)
  {
    v18 = swift_slowAlloc();
    v113 = swift_slowAlloc();
    v121[0] = v113;
    *(_DWORD *)v18 = 136315394;
    v117 = v13;
    v19 = _typeName(_:qualified:)();
    v115 = v5;
    v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v121);
    v114 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    v112 = v18 + 14;
    v21 = v14;
    v22 = a3;
    v23 = objc_msgSend(v21, sel_description);
    v24 = ObjectType;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

    a3 = v22;
    v5 = v115;
    v28 = v25;
    ObjectType = v24;
    v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, v121);
    a4 = v114;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v13 = v117;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v15, v16, "ConversationBridge received %s: %s", (uint8_t *)v18, 0x16u);
    v29 = v113;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v29, -1, -1);
    MEMORY[0x1B5E44758](v18, -1, -1);

  }
  else
  {

  }
  v30 = (*(uint64_t (**)(void))(*(_QWORD *)v5 + 368))();
  v33 = v30;
  v34 = v31;
  if (v32 != 2)
  {
    outlined consume of ConversationRequestProcessor.State(v30, v31, v32);
    if ((~a4 & 0xF000000000000007) != 0)
    {
      v83 = (id)(a4 & 0x1FFFFFFFFFFFFFFFLL);
      v84 = Logger.logObject.getter();
      v85 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v84, v85))
      {
        v86 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v86 = 0;
        _os_log_impl(&dword_1B4BE6000, v84, v85, "StoppedListeningForSpeechContinuationMessage received for an inactive request. Will cache it for when we get a start-turn signal.", v86, 2u);
        MEMORY[0x1B5E44758](v86, -1, -1);
      }

      v87 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v5 + 384))(v121);
      ConversationRequestProcessor.State.cacheCandidateMessage(_:)();
      v87(v121, 0);
      outlined consume of CandidateRequestMessage?(a4);
    }
    else
    {
      v53 = Logger.logObject.getter();
      v54 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc();
        v56 = swift_slowAlloc();
        v121[0] = v56;
        *(_DWORD *)v55 = 136315138;
        v57 = _typeName(_:qualified:)();
        v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v53, v54, "%s received for an inactive request. Ignoring.", v55, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v56, -1, -1);
        MEMORY[0x1B5E44758](v55, -1, -1);
      }

    }
    return;
  }
  v35 = swift_retain();
  outlined consume of ConversationRequestProcessor.State(v35, v34, 2);
  v36 = (uint64_t *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  v38 = *(_QWORD *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  v37 = *(_QWORD *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v38 == RequestMessageBase.requestId.getter() && v37 == v39)
  {
    swift_bridgeObjectRelease_n();
LABEL_19:
    v59 = (unint64_t *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    v60 = *v59;
    if (!(*v59 >> 62))
    {
      v61 = (void *)v59[1];
      v62 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 88);
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(*v59, v61);
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v60, v61);
      v63 = swift_bridgeObjectRetain();
      v64 = v62(v63);
      if (*(_QWORD *)(v64 + 16))
      {
        v65 = specialized __RawDictionaryStorage.find<A>(_:)(v118, a3);
        if ((v66 & 1) != 0)
        {
          v119 = ObjectType;
          v67 = *(_QWORD *)(*(_QWORD *)(v64 + 56) + 8 * v65);
          swift_retain();
          swift_bridgeObjectRelease();
          outlined consume of ConversationRequestProcessorTurnState.SpeechState(v60, v61);
          swift_bridgeObjectRelease();
          outlined consume of ConversationRequestProcessorTurnState.SpeechState(v60, v61);
          swift_retain_n();
          v68 = Logger.logObject.getter();
          v69 = static os_log_type_t.debug.getter();
          v70 = v69;
          if (os_log_type_enabled(v68, v69))
          {
            v71 = swift_slowAlloc();
            v114 = swift_slowAlloc();
            v122 = v114;
            *(_DWORD *)v71 = 136315394;
            v72 = _typeName(_:qualified:)();
            LODWORD(v113) = v70;
            v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, &v122);
            v115 = a3;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v71 + 12) = 2080;
            v74 = *(_QWORD *)v67;
            v117 = v13;
            v75 = v5;
            v76 = *(uint64_t (**)(uint64_t))(v74 + 800);
            v77 = swift_retain();
            v78 = v76(v77);
            v80 = v79;
            swift_release();
            v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v80, &v122);
            a3 = v115;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            v5 = v75;
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B4BE6000, v68, (os_log_type_t)v113, "%s received for RC state: %s", (uint8_t *)v71, 0x16u);
            v81 = v114;
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v81, -1, -1);
            MEMORY[0x1B5E44758](v71, -1, -1);

          }
          else
          {

            v82 = swift_release_n();
          }
          v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 376))(v82);
          if (ResultCandidateProcessingStatus.rawValue.getter(v95) == 0x64656C65636E6163
            && v96 == 0xE800000000000000)
          {
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v98 & 1) == 0)
            {
              v103 = *v59;
              v104 = (void *)v59[1];
              *v59 = v67 | 0x4000000000000000;
              v59[1] = 0;
              swift_retain();
              outlined consume of ConversationRequestProcessorTurnState.SpeechState(v103, v104);
              v105 = swift_release();
              v106 = (uint64_t)v116;
              (*(void (**)(uint64_t))(*(_QWORD *)v67 + 520))(v105);
              v107 = type metadata accessor for TTResponseMessage.MitigationDecision();
              LODWORD(v103) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v107 - 8) + 48))(v106, 1, v107);
              outlined destroy of ReferenceResolutionClientProtocol?(v106, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
              if ((_DWORD)v103 != 1)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v5 + 816))(v67);
                swift_release();
                goto LABEL_32;
              }
              v88 = Logger.logObject.getter();
              v108 = static os_log_type_t.debug.getter();
              if (!os_log_type_enabled(v88, v108))
              {

                swift_release();
                goto LABEL_32;
              }
              v100 = (uint8_t *)swift_slowAlloc();
              v109 = swift_slowAlloc();
              v122 = v109;
              *(_DWORD *)v100 = 136315138;
              v110 = _typeName(_:qualified:)();
              v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, &v122);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1B4BE6000, v88, v108, "%s arrived before the MitigationDecision for the lastTRP. Will handle it once we get the TTResponse for the finalizedTrp.", v100, 0xCu);
              swift_arrayDestroy();
              v102 = v109;
LABEL_44:
              MEMORY[0x1B5E44758](v102, -1, -1);
              MEMORY[0x1B5E44758](v100, -1, -1);
              swift_release();
LABEL_30:

              goto LABEL_32;
            }
            swift_release();
          }
          swift_bridgeObjectRetain_n();
          v88 = Logger.logObject.getter();
          v99 = static os_log_type_t.info.getter();
          if (!os_log_type_enabled(v88, v99))
          {

            swift_bridgeObjectRelease_n();
            swift_release();
            goto LABEL_32;
          }
          v100 = (uint8_t *)swift_slowAlloc();
          v101 = swift_slowAlloc();
          v122 = v101;
          *(_DWORD *)v100 = 136315138;
          swift_bridgeObjectRetain();
          v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, a3, &v122);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B4BE6000, v88, v99, "TRP ID: %s already canceled. Not sending commit signal.", v100, 0xCu);
          swift_arrayDestroy();
          v102 = v101;
          goto LABEL_44;
        }
      }
      swift_bridgeObjectRelease();
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v60, v61);
      swift_bridgeObjectRelease();
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v60, v61);
    }
    swift_release();
    swift_bridgeObjectRetain_n();
    v88 = Logger.logObject.getter();
    v89 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v88, v89))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_32;
    }
    v90 = swift_slowAlloc();
    v91 = a3;
    v92 = swift_slowAlloc();
    v122 = v92;
    *(_DWORD *)v90 = 136315394;
    v93 = _typeName(_:qualified:)();
    v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v90 + 12) = 2080;
    swift_bridgeObjectRetain();
    v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v91, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v88, v89, "Received %s before RC state was created for TRP ID: %s. Dropping it on the floor.", (uint8_t *)v90, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v92, -1, -1);
    MEMORY[0x1B5E44758](v90, -1, -1);
    goto LABEL_30;
  }
  v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v41 & 1) != 0)
    goto LABEL_19;
  v42 = v119;
  swift_retain();
  v43 = Logger.logObject.getter();
  v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = swift_slowAlloc();
    v46 = swift_slowAlloc();
    v121[0] = v46;
    *(_DWORD *)v45 = 136315650;
    v47 = _typeName(_:qualified:)();
    v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v45 + 12) = 2080;
    v49 = RequestMessageBase.requestId.getter();
    v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v45 + 22) = 2080;
    v51 = *v36;
    v52 = v36[1];
    swift_bridgeObjectRetain();
    v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v43, v44, "%s request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v45, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v46, -1, -1);
    MEMORY[0x1B5E44758](v45, -1, -1);

LABEL_32:
    swift_release();
    return;
  }

  swift_release_n();
}

void ConversationRequestProcessor.reallyHandleStoppedListeningForContinuationMessage(for:)(Swift::String *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t object;
  void (*v27)(uint64_t);
  char *v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  NSObject *v34;
  void *v35;
  unsigned __int8 v36;
  uint64_t v37;
  char v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t countAndFlagsBits;
  NSObject *v49;
  uint64_t v50[3];
  uint64_t v51;
  uint64_t v52;

  v2 = v1;
  v4 = type metadata accessor for RequestType();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&countAndFlagsBits - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&countAndFlagsBits - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&countAndFlagsBits - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 528))(v12);
  if (v15)
  {
    v16 = v15;
    (*(void (**)(void))(a1->_countAndFlagsBits + 520))();
    v17 = type metadata accessor for TTResponseMessage.MitigationDecision();
    v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v14, 1, v17);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    if (v18 == 1)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
      v20 = Logger.logObject.getter();
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v22 = 0;
        _os_log_impl(&dword_1B4BE6000, v20, v21, "Handling StoppedListeningForSpeechContinuationMessage without a MitigationDecision for the finalizedTrp, this is a bug.", v22, 2u);
        MEMORY[0x1B5E44758](v22, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
      }
      return;
    }
    object = (unint64_t)a1[1]._object;
    countAndFlagsBits = a1[1]._countAndFlagsBits;
    v27 = *(void (**)(uint64_t))(a1->_countAndFlagsBits + 456);
    swift_bridgeObjectRetain();
    v27(1);
    v49 = v16;
    v28 = (char *)v16 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v28, v4);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E0D9E8A0], v4);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D8]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v50[0] == v51 && v50[1] == v52)
    {
      swift_bridgeObjectRelease_n();
      v29 = *(void (**)(char *, uint64_t))(v5 + 8);
      v29(v8, v4);
      v30 = ((uint64_t (*)(char *, uint64_t))v29)(v10, v4);
    }
    else
    {
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v32 = *(void (**)(char *, uint64_t))(v5 + 8);
      v32(v8, v4);
      v30 = ((uint64_t (*)(char *, uint64_t))v32)(v10, v4);
      if ((v31 & 1) == 0)
      {
        v35 = 0;
        v34 = v49;
        goto LABEL_21;
      }
    }
    v33 = (*(uint64_t (**)(uint64_t))(a1->_countAndFlagsBits + 872))(v30);
    v34 = v49;
    if (v33)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 152))(1, 0);
      swift_release();
    }
    v35 = (void *)(*(uint64_t (**)(Swift::String *, NSObject *, _QWORD, _QWORD))(*(_QWORD *)v2 + 1256))(a1, v34, 0, 0);
LABEL_21:
    v36 = (*(uint64_t (**)(void))(a1->_countAndFlagsBits + 376))();
    if (ResultCandidateProcessingStatus.rawValue.getter(v36) == 0xD000000000000013 && v37 == 0x80000001B4EF52A0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v38 & 1) == 0)
      {
        if (one-time initialization token for conversationBridge != -1)
          swift_once();
        v43 = type metadata accessor for Logger();
        __swift_project_value_buffer(v43, (uint64_t)static Logger.conversationBridge);
        swift_bridgeObjectRetain();
        v44 = Logger.logObject.getter();
        v45 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v44, v45))
        {
          v46 = (uint8_t *)swift_slowAlloc();
          v47 = swift_slowAlloc();
          v50[0] = v47;
          *(_DWORD *)v46 = 136315138;
          swift_bridgeObjectRetain();
          v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, object, v50);
          v34 = v49;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B4BE6000, v44, v45, "Not sending CommitResultCandidateId for RC ID: %s yet", v46, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v47, -1, -1);
          MEMORY[0x1B5E44758](v46, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(Swift::String *))(*(_QWORD *)v2 + 1040))(a1);
LABEL_26:
    v39 = (unint64_t *)((char *)v34
                             + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    v40 = *v39;
    v41 = (void *)v39[1];
    *v39 = (unint64_t)a1 | 0x4000000000000000;
    v39[1] = (unint64_t)v35;
    v42 = v35;
    swift_retain();
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v40, v41);
    ConversationRequestProcessor.maybeRunExecution(rcState:)(a1);
    swift_release();

    return;
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  v49 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v49, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v25 = 0;
    _os_log_impl(&dword_1B4BE6000, v49, v24, "No active turn found. Dropping StoppedListeningForSpeechContinuationMessage on the floor.", v25, 2u);
    MEMORY[0x1B5E44758](v25, -1, -1);
  }

}

uint64_t ConversationRequestProcessor.waitForPommes(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD v34[4];
  _BYTE v35[24];
  uint64_t v36;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v34[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ConversationSessionKey();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v34[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v34[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v34[-1] - v14;
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID + 8);
  if (!v16)
    return 1;
  v17 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(v1
                                          + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID)
     && v16 == *(_QWORD *)(a1 + 24);
  if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    return 1;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v1 + 392))(v34);
  __swift_project_boxed_opaque_existential_1(v34, v34[3]);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0D9EDB8], v6);
  dispatch thunk of ConversationSessionState.value(forKey:userId:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v36)
  {
    v18 = type metadata accessor for PommesContext();
    v19 = swift_dynamicCast();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v15, v19 ^ 1u, 1, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v18 = type metadata accessor for PommesContext();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v15, 1, 1, v18);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v15, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  type metadata accessor for PommesContext();
  v21 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v13, 1, v18) == 1)
  {
    v22 = (uint64_t *)&demangling cache variable for type metadata for PommesContext?;
    v23 = (uint64_t)v13;
  }
  else
  {
    PommesContext.exportLegacyNLContext()();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v18);
    v24 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v5, 1, v24) != 1)
    {
      v26 = MEMORY[0x1B5E3FC64]();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v24);
      goto LABEL_17;
    }
    v22 = (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?;
    v23 = (uint64_t)v5;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v23, v22);
  v26 = MEMORY[0x1E0DEE9D8];
LABEL_17:
  v27 = *(_QWORD *)(v26 + 16);
  swift_bridgeObjectRelease();
  v20 = v27 != 0;
  if (!v27)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1B4BE6000, v29, v30, "No need to wait for POMMES: POMMES is not expecting a gesture response", v31, 2u);
      MEMORY[0x1B5E44758](v31, -1, -1);
    }

  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  return v20;
}

void ConversationRequestProcessor.handlePommesTRPCandidateMessage(_:)(Swift::String *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  NSObject *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  Swift::String *v33;
  Swift::String *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  NSObject *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52;
  unint64_t v53;
  uint64_t v54;
  Swift::String *v55;
  unsigned __int8 v56;
  uint64_t v57;
  char v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint8_t *v65;
  unint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Swift::String *v76;
  Swift::String *v77;
  NSObject *v78;
  os_log_type_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  Swift::String *v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  os_log_t v90;
  Swift::String *v91;
  uint64_t v92;
  uint64_t v93;
  os_log_type_t v94;
  uint8_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  uint8_t *v100;
  unint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  unint64_t v107;
  os_log_type_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int EnumCaseMultiPayload;
  void (**v116)(uint64_t, void **, _QWORD);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (**v126)(uint64_t, void **, _QWORD);
  uint64_t v127;
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint8_t *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  NSObject *v137;
  os_log_type_t v138;
  uint8_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  void (*v143)(char *, uint64_t);
  void (*v144)(char *, uint64_t);
  void *v145;
  _QWORD v146[2];
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  void (**v155)(uint64_t, void **, _QWORD);
  char *v156;
  char *v157;
  os_log_t v158;
  Swift::String *v159;
  NSObject *v160;
  uint64_t v161;
  uint64_t v162[3];
  uint64_t v163[2];

  v3 = type metadata accessor for RequestType();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v146 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PommesError();
  v155 = *(void (***)(uint64_t, void **, _QWORD))(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v157 = (char *)v146 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v146 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1E0C80A78](v12);
  v156 = (char *)v146 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = (os_log_t)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  v14 = MEMORY[0x1E0C80A78](v158);
  v154 = (char *)v146 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (void **)((char *)v146 - v16);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)v146 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)v146 - v23;
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 528))(v22);
  if (!v25)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.conversationBridge);
    v160 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v160, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_1B4BE6000, v160, v44, "PommesTRPCandidateMessage received for an inactive request. Dropping it on the floor.", v45, 2u);
      MEMORY[0x1B5E44758](v45, -1, -1);
    }

    return;
  }
  v152 = v7;
  v153 = v24;
  v150 = v11;
  v151 = v1;
  v160 = v25;
  v26 = (uint64_t *)((char *)v25 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  v27 = *(uint64_t *)((char *)&v25->isa
                   + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  v28 = *(uint64_t *)((char *)&v25[1].isa
                   + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  swift_bridgeObjectRetain();
  v159 = a1;
  if (v27 == RequestMessageBase.requestId.getter() && v28 == v29)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0)
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
      v33 = v159;
      swift_retain_n();
      v34 = v33;
      v35 = Logger.logObject.getter();
      v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = swift_slowAlloc();
        v38 = swift_slowAlloc();
        v162[0] = v38;
        *(_DWORD *)v37 = 136315394;
        v39 = RequestMessageBase.requestId.getter();
        v163[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v162);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 12) = 2080;
        v41 = *v26;
        v42 = v26[1];
        swift_bridgeObjectRetain();
        v163[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v162);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v35, v36, "PommesTRPCandidateMessage request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v38, -1, -1);
        MEMORY[0x1B5E44758](v37, -1, -1);
LABEL_49:
        swift_release();

        return;
      }

LABEL_38:
      swift_release_n();
      return;
    }
  }
  v46 = v160;
  if (!ConversationRequestProcessorTurnState.requestSupportedForOnDeviceExecution()())
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v75 = type metadata accessor for Logger();
    __swift_project_value_buffer(v75, (uint64_t)static Logger.conversationBridge);
    v76 = v159;
    swift_retain_n();
    v77 = v76;
    v78 = Logger.logObject.getter();
    v79 = static os_log_type_t.error.getter();
    v80 = v79;
    if (os_log_type_enabled(v78, v79))
    {
      v81 = swift_slowAlloc();
      v82 = swift_slowAlloc();
      v158 = v78;
      v83 = (_QWORD *)v82;
      v159 = (Swift::String *)swift_slowAlloc();
      v163[0] = (uint64_t)v159;
      *(_DWORD *)v81 = 138412546;
      LODWORD(v157) = v80;
      v162[0] = (uint64_t)v77;
      v84 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v85 = v83;
      *v83 = v77;

      *(_WORD *)(v81 + 12) = 2080;
      v86 = (char *)v160 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v86, v3);
      v87 = RequestType.rawValue.getter();
      v89 = v88;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v89, v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v90 = v158;
      _os_log_impl(&dword_1B4BE6000, v158, (os_log_type_t)v157, "%@ is not supported for this requestType: %s", (uint8_t *)v81, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v85, -1, -1);
      v91 = v159;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v91, -1, -1);
      MEMORY[0x1B5E44758](v81, -1, -1);
      swift_release();

      return;
    }

    goto LABEL_38;
  }
  v47 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  v49 = v48;
  v50 = (unint64_t *)((char *)v46
                           + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  v51 = *v50;
  v52 = (void *)v50[1];
  if (*v50 >> 62 == 1)
  {
    v54 = *(_QWORD *)(v51 + 16);
    v53 = *(_QWORD *)(v51 + 24);
    if ((v54 != v47 || v53 != v49) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v104 = one-time initialization token for conversationBridge;
      swift_bridgeObjectRetain();
      if (v104 != -1)
        swift_once();
      v105 = type metadata accessor for Logger();
      __swift_project_value_buffer(v105, (uint64_t)static Logger.conversationBridge);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v106 = Logger.logObject.getter();
      v107 = v49;
      v108 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v106, v108))
      {
        v109 = v47;
        v110 = swift_slowAlloc();
        v111 = v54;
        v112 = swift_slowAlloc();
        v163[0] = v112;
        *(_DWORD *)v110 = 136315394;
        swift_bridgeObjectRetain();
        v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v53, v163);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v110 + 12) = 2080;
        swift_bridgeObjectRetain();
        v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v107, v163);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B4BE6000, v106, v108, "TRP already finalized (TRP ID: %s).. Not handling PommesTRPCandidateMessage for TRP ID: %s", (uint8_t *)v110, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v112, -1, -1);
        MEMORY[0x1B5E44758](v110, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      return;
    }
  }
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v51, v52);
  v55 = (Swift::String *)ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v47, v49, v51, v52);
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v51, v52);
  if (!v55)
  {
    v92 = v47;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v93 = type metadata accessor for Logger();
    __swift_project_value_buffer(v93, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain();
    v35 = Logger.logObject.getter();
    v94 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v94))
    {
      v95 = (uint8_t *)swift_slowAlloc();
      v96 = v49;
      v97 = swift_slowAlloc();
      v163[0] = v97;
      *(_DWORD *)v95 = 136315138;
      swift_bridgeObjectRetain();
      v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v96, v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v35, v94, "Received PommesTRPCandidateMessage before TRP state is created for TRP ID: %s ..this may happen if no ASR or text input message was received before the Pommes output message is received from the message bus.", v95, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v97, -1, -1);
      MEMORY[0x1B5E44758](v95, -1, -1);
      goto LABEL_49;
    }

    swift_bridgeObjectRelease_n();
    goto LABEL_60;
  }
  v149 = v47;
  v56 = (*(uint64_t (**)(void))(v55->_countAndFlagsBits + 376))();
  if (ResultCandidateProcessingStatus.rawValue.getter(v56) == 0x64656C65636E6163 && v57 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_44:
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v98 = type metadata accessor for Logger();
    __swift_project_value_buffer(v98, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain();
    v35 = Logger.logObject.getter();
    v99 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v99))
    {
      v100 = (uint8_t *)swift_slowAlloc();
      v101 = v49;
      v102 = swift_slowAlloc();
      v163[0] = v102;
      *(_DWORD *)v100 = 136315138;
      swift_bridgeObjectRetain();
      v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v101, v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v103 = "TRP ID: %s has already been cancelled. Not handling PommesTRPCandidateMessage any further";
LABEL_48:
      _os_log_impl(&dword_1B4BE6000, v35, v99, v103, v100, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v102, -1, -1);
      MEMORY[0x1B5E44758](v100, -1, -1);
      swift_release();
      goto LABEL_49;
    }
    goto LABEL_59;
  }
  v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v59 & 1) != 0)
    goto LABEL_44;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v60 = type metadata accessor for Logger();
  v61 = __swift_project_value_buffer(v60, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v62 = Logger.logObject.getter();
  v63 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = swift_slowAlloc();
    v148 = v61;
    v65 = (uint8_t *)v64;
    v147 = swift_slowAlloc();
    v163[0] = v147;
    *(_DWORD *)v65 = 136315138;
    v146[1] = v65 + 4;
    v66 = v49;
    v67 = *(uint64_t (**)(uint64_t))(v55->_countAndFlagsBits + 800);
    v68 = swift_retain();
    v69 = v67(v68);
    v49 = v66;
    v70 = v69;
    v72 = v71;
    swift_release();
    v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, v163);
    v61 = v148;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v62, v63, "Received PommesTRPCandidateMessage when TRP state: %s", v65, 0xCu);
    v73 = v147;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v73, -1, -1);
    MEMORY[0x1B5E44758](v65, -1, -1);

  }
  else
  {

    v74 = swift_release_n();
  }
  v113 = (*(uint64_t (**)(uint64_t))(v55->_countAndFlagsBits + 352))(v74);
  swift_release();
  if (v113)
  {
    swift_bridgeObjectRetain();
    v35 = Logger.logObject.getter();
    v99 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v99))
    {
      v100 = (uint8_t *)swift_slowAlloc();
      v114 = v49;
      v102 = swift_slowAlloc();
      v163[0] = v102;
      *(_DWORD *)v100 = 136315138;
      swift_bridgeObjectRetain();
      v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v114, v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v103 = "Already received PommesTRPCandidateMessage for this TRP ID: %s . Did Pommes post multiple PommesTRPCandidat"
             "eMessage's with the same trpId?";
      goto LABEL_48;
    }
LABEL_59:

    swift_bridgeObjectRelease_n();
    swift_release();
LABEL_60:
    swift_release();
    return;
  }
  PommesTRPCandidateMessage.pommesResult.getter();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v148 = v61;
  if (EnumCaseMultiPayload == 1)
  {
    v116 = v155;
    v117 = v152;
    v118 = (uint64_t)v153;
    v155[4]((uint64_t)v153, v17, v152);
    v119 = 0;
    v120 = 0;
  }
  else
  {
    v120 = *v17;
    v119 = 1;
    v117 = v152;
    v118 = (uint64_t)v153;
    v116 = v155;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v116[7])(v118, v119, 1, v117);
  outlined init with copy of ReferenceResolutionClientProtocol?(v118, (uint64_t)v21, &demangling cache variable for type metadata for PommesError?);
  v155 = v120;
  v121 = (uint64_t)v156;
  PommesTRPCandidateMessage.searchReason.getter();
  v122 = type metadata accessor for PommesSearchReason();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 56))(v121, 0, 1, v122);
  type metadata accessor for PommesInfo(0);
  v123 = swift_allocObject();
  *(_QWORD *)(v123 + 16) = v120;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v21, v123 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, &demangling cache variable for type metadata for PommesError?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v121, v123 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, &demangling cache variable for type metadata for PommesSearchReason?);
  v124 = (*(uint64_t (**)(uint64_t))(v55->_countAndFlagsBits + 360))(v123);
  v125 = (*(uint64_t (**)(uint64_t))(v55->_countAndFlagsBits + 872))(v124);
  v126 = v116;
  if (v125)
  {
    v127 = v125;
    v128 = PommesTRPCandidateMessage.tcuId.getter();
    (*(void (**)(uint64_t))(*(_QWORD *)v127 + 248))(v128);
    swift_release();
  }
  swift_bridgeObjectRetain();
  v129 = Logger.logObject.getter();
  v130 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v129, v130))
  {
    v131 = (uint8_t *)swift_slowAlloc();
    v132 = swift_slowAlloc();
    v163[0] = v132;
    *(_DWORD *)v131 = 136315138;
    swift_bridgeObjectRetain();
    v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v49, v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v129, v130, "Cached Pommes output for TRP ID: %s", v131, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v132, -1, -1);
    MEMORY[0x1B5E44758](v131, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v133 = v157;
  v134 = (uint64_t)v154;
  PommesTRPCandidateMessage.pommesResult.getter();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v159 = v55;
    v135 = v150;
    v136 = v152;
    v126[4]((uint64_t)v150, (void **)v134, v152);
    v126[2]((uint64_t)v133, (void **)v135, v136);
    v137 = Logger.logObject.getter();
    v138 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v137, v138))
    {
      v139 = (uint8_t *)swift_slowAlloc();
      v140 = swift_slowAlloc();
      v163[0] = v140;
      *(_DWORD *)v139 = 136315138;
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type PommesError and conformance PommesError, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E848], MEMORY[0x1E0D9E858]);
      v141 = Error.localizedDescription.getter();
      v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v141, v142, v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v143 = (void (*)(char *, uint64_t))v126[1];
      v143(v157, v136);
      _os_log_impl(&dword_1B4BE6000, v137, v138, "Pommes encountered an error: %s", v139, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v140, -1, -1);
      MEMORY[0x1B5E44758](v139, -1, -1);

      v143(v135, v136);
    }
    else
    {

      v144 = (void (*)(char *, uint64_t))v126[1];
      v144(v133, v136);
      v144(v135, v136);
    }
    v55 = v159;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v134, (uint64_t *)&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  }
  v145 = v155;
  ConversationRequestProcessor.maybeRunExecution(rcState:)(v55);

  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v153, &demangling cache variable for type metadata for PommesError?);
}

uint64_t ConversationRequestProcessor.handleUserIdentificationMessage(_:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, char *, uint64_t);
  char *v35;
  char *v36;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  _QWORD v53[2];
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;

  v2 = type metadata accessor for UserID();
  v58 = *(_QWORD **)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v59 = (char *)v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v53 - v5;
  if (one-time initialization token for conversationBridge != -1)
LABEL_42:
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
  v8 = a1;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    a1 = v8;
    v11 = swift_slowAlloc();
    v57 = swift_slowAlloc();
    v61 = (uint64_t *)v57;
    *(_DWORD *)v11 = 134218242;
    v60 = UserIdentificationMessage.userClassification.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2080;
    v56 = v11 + 14;
    UserIdentificationMessage.userIdScores.getter();
    v12 = v2;
    v13 = Dictionary.description.getter();
    v15 = v14;
    swift_bridgeObjectRelease();
    v16 = v13;
    v2 = v12;
    v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, (uint64_t *)&v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v9, v10, "ConversationBridge handling message: UserIdentificationMessage with userClassification = %ld and userIdScores = %s", (uint8_t *)v11, 0x16u);
    v17 = v57;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v17, -1, -1);
    MEMORY[0x1B5E44758](v11, -1, -1);

  }
  else
  {

    a1 = v8;
  }
  v18 = (uint64_t *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v53[0] = a1;
  v19 = UserIdentificationMessage.userIdScores.getter();
  v20 = 0;
  v21 = *(_QWORD *)(v19 + 64);
  v54 = v19 + 64;
  v22 = 1 << *(_BYTE *)(v19 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v55 = (unint64_t)(v22 + 63) >> 6;
  v56 = v19;
  while (1)
  {
    if (v24)
    {
      v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v57 = v20;
      v27 = v26 | (v20 << 6);
    }
    else
    {
      v28 = v20 + 1;
      if (__OFADD__(v20, 1))
        goto LABEL_40;
      if (v28 >= v55)
      {
LABEL_37:
        swift_release();
        v50 = UserIdentificationMessage.userClassification.getter();
        v51 = UserIdentificationMessage.voiceIdScoreCard.getter();
        return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v53[1] + 472))(v50, v18, v51);
      }
      v29 = *(_QWORD *)(v54 + 8 * v28);
      v30 = v20 + 1;
      if (!v29)
      {
        v30 = v20 + 2;
        if (v20 + 2 >= v55)
          goto LABEL_37;
        v29 = *(_QWORD *)(v54 + 8 * v30);
        if (!v29)
        {
          v30 = v20 + 3;
          if (v20 + 3 >= v55)
            goto LABEL_37;
          v29 = *(_QWORD *)(v54 + 8 * v30);
          if (!v29)
          {
            v31 = v20 + 4;
            if (v20 + 4 >= v55)
              goto LABEL_37;
            v29 = *(_QWORD *)(v54 + 8 * v31);
            if (!v29)
            {
              while (1)
              {
                v30 = v31 + 1;
                if (__OFADD__(v31, 1))
                  goto LABEL_41;
                if (v30 >= v55)
                  goto LABEL_37;
                v29 = *(_QWORD *)(v54 + 8 * v30);
                ++v31;
                if (v29)
                  goto LABEL_25;
              }
            }
            v30 = v20 + 4;
          }
        }
      }
LABEL_25:
      v24 = (v29 - 1) & v29;
      v57 = v30;
      v27 = __clz(__rbit64(v29)) + (v30 << 6);
    }
    v32 = *(_QWORD *)(*(_QWORD *)(v56 + 56) + 8 * v27);
    swift_bridgeObjectRetain();
    UserID.init(sharedUserId:)();
    v33 = (uint64_t)v59;
    v34 = (void (*)(uint64_t, char *, uint64_t))v58[2];
    v35 = v6;
    v36 = v6;
    v6 = (char *)v2;
    v34((uint64_t)v59, v36, v2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v61 = v18;
    v38 = v33;
    a1 = v18;
    v40 = specialized __RawDictionaryStorage.find<A>(_:)(v38);
    v41 = v18[2];
    v42 = (v39 & 1) == 0;
    v43 = v41 + v42;
    if (__OFADD__(v41, v42))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    v44 = v39;
    if (v18[3] < v43)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v18 = v61;
      if ((v39 & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      a1 = (uint64_t *)&v61;
      specialized _NativeDictionary.copy()();
      v18 = v61;
      if ((v44 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v18[7] + 8 * v40) = v32;
        v2 = (uint64_t)v6;
        goto LABEL_9;
      }
    }
LABEL_33:
    v18[(v40 >> 6) + 8] |= 1 << v40;
    v2 = (uint64_t)v6;
    v34(v18[6] + v58[9] * v40, v59, (uint64_t)v6);
    *(_QWORD *)(v18[7] + 8 * v40) = v32;
    v47 = v18[2];
    v48 = __OFADD__(v47, 1);
    v49 = v47 + 1;
    if (v48)
      goto LABEL_39;
    v18[2] = v49;
LABEL_9:
    swift_bridgeObjectRelease();
    v25 = (void (*)(uint64_t, uint64_t))v58[1];
    v25((uint64_t)v59, v2);
    v6 = v35;
    v25((uint64_t)v35, v2);
    v20 = v57;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v43, isUniquelyReferenced_nonNull_native);
  a1 = v61;
  v45 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v59);
  if ((v44 & 1) == (v46 & 1))
  {
    v40 = v45;
    v18 = v61;
    if ((v44 & 1) != 0)
      goto LABEL_8;
    goto LABEL_33;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void ConversationRequestProcessor.handleSpeechStopDetectedMessage(_:forTurn:withTRPCandidateState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v11 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = *(_QWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "Not sending CommitResultCandidateId for TRP ID: %s yet: Will wait for TRPFinalized due to incomplete feature work.", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);

  }
  else
  {

    swift_release();
  }
}

void ConversationRequestProcessor.handleAceRemoteExecutionContextUpdate(_:executionContext:reply:)(void *a1, uint64_t a2, void (*a3)(id, id), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  char v30;
  void (*v31)(char *, uint64_t);
  _QWORD *v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void (*v40)(id, id);
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  void (*v51)(id, id);
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  void (*v58)(id, id);
  uint8_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  void (*v66)(id, id);
  uint8_t *v67;
  uint64_t v68;
  NSObject *v69;
  char v70;
  void **v71;
  void *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(id, id);
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  id v95;
  id v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  id v102;
  id v103;
  id v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, char *, uint64_t);
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  void (*v117)(id, id);
  id v118;
  NSObject *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123[3];
  uint64_t v124;
  uint64_t v125;

  v5 = v4;
  v118 = a1;
  v8 = type metadata accessor for UUID();
  v111 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v110 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for UserID();
  v113 = *(_QWORD *)(v114 - 8);
  v10 = MEMORY[0x1E0C80A78](v114);
  v12 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v112 = (char *)&v105 - v13;
  v14 = type metadata accessor for RequestType();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v115 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v105 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v105 - v22;
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 528))(v21);
  if (v24)
  {
    v108 = v8;
    v117 = a3;
    v116 = a4;
    v119 = v24;
    v25 = (char *)v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    v109 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v109(v23, v25, v14);
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v20, *MEMORY[0x1E0D9E8A0], v14);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D8]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v123[0] == (_QWORD)v121 && v123[1] == *((_QWORD *)&v121 + 1))
    {
      swift_bridgeObjectRelease_n();
      v26 = *(void (**)(char *, uint64_t))(v15 + 8);
      v26(v20, v14);
      v26(v23, v14);
    }
    else
    {
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = *(void (**)(char *, uint64_t))(v15 + 8);
      v31(v20, v14);
      v31(v23, v14);
      if ((v30 & 1) == 0)
        goto LABEL_12;
    }
    v32 = (Class *)((char *)&v119->isa
                  + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    if (*v32 >> 62 != 1)
    {
      v46 = v118;
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.conversationBridge);
      v48 = Logger.logObject.getter();
      v49 = static os_log_type_t.error.getter();
      v50 = os_log_type_enabled(v48, v49);
      v51 = v117;
      if (v50)
      {
        v52 = (uint8_t *)swift_slowAlloc();
        v53 = swift_slowAlloc();
        v123[0] = v53;
        *(_DWORD *)v52 = 136315138;
        *(_QWORD *)&v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000004CLL, 0x80000001B4EFA1E0, v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v48, v49, "%s", v52, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v53, -1, -1);
        MEMORY[0x1B5E44758](v52, -1, -1);
      }

      specialized static ConversationBridgeUtils.replyCommandIgnored(forCommand:errorCode:reason:replyHandler:)(v46, -1, 0xD00000000000004CLL, 0x80000001B4EFA1E0, v51);
LABEL_36:
      swift_release();
      return;
    }
LABEL_12:
    v33 = v118;
    v34 = objc_msgSend(v118, sel_executionContextUpdate);
    if (v34)
    {
      v35 = v34;
      v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v38 = v37;

      outlined init with copy of ReferenceResolutionClientProtocol?(v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, (uint64_t)&v121, &demangling cache variable for type metadata for ContextUpdating?);
      if (v122)
      {
        outlined init with take of ReferenceResolutionClientProtocol(&v121, (uint64_t)v123);
        type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSKeyedUnarchiver);
        v107 = v36;
        static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)();
        if (v122)
        {
          type metadata accessor for ExecutionContextUpdate();
          if ((swift_dynamicCast() & 1) != 0)
          {
            v105 = v38;
            v106 = (void *)v120;
            v69 = v119;
            v70 = ConversationRequestProcessorTurnState.isServerFallback.getter();
            v109(v115, v25, v14);
            v71 = (void **)((char *)&v69->isa
                          + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
            swift_beginAccess();
            v72 = *v71;
            v73 = (Class *)((char *)&v69->isa
                          + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
            swift_beginAccess();
            if (*v73 >> 62 == 1)
            {
              v74 = (*v73 & 0x3FFFFFFFFFFFFFFFLL) + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
              v75 = v113;
              v76 = v114;
              (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v12, v74, v114);
              v77 = 4;
            }
            else
            {
              v12 = (char *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId);
              v77 = 2;
              v76 = v114;
              v75 = v113;
            }
            v78 = v112;
            (*(void (**)(char *, char *, uint64_t))(v75 + 8 * v77))(v112, v12, v76);
            v79 = v72;
            type metadata accessor for ConversationContextUpdateMetadata();
            v80 = v75;
            v81 = swift_allocObject();
            *(_BYTE *)(v81 + 16) = v70 & 1;
            (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v81 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v115, v14);
            *(_QWORD *)(v81 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v72;
            (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v81 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v78, v76);
            v82 = v81;
            *(_BYTE *)(v81 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = 0;
            v83 = v106;
            v84 = ContextUpdateScope.toExecutionContextUpdateScope(isMUXEnabled:)(*(_BYTE *)(v5
                                                                                           + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled));
            if (one-time initialization token for conversationBridge != -1)
              swift_once();
            v85 = type metadata accessor for Logger();
            __swift_project_value_buffer(v85, (uint64_t)static Logger.conversationBridge);
            v86 = Logger.logObject.getter();
            v87 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v86, v87))
            {
              v88 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v88 = 0;
              _os_log_impl(&dword_1B4BE6000, v86, v87, "Submitting context update obtained from remote companion device", v88, 2u);
              MEMORY[0x1B5E44758](v88, -1, -1);
            }

            v89 = v124;
            v90 = v125;
            __swift_project_boxed_opaque_existential_1(v123, v124);
            (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 8))(v83, v82, v84, v89, v90);
            v91 = v117;
            v92 = Logger.logObject.getter();
            v93 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v92, v93))
            {
              v94 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v94 = 0;
              _os_log_impl(&dword_1B4BE6000, v92, v93, "Successfully applied remote context update", v94, 2u);
              MEMORY[0x1B5E44758](v94, -1, -1);
            }

            if (v91)
            {
              v95 = objc_allocWithZone(MEMORY[0x1E0D87FF8]);
              swift_retain();
              v96 = objc_msgSend(v95, sel_init);
              v97 = v110;
              UUID.init()();
              v98 = UUID.uuidString.getter();
              v100 = v99;
              (*(void (**)(char *, uint64_t))(v111 + 8))(v97, v108);
              v101 = (void *)MEMORY[0x1B5E432E8](v98, v100);
              swift_bridgeObjectRelease();
              objc_msgSend(v96, sel_setAceId_, v101);

              v102 = v96;
              v103 = objc_msgSend(v118, sel_aceId);
              objc_msgSend(v102, sel_setRefId_, v103);

              v104 = v102;
              v91(v102, 0);

              _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v91);
            }
            outlined consume of Data._Representation(v107, v105);

            swift_release();
LABEL_20:
            swift_release();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v123);
            return;
          }
        }
        else
        {
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v121, (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
        v39 = v38;
        v40 = v117;
        if (one-time initialization token for conversationBridge != -1)
          swift_once();
        v41 = type metadata accessor for Logger();
        __swift_project_value_buffer(v41, (uint64_t)static Logger.conversationBridge);
        v42 = Logger.logObject.getter();
        v43 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v42, v43))
        {
          v44 = (uint8_t *)swift_slowAlloc();
          v45 = swift_slowAlloc();
          *(_QWORD *)&v121 = v45;
          *(_DWORD *)v44 = 136315138;
          v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x80000001B4EFA1B0, (uint64_t *)&v121);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1B4BE6000, v42, v43, "%s", v44, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v45, -1, -1);
          MEMORY[0x1B5E44758](v44, -1, -1);
        }

        specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v33, -1, 0xD00000000000002CLL, 0x80000001B4EFA1B0, v40, v116);
        outlined consume of Data._Representation(v107, v39);
        goto LABEL_20;
      }
      v61 = v38;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v121, &demangling cache variable for type metadata for ContextUpdating?);
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v62 = type metadata accessor for Logger();
      __swift_project_value_buffer(v62, (uint64_t)static Logger.conversationBridge);
      v63 = Logger.logObject.getter();
      v64 = static os_log_type_t.error.getter();
      v65 = os_log_type_enabled(v63, v64);
      v66 = v117;
      if (v65)
      {
        v67 = (uint8_t *)swift_slowAlloc();
        v68 = swift_slowAlloc();
        v123[0] = v68;
        *(_DWORD *)v67 = 136315138;
        *(_QWORD *)&v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x80000001B4EFA170, v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v63, v64, "%s", v67, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v68, -1, -1);
        MEMORY[0x1B5E44758](v67, -1, -1);
      }

      specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v33, -1, 0xD000000000000033, 0x80000001B4EFA170, v66, v116);
      outlined consume of Data._Representation(v36, v61);
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v54 = type metadata accessor for Logger();
      __swift_project_value_buffer(v54, (uint64_t)static Logger.conversationBridge);
      v55 = Logger.logObject.getter();
      v56 = static os_log_type_t.error.getter();
      v57 = os_log_type_enabled(v55, v56);
      v58 = v117;
      if (v57)
      {
        v59 = (uint8_t *)swift_slowAlloc();
        v60 = swift_slowAlloc();
        v123[0] = v60;
        *(_DWORD *)v59 = 136315138;
        *(_QWORD *)&v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000004CLL, 0x80000001B4EFA120, v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v55, v56, "%s", v59, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v60, -1, -1);
        MEMORY[0x1B5E44758](v59, -1, -1);
      }

      specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v33, -1, 0xD00000000000004CLL, 0x80000001B4EFA120, v58, v116);
    }
    goto LABEL_36;
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.conversationBridge);
  v119 = Logger.logObject.getter();
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v119, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v29 = 0;
    _os_log_impl(&dword_1B4BE6000, v119, v28, "Ignoring RemoteExecutionContextUpdate as we are not in a turn.", v29, 2u);
    MEMORY[0x1B5E44758](v29, -1, -1);
  }

}

uint64_t ConversationRequestProcessor.handleFlowOutputResponseMessage(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v20 = v2;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v22 = v4;
    v23 = v9;
    v14 = (_QWORD *)v13;
    v21 = v7;
    *(_DWORD *)v12 = 138412290;
    v15 = v9;
    v7 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v14 = v9;

    v2 = v20;
    _os_log_impl(&dword_1B4BE6000, v10, v11, "ExecutionBridge received message: %@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v16 = v14;
    v4 = v22;
    MEMORY[0x1B5E44758](v16, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);

  }
  else
  {

  }
  v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
  FlowOutputResponseMessage.outputId.getter();
  v18 = (void *)FlowOutputResponseMessage.commandResult.getter();
  (*(void (**)(char *, void *, _QWORD))(*(_QWORD *)v17 + 280))(v7, v18, 0);

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t closure #1 in closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v8[13] = v10;
  v8[14] = v11;
  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[8] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  void *v6;
  Swift::String *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::String *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD **)(v0 + 64);
  v4 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil);
  v5 = (unsigned int *)(*(_QWORD *)(v0 + 72)
                      + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter);
  swift_beginAccess();
  (*(void (**)(_QWORD, uint64_t, BOOL, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v4 + 160))(*v5, 1, v2 != 0, v3[8], v3[9], v3[10], v3[11], v1);
  if (__OFADD__(*v5, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  ++*v5;
  if (v2)
  {
    if (one-time initialization token for insightRequestSummaryLogger == -1)
    {
LABEL_4:
      v6 = *(void **)(v0 + 88);
      v7 = *(Swift::String **)(v0 + 64);
      v8 = type metadata accessor for InsightRequestSummaryLogger();
      v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.insightRequestSummaryLogger);
      swift_retain();
      specialized InsightRequestSummaryLogger.emitDebug(_:)(v9, v7, (uint64_t)v6);
      goto LABEL_8;
    }
LABEL_10:
    swift_once();
    goto LABEL_4;
  }
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v10 = *(void **)(v0 + 88);
  v11 = *(Swift::String **)(v0 + 64);
  v12 = type metadata accessor for InsightRequestSummaryLogger();
  v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.insightRequestSummaryLogger);
  swift_retain();
  specialized InsightRequestSummaryLogger.emitDebug(_:)(v13, v11, (uint64_t)v10);
LABEL_8:
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  v16 = *(_QWORD *)(v0 + 80);

  swift_release();
  v15(v14, v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void ConversationRequestProcessor.close(withExecutionOutput:)(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  v3 = a1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v12 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = objc_msgSend(v3, sel_debugDescription);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v4, v5, "<<<--- %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);

  }
  else
  {

  }
  ConversationRequestProcessor.closeInternal(_:_:_:)((char *)v3, 0, 0, 0);
}

void ConversationRequestProcessor.close(withExecutionOutput:errorString:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v22;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
  v6 = a1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v22 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = objc_msgSend(v6, sel_debugDescription);
    v12 = v6;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    v16 = v13;
    v6 = v12;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v7, v8, "<<<--- %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);

  }
  else
  {

  }
  swift_bridgeObjectRetain_n();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v22 = v20;
    *(_DWORD *)v19 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v17, v18, "There was an error while running execution: %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  ConversationRequestProcessor.closeInternal(_:_:_:)((char *)v6, a2, a3, 0);
}

void ConversationRequestProcessor.close(withExecutionOutput:errorString:shouldFailRequest:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v20 = v18;
    *(_DWORD *)v12 = 136315138;
    v13 = a3;
    v14 = objc_msgSend(v9, sel_debugDescription);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = a4;
    v17 = v16;

    a3 = v13;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v19;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v10, v11, "<<<--- %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v18, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);

  }
  else
  {

  }
  ConversationRequestProcessor.closeInternal(_:_:_:)((char *)v9, a2, a3, a4 & 1);
}

void ConversationRequestProcessor.fallbackToServer(forResultCandidateId:serverFallbackReason:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "Execution cannot fallback to server since it is not implemented", v2, 2u);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

}

Swift::Void __swiftcall ConversationRequestProcessor.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v2, "Execution cannot fallback to info domain results since it is not implemented", v3, 2u);
    MEMORY[0x1B5E44758](v3, -1, -1);
  }

}

void ConversationRequestProcessor.fetchSpeechInfo(reply:)(void (*a1)(id))
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  id v27;
  id v28;
  uint64_t v29;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 528))();
  if (v3)
  {
    v4 = (_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    if (*v4 >> 62 == 1)
    {
      v5 = (void *)v4[1];
      if (v5)
      {
        v6 = objc_allocWithZone(MEMORY[0x1E0CFEA28]);
        v7 = v5;
        v8 = objc_msgSend(v6, sel_initWithSpeechRecognizedCommand_, v7);
        if (one-time initialization token for conversationBridge != -1)
          swift_once();
        v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
        v10 = v8;
        v11 = Logger.logObject.getter();
        v12 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v11, v12))
        {
          v28 = v8;
          v13 = (uint8_t *)swift_slowAlloc();
          v27 = v7;
          v14 = swift_slowAlloc();
          *(_DWORD *)v13 = 136315138;
          v29 = v14;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AFSpeechInfo?);
          v15 = Optional.debugDescription.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v29);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v11, v12, "Replying with speechInfo: %s", v13, 0xCu);
          swift_arrayDestroy();
          v17 = v14;
          v7 = v27;
          MEMORY[0x1B5E44758](v17, -1, -1);
          v18 = v13;
          v8 = v28;
          MEMORY[0x1B5E44758](v18, -1, -1);

        }
        else
        {

        }
        a1(v8);
        swift_release();

      }
      else
      {
        if (one-time initialization token for conversationBridge != -1)
          swift_once();
        v23 = type metadata accessor for Logger();
        __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
        v24 = Logger.logObject.getter();
        v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          v26 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v26 = 0;
          _os_log_impl(&dword_1B4BE6000, v24, v25, "Cannot fetch speechInfo since SpeechRecognized is nil", v26, 2u);
          MEMORY[0x1B5E44758](v26, -1, -1);
        }

        a1(0);
        swift_release();
      }
      return;
    }
    swift_release();
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1B4BE6000, v20, v21, "Cannot fetch speechInfo before endpointing", v22, 2u);
    MEMORY[0x1B5E44758](v22, -1, -1);
  }

  a1(0);
}

uint64_t ConversationRequestProcessor.getRecentDialogs()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0
                                            + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_recentDialogTracker)
                              + 264))();
}

uint64_t closure #1 in ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *MEMORY[0x1E0D9E668];
  v10 = type metadata accessor for MessageSource();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  FlowPluginInfoMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  FlowPluginInfoMessage.Builder.assistantId.setter();
  v12 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v5, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v5, 0, 1, v13);
  FlowPluginInfoMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  FlowPluginInfoMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  FlowPluginInfoMessage.Builder.resultCandidateId.setter();
  FlowPluginInfoMessage.Builder.supportsOnDeviceNL.setter();
  return FlowPluginInfoMessage.Builder.isPersonalRequest.setter();
}

void closure #2 in ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1, void *a2)
{
  closure #2 in ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)(a1, a2, "Sent VoiceIdentificationSignal, error: %s");
}

uint64_t ConversationRequestProcessor.willExecute(executionInputInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0
                                            + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent)
                              + 400))();
}

uint64_t ConversationRequestProcessor.getSelfReflectionDecision()@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  char v3;
  uint64_t result;
  _QWORD v5[5];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(v1
                                                             + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent)
                                               + 320))(v5);
  v3 = v5[0];
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t ConversationRequestProcessor.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  uint64_t result;
  void *v14;
  _QWORD v15[6];

  v4 = v3;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1B4BE6000, v9, v10, "Submitting an External activation request", v11, 2u);
    MEMORY[0x1B5E44758](v11, -1, -1);
  }

  v12 = *(void **)(v4 + 16);
  result = (uint64_t)objc_msgSend(v12, sel_respondsToSelector_, sel_submitExternalActivationRequest_completion_);
  if ((result & 1) != 0)
  {
    v15[4] = a2;
    v15[5] = a3;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 1107296256;
    v15[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    v15[3] = &block_descriptor_11;
    v14 = _Block_copy(v15);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(v12, sel_submitExternalActivationRequest_completion_, a1, v14);
    _Block_release(v14);
    return swift_unknownObjectRelease();
  }
  return result;
}

void ConversationRequestProcessor.closeInternal(_:_:_:)(char *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_t oslog;
  uint64_t v25;

  v5 = v4;
  v10 = (*(uint64_t (**)(void))(*v4 + 528))();
  swift_release();
  if (v10)
  {
    v12 = *(_QWORD *)&a1[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
    v11 = *(_QWORD *)&a1[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
    v14 = v5[8];
    v13 = v5[9];
    v15 = v12 == v14 && v11 == v13;
    if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t, _QWORD))(*v5 + 1016))(a1, a2, a3, a4 & 1);
      return;
    }
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
    oslog = a1;
    swift_retain();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v23 = swift_slowAlloc();
      v25 = v23;
      *(_DWORD *)v22 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v20, v21, "Received close() for requestId:%s on ConversationRequestProcessor with requestId:%s .. ignoring.", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v23, -1, -1);
      MEMORY[0x1B5E44758](v22, -1, -1);

      return;
    }

    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
    oslog = (os_log_t)Logger.logObject.getter();
    v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B4BE6000, oslog, v17, "Request already canceled. Not closing.", v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);
    }
  }

}

void ConversationRequestProcessor.synchronizedClose(_:_:_:)(void *a1, uint64_t a2, char *a3, int a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  char *v50;
  void **v51;
  void *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, char *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t);
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t);
  unint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  os_log_type_t v93;
  uint8_t *v94;
  char *v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t);
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125[3];
  uint64_t v126[4];

  v5 = v4;
  v115 = a4;
  v118 = a3;
  v114 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  MEMORY[0x1E0C80A78](v7);
  v108 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OSSignpostID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v13);
  v113 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UserID();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v107 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v120 = (char *)&v105 - v19;
  v20 = type metadata accessor for RequestType();
  v116 = *(_QWORD *)(v20 - 8);
  v117 = v20;
  MEMORY[0x1E0C80A78](v20);
  v112 = (char *)&v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
  v24 = a1;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.debug.getter();
  v27 = os_log_type_enabled(v25, v26);
  v121 = v23;
  v110 = v9;
  v109 = v10;
  v106 = v12;
  v111 = v16;
  if (v27)
  {
    v28 = swift_slowAlloc();
    v105 = v5;
    v29 = (uint8_t *)v28;
    v30 = swift_slowAlloc();
    v126[0] = v30;
    v119 = v15;
    *(_DWORD *)v29 = 136315138;
    v31 = objc_msgSend(v24, sel_debugDescription);
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

    v125[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, v126);
    v15 = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v25, v26, "synchronizedClose with ExecutionOutput: %s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v30, -1, -1);
    v5 = v105;
    MEMORY[0x1B5E44758](v29, -1, -1);
  }
  else
  {

  }
  v35 = (*(uint64_t (**)(void))(*v5 + 528))();
  v36 = v120;
  if (!v35)
  {
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      _os_log_impl(&dword_1B4BE6000, v46, v47, "Ignoring synchronizedClosed as we are not in a turn", v48, 2u);
      MEMORY[0x1B5E44758](v48, -1, -1);
    }
LABEL_38:

    return;
  }
  v37 = (char *)v35;
  v38 = v5;
  if ((v115 & 1) != 0)
  {
    v39 = (char *)v35;
    v41 = v5[10];
    v40 = v5[11];
    v42 = v114;
    specialized static ConversationBridgeUtils.failRequest(serviceHelper:executionRequestId:reason:)(*(void **)((char *)v5+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper), v41, v40, v114, v118);
    v120 = v39;
    v43 = &v39[OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState];
    swift_beginAccess();
    v44 = *(_QWORD *)v43;
    if (*(_QWORD *)v43 >> 62 == 1)
    {
      v45 = *(_QWORD *)(v44 + 24);
      v119 = *(_QWORD *)(v44 + 16);
      swift_bridgeObjectRetain();
    }
    else
    {
      v119 = 0;
      v45 = 0xE000000000000000;
    }
    v57 = *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil);
    if (v118)
      v58 = v42;
    else
      v58 = 0;
    if (v118)
      v59 = v118;
    else
      v59 = (char *)0xE000000000000000;
    v61 = v5[8];
    v60 = v5[9];
    v62 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t))(*(_QWORD *)v57 + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v62(v58, v59, v41, v40, v61, v60, v119, v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain_n();
    swift_bridgeObjectRetain();
    v63 = Logger.logObject.getter();
    v64 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = swift_slowAlloc();
      v66 = swift_slowAlloc();
      v125[0] = v66;
      *(_DWORD *)v65 = 136315394;
      swift_bridgeObjectRetain();
      v124 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v60, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v65 + 12) = 2080;
      swift_bridgeObjectRetain();
      v124 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v45, v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v63, v64, "Failed the request for requestId: %s for rcId : %s", (uint8_t *)v65, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v66, -1, -1);
      MEMORY[0x1B5E44758](v65, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();
      swift_release_n();
      swift_bridgeObjectRelease_n();

    }
    return;
  }
  v49 = v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  v50 = v112;
  (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v112, v49, v117);
  v51 = (void **)&v37[OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo];
  swift_beginAccess();
  v52 = *v51;
  v53 = &v37[OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState];
  swift_beginAccess();
  v118 = v53;
  v119 = v15;
  if (*(_QWORD *)v53 >> 62 == 1)
  {
    v54 = (*(_QWORD *)v53 & 0x3FFFFFFFFFFFFFFFLL) + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
    v55 = v111;
    v56 = v107;
    (*(void (**)(char *, uint64_t, uint64_t))(v111 + 16))(v107, v54, v15);
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v36, v56, v15);
  }
  else
  {
    v55 = v111;
    (*(void (**)(char *, uint64_t, uint64_t))(v111 + 16))(v36, (uint64_t)v38 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId, v15);
  }
  v67 = (*(uint64_t (**)(void *))((*MEMORY[0x1E0DEEDD8] & *v24) + 0xA0))(v52);
  type metadata accessor for ConversationContextUpdateMetadata();
  v68 = swift_allocObject();
  *(_BYTE *)(v68 + 16) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v116 + 32))(v68 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v50, v117);
  *(_QWORD *)(v68 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v52;
  (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v68 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v36, v119);
  *(_BYTE *)(v68 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = v67 & 1;
  v69 = *(_QWORD *)((char *)v38 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
  v70 = type metadata accessor for TaskPriority();
  v71 = (uint64_t)v113;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v113, 1, 1, v70);
  v72 = one-time initialization token for shared;
  v73 = v24;
  swift_retain();
  swift_retain();
  swift_retain();
  if (v72 != -1)
    swift_once();
  swift_beginAccess();
  v74 = static MessageBusActor.shared;
  v75 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v76 = (_QWORD *)swift_allocObject();
  v76[2] = v74;
  v76[3] = v75;
  v76[4] = v38;
  v76[5] = v73;
  v76[6] = v68;
  v76[7] = v37;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v71, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:), (uint64_t)v76);
  (*(void (**)(void))(*(_QWORD *)v69 + 120))();
  swift_release();
  v77 = *(_QWORD *)v118;
  if (*(_QWORD *)v118 >> 62 != 1)
  {
    v46 = Logger.logObject.getter();
    v93 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v93))
    {
      v94 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v94 = 0;
      _os_log_impl(&dword_1B4BE6000, v46, v93, "Close called before an RC was selected. Cannot send ResultCandidateSelected to server", v94, 2u);
      MEMORY[0x1B5E44758](v94, -1, -1);

      swift_release();
      swift_release();
      return;
    }
    swift_release();
    swift_release();
    goto LABEL_38;
  }
  v119 = v68;
  v120 = v37;
  v78 = v77 & 0x3FFFFFFFFFFFFFFFLL;
  v79 = *(void (**)(uint64_t))(*(_QWORD *)(v77 & 0x3FFFFFFFFFFFFFFFLL) + 384);
  swift_retain();
  v79(8);
  v81 = (char *)v38[10];
  v80 = v38[11];
  v83 = v38[8];
  v82 = v38[9];
  v84 = *(_QWORD *)(v77 + 16);
  v85 = *(_QWORD *)(v77 + 24);
  v86 = *(void (**)(char *, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(**(_QWORD **)((char *)v38 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil) + 144);
  swift_bridgeObjectRetain();
  v118 = v81;
  v86(v81, v80, v83, v82, v84, v85);
  v87 = swift_bridgeObjectRelease();
  v88 = v108;
  (*(void (**)(uint64_t))(*(_QWORD *)v78 + 832))(v87);
  v89 = (uint64_t)v88;
  v90 = v109;
  v91 = v88;
  v92 = v110;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v91, 1, v110) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v89, &demangling cache variable for type metadata for OSSignpostID?);
  }
  else
  {
    v95 = v106;
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 32))(v106, v89, v92);
    static os_signpost_type_t.end.getter();
    if (one-time initialization token for executor != -1)
      swift_once();
    os_signpost(_:dso:log:name:signpostID:)();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v95, v92);
  }
  swift_retain_n();
  swift_retain_n();
  v96 = Logger.logObject.getter();
  v97 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v96, v97))
  {
    v98 = swift_slowAlloc();
    v99 = swift_slowAlloc();
    v123 = v99;
    *(_DWORD *)v98 = 136315650;
    swift_bridgeObjectRetain();
    v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v82, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v98 + 12) = 2080;
    swift_bridgeObjectRetain();
    v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v118, v80, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v98 + 22) = 2080;
    v100 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 800);
    v101 = swift_retain();
    v102 = v100(v101);
    v104 = v103;
    swift_release();
    v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v104, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v96, v97, "Done handling on-device request for requestId: %s, rootRequestId: %s for: %s", (uint8_t *)v98, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v99, -1, -1);
    MEMORY[0x1B5E44758](v98, -1, -1);

    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release_n();
    swift_release_n();
    swift_release();

  }
}

uint64_t closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v7[15] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 128) = static MessageBusActor.shared;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 88);
  *(_QWORD *)(v2 + 32) = v1;
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v3;
  *(_QWORD *)(v0 + 152) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
  *v3 = v0;
  v3[1] = closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = *(_QWORD **)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release();
  v4 = *(void **)(v0 + 64);
  v5 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil);
  v6 = (unsigned int *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter);
  swift_beginAccess();
  (*(void (**)(_QWORD, uint64_t, BOOL, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v5 + 160))(*v6, 1, v4 != 0, v1[8], v1[9], v1[10], v1[11], v3);
  if (__OFADD__(*v6, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v6;
    if (one-time initialization token for conversationBridge == -1)
      goto LABEL_3;
  }
  swift_once();
LABEL_3:
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
  v8 = v4;
  v9 = v4;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v18 = v13;
    *(_DWORD *)v12 = 136315138;
    *(_QWORD *)(v0 + 72) = v4;
    v14 = Optional.debugDescription.getter();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v10, v11, "Submitted FlowOutput with error: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v13, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }
  else
  {

  }
  v16 = *(_QWORD *)(v0 + 88);
  ConversationRequestProcessor.synchronizedCloseRequest()();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 376))(1, 0, 3);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a3;
  v30 = a4;
  v24 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Error?, Never>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
  v12 = a2[8];
  v27 = a2[9];
  v28 = v12;
  v13 = a2[10];
  v25 = a2[11];
  v26 = v13;
  v23 = (char *)a2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater;
  v14 = a2[13];
  v22 = a2[12];
  v15 = (char *)a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v16 = type metadata accessor for UUID();
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v10, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v10, 0, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v24, v5);
  v18 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v19 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v19 + v18, (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, _QWORD, uint64_t, uint64_t, uint64_t, char *, _QWORD, _QWORD, uint64_t (*)(int, void *), uint64_t))(*(_QWORD *)v11 + 264))(v29, v28, v27, v26, v25, v23, 0, v30, v22, v14, v10, 0, 0, partial apply for closure #1 in closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:), v19);
  swift_release();
  return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(int a1, id a2)
{
  id v2;

  v2 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Error?, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t closure #1 in ConversationRequestProcessor.commit(rcState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[11] = a8;
  v8[12] = v10;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v8[13] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationRequestProcessor.commit(rcState:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD, _QWORD, _QWORD, uint64_t, _UNKNOWN **, uint64_t, uint64_t);

  v1 = v0[7];
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient + 24);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient), v2);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate);
  v7 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(**(int **)(v3 + 56)
                                                                                              + *(_QWORD *)(v3 + 56));
  v5 = (_QWORD *)swift_task_alloc();
  v0[14] = v5;
  *v5 = v0;
  v5[1] = closure #1 in ConversationRequestProcessor.commit(rcState:);
  return v7(v0[8], v0[9], v0[10], v4, &protocol witness table for ConversationBridgeProcessorDelegate, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  _BYTE *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  Swift::String *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 120);
  swift_release();
  if (!v1)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1B4BE6000, v15, v16, "Cannot act on execution override decision as ExecutionOverrideResult is nil", v17, 2u);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }

    goto LABEL_13;
  }
  v2 = one-time initialization token for conversationBridge;
  v3 = *(id *)(v0 + 120);
  if (v2 != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  v5 = v3;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v27 = v9;
    *(_DWORD *)v8 = 136315394;
    *(_BYTE *)(v0 + 128) = v5[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_type];
    v10 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v8 + 12) = 2080;
    *(_BYTE *)(v0 + 129) = v5[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_decision];
    v12 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v6, v7, "ExecutionOverride result type: %s decision: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }
  else
  {

  }
  v19 = *(_QWORD *)(v0 + 88);
  v18 = *(_QWORD *)(v0 + 96);
  v20 = ExecutionOverrideType.asPreExecutionType()();
  v21 = ExecutionOverrideDecision.asPreExecutionDecision()();
  v22 = ConversationRequestProcessor.handledMitigation(rcState:turn:ruleType:ruleDecision:)(v19, v18, v20, v21);

  if ((v22 & 1) == 0)
  {
LABEL_13:
    v5 = *(_BYTE **)(v0 + 120);
    v23 = *(Swift::String **)(v0 + 88);
    v25 = *(_QWORD *)(v0 + 64);
    v24 = *(_QWORD *)(v0 + 72);
    (*(void (**)(Swift::String *, _QWORD))(**(_QWORD **)(v0 + 56) + 1208))(v23, *(_QWORD *)(v0 + 96));
    ConversationRequestProcessor.sendCommitToExecution(_:_:)(v25, v24, v23);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ConversationRequestProcessor.commit(rcState:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

Swift::Void __swiftcall ConversationRequestProcessor.handleRuntimeError(error:)(NSError *error)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  os_log_type_t v31;
  uint8_t *v32;
  id v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  id v55;
  uint64_t v56;
  void *v57;
  void *v58;
  unint64_t *v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  NSError *v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t aBlock[6];
  uint64_t v72;

  v2 = v1;
  v66 = error;
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v65 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RequestType();
  v69 = *(_QWORD **)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v68 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v67 = (char *)&v62 - v9;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v62 = swift_slowAlloc();
    aBlock[0] = v62;
    *(_DWORD *)v14 = 136315394;
    v63 = v3;
    v64 = v11;
    v16 = v2[8];
    v15 = v2[9];
    swift_bridgeObjectRetain();
    v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v17 = v2[10];
    v18 = v2[11];
    swift_bridgeObjectRetain();
    v19 = v17;
    v3 = v63;
    v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v12, v13, "Handling Runtime error for requestId: %s, rootRequestId: %s", (uint8_t *)v14, 0x16u);
    v20 = v62;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v14, -1, -1);

  }
  else
  {

    v21 = swift_release();
  }
  v22 = (*(uint64_t (**)(uint64_t))(*v2 + 528))(v21);
  if (v22)
  {
    v64 = v22;
    v23 = v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    v24 = v69;
    v25 = v67;
    ((void (*)(char *, uint64_t, uint64_t))v69[2])(v67, v23, v6);
    v26 = v68;
    ((void (*)(char *, _QWORD, uint64_t))v24[13])(v68, *MEMORY[0x1E0D9E880], v6);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D0]);
    LOBYTE(v23) = dispatch thunk of static Equatable.== infix(_:_:)();
    v27 = (void (*)(char *, uint64_t))v24[1];
    v27(v26, v6);
    v27(v25, v6);
    if ((v23 & 1) != 0)
    {
      v28 = Logger.logObject.getter();
      v29 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v28, v29))
      {

        swift_release();
        return;
      }
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_1B4BE6000, v28, v29, "Understanding is running on server. Ignoring assistant_service crash", v30, 2u);
      MEMORY[0x1B5E44758](v30, -1, -1);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*v2 + 376))(1, 0, 3);
      v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D87FE8]), sel_init);
      v34 = v65;
      UUID.init()();
      v35 = UUID.uuidString.getter();
      v37 = v36;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v34, v3);
      v38 = (void *)MEMORY[0x1B5E432E8](v35, v37);
      swift_bridgeObjectRelease();
      objc_msgSend(v33, sel_setAceId_, v38);

      v39 = v2[10];
      v40 = v2[11];
      v41 = v33;
      v42 = (void *)MEMORY[0x1B5E432E8](v39, v40);
      objc_msgSend(v41, sel_setRefId_, v42);

      v43 = -[NSError description](v66, sel_description);
      if (!v43)
      {
        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v43 = (id)MEMORY[0x1B5E432E8](v44);
        swift_bridgeObjectRelease();
      }
      objc_msgSend(v41, sel_setReason_, v43);

      objc_msgSend(v41, sel_setErrorCode_, -[NSError code](v66, sel_code));
      v45 = v41;
      v46 = Logger.logObject.getter();
      v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = swift_slowAlloc();
        v49 = swift_slowAlloc();
        v69 = v2;
        v50 = v49;
        aBlock[0] = v49;
        *(_DWORD *)v48 = 136315394;
        v51 = objc_msgSend(v45, sel_debugDescription);
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v54 = v53;

        v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v48 + 12) = 2048;
        v55 = objc_msgSend(v45, sel_errorCode);

        v70 = (uint64_t)v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl(&dword_1B4BE6000, v46, v47, "Sending %s, errorCode: %ld", (uint8_t *)v48, 0x16u);
        swift_arrayDestroy();
        v56 = v50;
        v2 = v69;
        MEMORY[0x1B5E44758](v56, -1, -1);
        MEMORY[0x1B5E44758](v48, -1, -1);

      }
      else
      {

      }
      v57 = (void *)v2[2];
      aBlock[4] = (uint64_t)closure #1 in ConversationRequestProcessor.handleRuntimeError(error:);
      aBlock[5] = 0;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
      aBlock[3] = (uint64_t)&block_descriptor_22_0;
      v58 = _Block_copy(aBlock);
      v28 = v45;
      objc_msgSend(v57, sel_handleCommand_completion_, v28, v58);
      _Block_release(v58);

      v59 = (unint64_t *)(v64
                               + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      v61 = *v59;
      v60 = (void *)v59[1];
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v61, v60);
      ConversationRequestProcessorTurnState.SpeechState.cancelAll(exceptResultCandidateId:)((Swift::String_optional)0);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v61, v60);
    }
    swift_release();
  }
  else
  {
    v28 = Logger.logObject.getter();
    v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1B4BE6000, v28, v31, "Not handling runtime error since request has already been cancelled", v32, 2u);
      MEMORY[0x1B5E44758](v32, -1, -1);
    }
  }

}

void closure #1 in ConversationRequestProcessor.handleRuntimeError(error:)(uint64_t a1, void *a2)
{
  closure #2 in ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)(a1, a2, "Sent commandFailed with error: %s");
}

void closure #2 in ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1, void *a2, const char *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *oslog;
  uint64_t v15;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
  v6 = a2;
  v7 = a2;
  oslog = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = a2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    v12 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, oslog, v8, a3, v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);

  }
  else
  {

  }
}

uint64_t ConversationRequestProcessor.acquireConversationUserInput(forUserId:requestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v12 = v10;
    *(_DWORD *)v9 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000038, 0x80000001B4EF8A60, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v7, v8, "%s not implemented yet", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }

  return a5(0);
}

void ConversationRequestProcessor.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, unint64_t a2, NSObject *a3, unint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(void), uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  char *v33;
  void *v34;
  char v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  os_log_t v43;
  uint64_t v44;
  _BYTE *v45;
  _QWORD v46[2];
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v9 = v8;
  v53 = a3;
  v54 = a1;
  v16 = type metadata accessor for UserID();
  v50 = *(_QWORD *)(v16 - 8);
  v51 = v16;
  MEMORY[0x1E0C80A78](v16);
  v49 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  v22 = os_log_type_enabled(v20, v21);
  v52 = a5;
  if (v22)
  {
    v23 = swift_slowAlloc();
    v46[1] = v19;
    v24 = v23;
    v25 = swift_slowAlloc();
    v56 = v25;
    *(_DWORD *)v24 = 136315394;
    v47 = a8;
    v48 = a6;
    swift_bridgeObjectRetain();
    v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, a2, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 12) = 2080;
    swift_bridgeObjectRetain();
    v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v53, a4, &v56);
    a8 = v47;
    a6 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v20, v21, "Execution asked to re-trigger requestId: %s with userId: %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v25, -1, -1);
    MEMORY[0x1B5E44758](v24, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  if (*((_BYTE *)v9 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) != 1)
  {
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1B4BE6000, v30, v31, "Ignoring re-trigger request from SKE since MUX is not enabled", v32, 2u);
      MEMORY[0x1B5E44758](v32, -1, -1);
    }

    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    v34 = (void *)swift_allocError();
    v35 = 14;
    goto LABEL_18;
  }
  v26 = (*(uint64_t (**)(void))(*v9 + 528))();
  swift_release();
  if (!v26)
  {
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1B4BE6000, v36, v37, "Current request already canceled. Not re-triggering another request.", v38, 2u);
      MEMORY[0x1B5E44758](v38, -1, -1);
    }

    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    v34 = (void *)swift_allocError();
    v35 = 1;
LABEL_18:
    *v33 = v35;
    goto LABEL_19;
  }
  v28 = v9[8];
  v27 = v9[9];
  if (v28 == v52 && v27 == a6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    v29 = (uint64_t)v49;
    UserID.init(sharedUserId:)();
    ConversationRequestProcessor.synchronizedRetriggerOriginalRequest(rollbackRequestId:userId:reply:)(v54, a2, v29, a7, a8);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v29, v51);
    return;
  }
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = swift_slowAlloc();
    v53 = v39;
    v42 = v41;
    v54 = swift_slowAlloc();
    v56 = v54;
    *(_DWORD *)v42 = 136315394;
    swift_bridgeObjectRetain();
    v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v42 + 12) = 2080;
    swift_bridgeObjectRetain();
    v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, a6, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v43 = v53;
    _os_log_impl(&dword_1B4BE6000, v53, v40, "Current requestId: %s does not match executionRequestId: %s. Not re-triggering another request", (uint8_t *)v42, 0x16u);
    v44 = v54;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v44, -1, -1);
    MEMORY[0x1B5E44758](v42, -1, -1);

  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();

  }
  lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
  v34 = (void *)swift_allocError();
  *v45 = 0;
LABEL_19:
  a7();

}

Swift::Void __swiftcall ConversationRequestProcessor.closeServerRequest(forExecutionRequestId:)(Swift::String forExecutionRequestId)
{
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v2, "closeServerRequest() cannot be handled by ConversationRequestProcessor.", v3, 2u);
    MEMORY[0x1B5E44758](v3, -1, -1);
  }

}

void ConversationRequestProcessor.synchronizedRetriggerOriginalRequest(rollbackRequestId:userId:reply:)(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  _BYTE *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void (*v33)(void);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v33 = a4;
  v10 = type metadata accessor for UserID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  ConversationRequestProcessor.synchronizedCloseRequest()();
  v34 = v5;
  v35 = a1;
  v36 = a2;
  v37 = a3;
  v14 = objc_allocWithZone((Class)type metadata accessor for InitiateMUXStateRollbackMessage());
  v15 = InitiateMUXStateRollbackMessage.init(build:)();
  if (v15)
  {
    v32 = a5;
    v16 = (void *)v15;
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 48));
    v31 = v16;
    dispatch thunk of MessagePublishing.postMessage(_:)();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
    swift_bridgeObjectRetain_n();
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc();
      v21 = swift_slowAlloc();
      v39 = v21;
      *(_DWORD *)v20 = 136315394;
      swift_bridgeObjectRetain();
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2080;
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EFA0]);
      v22 = dispatch thunk of CustomStringConvertible.description.getter();
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      _os_log_impl(&dword_1B4BE6000, v18, v19, "Posted InitiateMUXStateRollbackMessage for requestId: %s, userId: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v21, -1, -1);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }

    ((void (*)(_QWORD))v33)(0);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1B4BE6000, v25, v26, "Could not create InitiateMUXStateRollbackMessage", v27, 2u);
      MEMORY[0x1B5E44758](v27, -1, -1);
    }

    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    v28 = (void *)swift_allocError();
    *v29 = 13;
    v33();

  }
}

uint64_t closure #1 in ConversationRequestProcessor.synchronizedRetriggerOriginalRequest(rollbackRequestId:userId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v25 = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *MEMORY[0x1E0D9E668];
  v16 = type metadata accessor for MessageSource();
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v14, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  InitiateMUXStateRollbackMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  InitiateMUXStateRollbackMessage.Builder.assistantId.setter();
  v18 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v19 = type metadata accessor for UUID();
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v11, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v11, 0, 1, v19);
  InitiateMUXStateRollbackMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  InitiateMUXStateRollbackMessage.Builder.originalRequestId.setter();
  swift_bridgeObjectRetain();
  InitiateMUXStateRollbackMessage.Builder.rollbackRequestId.setter();
  v21 = type metadata accessor for UserID();
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v8, v25, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v8, 0, 1, v21);
  return InitiateMUXStateRollbackMessage.Builder.userId.setter();
}

uint64_t closure #1 in ConversationRequestProcessor.synchronizedCloseRequest()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[7] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationRequestProcessor.synchronizedCloseRequest()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v0 + 64) = static MessageBusActor.shared;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v2;
  *v2 = v0;
  v2[1] = closure #1 in ConversationRequestProcessor.synchronizedCloseRequest();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  swift_release();
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "ResultCandidateSelected sent. Now submitting RequestCompleted.", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }

  ConversationRequestProcessor.completeRequest(completion:)(0, 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in ConversationRequestProcessor.synchronizedCloseRequest()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v10 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(a3 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t (*)(), uint64_t))(*(_QWORD *)a2 + 1184))(v10, v9, 0, partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed(), v12);
  return swift_release();
}

uint64_t closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 120) = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v4 + 128) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, v0 + 56, &demangling cache variable for type metadata for ContextUpdating?);
  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(_QWORD *)(v0 + 120);
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), v0 + 16);
    v2 = *(_QWORD *)(*(_QWORD *)(v1
                               + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter)
                   + 16);
    *(_QWORD *)(v0 + 136) = v2;
    v5 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v2 + 136) + *(_QWORD *)(*(_QWORD *)v2 + 136));
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v3;
    *v3 = v0;
    v3[1] = closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater();
    return v5();
  }
  else
  {
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ContextUpdating?);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationRequestProcessor.makeResultCandidateState(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v0);
  v40 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UserID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (uint64_t *)((char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v37 = v16;
  v38 = v15;
  v17 = DirectActionResultCandidateMessage.directAction.getter();
  v19 = v18;
  v20 = DirectActionResultCandidateMessage.requestExecutionParameters.getter();
  *v14 = v17;
  v14[1] = v19;
  v14[2] = v20;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v39 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId, v8);
  v21 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v7, 1, 1, v21);
  v22 = type metadata accessor for ExecutionLocation();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v4, 1, 1, v22);
  v23 = type metadata accessor for ServerFallbackReason();
  v24 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v40, 1, 1, v23);
  type metadata accessor for ResultCandidateState(0);
  swift_allocObject();
  LOBYTE(v42) = 1;
  v25 = ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:)(v38, v37, (uint64_t)v14, (uint64_t)v11, 0x100000000, 0, 1, 0x100000000, (uint64_t)v7, (uint64_t)v4, v24);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v42 = v30;
    *(_DWORD *)v29 = 136315138;
    v31 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 800);
    v32 = swift_retain();
    v33 = v31(v32);
    v35 = v34;
    swift_release();
    v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v27, v28, "Created %s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v30, -1, -1);
    MEMORY[0x1B5E44758](v29, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return v25;
}

uint64_t ConversationRequestProcessor.checkPrerequisitesAndMaybeCacheCandidateMessage(forRCInput:resultCandidateId:messageToCacheIfNotInActiveTurn:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  id v67;
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void (*v81)(uint64_t *, _QWORD);
  uint64_t v82;
  id v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  os_log_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99[4];
  uint64_t v100;

  v5 = v4;
  v97 = a3;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AsrResultCandidateMessage();
  if (!swift_dynamicCastClass())
  {
    type metadata accessor for TextBasedResultCandidateMessage();
    if (!swift_dynamicCastClass())
    {
      type metadata accessor for GestureBasedResultCandidateMessage();
      if (!swift_dynamicCastClass())
      {
        type metadata accessor for DirectActionResultCandidateMessage();
        if (!swift_dynamicCastClass())
        {
          type metadata accessor for TextBasedTRPCandidateMessage();
          if (!swift_dynamicCastClass())
          {
            type metadata accessor for TRPCandidateRequestMessage();
            if (!swift_dynamicCastClass())
            {
              if (one-time initialization token for conversationBridge != -1)
                swift_once();
              v82 = type metadata accessor for Logger();
              __swift_project_value_buffer(v82, (uint64_t)static Logger.conversationBridge);
              v83 = a1;
              v84 = Logger.logObject.getter();
              v85 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v84, v85))
              {
                v86 = (uint8_t *)swift_slowAlloc();
                v87 = swift_slowAlloc();
                v99[0] = v87;
                *(_DWORD *)v86 = 136315138;
                swift_getObjectType();
                v88 = _typeName(_:qualified:)();
                v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, v99);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1B4BE6000, v84, v85, "These set of prerequisite checks are not valid for RC type: %s", v86, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1B5E44758](v87, -1, -1);
                MEMORY[0x1B5E44758](v86, -1, -1);

              }
              else
              {

              }
              return 0;
            }
          }
        }
      }
    }
  }
  v13 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 528))();
  if (!v13)
  {
    v96 = v10;
    if ((~a4 & 0xF000000000000007) != 0)
    {
      v43 = v12;
      v44 = one-time initialization token for conversationBridge;
      v45 = (id)(a4 & 0x1FFFFFFFFFFFFFFFLL);
      if (v44 != -1)
        swift_once();
      v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Logger.conversationBridge);
      v47 = a1;
      v48 = Logger.logObject.getter();
      v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = swift_slowAlloc();
        v97 = swift_slowAlloc();
        v99[0] = v97;
        *(_DWORD *)v50 = 136315394;
        v95 = v50 + 4;
        MessageBase.messageId.getter();
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v51 = dispatch thunk of CustomStringConvertible.description.getter();
        v53 = v52;
        (*(void (**)(char *, uint64_t))(v96 + 8))(v43, v9);
        v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v50 + 12) = 2080;
        swift_getObjectType();
        v54 = _typeName(_:qualified:)();
        v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v48, v49, "Message id %s of type %s received for an inactive request. Will cache it for when we get a start-turn signal.", (uint8_t *)v50, 0x16u);
        v56 = v97;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v56, -1, -1);
        MEMORY[0x1B5E44758](v50, -1, -1);

      }
      else
      {

      }
      v81 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v5 + 384))(v99);
      ConversationRequestProcessor.State.cacheCandidateMessage(_:)();
      v81(v99, 0);
      outlined consume of CandidateRequestMessage?(a4);
    }
    else
    {
      v30 = v12;
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.conversationBridge);
      v32 = a1;
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = swift_slowAlloc();
        v36 = v9;
        v37 = swift_slowAlloc();
        v99[0] = v37;
        *(_DWORD *)v35 = 136315394;
        MessageBase.messageId.getter();
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
        v38 = dispatch thunk of CustomStringConvertible.description.getter();
        v40 = v39;
        (*(void (**)(char *, uint64_t))(v96 + 8))(v30, v36);
        v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 12) = 2080;
        swift_getObjectType();
        v41 = _typeName(_:qualified:)();
        v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v33, v34, "Request already canceled. Not handling Message id %s of type %s.", (uint8_t *)v35, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v37, -1, -1);
        MEMORY[0x1B5E44758](v35, -1, -1);

      }
      else
      {

      }
    }
    return 0;
  }
  v14 = v13;
  v15 = (unint64_t *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  if (*v15 >> 62 == 1)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
    v17 = a1;
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    LODWORD(v94) = v19;
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc();
      v93 = a1;
      v21 = v20;
      v91 = swift_slowAlloc();
      v100 = v91;
      *(_DWORD *)v21 = 136315394;
      v92 = v21 + 4;
      v90 = v18;
      MessageBase.messageId.getter();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v22 = dispatch thunk of CustomStringConvertible.description.getter();
      v95 = v9;
      v24 = v23;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v95);
      v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2080;
      swift_getObjectType();
      v25 = _typeName(_:qualified:)();
      v92 = v5;
      v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v100);
      v9 = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v5 = v92;
      swift_bridgeObjectRelease();
      v27 = v90;
      _os_log_impl(&dword_1B4BE6000, v90, (os_log_type_t)v94, "RC already selected. Not handling Message id %s of type %s", (uint8_t *)v21, 0x16u);
      v28 = v91;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v28, -1, -1);
      v29 = v21;
      a1 = v93;
      MEMORY[0x1B5E44758](v29, -1, -1);

    }
    else
    {

    }
  }
  if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) & 1) != 0
    || (v57 = v12, v58 = *v15, *v15 >> 62))
  {
LABEL_32:
    swift_release();
    return 1;
  }
  v59 = a1;
  v96 = v10;
  v60 = v9;
  v61 = (void *)v15[1];
  v62 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 88);
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v58, v61);
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v58, v61);
  v63 = v97;
  v64 = swift_bridgeObjectRetain();
  if (!*(_QWORD *)(v62(v64) + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(a2, v63), (v65 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v58, v61);
    swift_bridgeObjectRelease();
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v58, v61);
    goto LABEL_32;
  }
  v95 = v14;
  swift_retain();
  swift_bridgeObjectRelease();
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v58, v61);
  swift_bridgeObjectRelease();
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v58, v61);
  swift_release();
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v66 = type metadata accessor for Logger();
  __swift_project_value_buffer(v66, (uint64_t)static Logger.conversationBridge);
  v67 = v59;
  swift_bridgeObjectRetain_n();
  v68 = v67;
  v69 = Logger.logObject.getter();
  v70 = static os_log_type_t.error.getter();
  v71 = v70;
  if (os_log_type_enabled(v69, v70))
  {
    v72 = v63;
    v73 = swift_slowAlloc();
    v94 = swift_slowAlloc();
    v100 = v94;
    *(_DWORD *)v73 = 136315650;
    swift_bridgeObjectRetain();
    v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v72, &v100);
    LODWORD(v93) = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v73 + 12) = 2080;
    MessageBase.messageId.getter();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v74 = dispatch thunk of CustomStringConvertible.description.getter();
    v76 = v75;
    (*(void (**)(char *, uint64_t))(v96 + 8))(v57, v60);
    v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v76, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v73 + 22) = 2080;
    swift_getObjectType();
    v77 = _typeName(_:qualified:)();
    v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, &v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v69, (os_log_type_t)v93, "Receive multiple RC inputs for the same RC ID: %s, not handling Message id %s of type %s", (uint8_t *)v73, 0x20u);
    v79 = v94;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v79, -1, -1);
    MEMORY[0x1B5E44758](v73, -1, -1);
    swift_release();

  }
  else
  {

    swift_release();
    swift_bridgeObjectRelease_n();
  }
  return 0;
}

uint64_t ConversationRequestProcessor.makeResultCandidateStateWithCachedUserIdentification(from:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  id v20;
  uint64_t (*v21)(void);
  uint64_t result;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  char v55;
  char v56;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v10);
  v54 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1E0C80A78](v51);
  v52 = (char **)((char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for UserID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v53 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v48 - v17;
  type metadata accessor for TRPContext();
  swift_allocObject();
  v19 = TRPContext.init(requestMessage:)(a1);
  if (!v19)
    return 0;
  v20 = v19;
  v48 = v9;
  v49 = v6;
  v21 = *(uint64_t (**)(void))(*(_QWORD *)v2 + 464);
  v50 = v2;
  result = v21();
  if (!v23)
    goto LABEL_10;
  v25 = result;
  v26 = v23;
  v27 = v24;
  swift_bridgeObjectRetain();
  outlined consume of ConversationRequestProcessor.UserIdentification?(v25, v26, v27);
  TRPCandidateRequestMessageBase.userId.getter();
  if (!*(_QWORD *)(v26 + 16) || (v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18), (v29 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
LABEL_10:
    v30 = 0;
    goto LABEL_11;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v28);
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  if (v30 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (v30 > 0x7FFFFFFF)
    {
      __break(1u);
      return 0;
    }
LABEL_11:
    v32 = ((uint64_t (*)(uint64_t))v21)(result);
    v35 = v33;
    v50 = v30;
    if (v33)
    {
      v36 = v32;
      outlined consume of ConversationRequestProcessor.UserIdentification?(v32, v33, v34);
    }
    else
    {
      v36 = 0;
    }
    LODWORD(v51) = v35 == 0;
    v37 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
    v39 = v38;
    v40 = (uint64_t)v52;
    *v52 = v20;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    v41 = (uint64_t)v53;
    TRPCandidateRequestMessageBase.userId.getter();
    v42 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v43 = (uint64_t)v54;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v54, 1, 1, v42);
    v44 = (uint64_t)v48;
    static ExecutionLocation.device.getter();
    v45 = type metadata accessor for ExecutionLocation();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 0, 1, v45);
    v46 = type metadata accessor for ServerFallbackReason();
    v47 = (uint64_t)v49;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v49, 1, 1, v46);
    type metadata accessor for ResultCandidateState(0);
    swift_allocObject();
    v56 = 0;
    v55 = 1;
    v31 = ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:)(v37, v39, v40, v41, v50, v36, v51, 0x100000000, v43, v44, v47);
    swift_release();
    return v31;
  }
  __break(1u);
  return result;
}

uint64_t ConversationRequestProcessor.buildUserSpecificInfo(rcState:speechPackage:)()
{
  return 0;
}

void ConversationRequestProcessor.completeRequest(completion:)(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  void (*v33)(id, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char *, void (*)(void *, void *), uint64_t);
  id v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  id v38;
  NSObject *v39;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(**(_QWORD **)(v2
                                                + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent)
                                  + 416))(v11);
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isAssistantEngineEnabled) != 1)
  {
    v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D883A0]), sel_init);
    v39 = a2;
    v20 = a1;
    v21 = v19;
    UUID.init()();
    v22 = UUID.uuidString.getter();
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v25 = (void *)MEMORY[0x1B5E432E8](v22, v24);
    swift_bridgeObjectRelease();
    objc_msgSend(v21, sel_setAceId_, v25);

    v27 = *(_QWORD *)(v3 + 64);
    v26 = *(_QWORD *)(v3 + 72);
    v28 = v21;
    v29 = (void *)MEMORY[0x1B5E432E8](v27, v26);
    objc_msgSend(v28, sel_setRefId_, v29);

    v30 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    v31 = swift_allocObject();
    v32 = v39;
    *(_QWORD *)(v31 + 16) = v20;
    *(_QWORD *)(v31 + 24) = v32;
    v33 = *(void (**)(id, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char *, void (*)(void *, void *), uint64_t))(*(_QWORD *)v30 + 296);
    v34 = v28;
    outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(v20);
    v33(v28, v27, v26, 0, 0, 0, 0, 0, v8, partial apply for closure #2 in ConversationRequestProcessor.completeRequest(completion:), v31);

    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    return;
  }
  v14 = objc_allocWithZone((Class)type metadata accessor for FlowCompletedMessage());
  v15 = (void *)FlowCompletedMessage.init(build:)();
  if (!v15)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.conversationBridge);
    v39 = Logger.logObject.getter();
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_1B4BE6000, v39, v36, "Error building FlowCompletedMessage", v37, 2u);
      MEMORY[0x1B5E44758](v37, -1, -1);
    }
    goto LABEL_12;
  }
  v38 = v15;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 48));
  dispatch thunk of MessagePublishing.postMessage(_:)();
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
  v39 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1B4BE6000, v39, v17, "Posted FlowCompletedMessage to message bus", v18, 2u);
    MEMORY[0x1B5E44758](v18, -1, -1);

LABEL_12:
    return;
  }

}

uint64_t closure #1 in ConversationRequestProcessor.completeRequest(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *MEMORY[0x1E0D9E668];
  v10 = type metadata accessor for MessageSource();
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  FlowCompletedMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  FlowCompletedMessage.Builder.assistantId.setter();
  v12 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v5, v12, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v5, 0, 1, v13);
  FlowCompletedMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  return FlowCompletedMessage.Builder.requestId.setter();
}

void closure #2 in ConversationRequestProcessor.completeRequest(completion:)(void *a1, void *a2, void (*a3)(void *, void *))
{
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  v7 = a2;
  v8 = a1;
  v9 = a2;
  v10 = v8;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v11, v12))
  {

    if (!a3)
      return;
    goto LABEL_7;
  }
  v13 = swift_slowAlloc();
  v14 = swift_slowAlloc();
  v19 = v14;
  *(_DWORD *)v13 = 136315394;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
  v15 = Optional.debugDescription.getter();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v19);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  *(_WORD *)(v13 + 12) = 2080;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  v17 = Optional.debugDescription.getter();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v19);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B4BE6000, v11, v12, "Submitted RequestCompleted with error: %s and command: %s", (uint8_t *)v13, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v14, -1, -1);
  MEMORY[0x1B5E44758](v13, -1, -1);

  if (a3)
LABEL_7:
    a3(a1, a2);
}

void closure #1 in ConversationRequestProcessor.revealAsrTranscription(for:turn:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "UIRevealRecognizedSpeech handled", v2, 2u);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

}

void ConversationRequestProcessor.postExecutionFinalizedMessage(requestId:selectedTrpId:selectedTcuId:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  Swift::String *v6;
  Swift::String *v7;
  id v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;

  v7 = v6;
  v12 = objc_allocWithZone((Class)type metadata accessor for ExecutionFinalizedMessage());
  v13 = ExecutionFinalizedMessage.init(build:)();
  if (v13)
  {
    v14 = v13;
    if (one-time initialization token for insightRequestSummaryLogger != -1)
      swift_once();
    v15 = type metadata accessor for InsightRequestSummaryLogger();
    v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.insightRequestSummaryLogger);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized InsightRequestSummaryLogger.emitDebug(_:)(v16, v7, a3, a4, a5, a6);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1B4BE6000, v18, v19, "Posting ExecutionFinalizedMessage to message bus", v20, 2u);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }

    __swift_project_boxed_opaque_existential_1(&v7[1]._object, v7[3]._countAndFlagsBits);
    dispatch thunk of MessagePublishing.postMessage(_:)();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
    v14 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_1B4BE6000, v14, v22, "Error building ExecutionFinalizedMessage", v23, 2u);
      MEMORY[0x1B5E44758](v23, -1, -1);
    }
  }

}

uint64_t closure #1 in ConversationRequestProcessor.postExecutionFinalizedMessage(requestId:selectedTrpId:selectedTcuId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];

  v21[1] = a7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  ExecutionFinalizedMessage.Builder.requestId.setter();
  v14 = a4 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  ExecutionFinalizedMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  ExecutionFinalizedMessage.Builder.assistantId.setter();
  ExecutionFinalizedMessage.Builder.flowPluginId.setter();
  v17 = *MEMORY[0x1E0D9E668];
  v18 = type metadata accessor for MessageSource();
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v10, v17, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v10, 0, 1, v18);
  ExecutionFinalizedMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  ExecutionFinalizedMessage.Builder.tcuId.setter();
  swift_bridgeObjectRetain();
  return ExecutionFinalizedMessage.Builder.trpCandidateId.setter();
}

Swift::Void __swiftcall ConversationRequestProcessor.actionCandidatesGenerated(_:rcId:)(Swift::OpaquePointer _, Swift::String rcId)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;

  v3 = objc_allocWithZone((Class)type metadata accessor for SiriXActionCandidatesGeneratedMessage());
  v4 = SiriXActionCandidatesGeneratedMessage.init(build:)();
  if (v4)
  {
    v5 = v4;
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 48));
    dispatch thunk of MessagePublishing.postMessage(_:)();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    v5 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1B4BE6000, v5, v7, "Could not generate SiriXActionCandidatesGeneratedMessage. Missing fields?", v8, 2u);
      MEMORY[0x1B5E44758](v8, -1, -1);
    }
  }

}

uint64_t closure #1 in ConversationRequestProcessor.actionCandidatesGenerated(_:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD v63[3];
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;

  v63[1] = a4;
  v63[2] = a5;
  v64 = a3;
  v7 = type metadata accessor for CamParse();
  MEMORY[0x1E0C80A78](v7);
  v77 = (char *)v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriXParse?);
  MEMORY[0x1E0C80A78](v9);
  v76 = (uint64_t)v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SiriXParse();
  v74 = *(_QWORD *)(v11 - 8);
  v75 = v11;
  MEMORY[0x1E0C80A78](v11);
  v67 = (char *)v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriXActionCandidate?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v72 = (uint64_t)v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v63 - v16;
  v68 = type metadata accessor for SiriXActionCandidate();
  v18 = *(_QWORD *)(v68 - 8);
  v19 = MEMORY[0x1E0C80A78](v68);
  v73 = (char *)v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v66 = (char *)v63 - v21;
  v79 = type metadata accessor for ActionCandidate();
  v22 = *(_QWORD *)(v79 - 8);
  v23 = MEMORY[0x1E0C80A78](v79);
  v80 = (char *)v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v81 = (char *)v63 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)v63 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  SiriXActionCandidatesGeneratedMessage.Builder.requestId.setter();
  v32 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  v33 = type metadata accessor for UUID();
  v34 = *(_QWORD *)(v33 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v31, v32, v33);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  SiriXActionCandidatesGeneratedMessage.Builder.sessionId.setter();
  v35 = *MEMORY[0x1E0D9E668];
  v36 = type metadata accessor for MessageSource();
  v37 = *(_QWORD *)(v36 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 104))(v28, v35, v36);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v28, 0, 1, v36);
  SiriXActionCandidatesGeneratedMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  v63[0] = a1;
  SiriXActionCandidatesGeneratedMessage.Builder.assistantId.setter();
  v38 = *(_QWORD *)(v64 + 16);
  if (v38)
  {
    v39 = (char *)(v64 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)));
    v70 = *(_QWORD *)(v22 + 72);
    v71 = v22;
    v69 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    swift_bridgeObjectRetain();
    v78 = MEMORY[0x1E0DEE9D8];
    v40 = v68;
    v41 = v79;
    v42 = v80;
    v65 = v17;
    do
    {
      v43 = v81;
      v44 = v69;
      v69(v81, v39, v41);
      v44(v42, v43, v41);
      v45 = v77;
      ActionCandidate.parse.getter();
      v46 = v76;
      SiriXParse.init(fromCamParse:)(v45, v76);
      v47 = v74;
      v48 = v75;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v46, 1, v75) == 1)
      {
        v49 = *(void (**)(char *, uint64_t))(v71 + 8);
        v49(v42, v41);
        outlined destroy of ReferenceResolutionClientProtocol?(v46, &demangling cache variable for type metadata for SiriXParse?);
        v50 = 1;
      }
      else
      {
        v51 = v67;
        v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 32))(v67, v46, v48);
        v53 = v72;
        v54 = v47;
        MEMORY[0x1E0C80A78](v52);
        v63[-2] = v42;
        v63[-1] = v51;
        SiriXActionCandidate.init(build:)();
        v49 = *(void (**)(char *, uint64_t))(v71 + 8);
        v49(v42, v41);
        v55 = v51;
        v40 = v68;
        (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v48);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v53, 1, v40))
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v72, &demangling cache variable for type metadata for SiriXActionCandidate?);
          v50 = 1;
          v17 = v65;
        }
        else
        {
          v17 = v65;
          (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v65, v72, v40);
          v50 = 0;
        }
        v41 = v79;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, v50, 1, v40);
      v49(v81, v41);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v40) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, &demangling cache variable for type metadata for SiriXActionCandidate?);
      }
      else
      {
        v56 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
        v57 = v66;
        v56(v66, v17, v40);
        v56(v73, v57, v40);
        v58 = v78;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v58 + 16) + 1, 1, v58);
        v60 = *(_QWORD *)(v58 + 16);
        v59 = *(_QWORD *)(v58 + 24);
        if (v60 >= v59 >> 1)
          v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1, v58);
        *(_QWORD *)(v58 + 16) = v60 + 1;
        v61 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
        v78 = v58;
        v56((char *)(v58 + v61 + *(_QWORD *)(v18 + 72) * v60), v73, v40);
        v41 = v79;
      }
      v39 += v70;
      --v38;
      v42 = v80;
    }
    while (v38);
    swift_bridgeObjectRelease();
  }
  SiriXActionCandidatesGeneratedMessage.Builder.actionCandidates.setter();
  swift_bridgeObjectRetain();
  return SiriXActionCandidatesGeneratedMessage.Builder.rcId.setter();
}

void closure #1 in ConversationRequestProcessor.makeAndSendSpeechRecognizedCommand(rcState:turn:reply:)(uint64_t a1, void *a2, void (*a3)(uint64_t, void *))
{
  uint64_t v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;

  if (a2)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
    v7 = a2;
    v8 = a2;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v20 = a1;
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v21 = v12;
      *(_DWORD *)v11 = 136315138;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
      v13 = Optional.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v9, v10, "Sent SpeechRecognized command with error: %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v12, -1, -1);
      v15 = v11;
      a1 = v20;
      MEMORY[0x1B5E44758](v15, -1, -1);

      if (!a3)
        return;
    }
    else
    {

      if (!a3)
        return;
    }
    goto LABEL_12;
  }
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1B4BE6000, v17, v18, "Sent SpeechRecognized command successfully", v19, 2u);
    MEMORY[0x1B5E44758](v19, -1, -1);
  }

  if (a3)
LABEL_12:
    a3(a1, a2);
}

uint64_t ConversationRequestProcessor.waitForSalientEntityCollection(timeout:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for TimeoutError();
  v2[8] = v3;
  v2[9] = *(_QWORD *)(v3 - 8);
  v2[10] = swift_task_alloc();
  v4 = type metadata accessor for OSSignpostID();
  v2[11] = v4;
  v2[12] = *(_QWORD *)(v4 - 8);
  v2[13] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v2[14] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t ConversationRequestProcessor.waitForSalientEntityCollection(timeout:)()
{
  uint64_t v0;
  id v1;
  _QWORD *v2;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  DispatchTimeInterval.seconds.getter();
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  *v2 = v0;
  v2[1] = ConversationRequestProcessor.waitForSalientEntityCollection(timeout:);
  return withTimeout<A>(seconds:operation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release();
  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void *v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(void **)(v0 + 128);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 40) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) != 0)
  {

    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "Timed out waiting for RRaaS entity collection", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 64);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {

    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(void **)(v0 + 128);
    if (v13)
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v11, v12, "Unknown error waiting for RRaaS entity collection", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

  }
  v17 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 104);
  v18 = *(_QWORD *)(v0 + 88);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ConversationRequestProcessor.waitForSalientEntityCollection(timeout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in ConversationRequestProcessor.waitForSalientEntityCollection(timeout:)()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 56) = *(_QWORD *)(*(_QWORD *)(v0 + 48)
                                   + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rraasCollectionTask);
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 56))
  {
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v1;
    *v1 = v0;
    v1[1] = closure #1 in ConversationRequestProcessor.waitForSalientEntityCollection(timeout:);
    return Task<>.value.getter();
  }
  else
  {
    **(_BYTE **)(v0 + 40) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  **(_BYTE **)(v0 + 40) = *(_QWORD *)(v0 + 56) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in ConversationRequestProcessor.donateUtteranceRREntity(rrEntity:)(void *a1, char a2)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *oslog;
  uint64_t v16;

  if ((a2 & 1) != 0)
  {
    v6 = a1;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    v8 = a1;
    v9 = a1;
    oslog = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v16 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_getErrorValue();
      v13 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<(), Error>(a1, 1);
      outlined consume of Result<(), Error>(a1, 1);
      _os_log_impl(&dword_1B4BE6000, oslog, v10, "#donateUtteranceForReferenceResolution: utterance Entity donation to SRR was unsuccessful as %s.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v12, -1, -1);
      MEMORY[0x1B5E44758](v11, -1, -1);

      outlined consume of Result<(), Error>(a1, 1);
      return;
    }
    outlined consume of Result<(), Error>(a1, 1);
    outlined consume of Result<(), Error>(a1, 1);

  }
  else
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
    oslog = Logger.logObject.getter();
    v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1B4BE6000, oslog, v3, "#donateUtteranceForReferenceResolution: utterance Entity donation to SRR was successful", v4, 2u);
      MEMORY[0x1B5E44758](v4, -1, -1);
    }
  }

}

uint64_t ConversationRequestProcessor.State.description.getter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4D69CDC + 4 * byte_1B4EE7A70[a3]))(0xD00000000000001DLL, 0x80000001B4EFA0B0);
}

unint64_t sub_1B4D69CDC()
{
  return 0xD000000000000011;
}

uint64_t sub_1B4D69CF8()
{
  return 0x617473206E727574;
}

uint64_t sub_1B4D69D18@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  if (v1 | a1)
    return 0x6574656C706D6F63;
  else
    return 1701602409;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConversationRequestProcessor.State()
{
  uint64_t v0;

  return ConversationRequestProcessor.State.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t ConversationRequestProcessor.UserIdentification.userIdentificationScores.getter()
{
  return swift_bridgeObjectRetain();
}

void *ConversationRequestProcessor.UserIdentification.voiceIDScoreCard.getter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  return a3;
}

void ConversationRequestProcessor.__allocating_init(_:_:_:_:_:_:_:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ConversationRequestProcessor.init(_:_:_:_:_:_:_:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t ConversationRequestProcessor.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  outlined consume of ConversationRequestProcessor.State(*(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state), *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state + 8), *(_BYTE *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state + 16));
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionState);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId;
  v2 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_correctionsPlatformClient);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, &demangling cache variable for type metadata for ContextUpdating?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextDonator);
  swift_release();
  outlined consume of ConversationRequestProcessor.UserIdentification?(*(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userIdentification), *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userIdentification + 8), *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userIdentification + 16));
  return swift_bridgeObjectRelease();
}

uint64_t ConversationRequestProcessor.__deallocating_deinit()
{
  ConversationRequestProcessor.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ConversationRequestProcessing.handleASRResultCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 664))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleMUXASRResultCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 672))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleMultiUserTRPCandidateRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 680))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleUserIdentificationMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 840))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleNLResultCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 712))();
}

uint64_t protocol witness for ConversationRequestProcessing.handlePommesResultCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 744))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleResultSelectedMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 856))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleCancelRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 880))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleRequestContextMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 640))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleStartTextRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 568))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleStartDirectActionRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 576))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleStartLocalRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 600))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleStartUnderstandingOnServerRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 584))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleStartUnderstandingOnServerTextRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 592))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleTextBasedResultCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 688))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleGestureBasedResultCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 696))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleDirectActionResultCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 704))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleNLRepetitionMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 720))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleStartCorrectedSpeechRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 608))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleStartSpeechRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 544))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleRuntimeError(error:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1048))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleAceRemoteExecutionContextUpdate(_:executionContext:reply:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 888))();
}

uint64_t protocol witness for ConversationRequestProcessing.handlePommesTRPCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 832))();
}

void specialized ConversationRequestProcessor.handleStartRequestInternal(_:turnState:isTapToEdit:)(void *a1, uint64_t a2, int a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(_BYTE *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char v38;
  uint64_t v39;
  uint64_t started;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  id v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  void (*v51)(_BYTE *, _QWORD, uint64_t);
  char v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  void (*v64)(_BYTE *, uint64_t);
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char *v80;
  objc_class *v81;
  _BYTE *v82;
  uint64_t *v83;
  _QWORD *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  NSObject *v91;
  _QWORD *v92;
  uint8_t *v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  char v97;
  NSObject *v98;
  os_log_type_t v99;
  BOOL v100;
  void *v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  _BYTE v107[4];
  int v108;
  uint64_t v109;
  _BYTE *v110;
  void (*v111)(_BYTE *, uint64_t, uint64_t);
  id v112;
  _BYTE *v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE *v117;
  _QWORD *v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  objc_super v123;
  NSObject *v124;
  uint64_t v125;
  NSObject *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130[3];
  uint64_t v131;
  uint64_t v132;

  v108 = a3;
  v121 = type metadata accessor for RequestType();
  v119 = *(uint8_t **)(v121 - 8);
  v7 = MEMORY[0x1E0C80A78](v121);
  v9 = &v107[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = &v107[-v11];
  v13 = MEMORY[0x1E0C80A78](v10);
  v113 = &v107[-v14];
  v15 = MEMORY[0x1E0C80A78](v13);
  v110 = &v107[-v16];
  v17 = MEMORY[0x1E0C80A78](v15);
  v118 = &v107[-v18];
  MEMORY[0x1E0C80A78](v17);
  v117 = &v107[-v19];
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
  v22 = a1;
  v120 = v21;
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  v25 = os_log_type_enabled(v23, v24);
  v122 = v22;
  v115 = v9;
  v114 = v12;
  if (v25)
  {
    v26 = swift_slowAlloc();
    v27 = (_QWORD *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    v130[0] = v28;
    *(_DWORD *)v26 = 138412546;
    v109 = a2;
    *(_QWORD *)&v128 = v122;
    v29 = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v27 = v122;

    *(_WORD *)(v26 + 12) = 2080;
    v30 = RequestMessageBase.requestId.getter();
    *(_QWORD *)&v128 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v130);
    a2 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v23, v24, "ConversationBridge handling message: %@, requestId: %s", (uint8_t *)v26, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v27, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v28, -1, -1);
    MEMORY[0x1B5E44758](v26, -1, -1);

  }
  else
  {

  }
  v32 = *(_QWORD *)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent);
  (*(void (**)(void))(*(_QWORD *)v32 + 376))();
  v33 = (void (*)(_BYTE *, uint64_t, uint64_t))a4[8];
  v34 = a4[9];
  v35 = (*(uint64_t (**)(void (*)(_BYTE *, uint64_t, uint64_t), uint64_t))(*(_QWORD *)v32 + 384))(v33, v34);
  v36 = (*(uint64_t (**)(uint64_t))(*a4 + 368))(v35);
  v39 = v36;
  if (v38)
  {
    outlined consume of ConversationRequestProcessor.State(v36, v37, v38);
    v39 = MEMORY[0x1E0DEE9D8];
  }
  v111 = v33;
  started = StartRequestMessageBase.optionalRequestContextData.getter();
  v116 = v39;
  if (started)
  {
    v41 = (void *)started;
    v42 = a4[12];
    v43 = a4[13];
    swift_bridgeObjectRetain();
    v44 = ConversationRequestProcessor.didPreviouslyFallbackToServer(forUserId:)();
    v45 = *(_QWORD *)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_muxContextMessage);
    if (v45)
      LOBYTE(v45) = MUXContextMessage.isRMVEnabled.getter();
    v46 = specialized RequestContextData.__allocating_init(startRequest:assistantId:didPreviouslyFallbackToServer:isRecognizeMyVoiceEnabled:)(v122, v42, v43, v44 & 1, v45 & 1);

  }
  else
  {
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*a4 + 376);
    swift_retain();
    swift_bridgeObjectRetain();
    v47(a2, v39, 1);
    v46 = 0;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, (uint64_t)&v128, &demangling cache variable for type metadata for ContextUpdating?);
  if (v129)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v128, (uint64_t)v130);
    v48 = a2 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    v49 = v119;
    v50 = v121;
    v111 = (void (*)(_BYTE *, uint64_t, uint64_t))*((_QWORD *)v119 + 2);
    v111(v117, v48, v121);
    v51 = (void (*)(_BYTE *, _QWORD, uint64_t))*((_QWORD *)v49 + 13);
    v51(v118, *MEMORY[0x1E0D9E880], v50);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D8]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v112 = v46;
    if (v126 == v124 && v127 == v125)
      v52 = 1;
    else
      v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v64 = (void (*)(_BYTE *, uint64_t))*((_QWORD *)v119 + 1);
    v65 = v121;
    v64(v118, v121);
    v64(v117, v65);
    if ((v52 & 1) == 0)
    {
      v66 = v110;
      v67 = v121;
      v111(v110, v48, v121);
      v51(v113, *MEMORY[0x1E0D9E8A8], v67);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v126 == v124 && v127 == v125)
      {
        swift_bridgeObjectRelease_n();
        v68 = v121;
        v64(v113, v121);
        v64(v66, v68);
      }
      else
      {
        v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v70 = v121;
        v64(v113, v121);
        v64(v66, v70);
        if ((v69 & 1) == 0)
        {
          v109 = a2;
          v74 = RequestMessageBase.requestId.getter();
          v76 = v75;
          v78 = a4[10];
          v77 = a4[11];
          v79 = *((_BYTE *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled);
          v80 = (char *)a4;
          v81 = (objc_class *)type metadata accessor for StartExecutionTurn();
          v82 = objc_allocWithZone(v81);
          v83 = (uint64_t *)&v82[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId];
          *v83 = v74;
          v83[1] = v76;
          v84 = &v82[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId];
          *v84 = v78;
          v84[1] = v77;
          v82[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit] = v108 & 1;
          v82[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled] = v79;
          v123.receiver = v82;
          v123.super_class = v81;
          swift_bridgeObjectRetain();
          v85 = objc_msgSendSuper2(&v123, sel_init);
          v86 = *(_QWORD *)&v80[OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient + 24];
          v87 = *(_QWORD *)&v80[OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient + 32];
          __swift_project_boxed_opaque_existential_1(&v80[OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient], v86);
          v122 = v80;
          (*(void (**)(id, _QWORD, _UNKNOWN **, uint64_t, uint64_t))(v87 + 8))(v85, *(_QWORD *)&v80[OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate], &protocol witness table for ConversationBridgeProcessorDelegate, v86, v87);
          v71 = v85;
          v88 = Logger.logObject.getter();
          v89 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v88, v89))
          {
            v90 = (uint8_t *)swift_slowAlloc();
            v118 = (_QWORD *)swift_slowAlloc();
            v119 = v90;
            *(_DWORD *)v90 = 138412290;
            v126 = v71;
            v91 = v71;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v92 = v118;
            *v118 = v71;

            v93 = v119;
            _os_log_impl(&dword_1B4BE6000, v88, v89, "Successfully sent: %@", v119, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v92, -1, -1);
            MEMORY[0x1B5E44758](v93, -1, -1);

            v71 = v88;
          }
          else
          {

          }
          a2 = v109;
          goto LABEL_33;
        }
      }
    }
    v71 = Logger.logObject.getter();
    v72 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v73 = 0;
      _os_log_impl(&dword_1B4BE6000, v71, v72, "Not sending StartExecutionTurn for Understanding-on-server use case", v73, 2u);
      MEMORY[0x1B5E44758](v73, -1, -1);
    }
LABEL_33:
    v94 = v115;
    v95 = v114;

    v96 = v121;
    v111(v95, v48, v121);
    v51(v94, *MEMORY[0x1E0D9E890], v96);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D0]);
    v97 = dispatch thunk of static Equatable.== infix(_:_:)();
    v64(v94, v96);
    v64(v95, v96);
    if ((v97 & 1) != 0)
    {
      v98 = Logger.logObject.getter();
      v99 = static os_log_type_t.debug.getter();
      v100 = os_log_type_enabled(v98, v99);
      v101 = v112;
      v102 = v116;
      if (v100)
      {
        v103 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v103 = 0;
        _os_log_impl(&dword_1B4BE6000, v98, v99, "Not updating server context for StartLocalRequest", v103, 2u);
        MEMORY[0x1B5E44758](v103, -1, -1);
      }

      if (!v101)
        goto LABEL_40;
    }
    else
    {
      v104 = v131;
      v105 = v132;
      __swift_project_boxed_opaque_existential_1(v130, v131);
      (*(void (**)(uint64_t, uint64_t))(v105 + 24))(v104, v105);
      v101 = v112;
      v102 = v116;
      if (!v112)
      {
LABEL_40:
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v130);
        return;
      }
    }
    v106 = v101;
    ConversationRequestProcessor.sendRequestContextData(_:turn:candidateRequestMessages:)(v106, a2, v102);

    goto LABEL_40;
  }
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v128, &demangling cache variable for type metadata for ContextUpdating?);
  v53 = v122;
  v54 = Logger.logObject.getter();
  v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = swift_slowAlloc();
    v122 = a4;
    v57 = (uint8_t *)v56;
    v58 = swift_slowAlloc();
    v112 = v46;
    v59 = v58;
    v130[0] = v58;
    *(_DWORD *)v57 = 136315138;
    v60 = RequestMessageBase.requestId.getter();
    *(_QWORD *)&v128 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v54, v55, "Cannot handle request as contextUpdater is nil. requestId: %s", v57, 0xCu);
    swift_arrayDestroy();
    v62 = v59;
    v46 = v112;
    MEMORY[0x1B5E44758](v62, -1, -1);
    v63 = v57;
    a4 = v122;
    MEMORY[0x1B5E44758](v63, -1, -1);

  }
  else
  {

  }
  (*(void (**)(unint64_t, unint64_t, _QWORD, _QWORD, void (*)(_BYTE *, uint64_t, uint64_t), uint64_t, _QWORD, _QWORD))(**(_QWORD **)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil) + 152))(0xD000000000000024, 0x80000001B4EFA440, a4[10], a4[11], v111, v34, 0, 0);

}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  void *started;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  void (*v50)(_BYTE *, _QWORD, uint64_t);
  char v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint8_t *v60;
  void (*v61)(_BYTE *, uint64_t);
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  _QWORD *v77;
  objc_class *v78;
  _BYTE *v79;
  uint64_t *v80;
  _QWORD *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  NSObject *v88;
  _QWORD *v89;
  uint8_t *v90;
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  char v94;
  NSObject *v95;
  os_log_type_t v96;
  BOOL v97;
  void *v98;
  uint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  _BYTE v104[4];
  int v105;
  _BYTE *v106;
  void (*v107)(_BYTE *, uint64_t, uint64_t);
  id v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  _QWORD *v117;
  uint8_t *v118;
  uint64_t v119;
  objc_super v120;
  NSObject *v121;
  uint64_t v122;
  NSObject *v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127[3];
  uint64_t v128;
  uint64_t v129;

  v105 = a3;
  v114 = a2;
  v6 = type metadata accessor for RequestType();
  v118 = *(uint8_t **)(v6 - 8);
  v119 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = &v104[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = &v104[-v11];
  v13 = MEMORY[0x1E0C80A78](v10);
  v109 = &v104[-v14];
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = &v104[-v16];
  v18 = MEMORY[0x1E0C80A78](v15);
  v117 = &v104[-v19];
  MEMORY[0x1E0C80A78](v18);
  v116 = &v104[-v20];
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
  v23 = a1;
  v115 = v22;
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  v26 = os_log_type_enabled(v24, v25);
  v112 = a4;
  v111 = v9;
  v110 = v12;
  v106 = v17;
  if (v26)
  {
    v27 = swift_slowAlloc();
    v28 = (_QWORD *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    v127[0] = v29;
    *(_DWORD *)v27 = 138412546;
    *(_QWORD *)&v125 = v23;
    v30 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v28 = v23;

    *(_WORD *)(v27 + 12) = 2080;
    v31 = RequestMessageBase.requestId.getter();
    *(_QWORD *)&v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v127);
    a4 = v112;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v24, v25, "ConversationBridge handling message: %@, requestId: %s", (uint8_t *)v27, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v28, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v29, -1, -1);
    MEMORY[0x1B5E44758](v27, -1, -1);

  }
  else
  {

  }
  v33 = *(_QWORD *)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent);
  (*(void (**)(void))(*(_QWORD *)v33 + 376))();
  v34 = a4[8];
  v35 = a4[9];
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 384))(v34, v35);
  v37 = (*(uint64_t (**)(uint64_t))(*a4 + 368))(v36);
  if (v39)
  {
    outlined consume of ConversationRequestProcessor.State(v37, v38, v39);
    v113 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v113 = v37;
  }
  started = (void *)StartIFRequestMessage.requestContextData.getter();
  v41 = a4[12];
  v42 = a4[13];
  swift_bridgeObjectRetain();
  v43 = ConversationRequestProcessor.didPreviouslyFallbackToServer(forUserId:)();
  v44 = *(_QWORD *)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_muxContextMessage);
  if (v44)
    LOBYTE(v44) = MUXContextMessage.isRMVEnabled.getter();
  v45 = v23;
  v46 = specialized RequestContextData.__allocating_init(startRequest:assistantId:didPreviouslyFallbackToServer:isRecognizeMyVoiceEnabled:)(v45, v41, v42, v43 & 1, v44 & 1);

  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, (uint64_t)&v125, &demangling cache variable for type metadata for ContextUpdating?);
  if (v126)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v125, (uint64_t)v127);
    v47 = v114 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    v49 = v118;
    v48 = v119;
    v107 = (void (*)(_BYTE *, uint64_t, uint64_t))*((_QWORD *)v118 + 2);
    v107(v116, v47, v119);
    v50 = (void (*)(_BYTE *, _QWORD, uint64_t))*((_QWORD *)v49 + 13);
    v50(v117, *MEMORY[0x1E0D9E880], v48);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D8]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v108 = v46;
    if (v123 == v121 && v124 == v122)
      v51 = 1;
    else
      v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v61 = (void (*)(_BYTE *, uint64_t))*((_QWORD *)v118 + 1);
    v62 = v119;
    v61(v117, v119);
    v61(v116, v62);
    if ((v51 & 1) == 0)
    {
      v63 = v106;
      v64 = v119;
      v107(v106, v47, v119);
      v50(v109, *MEMORY[0x1E0D9E8A8], v64);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v123 == v121 && v124 == v122)
      {
        swift_bridgeObjectRelease_n();
        v65 = v119;
        v61(v109, v119);
        v61(v63, v65);
      }
      else
      {
        v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v67 = v119;
        v61(v109, v119);
        v61(v63, v67);
        if ((v66 & 1) == 0)
        {
          v71 = RequestMessageBase.requestId.getter();
          v73 = v72;
          v75 = a4[10];
          v74 = a4[11];
          v76 = *((_BYTE *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled);
          v77 = a4;
          v78 = (objc_class *)type metadata accessor for StartExecutionTurn();
          v79 = objc_allocWithZone(v78);
          v80 = (uint64_t *)&v79[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId];
          *v80 = v71;
          v80[1] = v73;
          v81 = &v79[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId];
          *v81 = v75;
          v81[1] = v74;
          v79[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit] = v105 & 1;
          v79[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled] = v76;
          v120.receiver = v79;
          v120.super_class = v78;
          swift_bridgeObjectRetain();
          v82 = objc_msgSendSuper2(&v120, sel_init);
          v83 = *(_QWORD *)((char *)v77
                          + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient
                          + 24);
          v84 = *(_QWORD *)((char *)v77
                          + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient
                          + 32);
          __swift_project_boxed_opaque_existential_1((_QWORD *)((char *)v77 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient), v83);
          (*(void (**)(id, _QWORD, _UNKNOWN **, uint64_t, uint64_t))(v84 + 8))(v82, *(_QWORD *)((char *)v77+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate), &protocol witness table for ConversationBridgeProcessorDelegate, v83, v84);
          v68 = v82;
          v85 = Logger.logObject.getter();
          v86 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v85, v86))
          {
            v87 = (uint8_t *)swift_slowAlloc();
            v117 = (_QWORD *)swift_slowAlloc();
            v118 = v87;
            *(_DWORD *)v87 = 138412290;
            v123 = v68;
            v88 = v68;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v89 = v117;
            *v117 = v68;

            v90 = v118;
            _os_log_impl(&dword_1B4BE6000, v85, v86, "Successfully sent: %@", v118, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v89, -1, -1);
            MEMORY[0x1B5E44758](v90, -1, -1);

            v68 = v85;
          }
          else
          {

          }
          goto LABEL_30;
        }
      }
    }
    v68 = Logger.logObject.getter();
    v69 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v70 = 0;
      _os_log_impl(&dword_1B4BE6000, v68, v69, "Not sending StartExecutionTurn for Understanding-on-server use case", v70, 2u);
      MEMORY[0x1B5E44758](v70, -1, -1);
    }
LABEL_30:
    v91 = v111;
    v92 = v110;

    v93 = v119;
    v107(v92, v47, v119);
    v50(v91, *MEMORY[0x1E0D9E890], v93);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D0]);
    v94 = dispatch thunk of static Equatable.== infix(_:_:)();
    v61(v91, v93);
    v61(v92, v93);
    if ((v94 & 1) != 0)
    {
      v95 = Logger.logObject.getter();
      v96 = static os_log_type_t.debug.getter();
      v97 = os_log_type_enabled(v95, v96);
      v98 = v108;
      v99 = v113;
      if (v97)
      {
        v100 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v100 = 0;
        _os_log_impl(&dword_1B4BE6000, v95, v96, "Not updating server context for StartLocalRequest", v100, 2u);
        MEMORY[0x1B5E44758](v100, -1, -1);
      }

      if (!v98)
        goto LABEL_37;
    }
    else
    {
      v101 = v128;
      v102 = v129;
      __swift_project_boxed_opaque_existential_1(v127, v128);
      (*(void (**)(uint64_t, uint64_t))(v102 + 24))(v101, v102);
      v98 = v108;
      v99 = v113;
      if (!v108)
      {
LABEL_37:
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v127);
        return;
      }
    }
    v103 = v98;
    ConversationRequestProcessor.sendRequestContextData(_:turn:candidateRequestMessages:)(v103, v114, v99);

    goto LABEL_37;
  }
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v125, &demangling cache variable for type metadata for ContextUpdating?);
  v52 = v45;
  v53 = Logger.logObject.getter();
  v54 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = swift_slowAlloc();
    v108 = v46;
    v56 = (uint8_t *)v55;
    v57 = swift_slowAlloc();
    v127[0] = v57;
    *(_DWORD *)v56 = 136315138;
    v58 = RequestMessageBase.requestId.getter();
    *(_QWORD *)&v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v53, v54, "Cannot handle request as contextUpdater is nil. requestId: %s", v56, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v57, -1, -1);
    v60 = v56;
    v46 = v108;
    MEMORY[0x1B5E44758](v60, -1, -1);

  }
  else
  {

  }
  (*(void (**)(unint64_t, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)((char *)v112 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil) + 152))(0xD000000000000024, 0x80000001B4EFA440, v112[10], v112[11], v34, v35, 0, 0);

}

id specialized RequestContextData.__allocating_init(startRequest:assistantId:didPreviouslyFallbackToServer:isRecognizeMyVoiceEnabled:)(void *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t started;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  id v37;
  uint64_t v38;
  int v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  id v47;
  uint64_t v49;
  _BOOL4 v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  _BOOL4 v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;

  v65 = a5;
  v66 = a4;
  v67 = a2;
  v68 = a3;
  v6 = type metadata accessor for RequestPositionInSession();
  v61 = *(_QWORD *)(v6 - 8);
  v62 = v6;
  MEMORY[0x1E0C80A78](v6);
  v63 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Restrictions();
  MEMORY[0x1E0C80A78](v8);
  v64 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v10);
  v70 = (uint64_t)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ResponseMode();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v69 = (uint64_t)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for InputOrigin();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v49 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = a1;
  started = StartRequestMessageBase.optionalRequestContextData.getter();
  if (started)
  {
    v29 = (void *)started;
    StartRequestMessageBase.inputOrigin.getter();
    v30 = InputOrigin.aceInputOrigin.getter();
    v57 = v31;
    v58 = v30;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    RequestContextData.audioSource.getter();
    AudioSource.init(aceValue:)();
    RequestContextData.audioDestination.getter();
    AudioDestination.init(aceValue:)();
    RequestContextData.responseMode.getter();
    ResponseMode.init(aceValue:)();
    v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
    v59 = v23;
    v60 = v20;
    if (v32 == 1)
    {
      static ResponseMode.displayForward.getter();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v69, v14, v15);
    }
    v56 = RequestContextData.isEyesFree.getter();
    type metadata accessor for StartDirectActionRequestMessage();
    v55 = swift_dynamicCastClass() != 0;
    v54 = RequestContextData.isVoiceTriggerEnabled.getter();
    v53 = RequestContextData.isTextToSpeechEnabled.getter();
    v52 = RequestContextData.bargeInModes.getter();
    RequestContextData.approximatePreviousTTSInterval.getter();
    RequestContextData.deviceRestrictions.getter();
    v38 = (uint64_t)v64;
    Restrictions.init(aceValue:)();
    v51 = RequestContextData.isTriggerlessFollowup.getter();
    type metadata accessor for StartSpeechRequestMessage();
    v50 = swift_dynamicCastClass() != 0;
    v49 = RequestContextData.voiceTriggerEventInfo.getter();
    v39 = RequestContextData.voiceAudioSessionId.getter();
    v40 = RequestContextData.isSystemApertureEnabled.getter() & 1;
    v41 = RequestContextData.isLiveActivitiesSupported.getter() & 1;
    v42 = RequestContextData.isInAmbient.getter() & 1;
    v43 = RequestContextData.conjunctionInfo.getter();
    v44 = RequestContextData.isDeviceShowingLockScreen.getter();
    v45 = RequestContextData.isDeviceLocked.getter();
    v46 = (uint64_t)v63;
    (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v63, *MEMORY[0x1E0D98420], v62);
    v47 = objc_allocWithZone((Class)type metadata accessor for RequestContextData(0));
    v37 = RequestContextData.init(inputOrigin:audioSource:audioDestination:responseMode:isEyesFree:isDirectAction:isVoiceTriggerEnabled:isTextToSpeechEnabled:peerInfo:endpointInfo:instanceInfo:bargeInModes:approximatePreviousTTSInterval:restrictions:originatingHome:currentDeviceAssistantId:isTriggerlessFollowup:didPreviouslyFallbackToServer:isSpeechRequest:isUserOnActivePhoneCall:voiceTriggerEventInfo:isRecognizeMyVoiceEnabled:voiceAudioSessionId:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:positionInSession:conjunctionInfo:isDeviceShowingLockScreen:isDeviceLocked:)(v58, v57, (uint64_t)v59, (uint64_t)v60, v69, v56 & 1, v55, v54 & 1, v53 & 1, 0, 0, 0, v52, v70, v38, 0, v67, v68, v51 & 1,
            v66 & 1,
            v50,
            0,
            v49,
            v65 & 1,
            v39,
            v40,
            v41,
            v42,
            v46,
            v43,
            v44 & 1,
            v45 & 1);

  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.executor);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1B4BE6000, v34, v35, "RequestContextData.init(startSpeechRequest: StartSpeechRequestMessage) - missing requestContextData", v36, 2u);
      MEMORY[0x1B5E44758](v36, -1, -1);
    }

    return 0;
  }
  return v37;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *started;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v43;
  _BOOL4 v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  _BOOL4 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;

  v59 = a5;
  v60 = a4;
  v61 = a3;
  v62 = a2;
  v6 = type metadata accessor for RequestPositionInSession();
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  MEMORY[0x1E0C80A78](v6);
  v58 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Restrictions();
  MEMORY[0x1E0C80A78](v8);
  v54 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v10);
  v65 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for ResponseMode();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v64 = (uint64_t)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for InputOrigin();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = (void *)StartIFRequestMessage.requestContextData.getter();
  v63 = a1;
  StartIFRequestMessage.inputOrigin.getter();
  v29 = InputOrigin.aceInputOrigin.getter();
  v51 = v30;
  v52 = v29;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  RequestContextData.audioSource.getter();
  v53 = v23;
  AudioSource.init(aceValue:)();
  RequestContextData.audioDestination.getter();
  v55 = v20;
  AudioDestination.init(aceValue:)();
  RequestContextData.responseMode.getter();
  ResponseMode.init(aceValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    static ResponseMode.displayForward.getter();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v64, v14, v15);
  }
  v50 = RequestContextData.isEyesFree.getter();
  type metadata accessor for StartDirectActionRequestMessage();
  v49 = swift_dynamicCastClass() != 0;
  v48 = RequestContextData.isVoiceTriggerEnabled.getter();
  v47 = RequestContextData.isTextToSpeechEnabled.getter();
  v46 = RequestContextData.bargeInModes.getter();
  RequestContextData.approximatePreviousTTSInterval.getter();
  RequestContextData.deviceRestrictions.getter();
  v31 = (uint64_t)v54;
  Restrictions.init(aceValue:)();
  v45 = RequestContextData.isTriggerlessFollowup.getter();
  type metadata accessor for StartSpeechRequestMessage();
  v44 = swift_dynamicCastClass() != 0;
  v43 = RequestContextData.voiceTriggerEventInfo.getter();
  v32 = RequestContextData.voiceAudioSessionId.getter();
  v33 = RequestContextData.isSystemApertureEnabled.getter() & 1;
  v34 = RequestContextData.isLiveActivitiesSupported.getter() & 1;
  v35 = RequestContextData.isInAmbient.getter() & 1;
  v36 = RequestContextData.conjunctionInfo.getter();
  v37 = RequestContextData.isDeviceShowingLockScreen.getter();
  v38 = RequestContextData.isDeviceLocked.getter();
  v39 = (uint64_t)v58;
  (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v58, *MEMORY[0x1E0D98420], v57);
  v40 = objc_allocWithZone((Class)type metadata accessor for RequestContextData(0));
  v41 = RequestContextData.init(inputOrigin:audioSource:audioDestination:responseMode:isEyesFree:isDirectAction:isVoiceTriggerEnabled:isTextToSpeechEnabled:peerInfo:endpointInfo:instanceInfo:bargeInModes:approximatePreviousTTSInterval:restrictions:originatingHome:currentDeviceAssistantId:isTriggerlessFollowup:didPreviouslyFallbackToServer:isSpeechRequest:isUserOnActivePhoneCall:voiceTriggerEventInfo:isRecognizeMyVoiceEnabled:voiceAudioSessionId:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:positionInSession:conjunctionInfo:isDeviceShowingLockScreen:isDeviceLocked:)(v52, v51, (uint64_t)v53, (uint64_t)v55, v64, v50 & 1, v49, v48 & 1, v47 & 1, 0, 0, 0, v46, v65, v31, 0, v62, v61, v45 & 1,
          v60 & 1,
          v44,
          0,
          v43,
          v59 & 1,
          v32,
          v33,
          v34,
          v35,
          v39,
          v36,
          v37 & 1,
          v38 & 1);

  return v41;
}

uint64_t specialized SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  void *v16;
  void *v17;
  __int128 v19;
  uint64_t v20;
  _UNKNOWN **v21;

  v20 = type metadata accessor for TrialExperimentationAssetManager();
  v21 = &protocol witness table for TrialExperimentationAssetManager;
  *(_QWORD *)&v19 = a5;
  type metadata accessor for TaggingService();
  swift_allocObject();
  *(_QWORD *)(a8 + 104) = TaggingService.init()();
  *(_QWORD *)(a8 + 144) = 0;
  *(_OWORD *)(a8 + 128) = 0u;
  *(_OWORD *)(a8 + 112) = 0u;
  *(_QWORD *)(a8 + 16) = a1;
  *(_QWORD *)(a8 + 24) = a2;
  *(_QWORD *)(a8 + 32) = a3;
  *(_BYTE *)(a8 + 40) = a4;
  outlined init with take of ReferenceResolutionClientProtocol(&v19, a8 + 48);
  swift_beginAccess();
  *(_QWORD *)(a8 + 128) = 0;
  swift_release();
  swift_beginAccess();
  v16 = *(void **)(a8 + 136);
  *(_QWORD *)(a8 + 136) = 0;

  swift_beginAccess();
  v17 = *(void **)(a8 + 144);
  *(_QWORD *)(a8 + 144) = 0;

  *(_WORD *)(a8 + 156) = 514;
  *(_DWORD *)(a8 + 152) = 33686018;
  *(_QWORD *)(a8 + 160) = 0;
  *(_BYTE *)(a8 + 168) = 1;
  *(_QWORD *)(a8 + 176) = 0;
  *(_WORD *)(a8 + 184) = 513;
  *(_QWORD *)(a8 + 192) = 0;
  *(_QWORD *)(a8 + 200) = 0;
  *(_DWORD *)(a8 + 208) = 33686018;
  *(_WORD *)(a8 + 212) = 514;
  *(_QWORD *)(a8 + 216) = 0;
  *(_BYTE *)(a8 + 224) = 1;
  *(_QWORD *)(a8 + 232) = 0;
  *(_WORD *)(a8 + 240) = 513;
  *(_QWORD *)(a8 + 248) = 0;
  *(_QWORD *)(a8 + 256) = 0;
  *(_QWORD *)(a8 + 88) = a6;
  *(_BYTE *)(a8 + 264) = 0;
  *(_BYTE *)(a8 + 96) = a7;
  return a8;
}

uint64_t specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:selfReflection:featureChecker:)(uint64_t a1, char a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;
  uint64_t v17;
  _UNKNOWN **v18;

  v17 = type metadata accessor for FeatureChecker();
  v18 = &protocol witness table for FeatureChecker;
  *(_QWORD *)&v16 = a5;
  type metadata accessor for ConcurrentTaskPool();
  v12 = swift_allocObject();
  v13 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v12 + 16) = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v12 + 24) = v14;
  *(_QWORD *)(a6 + 16) = v12;
  *(_QWORD *)(a6 + 80) = 0;
  *(_QWORD *)(a6 + 88) = specialized Dictionary.init(dictionaryLiteral:)(v13);
  *(_QWORD *)(a6 + 96) = 30000000000;
  *(_QWORD *)(a6 + 24) = a1;
  *(_BYTE *)(a6 + 72) = a2;
  outlined init with take of ReferenceResolutionClientProtocol(a3, a6 + 32);
  swift_beginAccess();
  *(_QWORD *)(a6 + 80) = a4;
  swift_release();
  outlined init with take of ReferenceResolutionClientProtocol(&v16, a6 + 104);
  return a6;
}

void specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  char *v28;
  uint8_t *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v62;
  uint64_t v63;
  void (**v64)(char *, uint64_t);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  void (*v70)(char *, NSObject *);
  void (*v71)(char *, NSObject *);
  void (**v72)(char *, uint64_t);
  char *v73;
  char *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  os_log_t v88;
  char *v89;
  uint64_t v90;
  char v91;
  char *v92;
  char v93;
  char *v94;
  NSObject *v95;
  char *v96;
  NSObject *v97;
  os_log_type_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  char *v104;
  void (*v105)(char *, NSObject *);
  char *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  objc_class *v114;
  unint64_t v115;
  int v116;
  char *v117;
  char *v118;
  void (**v119)(char *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  os_log_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129[3];
  char *v130;

  v116 = a6;
  v120 = a4;
  v126 = a2;
  v127 = a3;
  v13 = type metadata accessor for UUID();
  v119 = *(void (***)(char *, uint64_t))(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v118 = (char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for RequestType();
  isa = v15[-1].isa;
  v17 = MEMORY[0x1E0C80A78](v15);
  v117 = (char *)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v124 = (char *)&v112 - v20;
  MEMORY[0x1E0C80A78](v19);
  v125 = (char *)&v112 - v21;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
  v24 = a1;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v115 = a7;
    v27 = swift_slowAlloc();
    v114 = isa;
    v28 = v24;
    v29 = (uint8_t *)v27;
    v30 = swift_slowAlloc();
    v113 = a5;
    v31 = (_QWORD *)v30;
    v121 = a8;
    v122 = v23;
    v123 = v15;
    *(_DWORD *)v29 = 138412290;
    v129[0] = (uint64_t)v28;
    v32 = v28;
    v23 = v122;
    v15 = v123;
    a8 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v31 = v28;

    a7 = v115;
    _os_log_impl(&dword_1B4BE6000, v25, v26, "ConversationBridge handling message: %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v33 = v31;
    a5 = v113;
    MEMORY[0x1B5E44758](v33, -1, -1);
    v34 = v29;
    v24 = v28;
    isa = v114;
    MEMORY[0x1B5E44758](v34, -1, -1);

  }
  else
  {

  }
  if ((ConversationRequestProcessor.checkPrerequisitesAndMaybeCacheCandidateMessage(forRCInput:resultCandidateId:messageToCacheIfNotInActiveTurn:)(v24, v126, v127, a5) & 1) == 0)
  {
    v41 = v24;
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = swift_slowAlloc();
      v45 = swift_slowAlloc();
      v129[0] = v45;
      *(_DWORD *)v44 = 136315394;
      v46 = v118;
      MessageBase.messageId.getter();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v47 = dispatch thunk of CustomStringConvertible.description.getter();
      v49 = v48;
      v119[1](v46, v13);
      v130 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2080;
      swift_getObjectType();
      v50 = _typeName(_:qualified:)();
      v130 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v42, v43, "Message id %s of type %s did not meet pre-requisites for handleCandidateMessage: Ignoring", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v45, -1, -1);
      MEMORY[0x1B5E44758](v44, -1, -1);

    }
    else
    {

    }
    return;
  }
  v35 = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 528))();
  if (v35)
  {
    v36 = v35;
    v121 = a8;
    v122 = v23;
    v37 = (uint64_t *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v39 = *(_QWORD *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v38 = *(_QWORD *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
    swift_bridgeObjectRetain();
    if (v39 == RequestMessageBase.requestId.getter() && v38 == v40)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v62 & 1) == 0)
      {
        v73 = v24;
        swift_retain_n();
        v74 = v73;
        v75 = Logger.logObject.getter();
        v76 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v75, v76))
        {
          v77 = swift_slowAlloc();
          v78 = swift_slowAlloc();
          v129[0] = v78;
          *(_DWORD *)v77 = 136315650;
          swift_getObjectType();
          v79 = _typeName(_:qualified:)();
          v126 = v36;
          v130 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, v129);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v77 + 12) = 2080;
          v81 = RequestMessageBase.requestId.getter();
          v130 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v129);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v77 + 22) = 2080;
          v83 = *v37;
          v84 = v37[1];
          swift_bridgeObjectRetain();
          v130 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, v129);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v75, v76, "%s request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v77, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v78, -1, -1);
          MEMORY[0x1B5E44758](v77, -1, -1);
LABEL_35:
          swift_release();

          return;
        }

LABEL_37:
        swift_release_n();
        return;
      }
    }
    v63 = v36 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    v64 = (void (**)(char *, uint64_t))*((_QWORD *)isa + 2);
    v65 = v125;
    ((void (*)(char *, uint64_t, NSObject *))v64)(v125, v63, v15);
    v66 = v120;
    v67 = *(_QWORD *)(v120 + 16);
    v127 = v63;
    if (v67)
    {
      v118 = v24;
      v119 = v64;
      v115 = (*((unsigned __int8 *)isa + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)isa + 80);
      v68 = v124;
      ((void (*)(char *, unint64_t, NSObject *))v64)(v124, v120 + v115, v15);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D0]);
      swift_bridgeObjectRetain();
      v69 = dispatch thunk of static Equatable.== infix(_:_:)();
      v70 = (void (*)(char *, NSObject *))*((_QWORD *)isa + 1);
      v70(v68, v15);
      if ((v69 & 1) != 0)
      {
        swift_bridgeObjectRelease();
LABEL_39:
        v70(v65, v15);
        v111 = ConversationRequestProcessor.makeResultCandidateStateWithCachedUserIdentification(from:)(a9);
        if (v111)
        {
          if ((v116 & 1) != 0)
            ConversationRequestProcessorTurnState.updateResultCandidateState(_:)(v111);
          else
            ConversationRequestProcessorTurnState.addResultCandidateState(_:)(v111);
          swift_release();
        }
        swift_release();
        return;
      }
      if (v67 != 1)
      {
        v123 = v15;
        v126 = v36;
        v85 = *((_QWORD *)isa + 9);
        v86 = v66 + v85 + v115;
        v87 = 1;
        v72 = v119;
        v88 = v123;
        while (1)
        {
          v89 = v124;
          ((void (*)(char *, unint64_t, os_log_t))v72)(v124, v86, v88);
          v90 = v87 + 1;
          if (__OFADD__(v87, 1))
          {
            __break(1u);
            JUMPOUT(0x1B4D6D5F8);
          }
          v91 = dispatch thunk of static Equatable.== infix(_:_:)();
          v92 = v89;
          v93 = v91;
          v70(v92, v88);
          if ((v93 & 1) != 0)
            break;
          ++v87;
          v86 += v85;
          if (v90 == v67)
          {
            swift_bridgeObjectRelease();
            v65 = v125;
            v36 = v126;
            v15 = v123;
            v24 = v118;
            goto LABEL_32;
          }
        }
        swift_bridgeObjectRelease();
        v65 = v125;
        v15 = v123;
        goto LABEL_39;
      }
      swift_bridgeObjectRelease();
      v24 = v118;
      v72 = v119;
LABEL_32:
      v71 = v70;
      v70(v65, v15);
    }
    else
    {
      v71 = (void (*)(char *, NSObject *))*((_QWORD *)isa + 1);
      v72 = v64;
      v71(v65, v15);
    }
    v94 = v24;
    swift_retain_n();
    v95 = v15;
    v96 = v94;
    v97 = Logger.logObject.getter();
    v98 = static os_log_type_t.error.getter();
    v99 = v98;
    if (os_log_type_enabled(v97, v98))
    {
      v100 = swift_slowAlloc();
      v101 = swift_slowAlloc();
      LODWORD(v124) = v99;
      v102 = (_QWORD *)v101;
      v125 = (char *)swift_slowAlloc();
      v130 = v125;
      *(_DWORD *)v100 = 138412546;
      v123 = v97;
      v128 = (uint64_t)v96;
      v103 = v96;
      v126 = v36;
      v104 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v102 = v96;

      *(_WORD *)(v100 + 12) = 2080;
      v105 = v71;
      v106 = v117;
      ((void (*)(char *, uint64_t, NSObject *))v72)(v117, v127, v95);
      v107 = RequestType.rawValue.getter();
      v109 = v108;
      v105(v106, v95);
      v128 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v109, (uint64_t *)&v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v75 = v123;
      _os_log_impl(&dword_1B4BE6000, v123, (os_log_type_t)v124, "%@ is not supported for this requestType: %s", (uint8_t *)v100, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v102, -1, -1);
      v110 = v125;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v110, -1, -1);
      MEMORY[0x1B5E44758](v100, -1, -1);
      goto LABEL_35;
    }

    goto LABEL_37;
  }
  v52 = v24;
  swift_retain_n();
  v53 = v52;
  v54 = Logger.logObject.getter();
  v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = a7;
    v57 = swift_slowAlloc();
    v129[0] = swift_slowAlloc();
    *(_DWORD *)v57 = 136315394;
    swift_getObjectType();
    v58 = _typeName(_:qualified:)();
    v130 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v60 = swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 12) = 2080;
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 368))(v60);
    __asm { BR              X10 }
  }

  swift_release_n();
}

uint64_t specialized closure #1 in ConversationRequestProcessor.handleMultiUserTRPCandidateRequestMessage(_:)(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v8 = ConversationRequestProcessor.makeResultCandidateStateWithCachedUserIdentification(from:)(a2);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v10 = a3;
  swift_bridgeObjectRetain_n();
  v11 = v10;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v23 = a4;
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v24 = v15;
    *(_DWORD *)v14 = 136315650;
    v16 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, a5, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v18 = swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 22) = 2080;
    if (v8)
    {
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 800))(v18);
      v21 = v20;
    }
    else
    {
      v19 = 0;
      v21 = 0xE000000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v12, v13, "For top level trpId %s with sharedUserId %s, created %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v15, -1, -1);
    MEMORY[0x1B5E44758](v14, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();

  }
  return v8;
}

void specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(void *a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, void (*a5)(char *, unint64_t, uint64_t), int a6, unint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, unint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint8_t *v32;
  _QWORD *v33;
  char *v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  void (*v71)(char *, uint64_t);
  char *v72;
  char *v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char v90;
  char *v91;
  char v92;
  char *v93;
  uint64_t v94;
  char *v95;
  NSObject *v96;
  void (*v97)(char *, uint64_t);
  os_log_type_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  char *v103;
  _QWORD *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[2];
  unint64_t v113;
  int v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, uint64_t);
  void (*v126)(char *, unint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128[3];
  uint64_t v129;

  v116 = a8;
  v114 = a6;
  v125 = a3;
  v126 = a5;
  v124 = a2;
  v15 = type metadata accessor for UUID();
  v119 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v118 = (char *)v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for RequestType();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v115 = (char *)v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v122 = (char *)v112 - v22;
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)v112 - v23;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  v26 = __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
  v27 = a1;
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.debug.getter();
  v30 = os_log_type_enabled(v28, v29);
  v120 = a4;
  v123 = (uint64_t)v24;
  if (v30)
  {
    v113 = a7;
    v31 = swift_slowAlloc();
    v117 = v18;
    v32 = (uint8_t *)v31;
    v33 = (_QWORD *)swift_slowAlloc();
    v112[1] = v26;
    v121 = v17;
    *(_DWORD *)v32 = 138412290;
    v128[0] = (uint64_t)v27;
    v34 = v27;
    v17 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v33 = v27;

    a7 = v113;
    _os_log_impl(&dword_1B4BE6000, v28, v29, "ConversationBridge handling message: %@", v32, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v33, -1, -1);
    v35 = v32;
    v18 = v117;
    MEMORY[0x1B5E44758](v35, -1, -1);

  }
  else
  {

  }
  if ((ConversationRequestProcessor.checkPrerequisitesAndMaybeCacheCandidateMessage(forRCInput:resultCandidateId:messageToCacheIfNotInActiveTurn:)(v27, v124, (uint64_t)v125, (uint64_t)v126) & 1) == 0)
  {
    v42 = v27;
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc();
      v46 = swift_slowAlloc();
      v128[0] = v46;
      *(_DWORD *)v45 = 136315394;
      v47 = v118;
      MessageBase.messageId.getter();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v48 = dispatch thunk of CustomStringConvertible.description.getter();
      v50 = v49;
      (*(void (**)(char *, uint64_t))(v119 + 8))(v47, v15);
      v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 12) = 2080;
      swift_getObjectType();
      v51 = _typeName(_:qualified:)();
      v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v43, v44, "Message id %s of type %s did not meet pre-requisites for handleCandidateMessage: Ignoring", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v46, -1, -1);
      MEMORY[0x1B5E44758](v45, -1, -1);

    }
    else
    {

    }
    return;
  }
  v36 = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 528))();
  if (v36)
  {
    v37 = v36;
    v38 = (uint64_t *)(v36 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v40 = *(_QWORD *)(v36 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v39 = *(_QWORD *)(v36 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
    swift_bridgeObjectRetain();
    if (v40 == RequestMessageBase.requestId.getter() && v39 == v41)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v63 & 1) == 0)
      {
        v72 = v27;
        swift_retain_n();
        v73 = v72;
        v74 = Logger.logObject.getter();
        v75 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v74, v75))
        {
          v76 = swift_slowAlloc();
          v77 = swift_slowAlloc();
          v128[0] = v77;
          *(_DWORD *)v76 = 136315650;
          swift_getObjectType();
          v78 = _typeName(_:qualified:)();
          v119 = v37;
          v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v76 + 12) = 2080;
          v80 = RequestMessageBase.requestId.getter();
          v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v76 + 22) = 2080;
          v82 = *v38;
          v83 = v38[1];
          swift_bridgeObjectRetain();
          v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, v128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v74, v75, "%s request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v76, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v77, -1, -1);
          MEMORY[0x1B5E44758](v76, -1, -1);
          swift_release();

          return;
        }

        goto LABEL_36;
      }
    }
    v64 = v37 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    v66 = v123;
    v65(v123, v64, v17);
    v67 = v120;
    v68 = *(_QWORD *)(v120 + 16);
    v124 = v64;
    v126 = (void (*)(char *, unint64_t, uint64_t))v65;
    if (v68)
    {
      v118 = v27;
      v113 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      v69 = v122;
      v65((uint64_t)v122, v120 + v113, v17);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D0]);
      swift_bridgeObjectRetain();
      v70 = dispatch thunk of static Equatable.== infix(_:_:)();
      v117 = v18;
      v71 = *(void (**)(char *, uint64_t))(v18 + 8);
      v71(v69, v17);
      if ((v70 & 1) != 0)
      {
        swift_bridgeObjectRelease();
LABEL_38:
        v71((char *)v123, v17);
        v111 = specialized closure #1 in ConversationRequestProcessor.handleMultiUserTRPCandidateRequestMessage(_:)(v116, a9, a10, a11, a12);
        if (v111)
        {
          if ((v114 & 1) != 0)
            ConversationRequestProcessorTurnState.updateResultCandidateState(_:)(v111);
          else
            ConversationRequestProcessorTurnState.addResultCandidateState(_:)(v111);
          swift_release();
        }
        swift_release();
        return;
      }
      v27 = v118;
      if (v68 != 1)
      {
        v125 = v71;
        v121 = v17;
        v119 = v37;
        v84 = *(_QWORD *)(v117 + 72);
        v85 = v67 + v84 + v113;
        v86 = 1;
        v87 = v121;
        while (1)
        {
          v88 = v122;
          v126(v122, v85, v87);
          v89 = v86 + 1;
          if (__OFADD__(v86, 1))
          {
            __break(1u);
            JUMPOUT(0x1B4D6E63CLL);
          }
          v90 = dispatch thunk of static Equatable.== infix(_:_:)();
          v91 = v88;
          v92 = v90;
          v125(v91, v87);
          if ((v92 & 1) != 0)
            break;
          ++v86;
          v85 += v84;
          if (v89 == v68)
          {
            swift_bridgeObjectRelease();
            v37 = v119;
            v17 = v121;
            v66 = v123;
            v71 = v125;
            goto LABEL_32;
          }
        }
        swift_bridgeObjectRelease();
        v17 = v121;
        v71 = v125;
        goto LABEL_38;
      }
      swift_bridgeObjectRelease();
LABEL_32:
      v71((char *)v66, v17);
    }
    else
    {
      v71 = *(void (**)(char *, uint64_t))(v18 + 8);
      v71((char *)v66, v17);
    }
    v93 = v27;
    swift_retain_n();
    v94 = v17;
    v95 = v93;
    v96 = Logger.logObject.getter();
    v97 = v71;
    v98 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v96, v98))
    {
      v99 = swift_slowAlloc();
      v100 = swift_slowAlloc();
      v125 = v97;
      v101 = (_QWORD *)v100;
      v123 = swift_slowAlloc();
      v129 = v123;
      *(_DWORD *)v99 = 138412546;
      v127 = (uint64_t)v95;
      v102 = v95;
      v119 = v37;
      v103 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v101 = v95;
      v104 = v101;

      *(_WORD *)(v99 + 12) = 2080;
      v105 = v115;
      v126(v115, v124, v94);
      v106 = RequestType.rawValue.getter();
      v107 = v94;
      v109 = v108;
      v125(v105, v107);
      v127 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v109, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v96, v98, "%@ is not supported for this requestType: %s", (uint8_t *)v99, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v104, -1, -1);
      v110 = v123;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v110, -1, -1);
      MEMORY[0x1B5E44758](v99, -1, -1);
      swift_release();

      return;
    }

LABEL_36:
    swift_release_n();
    return;
  }
  v53 = v27;
  swift_retain_n();
  v54 = v53;
  v55 = Logger.logObject.getter();
  v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = a7;
    v58 = swift_slowAlloc();
    v128[0] = swift_slowAlloc();
    *(_DWORD *)v58 = 136315394;
    swift_getObjectType();
    v59 = _typeName(_:qualified:)();
    v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v61 = swift_bridgeObjectRelease();
    *(_WORD *)(v58 + 12) = 2080;
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 368))(v61);
    __asm { BR              X10 }
  }

  swift_release_n();
}

_QWORD *specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,unsigned __int8 a26,unsigned __int8 a27)
{
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  id v37;
  char v38;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t);
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t Strong;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  BOOL v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113[24];
  ValueMetadata *v114;
  unint64_t v115;
  __int128 v116;

  v28 = v27;
  v101 = a7;
  v100 = a6;
  v105 = a5;
  v95 = a4;
  v111 = a3;
  v99 = a2;
  v98 = a1;
  v90 = a27;
  v88 = a26;
  v94 = a25;
  v93 = a24;
  v109 = a22;
  v110 = a23;
  v108 = a21;
  v92 = a20;
  LODWORD(v87) = a18;
  v104 = a17;
  v112 = a15;
  v91 = a14;
  v89 = a13;
  v107 = a10;
  v97 = a9;
  v103 = type metadata accessor for UUID();
  v106 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103);
  v96 = (char *)&v86 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork;
  type metadata accessor for ConcurrentTaskPool();
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v32 = swift_allocObject();
  *(_QWORD *)((char *)v27 + v30) = v31;
  v33 = (char *)v27 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state;
  v33[16] = 3;
  *(_DWORD *)(v32 + 16) = 0;
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  *(_QWORD *)((char *)v27 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rraasCollectionTask) = 0;
  *(_QWORD *)(v31 + 24) = v32;
  *((_BYTE *)v27 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sentResultCandidateSelected) = 0;
  v34 = (_QWORD *)((char *)v27 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userIdentification);
  v34[1] = 0;
  v34[2] = 0;
  *v34 = 0;
  v35 = (_QWORD *)((char *)v27 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID);
  *v35 = 0;
  v35[1] = 0;
  v36 = (void *)objc_opt_self();
  swift_retain();
  swift_retain();
  swift_retain();
  v37 = objc_msgSend(v36, sel_sharedPreferences);
  v38 = AFDeviceSupportsSAE();
  v39 = objc_msgSend((id)objc_opt_self(), sel_clientWithIdentifier_, 125);
  type metadata accessor for TrialExperimentationAssetManager();
  v40 = swift_allocObject();
  v41 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(_QWORD *)(v40 + 16) = v39;
  *(_QWORD *)(v40 + 24) = v41;
  if (one-time initialization token for instance != -1)
    swift_once();
  v42 = static SelfReflectionCurareDonator.instance;
  type metadata accessor for SelfReflectionAgent();
  v43 = swift_allocObject();
  swift_retain();
  v44 = specialized SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(a16, a19, (uint64_t)v37, v38, v40, v42, 0, v43);
  *(_QWORD *)((char *)v27 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent) = v44;
  v102 = a11;
  outlined init with copy of ReferenceResolutionClientProtocol(a11, (uint64_t)v27 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
  v45 = a12[3];
  v46 = *(uint64_t (**)(uint64_t))(*a12 + 144);
  v47 = swift_unknownObjectRetain();
  LOBYTE(v46) = v46(v47);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(a12 + 4), (uint64_t)&v116);
  type metadata accessor for FeatureChecker();
  v48 = swift_allocObject();
  swift_retain();
  *(_BYTE *)(v48 + 16) = AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags();
  v114 = &type metadata for IntelligenceFlowFeatureFlag;
  v115 = lazy protocol witness table accessor for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag();
  LOBYTE(v42) = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v113);
  *(_BYTE *)(v48 + 17) = v42 & 1;
  type metadata accessor for ConversationOutputSubmitter();
  v49 = swift_allocObject();
  *(_QWORD *)((char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter) = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:selfReflection:featureChecker:)(v45, v46 & 1, &v116, v44, v48, v49);
  *(_QWORD *)((char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_decisionMaker) = v89;
  *(_QWORD *)((char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_preExecutionActionHandler) = v91;
  *(_QWORD *)((char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper) = v104;
  outlined init with copy of ReferenceResolutionClientProtocol(v112, (uint64_t)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionState);
  *(_QWORD *)((char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil) = a16;
  *((_BYTE *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isFirstRequestInSession) = v87 & 1;
  *(_QWORD *)((char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_networkAvailabilityProvider) = a19;
  *(_QWORD *)((char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_coreTelephonyServiceProvider) = v92;
  outlined init with copy of ReferenceResolutionClientProtocol(v108, (uint64_t)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient);
  outlined init with copy of ReferenceResolutionClientProtocol(v109, (uint64_t)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_correctionsPlatformClient);
  v50 = v94;
  *(_QWORD *)((char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_muxContextMessage) = v94;
  v51 = (char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId;
  v52 = type metadata accessor for UserID();
  v86 = *(_QWORD *)(v52 - 8);
  v53 = *(void (**)(char *, uint64_t))(v86 + 16);
  v87 = v52;
  v53(v51, v110);
  v88 &= 1u;
  *((_BYTE *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) = v88;
  *((_BYTE *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isAssistantEngineEnabled) = v90 & 1;
  v54 = v93;
  *(_QWORD *)((char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_recentDialogTracker) = v93;
  v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v54 + 224);
  v56 = v50;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v57 = v104;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  v58 = v95;
  v59 = v105;
  v55(v95, v105, v111);
  v60 = v59;
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  v61 = static DeviceContextHelper.sharedInstance;
  v62 = (_QWORD *)((char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextDonator);
  v62[3] = type metadata accessor for DeviceContextHelper();
  v62[4] = (uint64_t)&protocol witness table for DeviceContextHelper;
  *v62 = v61;
  type metadata accessor for ConversationBridgeProcessorDelegate();
  v63 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v63 + 24) = v57;
  *(_QWORD *)((char *)v28
            + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate) = v63;
  swift_unknownObjectRetain();
  swift_retain();
  v64 = v57;
  v65 = v101;
  v66 = v100;
  v85 = v60;
  v67 = v99;
  v68 = v98;
  closure #1 in ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(v88, v50, v110, v112, v108, v109, v57, v98, (uint64_t)&v116, v99, v58, v85, v100, v101, v61, a16);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v116, (uint64_t)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, &demangling cache variable for type metadata for ContextUpdating?);
  swift_release();
  v69 = v106;
  v70 = v96;
  v71 = v103;
  (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v96, v111, v103);
  outlined init with copy of ReferenceResolutionClientProtocol(v107, (uint64_t)&v116);
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  v28[12] = v68;
  v28[13] = v67;
  (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))((uint64_t)v28 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId, v70, v71);
  v72 = v105;
  v28[8] = v58;
  v28[9] = v72;
  v28[10] = v66;
  v28[11] = v65;
  outlined init with take of ReferenceResolutionClientProtocol(&v116, (uint64_t)(v28 + 3));
  v28[2] = v64;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  swift_retain();
  swift_release();
  v74 = v108;
  v75 = v109;
  v76 = v112;
  if (Strong)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)static Logger.conversationBridge);
    v78 = Logger.logObject.getter();
    v79 = static os_log_type_t.error.getter();
    v80 = os_log_type_enabled(v78, v79);
    v81 = v110;
    if (v80)
    {
      v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v82 = 0;
      _os_log_impl(&dword_1B4BE6000, v78, v79, "executionProcessor was already set on ExecutionBridgeProcessorDelegate ignoring this operation", v82, 2u);
      v71 = v103;
      MEMORY[0x1B5E44758](v82, -1, -1);
    }
    swift_release();

    v83 = v111;
  }
  else
  {
    swift_weakAssign();
    swift_release();
    v81 = v110;
    v83 = v111;
  }
  (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v81, v87);
  __swift_destroy_boxed_opaque_existential_1(v75);
  __swift_destroy_boxed_opaque_existential_1(v74);
  __swift_destroy_boxed_opaque_existential_1(v76);
  __swift_destroy_boxed_opaque_existential_1(v102);
  __swift_destroy_boxed_opaque_existential_1(v107);
  (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v83, v71);
  return v28;
}

uint64_t specialized ConversationRequestProcessor.makeResultCandidateState(from:asrOnServer:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v46 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v2);
  v47 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UserID();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (uint64_t *)((char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v44 = v17;
  v45 = v16;
  v18 = (void *)AsrResultCandidateMessage.speechPackage.getter();
  type metadata accessor for SpeechContext();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_BYTE *)(v19 + 48) = 1;
  *(_QWORD *)(v19 + 16) = v18;
  v20 = v18;
  v21 = objc_msgSend(v20, sel_recognition);
  v22 = objc_msgSend(v21, sel_aceRecognition);

  *(_QWORD *)(v19 + 24) = v22;
  *v15 = v19;
  swift_storeEnumTagMultiPayload();
  UserIdAwareResultCandidateMessageBase.userId.getter();
  v23 = AsrResultCandidateMessage.voiceIdScore.getter();
  v24 = AsrResultCandidateMessage.voiceIdClassification.getter();
  v26 = v25 & 1;
  v27 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v9, 1, 1, v27);
  if ((v46 & 1) != 0)
    static ExecutionLocation.server.getter();
  else
    static ExecutionLocation.device.getter();
  v28 = type metadata accessor for ExecutionLocation();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v6, 0, 1, v28);
  v29 = type metadata accessor for ServerFallbackReason();
  v30 = (uint64_t)v47;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v47, 1, 1, v29);
  type metadata accessor for ResultCandidateState(0);
  swift_allocObject();
  LOBYTE(v49) = 1;
  v31 = ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:)(v45, v44, (uint64_t)v15, (uint64_t)v12, v23 | ((HIDWORD(v23) & 1) << 32), v24, v26, 0x100000000, (uint64_t)v9, (uint64_t)v6, v30);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    v36 = swift_slowAlloc();
    v49 = v36;
    *(_DWORD *)v35 = 136315138;
    v37 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 800);
    v38 = swift_retain();
    v39 = v37(v38);
    v41 = v40;
    swift_release();
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v33, v34, "Created %s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v36, -1, -1);
    MEMORY[0x1B5E44758](v35, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return v31;
}

void specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(os_log_t, uint64_t), int a6, unint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  char *v28;
  uint8_t *v29;
  _QWORD *v30;
  char *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v60;
  uint64_t v61;
  void (**v62)(char *, uint64_t);
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  os_log_t v66;
  char v67;
  void (*v68)(char *, uint64_t);
  void (**v69)(char *, uint64_t);
  char *v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_t v86;
  uint64_t v87;
  char v88;
  os_log_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  char *v93;
  NSObject *v94;
  os_log_type_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  char *v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  void (*v107)(os_log_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  int v114;
  uint64_t v115;
  char *v116;
  void (**v117)(char *, uint64_t);
  uint64_t v118;
  uint64_t v119;
  os_log_t v120;
  NSObject *v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(os_log_t, uint64_t);
  uint64_t v125;
  uint64_t v126[3];
  void (*v127)(_QWORD, _QWORD);

  v115 = a8;
  v114 = a6;
  v123 = a3;
  v124 = a5;
  v122 = a2;
  v11 = type metadata accessor for UUID();
  v117 = *(void (***)(char *, uint64_t))(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v116 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for RequestType();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v113 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v120 = (os_log_t)((char *)&v109 - v18);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v109 - v19;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
  v23 = a1;
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  v26 = os_log_type_enabled(v24, v25);
  v118 = a4;
  v121 = v20;
  if (v26)
  {
    v112 = a7;
    v27 = swift_slowAlloc();
    v110 = v14;
    v28 = v23;
    v29 = (uint8_t *)v27;
    v30 = (_QWORD *)swift_slowAlloc();
    v111 = v22;
    v119 = v13;
    *(_DWORD *)v29 = 138412290;
    v126[0] = (uint64_t)v28;
    v31 = v28;
    v13 = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v30 = v28;

    a7 = v112;
    _os_log_impl(&dword_1B4BE6000, v24, v25, "ConversationBridge handling message: %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v30, -1, -1);
    v32 = v29;
    v23 = v28;
    v14 = v110;
    MEMORY[0x1B5E44758](v32, -1, -1);

  }
  else
  {

  }
  if ((ConversationRequestProcessor.checkPrerequisitesAndMaybeCacheCandidateMessage(forRCInput:resultCandidateId:messageToCacheIfNotInActiveTurn:)(v23, v122, v123, (uint64_t)v124) & 1) == 0)
  {
    v39 = v23;
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc();
      v43 = swift_slowAlloc();
      v126[0] = v43;
      *(_DWORD *)v42 = 136315394;
      v44 = v116;
      MessageBase.messageId.getter();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v45 = dispatch thunk of CustomStringConvertible.description.getter();
      v47 = v46;
      v117[1](v44, v11);
      v127 = (void (*)(_QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2080;
      swift_getObjectType();
      v48 = _typeName(_:qualified:)();
      v127 = (void (*)(_QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v40, v41, "Message id %s of type %s did not meet pre-requisites for handleCandidateMessage: Ignoring", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v43, -1, -1);
      MEMORY[0x1B5E44758](v42, -1, -1);

    }
    else
    {

    }
    return;
  }
  v33 = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 528))();
  if (v33)
  {
    v34 = v33;
    v35 = (uint64_t *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v37 = *(_QWORD *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v36 = *(_QWORD *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
    swift_bridgeObjectRetain();
    if (v37 == RequestMessageBase.requestId.getter() && v36 == v38)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v60 & 1) == 0)
      {
        v70 = v23;
        swift_retain_n();
        v71 = v70;
        v72 = Logger.logObject.getter();
        v73 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v72, v73))
        {
          v74 = swift_slowAlloc();
          v75 = swift_slowAlloc();
          v126[0] = v75;
          *(_DWORD *)v74 = 136315650;
          swift_getObjectType();
          v76 = _typeName(_:qualified:)();
          v122 = v34;
          v127 = (void (*)(_QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 12) = 2080;
          v78 = RequestMessageBase.requestId.getter();
          v127 = (void (*)(_QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 22) = 2080;
          v80 = *v35;
          v81 = v35[1];
          swift_bridgeObjectRetain();
          v127 = (void (*)(_QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v72, v73, "%s request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v74, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v75, -1, -1);
          MEMORY[0x1B5E44758](v74, -1, -1);
LABEL_35:
          swift_release();

          return;
        }

LABEL_37:
        swift_release_n();
        return;
      }
    }
    v61 = v34 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    v62 = *(void (***)(char *, uint64_t))(v14 + 16);
    v63 = v121;
    ((void (*)(NSObject *, uint64_t, uint64_t))v62)(v121, v61, v13);
    v64 = v118;
    v65 = *(_QWORD *)(v118 + 16);
    v123 = v61;
    if (v65)
    {
      v116 = v23;
      v117 = v62;
      v112 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      v66 = v120;
      ((void (*)(os_log_t, unint64_t, uint64_t))v62)(v120, v118 + v112, v13);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D0]);
      swift_bridgeObjectRetain();
      v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      v124 = *(void (**)(os_log_t, uint64_t))(v14 + 8);
      v124(v66, v13);
      if ((v67 & 1) != 0)
      {
        swift_bridgeObjectRelease();
LABEL_39:
        v124(v63, v13);
        v108 = specialized ConversationRequestProcessor.makeResultCandidateState(from:asrOnServer:)(v115, *(unsigned __int8 *)(v34+ OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer));
        (*(void (**)(uint64_t))(*(_QWORD *)v108 + 384))(4);
        if ((v114 & 1) != 0)
          ConversationRequestProcessorTurnState.updateResultCandidateState(_:)(v108);
        else
          ConversationRequestProcessorTurnState.addResultCandidateState(_:)(v108);
        swift_release();
        swift_release();
        return;
      }
      if (v65 != 1)
      {
        v119 = v13;
        v122 = v34;
        v82 = *(_QWORD *)(v14 + 72);
        v83 = v64 + v82 + v112;
        v84 = 1;
        v69 = v117;
        v85 = v119;
        while (1)
        {
          v86 = v120;
          ((void (*)(os_log_t, unint64_t, uint64_t))v69)(v120, v83, v85);
          v87 = v84 + 1;
          if (__OFADD__(v84, 1))
          {
            __break(1u);
            JUMPOUT(0x1B4D70148);
          }
          v88 = dispatch thunk of static Equatable.== infix(_:_:)();
          v89 = v86;
          v90 = v88;
          v124(v89, v85);
          if ((v90 & 1) != 0)
            break;
          ++v84;
          v83 += v82;
          if (v87 == v65)
          {
            swift_bridgeObjectRelease();
            v63 = v121;
            v34 = v122;
            v13 = v119;
            v23 = v116;
            goto LABEL_32;
          }
        }
        swift_bridgeObjectRelease();
        v63 = v121;
        v34 = v122;
        v13 = v119;
        goto LABEL_39;
      }
      swift_bridgeObjectRelease();
      v23 = v116;
      v69 = v117;
LABEL_32:
      v68 = (void (*)(char *, uint64_t))v124;
      v124(v63, v13);
    }
    else
    {
      v68 = *(void (**)(char *, uint64_t))(v14 + 8);
      v69 = v62;
      v68((char *)v63, v13);
    }
    v91 = v23;
    swift_retain_n();
    v92 = v13;
    v93 = v91;
    v94 = Logger.logObject.getter();
    v95 = static os_log_type_t.error.getter();
    v96 = v95;
    if (os_log_type_enabled(v94, v95))
    {
      v97 = swift_slowAlloc();
      v98 = swift_slowAlloc();
      LODWORD(v121) = v96;
      v99 = (_QWORD *)v98;
      v124 = (void (*)(os_log_t, uint64_t))swift_slowAlloc();
      v125 = (uint64_t)v93;
      v127 = (void (*)(_QWORD, _QWORD))v124;
      *(_DWORD *)v97 = 138412546;
      v120 = v94;
      v100 = v93;
      v122 = v34;
      v101 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v99 = v93;

      *(_WORD *)(v97 + 12) = 2080;
      v102 = v68;
      v103 = v113;
      ((void (*)(char *, uint64_t, uint64_t))v69)(v113, v123, v92);
      v104 = RequestType.rawValue.getter();
      v106 = v105;
      v102(v103, v92);
      v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v106, (uint64_t *)&v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v72 = v120;
      _os_log_impl(&dword_1B4BE6000, v120, (os_log_type_t)v121, "%@ is not supported for this requestType: %s", (uint8_t *)v97, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v99, -1, -1);
      v107 = v124;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v107, -1, -1);
      MEMORY[0x1B5E44758](v97, -1, -1);
      goto LABEL_35;
    }

    goto LABEL_37;
  }
  v50 = v23;
  swift_retain_n();
  v51 = v50;
  v52 = Logger.logObject.getter();
  v53 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = a7;
    v55 = swift_slowAlloc();
    v126[0] = swift_slowAlloc();
    *(_DWORD *)v55 = 136315394;
    swift_getObjectType();
    v56 = _typeName(_:qualified:)();
    v127 = (void (*)(_QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v58 = swift_bridgeObjectRelease();
    *(_WORD *)(v55 + 12) = 2080;
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 368))(v58);
    __asm { BR              X10 }
  }

  swift_release_n();
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  char *v28;
  uint8_t *v29;
  _QWORD *v30;
  char *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v60;
  uint64_t v61;
  void (**v62)(char *, uint64_t);
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  os_log_t v66;
  char v67;
  void (*v68)(char *, uint64_t);
  void (**v69)(char *, uint64_t);
  char *v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_t v86;
  uint64_t v87;
  char v88;
  os_log_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  char *v93;
  NSObject *v94;
  os_log_type_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  char *v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  void (*v107)(os_log_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  int v114;
  uint64_t v115;
  char *v116;
  void (**v117)(char *, uint64_t);
  uint64_t v118;
  uint64_t v119;
  os_log_t v120;
  NSObject *v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(os_log_t, uint64_t);
  uint64_t v125;
  uint64_t v126[3];
  void (*v127)(_QWORD, _QWORD);

  v115 = a8;
  v114 = a6;
  v123 = a3;
  v124 = a5;
  v122 = a2;
  v11 = type metadata accessor for UUID();
  v117 = *(void (***)(char *, uint64_t))(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v116 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for RequestType();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v113 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v120 = (os_log_t)((char *)&v109 - v18);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v109 - v19;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
  v23 = a1;
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  v26 = os_log_type_enabled(v24, v25);
  v118 = a4;
  v121 = v20;
  if (v26)
  {
    v112 = a7;
    v27 = swift_slowAlloc();
    v110 = v14;
    v28 = v23;
    v29 = (uint8_t *)v27;
    v30 = (_QWORD *)swift_slowAlloc();
    v111 = v22;
    v119 = v13;
    *(_DWORD *)v29 = 138412290;
    v126[0] = (uint64_t)v28;
    v31 = v28;
    v13 = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v30 = v28;

    a7 = v112;
    _os_log_impl(&dword_1B4BE6000, v24, v25, "ConversationBridge handling message: %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v30, -1, -1);
    v32 = v29;
    v23 = v28;
    v14 = v110;
    MEMORY[0x1B5E44758](v32, -1, -1);

  }
  else
  {

  }
  if ((ConversationRequestProcessor.checkPrerequisitesAndMaybeCacheCandidateMessage(forRCInput:resultCandidateId:messageToCacheIfNotInActiveTurn:)(v23, v122, v123, (uint64_t)v124) & 1) == 0)
  {
    v39 = v23;
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc();
      v43 = swift_slowAlloc();
      v126[0] = v43;
      *(_DWORD *)v42 = 136315394;
      v44 = v116;
      MessageBase.messageId.getter();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v45 = dispatch thunk of CustomStringConvertible.description.getter();
      v47 = v46;
      v117[1](v44, v11);
      v127 = (void (*)(_QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2080;
      swift_getObjectType();
      v48 = _typeName(_:qualified:)();
      v127 = (void (*)(_QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v40, v41, "Message id %s of type %s did not meet pre-requisites for handleCandidateMessage: Ignoring", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v43, -1, -1);
      MEMORY[0x1B5E44758](v42, -1, -1);

    }
    else
    {

    }
    return;
  }
  v33 = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 528))();
  if (v33)
  {
    v34 = v33;
    v35 = (uint64_t *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v37 = *(_QWORD *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v36 = *(_QWORD *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
    swift_bridgeObjectRetain();
    if (v37 == RequestMessageBase.requestId.getter() && v36 == v38)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v60 & 1) == 0)
      {
        v70 = v23;
        swift_retain_n();
        v71 = v70;
        v72 = Logger.logObject.getter();
        v73 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v72, v73))
        {
          v74 = swift_slowAlloc();
          v75 = swift_slowAlloc();
          v126[0] = v75;
          *(_DWORD *)v74 = 136315650;
          swift_getObjectType();
          v76 = _typeName(_:qualified:)();
          v122 = v34;
          v127 = (void (*)(_QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 12) = 2080;
          v78 = RequestMessageBase.requestId.getter();
          v127 = (void (*)(_QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 22) = 2080;
          v80 = *v35;
          v81 = v35[1];
          swift_bridgeObjectRetain();
          v127 = (void (*)(_QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v72, v73, "%s request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v74, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v75, -1, -1);
          MEMORY[0x1B5E44758](v74, -1, -1);
LABEL_35:
          swift_release();

          return;
        }

LABEL_37:
        swift_release_n();
        return;
      }
    }
    v61 = v34 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    v62 = *(void (***)(char *, uint64_t))(v14 + 16);
    v63 = v121;
    ((void (*)(NSObject *, uint64_t, uint64_t))v62)(v121, v61, v13);
    v64 = v118;
    v65 = *(_QWORD *)(v118 + 16);
    v123 = v61;
    if (v65)
    {
      v116 = v23;
      v117 = v62;
      v112 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
      v66 = v120;
      ((void (*)(os_log_t, unint64_t, uint64_t))v62)(v120, v118 + v112, v13);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D0]);
      swift_bridgeObjectRetain();
      v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      v124 = *(void (**)(os_log_t, uint64_t))(v14 + 8);
      v124(v66, v13);
      if ((v67 & 1) != 0)
      {
        swift_bridgeObjectRelease();
LABEL_39:
        v124(v63, v13);
        v108 = ConversationRequestProcessor.makeResultCandidateState(from:)();
        (*(void (**)(uint64_t))(*(_QWORD *)v108 + 384))(3);
        if ((v114 & 1) != 0)
          ConversationRequestProcessorTurnState.updateResultCandidateState(_:)(v108);
        else
          ConversationRequestProcessorTurnState.addResultCandidateState(_:)(v108);
        swift_release();
        swift_release();
        return;
      }
      if (v65 != 1)
      {
        v119 = v13;
        v122 = v34;
        v82 = *(_QWORD *)(v14 + 72);
        v83 = v64 + v82 + v112;
        v84 = 1;
        v69 = v117;
        v85 = v119;
        while (1)
        {
          v86 = v120;
          ((void (*)(os_log_t, unint64_t, uint64_t))v69)(v120, v83, v85);
          v87 = v84 + 1;
          if (__OFADD__(v84, 1))
          {
            __break(1u);
            JUMPOUT(0x1B4D72E84);
          }
          v88 = dispatch thunk of static Equatable.== infix(_:_:)();
          v89 = v86;
          v90 = v88;
          v124(v89, v85);
          if ((v90 & 1) != 0)
            break;
          ++v84;
          v83 += v82;
          if (v87 == v65)
          {
            swift_bridgeObjectRelease();
            v63 = v121;
            v34 = v122;
            v13 = v119;
            v23 = v116;
            goto LABEL_32;
          }
        }
        swift_bridgeObjectRelease();
        v63 = v121;
        v13 = v119;
        goto LABEL_39;
      }
      swift_bridgeObjectRelease();
      v23 = v116;
      v69 = v117;
LABEL_32:
      v68 = (void (*)(char *, uint64_t))v124;
      v124(v63, v13);
    }
    else
    {
      v68 = *(void (**)(char *, uint64_t))(v14 + 8);
      v69 = v62;
      v68((char *)v63, v13);
    }
    v91 = v23;
    swift_retain_n();
    v92 = v13;
    v93 = v91;
    v94 = Logger.logObject.getter();
    v95 = static os_log_type_t.error.getter();
    v96 = v95;
    if (os_log_type_enabled(v94, v95))
    {
      v97 = swift_slowAlloc();
      v98 = swift_slowAlloc();
      LODWORD(v121) = v96;
      v99 = (_QWORD *)v98;
      v124 = (void (*)(os_log_t, uint64_t))swift_slowAlloc();
      v125 = (uint64_t)v93;
      v127 = (void (*)(_QWORD, _QWORD))v124;
      *(_DWORD *)v97 = 138412546;
      v120 = v94;
      v100 = v93;
      v122 = v34;
      v101 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v99 = v93;

      *(_WORD *)(v97 + 12) = 2080;
      v102 = v68;
      v103 = v113;
      ((void (*)(char *, uint64_t, uint64_t))v69)(v113, v123, v92);
      v104 = RequestType.rawValue.getter();
      v106 = v105;
      v102(v103, v92);
      v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v106, (uint64_t *)&v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v72 = v120;
      _os_log_impl(&dword_1B4BE6000, v120, (os_log_type_t)v121, "%@ is not supported for this requestType: %s", (uint8_t *)v97, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v99, -1, -1);
      v107 = v124;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v107, -1, -1);
      MEMORY[0x1B5E44758](v97, -1, -1);
      goto LABEL_35;
    }

    goto LABEL_37;
  }
  v50 = v23;
  swift_retain_n();
  v51 = v50;
  v52 = Logger.logObject.getter();
  v53 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = a7;
    v55 = swift_slowAlloc();
    v126[0] = swift_slowAlloc();
    *(_DWORD *)v55 = 136315394;
    swift_getObjectType();
    v56 = _typeName(_:qualified:)();
    v127 = (void (*)(_QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v58 = swift_bridgeObjectRelease();
    *(_WORD *)(v55 + 12) = 2080;
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 368))(v58);
    __asm { BR              X10 }
  }

  swift_release_n();
}

void specialized ConversationRequestProcessor.makeResultCandidateStatesForMultiUser(from:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char **v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  id v48;
  unsigned int v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  NSObject *v73;
  os_log_type_t v74;
  _BOOL4 v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t (*v80)(uint64_t);
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  id v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  __int128 v91;
  id *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  int64_t v103;
  uint64_t v104;
  id v105;
  unint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t v111;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v2);
  v97 = (char *)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1E0C80A78](v4);
  v102 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v6);
  v101 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1E0C80A78](v100);
  v99 = (int64_t *)((char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for UserID();
  v108 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v98 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v87 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage)?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v87 - v18;
  v111 = MEMORY[0x1E0DEE9D8];
  v107 = a1;
  v20 = MUXAsrResultCandidateMessage.speechPackageDict.getter();
  v103 = 0;
  v22 = *(_QWORD *)(v20 + 64);
  v88 = v20 + 64;
  v23 = 1 << *(_BYTE *)(v20 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v22;
  v92 = &v110;
  v93 = v20;
  v89 = (unint64_t)(v23 + 63) >> 6;
  v87 = v89 - 1;
  v26 = &selRef_reason;
  *(_QWORD *)&v21 = 136315394;
  v91 = v21;
  v90 = MEMORY[0x1E0DEE9B8] + 8;
  v104 = v9;
  v95 = v19;
  v96 = v17;
  v94 = v13;
  if ((v24 & v22) == 0)
    goto LABEL_6;
LABEL_4:
  v27 = __clz(__rbit64(v25));
  v28 = (v25 - 1) & v25;
  v29 = v27 | (v103 << 6);
  while (2)
  {
    v30 = v93;
    (*(void (**)(char *, unint64_t, uint64_t))(v108 + 16))(v17, *(_QWORD *)(v93 + 48) + *(_QWORD *)(v108 + 72) * v29, v9);
    v31 = *(_QWORD *)(v30 + 56);
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage));
    v33 = *(void **)(v31 + 8 * v29);
    *(_QWORD *)&v17[*(int *)(v32 + 48)] = v33;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v17, 0, 1, v32);
    v34 = v33;
    while (1)
    {
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v17, (uint64_t)v19, &demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage)?);
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage));
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v19, 1, v39) == 1)
      {
        swift_release();
        return;
      }
      v40 = *(void **)&v19[*(int *)(v39 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v13, v19, v9);
      v41 = (void *)MUXAsrResultCandidateMessage.voiceIdScoreCard.getter();
      v42 = objc_msgSend(v41, sel_spIdKnownUserScores);

      if (!v42)
        goto LABEL_46;
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      v43 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      v44 = UserID.sharedUserId.getter();
      if (*(_QWORD *)(v43 + 16) && (v46 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45), (v47 & 1) != 0))
      {
        v48 = *(id *)(*(_QWORD *)(v43 + 56) + 8 * v46);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v49 = objc_msgSend(v48, sel_intValue);

      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v49 = -1;
      }
      v50 = (void *)MUXAsrResultCandidateMessage.voiceIdScoreCard.getter();
      v51 = objc_msgSend(v50, v26[155]);

      v106 = v28;
      if (v51)
      {
        v52 = (void *)MUXAsrResultCandidateMessage.voiceIdScoreCard.getter();
        v53 = objc_msgSend(v52, v26[155]);

        if (!v53)
          goto LABEL_47;
        v54 = objc_msgSend(v53, sel_intValue);

      }
      else
      {
        v54 = 45;
      }
      v110 = objc_msgSend(v40, sel_resultCandidateId, v87);
      v55 = dispatch thunk of CustomStringConvertible.description.getter();
      v57 = v56;
      type metadata accessor for SpeechContext();
      v58 = swift_allocObject();
      *(_QWORD *)(v58 + 32) = 0;
      *(_QWORD *)(v58 + 40) = 0;
      *(_BYTE *)(v58 + 48) = 1;
      *(_QWORD *)(v58 + 16) = v40;
      v105 = v40;
      v59 = objc_msgSend(v105, sel_recognition);
      v60 = objc_msgSend(v59, sel_aceRecognition);

      *(_QWORD *)(v58 + 24) = v60;
      v61 = (uint64_t)v99;
      *v99 = v58;
      swift_storeEnumTagMultiPayload();
      v62 = (uint64_t)v98;
      v9 = v104;
      (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v98, v13, v104);
      v63 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v64 = (uint64_t)v101;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v101, 1, 1, v63);
      v65 = type metadata accessor for ExecutionLocation();
      v66 = (uint64_t)v102;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v102, 1, 1, v65);
      v67 = type metadata accessor for ServerFallbackReason();
      v68 = (uint64_t)v97;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v97, 1, 1, v67);
      type metadata accessor for ResultCandidateState(0);
      swift_allocObject();
      LOBYTE(v110) = 0;
      v69 = ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:)(v55, v57, v61, v62, v49, 0, 0, v54, v64, v66, v68);
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v70 = type metadata accessor for Logger();
      __swift_project_value_buffer(v70, (uint64_t)static Logger.conversationBridge);
      v71 = v107;
      swift_retain_n();
      v72 = v71;
      v73 = Logger.logObject.getter();
      v74 = static os_log_type_t.debug.getter();
      v75 = os_log_type_enabled(v73, v74);
      v17 = v96;
      if (v75)
      {
        v76 = swift_slowAlloc();
        v77 = (id)swift_slowAlloc();
        v110 = v77;
        *(_DWORD *)v76 = v91;
        v78 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
        v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, (uint64_t *)&v110);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v76 + 12) = 2080;
        v80 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 800);
        v81 = swift_retain();
        v82 = v80(v81);
        v84 = v83;
        swift_release();
        v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v84, (uint64_t *)&v110);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v73, v74, "For top level rcId %s, created %s", (uint8_t *)v76, 0x16u);
        swift_arrayDestroy();
        v85 = v77;
        v9 = v104;
        MEMORY[0x1B5E44758](v85, -1, -1);
        MEMORY[0x1B5E44758](v76, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v13 = v94;
      v25 = v106;
      v86 = swift_retain();
      MEMORY[0x1B5E43498](v86);
      v19 = v95;
      v26 = &selRef_reason;
      if (*(_QWORD *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      swift_release();
      (*(void (**)(char *, uint64_t))(v108 + 8))(v13, v9);
      if (v25)
        goto LABEL_4;
LABEL_6:
      v35 = v103 + 1;
      if (__OFADD__(v103, 1))
      {
        __break(1u);
        goto LABEL_45;
      }
      if (v35 < v89)
      {
        v36 = *(_QWORD *)(v88 + 8 * v35);
        if (v36)
          goto LABEL_9;
        v37 = v103 + 2;
        ++v103;
        if (v35 + 1 < v89)
        {
          v36 = *(_QWORD *)(v88 + 8 * v37);
          if (v36)
            goto LABEL_12;
          v103 = v35 + 1;
          if (v35 + 2 < v89)
          {
            v36 = *(_QWORD *)(v88 + 8 * (v35 + 2));
            if (v36)
            {
              v35 += 2;
              goto LABEL_9;
            }
            v37 = v35 + 3;
            v103 = v35 + 2;
            if (v35 + 3 < v89)
              break;
          }
        }
      }
LABEL_23:
      v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage));
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v17, 1, 1, v38);
      v28 = 0;
    }
    v36 = *(_QWORD *)(v88 + 8 * v37);
    if (v36)
    {
LABEL_12:
      v35 = v37;
LABEL_9:
      v28 = (v36 - 1) & v36;
      v29 = __clz(__rbit64(v36)) + (v35 << 6);
      v103 = v35;
      continue;
    }
    break;
  }
  while (1)
  {
    v35 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v35 >= v89)
    {
      v103 = v87;
      goto LABEL_23;
    }
    v36 = *(_QWORD *)(v88 + 8 * v35);
    ++v37;
    if (v36)
      goto LABEL_9;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
}

uint64_t specialized ConversationRequestProcessor.makeResultCandidateState(from:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UserID();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v17 = v16;
  *(_QWORD *)v14 = TextBasedResultCandidateMessage.utterance.getter();
  *((_QWORD *)v14 + 1) = v18;
  *((_OWORD *)v14 + 1) = 0u;
  *((_OWORD *)v14 + 2) = 0u;
  swift_storeEnumTagMultiPayload();
  UserIdAwareResultCandidateMessageBase.userId.getter();
  v19 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v8, 1, 1, v19);
  v20 = type metadata accessor for ExecutionLocation();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v5, 1, 1, v20);
  v21 = type metadata accessor for ServerFallbackReason();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v2, 1, 1, v21);
  type metadata accessor for ResultCandidateState(0);
  swift_allocObject();
  LOBYTE(v35) = 1;
  v22 = ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:)(v15, v17, (uint64_t)v14, (uint64_t)v11, 0x100000000, 0, 1, 0x100000000, (uint64_t)v8, (uint64_t)v5, (uint64_t)v2);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    v35 = v27;
    *(_DWORD *)v26 = 136315138;
    v28 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 800);
    v29 = swift_retain();
    v30 = v28(v29);
    v32 = v31;
    swift_release();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v24, v25, "Created %s", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v27, -1, -1);
    MEMORY[0x1B5E44758](v26, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return v22;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UserID();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v17 = v16;
  GestureBasedResultCandidateMessage.gesture.getter();
  swift_storeEnumTagMultiPayload();
  UserIdAwareResultCandidateMessageBase.userId.getter();
  v18 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v8, 1, 1, v18);
  v19 = type metadata accessor for ExecutionLocation();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v5, 1, 1, v19);
  v20 = type metadata accessor for ServerFallbackReason();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v2, 1, 1, v20);
  type metadata accessor for ResultCandidateState(0);
  swift_allocObject();
  LOBYTE(v34) = 1;
  v21 = ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:)(v15, v17, (uint64_t)v14, (uint64_t)v11, 0x100000000, 0, 1, 0x100000000, (uint64_t)v8, (uint64_t)v5, (uint64_t)v2);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    v34 = v26;
    *(_DWORD *)v25 = 136315138;
    v27 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 800);
    v28 = swift_retain();
    v29 = v27(v28);
    v31 = v30;
    swift_release();
    v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v23, v24, "Created %s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v26, -1, -1);
    MEMORY[0x1B5E44758](v25, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return v21;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v0);
  v43 = (char *)&v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UserID();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (uint64_t *)((char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  v41 = v15;
  v42 = v14;
  v16 = TextBasedTRPCandidateMessage.utterance.getter();
  v18 = v17;
  v19 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  v21 = v20;
  v22 = TextBasedTRPCandidateMessage.tcuId.getter();
  *v13 = v16;
  v13[1] = v18;
  v13[2] = v19;
  v13[3] = v21;
  v13[4] = v22;
  v13[5] = v23;
  swift_storeEnumTagMultiPayload();
  TRPCandidateRequestMessageBase.userId.getter();
  v24 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v7, 1, 1, v24);
  v25 = type metadata accessor for ExecutionLocation();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v4, 1, 1, v25);
  v26 = type metadata accessor for ServerFallbackReason();
  v27 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v43, 1, 1, v26);
  type metadata accessor for ResultCandidateState(0);
  swift_allocObject();
  LOBYTE(v45) = 1;
  v28 = ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:)(v42, v41, (uint64_t)v13, (uint64_t)v10, 0x100000000, 0, 1, 0x100000000, (uint64_t)v7, (uint64_t)v4, v27);
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v45 = v33;
    *(_DWORD *)v32 = 136315138;
    v34 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 800);
    v35 = swift_retain();
    v36 = v34(v35);
    v38 = v37;
    swift_release();
    v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v30, v31, "Created %s", v32, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v33, -1, -1);
    MEMORY[0x1B5E44758](v32, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return v28;
}

void specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(void *a1, uint64_t a2, void (*a3)(os_log_t, unint64_t, uint64_t), uint64_t a4, uint64_t a5, int a6, unint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint8_t *v28;
  _QWORD *v29;
  char *v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t);
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  os_log_t v65;
  uint64_t v66;
  char v67;
  void (*v68)(os_log_t, uint64_t);
  void (*v69)(char *, uint64_t);
  char *v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_t v86;
  uint64_t v87;
  char v88;
  os_log_t v89;
  char v90;
  char *v91;
  uint64_t v92;
  char *v93;
  NSObject *v94;
  os_log_type_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  char *v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  void (*v107)(os_log_t, unint64_t, uint64_t);
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  int v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  os_log_t v123;
  NSObject *v124;
  uint64_t v125;
  void (*v126)(os_log_t, unint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128[3];
  void (*v129)(_QWORD, _QWORD, _QWORD);

  v116 = a8;
  v115 = a6;
  v125 = a2;
  v126 = a3;
  v12 = type metadata accessor for UUID();
  v118 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v117 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for RequestType();
  v120 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v114 = (char *)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v123 = (os_log_t)((char *)&v111 - v18);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v111 - v19;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
  v23 = a1;
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  v26 = os_log_type_enabled(v24, v25);
  v119 = a4;
  v124 = v20;
  if (v26)
  {
    v121 = v22;
    v27 = swift_slowAlloc();
    v113 = a7;
    v28 = (uint8_t *)v27;
    v29 = (_QWORD *)swift_slowAlloc();
    v112 = a5;
    v122 = v14;
    *(_DWORD *)v28 = 138412290;
    v128[0] = (uint64_t)v23;
    v30 = v23;
    v14 = v122;
    a5 = v112;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v29 = v23;

    v22 = v121;
    _os_log_impl(&dword_1B4BE6000, v24, v25, "ConversationBridge handling message: %@", v28, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v29, -1, -1);
    v31 = v28;
    a7 = v113;
    MEMORY[0x1B5E44758](v31, -1, -1);

  }
  else
  {

  }
  if ((ConversationRequestProcessor.checkPrerequisitesAndMaybeCacheCandidateMessage(forRCInput:resultCandidateId:messageToCacheIfNotInActiveTurn:)(v23, v125, (uint64_t)v126, a5) & 1) == 0)
  {
    v38 = v23;
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc();
      v42 = swift_slowAlloc();
      v128[0] = v42;
      *(_DWORD *)v41 = 136315394;
      v43 = v117;
      MessageBase.messageId.getter();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v44 = dispatch thunk of CustomStringConvertible.description.getter();
      v46 = v45;
      (*(void (**)(char *, uint64_t))(v118 + 8))(v43, v12);
      v129 = (void (*)(_QWORD, _QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v41 + 12) = 2080;
      swift_getObjectType();
      v47 = _typeName(_:qualified:)();
      v129 = (void (*)(_QWORD, _QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v39, v40, "Message id %s of type %s did not meet pre-requisites for handleCandidateMessage: Ignoring", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v42, -1, -1);
      MEMORY[0x1B5E44758](v41, -1, -1);

    }
    else
    {

    }
    return;
  }
  v32 = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 528))();
  if (v32)
  {
    v33 = v32;
    v121 = v22;
    v34 = (uint64_t *)(v32 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v36 = *(_QWORD *)(v32 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v35 = *(_QWORD *)(v32 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
    swift_bridgeObjectRetain();
    if (v36 == RequestMessageBase.requestId.getter() && v35 == v37)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v58 & 1) == 0)
      {
        v70 = v23;
        swift_retain_n();
        v71 = v70;
        v72 = Logger.logObject.getter();
        v73 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v72, v73))
        {
          v74 = swift_slowAlloc();
          v75 = swift_slowAlloc();
          v128[0] = v75;
          *(_DWORD *)v74 = 136315650;
          swift_getObjectType();
          v76 = _typeName(_:qualified:)();
          v118 = v33;
          v129 = (void (*)(_QWORD, _QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 12) = 2080;
          v78 = RequestMessageBase.requestId.getter();
          v129 = (void (*)(_QWORD, _QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 22) = 2080;
          v80 = *v34;
          v81 = v34[1];
          swift_bridgeObjectRetain();
          v129 = (void (*)(_QWORD, _QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v72, v73, "%s request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v74, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v75, -1, -1);
          MEMORY[0x1B5E44758](v74, -1, -1);
LABEL_35:
          swift_release();

          return;
        }

LABEL_37:
        swift_release_n();
        return;
      }
    }
    v59 = v33 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    v60 = v120;
    v61 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 16);
    v62 = v124;
    v61((char *)v124, v59, v14);
    v63 = v119;
    v64 = *(_QWORD *)(v119 + 16);
    v125 = v59;
    if (v64)
    {
      v117 = v23;
      v113 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
      v65 = v123;
      v126 = (void (*)(os_log_t, unint64_t, uint64_t))v61;
      v61((char *)v123, v119 + v113, v14);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D0]);
      swift_bridgeObjectRetain();
      v66 = v60;
      v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      v68 = *(void (**)(os_log_t, uint64_t))(v66 + 8);
      v68(v65, v14);
      if ((v67 & 1) != 0)
      {
        swift_bridgeObjectRelease();
LABEL_39:
        v68(v62, v14);
        v108 = (_QWORD *)specialized ConversationRequestProcessor.makeResultCandidateState(from:)();
        (*(void (**)(uint64_t))(*v108 + 384))(2);
        v109 = v108[3];
        v110 = (_QWORD *)(v116 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID);
        *v110 = v108[2];
        v110[1] = v109;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if ((v115 & 1) != 0)
          ConversationRequestProcessorTurnState.updateResultCandidateState(_:)((uint64_t)v108);
        else
          ConversationRequestProcessorTurnState.addResultCandidateState(_:)((uint64_t)v108);
        swift_release();
        swift_release();
        return;
      }
      v23 = v117;
      if (v64 != 1)
      {
        v122 = v14;
        v118 = v33;
        v82 = *(_QWORD *)(v120 + 72);
        v83 = v63 + v82 + v113;
        v84 = 1;
        v85 = v122;
        while (1)
        {
          v86 = v123;
          v126(v123, v83, v85);
          v87 = v84 + 1;
          if (__OFADD__(v84, 1))
          {
            __break(1u);
            JUMPOUT(0x1B4D720FCLL);
          }
          v88 = dispatch thunk of static Equatable.== infix(_:_:)();
          v89 = v86;
          v90 = v88;
          v68(v89, v85);
          if ((v90 & 1) != 0)
            break;
          ++v84;
          v83 += v82;
          if (v87 == v64)
          {
            swift_bridgeObjectRelease();
            v33 = v118;
            v14 = v122;
            v62 = v124;
            goto LABEL_32;
          }
        }
        swift_bridgeObjectRelease();
        v14 = v122;
        v62 = v124;
        goto LABEL_39;
      }
      swift_bridgeObjectRelease();
LABEL_32:
      v61 = (void (*)(char *, uint64_t, uint64_t))v126;
      v69 = (void (*)(char *, uint64_t))v68;
      v68(v62, v14);
    }
    else
    {
      v69 = *(void (**)(char *, uint64_t))(v60 + 8);
      v69((char *)v62, v14);
    }
    v91 = v23;
    swift_retain_n();
    v92 = v14;
    v93 = v91;
    v94 = Logger.logObject.getter();
    v95 = static os_log_type_t.error.getter();
    v96 = v95;
    if (os_log_type_enabled(v94, v95))
    {
      v97 = swift_slowAlloc();
      v98 = swift_slowAlloc();
      LODWORD(v124) = v96;
      v99 = (_QWORD *)v98;
      v126 = (void (*)(os_log_t, unint64_t, uint64_t))swift_slowAlloc();
      v127 = (uint64_t)v93;
      v129 = (void (*)(_QWORD, _QWORD, _QWORD))v126;
      *(_DWORD *)v97 = 138412546;
      v123 = v94;
      v100 = v93;
      v118 = v33;
      v101 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v99 = v93;

      *(_WORD *)(v97 + 12) = 2080;
      v102 = v69;
      v103 = v114;
      v61(v114, v125, v92);
      v104 = RequestType.rawValue.getter();
      v106 = v105;
      v102(v103, v92);
      v127 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v106, (uint64_t *)&v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v72 = v123;
      _os_log_impl(&dword_1B4BE6000, v123, (os_log_type_t)v124, "%@ is not supported for this requestType: %s", (uint8_t *)v97, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v99, -1, -1);
      v107 = v126;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v107, -1, -1);
      MEMORY[0x1B5E44758](v97, -1, -1);
      goto LABEL_35;
    }

    goto LABEL_37;
  }
  v49 = v23;
  swift_retain_n();
  v50 = v49;
  v51 = Logger.logObject.getter();
  v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = swift_slowAlloc();
    v128[0] = swift_slowAlloc();
    *(_DWORD *)v53 = 136315394;
    swift_getObjectType();
    v54 = _typeName(_:qualified:)();
    v129 = (void (*)(_QWORD, _QWORD, _QWORD))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v56 = swift_bridgeObjectRelease();
    *(_WORD *)(v53 + 12) = 2080;
    (*(void (**)(uint64_t))(*(_QWORD *)a7 + 368))(v56);
    __asm { BR              X10 }
  }

  swift_release_n();
}

void specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  char *v28;
  uint8_t *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v62;
  uint64_t v63;
  void (**v64)(char *, uint64_t);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  void (*v70)(char *, NSObject *);
  void (*v71)(char *, NSObject *);
  void (**v72)(char *, uint64_t);
  char *v73;
  char *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  os_log_t v88;
  char *v89;
  uint64_t v90;
  char v91;
  char *v92;
  char v93;
  char *v94;
  NSObject *v95;
  char *v96;
  NSObject *v97;
  os_log_type_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  char *v104;
  void (*v105)(char *, NSObject *);
  char *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  objc_class *v115;
  unint64_t v116;
  char *v117;
  int v118;
  char *v119;
  void (**v120)(char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  os_log_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130[3];
  char *v131;

  v118 = a6;
  v121 = a4;
  v127 = a2;
  v128 = a3;
  v13 = type metadata accessor for UUID();
  v120 = *(void (***)(char *, uint64_t))(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v119 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for RequestType();
  isa = v15[-1].isa;
  v17 = MEMORY[0x1E0C80A78](v15);
  v117 = (char *)&v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v125 = (char *)&v113 - v20;
  MEMORY[0x1E0C80A78](v19);
  v126 = (char *)&v113 - v21;
  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
  v24 = a1;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v116 = a7;
    v27 = swift_slowAlloc();
    v115 = isa;
    v28 = v24;
    v29 = (uint8_t *)v27;
    v30 = swift_slowAlloc();
    v114 = a5;
    v31 = (_QWORD *)v30;
    v122 = a8;
    v123 = v23;
    v124 = v15;
    *(_DWORD *)v29 = 138412290;
    v130[0] = (uint64_t)v28;
    v32 = v28;
    v23 = v123;
    v15 = v124;
    a8 = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v31 = v28;

    a7 = v116;
    _os_log_impl(&dword_1B4BE6000, v25, v26, "ConversationBridge handling message: %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v33 = v31;
    a5 = v114;
    MEMORY[0x1B5E44758](v33, -1, -1);
    v34 = v29;
    v24 = v28;
    isa = v115;
    MEMORY[0x1B5E44758](v34, -1, -1);

  }
  else
  {

  }
  if ((ConversationRequestProcessor.checkPrerequisitesAndMaybeCacheCandidateMessage(forRCInput:resultCandidateId:messageToCacheIfNotInActiveTurn:)(v24, v127, v128, a5) & 1) == 0)
  {
    v41 = v24;
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = swift_slowAlloc();
      v45 = swift_slowAlloc();
      v130[0] = v45;
      *(_DWORD *)v44 = 136315394;
      v46 = v119;
      MessageBase.messageId.getter();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v47 = dispatch thunk of CustomStringConvertible.description.getter();
      v49 = v48;
      v120[1](v46, v13);
      v131 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 12) = 2080;
      swift_getObjectType();
      v50 = _typeName(_:qualified:)();
      v131 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v42, v43, "Message id %s of type %s did not meet pre-requisites for handleCandidateMessage: Ignoring", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v45, -1, -1);
      MEMORY[0x1B5E44758](v44, -1, -1);

    }
    else
    {

    }
    return;
  }
  v35 = (*(uint64_t (**)(void))(*(_QWORD *)a7 + 528))();
  if (v35)
  {
    v36 = v35;
    v122 = a8;
    v123 = v23;
    v37 = (uint64_t *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v39 = *(_QWORD *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    v38 = *(_QWORD *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
    swift_bridgeObjectRetain();
    if (v39 == RequestMessageBase.requestId.getter() && v38 == v40)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v62 & 1) == 0)
      {
        v73 = v24;
        swift_retain_n();
        v74 = v73;
        v75 = Logger.logObject.getter();
        v76 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v75, v76))
        {
          v77 = swift_slowAlloc();
          v78 = swift_slowAlloc();
          v130[0] = v78;
          *(_DWORD *)v77 = 136315650;
          swift_getObjectType();
          v79 = _typeName(_:qualified:)();
          v127 = v36;
          v131 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, v130);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v77 + 12) = 2080;
          v81 = RequestMessageBase.requestId.getter();
          v131 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v130);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v77 + 22) = 2080;
          v83 = *v37;
          v84 = v37[1];
          swift_bridgeObjectRetain();
          v131 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, v130);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B4BE6000, v75, v76, "%s request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v77, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v78, -1, -1);
          MEMORY[0x1B5E44758](v77, -1, -1);
LABEL_35:
          swift_release();

          return;
        }

LABEL_37:
        swift_release_n();
        return;
      }
    }
    v63 = v36 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    v64 = (void (**)(char *, uint64_t))*((_QWORD *)isa + 2);
    v65 = v126;
    ((void (*)(char *, uint64_t, NSObject *))v64)(v126, v63, v15);
    v66 = v121;
    v67 = *(_QWORD *)(v121 + 16);
    v128 = v63;
    if (v67)
    {
      v119 = v24;
      v120 = v64;
      v116 = (*((unsigned __int8 *)isa + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)isa + 80);
      v68 = v125;
      ((void (*)(char *, unint64_t, NSObject *))v64)(v125, v121 + v116, v15);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E8C0], MEMORY[0x1E0D9E8D0]);
      swift_bridgeObjectRetain();
      v69 = dispatch thunk of static Equatable.== infix(_:_:)();
      v70 = (void (*)(char *, NSObject *))*((_QWORD *)isa + 1);
      v70(v68, v15);
      if ((v69 & 1) != 0)
      {
        swift_bridgeObjectRelease();
LABEL_39:
        v111 = v122;
        v70(v65, v15);
        v112 = a9(v111);
        (*(void (**)(uint64_t))(*(_QWORD *)v112 + 384))(1);
        if ((v118 & 1) != 0)
          ConversationRequestProcessorTurnState.updateResultCandidateState(_:)(v112);
        else
          ConversationRequestProcessorTurnState.addResultCandidateState(_:)(v112);
        swift_release();
        swift_release();
        return;
      }
      if (v67 != 1)
      {
        v124 = v15;
        v127 = v36;
        v85 = *((_QWORD *)isa + 9);
        v86 = v66 + v85 + v116;
        v87 = 1;
        v72 = v120;
        v88 = v124;
        while (1)
        {
          v89 = v125;
          ((void (*)(char *, unint64_t, os_log_t))v72)(v125, v86, v88);
          v90 = v87 + 1;
          if (__OFADD__(v87, 1))
          {
            __break(1u);
            JUMPOUT(0x1B4D74010);
          }
          v91 = dispatch thunk of static Equatable.== infix(_:_:)();
          v92 = v89;
          v93 = v91;
          v70(v92, v88);
          if ((v93 & 1) != 0)
            break;
          ++v87;
          v86 += v85;
          if (v90 == v67)
          {
            swift_bridgeObjectRelease();
            v65 = v126;
            v36 = v127;
            v15 = v124;
            v24 = v119;
            goto LABEL_32;
          }
        }
        swift_bridgeObjectRelease();
        v65 = v126;
        v15 = v124;
        goto LABEL_39;
      }
      swift_bridgeObjectRelease();
      v24 = v119;
      v72 = v120;
LABEL_32:
      v71 = v70;
      v70(v65, v15);
    }
    else
    {
      v71 = (void (*)(char *, NSObject *))*((_QWORD *)isa + 1);
      v72 = v64;
      v71(v65, v15);
    }
    v94 = v24;
    swift_retain_n();
    v95 = v15;
    v96 = v94;
    v97 = Logger.logObject.getter();
    v98 = static os_log_type_t.error.getter();
    v99 = v98;
    if (os_log_type_enabled(v97, v98))
    {
      v100 = swift_slowAlloc();
      v101 = swift_slowAlloc();
      LODWORD(v125) = v99;
      v102 = (_QWORD *)v101;
      v126 = (char *)swift_slowAlloc();
      v131 = v126;
      *(_DWORD *)v100 = 138412546;
      v124 = v97;
      v129 = (uint64_t)v96;
      v103 = v96;
      v127 = v36;
      v104 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v102 = v96;

      *(_WORD *)(v100 + 12) = 2080;
      v105 = v71;
      v106 = v117;
      ((void (*)(char *, uint64_t, NSObject *))v72)(v117, v128, v95);
      v107 = RequestType.rawValue.getter();
      v109 = v108;
      v105(v106, v95);
      v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v109, (uint64_t *)&v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      v75 = v124;
      _os_log_impl(&dword_1B4BE6000, v124, (os_log_type_t)v125, "%@ is not supported for this requestType: %s", (uint8_t *)v100, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v102, -1, -1);
      v110 = v126;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v110, -1, -1);
      MEMORY[0x1B5E44758](v100, -1, -1);
      goto LABEL_35;
    }

    goto LABEL_37;
  }
  v52 = v24;
  swift_retain_n();
  v53 = v52;
  v54 = Logger.logObject.getter();
  v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = a7;
    v57 = swift_slowAlloc();
    v130[0] = swift_slowAlloc();
    *(_DWORD *)v57 = 136315394;
    swift_getObjectType();
    v58 = _typeName(_:qualified:)();
    v131 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v60 = swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 12) = 2080;
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 368))(v60);
    __asm { BR              X10 }
  }

  swift_release_n();
}

_QWORD *specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,unsigned __int8 a27,unsigned __int8 a28)
{
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  id v38;
  char v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t Strong;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint8_t *v81;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112[24];
  ValueMetadata *v113;
  unint64_t v114;
  __int128 v115;

  v29 = v28;
  v101 = a7;
  v100 = a6;
  v99 = a5;
  v98 = a4;
  v102 = a3;
  v97 = a2;
  v96 = a1;
  v87 = a27;
  v92 = a26;
  v93 = a25;
  v106 = a24;
  v104 = a23;
  v91 = a22;
  v90 = a21;
  LODWORD(v86) = a19;
  v105 = a18;
  v107 = a16;
  v89 = a15;
  v88 = a14;
  v109 = a12;
  v111 = a11;
  v103 = a10;
  v95 = a9;
  v110 = type metadata accessor for UUID();
  v108 = *(_QWORD *)(v110 - 8);
  MEMORY[0x1E0C80A78](v110);
  v94 = (char *)&v83 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork;
  type metadata accessor for ConcurrentTaskPool();
  v32 = swift_allocObject();
  *(_QWORD *)(v32 + 16) = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v33 = swift_allocObject();
  *(_QWORD *)((char *)v28 + v31) = v32;
  v34 = (char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state;
  v34[16] = 3;
  *(_DWORD *)(v33 + 16) = 0;
  *(_QWORD *)v34 = 0;
  *((_QWORD *)v34 + 1) = 0;
  *(_QWORD *)((char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rraasCollectionTask) = 0;
  *(_QWORD *)(v32 + 24) = v33;
  *((_BYTE *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sentResultCandidateSelected) = 0;
  v35 = (_QWORD *)((char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userIdentification);
  v35[1] = 0;
  v35[2] = 0;
  *v35 = 0;
  v36 = (_QWORD *)((char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID);
  *v36 = 0;
  v36[1] = 0;
  v37 = (void *)objc_opt_self();
  swift_retain();
  swift_retain();
  swift_retain();
  v38 = objc_msgSend(v37, sel_sharedPreferences);
  v39 = AFDeviceSupportsSAE();
  v40 = objc_msgSend((id)objc_opt_self(), sel_clientWithIdentifier_, 125);
  type metadata accessor for TrialExperimentationAssetManager();
  v41 = swift_allocObject();
  v42 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(_QWORD *)(v41 + 16) = v40;
  *(_QWORD *)(v41 + 24) = v42;
  if (one-time initialization token for instance != -1)
    swift_once();
  v85 = a28;
  v43 = static SelfReflectionCurareDonator.instance;
  type metadata accessor for SelfReflectionAgent();
  v44 = swift_allocObject();
  swift_retain();
  v83 = a20;
  v45 = specialized SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(a17, a20, (uint64_t)v38, v39, v41, v43, 0, v44);
  *(_QWORD *)((char *)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent) = v45;
  outlined init with copy of ReferenceResolutionClientProtocol(v111, (uint64_t)v28 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
  v46 = a13[3];
  v47 = *(uint64_t (**)(uint64_t))(*a13 + 144);
  v48 = swift_unknownObjectRetain();
  LOBYTE(v47) = v47(v48);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(a13 + 4), (uint64_t)&v115);
  type metadata accessor for FeatureChecker();
  v49 = swift_allocObject();
  swift_retain();
  *(_BYTE *)(v49 + 16) = AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags();
  v113 = &type metadata for IntelligenceFlowFeatureFlag;
  v114 = lazy protocol witness table accessor for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag();
  LOBYTE(v43) = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
  *(_BYTE *)(v49 + 17) = v43 & 1;
  type metadata accessor for ConversationOutputSubmitter();
  v50 = swift_allocObject();
  *(_QWORD *)((char *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter) = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:messagePublisher:selfReflection:featureChecker:)(v46, v47 & 1, &v115, v45, v49, v50);
  *(_QWORD *)((char *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_decisionMaker) = v88;
  *(_QWORD *)((char *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_preExecutionActionHandler) = v89;
  v51 = v105;
  *(_QWORD *)((char *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper) = v105;
  outlined init with copy of ReferenceResolutionClientProtocol(v107, (uint64_t)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionState);
  *(_QWORD *)((char *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil) = a17;
  *((_BYTE *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isFirstRequestInSession) = v86 & 1;
  *(_QWORD *)((char *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_networkAvailabilityProvider) = v83;
  *(_QWORD *)((char *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_coreTelephonyServiceProvider) = v90;
  v52 = v91;
  outlined init with copy of ReferenceResolutionClientProtocol(v91, (uint64_t)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient);
  outlined init with copy of ReferenceResolutionClientProtocol(v104, (uint64_t)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_correctionsPlatformClient);
  outlined init with copy of ReferenceResolutionClientProtocol(v109, (uint64_t)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater);
  v53 = v92;
  *(_QWORD *)((char *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_muxContextMessage) = v92;
  v54 = (char *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId;
  v55 = type metadata accessor for UserID();
  v84 = *(_QWORD *)(v55 - 8);
  v56 = *(void (**)(char *, uint64_t))(v84 + 16);
  v86 = v55;
  v56(v54, v106);
  *((_BYTE *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) = v87 & 1;
  type metadata accessor for ConversationBridgeProcessorDelegate();
  v57 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v57 + 24) = v51;
  *(_QWORD *)((char *)v29
            + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate) = v57;
  v58 = one-time initialization token for sharedInstance;
  swift_unknownObjectRetain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v59 = v53;
  v60 = v52;
  if (v58 != -1)
    swift_once();
  v61 = static DeviceContextHelper.sharedInstance;
  v62 = (_QWORD *)((char *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextDonator);
  v62[3] = type metadata accessor for DeviceContextHelper();
  v62[4] = (uint64_t)&protocol witness table for DeviceContextHelper;
  *v62 = v61;
  v63 = v93;
  *(_QWORD *)((char *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_recentDialogTracker) = v93;
  v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v63 + 224);
  swift_retain();
  swift_retain();
  v65 = v98;
  v66 = v99;
  v67 = v102;
  v64(v98, v99, v102);
  *((_BYTE *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isAssistantEngineEnabled) = v85 & 1;
  swift_release();
  v68 = v108;
  v69 = v94;
  v70 = v110;
  (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v94, v67, v110);
  v71 = v103;
  outlined init with copy of ReferenceResolutionClientProtocol(v103, (uint64_t)&v115);
  v72 = v105;
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  v73 = v97;
  v29[12] = v96;
  v29[13] = v73;
  (*(void (**)(uint64_t, char *, uint64_t))(v68 + 32))((uint64_t)v29 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId, v69, v70);
  v29[8] = v65;
  v29[9] = v66;
  v74 = v101;
  v29[10] = v100;
  v29[11] = v74;
  outlined init with take of ReferenceResolutionClientProtocol(&v115, (uint64_t)(v29 + 3));
  v29[2] = v72;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  swift_retain();
  swift_release();
  if (Strong)
  {
    v76 = v111;
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)static Logger.conversationBridge);
    v78 = Logger.logObject.getter();
    v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v80 = 0;
      _os_log_impl(&dword_1B4BE6000, v78, v79, "executionProcessor was already set on ExecutionBridgeProcessorDelegate ignoring this operation", v80, 2u);
      v81 = v80;
      v71 = v103;
      MEMORY[0x1B5E44758](v81, -1, -1);
    }
    swift_release();

  }
  else
  {
    swift_weakAssign();
    swift_release();
    v76 = v111;
  }
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v106, v86);
  __swift_destroy_boxed_opaque_existential_1(v104);
  __swift_destroy_boxed_opaque_existential_1(v60);
  __swift_destroy_boxed_opaque_existential_1(v107);
  __swift_destroy_boxed_opaque_existential_1(v109);
  __swift_destroy_boxed_opaque_existential_1(v76);
  __swift_destroy_boxed_opaque_existential_1(v71);
  (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v67, v110);
  return v29;
}

uint64_t type metadata accessor for ConversationRequestProcessor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ConversationRequestProcessor;
  if (!type metadata singleton initialization cache for ConversationRequestProcessor)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:)(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.handleStartUnderstandingOnServerTextRequestMessage(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationRequestProcessor.handleStartUnderstandingOnServerTextRequestMessage(_:)(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.fallbackToIntelligenceFlow(prescribedTool:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ConversationRequestProcessor.fallbackToIntelligenceFlow(prescribedTool:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B4D74A0C()
{
  uint64_t v0;

  swift_release();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1B4D74A54()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1B4D74B24()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.commit(rcState:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationRequestProcessor.commit(rcState:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t objectdestroyTm_2()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater()(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.actionCandidatesGenerated(_:rcId:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ConversationRequestProcessor.actionCandidatesGenerated(_:rcId:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

void partial apply for closure #1 in ConversationRequestProcessor.makeAndSendSpeechRecognizedCommand(rcState:turn:reply:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #1 in ConversationRequestProcessor.makeAndSendSpeechRecognizedCommand(rcState:turn:reply:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16));
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.waitForSalientEntityCollection(timeout:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  v4[5] = a1;
  v4[6] = v1;
  return swift_task_switch();
}

uint64_t sub_1B4D74D28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  char v5;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 368))();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  return result;
}

uint64_t sub_1B4D74D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t (*v4)(uint64_t, void *, uint64_t);
  uint64_t v5;

  v2 = *(_QWORD *)a1;
  v3 = *(void **)(a1 + 8);
  v4 = *(uint64_t (**)(uint64_t, void *, uint64_t))(**(_QWORD **)a2 + 376);
  v5 = *(unsigned __int8 *)(a1 + 16);
  outlined copy of ConversationRequestProcessor.State(*(_QWORD *)a1, v3, v5);
  return v4(v2, v3, v5);
}

uint64_t sub_1B4D74DB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 392))();
}

uint64_t sub_1B4D74DE0(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 400))(v4);
}

uint64_t sub_1B4D74E20@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 440))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4D74E54(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 448))(*a1);
}

uint64_t sub_1B4D74E80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 464))();
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_1B4D74EB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)(uint64_t, uint64_t, void *);

  v2 = *a1;
  v3 = a1[1];
  v4 = (void *)a1[2];
  v5 = *(uint64_t (**)(uint64_t, uint64_t, void *))(**(_QWORD **)a2 + 472);
  outlined copy of ConversationRequestProcessor.UserIdentification?(*a1, v3, v4);
  return v5(v2, v3, v4);
}

uint64_t ObjC metadata update function for ConversationRequestProcessor()
{
  return type metadata accessor for ConversationRequestProcessor();
}

uint64_t type metadata completion function for ConversationRequestProcessor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UserID();
  if (v1 <= 0x3F)
    return swift_updateClassMetadata2();
  return result;
}

uint64_t method lookup function for ConversationRequestProcessor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationRequestProcessor.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.sessionState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.sessionState.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.sessionState.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.sentResultCandidateSelected.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.sentResultCandidateSelected.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.sentResultCandidateSelected.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.userIdentification.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.userIdentification.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.userIdentification.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 512))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:isAssistantEngineEnabled:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 520))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.activeTurn.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.pendingTurn.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartSpeechRequestMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartChildTextRequestMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartChildSpeechRequestMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartTextRequestMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartDirectActionRequestMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartUnderstandingOnServerTextRequestMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartLocalRequestMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartCorrectedSpeechRequestMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartIFRequestMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartCandidateRequestMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleRequestContextMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleASRResultCandidateMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 664))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleMUXASRResultCandidateMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 672))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleMultiUserTRPCandidateRequestMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 680))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleTextBasedResultCandidateMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 688))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleGestureBasedResultCandidateMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 696))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleDirectActionResultCandidateMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 704))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleNLResultCandidateMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 712))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleNLRepetitionMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 720))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.fallbackToIntelligenceFlow(prescribedTool:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 736))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handlePommesResultCandidateMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 744))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleSpeechStopDetectedMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 752))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleTRPCandidateRequestMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 760))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleTextBasedTRPCandidateMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 768))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleTTResponseMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 776))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleMultiUserStoppedListeningForSpeechContinuationMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 784))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStoppedListeningForSpeechContinuationMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 792))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStoppedListeningForTextContinuationMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 800))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.reallyHandleStoppedListeningForContinuationMessage(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 816))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.waitForPommes(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 824))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handlePommesTRPCandidateMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 832))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleUserIdentificationMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 840))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleResultSelectedMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 856))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleSpeechStopDetectedMessage(_:forTurn:withTRPCandidateState:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 864))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleResultSelectedMessage(_:forTurn:withResultCandidateState:speechRecognizedCommand:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 872))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleCancelRequestMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 880))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleAceRemoteExecutionContextUpdate(_:executionContext:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 888))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleFlowOutputResponseMessage(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 896))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.submit(executionOutput:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 904))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.close(withExecutionOutput:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 912))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.close(withExecutionOutput:errorString:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 920))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.close(withExecutionOutput:errorString:shouldFailRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 928))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.close(withExecutionOutput:needsUserInput:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 936))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.fallbackToServer(forResultCandidateId:serverFallbackReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 944))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.fallbackToInfoDomainResults(forResultCandidateId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 952))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.fetchSpeechInfo(reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 960))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.getRecentDialogs()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 968))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 976))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.willExecute(executionInputInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 984))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.getSelfReflectionDecision()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 992))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.submitExternalActivationRequest(withRequestInfo:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1000))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.synchronizedClose(_:_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1016))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.commit(rcState:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1040))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleRuntimeError(error:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1048))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.acquireConversationUserInput(forUserId:requestId:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1056))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1064))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.closeServerRequest(forExecutionRequestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1072))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.safelyCloseContextUpdater()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1096))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.buildConversationUserInput(rcState:requestType:nlResponse:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1168))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.buildUserSpecificInfo(rcState:speechPackage:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1176))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.sendResultCandidateSelected(selectedResultCandidateId:isServerFallback:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1184))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.fetchCachedAnnounceContext(forUserId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1200))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.revealAsrTranscription(for:turn:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1208))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.actionCandidatesGenerated(_:rcId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1248))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.makeAndSendSpeechRecognizedCommand(rcState:turn:reply:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1256))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.waitForSalientEntityCollection(timeout:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 1264) + *(_QWORD *)(*(_QWORD *)v1 + 1264));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

void destroy for ConversationRequestProcessor.State(uint64_t a1)
{
  outlined consume of ConversationRequestProcessor.State(*(_QWORD *)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for ConversationRequestProcessor.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ConversationRequestProcessor.State(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ConversationRequestProcessor.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  void *v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of ConversationRequestProcessor.State(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ConversationRequestProcessor.State(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ConversationRequestProcessor.State(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ConversationRequestProcessor.State(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationRequestProcessor.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationRequestProcessor.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for ConversationRequestProcessor.State(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for ConversationRequestProcessor.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConversationRequestProcessor.State()
{
  return &type metadata for ConversationRequestProcessor.State;
}

void destroy for ConversationRequestProcessor.UserIdentification(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

_QWORD *initializeBufferWithCopyOfBuffer for ConversationRequestProcessor.UserIdentification(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for ConversationRequestProcessor.UserIdentification(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[2];
  v5 = (void *)a2[2];
  a1[2] = v5;
  v6 = v5;

  return a1;
}

uint64_t assignWithTake for ConversationRequestProcessor.UserIdentification(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationRequestProcessor.UserIdentification(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationRequestProcessor.UserIdentification(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationRequestProcessor.UserIdentification()
{
  return &type metadata for ConversationRequestProcessor.UserIdentification;
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.postExecutionFinalizedMessage(requestId:selectedTrpId:selectedTcuId:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ConversationRequestProcessor.postExecutionFinalizedMessage(requestId:selectedTrpId:selectedTcuId:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t outlined init with copy of ResultCandidateType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ResultCandidateType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ResultCandidateType(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ResultCandidateType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #2 in ConversationRequestProcessor.completeRequest(completion:)(void *a1, void *a2)
{
  uint64_t v2;

  closure #2 in ConversationRequestProcessor.completeRequest(completion:)(a1, a2, *(void (**)(void *, void *))(v2 + 16));
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.completeRequest(completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ConversationRequestProcessor.completeRequest(completion:)(a1, v1);
}

uint64_t sub_1B4D75928()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.synchronizedCloseRequest()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationRequestProcessor.synchronizedCloseRequest()(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationRequestProcessor.synchronizedCloseRequest()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in ConversationRequestProcessor.synchronizedCloseRequest()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B4D759DC()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.synchronizedRetriggerOriginalRequest(rollbackRequestId:userId:reply:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ConversationRequestProcessor.synchronizedRetriggerOriginalRequest(rollbackRequestId:userId:reply:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1B4D75A00()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<Error?, Never>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(int a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Error?, Never>);
  return closure #1 in closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(a1, a2);
}

uint64_t sub_1B4D75A5C()
{
  id *v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:)(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(requestType:requestId:asrOnServer:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v10 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v10 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1B4EE7A40;
  v11 = v10 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  v12 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a1, v12);
  v13 = (_QWORD *)(v10 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *v13 = a2;
  v13[1] = a3;
  *(_BYTE *)(v10 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = a4;
  v14 = v10 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin;
  v15 = type metadata accessor for InputOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a5, v15);
  return v10;
}

void *ConversationRequestProcessorTurnState.SpeechState.speechRecognizedCommand.getter(unint64_t a1, void *a2)
{
  void *v2;
  id v3;

  if (a1 >> 62 != 1)
    return 0;
  v2 = a2;
  v3 = a2;
  return v2;
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startSpeechRequestMessage:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char started;
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;

  v19 = type metadata accessor for InputOrigin();
  v2 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RequestType();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0D9E8A0], v5);
  v9 = a1;
  v10 = RequestMessageBase.requestId.getter();
  v12 = v11;

  started = StartSpeechRequestMessage.asrOnServer.getter();
  v14 = v9;
  StartRequestMessageBase.inputOrigin.getter();

  v15 = swift_allocObject();
  *(_QWORD *)(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1B4EE7A40;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v8, v5);
  v16 = (uint64_t *)(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *v16 = v10;
  v16[1] = v12;
  *(_BYTE *)(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = started & 1;
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v4, v19);
  return v15;
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startTextRequestMessage:)(void *a1)
{
  return ConversationRequestProcessorTurnState.__allocating_init(startTextRequestMessage:)(a1, MEMORY[0x1E0D9E888]);
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startDirectActionRequestMessage:)(void *a1)
{
  return ConversationRequestProcessorTurnState.__allocating_init(startTextRequestMessage:)(a1, MEMORY[0x1E0D9E860]);
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startUnderstandingOnServerRequestMessage:)(void *a1)
{
  return ConversationRequestProcessorTurnState.__allocating_init(startTextRequestMessage:)(a1, MEMORY[0x1E0D9E880]);
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startUnderstandingOnServerTextRequestMessage:)(void *a1)
{
  return ConversationRequestProcessorTurnState.__allocating_init(startTextRequestMessage:)(a1, MEMORY[0x1E0D9E8A8]);
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startLocalRequestMessage:)(void *a1)
{
  return ConversationRequestProcessorTurnState.__allocating_init(startTextRequestMessage:)(a1, MEMORY[0x1E0D9E890]);
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startCorrectedSpeechRequestMessage:)(void *a1)
{
  return ConversationRequestProcessorTurnState.__allocating_init(startTextRequestMessage:)(a1, MEMORY[0x1E0D9E888]);
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startTextRequestMessage:)(void *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;

  v4 = type metadata accessor for InputOrigin();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RequestType();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *a2, v8);
  v12 = a1;
  v13 = RequestMessageBase.requestId.getter();
  v15 = v14;

  v16 = v12;
  StartRequestMessageBase.inputOrigin.getter();

  v17 = swift_allocObject();
  *(_QWORD *)(v17 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v17 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v17 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1B4EE7A40;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v17 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v11, v8);
  v18 = (uint64_t *)(v17 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *v18 = v13;
  v18[1] = v15;
  *(_BYTE *)(v17 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v17 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v7, v4);
  return v17;
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startIFRequestMessage:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;

  v2 = type metadata accessor for InputOrigin();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RequestType();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0D9E888], v6);
  v10 = RequestMessageBase.requestId.getter();
  v12 = v11;
  StartIFRequestMessage.inputOrigin.getter();

  v13 = swift_allocObject();
  *(_QWORD *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1B4EE7A40;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v9, v6);
  v14 = (uint64_t *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *v14 = v10;
  v14[1] = v12;
  *(_BYTE *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v13 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v5, v2);
  return v13;
}

void ConversationRequestProcessorTurnState.updateResultCandidateState(_:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t *);
  void (*v30)(uint64_t *, _QWORD);
  uint64_t *v31;
  uint64_t *v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34[4];
  uint64_t v35;

  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = (unint64_t *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  v6 = *v5;
  if (*v5 >> 62)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
    swift_retain_n();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v34[0] = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = *v5 >> 62;
      if ((_DWORD)v21)
      {
        if ((_DWORD)v21 == 1)
        {
          v22 = 0xEA00000000006465;
          v23 = 0x7463656C65536372;
        }
        else
        {
          v22 = 0xE400000000000000;
          v23 = 1701602409;
        }
      }
      else
      {
        v22 = 0x80000001B4EFA470;
        v23 = 0xD000000000000019;
      }
      v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v17, v18, "Got an ASRResultCandidateMessge/TRPCandidateRequestMessage in state %s: Ignoring", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v20, -1, -1);
      MEMORY[0x1B5E44758](v19, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
  else
  {
    v7 = (void *)v5[1];
    v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 88);
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
    swift_bridgeObjectRetain();
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
    v9 = swift_bridgeObjectRetain();
    if (*(_QWORD *)(v8(v9) + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v4, v3), (v10 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
      swift_bridgeObjectRetain_n();
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        v15 = swift_slowAlloc();
        *(_DWORD *)v14 = 136315138;
        v34[0] = v15;
        swift_bridgeObjectRetain();
        v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B4BE6000, v12, v13, "Updating ResultCandidateState with rcId %s to rcStateHolder.", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v15, -1, -1);
        MEMORY[0x1B5E44758](v14, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v29 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v6 + 104);
      swift_retain();
      v30 = (void (*)(uint64_t *, _QWORD))v29(v34);
      v32 = v31;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v35 = *v32;
      *v32 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v4, v3, isUniquelyReferenced_nonNull_native);
      *v32 = v35;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30(v34, 0);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
      swift_bridgeObjectRetain();
      v25 = Logger.logObject.getter();
      v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc();
        v28 = swift_slowAlloc();
        v34[0] = v28;
        *(_DWORD *)v27 = 136315138;
        swift_bridgeObjectRetain();
        v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B4BE6000, v25, v26, "Got a Conversation state update for RC ID %s that does not exist in the cache yet. Dropping the update.", v27, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v28, -1, -1);
        MEMORY[0x1B5E44758](v27, -1, -1);
        outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);

        outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
      }
      else
      {
        outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
        swift_bridgeObjectRelease_n();
        outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);

      }
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
    }
  }
}

uint64_t ConversationRequestProcessorTurnState.SpeechState.selectedResultCandidate.getter(unint64_t a1)
{
  if (a1 >> 62 == 1)
    return swift_retain();
  else
    return 0;
}

uint64_t ConversationRequestProcessorTurnState.SpeechState.getPendingRcState(rcId:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;

  if (a3 >> 62)
    return 0;
  v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 88);
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(a3, a4);
  v9 = swift_bridgeObjectRetain();
  v10 = v8(v9);
  if (*(_QWORD *)(v10 + 16) && (v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v12 & 1) != 0))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
    swift_retain();
  }
  else
  {
    v13 = 0;
  }
  swift_bridgeObjectRelease();
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(a3, a4);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t ConversationRequestProcessorTurnState.requestType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  v4 = type metadata accessor for RequestType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ConversationRequestProcessorTurnState.requestType.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  v4 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*ConversationRequestProcessorTurnState.requestType.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationRequestProcessorTurnState.requestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationRequestProcessorTurnState.asrOnServer.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer);
}

uint64_t ConversationRequestProcessorTurnState.inputOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin;
  v4 = type metadata accessor for InputOrigin();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void *ConversationRequestProcessorTurnState.flowPluginInfo.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void ConversationRequestProcessorTurnState.flowPluginInfo.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*ConversationRequestProcessorTurnState.flowPluginInfo.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationRequestProcessorTurnState.outputCounter.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter);
  swift_beginAccess();
  return *v1;
}

uint64_t ConversationRequestProcessorTurnState.outputCounter.setter(int a1)
{
  uint64_t v1;
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*ConversationRequestProcessorTurnState.outputCounter.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

unint64_t ConversationRequestProcessorTurnState.speechState.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState;
  swift_beginAccess();
  v2 = *(_QWORD *)v1;
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(*(_QWORD *)v1, *(void **)(v1 + 8));
  return v2;
}

void ConversationRequestProcessorTurnState.speechState.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t *v5;
  unint64_t v6;
  void *v7;

  v5 = (unint64_t *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  v6 = *v5;
  v7 = (void *)v5[1];
  *v5 = a1;
  v5[1] = a2;
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
}

uint64_t (*ConversationRequestProcessorTurnState.speechState.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationRequestProcessorTurnState.init(requestType:requestId:asrOnServer:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1B4EE7A40;
  v11 = v5 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  v12 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a1, v12);
  v13 = (_QWORD *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *v13 = a2;
  v13[1] = a3;
  *(_BYTE *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = a4;
  v14 = v5 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin;
  v15 = type metadata accessor for InputOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a5, v15);
  return v5;
}

uint64_t ConversationRequestProcessorTurnState.ResultCandidateStateHolder.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  return result;
}

unint64_t ConversationRequestProcessorTurnState.SpeechState.description.getter(unint64_t a1)
{
  uint64_t v1;

  v1 = 0x7463656C65536372;
  if (a1 >> 62 != 1)
    v1 = 1701602409;
  if (a1 >> 62)
    return v1;
  else
    return 0xD000000000000019;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConversationRequestProcessorTurnState.SpeechState()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0 >> 62;
  v2 = 0x7463656C65536372;
  if ((_DWORD)v1 != 1)
    v2 = 1701602409;
  if ((_DWORD)v1)
    return v2;
  else
    return 0xD000000000000019;
}

uint64_t ConversationRequestProcessorTurnState.ResultCandidateStateHolder.byRcId.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t ConversationRequestProcessorTurnState.ResultCandidateStateHolder.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ConversationRequestProcessorTurnState.ResultCandidateStateHolder.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t ConversationRequestProcessorTurnState.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  v2 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin;
  v4 = type metadata accessor for InputOrigin();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  outlined consume of ConversationRequestProcessorTurnState.SpeechState(*(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState), *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState + 8));
  return v0;
}

uint64_t sub_1B4D77008@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4D77038(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 96);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ObjC metadata update function for ConversationRequestProcessorTurnState()
{
  return type metadata accessor for ConversationRequestProcessorTurnState();
}

uint64_t type metadata completion function for ConversationRequestProcessorTurnState()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for RequestType();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for InputOrigin();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ConversationRequestProcessorTurnState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationRequestProcessorTurnState.__allocating_init(requestType:requestId:asrOnServer:inputOrigin:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

unint64_t *initializeBufferWithCopyOfBuffer for ConversationRequestProcessorTurnState.SpeechState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  void *v4;

  v3 = *a2;
  v4 = (void *)a2[1];
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(*a2, v4);
  *a1 = v3;
  a1[1] = (unint64_t)v4;
  return a1;
}

void destroy for ConversationRequestProcessorTurnState.SpeechState(uint64_t a1)
{
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(*(_QWORD *)a1, *(void **)(a1 + 8));
}

unint64_t *assignWithCopy for ConversationRequestProcessorTurnState.SpeechState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  void *v4;
  unint64_t v5;
  void *v6;

  v3 = *a2;
  v4 = (void *)a2[1];
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(*a2, v4);
  v5 = *a1;
  v6 = (void *)a1[1];
  *a1 = v3;
  a1[1] = (unint64_t)v4;
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v5, v6);
  return a1;
}

unint64_t *assignWithTake for ConversationRequestProcessorTurnState.SpeechState(unint64_t *a1, _OWORD *a2)
{
  unint64_t v3;
  void *v4;

  v3 = *a1;
  v4 = (void *)a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationRequestProcessorTurnState.SpeechState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 126);
  v3 = (((*(_QWORD *)a1 >> 57) >> 5) | (4 * ((*(_QWORD *)a1 >> 57) & 0x18 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ConversationRequestProcessorTurnState.SpeechState(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7D)
  {
    *(_QWORD *)result = a2 - 126;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7E)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for ConversationRequestProcessorTurnState.SpeechState(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

_QWORD *destructiveProjectEnumData for ConversationRequestProcessorTurnState.SpeechState(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *destructiveInjectEnumTag for ConversationRequestProcessorTurnState.SpeechState(_QWORD *result, uint64_t a2)
{
  if (a2 < 2)
  {
    *result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  }
  else
  {
    *result = (8 * (a2 - 2)) | 0x8000000000000000;
    result[1] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationRequestProcessorTurnState.SpeechState()
{
  return &type metadata for ConversationRequestProcessorTurnState.SpeechState;
}

uint64_t method lookup function for ConversationRequestProcessorTurnState.ResultCandidateStateHolder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationRequestProcessorTurnState.ResultCandidateStateHolder.byRcId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of ConversationRequestProcessorTurnState.ResultCandidateStateHolder.byRcId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of ConversationRequestProcessorTurnState.ResultCandidateStateHolder.byRcId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of ConversationRequestProcessorTurnState.ResultCandidateStateHolder.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t ConversationRuntimeClient.__allocating_init(onConnectionInterrupted:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  ConversationRuntimeClient.init(onConnectionInterrupted:)(a1, a2);
  return v4;
}

unint64_t ConversationRuntimeClient.ConversationRuntimeClientError.rawValue.getter(char a1)
{
  if (!a1)
    return 0xD000000000000018;
  if (a1 == 1)
    return 0xD000000000000016;
  return 0xD000000000000019;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationRuntimeClient.ConversationRuntimeClientError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationRuntimeClient.ConversationRuntimeClientError()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationRuntimeClient.ConversationRuntimeClientError()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationRuntimeClient.ConversationRuntimeClientError()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationRuntimeClient.ConversationRuntimeClientError@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ConversationRuntimeClient.ConversationRuntimeClientError.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConversationRuntimeClient.ConversationRuntimeClientError@<X0>(unint64_t *a1@<X8>)
{
  char *v1;
  unint64_t result;
  unint64_t v4;

  result = ConversationRuntimeClient.ConversationRuntimeClientError.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ConversationRuntimeClient.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  ConversationRuntimeClient.init()();
  return v0;
}

_QWORD *ConversationRuntimeClient.init()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];
  uint64_t v12;

  v1 = v0;
  v0[2] = 0;
  type metadata accessor for ConversationHandlerLocator();
  v2 = ConversationHandlerLocator.__allocating_init(onConnectionInterrupted:)((uint64_t)destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions, 0);
  type metadata accessor for ServerFallbackDisablingUtils();
  memset(v11, 0, sizeof(v11));
  v12 = 0;
  v3 = (_QWORD *)swift_allocObject();
  v3[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v3[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v3[4] = 0;
  type metadata accessor for ConversationService();
  v4 = swift_allocObject();
  specialized ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)((uint64_t)v2, (uint64_t)v11, 0, 0, 1, (uint64_t)closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:), 0, (uint64_t)v3, v4);
  v5 = ConversationService.serialFacade.getter();
  v7 = v6;
  v9 = v8;
  swift_release();
  v1[3] = v5;
  v1[4] = v7;
  v1[5] = v9;
  return v1;
}

_QWORD *ConversationRuntimeClient.init(onConnectionInterrupted:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v16[2];
  uint64_t v17;

  v3 = v2;
  v3[2] = 0;
  type metadata accessor for ConversationHandlerLocator();
  swift_retain();
  v6 = ConversationHandlerLocator.__allocating_init(onConnectionInterrupted:)(a1, a2);
  type metadata accessor for ServerFallbackDisablingUtils();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  v7 = (_QWORD *)swift_allocObject();
  v8 = objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager());
  swift_retain();
  v7[2] = objc_msgSend(v8, sel_init);
  v7[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v7[4] = 0;
  type metadata accessor for ConversationService();
  v9 = swift_allocObject();
  specialized ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)((uint64_t)v6, (uint64_t)v16, 0, 0, 1, (uint64_t)closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:), 0, (uint64_t)v7, v9);
  v10 = ConversationService.serialFacade.getter();
  v12 = v11;
  v14 = v13;
  swift_release();
  swift_release();
  swift_release();
  v3[3] = v10;
  v3[4] = v12;
  v3[5] = v14;
  return v3;
}

_QWORD *ConversationRuntimeClient.__allocating_init(overrideConversationService:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = (_QWORD *)swift_allocObject();
  v0[2] = 0;
  v1 = ConversationService.serialFacade.getter();
  v3 = v2;
  v5 = v4;
  swift_release();
  v0[3] = v1;
  v0[4] = v3;
  v0[5] = v5;
  return v0;
}

_QWORD *ConversationRuntimeClient.init(overrideConversationService:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0[2] = 0;
  v1 = ConversationService.serialFacade.getter();
  v3 = v2;
  v5 = v4;
  swift_release();
  v0[3] = v1;
  v0[4] = v3;
  v0[5] = v5;
  return v0;
}

uint64_t ConversationRuntimeClient.sendClearExecutionContext(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, void *, uint64_t);

  v8 = v3[3];
  v7 = v3[4];
  v9 = v3[5];
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v8;
  v10[3] = v7;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v11 = StaticString.description.getter();
  v13 = v12;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveClearContext:from:);
  *(_QWORD *)(v14 + 24) = v10;
  *(_QWORD *)(v14 + 32) = "bridge(didReceiveClearContext:from:)";
  *(_QWORD *)(v14 + 40) = 36;
  *(_BYTE *)(v14 + 48) = 2;
  v15 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v7 + 208);
  swift_retain();
  v15(v11, v13, &closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)partial apply, v14);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t ConversationRuntimeClient.sendCommitResultCandidate(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, void *, uint64_t);

  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v7;
  v10[3] = v8;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v11 = StaticString.description.getter();
  v13 = v12;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v7;
  *(_QWORD *)(v14 + 24) = v8;
  *(_QWORD *)(v14 + 32) = v9;
  *(_QWORD *)(v14 + 40) = "bridge(didReceiveCommitResultCandidate:from:)";
  *(_QWORD *)(v14 + 48) = 45;
  *(_BYTE *)(v14 + 56) = 2;
  *(_QWORD *)(v14 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidate:from:);
  *(_QWORD *)(v14 + 72) = v10;
  v15 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v8 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v15(v11, v13, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v14);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t static ConversationRuntimeClient.ConnectionInterruptedError.== infix(_:_:)()
{
  return 1;
}

void ConversationRuntimeClient.ConnectionInterruptedError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int ConversationRuntimeClient.ConnectionInterruptedError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t ConversationRuntimeClient.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ConversationRuntimeClient.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendClearExecutionContext(_:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

uint64_t specialized ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _UNKNOWN **v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  _BYTE v62[12];
  int v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  _BYTE *v71;
  uint64_t v72;
  __int128 v73[2];
  __int128 v74;
  uint64_t v75;
  _QWORD v76[5];
  _QWORD v77[5];

  v72 = a7;
  v68 = a6;
  v70 = a5;
  v69 = a4;
  v63 = a3;
  v64 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11);
  v71 = &v62[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v67 = type metadata accessor for DispatchTimeInterval();
  v66 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v65 = &v62[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for Logger();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = &v62[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for ServerFallbackDisablingUtils();
  v77[4] = &protocol witness table for ServerFallbackDisablingUtils;
  v77[3] = v18;
  v77[0] = a8;
  *(_QWORD *)(a9 + 104) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a9 + 112) = 1;
  *(_BYTE *)(a9 + 120) = 0;
  *(_QWORD *)(a9 + 136) = 0;
  type metadata accessor for CorrectionsPlatformClient();
  swift_allocObject();
  *(_QWORD *)(a9 + 184) = CorrectionsPlatformClient.init()();
  type metadata accessor for TaskService();
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = closure #1 in default argument 1 of TaskService.init(initialTask:taskIdGenerator:);
  v19[3] = 0;
  v20 = MEMORY[0x1E0DEE9D8];
  v19[4] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a9 + 192) = v19;
  type metadata accessor for ConcurrentTaskPool();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v20;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v21 + 24) = v22;
  *(_QWORD *)(a9 + 200) = v21;
  type metadata accessor for ConversationService.ExecutionTaskContext();
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v20;
  v23[3] = v20;
  v23[4] = 0;
  static ConversationService.ExecutionTaskContext.expirationInNanoSeconds = 60000000000;
  *(_QWORD *)(a9 + 208) = v23;
  if (one-time initialization token for executor != -1)
    swift_once();
  v24 = __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16))(v17, v24, v14);
  type metadata accessor for AsyncSerialQueue();
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v20;
  v25[3] = 0;
  v25[4] = 0;
  v25[5] = 0;
  v26 = swift_allocObject();
  *(_DWORD *)(v26 + 16) = 0;
  v25[6] = v26;
  v25[7] = 0xD000000000000021;
  v25[8] = 0x80000001B4EFA8A0;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v15 + 32))((uint64_t)v25 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger, v17, v14);
  *(_QWORD *)(a9 + 216) = v25;
  *(_QWORD *)(a9 + 224) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(_QWORD *)(a9 + 272) = 0;
  *(_QWORD *)(a9 + 280) = 0;
  *(_QWORD *)(a9 + 320) = 0;
  *(_QWORD *)(a9 + 328) = 0;
  *(_QWORD *)(a9 + 312) = 0;
  outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)&v74);
  if (v75)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v74, (uint64_t)v76);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v74);
    v27 = type metadata accessor for ReferenceResolutionClient();
    v28 = ReferenceResolutionClient.__allocating_init()();
    v76[3] = v27;
    v76[4] = MEMORY[0x1E0D9C7B0];
    v76[0] = v28;
  }
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v76, a9 + 144);
  v29 = v64;
  if ((v63 & 1) != 0)
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v30 = static StubCamBridge.shared;
    v31 = type metadata accessor for StubCamBridge();
    v32 = &protocol witness table for StubCamBridge;
  }
  else
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v30 = static CamBridgeImpl.shared;
    v31 = type metadata accessor for CamBridgeImpl();
    v32 = &protocol witness table for CamBridgeImpl;
  }
  *(_QWORD *)(a9 + 88) = v31;
  *(_QWORD *)(a9 + 96) = v32;
  *(_QWORD *)(a9 + 64) = v30;
  swift_retain();
  *(_QWORD *)(a9 + 56) = v29;
  swift_retain();
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v35 = 0;
    _os_log_impl(&dword_1B4BE6000, v33, v34, "[ConversationService] Ambiguity handling Feature Flag is on. Using DecisionEngine", v35, 2u);
    MEMORY[0x1B5E44758](v35, -1, -1);
  }

  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v76, (uint64_t)&v74);
  v36 = *(_QWORD *)(a9 + 184);
  v37 = type metadata accessor for LinkMetadataProvider();
  v38 = swift_allocObject();
  v39 = objc_allocWithZone(MEMORY[0x1E0D44208]);
  swift_retain();
  swift_retain();
  *(_QWORD *)(v38 + 16) = objc_msgSend(v39, sel_init);
  type metadata accessor for LinkExpansionContextBuilder();
  v40 = (_QWORD *)swift_allocObject();
  v40[6] = v37;
  v40[7] = &protocol witness table for LinkMetadataProvider;
  v40[11] = &type metadata for LinkViewActionProvider;
  v40[12] = &protocol witness table for LinkViewActionProvider;
  v40[2] = 0;
  v40[3] = v38;
  v40[13] = 0;
  v41 = *(_QWORD *)(a9 + 200);
  outlined init with copy of ReferenceResolutionClientProtocol(a9 + 64, (uint64_t)v73);
  v42 = one-time initialization token for instance;
  swift_retain();
  if (v42 != -1)
    swift_once();
  v43 = static DecisionEngineCurareDonator.instance;
  v44 = type metadata accessor for DecisionEngine();
  v45 = swift_allocObject();
  swift_retain();
  v46 = specialized DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(v29, (uint64_t)&v74, v36, (uint64_t)v40, v41, v73, v43, v45);
  swift_release();
  swift_release();
  *(_QWORD *)(a9 + 40) = v44;
  *(_QWORD *)(a9 + 48) = &protocol witness table for DecisionEngine;
  *(_QWORD *)(a9 + 16) = v46;
  type metadata accessor for OS_dispatch_queue();
  v47 = static OS_dispatch_queue.main.getter();
  if (one-time initialization token for defaultTimeout != -1)
    swift_once();
  v48 = v67;
  v49 = __swift_project_value_buffer(v67, (uint64_t)static JetsamHelper.defaultTimeout);
  v50 = v66;
  v51 = v65;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v66 + 16))(v65, v49, v48);
  type metadata accessor for JetsamHelper();
  v52 = (_QWORD *)swift_allocObject();
  v53 = (_QWORD *)((char *)v52 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  *v53 = 0;
  v53[1] = 0;
  v52[2] = 0xD00000000000002CLL;
  v52[3] = 0x80000001B4EFA8D0;
  v52[4] = dispatch_semaphore_create(1);
  v52[5] = v47;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v50 + 32))((uint64_t)v52 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout, v51, v48);
  *(_QWORD *)(a9 + 128) = v52;
  v54 = v72;
  *(_QWORD *)(a9 + 288) = v68;
  *(_QWORD *)(a9 + 296) = v54;
  *(_BYTE *)(a9 + 304) = v69 & 1;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v77, a9 + 232);
  v55 = (uint64_t)v71;
  if ((v70 & 1) != 0)
  {
    v56 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v55, 1, 1, v56);
    v57 = one-time initialization token for shared;
    swift_retain();
    swift_retain();
    if (v57 != -1)
      swift_once();
    swift_beginAccess();
    v58 = static MessageBusActor.shared;
    v59 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
    v60 = (_QWORD *)swift_allocObject();
    v60[2] = v58;
    v60[3] = v59;
    v60[4] = a9;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v55, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.warmup(), (uint64_t)v60);
    swift_release();
    swift_release();
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
  outlined destroy of ReferenceResolutionClientProtocol?(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v76);
  return a9;
}

unint64_t specialized ConversationRuntimeClient.ConversationRuntimeClientError.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationRuntimeClient.ConversationRuntimeClientError.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_1B4D78578()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveClearContext:from:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveClearContext:from:)();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidate:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v7 = v0[6];
  v6 = v0[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidate:from:)(v2, v3, v4, v5, v7, v6);
}

uint64_t sub_1B4D786BC()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_3()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ConversationRuntimeClient.ConversationRuntimeClientError and conformance ConversationRuntimeClient.ConversationRuntimeClientError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationRuntimeClient.ConversationRuntimeClientError and conformance ConversationRuntimeClient.ConversationRuntimeClientError;
  if (!lazy protocol witness table cache variable for type ConversationRuntimeClient.ConversationRuntimeClientError and conformance ConversationRuntimeClient.ConversationRuntimeClientError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationRuntimeClient.ConversationRuntimeClientError, &type metadata for ConversationRuntimeClient.ConversationRuntimeClientError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationRuntimeClient.ConversationRuntimeClientError and conformance ConversationRuntimeClient.ConversationRuntimeClientError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConversationRuntimeClient.ConnectionInterruptedError and conformance ConversationRuntimeClient.ConnectionInterruptedError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ConversationRuntimeClient.ConnectionInterruptedError and conformance ConversationRuntimeClient.ConnectionInterruptedError;
  if (!lazy protocol witness table cache variable for type ConversationRuntimeClient.ConnectionInterruptedError and conformance ConversationRuntimeClient.ConnectionInterruptedError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationRuntimeClient.ConnectionInterruptedError, &type metadata for ConversationRuntimeClient.ConnectionInterruptedError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationRuntimeClient.ConnectionInterruptedError and conformance ConversationRuntimeClient.ConnectionInterruptedError);
  }
  return result;
}

uint64_t type metadata accessor for ConversationRuntimeClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for ConversationRuntimeClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationRuntimeClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.__allocating_init(onConnectionInterrupted:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.__allocating_init(overrideConversationService:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendStartExecutionTurn(_:withBridgeDelegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendRequestContextData(_:withBridgeDelegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendConversationUserInput(_:withBridgeDelegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendClearExecutionContext(_:withBridgeDelegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendCancelExecutionTurn(_:withBridgeDelegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v5 + 184)
                                                                            + *(_QWORD *)(*(_QWORD *)v5 + 184));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v14(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendCommitResultCandidateId(_:withBridgeDelegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendCommitResultCandidate(_:withBridgeDelegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendRunSiriKitExecutor(_:withRequestContextData:withBridgeDelegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendSiriKitPluginSignal(_:withBridgeDelegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t storeEnumTagSinglePayload for ConversationRuntimeClient.ConversationRuntimeClientError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B4D78978 + 4 * byte_1B4EE7CF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B4D789AC + 4 * byte_1B4EE7CF0[v4]))();
}

uint64_t sub_1B4D789AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4D789B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4D789BCLL);
  return result;
}

uint64_t sub_1B4D789C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4D789D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B4D789D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4D789DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationRuntimeClient.ConversationRuntimeClientError()
{
  return &type metadata for ConversationRuntimeClient.ConversationRuntimeClientError;
}

uint64_t storeEnumTagSinglePayload for ConversationRuntimeClient.ConnectionInterruptedError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4D78A38 + 4 * byte_1B4EE7CFA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4D78A58 + 4 * byte_1B4EE7CFF[v4]))();
}

_BYTE *sub_1B4D78A38(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4D78A58(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4D78A60(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4D78A68(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4D78A70(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4D78A78(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ConversationRuntimeClient.ConnectionInterruptedError()
{
  return &type metadata for ConversationRuntimeClient.ConnectionInterruptedError;
}

uint64_t outlined init with copy of ReferenceResolutionClientProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ReferenceResolutionClientProtocol?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor;
  if (!lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor)
  {
    v1 = type metadata accessor for MessageBusActor();
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for MessageBusActor, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor);
  }
  return result;
}

uint64_t sub_1B4D78B64()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationService.warmup()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationService.warmup()(a1, v4, v5, v6);
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendStartExecutionTurn(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendRequestContextData(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendConversationUserInput(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendClearExecutionContext(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendCancelExecutionTurn(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendCommitResultCandidateId(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a7 + 56)
                                                                                              + *(_QWORD *)(a7 + 56));
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v15;
  *v15 = v7;
  v15[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendRunSiriKitExecutor(_:withRequestContextData:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 64))();
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendSiriKitPluginSignal(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

uint64_t static ConversationSearchResult.supported(_:identifierForFoundFlow:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for ConversationSearchResult();
  v7 = a3 + *(int *)(v6 + 24);
  v8 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  outlined init with copy of ReferenceResolutionClientProtocol?(a2, a3 + *(int *)(v6 + 28), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(_QWORD *)a3 = a1;
  *(_BYTE *)(a3 + 8) = 1;
  return swift_retain();
}

uint64_t static ConversationSearchResult.reformTo(input:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = type metadata accessor for ConversationSearchResult();
  v5 = a2 + *(int *)(v4 + 24);
  v6 = type metadata accessor for Input();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  v8 = a2 + *(int *)(v4 + 28);
  v9 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

uint64_t static ConversationSearchResult.unsupported(exclude:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = type metadata accessor for ConversationSearchResult();
  v5 = a2 + *(int *)(v4 + 24);
  v6 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = a2 + *(int *)(v4 + 28);
  v8 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = a1;
  return result;
}

uint64_t ConversationSearchResult.conversation.getter()
{
  return swift_retain();
}

uint64_t ConversationSearchResult.exclude.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t ConversationSearchResult.reformedInput.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ConversationSearchResult();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for Input?);
}

uint64_t ConversationSearchResult.identifierForFoundFlow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ConversationSearchResult();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 28), a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t initializeBufferWithCopyOfBuffer for ConversationSearchResult(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v8 = *(int *)(a3 + 24);
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Input();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v15 = *(int *)(a3 + 28);
    v16 = (void *)(v7 + v15);
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for UUID();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return v7;
}

uint64_t initializeWithCopy for ConversationSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Input();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = *(int *)(a3 + 28);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = type metadata accessor for UUID();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithCopy for ConversationSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for Input();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = *(int *)(a3 + 28);
  v16 = (void *)(a1 + v15);
  v17 = (void *)(a2 + v15);
  v18 = type metadata accessor for UUID();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v16, v17, v18);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t initializeWithTake for ConversationSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Input();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = *(int *)(a3 + 28);
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithTake for ConversationSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for Input();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = *(int *)(a3 + 28);
  v16 = (void *)(a1 + v15);
  v17 = (void *)(a2 + v15);
  v18 = type metadata accessor for UUID();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v21 = v20(v16, 1, v18);
  v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationSearchResult()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4D7979C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 24);
    }
    else
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a1[v12], a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for ConversationSearchResult()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1B4D7985C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void type metadata completion function for ConversationSearchResult()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for Input?, (void (*)(uint64_t))MEMORY[0x1E0D9C588]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, (void (*)(uint64_t))MEMORY[0x1E0CB0998]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD), void (*a6)(char *, uint64_t, uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t *v11;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t isUniquelyReferenced_nonNull_native;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;

  v24 = a6;
  v11 = v7;
  v15 = __swift_instantiateConcreteTypeFromMangledName(a4);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a5(0);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v24 - v20;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(a1, 1, v18) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, a4);
    a7(a2, a3);
    swift_bridgeObjectRelease();
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, a4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v21, a1, v18);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = *v11;
    *v11 = 0x8000000000000000;
    v24(v21, a2, a3, isUniquelyReferenced_nonNull_native);
    *v11 = v25;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void (*a5)(char *, uint64_t, uint64_t), void (*a6)(uint64_t))
{
  uint64_t *v6;
  uint64_t *v11;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v11 = v6;
  v14 = __swift_instantiateConcreteTypeFromMangledName(a3);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(a4);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v20 + 48))(a1, 1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, a3);
    a6(a2);
    v21 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a2, v21);
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, a3);
  }
  else
  {
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a1, (uint64_t)v19, a4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = *v11;
    *v11 = 0x8000000000000000;
    a5(v19, a2, isUniquelyReferenced_nonNull_native);
    *v11 = v26;
    swift_bridgeObjectRelease();
    v24 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(a2, v24);
  }
}

uint64_t ConversationService.__allocating_init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v23 = a6;
  v24 = a7;
  v14 = swift_allocObject();
  v16 = *(_QWORD *)(a8 + 24);
  v15 = *(_QWORD *)(a8 + 32);
  v17 = __swift_mutable_project_boxed_opaque_existential_1(a8, v16);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  v21 = specialized ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)(a1, a2, a3, a4, a5, v23, v24, (uint64_t)v19, v14, v16, v15);
  __swift_destroy_boxed_opaque_existential_1(a8);
  return v21;
}

_QWORD *ConversationService.serialFacade.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t);
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;

  v1 = type metadata accessor for Logger();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0[39];
  if (v5)
  {
    v0 = (_QWORD *)v0[39];
  }
  else
  {
    v19 = v0[40];
    v6 = one-time initialization token for executor;
    swift_retain();
    if (v6 != -1)
      swift_once();
    v7 = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
    v8 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    v17 = v7;
    v18 = v8;
    v8(v4, v7, v1);
    type metadata accessor for AsyncSerialQueue();
    v9 = (char *)swift_allocObject();
    *((_QWORD *)v9 + 2) = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)v9 + 3) = 0;
    *((_QWORD *)v9 + 4) = 0;
    *((_QWORD *)v9 + 5) = 0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v10 = swift_allocObject();
    *(_DWORD *)(v10 + 16) = 0;
    *((_QWORD *)v9 + 6) = v10;
    *((_QWORD *)v9 + 7) = 0xD000000000000022;
    *((_QWORD *)v9 + 8) = 0x80000001B4EFA930;
    v11 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v11(&v9[OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger], v4, v1);
    v18(v4, v17, v1);
    v12 = (char *)swift_allocObject();
    *((_QWORD *)v12 + 2) = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)v12 + 3) = 0;
    *((_QWORD *)v12 + 4) = 0;
    *((_QWORD *)v12 + 5) = 0;
    v13 = swift_allocObject();
    *(_DWORD *)(v13 + 16) = 0;
    *((_QWORD *)v12 + 6) = v13;
    *((_QWORD *)v12 + 7) = 0xD000000000000020;
    *((_QWORD *)v12 + 8) = 0x80000001B4EFA960;
    v11(&v12[OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger], v4, v1);
    v14 = v0[39];
    v0[39] = v0;
    v0[40] = v9;
    v0[41] = v12;
    swift_retain();
    swift_retain();
    swift_retain();
    outlined consume of ConversationServiceSerialFacade?(v14);
  }
  outlined copy of ConversationServiceSerialFacade?(v5);
  return v0;
}

uint64_t MessageBusActor.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  return v0;
}

uint64_t static MessageBusActor.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t static MessageBusActor.shared.setter(uint64_t a1)
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  static MessageBusActor.shared = a1;
  return swift_release();
}

uint64_t (*static MessageBusActor.shared.modify())()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t MessageBusActor.deinit()
{
  uint64_t v0;

  swift_defaultActor_destroy();
  return v0;
}

uint64_t MessageBusActor.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t MessageBusActor.init()()
{
  uint64_t v0;

  swift_defaultActor_initialize();
  return v0;
}

uint64_t MessageBusActor.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for static GlobalActor.shared.getter in conformance MessageBusActor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t protocol witness for static GlobalActor.sharedUnownedExecutor.getter in conformance MessageBusActor()
{
  type metadata accessor for MessageBusActor();
  return static GlobalActor.sharedUnownedExecutor.getter();
}

void *ConversationService.suggestionsDIIdentifier.unsafeMutableAddressor()
{
  return &static ConversationService.suggestionsDIIdentifier;
}

unint64_t static ConversationService.suggestionsDIIdentifier.getter()
{
  return 0xD00000000000002FLL;
}

void *ConversationService.suggestionsEnabled.unsafeMutableAddressor()
{
  return &static ConversationService.suggestionsEnabled;
}

uint64_t static ConversationService.suggestionsEnabled.getter()
{
  return 0;
}

void *ConversationService.state.getter()
{
  uint64_t v0;
  void *v1;

  swift_beginAccess();
  v1 = *(void **)(v0 + 112);
  outlined copy of ConversationService.State(v1, *(_BYTE *)(v0 + 120));
  return v1;
}

void ConversationService.state.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  void *v5;
  unsigned __int8 v6;

  swift_beginAccess();
  v5 = *(void **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = a1;
  v6 = *(_BYTE *)(v2 + 120);
  *(_BYTE *)(v2 + 120) = a2;
  outlined consume of ConversationService.State(v5, v6);
}

uint64_t (*ConversationService.state.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

_QWORD *ConversationService.ExecutionTaskContext.__allocating_init(forceTimeout:)(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)swift_allocObject();
  v3 = MEMORY[0x1E0DEE9D8];
  result[2] = MEMORY[0x1E0DEE9D8];
  result[3] = v3;
  result[4] = 0;
  static ConversationService.ExecutionTaskContext.expirationInNanoSeconds = a1;
  return result;
}

uint64_t ConversationService.consecutiveEmptyInputs.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 272);
}

uint64_t ConversationService.consecutiveEmptyInputs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_QWORD *)(v1 + 272) = a1;
  return result;
}

uint64_t (*ConversationService.consecutiveEmptyInputs.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationService.recentlyCompletedCorrectableConversation.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t ConversationService.recentlyCompletedCorrectableConversation.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 280) = a1;
  return swift_release();
}

uint64_t (*ConversationService.recentlyCompletedCorrectableConversation.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)(uint64_t a1)
{
  objc_msgSend(objc_msgSend((id)objc_opt_self(), sel_sharedStream), sel_emitMessage_, a1);
  return swift_unknownObjectRelease();
}

uint64_t ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v23 = a6;
  v24 = a7;
  v16 = *(_QWORD *)(a8 + 24);
  v15 = *(_QWORD *)(a8 + 32);
  v17 = __swift_mutable_project_boxed_opaque_existential_1(a8, v16);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  v21 = specialized ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)(a1, a2, a3, a4, a5, v23, v24, (uint64_t)v19, v8, v16, v15);
  __swift_destroy_boxed_opaque_existential_1(a8);
  return v21;
}

Swift::Void __swiftcall ConversationService.warmup()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = one-time initialization token for shared;
  swift_retain();
  if (v5 != -1)
    swift_once();
  swift_beginAccess();
  v6 = static MessageBusActor.shared;
  v8 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v7, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v6;
  v9[3] = v8;
  v9[4] = v0;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.warmup(), (uint64_t)v9);
  swift_release();
}

uint64_t closure #1 in ConversationService.warmup()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationService.warmup()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(v0 + 40);
  type metadata accessor for DeviceEnvironmentHelper();
  MEMORY[0x1B5E3F604]();
  swift_release();
  v2 = v1 + 8;
  v3 = v1[11];
  v4 = v1[12];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t key path setter for ConversationService.serialFacade : ConversationService(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 312);
  v4[39] = *a1;
  v4[40] = v2;
  v4[41] = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  return outlined consume of ConversationServiceSerialFacade?(v5);
}

uint64_t ConversationService.serialFacade.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v4 = v3[39];
  v3[39] = a1;
  v3[40] = a2;
  v3[41] = a3;
  return outlined consume of ConversationServiceSerialFacade?(v4);
}

uint64_t (*ConversationService.serialFacade.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  a1[3] = v1;
  *a1 = ConversationService.serialFacade.getter();
  a1[1] = v3;
  a1[2] = v4;
  return ConversationService.serialFacade.modify;
}

uint64_t ConversationService.serialFacade.modify(_QWORD *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v4 = a1[2];
  v3 = (_QWORD *)a1[3];
  v5 = v3[39];
  v3[39] = *a1;
  v3[40] = v2;
  v3[41] = v4;
  if ((a2 & 1) == 0)
    return outlined consume of ConversationServiceSerialFacade?(v5);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined consume of ConversationServiceSerialFacade?(v5);
  swift_release();
  swift_release();
  return swift_release();
}

void ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = (void (*)(uint64_t, uint64_t))v0[66];
  v2 = (void *)v0[61];
  v3 = v0[36];
  v5 = v0[33];
  v4 = v0[34];
  v6 = v0[32];
  v7 = (_QWORD *)v0[23];
  v8 = v2;
  static ExecutionLocation.unknown.getter();
  Input.parse.getter();
  Parse.nlLocation.getter();
  v1(v3, v4);
  v9 = objc_allocWithZone((Class)type metadata accessor for RemoteConversationSpeechData());
  v0[70] = RemoteConversationSpeechData.init(rcId:asrOnDevice:userSpecificInfo:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:asrLocation:nlLocation:)(12589, 0xE200000000000000, 0, 0, (uint64_t)v2, 0, 0, 0, 0, 0, 0, v5, v6);
  v10 = v7[6];
  __swift_project_boxed_opaque_existential_1(v7 + 2, v7[5]);
  swift_beginAccess();
  v0[71] = v7[13];
  v12 = **(int **)(v10 + 16) + *(_QWORD *)(v10 + 16);
  swift_bridgeObjectRetain();
  v11 = (_QWORD *)swift_task_alloc();
  v0[72] = v11;
  *v11 = v0;
  v11[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  __asm { BR              X8 }
}

uint64_t closure #1 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 192);
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;

  TaskService.onNewTurn()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[8] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)(v2 + 72) = static MessageBusActor.shared;
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, a2, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v3 = swift_task_alloc();
  *(_QWORD *)(v2 + 80) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v2 + 48);
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 88) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AFSpeechPackage?);
  *v4 = v2;
  v4[1] = closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<AFSpeechPackage?, Never>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  ObjectType = swift_getObjectType();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(a3 + 104))(partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v10, ObjectType, a3);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  if (a1)
    AFSpeechInfo.toAFSpeechPackage()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<AFSpeechPackage?, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t ConversationService.setupNewTurn(executionRequestId:rootRequestId:contextData:runSiriKitExecutor:scopedRRData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v9[38] = v15;
  v9[39] = v8;
  v9[36] = a8;
  v9[37] = v14;
  v9[34] = a6;
  v9[35] = a7;
  v9[32] = a4;
  v9[33] = a5;
  v9[30] = a2;
  v9[31] = a3;
  v9[29] = a1;
  v10 = type metadata accessor for RemoteConversationTurnData(0);
  v9[40] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v9[41] = v11;
  v9[42] = *(_QWORD *)(v11 + 64);
  v9[43] = swift_task_alloc();
  v9[44] = swift_task_alloc();
  v12 = type metadata accessor for UUID();
  v9[45] = v12;
  v9[46] = *(_QWORD *)(v12 - 8);
  v9[47] = swift_task_alloc();
  v9[48] = swift_task_alloc();
  v9[49] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v9[50] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t ConversationService.setupNewTurn(executionRequestId:rootRequestId:contextData:runSiriKitExecutor:scopedRRData:bridge:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 272);
  v2 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 408) = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.makeUUID(fromExecutionRequestId:)();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.makeConversationIdAndEmitRequestLink(executionUUID:)();
  swift_release();
  if (v1)
    v3 = SAIntentGroupRunSiriKitExecutor.hasExecuteOnRemotePayload.getter();
  else
    v3 = 0;
  *(_BYTE *)(v0 + 600) = v3 & 1;
  v4 = *(_QWORD **)(v0 + 312);
  __swift_project_boxed_opaque_existential_1(v4 + 18, v4[21]);
  dispatch thunk of ReferenceResolutionClientProtocol.inRequest(requestId:)();
  *(_QWORD *)(v0 + 416) = v4[24];
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 416);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 32);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v3 = result;
    if (!result)
      goto LABEL_6;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v3)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 424) = v3;
      return swift_task_switch();
    }
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
    v3 = MEMORY[0x1B5E43B94](0, v2);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v3 = *(_QWORD *)(v2 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t *v23;
  id v24;
  id v25;
  uint64_t ObjectType;
  uint64_t v27;
  _QWORD *v28;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t (*v37)(void);

  v1 = *(void **)(v0 + 272);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v2, sel_siriKitMetrics);
    if (v3
      && (v4 = v3, v5 = objc_msgSend(v3, sel_resultCandidateId),
                   v4,
                   v5))
    {
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v7;

    }
    else
    {
      v8 = 0xE200000000000000;
      v6 = 12589;
    }
    v11 = *(_QWORD *)(v0 + 232);
    v10 = *(_QWORD *)(v0 + 240);
    swift_bridgeObjectRetain();
    v9 = specialized ProxiedRequestContext.__allocating_init(rske:executionRequestId:resultCandidateId:)(v2, v11, v10, v6, v8);

  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)(v0 + 432) = v9;
  v33 = *(_QWORD *)(v0 + 424);
  v34 = v9;
  v35 = *(_BYTE *)(v0 + 600);
  v12 = *(_QWORD *)(v0 + 384);
  v14 = *(_QWORD *)(v0 + 360);
  v13 = *(_QWORD *)(v0 + 368);
  v15 = *(_QWORD **)(v0 + 352);
  v16 = *(int **)(v0 + 320);
  v36 = *(_QWORD *)(v0 + 304);
  v31 = *(_QWORD *)(v0 + 280);
  v32 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 256);
  v30 = *(void **)(v0 + 264);
  v19 = *(_QWORD *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 232);
  v21 = (char *)v15 + v16[7];
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  *(_QWORD *)(v0 + 440) = v22;
  v22(v21, v12, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v14);
  *v15 = v20;
  v15[1] = v19;
  v15[2] = v18;
  v15[3] = v17;
  v15[4] = v30;
  *(_QWORD *)((char *)v15 + v16[8]) = v33;
  v23 = (_QWORD *)((char *)v15 + v16[11]);
  *v23 = v31;
  v23[1] = v32;
  *((_BYTE *)v15 + v16[9]) = v35;
  *(_QWORD *)((char *)v15 + v16[10]) = v34;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = v30;
  outlined copy of Data?(v31, v32);
  v25 = v34;
  static SharedContext.internalSharedContext.getter();
  ObjectType = swift_getObjectType();
  v27 = ServiceBridgeDelegate.xpcWrapper.getter(ObjectType, v36);
  type metadata accessor for SharedContextServiceImpl();
  *(_QWORD *)(swift_allocObject() + 16) = v27;
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SharedContextServiceImpl and conformance SharedContextServiceImpl, 255, (uint64_t (*)(uint64_t))type metadata accessor for SharedContextServiceImpl, (uint64_t)&protocol conformance descriptor for SharedContextServiceImpl);
  dispatch thunk of RefreshableSharedContext.sharedContext.setter();
  swift_release();
  *(_QWORD *)(v0 + 448) = type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  *(_QWORD *)(v0 + 456) = SiriEnvironment.callState.getter();
  swift_release();
  v37 = (uint64_t (*)(void))((int)*MEMORY[0x1E0D9C3A8] + MEMORY[0x1E0D9C3A8]);
  v28 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 464) = v28;
  *v28 = v0;
  v28[1] = ConversationService.setupNewTurn(executionRequestId:rootRequestId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
  return v37();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t *v0;
  _QWORD *v1;

  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  CurrentDevice.setRestrictedCommands(_:)();
  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  v0[59] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = ConversationService.setupNewTurn(executionRequestId:rootRequestId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
  return ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:)(v0[44], v0[37], v0[38]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 480) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 312);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 104);
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, 255, (uint64_t (*)(uint64_t))type metadata accessor for RemoteConversationClient, (uint64_t)&protocol conformance descriptor for RemoteConversationClient);
    Set.Iterator.init(_cocoa:)();
    result = *(_QWORD *)(v0 + 16);
    v4 = *(_QWORD *)(v0 + 24);
    v6 = *(_QWORD *)(v0 + 32);
    v5 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v8 = -1 << *(_BYTE *)(v2 + 32);
    v4 = v2 + 56;
    v6 = ~v8;
    v9 = -v8;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v7 = v10 & *(_QWORD *)(v2 + 56);
    result = swift_bridgeObjectRetain();
    v5 = 0;
  }
  *(_QWORD *)(v0 + 488) = result;
  *(_QWORD *)(v0 + 496) = v4;
  *(_QWORD *)(v0 + 520) = v7;
  *(_QWORD *)(v0 + 504) = v6;
  *(_QWORD *)(v0 + 512) = v5;
  if (result < 0)
  {
    v15 = __CocoaSet.Iterator.next()();
    if (!v15)
      goto LABEL_29;
    *(_QWORD *)(v0 + 224) = v15;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v14 = *(_QWORD *)(v0 + 216);
    swift_unknownObjectRelease();
    v13 = v5;
    v11 = v7;
    goto LABEL_13;
  }
  if (v7)
  {
    v11 = (v7 - 1) & v7;
    v12 = __clz(__rbit64(v7)) | (v5 << 6);
    v13 = v5;
LABEL_10:
    v14 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v12);
    swift_retain();
LABEL_13:
    *(_QWORD *)(v0 + 544) = v11;
    *(_QWORD *)(v0 + 536) = v13;
    *(_QWORD *)(v0 + 528) = v14;
    if (v14)
      return swift_task_switch();
    goto LABEL_29;
  }
  v16 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v17 = (unint64_t)(v6 + 64) >> 6;
  if (v16 < v17)
  {
    v18 = *(_QWORD *)(v4 + 8 * v16);
    v13 = v5 + 1;
    if (!v18)
    {
      v13 = v5 + 2;
      if (v5 + 2 >= v17)
        goto LABEL_29;
      v18 = *(_QWORD *)(v4 + 8 * v13);
      if (!v18)
      {
        v13 = v5 + 3;
        if (v5 + 3 >= v17)
          goto LABEL_29;
        v18 = *(_QWORD *)(v4 + 8 * v13);
        if (!v18)
        {
          v13 = v5 + 4;
          if (v5 + 4 >= v17)
            goto LABEL_29;
          v18 = *(_QWORD *)(v4 + 8 * v13);
          if (!v18)
          {
            v19 = v5 + 5;
            while (v17 != v19)
            {
              v18 = *(_QWORD *)(v4 + 8 * v19++);
              if (v18)
              {
                v13 = v19 - 1;
                goto LABEL_18;
              }
            }
            goto LABEL_29;
          }
        }
      }
    }
LABEL_18:
    v11 = (v18 - 1) & v18;
    v12 = __clz(__rbit64(v18)) + (v13 << 6);
    goto LABEL_10;
  }
LABEL_29:
  v20 = *(_QWORD *)(v0 + 312);
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  swift_beginAccess();
  v21 = *(_QWORD *)(v20 + 280);
  *(_QWORD *)(v0 + 576) = v21;
  if (!v21)
  {
    swift_release();
    v26 = *(_QWORD *)(v0 + 312);
    swift_beginAccess();
    v27 = *(unsigned __int8 *)(v26 + 120);
    if (v27 >> 6)
    {
      if (v27 >> 6 != 1 || (v27 & 1) == 0)
        goto LABEL_37;
    }
    else if ((*(_BYTE *)(v26 + 112) & 1) == 0)
    {
      goto LABEL_37;
    }
    v28 = *(_QWORD **)(v0 + 312);
    v29 = v28[5];
    v30 = v28[6];
    __swift_project_boxed_opaque_existential_1(v28 + 2, v29);
    (*(void (**)(uint64_t, uint64_t))(v30 + 56))(v29, v30);
LABEL_37:
    v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
    v31 = *(_QWORD *)(v0 + 416);
    v47 = *(void **)(v0 + 432);
    v46 = *(unsigned __int8 *)(v0 + 600);
    v32 = *(_QWORD *)(v0 + 392);
    v49 = *(_QWORD *)(v0 + 384);
    v48 = *(_QWORD *)(v0 + 368);
    v33 = *(_QWORD *)(v0 + 352);
    v42 = *(_QWORD *)(v0 + 360);
    v43 = *(_QWORD *)(v0 + 376);
    v34 = *(uint64_t **)(v0 + 344);
    v35 = *(_QWORD *)(v0 + 312);
    v45 = *(_QWORD *)(v0 + 304);
    v36 = *(_QWORD *)(v0 + 296);
    v37 = *(_QWORD *)(v35 + 40);
    v38 = *(_QWORD *)(v35 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v35 + 16), v37);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v32, v37, v38);
    outlined init with copy of ConversationHelperInput(v33, (uint64_t)v34, type metadata accessor for RemoteConversationTurnData);
    v44(v43, v49, v42);
    outlined init with copy of ReferenceResolutionClientProtocol(v35 + 144, v0 + 56);
    v39 = *(unsigned __int8 *)(v35 + 304);
    type metadata accessor for ConversationService.ActiveTurn(0);
    swift_allocObject();
    swift_unknownObjectRetain();
    swift_retain();
    v40 = specialized ConversationService.ActiveTurn.init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(v34, v43, v36, v45, v31, v46, v0 + 56, v39);
    swift_release();
    swift_unknownObjectRelease();

    swift_release();
    outlined destroy of CamOutput(v33, type metadata accessor for RemoteConversationTurnData);
    v41 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v41(v49, v42);
    v41(v32, v42);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v40);
  }
  swift_retain();
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v24 = 0;
    _os_log_impl(&dword_1B4BE6000, v22, v23, "[ConversationService] Starting turn for potential corrections invocations", v24, 2u);
    MEMORY[0x1B5E44758](v24, -1, -1);
  }

  v25 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 584) = v25;
  *v25 = v0;
  v25[1] = ConversationService.setupNewTurn(executionRequestId:rootRequestId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
  return RemoteConversationClient.startTurn(turnData:bridge:)(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v14)(void);
  __int128 v15;

  v1 = *(_QWORD **)(v0 + 528);
  v3 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 336);
  v6 = v1 + 16;
  v15 = *(_OWORD *)(v0 + 296);
  Logger.debugF(file:function:)();
  v7 = v1[19];
  v8 = v1[20];
  __swift_project_boxed_opaque_existential_1(v6, v7);
  outlined init with copy of ConversationHelperInput(v2, v3, type metadata accessor for RemoteConversationTurnData);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  outlined init with take of StringKeyedValue(v3, v10 + v9, type metadata accessor for RemoteConversationTurnData);
  *(_OWORD *)(v10 + ((v4 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = v15;
  v11 = swift_allocObject();
  *(_QWORD *)(v0 + 552) = v11;
  *(_QWORD *)(v11 + 16) = &async function pointer to partial apply for closure #1 in RemoteConversationClient.startTurn(turnData:bridge:);
  *(_QWORD *)(v11 + 24) = v10;
  v14 = (uint64_t (*)(void))(**(int **)(v8 + 8) + *(_QWORD *)(v8 + 8));
  swift_unknownObjectRetain();
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 560) = v12;
  *v12 = v0;
  v12[1] = ConversationService.setupNewTurn(executionRequestId:rootRequestId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
  return v14();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 568) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;

  result = swift_release();
  v2 = *(_QWORD *)(v0 + 544);
  v3 = *(_QWORD *)(v0 + 536);
  *(_QWORD *)(v0 + 520) = v2;
  *(_QWORD *)(v0 + 512) = v3;
  v4 = *(_QWORD *)(v0 + 488);
  if (v4 < 0)
  {
    v9 = __CocoaSet.Iterator.next()();
    if (!v9)
      goto LABEL_23;
    *(_QWORD *)(v0 + 224) = v9;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v8 = *(_QWORD *)(v0 + 216);
    swift_unknownObjectRelease();
    v7 = v3;
    v5 = v2;
    goto LABEL_7;
  }
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
    v7 = v3;
LABEL_4:
    v8 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v6);
    swift_retain();
LABEL_7:
    *(_QWORD *)(v0 + 544) = v5;
    *(_QWORD *)(v0 + 536) = v7;
    *(_QWORD *)(v0 + 528) = v8;
    if (v8)
      return swift_task_switch();
    goto LABEL_23;
  }
  v10 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    return result;
  }
  v11 = (unint64_t)(*(_QWORD *)(v0 + 504) + 64) >> 6;
  if (v10 < v11)
  {
    v12 = *(_QWORD *)(v0 + 496);
    v13 = *(_QWORD *)(v12 + 8 * v10);
    v7 = v3 + 1;
    if (!v13)
    {
      v7 = v3 + 2;
      if (v3 + 2 >= v11)
        goto LABEL_23;
      v13 = *(_QWORD *)(v12 + 8 * v7);
      if (!v13)
      {
        v7 = v3 + 3;
        if (v3 + 3 >= v11)
          goto LABEL_23;
        v13 = *(_QWORD *)(v12 + 8 * v7);
        if (!v13)
        {
          v7 = v3 + 4;
          if (v3 + 4 >= v11)
            goto LABEL_23;
          v13 = *(_QWORD *)(v12 + 8 * v7);
          if (!v13)
          {
            v14 = v3 + 5;
            while (v11 != v14)
            {
              v13 = *(_QWORD *)(v12 + 8 * v14++);
              if (v13)
              {
                v7 = v14 - 1;
                goto LABEL_12;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
LABEL_12:
    v5 = (v13 - 1) & v13;
    v6 = __clz(__rbit64(v13)) + (v7 << 6);
    goto LABEL_4;
  }
LABEL_23:
  v15 = *(_QWORD *)(v0 + 312);
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  swift_beginAccess();
  v16 = *(_QWORD *)(v15 + 280);
  *(_QWORD *)(v0 + 576) = v16;
  if (!v16)
  {
    swift_release();
    v21 = *(_QWORD *)(v0 + 312);
    swift_beginAccess();
    v22 = *(unsigned __int8 *)(v21 + 120);
    if (v22 >> 6)
    {
      if (v22 >> 6 != 1 || (v22 & 1) == 0)
        goto LABEL_31;
    }
    else if ((*(_BYTE *)(v21 + 112) & 1) == 0)
    {
      goto LABEL_31;
    }
    v23 = *(_QWORD **)(v0 + 312);
    v24 = v23[5];
    v25 = v23[6];
    __swift_project_boxed_opaque_existential_1(v23 + 2, v24);
    (*(void (**)(uint64_t, uint64_t))(v25 + 56))(v24, v25);
LABEL_31:
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
    v26 = *(_QWORD *)(v0 + 416);
    v42 = *(void **)(v0 + 432);
    v41 = *(unsigned __int8 *)(v0 + 600);
    v27 = *(_QWORD *)(v0 + 392);
    v44 = *(_QWORD *)(v0 + 384);
    v43 = *(_QWORD *)(v0 + 368);
    v28 = *(_QWORD *)(v0 + 352);
    v37 = *(_QWORD *)(v0 + 360);
    v38 = *(_QWORD *)(v0 + 376);
    v29 = *(uint64_t **)(v0 + 344);
    v30 = *(_QWORD *)(v0 + 312);
    v40 = *(_QWORD *)(v0 + 304);
    v31 = *(_QWORD *)(v0 + 296);
    v32 = *(_QWORD *)(v30 + 40);
    v33 = *(_QWORD *)(v30 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v30 + 16), v32);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v27, v32, v33);
    outlined init with copy of ConversationHelperInput(v28, (uint64_t)v29, type metadata accessor for RemoteConversationTurnData);
    v39(v38, v44, v37);
    outlined init with copy of ReferenceResolutionClientProtocol(v30 + 144, v0 + 56);
    v34 = *(unsigned __int8 *)(v30 + 304);
    type metadata accessor for ConversationService.ActiveTurn(0);
    swift_allocObject();
    swift_unknownObjectRetain();
    swift_retain();
    v35 = specialized ConversationService.ActiveTurn.init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(v29, v38, v31, v40, v26, v41, v0 + 56, v34);
    swift_release();
    swift_unknownObjectRelease();

    swift_release();
    outlined destroy of CamOutput(v28, type metadata accessor for RemoteConversationTurnData);
    v36 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v36(v44, v37);
    v36(v27, v37);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v35);
  }
  swift_retain();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1B4BE6000, v17, v18, "[ConversationService] Starting turn for potential corrections invocations", v19, 2u);
    MEMORY[0x1B5E44758](v19, -1, -1);
  }

  v20 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 584) = v20;
  *v20 = v0;
  v20[1] = ConversationService.setupNewTurn(executionRequestId:rootRequestId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
  return RemoteConversationClient.startTurn(turnData:bridge:)(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = *(void **)(v0 + 432);
  swift_release();
  swift_release();

  swift_release();
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  v3 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 360);
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 352), type metadata accessor for RemoteConversationTurnData);
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v3, v5);
  v6(v2, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 592) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 312);
  swift_beginAccess();
  v2 = *(unsigned __int8 *)(v1 + 120);
  if (!(v2 >> 6))
  {
    if ((*(_BYTE *)(v1 + 112) & 1) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (v2 >> 6 == 1 && (v2 & 1) != 0)
  {
LABEL_4:
    v3 = *(_QWORD **)(v0 + 312);
    v4 = v3[5];
    v5 = v3[6];
    __swift_project_boxed_opaque_existential_1(v3 + 2, v4);
    (*(void (**)(uint64_t, uint64_t))(v5 + 56))(v4, v5);
  }
LABEL_5:
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  v6 = *(_QWORD *)(v0 + 416);
  v23 = *(void **)(v0 + 432);
  v22 = *(unsigned __int8 *)(v0 + 600);
  v7 = *(_QWORD *)(v0 + 392);
  v25 = *(_QWORD *)(v0 + 384);
  v24 = *(_QWORD *)(v0 + 368);
  v8 = *(_QWORD *)(v0 + 352);
  v18 = *(_QWORD *)(v0 + 360);
  v19 = *(_QWORD *)(v0 + 376);
  v9 = *(uint64_t **)(v0 + 344);
  v10 = *(_QWORD *)(v0 + 312);
  v21 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 296);
  v12 = *(_QWORD *)(v10 + 40);
  v13 = *(_QWORD *)(v10 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v10 + 16), v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v7, v12, v13);
  outlined init with copy of ConversationHelperInput(v8, (uint64_t)v9, type metadata accessor for RemoteConversationTurnData);
  v20(v19, v25, v18);
  outlined init with copy of ReferenceResolutionClientProtocol(v10 + 144, v0 + 56);
  v14 = *(unsigned __int8 *)(v10 + 304);
  type metadata accessor for ConversationService.ActiveTurn(0);
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_retain();
  v15 = specialized ConversationService.ActiveTurn.init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(v9, v19, v11, v21, v6, v22, v0 + 56, v14);
  swift_release();
  swift_unknownObjectRelease();

  swift_release();
  outlined destroy of CamOutput(v8, type metadata accessor for RemoteConversationTurnData);
  v16 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v16(v25, v18);
  v16(v7, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v15);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = *(void **)(v0 + 432);
  swift_release();

  swift_release();
  v3 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 360);
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 352), type metadata accessor for RemoteConversationTurnData);
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v3, v5);
  v6(v2, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v1 = *(void **)(v0 + 432);
  swift_release();
  swift_release();

  swift_release();
  v3 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 368);
  v5 = *(_QWORD *)(v0 + 360);
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 352), type metadata accessor for RemoteConversationTurnData);
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v3, v5);
  v6(v2, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 776) = a1;
  *(_QWORD *)(v3 + 784) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 834) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 835) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char *v5;

  v5 = &async function pointer to specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:)[*(int *)async function pointer to specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:)];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t))v5)(a1);
}

uint64_t ConversationService.State.isNewSession.getter(char a1, unsigned __int8 a2)
{
  unsigned int v2;

  v2 = a2 & 1;
  if (a2 >> 6 != 1)
    v2 = 0;
  if (a2 >> 6)
    return v2;
  else
    return a1 & 1;
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 96) = a1;
  *(_QWORD *)(v4 + 104) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD *, void *, _QWORD, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = (_QWORD *)v0[13];
  v2 = type metadata accessor for Logger();
  v0[14] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = v1 + 16;
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v8 = (uint64_t (*)(_QWORD *, void *, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v5 + 16)
                                                                                   + *(_QWORD *)(v5 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  v0[15] = v6;
  *v6 = v0;
  v6[1] = closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  return v8(v0 + 22, &async function pointer to closure #1 in RemoteConversationClient.ensureReady(), 0, MEMORY[0x1E0DEE9C0] + 8, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, void *, _QWORD, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 104);
  v2 = v1 + 16;
  Logger.debugF(file:function:)();
  v3 = v1[19];
  v4 = v1[20];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v7 = (uint64_t (*)(uint64_t, void *, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v4 + 16)
                                                                                  + *(_QWORD *)(v4 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v5;
  *v5 = v0;
  v5[1] = closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  return v7(v0 + 177, &async function pointer to closure #1 in RemoteConversationClient.reset(), 0, MEMORY[0x1E0DEE9C0] + 8, v3, v4);
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  outlined init with copy of ReferenceResolutionClientProtocol(v0[13] + 128, (uint64_t)(v0 + 2));
  v1 = v0[5];
  v2 = v0[6];
  v0[18] = v1;
  v0[19] = v2;
  v0[20] = __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  v0[21] = *(_QWORD *)(v2 + 24);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 168))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v14;

  v1 = (void *)v0[16];
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (void *)v0[16];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315138;
    v14 = v8;
    v0[10] = v6;
    v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v10 = String.init<A>(describing:)();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v4, v5, "Error ensuring active conversation is ready (will reset the remote conversation state, and reconnect): %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }
  else
  {
    v12 = (void *)v0[16];

  }
  return swift_task_switch();
}

uint64_t closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 96) = a1;
  *(_QWORD *)(v4 + 104) = a4;
  return swift_task_switch();
}

uint64_t closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD *, void *, _QWORD, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = (_QWORD *)v0[13];
  v2 = type metadata accessor for Logger();
  v0[14] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = v1 + 16;
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v8 = (uint64_t (*)(_QWORD *, void *, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v5 + 16)
                                                                                   + *(_QWORD *)(v5 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  v0[15] = v6;
  *v6 = v0;
  v6[1] = closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  return v8(v0 + 22, &async function pointer to closure #1 in RemoteConversationClient.ensureReady(), 0, MEMORY[0x1E0DEE9C0] + 8, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  **(_QWORD **)(v0 + 96) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, void *, _QWORD, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 104);
  v2 = v1 + 16;
  Logger.debugF(file:function:)();
  v3 = v1[19];
  v4 = v1[20];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v7 = (uint64_t (*)(uint64_t, void *, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v4 + 16)
                                                                                  + *(_QWORD *)(v4 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v5;
  *v5 = v0;
  v5[1] = closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  return v7(v0 + 177, &async function pointer to closure #1 in RemoteConversationClient.reset(), 0, MEMORY[0x1E0DEE9C0] + 8, v3, v4);
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  outlined init with copy of ReferenceResolutionClientProtocol(v0[13] + 128, (uint64_t)(v0 + 2));
  v1 = v0[5];
  v2 = v0[6];
  v0[18] = v1;
  v0[19] = v2;
  v0[20] = __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  v0[21] = *(_QWORD *)(v2 + 24);
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(v0 + 168))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v4)(void);

  v1 = *(_QWORD **)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);

  *v1 = v2;
  v4 = *(uint64_t (**)(void))(v0 + 8);
  swift_retain();
  return v4();
}

{
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v14;

  v1 = (void *)v0[16];
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (void *)v0[16];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    *(_DWORD *)v7 = 136315138;
    v14 = v8;
    v0[10] = v6;
    v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v10 = String.init<A>(describing:)();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v4, v5, "Error ensuring previous completed conversation is ready (will reset the remote conversation state, and reconnect): %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }
  else
  {
    v12 = (void *)v0[16];

  }
  return swift_task_switch();
}

uint64_t ConversationService.State.assertTurnStarted(function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t result;

  result = specialized ConversationService.State.assertTurnStarted(function:)(a1, a2, a3, a4, a5);
  if (!v5)
    return swift_retain();
  return result;
}

uint64_t closure #1 in ConversationService.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8[27] = a7;
  v8[28] = a8;
  v8[25] = a5;
  v8[26] = a6;
  v8[23] = a1;
  v8[24] = a4;
  v9 = type metadata accessor for Siri_Nlu_External_Parser();
  v8[29] = v9;
  v8[30] = *(_QWORD *)(v9 - 8);
  v8[31] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v8[32] = swift_task_alloc();
  type metadata accessor for InputContinuationState();
  v8[33] = swift_task_alloc();
  v10 = type metadata accessor for Parse();
  v8[34] = v10;
  v8[35] = *(_QWORD *)(v10 - 8);
  v8[36] = swift_task_alloc();
  v8[37] = swift_task_alloc();
  v11 = type metadata accessor for Siri_Nlu_External_UserParse();
  v8[38] = v11;
  v8[39] = *(_QWORD *)(v11 - 8);
  v8[40] = swift_task_alloc();
  v8[41] = swift_task_alloc();
  v8[42] = swift_task_alloc();
  v8[43] = swift_task_alloc();
  v8[44] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v8[45] = swift_task_alloc();
  v12 = type metadata accessor for Input();
  v8[46] = v12;
  v8[47] = *(_QWORD *)(v12 - 8);
  v8[48] = swift_task_alloc();
  v8[49] = swift_task_alloc();
  v8[50] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DecisionEngineResponse?);
  v8[51] = swift_task_alloc();
  v13 = type metadata accessor for DecisionEngineResponse();
  v8[52] = v13;
  v8[53] = *(_QWORD *)(v13 - 8);
  v8[54] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  v8[55] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  v8[56] = swift_task_alloc();
  v8[57] = swift_task_alloc();
  v14 = type metadata accessor for ServerFallbackReason();
  v8[58] = v14;
  v8[59] = *(_QWORD *)(v14 - 8);
  v8[60] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v8[61] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveInput:from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, _QWORD, uint64_t, uint64_t);
  char v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ObjectType;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  void (*v89)(uint64_t, unint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 192) + 40);
  *(_QWORD *)(v0 + 496) = v1;
  if (!v1)
    goto LABEL_4;
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 472);
  v4 = *(_QWORD *)(v0 + 456);
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, v4, &demangling cache variable for type metadata for ServerFallbackReason?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 456), &demangling cache variable for type metadata for ServerFallbackReason?);
LABEL_4:
    v5 = *(_QWORD *)(v0 + 200);
    swift_beginAccess();
    v7 = *(_QWORD *)(v5 + 104);
    if ((v7 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v8 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
      if (v8)
      {
LABEL_6:
        *(_QWORD *)(v0 + 504) = static MessageBusActor.shared;
        lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v6, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
        v9 = (int8x16_t *)swift_task_alloc();
        *(_QWORD *)(v0 + 512) = v9;
        v9[1] = vextq_s8(*(int8x16_t *)(v0 + 192), *(int8x16_t *)(v0 + 192), 8uLL);
        swift_retain();
        v10 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 520) = v10;
        *v10 = v0;
        v10[1] = closure #1 in ConversationService.bridge(didReceiveInput:from:);
        return withTaskGroup<A, B>(of:returning:isolation:body:)();
      }
    }
    else if (*(_QWORD *)(v7 + 16))
    {
      goto LABEL_6;
    }
    v28 = (_QWORD *)(*(_QWORD *)(v0 + 200) + 280);
    swift_beginAccess();
    if (!*v28)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v50 = type metadata accessor for Logger();
      *(_QWORD *)(v0 + 528) = __swift_project_value_buffer(v50, (uint64_t)static Logger.executor);
      v51 = Logger.logObject.getter();
      v52 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v53 = 0;
        _os_log_impl(&dword_1B4BE6000, v51, v52, "[ConversationService] Eagerly executing...", v53, 2u);
        MEMORY[0x1B5E44758](v53, -1, -1);
      }

      swift_retain();
      v54 = Logger.logObject.getter();
      v55 = static os_log_type_t.debug.getter();
      v56 = os_log_type_enabled(v54, v55);
      v57 = *(_QWORD *)(v0 + 192);
      if (v56)
      {
        v58 = (uint8_t *)swift_slowAlloc();
        v59 = swift_slowAlloc();
        v99 = v59;
        *(_DWORD *)v58 = 136315138;
        v60 = *(_QWORD *)(v57 + 16);
        v61 = *(_QWORD *)(v57 + 24);
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_1B4BE6000, v54, v55, "[ConversationService] calling decision engine for rcId: %s", v58, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v59, -1, -1);
        MEMORY[0x1B5E44758](v58, -1, -1);
      }
      else
      {
        swift_release();
      }

      v78 = *(_QWORD **)(v0 + 200);
      v79 = v78[6];
      __swift_project_boxed_opaque_existential_1(v78 + 2, v78[5]);
      *(_QWORD *)(v0 + 536) = v78[13];
      *(_QWORD *)(v0 + 544) = *v28;
      v98 = **(int **)(v79 + 8) + *(_QWORD *)(v79 + 8);
      swift_bridgeObjectRetain();
      swift_retain();
      v80 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 552) = v80;
      *v80 = v0;
      v80[1] = closure #1 in ConversationService.bridge(didReceiveInput:from:);
      __asm { BR              X8 }
    }
    swift_release();
    if (one-time initialization token for executor != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
    swift_retain_n();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.debug.getter();
    v32 = os_log_type_enabled(v30, v31);
    v33 = *(_QWORD *)(v0 + 192);
    if (v32)
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      v99 = v35;
      *(_DWORD *)v34 = 136315138;
      *(_QWORD *)(v0 + 160) = v33;
      type metadata accessor for ConversationUserInput(0);
      swift_retain();
      v36 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v30, v31, "[ConversationService] Skipping eager for %s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v35, -1, -1);
      MEMORY[0x1B5E44758](v34, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v62 = *(_QWORD *)(v0 + 496);
    if (v62)
    {
      v63 = *(_QWORD *)(v62 + 16);
      if (*(_QWORD *)(v63 + 16))
      {
        v64 = *(_QWORD *)(v0 + 312);
        v89 = *(void (**)(uint64_t, unint64_t, uint64_t))(v64 + 16);
        v89(*(_QWORD *)(v0 + 320), v63 + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80)), *(_QWORD *)(v0 + 304));
        v65 = Logger.logObject.getter();
        v66 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v65, v66))
        {
          v67 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v67 = 0;
          _os_log_impl(&dword_1B4BE6000, v65, v66, "[ConversationService] Storing first parse from ConversationUserInput for execution overrides check", v67, 2u);
          MEMORY[0x1B5E44758](v67, -1, -1);
        }
        v86 = *(_QWORD *)(v0 + 384);
        v91 = *(_QWORD *)(v0 + 376);
        v97 = *(_QWORD *)(v0 + 368);
        v68 = *(_QWORD *)(v0 + 336);
        v69 = *(_QWORD *)(v0 + 320);
        v94 = *(_QWORD *)(v0 + 312);
        v71 = *(_QWORD *)(v0 + 296);
        v70 = *(_QWORD *)(v0 + 304);
        v73 = *(_QWORD *)(v0 + 248);
        v72 = *(_QWORD *)(v0 + 256);
        v74 = *(_QWORD *)(v0 + 240);
        v81 = *(_QWORD *)(v0 + 232);
        v82 = *(_QWORD *)(v0 + 280);
        v84 = *(_QWORD *)(v0 + 272);
        v85 = *(_QWORD *)(v0 + 208);
        v75 = *(_QWORD *)(v0 + 192);

        v76 = *(_QWORD *)(v75 + 16);
        v83 = *(_QWORD *)(v75 + 24);
        v89(v68, v69, v70);
        Siri_Nlu_External_UserParse.parser.getter();
        Siri_Nlu_External_Parser.parserID.getter();
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v81);
        v77 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v72, 0, 1, v77);
        USOParse.init(userParse:parserIdentifier:appBundleId:)();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v82 + 104))(v71, *MEMORY[0x1E0D9C678], v84);
        Input.init(parse:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85 + 352))(v76, v83, v86);
        (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v86, v97);
        (*(void (**)(unint64_t, uint64_t))(v94 + 8))(v69, v70);
      }
    }
    **(_QWORD **)(v0 + 184) = *(_QWORD *)(v0 + 192);
    type metadata accessor for ConversationService.EagerResult(0);
    swift_storeEnumTagMultiPayload();
    type metadata accessor for ConversationSELFHelper();
    swift_retain();
    goto LABEL_38;
  }
  v12 = *(_QWORD *)(v0 + 480);
  v13 = *(_QWORD *)(v0 + 464);
  v14 = *(_QWORD **)(v0 + 472);
  v15 = *(_QWORD *)(v0 + 448);
  v16 = *(_QWORD *)(v0 + 456);
  v17 = *(_QWORD *)(v0 + 440);
  v90 = *(_QWORD *)(v0 + 312);
  v92 = *(_QWORD *)(v0 + 304);
  v18 = *(_QWORD **)(v0 + 200);
  v95 = *(_QWORD *)(v0 + 208);
  swift_retain();
  swift_release();
  v87 = (void (*)(uint64_t, uint64_t, uint64_t))v14[4];
  v87(v12, v16, v13);
  v19 = v18 + 29;
  v20 = v18[32];
  v21 = v18[33];
  __swift_project_boxed_opaque_existential_1(v19, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v17, 1, 1, v92);
  v93 = (void (*)(uint64_t, uint64_t, uint64_t))v14[2];
  v93(v15, v12, v13);
  v22 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v14[7];
  v22(v15, 0, 1, v13);
  v23 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v21 + 8))(0, v17, v15, *(_QWORD *)(v95 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData), *(_QWORD *)(v95 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 8), v20, v21);
  outlined destroy of ReferenceResolutionClientProtocol?(v15, &demangling cache variable for type metadata for ServerFallbackReason?);
  outlined destroy of ReferenceResolutionClientProtocol?(v17, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  if ((v23 & 1) == 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v96 = v22;
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.executor);
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v41 = 0;
      _os_log_impl(&dword_1B4BE6000, v39, v40, "[ConversationService] Receiving serverFallbackReason from NLResponse for eager task and shouldDisableServerFallback returns false, will fall back to server if this RC is selected.", v41, 2u);
      MEMORY[0x1B5E44758](v41, -1, -1);
    }
    v42 = *(_QWORD *)(v0 + 480);
    v43 = *(_QWORD *)(v0 + 464);
    v44 = *(_QWORD *)(v0 + 448);
    v45 = *(_QWORD *)(v0 + 224);
    v46 = *(_QWORD *)(v0 + 192);
    v88 = *(_QWORD *)(v0 + 472);

    ObjectType = swift_getObjectType();
    v48 = *(_QWORD *)(v46 + 16);
    v49 = *(_QWORD *)(v46 + 24);
    v93(v44, v42, v43);
    v96(v44, 0, 1, v43);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 48))(v48, v49, v44, ObjectType, v45);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v44, &demangling cache variable for type metadata for ServerFallbackReason?);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v42, v43);
    type metadata accessor for ConversationService.EagerResult(0);
    swift_storeEnumTagMultiPayload();
    type metadata accessor for ConversationSELFHelper();
    static ConversationSELFHelper.shared.getter();
    goto LABEL_39;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1B4BE6000, v25, v26, "[ConversationService] Receiving serverFallbackReason from NLResponse for eager task but shouldDisableServerFallback returns true, we will generate fatal response for request", v27, 2u);
    MEMORY[0x1B5E44758](v27, -1, -1);

    swift_release();
  }
  else
  {
    swift_release();

  }
  v87(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 464));
  type metadata accessor for ConversationService.EagerResult(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for ConversationSELFHelper();
LABEL_38:
  static ConversationSELFHelper.shared.getter();
LABEL_39:
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, unint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  if (*(_BYTE *)(v0 + 612) == 1)
  {
    v1 = (_QWORD *)(*(_QWORD *)(v0 + 200) + 280);
    swift_beginAccess();
    if (!*v1)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v28 = type metadata accessor for Logger();
      *(_QWORD *)(v0 + 528) = __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_1B4BE6000, v29, v30, "[ConversationService] Eagerly executing...", v31, 2u);
        MEMORY[0x1B5E44758](v31, -1, -1);
      }

      swift_retain();
      v32 = Logger.logObject.getter();
      v33 = static os_log_type_t.debug.getter();
      v34 = os_log_type_enabled(v32, v33);
      v35 = *(_QWORD *)(v0 + 192);
      if (v34)
      {
        v36 = (uint8_t *)swift_slowAlloc();
        v37 = swift_slowAlloc();
        v54 = v37;
        *(_DWORD *)v36 = 136315138;
        v38 = *(_QWORD *)(v35 + 16);
        v39 = *(_QWORD *)(v35 + 24);
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_1B4BE6000, v32, v33, "[ConversationService] calling decision engine for rcId: %s", v36, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v37, -1, -1);
        MEMORY[0x1B5E44758](v36, -1, -1);
      }
      else
      {
        swift_release();
      }

      v40 = *(_QWORD **)(v0 + 200);
      v41 = v40[6];
      __swift_project_boxed_opaque_existential_1(v40 + 2, v40[5]);
      *(_QWORD *)(v0 + 536) = v40[13];
      *(_QWORD *)(v0 + 544) = *v1;
      v53 = **(int **)(v41 + 8) + *(_QWORD *)(v41 + 8);
      swift_bridgeObjectRetain();
      swift_retain();
      v42 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 552) = v42;
      *v42 = v0;
      v42[1] = closure #1 in ConversationService.bridge(didReceiveInput:from:);
      __asm { BR              X8 }
    }
  }
  swift_release();
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  swift_retain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 192);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v54 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v0 + 160) = v6;
    type metadata accessor for ConversationUserInput(0);
    swift_retain();
    v9 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[ConversationService] Skipping eager for %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v8, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v11 = *(_QWORD *)(v0 + 496);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    if (*(_QWORD *)(v12 + 16))
    {
      v13 = *(_QWORD *)(v0 + 312);
      v49 = *(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16);
      v49(*(_QWORD *)(v0 + 320), v12 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), *(_QWORD *)(v0 + 304));
      v14 = Logger.logObject.getter();
      v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_1B4BE6000, v14, v15, "[ConversationService] Storing first parse from ConversationUserInput for execution overrides check", v16, 2u);
        MEMORY[0x1B5E44758](v16, -1, -1);
      }
      v48 = *(_QWORD *)(v0 + 384);
      v50 = *(_QWORD *)(v0 + 376);
      v52 = *(_QWORD *)(v0 + 368);
      v17 = *(_QWORD *)(v0 + 336);
      v18 = *(_QWORD *)(v0 + 320);
      v51 = *(_QWORD *)(v0 + 312);
      v20 = *(_QWORD *)(v0 + 296);
      v19 = *(_QWORD *)(v0 + 304);
      v22 = *(_QWORD *)(v0 + 248);
      v21 = *(_QWORD *)(v0 + 256);
      v23 = *(_QWORD *)(v0 + 240);
      v43 = *(_QWORD *)(v0 + 232);
      v44 = *(_QWORD *)(v0 + 280);
      v46 = *(_QWORD *)(v0 + 272);
      v47 = *(_QWORD *)(v0 + 208);
      v24 = *(_QWORD *)(v0 + 192);

      v25 = *(_QWORD *)(v24 + 16);
      v45 = *(_QWORD *)(v24 + 24);
      v49(v17, v18, v19);
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v43);
      v26 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v21, 0, 1, v26);
      USOParse.init(userParse:parserIdentifier:appBundleId:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v44 + 104))(v20, *MEMORY[0x1E0D9C678], v46);
      Input.init(parse:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v47 + 352))(v25, v45, v48);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v52);
      (*(void (**)(unint64_t, uint64_t))(v51 + 8))(v18, v19);
    }
  }
  **(_QWORD **)(v0 + 184) = *(_QWORD *)(v0 + 192);
  type metadata accessor for ConversationService.EagerResult(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for ConversationSELFHelper();
  swift_retain();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 560) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unsigned int v88;
  void (*v89)(uint64_t, unint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;

  v1 = v0;
  v2 = v0[52];
  v3 = v0[51];
  v97 = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[53] + 48))(v3, 1, v2) == 1)
  {
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v3, &demangling cache variable for type metadata for DecisionEngineResponse?);
    swift_retain();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    v6 = os_log_type_enabled(v4, v5);
    v7 = v0[24];
    if (v6)
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v98 = v9;
      *(_DWORD *)v8 = 136315138;
      v11 = *(_QWORD *)(v7 + 16);
      v10 = *(_QWORD *)(v7 + 24);
      swift_bridgeObjectRetain();
      v12 = v11;
      v1 = v0;
      v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v10, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1B4BE6000, v4, v5, "[ConversationService] No DecisionEngine response found for rcId %s during eager phase. Will redirect to server if this result is selected.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v9, -1, -1);
      MEMORY[0x1B5E44758](v8, -1, -1);
    }
    else
    {
      swift_release();
    }

LABEL_9:
    type metadata accessor for ConversationService.EagerResult(0);
    swift_storeEnumTagMultiPayload();
    type metadata accessor for ConversationSELFHelper();
    static ConversationSELFHelper.shared.getter();
    dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return ((uint64_t (*)(void))v1[1])();
  }
  v13 = v0[54];
  v15 = v0[46];
  v14 = v0[47];
  v16 = v1[45];
  outlined init with take of StringKeyedValue(v3, v1[54], (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
  v17 = *(int *)(v2 + 24);
  *((_DWORD *)v1 + 152) = v17;
  outlined init with copy of ReferenceResolutionClientProtocol?(v13 + v17, v16, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v1[45], &demangling cache variable for type metadata for Input?);
    v18 = (uint64_t *)v1[54];
    v19 = *v18;
    v1[72] = *v18;
    if (v19)
    {
      swift_retain();
      return swift_task_switch();
    }
    swift_release();
    swift_retain_n();
    v61 = Logger.logObject.getter();
    v62 = static os_log_type_t.debug.getter();
    v63 = os_log_type_enabled(v61, v62);
    v64 = v1[54];
    v65 = v1[24];
    if (v63)
    {
      v96 = v1[54];
      v66 = (uint8_t *)swift_slowAlloc();
      v67 = swift_slowAlloc();
      v98 = v67;
      *(_DWORD *)v66 = 136315138;
      v69 = *(_QWORD *)(v65 + 16);
      v68 = *(_QWORD *)(v65 + 24);
      swift_bridgeObjectRetain();
      v70 = v69;
      v1 = v97;
      v97[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v68, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v61, v62, "[ConversationService] No conversation found for rcId %s during eager phase. Will redirect to server if this result is selected.", v66, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v67, -1, -1);
      MEMORY[0x1B5E44758](v66, -1, -1);

      outlined destroy of CamOutput(v96, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
    }
    else
    {

      swift_release_n();
      outlined destroy of CamOutput(v64, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
    }
    goto LABEL_9;
  }
  v21 = v1[62];
  v22 = v1[49];
  v23 = v1[50];
  v24 = v1[46];
  v25 = v1[47];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v25 + 32))(v23, v1[45], v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v22, v23, v24);
  if (!v21)
    goto LABEL_34;
  v26 = *(_QWORD *)(v1[62] + 16);
  v27 = MEMORY[0x1E0DEE9D8];
  v98 = MEMORY[0x1E0DEE9D8];
  v28 = *(_QWORD *)(v26 + 16);
  result = swift_bridgeObjectRetain();
  if (!v28)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    v43 = *(_QWORD *)(v27 + 16);
    if (v43)
    {
      v44 = v1[39];
      v45 = v1[35];
      v91 = v1[30];
      v98 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43, 0);
      v46 = v27 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
      v92 = v44;
      v89 = *(void (**)(uint64_t, unint64_t, uint64_t))(v44 + 16);
      v90 = *(_QWORD *)(v44 + 72);
      v88 = *MEMORY[0x1E0D9C678];
      v47 = v98;
      v87 = v45;
      do
      {
        v95 = v43;
        v48 = v1[41];
        v49 = v1[42];
        v50 = v1[38];
        v51 = v1[36];
        v93 = v1[34];
        v52 = v1;
        v53 = v1[32];
        v54 = v52[31];
        v55 = v52[29];
        v89(v49, v46, v50);
        v89(v48, v49, v50);
        Siri_Nlu_External_UserParse.parser.getter();
        Siri_Nlu_External_Parser.parserID.getter();
        (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v54, v55);
        v56 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v53, 0, 1, v56);
        USOParse.init(userParse:parserIdentifier:appBundleId:)();
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v87 + 104))(v51, v88, v93);
        (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v49, v50);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v47 + 16) + 1, 1);
          v47 = v98;
        }
        v58 = *(_QWORD *)(v47 + 16);
        v57 = *(_QWORD *)(v47 + 24);
        v1 = v97;
        if (v58 >= v57 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
          v47 = v98;
        }
        v59 = v97[36];
        v60 = v97[34];
        *(_QWORD *)(v47 + 16) = v58 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v87 + 32))(v47+ ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80))+ *(_QWORD *)(v87 + 72) * v58, v59, v60);
        v98 = v47;
        v46 += v90;
        v43 = v95 - 1;
      }
      while (v95 != 1);
      swift_release();
    }
    else
    {
      swift_release();
      v47 = MEMORY[0x1E0DEE9D8];
    }
    v71 = v1[49];
    v72 = v1[47];
    v73 = v1[48];
    v74 = v1[46];
    Input.parse.getter();
    v98 = Input.alternatives.getter();
    specialized Array.append<A>(contentsOf:)(v47);
    Input.continuationState.getter();
    Input.init(parse:alternatives:continuationState:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 40))(v71, v73, v74);
LABEL_34:
    v75 = Logger.logObject.getter();
    v76 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc();
      v78 = swift_slowAlloc();
      v98 = v78;
      *(_DWORD *)v77 = 136315138;
      swift_beginAccess();
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
      v79 = dispatch thunk of CustomStringConvertible.description.getter();
      v97[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, &v98);
      v1 = v97;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v75, v76, "[ConversationService] input: %s", v77, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v78, -1, -1);
      MEMORY[0x1B5E44758](v77, -1, -1);
    }

    v81 = v1[49];
    v82 = v1[26];
    v83 = v1[24];
    v84 = *(_QWORD *)(v83 + 16);
    v85 = *(_QWORD *)(v83 + 24);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v82 + 352))(v84, v85, v81);
    Input.parse.getter();
    v86 = (_QWORD *)swift_task_alloc();
    v1[71] = v86;
    *v86 = v1;
    v86[1] = closure #1 in ConversationService.bridge(didReceiveInput:from:);
    return specialized ConversationService.updateRequestHandlingExecutionSystem(activeTurn:rcId:parse:)(v1[26], v84, v85, v1[37]);
  }
  v29 = 0;
  v30 = v1[39];
  v94 = v28;
  while (v29 < *(_QWORD *)(v26 + 16))
  {
    v31 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    v32 = *(_QWORD *)(v30 + 72);
    v33 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(v30 + 16))(v1[44], v26 + v31 + v32 * v29, v1[38]);
    MEMORY[0x1B5E3FA6C](v33);
    v34 = Array<A>.hasWantedToPause.getter();
    swift_bridgeObjectRelease();
    v35 = v1[44];
    if ((v34 & 1) != 0)
    {
      v36 = v1[43];
      v37 = v1[38];
      v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32);
      v38(v36, v35, v37);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v27 + 16) + 1, 1);
        v27 = v98;
      }
      v40 = *(_QWORD *)(v27 + 16);
      v39 = *(_QWORD *)(v27 + 24);
      if (v40 >= v39 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
        v27 = v98;
      }
      v41 = v97[43];
      v42 = v97[38];
      *(_QWORD *)(v27 + 16) = v40 + 1;
      result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v38)(v27 + v31 + v40 * v32, v41, v42);
      v1 = v97;
      v98 = v27;
      v28 = v94;
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD))(v30 + 8))(v1[44], v1[38]);
    }
    if (v28 == ++v29)
      goto LABEL_22;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 296);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 272);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 280);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t *v4;
  uint64_t v5;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 376) + 8);
  v3(*(_QWORD *)(v0 + 400), v2);
  v3(v1, v2);
  v4 = *(uint64_t **)(v0 + 432);
  v5 = *v4;
  *(_QWORD *)(v0 + 576) = *v4;
  if (v5)
  {
    swift_retain();
    return swift_task_switch();
  }
  else
  {
    swift_release();
    swift_retain_n();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.debug.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 432);
    v11 = *(_QWORD *)(v0 + 192);
    if (v9)
    {
      v17 = *(_QWORD *)(v0 + 432);
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v18 = v13;
      *(_DWORD *)v12 = 136315138;
      v14 = *(_QWORD *)(v11 + 16);
      v15 = *(_QWORD *)(v11 + 24);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v7, v8, "[ConversationService] No conversation found for rcId %s during eager phase. Will redirect to server if this result is selected.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v13, -1, -1);
      MEMORY[0x1B5E44758](v12, -1, -1);

      v16 = v17;
    }
    else
    {

      swift_release_n();
      v16 = v10;
    }
    outlined destroy of CamOutput(v16, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
    type metadata accessor for ConversationService.EagerResult(0);
    swift_storeEnumTagMultiPayload();
    type metadata accessor for ConversationSELFHelper();
    static ConversationSELFHelper.shared.getter();
    dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(void);
  __int128 v9;

  v1 = *(_QWORD **)(v0 + 576);
  v2 = v1 + 16;
  v9 = *(_OWORD *)(v0 + 216);
  Logger.debugF(file:function:)();
  v3 = v1[19];
  v4 = v1[20];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  v5 = swift_allocObject();
  *(_QWORD *)(v0 + 584) = v5;
  *(_OWORD *)(v5 + 16) = v9;
  v8 = (uint64_t (*)(void))(**(int **)(v4 + 8) + *(_QWORD *)(v4 + 8));
  swift_unknownObjectRetain();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 592) = v6;
  *v6 = v0;
  v6[1] = closure #1 in ConversationService.bridge(didReceiveInput:from:);
  return v8();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 600) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(int *)(v0 + 608);
  v3 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD **)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  swift_release();
  v6 = (uint64_t)v5
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?))
              + 64);
  *v5 = v4;
  v5[1] = v1;
  outlined init with copy of ReferenceResolutionClientProtocol?(v3 + v2, v6, &demangling cache variable for type metadata for Input?);
  swift_retain();
  outlined destroy of CamOutput(v3, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
  type metadata accessor for ConversationService.EagerResult(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 432);
  swift_release();
  swift_release();
  outlined destroy of CamOutput(v1, (uint64_t (*)(_QWORD))type metadata accessor for DecisionEngineResponse);
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[24] = a3;
  v4[25] = a4;
  v4[22] = a1;
  v4[23] = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<Bool>.Iterator);
  v4[26] = v5;
  v4[27] = *(_QWORD *)(v5 - 8);
  v4[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[31] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  _QWORD *v47;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[2];

  v1 = *(_QWORD *)(v0 + 192);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 104);
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, 255, (uint64_t (*)(uint64_t))type metadata accessor for RemoteConversationClient, (uint64_t)&protocol conformance descriptor for RemoteConversationClient);
    Set.Iterator.init(_cocoa:)();
    v2 = *(_QWORD *)(v0 + 16);
    v50 = *(_QWORD *)(v0 + 24);
    v3 = *(_QWORD *)(v0 + 32);
    v4 = *(_QWORD *)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v6 = -1 << *(_BYTE *)(v2 + 32);
    v50 = v2 + 56;
    v7 = ~v6;
    v8 = -v6;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v5 = v9 & *(_QWORD *)(v2 + 56);
    swift_bridgeObjectRetain();
    v3 = v7;
    v4 = 0;
  }
  v49 = (unint64_t)(v3 + 64) >> 6;
  v51 = v2;
  while (v2 < 0)
  {
    v14 = __CocoaSet.Iterator.next()();
    if (!v14)
      goto LABEL_42;
    *(_QWORD *)(v0 + 168) = v14;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v15 = *(_QWORD *)(v0 + 160);
    swift_unknownObjectRelease();
    v13 = v4;
    v11 = v5;
    if (!v15)
      goto LABEL_42;
LABEL_30:
    v52 = v13;
    if (one-time initialization token for executor != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
    swift_retain_n();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v23 = swift_slowAlloc();
      v53 = v23;
      v54[0] = 0;
      *(_DWORD *)v22 = 136315138;
      v54[1] = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)v54, "FlowExtension(");
      HIBYTE(v54[1]) = -18;
      v24 = *(_QWORD *)(v15 + 112);
      v25 = *(void **)(v15 + 120);
      swift_bridgeObjectRetain();
      v26._countAndFlagsBits = v24;
      v26._object = v25;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._countAndFlagsBits = 41;
      v27._object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      swift_release();
      *(_QWORD *)(v22 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54[0], v54[1], &v53);
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v20, v21, "[ConversationService] check for inputContinuation support for conversation: %s", (uint8_t *)v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v23, -1, -1);
      MEMORY[0x1B5E44758](v22, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v28 = *(_QWORD *)(v0 + 232);
    v29 = *(_QWORD *)(v0 + 240);
    v30 = *(_QWORD *)(v0 + 200);
    v31 = type metadata accessor for TaskPriority();
    v32 = *(_QWORD *)(v31 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v29, 1, 1, v31);
    v33 = (_QWORD *)swift_allocObject();
    v33[2] = 0;
    v34 = v33 + 2;
    v33[3] = 0;
    v33[4] = v15;
    v33[5] = v30;
    outlined init with copy of ReferenceResolutionClientProtocol?(v29, v28, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    LODWORD(v28) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v28, 1, v31);
    swift_retain();
    swift_retain();
    v35 = *(_QWORD *)(v0 + 232);
    if ((_DWORD)v28 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 232), (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
      if (*v34)
        goto LABEL_37;
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v35, v31);
      if (*v34)
      {
LABEL_37:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v36 = dispatch thunk of Actor.unownedExecutor.getter();
        v38 = v37;
        swift_unknownObjectRelease();
        goto LABEL_40;
      }
    }
    v36 = 0;
    v38 = 0;
LABEL_40:
    v39 = **(_QWORD **)(v0 + 184);
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:);
    *(_QWORD *)(v40 + 24) = v33;
    v41 = v38 | v36;
    if (v38 | v36)
    {
      v41 = v0 + 56;
      *(_QWORD *)(v0 + 56) = 0;
      *(_QWORD *)(v0 + 64) = 0;
      *(_QWORD *)(v0 + 72) = v36;
      *(_QWORD *)(v0 + 80) = v38;
    }
    v10 = *(_QWORD *)(v0 + 240);
    *(_QWORD *)(v0 + 136) = 1;
    *(_QWORD *)(v0 + 144) = v41;
    *(_QWORD *)(v0 + 152) = v39;
    swift_task_create();
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v10, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v4 = v52;
    v5 = v11;
    v2 = v51;
  }
  if (v5)
  {
    v11 = (v5 - 1) & v5;
    v12 = __clz(__rbit64(v5)) | (v4 << 6);
    v13 = v4;
    goto LABEL_29;
  }
  v16 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v16 >= v49)
    goto LABEL_42;
  v17 = *(_QWORD *)(v50 + 8 * v16);
  v13 = v4 + 1;
  if (v17)
    goto LABEL_28;
  v13 = v4 + 2;
  if (v4 + 2 >= v49)
    goto LABEL_42;
  v17 = *(_QWORD *)(v50 + 8 * v13);
  if (v17)
    goto LABEL_28;
  v13 = v4 + 3;
  if (v4 + 3 >= v49)
    goto LABEL_42;
  v17 = *(_QWORD *)(v50 + 8 * v13);
  if (v17)
    goto LABEL_28;
  v13 = v4 + 4;
  if (v4 + 4 >= v49)
    goto LABEL_42;
  v17 = *(_QWORD *)(v50 + 8 * v13);
  if (v17)
  {
LABEL_28:
    v11 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_29:
    v15 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v12);
    swift_retain();
    if (!v15)
      goto LABEL_42;
    goto LABEL_30;
  }
  v18 = v4 + 5;
  while (v49 != v18)
  {
    v17 = *(_QWORD *)(v50 + 8 * v18++);
    if (v17)
    {
      v13 = v18 - 1;
      goto LABEL_28;
    }
  }
LABEL_42:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  if (one-time initialization token for executor == -1)
    goto LABEL_43;
LABEL_47:
  swift_once();
LABEL_43:
  v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
  v43 = Logger.logObject.getter();
  v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v45 = 0;
    _os_log_impl(&dword_1B4BE6000, v43, v44, "[ConversationService] checking if conversation group satisifies input continuation check", v45, 2u);
    MEMORY[0x1B5E44758](v45, -1, -1);
  }

  TaskGroup.makeAsyncIterator()();
  *(_QWORD *)(v0 + 256) = static MessageBusActor.shared;
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v46, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  swift_retain();
  v47 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 264) = v47;
  *v47 = v0;
  v47[1] = closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:);
  return TaskGroup.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  char v4;
  char *v5;
  _QWORD *v7;

  v3 = *(unsigned __int8 *)(v2 + 272);
  if (v3 == 2)
  {
    v4 = 1;
LABEL_5:
    v5 = *(char **)(v2 + 176);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v2 + 216) + 8))(*(_QWORD *)(v2 + 224), *(_QWORD *)(v2 + 208));
    swift_release();
    *v5 = v4;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    goto LABEL_5;
  }
  *(_QWORD *)(v2 + 256) = static MessageBusActor.shared;
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, a2, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 264) = v7;
  *v7 = v2;
  v7[1] = closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:);
  return TaskGroup.Iterator.next(isolation:)();
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  v6 = type metadata accessor for FlexibleExecutionSupportOptions();
  v5[8] = v6;
  v5[9] = *(_QWORD *)(v6 - 8);
  v5[10] = swift_task_alloc();
  v5[11] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  v7 = swift_task_alloc();
  v5[15] = v7;
  v8 = (_QWORD *)swift_task_alloc();
  v5[16] = v8;
  *v8 = v5;
  v8[1] = closure #1 in closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:);
  return RemoteConversationClient.flexibleExecutionSupportOptions()(v7);
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];

  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 120), 0, 1, *(_QWORD *)(v0 + 64));
  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(v2, v1, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  swift_retain_n();
  swift_retain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 112);
  if (v6)
  {
    v33 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 56);
    v10 = swift_slowAlloc();
    v34 = swift_slowAlloc();
    v35 = v34;
    *(_DWORD *)v10 = 136315650;
    v32 = v7;
    v12 = *(_QWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 12) = 2080;
    v36[0] = 0;
    v36[1] = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy((char *)v36, "FlowExtension(");
    HIBYTE(v36[1]) = -18;
    v13 = *(_QWORD *)(v9 + 112);
    v14 = *(void **)(v9 + 120);
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = v13;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 41;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    swift_release();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36[0], v36[1], &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 22) = 2080;
    outlined init with copy of ReferenceResolutionClientProtocol?(v32, v33, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    v17 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v32, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    _os_log_impl(&dword_1B4BE6000, v4, v5, "[ConversationService] flexible execution options for rcId: %s, active conversation:  %s are  %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v34, -1, -1);
    MEMORY[0x1B5E44758](v10, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_release_n();
    outlined destroy of ReferenceResolutionClientProtocol?(v7, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  }

  v19 = *(_QWORD *)(v0 + 96);
  v20 = *(_QWORD *)(v0 + 64);
  v21 = *(_QWORD *)(v0 + 72);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 120), v19, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  v23 = *(_QWORD *)(v0 + 120);
  v24 = *(_QWORD *)(v0 + 96);
  if (v22 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 120), &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    v25 = 0;
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 72);
    v26 = *(_QWORD *)(v0 + 80);
    v28 = *(_QWORD *)(v0 + 64);
    static FlexibleExecutionSupportOptions.inputContinuation.getter();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C460], MEMORY[0x1E0D9C470]);
    v29 = dispatch thunk of SetAlgebra.isSuperset(of:)();
    v30 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v30(v26, v28);
    outlined destroy of ReferenceResolutionClientProtocol?(v23, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    v30(v24, v28);
    v25 = v29 & 1;
  }
  **(_BYTE **)(v0 + 40) = v25;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[2];

  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 120), 1, 1, *(_QWORD *)(v0 + 64));
  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(v2, v1, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  swift_retain_n();
  swift_retain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 112);
  if (v6)
  {
    v33 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 56);
    v10 = swift_slowAlloc();
    v34 = swift_slowAlloc();
    v35 = v34;
    *(_DWORD *)v10 = 136315650;
    v32 = v7;
    v12 = *(_QWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 12) = 2080;
    v36[0] = 0;
    v36[1] = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy((char *)v36, "FlowExtension(");
    HIBYTE(v36[1]) = -18;
    v13 = *(_QWORD *)(v9 + 112);
    v14 = *(void **)(v9 + 120);
    swift_bridgeObjectRetain();
    v15._countAndFlagsBits = v13;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 41;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    swift_release();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36[0], v36[1], &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 22) = 2080;
    outlined init with copy of ReferenceResolutionClientProtocol?(v32, v33, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    v17 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v32, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    _os_log_impl(&dword_1B4BE6000, v4, v5, "[ConversationService] flexible execution options for rcId: %s, active conversation:  %s are  %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v34, -1, -1);
    MEMORY[0x1B5E44758](v10, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_release_n();
    outlined destroy of ReferenceResolutionClientProtocol?(v7, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  }

  v19 = *(_QWORD *)(v0 + 96);
  v20 = *(_QWORD *)(v0 + 64);
  v21 = *(_QWORD *)(v0 + 72);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 120), v19, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  v23 = *(_QWORD *)(v0 + 120);
  v24 = *(_QWORD *)(v0 + 96);
  if (v22 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 120), &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    v25 = 0;
  }
  else
  {
    v27 = *(_QWORD *)(v0 + 72);
    v26 = *(_QWORD *)(v0 + 80);
    v28 = *(_QWORD *)(v0 + 64);
    static FlexibleExecutionSupportOptions.inputContinuation.getter();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C460], MEMORY[0x1E0D9C470]);
    v29 = dispatch thunk of SetAlgebra.isSuperset(of:)();
    v30 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v30(v26, v28);
    outlined destroy of ReferenceResolutionClientProtocol?(v23, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    v30(v24, v28);
    v25 = v29 & 1;
  }
  **(_BYTE **)(v0 + 40) = v25;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v15 != -1)
    swift_once();
  swift_beginAccess();
  v16 = static MessageBusActor.shared;
  v18 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v17, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v16;
  v19[3] = v18;
  v19[4] = a4;
  v19[5] = a5;
  v19[6] = v5;
  v19[7] = a1;
  v19[8] = a2;
  v19[9] = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:), (uint64_t)v19);
  return swift_release();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v11;
  uint64_t v13;

  v8[5] = a4;
  v8[6] = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v8[7] = static MessageBusActor.shared;
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc();
  v8[8] = v11;
  *v11 = v8;
  v11[1] = closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:);
  return ConversationService.checkExecutionOverrides(context:resultCandidateId:)(a7, a8, v13);
}

uint64_t closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)()
{
  uint64_t v0;
  void *v1;
  void (*v2)(void *);

  v1 = *(void **)(v0 + 72);
  v2 = *(void (**)(void *))(v0 + 40);
  swift_release();
  v2(v1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationService.checkExecutionOverrides(context:resultCandidateId:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 280) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_task_switch();
}

uint64_t static ConversationService.skipEmptyAsr(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static ConversationService.skipEmptyAsr(_:)
                                       + async function pointer to specialized static ConversationService.skipEmptyAsr(_:));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v5(a1);
}

void closure #1 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:)(int a1, id a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *oslog;
  uint64_t v17;

  if (a2)
  {
    v3 = a2;
    if (one-time initialization token for executor != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
    v5 = a2;
    v6 = a2;
    oslog = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v17 = v9;
      *(_DWORD *)v8 = 136315138;
      v10 = a2;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      v11 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, oslog, v7, "UIRevealRecognizedSpeech error: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v9, -1, -1);
      MEMORY[0x1B5E44758](v8, -1, -1);

      return;
    }

  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    oslog = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, oslog, v14, "UIRevealRecognizedSpeech handled", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }
  }

}

uint64_t $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = a1;
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  swift_retain();
  if (v12 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v13 = 0;
    v14 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (v11[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v13 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v15;
      swift_unknownObjectRelease();
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
  }
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a4;
  *(_QWORD *)(v16 + 24) = v11;
  if (v14 | v13)
  {
    v18[0] = 0;
    v18[1] = 0;
    v18[2] = v13;
    v18[3] = v14;
  }
  swift_task_create();
  return swift_release();
}

uint64_t ConversationService.maybeDoServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:topNlParse:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t ObjectType;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_t v49;
  char *v50;
  int v51;
  int v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68[2];

  v12 = v11;
  v58 = a7;
  v59 = a8;
  v65 = a3;
  v66 = a4;
  v62 = a1;
  v63 = a2;
  v64 = a11;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  v15 = MEMORY[0x1E0C80A78](v57);
  v56 = (uint64_t)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v47 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  v20 = MEMORY[0x1E0C80A78](v19);
  v55 = (uint64_t)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v47 - v22;
  v24 = v11[32];
  v25 = v11[33];
  __swift_project_boxed_opaque_existential_1(v11 + 29, v24);
  v26 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v25 + 8);
  v60 = a9;
  v27 = v64;
  v61 = a5;
  v28 = v26(a9, a10, v64, a5, a6, v24, v25);
  if (one-time initialization token for executor != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(a10, (uint64_t)v23, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v27, (uint64_t)v18, &demangling cache variable for type metadata for ServerFallbackReason?);
  swift_bridgeObjectRetain_n();
  v30 = v66;
  swift_bridgeObjectRetain_n();
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, (os_log_type_t)v32))
  {
    v49 = v31;
    v50 = v18;
    v51 = v32;
    v54 = v12;
    v33 = swift_slowAlloc();
    v48 = swift_slowAlloc();
    v68[0] = v48;
    *(_DWORD *)v33 = 67110402;
    v52 = v28;
    LODWORD(v67) = v28 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 8) = 2080;
    swift_bridgeObjectRetain();
    v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, a6, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v53 = a6;
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v33 + 18) = 2080;
    swift_bridgeObjectRetain();
    v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v30, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v33 + 28) = 1024;
    LODWORD(v67) = v60 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 34) = 1024;
    v34 = v55;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v23, v55, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    v35 = type metadata accessor for Siri_Nlu_External_UserParse();
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v34, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
      v37 = 0;
    }
    else
    {
      v41 = Siri_Nlu_External_UserParse.isNlv3FallbackException.getter();
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
      v37 = v41 & 1;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v23, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    LODWORD(v67) = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 40) = 2080;
    v42 = (uint64_t)v50;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v50, v56, &demangling cache variable for type metadata for ServerFallbackReason?);
    v43 = String.init<A>(describing:)();
    v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v42, &demangling cache variable for type metadata for ServerFallbackReason?);
    v45 = v49;
    _os_log_impl(&dword_1B4BE6000, v49, (os_log_type_t)v51, "[ConversationService] shouldDisableServerFallbackWithABExperiment = %{BOOL}d) for executionRequestId: %s, rcId: %s, isDomainDirected: %{BOOL}d, nlExceptionParse: %{BOOL}d, serverFallbackReason: %s", (uint8_t *)v33, 0x32u);
    v46 = v48;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v46, -1, -1);
    MEMORY[0x1B5E44758](v33, -1, -1);

    a6 = v53;
    v38 = v63;
    v27 = v64;
    v30 = v66;
    if ((v52 & 1) != 0)
      return ConversationService.closeRequestForDisabledServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:serverFallbackReason:)(v62, v38, v65, v30, v61, a6, v58, v59, v60 & 1, v27);
LABEL_7:
    ObjectType = swift_getObjectType();
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v38 + 48))(v65, v30, v27, ObjectType, v38);
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v23, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, &demangling cache variable for type metadata for ServerFallbackReason?);

  v38 = v63;
  if ((v28 & 1) == 0)
    goto LABEL_7;
  return ConversationService.closeRequestForDisabledServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:serverFallbackReason:)(v62, v38, v65, v30, v61, a6, v58, v59, v60 & 1, v27);
}

uint64_t ConversationService.closeRequestForDisabledServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  id v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v11 = v10;
  if (one-time initialization token for executor != -1)
    swift_once();
  v33 = a7;
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v20 = 67109120;
    LODWORD(v35[0]) = a9 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v18, v19, "[ConversationService] ServerFallback needed with domainDirected=%{BOOL}d but shouldDisableServerFallback returns true; initiating a fatal response and returning an error instead of performing fallback.",
      v20,
      8u);
    MEMORY[0x1B5E44758](v20, -1, -1);
  }

  if ((a9 & 1) != 0)
    v21 = 0xD00000000000002CLL;
  else
    v21 = 0xD000000000000028;
  if ((a9 & 1) != 0)
    v22 = 0x80000001B4EFB030;
  else
    v22 = 0x80000001B4EFB000;
  v23 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
  swift_bridgeObjectRetain();
  v24 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, a5, a6);
  ObjectType = swift_getObjectType();
  (*(void (**)(id, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(a2 + 40))(v24, v21, v22, 1, ObjectType, a2);
  swift_bridgeObjectRelease();
  outlined init with copy of ReferenceResolutionClientProtocol(v11 + 232, (uint64_t)v35);
  v26 = v36;
  v27 = v37;
  __swift_project_boxed_opaque_existential_1(v35, v36);
  v28 = a8;
  v29 = v33;
  if (!a8)
  {
    swift_bridgeObjectRetain();
    v29 = a5;
    v28 = a6;
  }
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 24);
  swift_bridgeObjectRetain();
  v30(a3, a4, v29, v28, a10, v26, v27);
  swift_bridgeObjectRelease();

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

uint64_t closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)(v8 + 56) = a7;
  *(_QWORD *)(v8 + 64) = v10;
  *(_BYTE *)(v8 + 128) = a8;
  *(_QWORD *)(v8 + 40) = a5;
  *(_QWORD *)(v8 + 48) = a6;
  *(_QWORD *)(v8 + 24) = a3;
  *(_QWORD *)(v8 + 32) = a4;
  *(_QWORD *)(v8 + 16) = a2;
  return swift_task_switch();
}

uint64_t closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[2];
  v2 = v0[3];
  v3 = v1[11];
  v4 = v1[12];
  __swift_project_boxed_opaque_existential_1(v1 + 8, v3);
  v5 = *(_QWORD *)(v2 + 16);
  v0[9] = v5;
  v6 = *(_QWORD *)(v2 + 24);
  v0[10] = v6;
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v4 + 40) + *(_QWORD *)(v4 + 40));
  v7 = (_QWORD *)swift_task_alloc();
  v0[11] = v7;
  *v7 = v0;
  v7[1] = closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  return v9(v5, v6, v3, v4);
}

{
  uint64_t **v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc();
  v2 = (_QWORD *)swift_task_alloc();
  v1[12] = (uint64_t)v2;
  *v2 = v4;
  v2[1] = closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  return specialized ConversationService.maybeSubmitRequestHandlingUpdate(activeTurn:rcId:bridge:)(v1[4], v1[9], v1[10]);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = ConversationUserInput.asSpeechData.getter();
  *(_QWORD *)(v0 + 104) = v2;
  v3 = v1 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v4;
  *v4 = v0;
  v4[1] = closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  return ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)(*(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 128), (uint64_t)v2, v3, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();

  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationService.bridge(didReceiveCommitResultCandidate:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[9] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t ConversationService.bridge(didReceiveCommitResultCandidate:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[5];
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  type metadata accessor for CommitResultCandidateId();
  v4 = swift_allocObject();
  v0[10] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  swift_bridgeObjectRetain();
  v5 = (_QWORD *)swift_task_alloc();
  v0[11] = v5;
  *v5 = v0;
  v5[1] = ConversationService.bridge(didReceiveCommitResultCandidate:from:);
  return ConversationService.bridge(didReceiveCommitResultCandidateId:from:)(v4, v0[6], v0[7]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationService.bridge(didReceiveClearContext:from:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized ConversationService.bridge(didReceiveClearContext:from:)
                             + async function pointer to specialized ConversationService.bridge(didReceiveClearContext:from:));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v3();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveClearContext:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[27] = a2;
  v3[28] = a3;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[29] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveClearContext:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;

  v1 = v0[28];
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 104);
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, 255, (uint64_t (*)(uint64_t))type metadata accessor for RemoteConversationClient, (uint64_t)&protocol conformance descriptor for RemoteConversationClient);
    result = Set.Iterator.init(_cocoa:)();
    v2 = v0[7];
    v40 = v0[8];
    v4 = v0[9];
    v5 = v0[10];
    v6 = v0[11];
  }
  else
  {
    v7 = -1 << *(_BYTE *)(v2 + 32);
    v40 = v2 + 56;
    v4 = ~v7;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v6 = v9 & *(_QWORD *)(v2 + 56);
    result = swift_bridgeObjectRetain();
    v5 = 0;
  }
  v41 = v0 + 12;
  v42 = v0;
  v37 = v0 + 26;
  v38 = v0 + 25;
  v39 = (unint64_t)(v4 + 64) >> 6;
  while (v2 < 0)
  {
    v13 = __CocoaSet.Iterator.next()();
    if (!v13)
      goto LABEL_38;
    *v37 = v13;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v14 = *v38;
    swift_unknownObjectRelease();
    v12 = v5;
    v10 = v6;
    if (!v14)
      goto LABEL_38;
LABEL_30:
    v43 = v10;
    v44 = v12;
    v18 = v2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v19 = swift_task_alloc();
    v20 = type metadata accessor for TaskPriority();
    v21 = *(_QWORD *)(v20 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = 0;
    v22[3] = 0;
    v22[4] = v14;
    v23 = swift_task_alloc();
    outlined init with copy of ReferenceResolutionClientProtocol?(v19, v23, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v23, 1, v20);
    swift_retain();
    if (v24 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v23, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v20);
    }
    swift_task_dealloc();
    if (v22[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v25 = dispatch thunk of Actor.unownedExecutor.getter();
      v27 = v26;
      swift_unknownObjectRelease();
    }
    else
    {
      v25 = 0;
      v27 = 0;
    }
    v28 = *(_QWORD *)v42[27];
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:);
    *(_QWORD *)(v29 + 24) = v22;
    v30 = (_QWORD *)(v27 | v25);
    if (v27 | v25)
    {
      v30 = v41;
      *v41 = 0;
      v41[1] = 0;
      v42[14] = v25;
      v42[15] = v27;
    }
    v2 = v18;
    v42[22] = 1;
    v42[23] = v30;
    v42[24] = v28;
    swift_task_create();
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v19, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    result = swift_task_dealloc();
    v5 = v44;
    v6 = v43;
  }
  if (v6)
  {
    v10 = (v6 - 1) & v6;
    v11 = __clz(__rbit64(v6)) | (v5 << 6);
    v12 = v5;
    goto LABEL_29;
  }
  v15 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  if (v15 >= v39)
    goto LABEL_38;
  v16 = *(_QWORD *)(v40 + 8 * v15);
  v12 = v5 + 1;
  if (v16)
    goto LABEL_28;
  v12 = v5 + 2;
  if (v5 + 2 >= v39)
    goto LABEL_38;
  v16 = *(_QWORD *)(v40 + 8 * v12);
  if (v16)
    goto LABEL_28;
  v12 = v5 + 3;
  if (v5 + 3 >= v39)
    goto LABEL_38;
  v16 = *(_QWORD *)(v40 + 8 * v12);
  if (v16)
    goto LABEL_28;
  v12 = v5 + 4;
  if (v5 + 4 >= v39)
    goto LABEL_38;
  v16 = *(_QWORD *)(v40 + 8 * v12);
  if (v16)
  {
LABEL_28:
    v10 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_29:
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v11);
    swift_retain();
    if (!v14)
      goto LABEL_38;
    goto LABEL_30;
  }
  v17 = v5 + 5;
  while (v39 != v17)
  {
    v16 = *(_QWORD *)(v40 + 8 * v17++);
    if (v16)
    {
      v12 = v17 - 1;
      goto LABEL_28;
    }
  }
LABEL_38:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  v42[30] = static MessageBusActor.shared;
  v42[31] = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v31, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  if (__isPlatformVersionAtLeast(2, 18, 0, 0))
  {
    swift_retain();
    v32 = (_QWORD *)swift_task_alloc();
    v42[32] = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<()>);
    *v32 = v42;
    v32[1] = closure #1 in ConversationService.bridge(didReceiveClearContext:from:);
    return TaskGroup.awaitAllRemainingTasks(isolation:)();
  }
  else
  {
    v33 = v42[30];
    swift_retain();
    if (v33)
    {
      swift_getObjectType();
      v34 = dispatch thunk of Actor.unownedExecutor.getter();
      v36 = v35;
    }
    else
    {
      v34 = 0;
      v36 = 0;
    }
    v42[33] = v34;
    v42[34] = v36;
    return swift_task_switch();
  }
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  return swift_taskGroup_wait_next_throwing();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 280) = v0;
  if (!v0)
    *(_BYTE *)(v1 + 289) = *(_BYTE *)(v1 + 288);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(v0 + 289) == 1)
  {
    swift_release();
  }
  else
  {
    if (*(_QWORD *)(v0 + 240))
    {
      swift_getObjectType();
      v1 = dispatch thunk of Actor.unownedExecutor.getter();
      v3 = v2;
    }
    else
    {
      v1 = 0;
      v3 = 0;
    }
    *(_QWORD *)(v0 + 264) = v1;
    *(_QWORD *)(v0 + 272) = v3;
  }
  return swift_task_switch();
}

{
  return swift_unexpectedError();
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, void *, _QWORD, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD **)(v0 + 16);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = v1 + 16;
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v8 = (uint64_t (*)(uint64_t, void *, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v5 + 16)
                                                                                  + *(_QWORD *)(v5 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v6;
  *v6 = v0;
  v6[1] = closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:);
  return v8(v0 + 32, &async function pointer to closure #1 in RemoteConversationClient.reset(), 0, MEMORY[0x1E0DEE9C0] + 8, v4, v5);
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t ConversationService.bridge(didReceiveCancelRequest:from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ConversationService.bridge(didReceiveCancelRequest:from:)
                                       + async function pointer to specialized ConversationService.bridge(didReceiveCancelRequest:from:));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v5(a1);
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, void *, _QWORD, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD **)(v0 + 16);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = v1 + 16;
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v8 = (uint64_t (*)(uint64_t, void *, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v5 + 16)
                                                                                  + *(_QWORD *)(v5 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v6;
  *v6 = v0;
  v6[1] = closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:);
  return v8(v0 + 32, &async function pointer to closure #1 in RemoteConversationClient.cancel(), 0, MEMORY[0x1E0DEE9C0] + 8, v4, v5);
}

uint64_t ConversationService.bridge(didReceiveSiriKitPluginSignal:from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:)
                                       + async function pointer to specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v5(a1);
}

uint64_t ConversationService.drainAsyncWork()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v1 = *(_QWORD *)(v0[5] + 216);
  v0[9] = v1;
  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v1 + 216) + *(_QWORD *)(*(_QWORD *)v1 + 216));
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v0[10] = v2;
  *v2 = v0;
  v2[1] = ConversationService.drainAsyncWork();
  return v4();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t ConversationService.drainAsyncWork()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v2 + 56) = static MessageBusActor.shared;
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, a2, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 64) = v3;
  *v3 = v2;
  v3[1] = ConversationService.drainAsyncWork();
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t closure #1 in ConversationService.drainAsyncWork()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[25] = a2;
  v3[26] = a3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationService.drainAsyncWork()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 208);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 104);
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, 255, (uint64_t (*)(uint64_t))type metadata accessor for RemoteConversationClient, (uint64_t)&protocol conformance descriptor for RemoteConversationClient);
    result = Set.Iterator.init(_cocoa:)();
    v2 = *(_QWORD *)(v0 + 16);
    v39 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v0 + 32);
    v5 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v7 = -1 << *(_BYTE *)(v2 + 32);
    v39 = v2 + 56;
    v4 = ~v7;
    v8 = -v7;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v6 = v9 & *(_QWORD *)(v2 + 56);
    result = swift_bridgeObjectRetain();
    v5 = 0;
  }
  v38 = (unint64_t)(v4 + 64) >> 6;
  while (v2 < 0)
  {
    v14 = __CocoaSet.Iterator.next()();
    if (!v14)
      goto LABEL_37;
    *(_QWORD *)(v0 + 192) = v14;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v15 = *(_QWORD *)(v0 + 184);
    swift_unknownObjectRelease();
    v13 = v5;
    v11 = v6;
    if (!v15)
      goto LABEL_37;
LABEL_30:
    v40 = v11;
    v41 = v13;
    v19 = v2;
    v21 = *(_QWORD *)(v0 + 224);
    v20 = *(_QWORD *)(v0 + 232);
    v22 = type metadata accessor for TaskPriority();
    v23 = *(_QWORD *)(v22 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v20, 1, 1, v22);
    v24 = (_QWORD *)swift_allocObject();
    v24[2] = 0;
    v25 = v24 + 2;
    v24[3] = 0;
    v24[4] = v15;
    outlined init with copy of ReferenceResolutionClientProtocol?(v20, v21, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    LODWORD(v21) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22);
    swift_retain();
    v26 = *(_QWORD *)(v0 + 224);
    if ((_DWORD)v21 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 224), (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
      if (*v25)
        goto LABEL_32;
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v26, v22);
      if (*v25)
      {
LABEL_32:
        swift_getObjectType();
        swift_unknownObjectRetain();
        v27 = dispatch thunk of Actor.unownedExecutor.getter();
        v29 = v28;
        swift_unknownObjectRelease();
        goto LABEL_35;
      }
    }
    v27 = 0;
    v29 = 0;
LABEL_35:
    v30 = **(_QWORD **)(v0 + 200);
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in ConversationService.drainAsyncWork();
    *(_QWORD *)(v31 + 24) = v24;
    v32 = v29 | v27;
    if (v29 | v27)
    {
      v32 = v0 + 56;
      *(_QWORD *)(v0 + 56) = 0;
      *(_QWORD *)(v0 + 64) = 0;
      *(_QWORD *)(v0 + 72) = v27;
      *(_QWORD *)(v0 + 80) = v29;
    }
    v2 = v19;
    v5 = v41;
    v10 = *(_QWORD *)(v0 + 232);
    *(_QWORD *)(v0 + 160) = 1;
    *(_QWORD *)(v0 + 168) = v32;
    *(_QWORD *)(v0 + 176) = v30;
    swift_task_create();
    swift_release();
    swift_release();
    result = outlined destroy of ReferenceResolutionClientProtocol?(v10, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v6 = v40;
  }
  if (v6)
  {
    v11 = (v6 - 1) & v6;
    v12 = __clz(__rbit64(v6)) | (v5 << 6);
    v13 = v5;
    goto LABEL_29;
  }
  v16 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  if (v16 >= v38)
    goto LABEL_37;
  v17 = *(_QWORD *)(v39 + 8 * v16);
  v13 = v5 + 1;
  if (v17)
    goto LABEL_28;
  v13 = v5 + 2;
  if (v5 + 2 >= v38)
    goto LABEL_37;
  v17 = *(_QWORD *)(v39 + 8 * v13);
  if (v17)
    goto LABEL_28;
  v13 = v5 + 3;
  if (v5 + 3 >= v38)
    goto LABEL_37;
  v17 = *(_QWORD *)(v39 + 8 * v13);
  if (v17)
    goto LABEL_28;
  v13 = v5 + 4;
  if (v5 + 4 >= v38)
    goto LABEL_37;
  v17 = *(_QWORD *)(v39 + 8 * v13);
  if (v17)
  {
LABEL_28:
    v11 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_29:
    v15 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v12);
    swift_retain();
    if (!v15)
      goto LABEL_37;
    goto LABEL_30;
  }
  v18 = v5 + 5;
  while (v38 != v18)
  {
    v17 = *(_QWORD *)(v39 + 8 * v18++);
    if (v17)
    {
      v13 = v18 - 1;
      goto LABEL_28;
    }
  }
LABEL_37:
  v33 = *(_QWORD *)(v0 + 208);
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  swift_beginAccess();
  v34 = *(_QWORD *)(v33 + 280);
  if (v34)
  {
    v35 = *(_QWORD *)(v0 + 216);
    v36 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
    v37 = (_QWORD *)swift_allocObject();
    v37[2] = 0;
    v37[3] = 0;
    v37[4] = v34;
    swift_retain();
    _sScG7addTask8priority9operationyScPSg_xyYaYAcntFyt_Tg5(v35, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in ConversationService.drainAsyncWork(), (uint64_t)v37);
    outlined destroy of ReferenceResolutionClientProtocol?(v35, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in ConversationService.drainAsyncWork()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in ConversationService.drainAsyncWork()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, void *, _QWORD, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD **)(v0 + 16);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = v1 + 16;
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v8 = (uint64_t (*)(uint64_t, void *, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v5 + 16)
                                                                                  + *(_QWORD *)(v5 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v6;
  *v6 = v0;
  v6[1] = closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:);
  return v8(v0 + 32, &async function pointer to closure #1 in RemoteConversationClient.drainAsyncWork(), 0, MEMORY[0x1E0DEE9C0] + 8, v4, v5);
}

uint64_t closure #2 in closure #1 in ConversationService.drainAsyncWork()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #2 in closure #1 in ConversationService.drainAsyncWork()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, void *, _QWORD, uint64_t, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD **)(v0 + 16);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = v1 + 16;
  v4 = v1[19];
  v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  v8 = (uint64_t (*)(uint64_t, void *, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v5 + 16)
                                                                                  + *(_QWORD *)(v5 + 16));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v6;
  *v6 = v0;
  v6[1] = closure #2 in closure #1 in ConversationService.drainAsyncWork();
  return v8(v0 + 32, &async function pointer to closure #1 in RemoteConversationClient.drainAsyncWork(), 0, MEMORY[0x1E0DEE9C0] + 8, v4, v5);
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

uint64_t closure #1 in ConversationService.markNotBusyAsync()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in ConversationService.markNotBusyAsync()()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v4;

  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 136) = 0;
  swift_release();
  v2 = *(_QWORD *)(v1 + 128);
  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.releaseJetsamTransaction()(v2, &v4);
  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationService.ActiveTurn.__allocating_init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v16;

  swift_allocObject();
  v16 = specialized ConversationService.ActiveTurn.init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(a1, a2, a3, a4, a5, a6, a7, a8);
  swift_unknownObjectRelease();
  swift_release();
  return v16;
}

uint64_t ServiceBridgeDelegate.fetchSelfReflectionDecision()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[9] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t ServiceBridgeDelegate.fetchSelfReflectionDecision()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 80) = static MessageBusActor.shared;
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, a2, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v4 = swift_task_alloc();
  *(_QWORD *)(v2 + 88) = v4;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 48);
  *(_QWORD *)(v4 + 32) = v3;
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 96) = v5;
  *v5 = v2;
  v5[1] = ServiceBridgeDelegate.fetchSelfReflectionDecision();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t ServiceBridgeDelegate.fetchSelfReflectionDecision()()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationService.ActiveTurn.turnData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ConversationHelperInput(v1 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData, a1, type metadata accessor for RemoteConversationTurnData);
}

uint64_t ConversationService.ActiveTurn.bridge.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationService.ActiveTurn.eventSender.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender, a1);
}

uint64_t ConversationService.ActiveTurn.aceServiceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_aceServiceInvoker, a1);
}

uint64_t ConversationService.ActiveTurn.conversationLoggingId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_conversationLoggingId;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ConversationService.ActiveTurn.init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v8;

  v8 = specialized ConversationService.ActiveTurn.init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(a1, a2, a3, a4, a5, a6, a7, a8);
  swift_unknownObjectRelease();
  swift_release();
  return v8;
}

void ConversationService.ActiveTurn.registerNeedsASRReveal(rcId:recognition:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *oslog;
  uint64_t v14;

  if (a3)
  {
    v7 = (uint64_t *)(v3 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_needsASRReveal);
    swift_beginAccess();
    v8 = a3;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v7;
    *v7 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v8, a1, a2, isUniquelyReferenced_nonNull_native);
    *v7 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();

  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    oslog = Logger.logObject.getter();
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1B4BE6000, oslog, v11, "[ConversationService] nil SASRecognition found, cannot reveal ASR", v12, 2u);
      MEMORY[0x1B5E44758](v12, -1, -1);
    }

  }
}

_QWORD *ConversationService.ExecutionTaskContext.init(forceTimeout:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = MEMORY[0x1E0DEE9D8];
  v1[2] = MEMORY[0x1E0DEE9D8];
  v1[3] = v2;
  v1[4] = 0;
  static ConversationService.ExecutionTaskContext.expirationInNanoSeconds = a1;
  return v1;
}

uint64_t closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v4 + 48) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:);
  return static Task<>.sleep(nanoseconds:)();
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  swift_release();
  if ((static Task<>.isCancelled.getter() & 1) == 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1B4BE6000, v2, v3, "[ConversationService]: ExecutionTaskContext expired. Clearing it.", v4, 2u);
      MEMORY[0x1B5E44758](v4, -1, -1);
    }
    v5 = *(_QWORD *)(v0 + 40);

    (*(void (**)(void))(*(_QWORD *)v5 + 192))();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ConversationService.ExecutionTaskContext.getActiveTasks()()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationService.ExecutionTaskContext.getCompletedTasks()()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationService.ExecutionTaskContext.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t ConversationService.ExecutionTaskContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ConversationService.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_bridgeObjectRelease();
  outlined consume of ConversationService.State(*(id *)(v0 + 112), *(_BYTE *)(v0 + 120));
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 144);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1(v0 + 232);
  swift_release();
  swift_release();
  outlined consume of ConversationServiceSerialFacade?(*(_QWORD *)(v0 + 312));
  return v0;
}

uint64_t ConversationService.__deallocating_deinit()
{
  ConversationService.deinit();
  return swift_deallocClassInstance();
}

uint64_t closure #1 in ServiceBridgeDelegate.fetchSelfReflectionDecision()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<SelfReflectionAgentDecision, Never>);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  (*(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(a4 + 152))(partial apply for closure #1 in closure #1 in ServiceBridgeDelegate.fetchSelfReflectionDecision(), v11, a3, a4);
  return swift_release();
}

uint64_t specialized Set._Variant.remove(_:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  Task.hash(into:)();
  v3 = Hasher._finalize()();
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = v3 & ~v4;
  v6 = v2 + 56;
  if (((*(_QWORD *)(v2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
    goto LABEL_6;
  swift_retain();
  v7 = static Task.== infix(_:_:)();
  swift_release();
  if ((v7 & 1) == 0)
  {
    v8 = ~v4;
    v5 = (v5 + 1) & v8;
    if (((*(_QWORD *)(v6 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    {
      while (1)
      {
        swift_retain();
        v9 = static Task.== infix(_:_:)();
        swift_release();
        if ((v9 & 1) != 0)
          break;
        v5 = (v5 + 1) & v8;
        if (((*(_QWORD *)(v6 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
          goto LABEL_6;
      }
      v1 = v0;
      goto LABEL_8;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_8:
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *v1;
  v14 = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v12 = v14;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v5);
  specialized _NativeSet._delete(at:)(v5);
  *v1 = v14;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for ConversationSessionKey();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, 255, v11, MEMORY[0x1E0D9EE18]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v30 = v7;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v18 = v16 * v14;
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08], MEMORY[0x1E0D9EE20]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
        a2 = v28;
        v7 = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v21 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v21;
    v31 = *v21;
    *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v23 = v31;
    }
    v24 = *(_QWORD *)(v23 + 48) + v18;
    v7 = v30;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 32))(v28, v24, v6);
    specialized _NativeSet._delete(at:)(v14);
    *v21 = v31;
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v22;

  v2 = v1;
  v4 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
    Hasher.init(_seed:)();
    v8 = *(_QWORD *)(a1 + 112);
    v9 = *(_QWORD *)(a1 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 = Hasher._finalize()();
    v11 = -1 << *(_BYTE *)(v4 + 32);
    v12 = v10 & ~v11;
    if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
    {
      v13 = *(_QWORD *)(v4 + 48);
      v14 = *(_QWORD *)(v13 + 8 * v12);
      v15 = *(_QWORD *)(v14 + 112) == v8 && *(_QWORD *)(v14 + 120) == v9;
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v17 = *v2;
        v22 = *v2;
        *v2 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeSet.copy()();
          v17 = v22;
        }
        v7 = *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * v12);
        specialized _NativeSet._delete(at:)(v12);
        *v2 = v22;
        goto LABEL_16;
      }
      v18 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v18;
        if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v19 = *(_QWORD *)(v13 + 8 * v12);
        v20 = *(_QWORD *)(v19 + 112) == v8 && *(_QWORD *)(v19 + 120) == v9;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_13;
      }
    }
LABEL_25:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v4 < 0)
    v5 = *v2;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  swift_retain();
  v6 = __CocoaSet.contains(_:)();
  swift_release();
  if ((v6 & 1) == 0)
    goto LABEL_25;
  v7 = specialized Set._Variant._migrateToNative(_:removing:)(v5, a1);
LABEL_16:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t result;
  Swift::Int v22;

  v3 = v2;
  swift_bridgeObjectRelease();
  v5 = __CocoaSet.count.getter();
  v6 = swift_unknownObjectRetain();
  v7 = specialized _NativeSet.init(_:capacity:)(v6, v5);
  v22 = v7;
  Hasher.init(_seed:)();
  v8 = *(_QWORD *)(a2 + 112);
  v9 = *(_QWORD *)(a2 + 120);
  swift_retain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v7 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v7 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = *(_QWORD *)(v7 + 48);
    v14 = *(_QWORD *)(v13 + 8 * v12);
    v15 = *(_QWORD *)(v14 + 112) == v8 && *(_QWORD *)(v14 + 120) == v9;
    if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_14:
      swift_release();
      v19 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v12);
      specialized _NativeSet._delete(at:)(v12);
      v20 = v8 == *(_QWORD *)(v19 + 112) && v9 == *(_QWORD *)(v19 + 120);
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        *v3 = v22;
        return v19;
      }
      __break(1u);
    }
    else
    {
      v16 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v16;
        if (((*(_QWORD *)(v7 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v17 = *(_QWORD *)(v13 + 8 * v12);
        v18 = *(_QWORD *)(v17 + 112) == v8 && *(_QWORD *)(v17 + 120) == v9;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_14;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        Task.hash(into:)();
        v10 = Hasher._finalize()();
        swift_release();
        v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_QWORD *)(v12 + 8 * v2);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_retain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v10 = Hasher._finalize()();
        swift_release();
        v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_QWORD *)(v12 + 8 * v2);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;

  v3 = type metadata accessor for ConversationSessionKey();
  v28 = *(_QWORD *)(v3 - 8);
  result = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(*v1 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v25 = v1;
    v11 = ~v9;
    swift_retain();
    v12 = _HashTable.previousHole(before:)();
    v27 = v8;
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (v12 + 1) & v11;
      v14 = *(_QWORD *)(v28 + 72);
      v26 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
      do
      {
        v15 = v14 * v10;
        v26(v6, *(_QWORD *)(v7 + 48) + v14 * v10, v3);
        lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE08], MEMORY[0x1E0D9EE18]);
        v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v3);
        v17 = v16 & v11;
        if (a1 >= (uint64_t)v13)
        {
          if (v17 < v13 || a1 < (uint64_t)v17)
            goto LABEL_6;
        }
        else if (v17 < v13 && a1 < (uint64_t)v17)
        {
          goto LABEL_6;
        }
        v20 = v14 * a1;
        if (v14 * a1 < v15 || *(_QWORD *)(v7 + 48) + v14 * a1 >= (unint64_t)(*(_QWORD *)(v7 + 48) + v15 + v14))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v20 == v15)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
      }
      while (((*(_QWORD *)(v27 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(_QWORD *)(v27 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release();
    v1 = v25;
  }
  else
  {
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v21 = *v1;
  v22 = *(_QWORD *)(*v1 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v21 + 16) = v24;
    ++*(_DWORD *)(v21 + 36);
  }
  return result;
}

uint64_t specialized ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _UNKNOWN **v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _BYTE v65[12];
  int v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  _BYTE *v74;
  uint64_t v75;
  __int128 v76[2];
  __int128 v77;
  uint64_t v78;
  _QWORD v79[5];
  uint64_t v80[5];

  v75 = a7;
  v71 = a6;
  v73 = a5;
  v72 = a4;
  v66 = a3;
  v67 = a1;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v13);
  v74 = &v65[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v70 = type metadata accessor for DispatchTimeInterval();
  v69 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70);
  v68 = &v65[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for Logger();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = &v65[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v80[3] = a10;
  v80[4] = a11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v80);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 32))(boxed_opaque_existential_1, a8, a10);
  *(_QWORD *)(a9 + 104) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(a9 + 112) = 1;
  *(_BYTE *)(a9 + 120) = 0;
  *(_QWORD *)(a9 + 136) = 0;
  type metadata accessor for CorrectionsPlatformClient();
  swift_allocObject();
  *(_QWORD *)(a9 + 184) = CorrectionsPlatformClient.init()();
  type metadata accessor for TaskService();
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = closure #1 in default argument 1 of TaskService.init(initialTask:taskIdGenerator:);
  v21[3] = 0;
  v22 = MEMORY[0x1E0DEE9D8];
  v21[4] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(a9 + 192) = v21;
  type metadata accessor for ConcurrentTaskPool();
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v22;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v24 = swift_allocObject();
  *(_DWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v23 + 24) = v24;
  *(_QWORD *)(a9 + 200) = v23;
  type metadata accessor for ConversationService.ExecutionTaskContext();
  v25 = (_QWORD *)swift_allocObject();
  v25[2] = v22;
  v25[3] = v22;
  v25[4] = 0;
  static ConversationService.ExecutionTaskContext.expirationInNanoSeconds = 60000000000;
  *(_QWORD *)(a9 + 208) = v25;
  if (one-time initialization token for executor != -1)
    swift_once();
  v26 = __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v17 + 16))(v19, v26, v16);
  type metadata accessor for AsyncSerialQueue();
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = v22;
  v27[3] = 0;
  v27[4] = 0;
  v27[5] = 0;
  v28 = swift_allocObject();
  *(_DWORD *)(v28 + 16) = 0;
  v27[6] = v28;
  v27[7] = 0xD000000000000021;
  v27[8] = 0x80000001B4EFA8A0;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v17 + 32))((uint64_t)v27 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger, v19, v16);
  *(_QWORD *)(a9 + 216) = v27;
  *(_QWORD *)(a9 + 224) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(_QWORD *)(a9 + 272) = 0;
  *(_QWORD *)(a9 + 280) = 0;
  *(_QWORD *)(a9 + 320) = 0;
  *(_QWORD *)(a9 + 328) = 0;
  *(_QWORD *)(a9 + 312) = 0;
  outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)&v77, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  if (v78)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v77, (uint64_t)v79);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v77, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
    v29 = type metadata accessor for ReferenceResolutionClient();
    v30 = ReferenceResolutionClient.__allocating_init()();
    v79[3] = v29;
    v79[4] = MEMORY[0x1E0D9C7B0];
    v79[0] = v30;
  }
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v79, a9 + 144);
  v31 = v67;
  if ((v66 & 1) != 0)
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v32 = static StubCamBridge.shared;
    v33 = type metadata accessor for StubCamBridge();
    v34 = &protocol witness table for StubCamBridge;
  }
  else
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    swift_beginAccess();
    v32 = static CamBridgeImpl.shared;
    v33 = type metadata accessor for CamBridgeImpl();
    v34 = &protocol witness table for CamBridgeImpl;
  }
  *(_QWORD *)(a9 + 88) = v33;
  *(_QWORD *)(a9 + 96) = v34;
  *(_QWORD *)(a9 + 64) = v32;
  swift_retain();
  *(_QWORD *)(a9 + 56) = v31;
  swift_retain();
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v37 = 0;
    _os_log_impl(&dword_1B4BE6000, v35, v36, "[ConversationService] Ambiguity handling Feature Flag is on. Using DecisionEngine", v37, 2u);
    MEMORY[0x1B5E44758](v37, -1, -1);
  }

  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v79, (uint64_t)&v77);
  v38 = *(_QWORD *)(a9 + 184);
  v39 = type metadata accessor for LinkMetadataProvider();
  v40 = swift_allocObject();
  v41 = objc_allocWithZone(MEMORY[0x1E0D44208]);
  swift_retain();
  swift_retain();
  *(_QWORD *)(v40 + 16) = objc_msgSend(v41, sel_init);
  type metadata accessor for LinkExpansionContextBuilder();
  v42 = (_QWORD *)swift_allocObject();
  v42[6] = v39;
  v42[7] = &protocol witness table for LinkMetadataProvider;
  v42[11] = &type metadata for LinkViewActionProvider;
  v42[12] = &protocol witness table for LinkViewActionProvider;
  v42[2] = 0;
  v42[3] = v40;
  v42[13] = 0;
  v43 = *(_QWORD *)(a9 + 200);
  outlined init with copy of ReferenceResolutionClientProtocol(a9 + 64, (uint64_t)v76);
  v44 = one-time initialization token for instance;
  swift_retain();
  if (v44 != -1)
    swift_once();
  v45 = static DecisionEngineCurareDonator.instance;
  v46 = type metadata accessor for DecisionEngine();
  v47 = swift_allocObject();
  swift_retain();
  v48 = specialized DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(v31, (uint64_t)&v77, v38, (uint64_t)v42, v43, v76, v45, v47);
  swift_release();
  swift_release();
  *(_QWORD *)(a9 + 40) = v46;
  *(_QWORD *)(a9 + 48) = &protocol witness table for DecisionEngine;
  *(_QWORD *)(a9 + 16) = v48;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v49 = static OS_dispatch_queue.main.getter();
  if (one-time initialization token for defaultTimeout != -1)
    swift_once();
  v50 = v70;
  v51 = __swift_project_value_buffer(v70, (uint64_t)static JetsamHelper.defaultTimeout);
  v52 = v69;
  v53 = v68;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v69 + 16))(v68, v51, v50);
  type metadata accessor for JetsamHelper();
  v54 = (_QWORD *)swift_allocObject();
  v55 = (_QWORD *)((char *)v54 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  *v55 = 0;
  v55[1] = 0;
  v54[2] = 0xD00000000000002CLL;
  v54[3] = 0x80000001B4EFA8D0;
  v54[4] = dispatch_semaphore_create(1);
  v54[5] = v49;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v52 + 32))((uint64_t)v54 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout, v53, v50);
  *(_QWORD *)(a9 + 128) = v54;
  v56 = v75;
  *(_QWORD *)(a9 + 288) = v71;
  *(_QWORD *)(a9 + 296) = v56;
  *(_BYTE *)(a9 + 304) = v72 & 1;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v80, a9 + 232);
  v57 = (uint64_t)v74;
  if ((v73 & 1) != 0)
  {
    v58 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 1, 1, v58);
    v59 = one-time initialization token for shared;
    swift_retain();
    swift_retain();
    if (v59 != -1)
      swift_once();
    swift_beginAccess();
    v60 = static MessageBusActor.shared;
    v62 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v61, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
    v63 = (_QWORD *)swift_allocObject();
    v63[2] = v60;
    v63[3] = v62;
    v63[4] = a9;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v57, (uint64_t)&closure #1 in ConversationService.warmup()partial apply, (uint64_t)v63);
    swift_release();
    swift_release();
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v80);
  outlined destroy of ReferenceResolutionClientProtocol?(a2, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
  return a9;
}

uint64_t outlined consume of ConversationServiceSerialFacade?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of ConversationServiceSerialFacade?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for MessageBusActor()
{
  return objc_opt_self();
}

uint64_t sub_1B4D88AD8()
{
  return objectdestroyTm_4((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t specialized DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  _QWORD v32[5];

  v32[3] = type metadata accessor for CorrectionsPlatformClient();
  v32[4] = &protocol witness table for CorrectionsPlatformClient;
  v32[0] = a3;
  v31[3] = type metadata accessor for ConcurrentTaskPool();
  v31[4] = &protocol witness table for ConcurrentTaskPool;
  v31[0] = a5;
  type metadata accessor for ServerFallbackDisablingUtils();
  *(_QWORD *)(a8 + 176) = 0;
  *(_QWORD *)(a8 + 184) = 0;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v15[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v15[4] = 0;
  *(_QWORD *)(a8 + 192) = v15;
  *(_OWORD *)(a8 + 200) = 0u;
  *(_OWORD *)(a8 + 216) = 0u;
  *(_QWORD *)(a8 + 232) = 0;
  *(_QWORD *)(a8 + 24) = a1;
  outlined init with copy of ReferenceResolutionClientProtocol(a2, a8 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v31, (uint64_t)&v28);
  type metadata accessor for ConversationHelper();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a1;
  outlined init with take of ReferenceResolutionClientProtocol(&v28, v16 + 24);
  *(_QWORD *)(a8 + 32) = v16;
  v17 = type metadata accessor for LinkMetadataProvider();
  v18 = swift_allocObject();
  v19 = objc_allocWithZone(MEMORY[0x1E0D44208]);
  swift_retain_n();
  swift_retain();
  *(_QWORD *)(v18 + 16) = objc_msgSend(v19, sel_init);
  v20 = type metadata accessor for AppShortcutStateProvider();
  v21 = swift_allocObject();
  type metadata accessor for AppShortcutExpansionContextBuilder();
  v22 = (_QWORD *)swift_allocObject();
  v22[9] = v17;
  v22[10] = &protocol witness table for LinkMetadataProvider;
  v22[6] = v18;
  v22[14] = v20;
  v22[15] = &protocol witness table for AppShortcutStateProvider;
  v22[11] = v21;
  type metadata accessor for ConditionalIntentMetadataStore();
  v22[4] = 0;
  v22[5] = 0;
  v22[3] = 0;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = MEMORY[0x1E0DEE9E0];
  v22[2] = v23;
  type metadata accessor for ActionGenerator();
  v24 = (_QWORD *)swift_allocObject();
  v24[3] = v22;
  v24[4] = a1;
  v24[2] = a4;
  *(_QWORD *)(a8 + 16) = v24;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v32, (uint64_t)&v28);
  type metadata accessor for CorrectionsService();
  v25 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(&v28, v25 + 16);
  *(_QWORD *)(v25 + 56) = a1;
  *(_QWORD *)(a8 + 40) = v25;
  *(_QWORD *)(a8 + 88) = a7;
  v29 = type metadata accessor for AppShortcutProvider();
  v30 = MEMORY[0x1E0D9BED0];
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v28);
  swift_retain();
  AppShortcutProvider.init()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  __swift_destroy_boxed_opaque_existential_1(a2);
  outlined init with take of ReferenceResolutionClientProtocol(&v28, a8 + 96);
  outlined init with take of ReferenceResolutionClientProtocol(a6, a8 + 136);
  return a8;
}

uint64_t specialized ConversationService.ActiveTurn.init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  uint64_t ObjectType;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t (*v43)();
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t *v49;
  void *v50;
  uint64_t v51;
  char *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  id v56;
  id v57;
  void *v58;
  uint64_t v59;
  void *v60;
  id v61;
  char v62;
  void *v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE v101[40];
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v9 = v8;
  v97 = a6;
  v98 = a8;
  v96 = a5;
  v15 = type metadata accessor for RemoteConversationTurnData(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for InvocationStateImpl();
  v19 = MEMORY[0x1E0C80A78](v18);
  v95 = (uint64_t)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (void **)((char *)&v89 - v21);
  v23 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eagerTasks) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_needsASRReveal) = v23;
  *(_QWORD *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_topNlParse) = v23;
  *(_QWORD *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnInput) = v23;
  *(_QWORD *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_nlResponseCode) = v23;
  *(_QWORD *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_executionInputSystem) = v23;
  outlined init with copy of ConversationHelperInput((uint64_t)a1, v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData, type metadata accessor for RemoteConversationTurnData);
  v24 = (_QWORD *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_bridge);
  *v24 = a3;
  v24[1] = a4;
  v25 = *(char **)((char *)a1 + *(int *)(v15 + 40));
  v99 = a2;
  v100 = a7;
  if (v25)
  {
    v93 = v22;
    ObjectType = swift_getObjectType();
    v27 = ServiceBridgeDelegate.xpcWrapper.getter(ObjectType, a4);
    v28 = a1[1];
    v91 = *a1;
    v29 = *(_QWORD *)&v25[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId + 8];
    v94 = *(_QWORD *)&v25[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId];
    outlined init with copy of ConversationHelperInput((uint64_t)a1, (uint64_t)v17, type metadata accessor for RemoteConversationTurnData);
    if (v29)
    {
      v90 = v29;
    }
    else
    {
      v51 = *((_QWORD *)v17 + 3);
      v94 = *((_QWORD *)v17 + 2);
      v90 = v51;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v52 = v25;
    outlined destroy of CamOutput((uint64_t)v17, type metadata accessor for RemoteConversationTurnData);
    v53 = (void *)a1[4];
    v54 = OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution;
    v55 = *(void **)&v52[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution];
    v89 = v53;
    if (v55)
    {
      v56 = v53;
      v57 = objc_msgSend(v55, sel_runLocation);
      if (v57)
      {
        v58 = v57;
        v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v55 = v60;

      }
      else
      {
        v59 = 0;
        v55 = 0;
      }
    }
    else
    {
      v61 = v53;
      v59 = 0;
    }
    v62 = specialized static RunLocation.convert(aceRunLocation:)(v59, v55) & 1;
    swift_bridgeObjectRelease();
    v63 = *(void **)&v52[v54];
    v92 = v28;
    if (!v63)
    {
      v70 = v27;
      v68 = 0;
      v66 = 0;
      goto LABEL_20;
    }
    v64 = objc_msgSend(v63, sel_invocationDeviceAssistantId);
    if (v64)
    {
      v65 = v64;
      v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v68 = v67;

      v69 = *(void **)&v52[v54];
      if (v69)
        goto LABEL_15;
    }
    else
    {
      v66 = 0;
      v68 = 0;
      v69 = *(void **)&v52[v54];
      if (v69)
      {
LABEL_15:
        v70 = v27;
        v71 = objc_msgSend(v69, sel_executionDeviceAssistantId, v89, v90);
        if (v71)
        {
          v72 = v71;
          v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v75 = v74;

          goto LABEL_21;
        }
LABEL_20:
        v73 = 0;
        v75 = 0;
LABEL_21:
        outlined init with copy of ReferenceResolutionClientProtocol(v100, (uint64_t)&v102);
        type metadata accessor for AceServiceInvokerImpl();
        swift_allocObject();
        *((_QWORD *)&v88 + 1) = v73;
        *(_QWORD *)&v88 = v68;
        v76 = v70;
        v77 = v89;
        v38 = AceServiceInvokerImpl.init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(v76, v91, v92, v94, v90, v89, v62, v66, v88, v75, v97 & 1, (uint64_t)&v102);
        v78 = *a1;
        v79 = a1[1];
        v80 = v77;
        swift_bridgeObjectRetain();
        v22 = v93;
        InvocationStateImpl.init(proxiedRequestContext:localRequestContextData:executionRequestId:)(v52, v80, v78, v79, v93);
        if ((v98 & 1) != 0)
          goto LABEL_22;
        goto LABEL_5;
      }
    }
    v70 = v27;
    goto LABEL_20;
  }
  v30 = swift_getObjectType();
  v94 = ServiceBridgeDelegate.xpcWrapper.getter(v30, a4);
  v31 = *a1;
  v32 = a1[1];
  v33 = a7;
  v35 = a1[2];
  v34 = a1[3];
  v36 = (void *)a1[4];
  outlined init with copy of ReferenceResolutionClientProtocol(v33, (uint64_t)&v102);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v102, (uint64_t)v101, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  type metadata accessor for AceServiceInvokerImpl();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v37 = v36;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v38 = AceServiceInvokerImpl.init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(v94, v31, v32, v35, v34, v37, 0, 0, 0, 0, v97 & 1, (uint64_t)v101);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v102, (uint64_t *)&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  v39 = *a1;
  v40 = a1[1];
  v41 = (void *)a1[4];
  v104 = 0;
  v102 = 0u;
  v103 = 0u;
  swift_bridgeObjectRetain();
  InvocationStateImpl.init(executionRequestId:requestContextData:previousInvocationState:)(v39, v40, v41, (uint64_t)&v102, v22);
  if ((v98 & 1) != 0)
  {
LABEL_22:
    v81 = type metadata accessor for NoopSiriKitEventSender();
    v43 = type metadata accessor for NoopSiriKitEventSender;
    v47 = swift_allocObject();
    v48 = (uint64_t *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender);
    *(_QWORD *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender + 24) = v81;
    v49 = (unint64_t *)&lazy protocol witness table cache variable for type NoopSiriKitEventSender and conformance NoopSiriKitEventSender;
    v50 = &protocol conformance descriptor for NoopSiriKitEventSender;
    goto LABEL_23;
  }
LABEL_5:
  v42 = type metadata accessor for InvocationScopedSiriKitEventSender();
  v43 = type metadata accessor for InvocationScopedSiriKitEventSender;
  v44 = swift_allocObject();
  v45 = v95;
  outlined init with copy of ConversationHelperInput((uint64_t)v22, v95, (uint64_t (*)(_QWORD))type metadata accessor for InvocationStateImpl);
  swift_retain();
  v46 = v96;
  swift_retain();
  v47 = specialized InvocationScopedSiriKitEventSender.init(aceServiceInvoker:taskService:invocationState:)(v38, v46, v45, v44);
  v48 = (uint64_t *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender);
  *(_QWORD *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender + 24) = v42;
  v49 = (unint64_t *)&lazy protocol witness table cache variable for type InvocationScopedSiriKitEventSender and conformance InvocationScopedSiriKitEventSender;
  v50 = &protocol conformance descriptor for InvocationScopedSiriKitEventSender;
LABEL_23:
  v48[4] = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(v49, 255, (uint64_t (*)(uint64_t))v43, (uint64_t)v50);
  *v48 = v47;
  v82 = v99;
  v83 = v100;
  v84 = v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_conversationLoggingId;
  v85 = type metadata accessor for UUID();
  v86 = *(_QWORD *)(v85 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v84, v82, v85);
  *((_QWORD *)&v103 + 1) = type metadata accessor for AceServiceInvokerImpl();
  v104 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, 255, (uint64_t (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl, (uint64_t)&protocol conformance descriptor for AceServiceInvokerImpl);
  *(_QWORD *)&v102 = v38;
  __swift_destroy_boxed_opaque_existential_1(v83);
  (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v82, v85);
  outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for RemoteConversationTurnData);
  outlined destroy of CamOutput((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for InvocationStateImpl);
  outlined init with take of ReferenceResolutionClientProtocol(&v102, v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_aceServiceInvoker);
  return v9;
}

uint64_t sub_1B4D8943C()
{
  uint64_t v0;

  swift_release();
  swift_release();

  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B4D894B0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationService.bridge(didReceiveInput:from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationService.bridge(didReceiveInput:from:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1B4D89588()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t specialized static ConversationService.skipEmptyAsr(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = a1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v1 + 152) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized static ConversationService.skipEmptyAsr(_:)()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 144), *(_QWORD *)(*(_QWORD *)(v0 + 144) + 24));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v1;
  *v1 = v0;
  v1[1] = specialized static ConversationService.skipEmptyAsr(_:);
  return dispatch thunk of AceServiceInvokerAsync.recentDialogs()();
}

id specialized static ConversationService.skipEmptyAsr(_:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char **v30;
  id v31;
  void *v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  char **v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release();
  v43 = v0;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = (id)_CocoaArrayWrapper.endIndex.getter();
    v2 = (uint64_t)result;
    if (result)
      goto LABEL_3;
LABEL_20:
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_21:
    swift_bridgeObjectRelease_n();
    v18 = v7[2];
    v19 = MEMORY[0x1E0DEE9D8];
    if (v18)
    {
      swift_bridgeObjectRetain();
      v20 = 0;
      v21 = MEMORY[0x1E0DEE9D8];
      do
      {
        v22 = v7[v20++ + 4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v22);
        swift_bridgeObjectRelease();
      }
      while (v18 != v20);
      swift_bridgeObjectRelease();
    }
    else
    {
      v21 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    v44 = v19;
    v23 = *(_QWORD *)(v21 + 16);
    if (v23)
    {
      v24 = v43 + 16;
      v25 = (_QWORD *)(v43 + 136);
      v26 = v21 + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of Any(v26, v24);
        outlined init with copy of Any(v24, v43 + 48);
        type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAUIAssistantUtteranceView);
        if ((swift_dynamicCast() & 1) == 0)
          *v25 = 0;
        v27 = __swift_destroy_boxed_opaque_existential_1(v24);
        if (*v25)
        {
          MEMORY[0x1B5E43498](v27);
          if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v26 += 32;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
      v19 = v44;
    }
    swift_bridgeObjectRelease();
    if (v19 >> 62)
      goto LABEL_50;
    v28 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v28; v28 = _CocoaArrayWrapper.endIndex.getter())
    {
      v29 = 0;
      v42 = v19 & 0xC000000000000001;
      v30 = &selRef_reason;
      while (1)
      {
        v31 = v42 ? (id)MEMORY[0x1B5E43B94](v29, v19) : *(id *)(v19 + 8 * v29 + 32);
        v32 = v31;
        v33 = v29 + 1;
        if (__OFADD__(v29, 1))
          break;
        v34 = objc_msgSend(v31, v30[160]);
        if (v34)
        {
          v35 = v19;

          v36 = v30;
          result = objc_msgSend(v32, v30[160]);
          if (!result)
            goto LABEL_54;
          v37 = result;
          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v40 = v39;

          *(_QWORD *)(v43 + 104) = v38;
          *(_QWORD *)(v43 + 112) = v40;
          *(_QWORD *)(v43 + 120) = 0xD000000000000019;
          *(_QWORD *)(v43 + 128) = 0x80000001B4EFB060;
          lazy protocol witness table accessor for type String and conformance String();
          lazy protocol witness table accessor for type String and conformance String();
          LOBYTE(v37) = BidirectionalCollection<>.starts<A>(with:)();
          swift_bridgeObjectRelease();

          v30 = v36;
          v19 = v35;
          if ((v37 & 1) != 0)
          {
            v41 = 1;
            goto LABEL_52;
          }
        }
        else
        {

        }
        ++v29;
        if (v33 == v28)
          goto LABEL_51;
      }
      __break(1u);
LABEL_50:
      swift_bridgeObjectRetain();
    }
LABEL_51:
    v41 = 0;
LABEL_52:
    swift_bridgeObjectRelease_n();
    return (id)(*(uint64_t (**)(uint64_t))(v43 + 8))(v41);
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = (id)swift_bridgeObjectRetain();
  if (!v2)
    goto LABEL_20;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = v1 & 0xC000000000000001;
    v6 = *(_QWORD *)(v0 + 168) + 32;
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v8 = v5 ? (id)MEMORY[0x1B5E43B94](v4, *(_QWORD *)(v43 + 168)) : *(id *)(v6 + 8 * v4);
      v9 = v8;
      v10 = (void *)RecentDialog.addViews.getter();
      v11 = objc_msgSend(v10, sel_views);

      if (!v11)
        break;

      v12 = (void *)RecentDialog.addViews.getter();
      v13 = objc_msgSend(v12, sel_views);

      if (v13)
      {
        type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
        v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        v15 = specialized _arrayForceCast<A, B>(_:)(v14);
        swift_bridgeObjectRelease();
LABEL_14:

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        v17 = v7[2];
        v16 = v7[3];
        if (v17 >= v16 >> 1)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v7);
        v7[2] = v17 + 1;
        v7[v17 + 4] = v15;
        goto LABEL_6;
      }

LABEL_6:
      if (v2 == ++v4)
        goto LABEL_21;
    }
    v15 = MEMORY[0x1E0DEE9D8];
    goto LABEL_14;
  }
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t sub_1B4D89CE8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t specialized ConversationService.bridge(didReceiveClearContext:from:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v1 + 120) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  *(_QWORD *)(v0 + 128) = static MessageBusActor.shared;
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v2, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v3;
  *v3 = v0;
  v3[1] = specialized ConversationService.bridge(didReceiveClearContext:from:);
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v1 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v1 = MEMORY[0x1E0DEE9E8];
  v2 = *(_QWORD *)(v0 + 112);
  swift_beginAccess();
  *(_QWORD *)(v2 + 104) = v1;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v2 + 192);
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  TaskService.onTurnInvalidated()();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;

  v1 = *(_QWORD *)(v0 + 112);
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v1 + 272) = 0;
  swift_beginAccess();
  v2 = *(void **)(v1 + 112);
  *(_QWORD *)(v1 + 112) = 1;
  v3 = *(_BYTE *)(v1 + 120);
  *(_BYTE *)(v1 + 120) = 0;
  outlined consume of ConversationService.State(v2, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for closure #1 in ConversationService.drainAsyncWork()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationService.drainAsyncWork()(a1, a2, v2);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegate.fetchSelfReflectionDecision()(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in ServiceBridgeDelegate.fetchSelfReflectionDecision()(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1B4D8A1D8()
{
  return objectdestroyTm_4((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:)(a1, v4, v5, v6);
}

uint64_t associated type witness table accessor for GlobalActor.ActorType : Actor in MessageBusActor(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, a2, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
}

_QWORD *sub_1B4D8A280@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  result = ConversationService.serialFacade.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t method lookup function for MessageBusActor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MessageBusActor.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for ConversationService()
{
  return objc_opt_self();
}

uint64_t method lookup function for ConversationService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationService.__allocating_init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t initializeBufferWithCopyOfBuffer for ConversationService.State(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ConversationService.State(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for ConversationService.State(uint64_t a1)
{
  outlined consume of ConversationService.State(*(id *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for ConversationService.State(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of ConversationService.State(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of ConversationService.State(v5, v6);
  return a1;
}

uint64_t assignWithTake for ConversationService.State(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of ConversationService.State(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationService.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >> 1 >= 0xFFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 8190);
  v3 = ((*(unsigned __int8 *)(a1 + 8) >> 6) | (4
                                             * ((*(_QWORD *)a1 >> 58) & 0x3C | (*(_QWORD *)a1 >> 1) & 3 | (((*(unsigned __int8 *)(a1 + 8) >> 1) & 0x1F) << 6)))) ^ 0x1FFF;
  if (v3 >= 0x1FFD)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ConversationService.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 >> 1 > 0xFFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 8190;
    if (a3 >> 1 >= 0xFFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >> 1 >= 0xFFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0x7FF | ((-a2 & 0x1FFF) << 11);
      *(_QWORD *)result = ((v3 << 58) | (2 * v3)) & 0xF000000000000007;
      *(_BYTE *)(result + 8) = (v3 >> 5) & 0xFE;
    }
  }
  return result;
}

uint64_t getEnumTag for ConversationService.State(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8) >> 6;
}

uint64_t destructiveProjectEnumData for ConversationService.State(uint64_t result)
{
  *(_BYTE *)(result + 8) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for ConversationService.State(uint64_t result, char a2)
{
  char v2;

  v2 = *(_BYTE *)(result + 8) & 1 | (a2 << 6);
  *(_QWORD *)result &= 0xFFFFFFFFFFFFFF9uLL;
  *(_BYTE *)(result + 8) = v2;
  return result;
}

ValueMetadata *type metadata accessor for ConversationService.State()
{
  return &type metadata for ConversationService.State;
}

uint64_t *initializeBufferWithCopyOfBuffer for ConversationService.EagerResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v17 = type metadata accessor for ServerFallbackReason();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_retain();
      swift_retain();
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?))
                  + 64);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for Input();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

_QWORD *assignWithCopy for ConversationService.EagerResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 == a2)
    return a1;
  outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for ConversationService.EagerResult);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v13 = type metadata accessor for ServerFallbackReason();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      *a1 = *a2;
      swift_retain();
      goto LABEL_11;
    case 0:
      *a1 = *a2;
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?))
                  + 64);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for Input();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      goto LABEL_11;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *initializeWithTake for ConversationService.EagerResult(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v13 = type metadata accessor for ServerFallbackReason();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    *a1 = *a2;
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?))
                + 64);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Input();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    goto LABEL_8;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for ConversationService.EagerResult(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for ConversationService.EagerResult);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v13 = type metadata accessor for ServerFallbackReason();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?))
                  + 64);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for Input();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      goto LABEL_9;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void type metadata completion function for ConversationService.EagerResult()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for Input?();
  if (v0 <= 0x3F)
  {
    v1 = MEMORY[0x1E0DE9D48] + 64;
    swift_getTupleTypeLayout3();
    v5 = &v4;
    v6 = v1;
    v2 = type metadata accessor for ServerFallbackReason();
    if (v3 <= 0x3F)
    {
      v7 = *(_QWORD *)(v2 - 8) + 64;
      swift_initEnumMetadataMultiPayload();
    }
  }
}

void type metadata accessor for Input?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Input?)
  {
    type metadata accessor for Input();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Input?);
  }
}

uint64_t ObjC metadata update function for ConversationService.ActiveTurn()
{
  return type metadata accessor for ConversationService.ActiveTurn(0);
}

uint64_t type metadata completion function for ConversationService.ActiveTurn()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for RemoteConversationTurnData(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ConversationService.ActiveTurn()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.__allocating_init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.registerEagerTask(forInput:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.getEagerTask(rcId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.registerNeedsASRReveal(rcId:recognition:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.getNeedsASRReveal(rcId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.registerInput(rcId:input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.getInput(rcId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.registerNlResponseCode(rcId:responseCode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.getNlResponseCode(rcId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.registerExecutionInputSystem(rcId:system:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.getExecutionInputSystem(rcId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t type metadata accessor for ConversationService.ExecutionTaskContext()
{
  return objc_opt_self();
}

uint64_t method lookup function for ConversationService.ExecutionTaskContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationService.ExecutionTaskContext.__allocating_init(forceTimeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of ConversationService.ExecutionTaskContext.clear()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of ConversationService.ExecutionTaskContext.getActiveTasks()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ConversationService.ExecutionTaskContext.getCompletedTasks()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t sub_1B4D8AD80()
{
  return objectdestroy_115Tm((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<SelfReflectionAgentDecision, Never>);
}

uint64_t partial apply for closure #1 in closure #1 in ServiceBridgeDelegate.fetchSelfReflectionDecision()()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<SelfReflectionAgentDecision, Never>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<SelfReflectionAgentDecision, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1B4D8ADF8()
{
  return objectdestroyTm_4((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #2 in closure #1 in ConversationService.drainAsyncWork()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_1B4D8AE68()
{
  return objectdestroyTm_4((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationService.drainAsyncWork()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5Tu))(a1, v4);
}

uint64_t partial apply for closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:)(a1, a2, v2);
}

uint64_t sub_1B4D8AFAC()
{
  return objectdestroyTm_4((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in ConversationService.bridge(didReceiveClearContext:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationService.bridge(didReceiveClearContext:from:)(a1, a2, v2);
}

uint64_t sub_1B4D8B080()
{
  return objectdestroyTm_4((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t sub_1B4D8B0F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B4D8B114()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ConversationService.cleanupEmptyActiveConversations()();
}

uint64_t closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:)partial apply()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ConversationService.cleanupEmptyActiveConversations()();
}

uint64_t sub_1B4D8B200()
{
  return objectdestroyTm_4((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in ConversationService.markNotBusyAsync()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v3[5] = v2;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)(a1, a2, v7, v6);
}

uint64_t sub_1B4D8B2DC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)(a1, v4, v5, v7, v6);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSb_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSb_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSb_TG5Tu))(a1, v4);
}

uint64_t partial apply for closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(a1, a2, v2);
}

uint64_t outlined consume of RemoteConversationClient??(uint64_t result)
{
  if (result != 1)
    return swift_release();
  return result;
}

uint64_t sub_1B4D8B46C()
{
  return objectdestroyTm_4((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v5[12] = a1;
  v5[13] = v4;
  return swift_task_switch();
}

uint64_t sub_1B4D8B4E0()
{
  return objectdestroyTm_4((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v5[12] = a1;
  v5[13] = v4;
  return swift_task_switch();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTR14SiriKitRuntime24RemoteConversationClientCSg_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTR14SiriKitRuntime24RemoteConversationClientCSg_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTR14SiriKitRuntime24RemoteConversationClientCSg_TG5Tu))(a1, v4);
}

uint64_t sub_1B4D8B5C4()
{
  return objectdestroyTm_4((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t sub_1B4D8B5D4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;

  v1 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v3 = v2 + v1[7];
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_release();

  v6 = (uint64_t *)(v2 + v1[11]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(*v6, v7);
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable @async (@guaranteed RemoteConversationXPC) -> (@error @owned Error)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v8;
  _QWORD *v9;

  v8 = *(int **)(v3 + 16);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async (@guaranteed RemoteConversationXPC) -> (@error @owned Error)
                                                                   + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async (@guaranteed RemoteConversationXPC) -> (@error @owned Error)))(a1, a2, a3, v8);
}

uint64_t sub_1B4D8B770()
{
  return objectdestroyTm_4((void (*)(_QWORD))MEMORY[0x1E0DEEEC0]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B4D8B800()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<AFSpeechPackage?, Never>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<AFSpeechPackage?, Never>);
  return closure #1 in closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(a1);
}

uint64_t sub_1B4D8B84C()
{
  return objectdestroyTm_4((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t objectdestroyTm_4(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_unknownObjectRelease();
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

uint64_t closure #1 in ConversationService.warmup()partial apply(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationService.warmup()(a1, v4, v5, v6);
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveStartExecutionTurn:from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, void *, uint64_t);

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  v13 = a1;
  swift_unknownObjectRetain();
  v14 = StaticString.description.getter();
  v16 = v15;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveStartExecutionTurn:from:);
  *(_QWORD *)(v17 + 24) = v12;
  *(_QWORD *)(v17 + 32) = "bridge(didReceiveStartExecutionTurn:from:)";
  *(_QWORD *)(v17 + 40) = 42;
  *(_BYTE *)(v17 + 48) = 2;
  v18 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a5 + 208);
  swift_retain();
  v18(v14, v16, &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:), v17);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveRequestContextData:from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, void *, uint64_t);

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  v13 = a1;
  swift_unknownObjectRetain();
  v14 = StaticString.description.getter();
  v16 = v15;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRequestContextData:from:);
  *(_QWORD *)(v17 + 24) = v12;
  *(_QWORD *)(v17 + 32) = "bridge(didReceiveRequestContextData:from:)";
  *(_QWORD *)(v17 + 40) = 42;
  *(_BYTE *)(v17 + 48) = 2;
  v18 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a5 + 208);
  swift_retain();
  v18(v14, v16, &closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)partial apply, v17);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, void *, uint64_t);

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v13 = StaticString.description.getter();
  v15 = v14;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a4;
  *(_QWORD *)(v16 + 24) = a5;
  *(_QWORD *)(v16 + 32) = a6;
  *(_QWORD *)(v16 + 40) = "bridge(didReceiveInput:from:)";
  *(_QWORD *)(v16 + 48) = 29;
  *(_BYTE *)(v16 + 56) = 2;
  *(_QWORD *)(v16 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveInput:from:);
  *(_QWORD *)(v16 + 72) = v12;
  v17 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a5 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v17(v13, v15, &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:), v16);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveClearContext:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, void *, uint64_t);

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v13 = StaticString.description.getter();
  v15 = v14;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveClearContext:from:);
  *(_QWORD *)(v16 + 24) = v12;
  *(_QWORD *)(v16 + 32) = "bridge(didReceiveClearContext:from:)";
  *(_QWORD *)(v16 + 40) = 36;
  *(_BYTE *)(v16 + 48) = 2;
  v17 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a5 + 208);
  swift_retain();
  v17(v13, v15, &closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)partial apply, v16);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveCancelRequest:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, void *, uint64_t);

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v13 = StaticString.description.getter();
  v15 = v14;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCancelRequest:from:);
  *(_QWORD *)(v16 + 24) = v12;
  *(_QWORD *)(v16 + 32) = "bridge(didReceiveCancelRequest:from:)";
  *(_QWORD *)(v16 + 40) = 37;
  *(_BYTE *)(v16 + 48) = 2;
  v17 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a5 + 208);
  swift_retain();
  v17(v13, v15, &closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)partial apply, v16);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidateId:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, void *, uint64_t);

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v13 = StaticString.description.getter();
  v15 = v14;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a4;
  *(_QWORD *)(v16 + 24) = a5;
  *(_QWORD *)(v16 + 32) = a6;
  *(_QWORD *)(v16 + 40) = "bridge(didReceiveCommitResultCandidateId:from:)";
  *(_QWORD *)(v16 + 48) = 47;
  *(_BYTE *)(v16 + 56) = 2;
  *(_QWORD *)(v16 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidateId:from:);
  *(_QWORD *)(v16 + 72) = v12;
  v17 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a5 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v17(v13, v15, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v16);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidate:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, void *, uint64_t);

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  v13 = StaticString.description.getter();
  v15 = v14;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a4;
  *(_QWORD *)(v16 + 24) = a5;
  *(_QWORD *)(v16 + 32) = a6;
  *(_QWORD *)(v16 + 40) = "bridge(didReceiveCommitResultCandidate:from:)";
  *(_QWORD *)(v16 + 48) = 45;
  *(_BYTE *)(v16 + 56) = 2;
  *(_QWORD *)(v16 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidate:from:);
  *(_QWORD *)(v16 + 72) = v12;
  v17 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a5 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v17(v13, v15, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v16);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveRSKE:withRequestContextData:from:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, void *, uint64_t);

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = a7;
  v14[5] = a1;
  v14[6] = a2;
  v14[7] = a3;
  v14[8] = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  v15 = a1;
  v16 = a2;
  swift_unknownObjectRetain();
  v17 = StaticString.description.getter();
  v19 = v18;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a5;
  *(_QWORD *)(v20 + 24) = a6;
  *(_QWORD *)(v20 + 32) = a7;
  *(_QWORD *)(v20 + 40) = "bridge(didReceiveRSKE:withRequestContextData:from:)";
  *(_QWORD *)(v20 + 48) = 51;
  *(_BYTE *)(v20 + 56) = 2;
  *(_QWORD *)(v20 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRSKE:withRequestContextData:from:);
  *(_QWORD *)(v20 + 72) = v14;
  v21 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a6 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v21(v17, v19, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v20);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveSiriKitPluginSignal:from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, void *, uint64_t);

  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  v13 = a1;
  swift_unknownObjectRetain();
  v14 = StaticString.description.getter();
  v16 = v15;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a4;
  *(_QWORD *)(v17 + 24) = a5;
  *(_QWORD *)(v17 + 32) = a6;
  *(_QWORD *)(v17 + 40) = "bridge(didReceiveSiriKitPluginSignal:from:)";
  *(_QWORD *)(v17 + 48) = 43;
  *(_BYTE *)(v17 + 56) = 2;
  *(_QWORD *)(v17 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveSiriKitPluginSignal:from:);
  *(_QWORD *)(v17 + 72) = v12;
  v18 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a5 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v18(v14, v16, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v17);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ConversationServiceSerialFacade.init(wrapping:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void (*v5)(char *, uint64_t, uint64_t);
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v0 = type metadata accessor for Logger();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v4 = __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v5(v3, v4, v0);
  type metadata accessor for AsyncSerialQueue();
  v6 = (char *)swift_allocObject();
  *((_QWORD *)v6 + 2) = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 0;
  *((_QWORD *)v6 + 6) = v7;
  *((_QWORD *)v6 + 7) = 0xD000000000000022;
  *((_QWORD *)v6 + 8) = 0x80000001B4EFA930;
  v8 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
  v8(&v6[OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger], v3, v0);
  v5(v3, v4, v0);
  v9 = (char *)swift_allocObject();
  *((_QWORD *)v9 + 2) = MEMORY[0x1E0DEE9D8];
  *((_QWORD *)v9 + 3) = 0;
  *((_QWORD *)v9 + 4) = 0;
  *((_QWORD *)v9 + 5) = 0;
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = 0;
  *((_QWORD *)v9 + 6) = v10;
  *((_QWORD *)v9 + 7) = 0xD000000000000020;
  *((_QWORD *)v9 + 8) = 0x80000001B4EFA960;
  v8(&v9[OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger], v3, v0);
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, void *, uint64_t);

  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a6;
  v16[3] = a7;
  v16[4] = a8;
  v16[5] = a1;
  v16[6] = a2;
  v16[7] = a3;
  v16[8] = a4;
  v16[9] = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  v17 = StaticString.description.getter();
  v19 = v18;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = a6;
  *(_QWORD *)(v20 + 24) = a7;
  *(_QWORD *)(v20 + 32) = a8;
  *(_QWORD *)(v20 + 40) = "bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)";
  *(_QWORD *)(v20 + 48) = 71;
  *(_BYTE *)(v20 + 56) = 2;
  *(_QWORD *)(v20 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:);
  *(_QWORD *)(v20 + 72) = v16;
  v21 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a7 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v21(v17, v19, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v20);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[5] = a1;
  v8[6] = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v8[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v12 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v1, 1, 1, v7);
  v8 = static MessageBusActor.shared;
  v9 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = v8;
  v10[3] = v9;
  v10[4] = v4;
  v10[5] = v2;
  v10[6] = v6;
  v10[7] = v5;
  v10[8] = v12;
  v10[9] = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:), (uint64_t)v10);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, void *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a6;
  v32 = a7;
  v29 = a4;
  v30 = a5;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ExecutionOverrideResult?, Never>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v14 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v15 = (v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v17 + v14, v13, v10);
  v18 = (_QWORD *)(v17 + v15);
  *v18 = a2;
  v18[1] = a3;
  v20 = v29;
  v19 = v30;
  v18[2] = v29;
  *(_QWORD *)(v17 + v16) = v19;
  v21 = (_QWORD *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8));
  v22 = v32;
  *v21 = v31;
  v21[1] = v22;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v23 = StaticString.description.getter();
  v25 = v24;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = a2;
  *(_QWORD *)(v26 + 24) = a3;
  *(_QWORD *)(v26 + 32) = v20;
  *(_QWORD *)(v26 + 40) = "checkExecutionOverrides(context:resultCandidateId:)";
  *(_QWORD *)(v26 + 48) = 51;
  *(_BYTE *)(v26 + 56) = 2;
  *(_QWORD *)(v26 + 64) = &async function pointer to partial apply for closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:);
  *(_QWORD *)(v26 + 72) = v17;
  v27 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)a3 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v27(v23, v25, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v26);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v11;

  *(_QWORD *)(v7 + 24) = a1;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 32) = v11;
  *v11 = v7;
  v11[1] = closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:);
  return ConversationService.checkExecutionOverrides(context:resultCandidateId:)(a5, a6, a7);
}

uint64_t closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ExecutionOverrideResult?, Never>);
  CheckedContinuation.resume(returning:)();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveClearContext:from:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized ConversationService.bridge(didReceiveClearContext:from:)
                             + async function pointer to specialized ConversationService.bridge(didReceiveClearContext:from:));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v3();
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidate:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a1;
  v6[6] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v6[9] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidate:from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[6];
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  type metadata accessor for CommitResultCandidateId();
  v4 = swift_allocObject();
  v0[10] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  swift_bridgeObjectRetain();
  v5 = (_QWORD *)swift_task_alloc();
  v0[11] = v5;
  *v5 = v0;
  v5[1] = ConversationService.bridge(didReceiveCommitResultCandidate:from:);
  return ConversationService.bridge(didReceiveCommitResultCandidateId:from:)(v4, v0[7], v0[8]);
}

uint64_t sub_1B4D8CE10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B4D8CE54()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t closure #1 in closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  *(_BYTE *)(v5 + 72) = a5;
  *(_QWORD *)(v5 + 40) = a3;
  *(_QWORD *)(v5 + 48) = a4;
  v8 = (uint64_t (*)(void))((char *)a1 + *a1);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 56) = v6;
  *v6 = v5;
  v6[1] = closure #1 in closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:);
  return v8();
}

uint64_t closure #1 in closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(void **)(v0 + 64);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 64);
  if (v7)
  {
    v9 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    v17 = v16;
    *(_DWORD *)v9 = 136315394;
    v10 = StaticString.description.getter();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    *(_QWORD *)(v0 + 24) = v8;
    v12 = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v13 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v5, v6, "Error performing %s: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v16, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B4D8D1C0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = v0[7];
  v9 = v0[8];
  v8 = v0[9];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(v2, v3, v4, v5, v6, v7, v9, v8);
}

uint64_t closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int128 v5;
  __int128 v7;

  v7 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v0 + 56);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  *(_OWORD *)(v4 + 40) = v5;
  *(_BYTE *)(v4 + 56) = v3;
  *(_QWORD *)(v4 + 32) = v2;
  *(_OWORD *)(v4 + 16) = v7;
  return swift_task_switch();
}

uint64_t destroy for ConversationServiceSerialFacade()
{
  swift_release();
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for ConversationServiceSerialFacade(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ConversationServiceSerialFacade(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ConversationServiceSerialFacade(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ConversationServiceSerialFacade()
{
  return &type metadata for ConversationServiceSerialFacade;
}

uint64_t sub_1B4D8D474()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B4D8D4B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ExecutionOverrideResult?, Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t ConversationTurnState.makeCurrentRequestForSiriEnvironment(speechData:positionInSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  uint8_t *v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t, uint64_t);
  char *v65;
  void (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  uint8_t *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  char v77;
  char *v78;
  uint8_t *v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char *v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t);
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(char *, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  void (*v130)(__int128 *__return_ptr, uint64_t, uint64_t);
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138[2];
  __int128 v139;
  __int128 v140;
  uint64_t v141;

  v123 = a2;
  v119 = type metadata accessor for ResponseMode();
  v118 = *(_QWORD *)(v119 - 8);
  v8 = MEMORY[0x1E0C80A78](v119);
  v117 = (char *)&v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = *(void (**)(char *, uint64_t, uint64_t))(a3 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v124 = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v122 = (char *)&v116 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v131 = (char *)&v116 - v15;
  MEMORY[0x1E0C80A78](v14);
  v121 = (char *)&v116 - v16;
  v17 = type metadata accessor for MultiUserContext();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for MultiUserState();
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v116 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v133 = a4;
  v134 = (uint64_t)&v116 - v25;
  v26 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a4 + 32);
  v132 = v4;
  v129 = a3;
  v130 = v26;
  v26(&v139, a3, a4);
  v27 = *((_QWORD *)&v140 + 1);
  v28 = v141;
  __swift_project_boxed_opaque_existential_1(&v139, *((uint64_t *)&v140 + 1));
  (*(void (**)(uint64_t, uint64_t))(v28 + 64))(v27, v28);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v24, 1, v17);
  outlined destroy of MultiUserState((uint64_t)v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
  v126 = a1;
  if (v29 == 1
    && (v30 = *(void **)(a1 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfo)) != 0)
  {
    v31 = one-time initialization token for executor;
    v32 = v30;
    if (v31 != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.executor);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1B4BE6000, v34, v35, "Getting multi-user state from UserSpecificInfo", v36, 2u);
      MEMORY[0x1B5E44758](v36, -1, -1);
    }

    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v32) + 0x100))();
    v37 = *(void **)((char *)v32 + OBJC_IVAR___SKEUserSpecificInfo_meCard);
    if (v37)
    {
      v38 = v37;
      v39 = SAPerson.contact.getter();
      v40 = type metadata accessor for DefaultMeCardProxy();
      v41 = swift_allocObject();
      *(_QWORD *)(v41 + 16) = v39;
      *((_QWORD *)&v140 + 1) = v40;
      v141 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type DefaultMeCardProxy and conformance DefaultMeCardProxy, (uint64_t (*)(uint64_t))type metadata accessor for DefaultMeCardProxy, (uint64_t)&protocol conformance descriptor for DefaultMeCardProxy);
      *(_QWORD *)&v139 = v41;

    }
    else
    {
      v141 = 0;
      v139 = 0u;
      v140 = 0u;
    }
    v43 = v133;
    swift_bridgeObjectRetain();
    MultiUserContext.init(requiresUserGrounding:meCardProxy:handoffTargetDeviceID:)();

    v47 = v134;
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v134, v20, v17);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v47, 0, 1, v17);
    v42 = v132;
    v44 = v129;
  }
  else
  {
    v42 = v132;
    v43 = v133;
    v44 = v129;
    v130(&v139, v129, v133);
    v45 = *((_QWORD *)&v140 + 1);
    v46 = v141;
    __swift_project_boxed_opaque_existential_1(&v139, *((uint64_t *)&v140 + 1));
    (*(void (**)(uint64_t, uint64_t))(v46 + 64))(v45, v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
  }
  v48 = *(void **)(*(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(v43 + 48))(v44, v43) + 32)
                 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
  v49 = type metadata accessor for PeerInfoProvider();
  v50 = swift_allocObject();
  *(_QWORD *)(v50 + 16) = v48;
  *((_QWORD *)&v140 + 1) = v49;
  v141 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type PeerInfoProvider and conformance PeerInfoProvider, (uint64_t (*)(uint64_t))type metadata accessor for PeerInfoProvider, (uint64_t)&protocol conformance descriptor for PeerInfoProvider);
  *(_QWORD *)&v139 = v50;
  v51 = v48;
  swift_release();
  v52 = static ConversationTurnState.computeCompanionName(_:)(&v139);
  v54 = v53;
  if (one-time initialization token for executor != -1)
    swift_once();
  v55 = type metadata accessor for Logger();
  v56 = __swift_project_value_buffer(v55, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  v57 = Logger.logObject.getter();
  v58 = static os_log_type_t.debug.getter();
  v59 = os_log_type_enabled(v57, v58);
  v128 = v56;
  v120 = v54;
  v125 = v52;
  if (v59)
  {
    v60 = (uint8_t *)swift_slowAlloc();
    v61 = swift_slowAlloc();
    *(_QWORD *)&v135 = v61;
    *(_DWORD *)v60 = 136315138;
    if (v54)
    {
      v62 = v54;
    }
    else
    {
      v52 = 7104878;
      v62 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    v138[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v62, (uint64_t *)&v135);
    v42 = v132;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v57, v58, "CurrentRequest companionName resolved to: %s", v60, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v61, -1, -1);
    MEMORY[0x1B5E44758](v60, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v63 = v131;
  v64 = v127;
  v65 = v121;
  v66 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v127 + 2);
  v67 = v129;
  v66(v121, v42, v129);
  v68 = Logger.logObject.getter();
  v69 = static os_log_type_t.debug.getter();
  v70 = os_log_type_enabled(v68, v69);
  v127 = v66;
  if (v70)
  {
    v71 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v71 = 67109120;
    v130(&v135, v67, v133);
    v72 = v65;
    v73 = v136;
    v74 = v137;
    __swift_project_boxed_opaque_existential_1(&v135, v136);
    v75 = *(uint64_t (**)(uint64_t, uint64_t))(v74 + 232);
    v76 = v74;
    v42 = v132;
    v77 = v75(v73, v76);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v135);
    v78 = v72;
    v67 = v129;
    v131 = (char *)*((_QWORD *)v64 + 1);
    ((void (*)(char *, uint64_t))v131)(v78, v129);
    LODWORD(v135) = v77 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v68, v69, "CurrentRequestForSiriEnvironment isSystemApertureEnabled: %{BOOL}d", v71, 8u);
    v79 = v71;
    v66 = v127;
    MEMORY[0x1B5E44758](v79, -1, -1);
  }
  else
  {
    v131 = (char *)*((_QWORD *)v64 + 1);
    ((void (*)(char *, uint64_t))v131)(v65, v67);
  }

  v66(v63, v42, v67);
  v80 = Logger.logObject.getter();
  v81 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v80, v81))
  {
    v82 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v82 = 67109120;
    v130(&v135, v67, v133);
    v83 = v136;
    v84 = v137;
    __swift_project_boxed_opaque_existential_1(&v135, v136);
    v85 = (*(uint64_t (**)(uint64_t, uint64_t))(v84 + 240))(v83, v84);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v135);
    ((void (*)(char *, uint64_t))v131)(v63, v67);
    LODWORD(v135) = v85 & 1;
    v42 = v132;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v80, v81, "CurrentRequestForSiriEnvironment isLiveActivitiesSupported: %{BOOL}d", v82, 8u);
    MEMORY[0x1B5E44758](v82, -1, -1);
  }
  else
  {
    ((void (*)(char *, uint64_t))v131)(v63, v67);
  }
  v86 = v122;

  v66(v86, v42, v67);
  v87 = Logger.logObject.getter();
  v88 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v87, v88))
  {
    v89 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v89 = 67109120;
    v90 = v133;
    v130(&v135, v67, v133);
    v91 = v136;
    v92 = v137;
    __swift_project_boxed_opaque_existential_1(&v135, v136);
    v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 248))(v91, v92);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v135);
    ((void (*)(char *, uint64_t))v131)(v86, v67);
    LODWORD(v135) = v93 & 1;
    v42 = v132;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v87, v88, "CurrentRequestForSiriEnvironment isInAmbient: %{BOOL}d", v89, 8u);
    MEMORY[0x1B5E44758](v89, -1, -1);
  }
  else
  {
    ((void (*)(char *, uint64_t))v131)(v86, v67);
    v90 = v133;
  }
  v94 = v124;
  v95 = v123;
  v96 = v120;

  v97 = type metadata accessor for CurrentRequest();
  MEMORY[0x1E0C80A78](v97);
  *(&v116 - 10) = v67;
  *(&v116 - 9) = v90;
  *(&v116 - 8) = v42;
  *(&v116 - 7) = (uint64_t)&v139;
  v98 = v126;
  *(&v116 - 6) = v134;
  *(&v116 - 5) = v98;
  *(&v116 - 4) = v125;
  *(&v116 - 3) = v96;
  *(&v116 - 2) = v95;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type CurrentRequest and conformance CurrentRequest, v99, MEMORY[0x1E0D98268]);
  static Buildable.withBuilder(_:)();
  swift_bridgeObjectRelease();
  v100 = v135;
  v127(v94, v42, v67);
  swift_retain_n();
  v101 = Logger.logObject.getter();
  v102 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v101, v102))
  {
    v103 = swift_slowAlloc();
    v133 = swift_slowAlloc();
    v138[0] = v133;
    *(_DWORD *)v103 = 136315394;
    v104 = ObjectIdentifier.debugDescription.getter();
    v105 = v94;
    *(_QWORD *)&v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v106, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v103 + 12) = 2080;
    v132 = v103 + 14;
    v130(&v135, v67, v90);
    v107 = v136;
    v108 = v137;
    __swift_project_boxed_opaque_existential_1(&v135, v136);
    v109 = v117;
    (*(void (**)(uint64_t, uint64_t))(v108 + 56))(v107, v108);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v135);
    ((void (*)(char *, uint64_t))v131)(v105, v67);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA7DE8], MEMORY[0x1E0D9C7A0]);
    v110 = v119;
    v111 = dispatch thunk of CustomStringConvertible.description.getter();
    v113 = v112;
    (*(void (**)(char *, uint64_t))(v118 + 8))(v109, v110);
    *(_QWORD *)&v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v113, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v101, v102, "Created CurrentRequest %s with responseMode %s", (uint8_t *)v103, 0x16u);
    v114 = v133;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v114, -1, -1);
    MEMORY[0x1B5E44758](v103, -1, -1);

  }
  else
  {
    ((void (*)(char *, uint64_t))v131)(v94, v67);

    swift_release_n();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
  outlined destroy of MultiUserState(v134);
  return v100;
}

uint64_t static ConversationTurnState.computeCompanionName(_:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  uint64_t v19;

  v2 = type metadata accessor for DeviceIdiom();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of PeerInfoProviding.getDeviceIdiom()();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E0DA7C88], v2);
  LOBYTE(a1) = static DeviceIdiom.== infix(_:_:)();
  v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v6, v2);
  v9(v8, v2);
  if ((a1 & 1) == 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v11, v12))
      goto LABEL_12;
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "Request is not interacting with a HomePod, companion name is nil.";
    goto LABEL_11;
  }
  if (MGGetSInt32Answer() == 7)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v11, v12))
      goto LABEL_12;
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    v14 = "Request is executing on a HomePod and not in companion mode. Companion name not known, setting as nil.";
LABEL_11:
    _os_log_impl(&dword_1B4BE6000, v11, v12, v14, v13, 2u);
    MEMORY[0x1B5E44758](v13, -1, -1);
LABEL_12:

    return 0;
  }
  result = MGGetStringAnswer();
  if (result)
  {
    v18 = (void *)result;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return v16;
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in ConversationTurnState.makeCurrentRequestForSiriEnvironment(speechData:positionInSession:)(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(id *__return_ptr, uint64_t, uint64_t);
  unint64_t v35;
  ValueMetadata *v36;
  uint64_t v37;
  uint64_t v38;
  ValueMetadata *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD **v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(id *__return_ptr, uint64_t, uint64_t);
  ValueMetadata *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  ValueMetadata *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(id *__return_ptr, uint64_t, uint64_t);
  ValueMetadata *v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(id *__return_ptr, uint64_t, uint64_t);
  ValueMetadata *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  ValueMetadata *v70;
  unint64_t v71;
  char **v72;
  void (*v73)(id *__return_ptr, uint64_t, uint64_t);
  ValueMetadata *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  ValueMetadata *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(id *__return_ptr, uint64_t, uint64_t);
  ValueMetadata *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  ValueMetadata *v93;
  unint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(id *__return_ptr, uint64_t, uint64_t);
  ValueMetadata *v101;
  unint64_t v102;
  uint64_t v103;
  ValueMetadata *v104;
  unint64_t v105;
  ValueMetadata *v106;
  unint64_t v107;
  uint64_t v108;
  ValueMetadata *v109;
  unint64_t v110;
  char **v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  ValueMetadata *v115;
  unint64_t v116;
  ValueMetadata *v117;
  unint64_t v118;
  ValueMetadata *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(char *, uint64_t, uint64_t);
  char *v131;
  void (*v132)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v133;
  char *v135;
  char *v136;
  _QWORD *v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  void *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  void (*v152)(id *__return_ptr, uint64_t, uint64_t);
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  ValueMetadata *v160;
  unint64_t v161;
  uint64_t v162;

  v151 = a5;
  v149 = a8;
  v145 = a6;
  v146 = a7;
  v143 = a4;
  v137 = a3;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1E0C80A78](v12);
  v150 = (char *)&v135 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  MEMORY[0x1E0C80A78](v14);
  v148 = (char *)&v135 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTaskMetadata?);
  MEMORY[0x1E0C80A78](v16);
  v147 = (char *)&v135 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
  MEMORY[0x1E0C80A78](v18);
  v144 = (char *)&v135 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
  MEMORY[0x1E0C80A78](v20);
  v142 = (char *)&v135 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MultiUserState?);
  MEMORY[0x1E0C80A78](v22);
  v141 = (uint64_t)&v135 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1E0C80A78](v24);
  v140 = (char *)&v135 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1E0C80A78](v26);
  v139 = (char *)&v135 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1E0C80A78](v28);
  v138 = (char *)&v135 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  MEMORY[0x1E0C80A78](v30);
  v136 = (char *)&v135 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1E0C80A78](v32);
  v135 = (char *)&v135 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = a1;
  swift_getKeyPath();
  v162 = a10;
  v34 = *(void (**)(id *__return_ptr, uint64_t, uint64_t))(a10 + 32);
  v155 = a9;
  v34(&v158, a9, a10);
  v152 = v34;
  v36 = v160;
  v35 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  v156 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v35 + 8))(v36, v35);
  v157 = v37;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  swift_getKeyPath();
  v38 = v162;
  v34(&v158, a9, v162);
  v39 = v160;
  v40 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  v156 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v40 + 16))(v39, v40);
  v157 = v41;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  v42 = (_QWORD **)v153;
  swift_getKeyPath();
  v43 = v38;
  v44 = *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8);
  v45 = a2;
  v46 = v155;
  v158 = (id)v44(v155, v43);
  v159 = v47;
  Builder.subscript.setter();
  swift_getKeyPath();
  v48 = v152;
  v152(&v158, v46, v43);
  v49 = v160;
  v50 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  v156 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v50 + 72))(v49, v50);
  v157 = v51;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  swift_getKeyPath();
  __swift_project_boxed_opaque_existential_1(v137, v137[3]);
  v158 = (id)dispatch thunk of PeerInfoProviding.getPeerName()();
  v159 = v52;
  Builder.subscript.setter();
  v137 = *v42;
  swift_getKeyPath();
  v154 = v45;
  v53 = v155;
  v48(&v158, v155, v43);
  v54 = v160;
  v55 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  v56 = v135;
  (*(void (**)(ValueMetadata *, unint64_t))(v55 + 24))(v54, v55);
  v57 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 0, 1, v57);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  v137 = *v42;
  swift_getKeyPath();
  v58 = v162;
  v59 = v48;
  v48(&v158, v53, v162);
  v60 = v160;
  v61 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  v62 = v136;
  (*(void (**)(ValueMetadata *, unint64_t))(v61 + 32))(v60, v61);
  v63 = type metadata accessor for InteractionType();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v62, 0, 1, v63);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  v137 = *v42;
  swift_getKeyPath();
  v59(&v158, v53, v58);
  v64 = v59;
  v65 = v160;
  v66 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  v156 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v66 + 152))(v65, v66);
  v157 = v67;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  v137 = *v42;
  swift_getKeyPath();
  v68 = v155;
  v69 = v162;
  v64(&v158, v155, v162);
  v70 = v160;
  v71 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  (*(void (**)(ValueMetadata *, unint64_t))(v71 + 40))(v70, v71);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  v72 = (char **)v153;
  v138 = (char *)*v153;
  swift_getKeyPath();
  v73 = v152;
  v152(&v158, v68, v69);
  v74 = v160;
  v75 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  (*(void (**)(ValueMetadata *, unint64_t))(v75 + 48))(v74, v75);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  v139 = *v72;
  swift_getKeyPath();
  v76 = v68;
  v77 = v162;
  v73(&v158, v76, v162);
  v78 = v160;
  v79 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  v80 = v140;
  (*(void (**)(ValueMetadata *, unint64_t))(v79 + 56))(v78, v79);
  v81 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v80, 0, 1, v81);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  v82 = v72;
  swift_getKeyPath();
  v83 = v141;
  outlined init with copy of MultiUserState(v143, v141);
  v84 = type metadata accessor for MultiUserState();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v83, 0, 1, v84);
  Builder.subscript.setter();
  swift_getKeyPath();
  v85 = v155;
  v86 = v77;
  v87 = v152;
  v152(&v158, v155, v86);
  v88 = v160;
  v89 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  (*(void (**)(ValueMetadata *, unint64_t))(v89 + 176))(v88, v89);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  swift_getKeyPath();
  v90 = v85;
  v91 = v85;
  v92 = v162;
  (*(void (**)(id *__return_ptr, uint64_t))(v162 + 56))(&v158, v91);
  Builder.subscript.setter();
  swift_getKeyPath();
  v87(&v158, v90, v92);
  v93 = v160;
  v94 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  (*(void (**)(ValueMetadata *, unint64_t))(v94 + 200))(v93, v94);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  swift_getKeyPath();
  v95 = v151;
  v158 = *(id *)(v151 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_speechPackage);
  v96 = v158;
  Builder.subscript.setter();
  swift_getKeyPath();
  v97 = *(_QWORD *)(v95 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId + 8);
  v158 = *(id *)(v95 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId);
  v159 = v97;
  swift_bridgeObjectRetain();
  Builder.subscript.setter();
  swift_getKeyPath();
  LOBYTE(v158) = *(_BYTE *)(v95 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_asrOnDevice);
  Builder.subscript.setter();
  v144 = *v72;
  swift_getKeyPath();
  v98 = v155;
  v99 = v162;
  v100 = v152;
  v152(&v158, v155, v162);
  v101 = v160;
  v102 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  v156 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v102 + 208))(v101, v102);
  v157 = v103;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  v144 = *v82;
  swift_getKeyPath();
  v100(&v158, v98, v99);
  v104 = v160;
  v105 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  v156 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v105 + 216))(v104, v105);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  swift_getKeyPath();
  v158 = v145;
  v159 = v146;
  swift_bridgeObjectRetain();
  Builder.subscript.setter();
  swift_getKeyPath();
  v100(&v158, v98, v99);
  v106 = v160;
  v107 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  LOBYTE(v156) = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v107 + 104))(v106, v107) & 1;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  swift_getKeyPath();
  v108 = type metadata accessor for FlowTaskMetadata();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 56))(v147, 1, 1, v108);
  Builder.subscript.setter();
  swift_getKeyPath();
  v100(&v158, v98, v99);
  v109 = v160;
  v110 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  LODWORD(v156) = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v110 + 224))(v109, v110);
  BYTE4(v156) = 0;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  v111 = (char **)v153;
  swift_getKeyPath();
  v112 = *(_QWORD *)(v151 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_utterance + 8);
  v158 = *(id *)(v151 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_utterance);
  v159 = v112;
  swift_bridgeObjectRetain();
  Builder.subscript.setter();
  v147 = *v111;
  swift_getKeyPath();
  v113 = v155;
  v114 = v162;
  v100(&v158, v155, v162);
  v115 = v160;
  v116 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  LOBYTE(v156) = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v116 + 232))(v115, v116) & 1;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  v147 = *v111;
  swift_getKeyPath();
  v100(&v158, v113, v114);
  v117 = v160;
  v118 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  LOBYTE(v156) = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v118 + 240))(v117, v118) & 1;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  v147 = (char *)*v153;
  swift_getKeyPath();
  v100(&v158, v113, v114);
  v119 = v160;
  v120 = v161;
  __swift_project_boxed_opaque_existential_1(&v158, (uint64_t)v160);
  LOBYTE(v156) = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v120 + 248))(v119, v120) & 1;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v158);
  swift_getKeyPath();
  v121 = type metadata accessor for RequestPositionInSession();
  v122 = *(_QWORD *)(v121 - 8);
  v123 = v148;
  (*(void (**)(char *, uint64_t, uint64_t))(v122 + 16))(v148, v149, v121);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v122 + 56))(v123, 0, 1, v121);
  Builder.subscript.setter();
  swift_getKeyPath();
  v160 = &type metadata for SiriAceLocationProvider;
  v161 = lazy protocol witness table accessor for type SiriAceLocationProvider and conformance SiriAceLocationProvider();
  Builder.subscript.setter();
  swift_getKeyPath();
  v124 = v151;
  v125 = *(_QWORD *)(v151 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_responseLanguageVariant + 8);
  v158 = *(id *)(v151 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_responseLanguageVariant);
  v159 = v125;
  swift_bridgeObjectRetain();
  Builder.subscript.setter();
  swift_getKeyPath();
  v126 = *(_QWORD *)(v124 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_requestLanguageVariant + 8);
  v158 = *(id *)(v124 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_requestLanguageVariant);
  v159 = v126;
  swift_bridgeObjectRetain();
  Builder.subscript.setter();
  swift_getKeyPath();
  v127 = v124 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_asrLocation;
  v128 = type metadata accessor for ExecutionLocation();
  v129 = *(_QWORD *)(v128 - 8);
  v130 = *(void (**)(char *, uint64_t, uint64_t))(v129 + 16);
  v131 = v150;
  v130(v150, v127, v128);
  v132 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56);
  v132(v131, 0, 1, v128);
  Builder.subscript.setter();
  swift_getKeyPath();
  v130(v131, v124 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_nlLocation, v128);
  v132(v131, 0, 1, v128);
  Builder.subscript.setter();
  swift_getKeyPath();
  v158 = (id)(*(uint64_t (**)(uint64_t))(v162 + 16))(v155);
  v159 = v133;
  return Builder.subscript.setter();
}

uint64_t key path setter for CurrentRequest.flowTaskMetadata : CurrentRequest(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTaskMetadata?);
  MEMORY[0x1E0C80A78](v2);
  outlined init with copy of FlowTaskMetadata?(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  return CurrentRequest.flowTaskMetadata.setter();
}

uint64_t outlined destroy of MultiUserState(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MultiUserState();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #2 in ConversationTurnState.makeCurrentRequestForSiriEnvironment(speechData:positionInSession:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #2 in ConversationTurnState.makeCurrentRequestForSiriEnvironment(speechData:positionInSession:)(a1, *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(void **)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t dispatch thunk of ConversationTurnState.executionRequestId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ConversationTurnState.rootRequestId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ConversationTurnState.conversationLoggingId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ConversationTurnState.invocationState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ConversationTurnState.deviceState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ConversationTurnState.aceServiceInvoker.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ConversationTurnState.sharedContextService.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ConversationTurnState.eventSender.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of ConversationTurnState.requestContextData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ConversationTurnState.scopedRRData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of ConversationTurnState.bridge.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t sub_1B4D8F760@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.interactionId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t outlined init with copy of MultiUserState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MultiUserState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B4D8F7E0()
{
  return CurrentRequest.sharedContextService.getter();
}

uint64_t sub_1B4D8F810@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.currentDeviceAssistantId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B4D8F838@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = CurrentRequest.voiceTriggerEventInfo.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B4D8F860@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.companionName.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B4D8F888@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CurrentRequest.isRecognizeMyVoiceEnabled.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B4D8F8B0()
{
  return CurrentRequest.flowTaskMetadata.getter();
}

uint64_t sub_1B4D8F8D4@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = CurrentRequest.voiceAudioSessionId.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B4D8F8FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.utterance.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B4D8F924@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CurrentRequest.isSystemApertureEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B4D8F950@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CurrentRequest.isLiveActivitiesSupported.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B4D8F97C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CurrentRequest.isInAmbient.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B4D8F9AC()
{
  return CurrentRequest.locationProvider.getter();
}

uint64_t sub_1B4D8F9CC(uint64_t a1)
{
  _BYTE v2[40];

  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v2);
  return CurrentRequest.locationProvider.setter();
}

unint64_t lazy protocol witness table accessor for type SiriAceLocationProvider and conformance SiriAceLocationProvider()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriAceLocationProvider and conformance SiriAceLocationProvider;
  if (!lazy protocol witness table cache variable for type SiriAceLocationProvider and conformance SiriAceLocationProvider)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriAceLocationProvider, &type metadata for SiriAceLocationProvider);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriAceLocationProvider and conformance SiriAceLocationProvider);
  }
  return result;
}

uint64_t sub_1B4D8FA48@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.responseLanguageVariant.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B4D8FA70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_91Tm(a1, a2, a3, a4, MEMORY[0x1E0D98350]);
}

uint64_t sub_1B4D8FA7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.requestLanguageVariant.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B4D8FAA4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_91Tm(a1, a2, a3, a4, MEMORY[0x1E0D98338]);
}

uint64_t keypath_set_91Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;

  v7 = *a1;
  v6 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v7, v6);
}

uint64_t sub_1B4D8FAF0()
{
  return CurrentRequest.asrExecutionLocation.getter();
}

uint64_t sub_1B4D8FB10()
{
  return CurrentRequest.nlExecutionLocation.getter();
}

uint64_t sub_1B4D8FB30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CurrentRequest.rootRequestId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t outlined init with copy of FlowTaskMetadata?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTaskMetadata?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PommesInfo.__allocating_init(pommesResponse:pommesError:pommesSearchReason:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a2, v6 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, &demangling cache variable for type metadata for PommesError?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a3, v6 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, &demangling cache variable for type metadata for PommesSearchReason?);
  return v6;
}

uint64_t NLResponse.__allocating_init(nlParses:nlResponseStatusCode:pommesInfo:languageVariantResult:responseVariantResult:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a1;
  v15 = v14 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode;
  v16 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15, a2, v16);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a4, v14 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  v17 = (_QWORD *)(v14 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
  *v17 = a5;
  v17[1] = a6;
  *(_QWORD *)(v14 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo) = a3;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a7, v14 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  return v14;
}

char *ConversationUserInput.__allocating_init(resultCandidateId:speechPackage:nlResponse:mitigationDecision:userSpecificInfo:utterance:asrLocation:nlLocation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);

  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = a1;
  *((_QWORD *)v18 + 3) = a2;
  *((_QWORD *)v18 + 4) = a3;
  *((_QWORD *)v18 + 5) = a4;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a5, (uint64_t)&v18[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_mitigationDecision], &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  *(_QWORD *)&v18[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfo] = a6;
  *(_QWORD *)&v18[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_executionOverrideContext] = 0;
  v19 = &v18[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance];
  *(_QWORD *)v19 = a7;
  *((_QWORD *)v19 + 1) = a8;
  v20 = &v18[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation];
  v21 = type metadata accessor for ExecutionLocation();
  v22 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
  v22(v20, a9, v21);
  v22(&v18[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_nlLocation], a10, v21);
  return v18;
}

uint64_t NLResponse.nlParses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NLResponse.nlResponseStatusCode.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F520], a1);
}

uint64_t NLResponse.languageVariantResult.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, a1, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
}

uint64_t NLResponse.responseVariantResult.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
}

uint64_t NLResponse.pommesInfo.getter()
{
  return swift_retain();
}

uint64_t NLResponse.serverFallbackReason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, a1, &demangling cache variable for type metadata for ServerFallbackReason?);
}

uint64_t NLResponse.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4D8FEE4 + 4 * byte_1B4EE88C0[a1]))(0x7365737261506C6ELL, 0xE800000000000000);
}

unint64_t sub_1B4D8FEE4()
{
  return 0xD000000000000014;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance NLResponse.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance NLResponse.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance NLResponse.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance NLResponse.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NLResponse.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized NLResponse.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NLResponse.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = NLResponse.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t NLResponse.init(nlParses:nlResponseStatusCode:pommesInfo:languageVariantResult:responseVariantResult:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  *(_QWORD *)(v7 + 16) = a1;
  v14 = v7 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode;
  v15 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a2, v15);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a4, v7 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  v16 = (_QWORD *)(v7 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
  *v16 = a5;
  v16[1] = a6;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo) = a3;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a7, v7 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  return v7;
}

uint64_t NLResponse.requestLanguageVariant.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_MultilingualVariant?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, (uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  v7 = type metadata accessor for Siri_Nlu_External_LanguageVariantResult();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v3, 1, v7) == 1)
  {
    v9 = (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?;
    v10 = (uint64_t)v3;
  }
  else
  {
    v11 = Siri_Nlu_External_LanguageVariantResult.multilingualVariant.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v3, v7);
    v12 = *(_QWORD *)(v11 + 16);
    v13 = type metadata accessor for Siri_Nlu_External_MultilingualVariant();
    v14 = *(_QWORD *)(v13 - 8);
    if (v12)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v6, v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), v13);
      v15 = 0;
    }
    else
    {
      v15 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v6, v15, 1, v13);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v6, 1, v13) != 1)
    {
      v16 = Siri_Nlu_External_MultilingualVariant.languageVariantName.getter();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v13);
      return v16;
    }
    v9 = &demangling cache variable for type metadata for Siri_Nlu_External_MultilingualVariant?;
    v10 = (uint64_t)v6;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v10, v9);
  return 0;
}

uint64_t NLResponse.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode;
  v2 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  return v0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NLResponse()
{
  return NLResponse.debugDescription.getter();
}

uint64_t ConversationUserInput.resultCandidateId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void *ConversationUserInput.speechPackage.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 32);
  v2 = v1;
  return v1;
}

uint64_t ConversationUserInput.nlResponse.getter()
{
  return swift_retain();
}

uint64_t ConversationUserInput.mitigationDecision.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_mitigationDecision, a1, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
}

void *ConversationUserInput.userSpecificInfo.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfo);
  v2 = v1;
  return v1;
}

uint64_t ConversationUserInput.executionOverrideContext.getter()
{
  return swift_retain();
}

uint64_t ConversationUserInput.utterance.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance);
}

uint64_t ConversationUserInput.asrLocation.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA80A0], a1);
}

uint64_t ConversationUserInput.nlLocation.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_nlLocation, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA80A0], a1);
}

uint64_t static PommesInfo.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static PommesInfo.supportsSecureCoding;
}

uint64_t static PommesInfo.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static PommesInfo.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static PommesInfo.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

void *PommesInfo.pommesResponse.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t PommesInfo.pommesError.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, a1, &demangling cache variable for type metadata for PommesError?);
}

uint64_t PommesInfo.pommesSearchReason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, a1, &demangling cache variable for type metadata for PommesSearchReason?);
}

uint64_t PommesInfo.init(pommesResponse:pommesError:pommesSearchReason:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a2, v3 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, &demangling cache variable for type metadata for PommesError?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a3, v3 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, &demangling cache variable for type metadata for PommesSearchReason?);
  return v3;
}

uint64_t PommesInfo.deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, &demangling cache variable for type metadata for PommesError?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, &demangling cache variable for type metadata for PommesSearchReason?);
  return v0;
}

uint64_t ObjC metadata update function for NLResponse()
{
  return type metadata accessor for NLResponse(0);
}

void type metadata completion function for NLResponse()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?, (void (*)(uint64_t))MEMORY[0x1E0D9F8A8]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for ServerFallbackReason?, (void (*)(uint64_t))MEMORY[0x1E0D9ED60]);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for NLResponse()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NLResponse.__allocating_init(nlParses:nlResponseStatusCode:pommesInfo:languageVariantResult:responseVariantResult:serverFallbackReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t ObjC metadata update function for ConversationUserInput()
{
  return type metadata accessor for ConversationUserInput(0);
}

void type metadata completion function for ConversationUserInput()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for TTResponseMessage.MitigationDecision?, (void (*)(uint64_t))MEMORY[0x1E0D9C978]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for ExecutionLocation();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ConversationUserInput()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ConversationUserInput.__allocating_init(resultCandidateId:speechPackage:nlResponse:mitigationDecision:userSpecificInfo:utterance:asrLocation:nlLocation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t ObjC metadata update function for PommesInfo()
{
  return type metadata accessor for PommesInfo(0);
}

void type metadata completion function for PommesInfo()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Input?(319, &lazy cache variable for type metadata for PommesError?, (void (*)(uint64_t))MEMORY[0x1E0D9E848]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for PommesSearchReason?, (void (*)(uint64_t))MEMORY[0x1E0D98930]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for PommesInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesInfo.__allocating_init(pommesResponse:pommesError:pommesSearchReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t getEnumTagSinglePayload for NLResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NLResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B4D909A0 + 4 * byte_1B4EE88CB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B4D909D4 + 4 * byte_1B4EE88C6[v4]))();
}

uint64_t sub_1B4D909D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4D909DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4D909E4);
  return result;
}

uint64_t sub_1B4D909F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4D909F8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B4D909FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4D90A04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NLResponse.CodingKeys()
{
  return &unk_1E68481B0;
}

unint64_t lazy protocol witness table accessor for type NLResponse.CodingKeys and conformance NLResponse.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NLResponse.CodingKeys and conformance NLResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type NLResponse.CodingKeys and conformance NLResponse.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for NLResponse.CodingKeys, &unk_1E68481B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NLResponse.CodingKeys and conformance NLResponse.CodingKeys);
  }
  return result;
}

unint64_t specialized NLResponse.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NLResponse.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t CorrectionsEngine.getCorrectionFlow(pluginId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;

  v5 = v4;
  v10 = type metadata accessor for SiriCorrectionsFlow();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v11 = ResponseFactory.init()();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  static SiriKitEventSender.current.getter();
  *(_QWORD *)&v14 = specialized SiriCorrectionsFlow.__allocating_init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(a1, a2, v11, &v14, v5, &v13, v10, a3, a4);
  lazy protocol witness table accessor for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow();
  Flow.toActingFlow()();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow;
  if (!lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow)
  {
    v1 = type metadata accessor for SiriCorrectionsFlow();
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SiriCorrectionsFlow, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow);
  }
  return result;
}

uint64_t sub_1B4D90BDC()
{
  return get_witness_table_14SiriKitRuntime17CorrectionsEngineRzlqd__0aB4Flow06ActingF0HD2_AC0F0PACE02togF0QryFQOyAA0adF0C_Qo_HOTm();
}

uint64_t sub_1B4D90BE4()
{
  return get_witness_table_14SiriKitRuntime17CorrectionsEngineRzlqd__0aB4Flow06ActingF0HD2_AC0F0PACE02togF0QryFQOyAA0adF0C_Qo_HOTm();
}

uint64_t get_witness_table_14SiriKitRuntime17CorrectionsEngineRzlqd__0aB4Flow06ActingF0HD2_AC0F0PACE02togF0QryFQOyAA0adF0C_Qo_HOTm()
{
  type metadata accessor for SiriCorrectionsFlow();
  lazy protocol witness table accessor for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow();
  return swift_getOpaqueTypeConformance2();
}

_QWORD *SiriCorrectionsFlow.__allocating_init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, __int128 *a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a5 + 32);
  v15 = __swift_mutable_project_boxed_opaque_existential_1(a5, v13);
  v16 = specialized SiriCorrectionsFlow.__allocating_init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(a1, a2, a3, a4, v15, a6, v6, v13, v14);
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v16;
}

void *SiriCorrectionsConstants.correctionsInvocation.unsafeMutableAddressor()
{
  return &static SiriCorrectionsConstants.correctionsInvocation;
}

uint64_t static SiriCorrectionsFlow.State.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  _QWORD v4[5];
  _BYTE v5[24];
  uint64_t v6;

  outlined init with copy of SiriCorrectionsFlow.State(a1, (uint64_t)v4);
  outlined init with copy of SiriCorrectionsFlow.State(a2, (uint64_t)v5);
  if (!v4[3])
  {
    if (!v6)
      goto LABEL_6;
LABEL_5:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for (SiriCorrectionsFlow.State, SiriCorrectionsFlow.State));
    return 0;
  }
  if (!v6)
    goto LABEL_5;
  outlined destroy of SiriCorrectionsFlow.State((uint64_t)v5);
LABEL_6:
  outlined destroy of SiriCorrectionsFlow.State((uint64_t)v4);
  return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SiriCorrectionsFlow.State(__int128 *a1, __int128 *a2)
{
  _QWORD v4[5];
  _BYTE v5[24];
  uint64_t v6;

  outlined init with copy of SiriCorrectionsFlow.State(a1, (uint64_t)v4);
  outlined init with copy of SiriCorrectionsFlow.State(a2, (uint64_t)v5);
  if (!v4[3])
  {
    if (!v6)
      goto LABEL_6;
LABEL_5:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for (SiriCorrectionsFlow.State, SiriCorrectionsFlow.State));
    return 0;
  }
  if (!v6)
    goto LABEL_5;
  outlined destroy of SiriCorrectionsFlow.State((uint64_t)v5);
LABEL_6:
  outlined destroy of SiriCorrectionsFlow.State((uint64_t)v4);
  return 1;
}

uint64_t SiriCorrectionsFlow.hostPluginId.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriCorrectionsFlow.hostPluginId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriCorrectionsFlow.hostPluginId.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

void *SiriCorrectionsFlow.taskType.unsafeMutableAddressor()
{
  return &static SiriCorrectionsFlow.taskType;
}

uint64_t static SiriCorrectionsFlow.taskType.getter()
{
  return 0x6974636572726F43;
}

void *SiriCorrectionsFlow.eventLogAttribute.unsafeMutableAddressor()
{
  return &static SiriCorrectionsFlow.eventLogAttribute;
}

uint64_t static SiriCorrectionsFlow.eventLogAttribute.getter()
{
  return 0x72726F4369726953;
}

uint64_t SiriCorrectionsFlow.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 *v3;

  v3 = (__int128 *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_state);
  swift_beginAccess();
  return outlined init with copy of SiriCorrectionsFlow.State(v3, a1);
}

uint64_t SiriCorrectionsFlow.state.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_state;
  swift_beginAccess();
  outlined assign with take of SiriCorrectionsFlow.State(a1, v3);
  return swift_endAccess();
}

uint64_t (*SiriCorrectionsFlow.state.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

_QWORD *SiriCorrectionsFlow.init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, __int128 *a6)
{
  _QWORD *v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v13 = *(_QWORD *)(a5 + 24);
  v14 = *(_QWORD *)(a5 + 32);
  v15 = __swift_mutable_project_boxed_opaque_existential_1(a5, v13);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  v19 = specialized SiriCorrectionsFlow.init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(a1, a2, a3, a4, (uint64_t)v17, a6, v6, v13, v14);
  __swift_destroy_boxed_opaque_existential_1(a5);
  return v19;
}

uint64_t SiriCorrectionsFlow.execute(completion:)()
{
  type metadata accessor for SiriCorrectionsFlow();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow, (uint64_t (*)(uint64_t))type metadata accessor for SiriCorrectionsFlow, (uint64_t)&protocol conformance descriptor for SiriCorrectionsFlow);
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t SiriCorrectionsFlow.execute()(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[41] = a1;
  v2[42] = v1;
  v2[43] = *v1;
  v3 = type metadata accessor for PluginAction();
  v2[44] = v3;
  v2[45] = *(_QWORD *)(v3 - 8);
  v2[46] = swift_task_alloc();
  v4 = type metadata accessor for CorrectionsExitValue();
  v2[47] = v4;
  v2[48] = *(_QWORD *)(v4 - 8);
  v2[49] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAction?);
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v5 = type metadata accessor for ActivityType();
  v2[54] = v5;
  v2[55] = *(_QWORD *)(v5 - 8);
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SiriCorrectionsFlow.execute()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  void (*v69)(uint64_t, _QWORD, uint64_t);
  _QWORD *v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _OWORD v78[2];
  uint64_t v79;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 336);
  v2 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 464) = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  (*(void (**)(void))(*(_QWORD *)v1 + 216))();
  if (*(_QWORD *)(v0 + 136))
  {
    v4 = *(_QWORD *)(v0 + 384);
    v3 = *(_QWORD *)(v0 + 392);
    v5 = *(_QWORD *)(v0 + 376);
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 112), v0 + 152);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 176));
    dispatch thunk of CorrectingFlow.correctionsExitValue.getter();
    SiriCorrectionsFlow.logExecutedCorrectionsFlow(exitValue:)(v3);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    __swift_destroy_boxed_opaque_existential_1(v0 + 152);
LABEL_14:
    v34 = *(_QWORD *)(v0 + 400);
    v35 = *(_QWORD *)(v0 + 352);
    v36 = *(_QWORD *)(v0 + 360);
    v37 = *(_QWORD *)(v0 + 336);
    v79 = 0;
    memset(v78, 0, sizeof(v78));
    (*(void (**)(_OWORD *))(*(_QWORD *)v37 + 224))(v78);
    v38 = v37 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
    swift_beginAccess();
    outlined init with copy of ReferenceResolutionClientProtocol?(v38, v34, &demangling cache variable for type metadata for PluginAction?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 400), &demangling cache variable for type metadata for PluginAction?);
      static ExecuteResponse.complete()();
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 32))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 352));
      v39 = Logger.logObject.getter();
      v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v41 = 0;
        _os_log_impl(&dword_1B4BE6000, v39, v40, "[CorrectionsFlow] sending followup action", v41, 2u);
        MEMORY[0x1B5E44758](v41, -1, -1);
      }
      v43 = *(_QWORD *)(v0 + 360);
      v42 = *(_QWORD *)(v0 + 368);
      v44 = *(_QWORD *)(v0 + 352);

      static ExecuteResponse.redirect(nextPluginAction:)();
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    }
LABEL_19:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v6 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 456);
  v9 = *(_QWORD *)(v0 + 432);
  v8 = *(_QWORD **)(v0 + 440);
  v11 = *(_QWORD *)(v0 + 416);
  v10 = *(_QWORD *)(v0 + 424);
  v12 = *(_QWORD **)(v0 + 336);
  v76 = v12;
  v77 = *(_QWORD *)(v0 + 344);
  v69 = (void (*)(uint64_t, _QWORD, uint64_t))v8[13];
  v69(v7, *MEMORY[0x1E0D9B688], v9);
  v13 = type metadata accessor for SiriKitReliabilityCodes();
  v68 = *(_QWORD *)(v13 - 8);
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 56);
  v73 = v13;
  v72(v10, 1, 1);
  v70 = (_QWORD *)((char *)v12 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender);
  __swift_project_boxed_opaque_existential_1((_QWORD *)((char *)v12 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender), *(_QWORD *)((char *)v12 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 24));
  type metadata accessor for SiriKitEvent();
  v71 = (void (*)(uint64_t, uint64_t, uint64_t))v8[2];
  v71(v6, v7, v9);
  outlined init with copy of ReferenceResolutionClientProtocol?(v10, v11, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v77;
  SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
  dispatch thunk of SiriKitEventSending.send(_:)();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v10, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v15 = (void (*)(uint64_t, uint64_t))v8[1];
  v15(v7, v9);
  v16 = v12[13];
  v17 = v12[14];
  __swift_project_boxed_opaque_existential_1(v12 + 10, v16);
  LOBYTE(v17) = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  v20 = os_log_type_enabled(v18, v19);
  if ((v17 & 1) == 0)
  {
    if (v20)
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1B4BE6000, v18, v19, "[CorrectionsFlow] nothing to undo in correctionsManager in flow", v27, 2u);
      MEMORY[0x1B5E44758](v27, -1, -1);
    }
    v29 = *(_QWORD *)(v0 + 448);
    v28 = *(_QWORD *)(v0 + 456);
    v31 = *(_QWORD *)(v0 + 424);
    v30 = *(_QWORD *)(v0 + 432);
    v32 = *(_QWORD *)(v0 + 416);
    v74 = *(_QWORD *)(v0 + 344);

    v69(v28, *MEMORY[0x1E0D9B6D0], v30);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v68 + 104))(v31, *MEMORY[0x1E0D9B2C0], v73);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v72)(v31, 0, 1, v73);
    __swift_project_boxed_opaque_existential_1(v70, v70[3]);
    v71(v29, v28, v30);
    outlined init with copy of ReferenceResolutionClientProtocol?(v31, v32, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v33 = (_QWORD *)swift_allocObject();
    v33[2] = 0xD000000000000027;
    v33[3] = 0x80000001B4EFB3C0;
    v33[4] = v74;
    SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
    dispatch thunk of SiriKitEventSending.send(_:)();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v31, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v15(v28, v30);
    goto LABEL_14;
  }
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1B4BE6000, v18, v19, "[CorrectionsFlow] undoing using correctionsManager", v21, 2u);
    MEMORY[0x1B5E44758](v21, -1, -1);
  }

  v22 = v76[13];
  v23 = v76[14];
  __swift_project_boxed_opaque_existential_1(v76 + 10, v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 24))(v22, v23);
  outlined init with copy of UndoResult((uint64_t *)(v0 + 64), v0 + 16);
  if (*(_BYTE *)(v0 + 56))
  {
    if (*(_BYTE *)(v0 + 56) == 1)
    {
      v24 = *(_QWORD *)(v0 + 16);
      *(_QWORD *)(v0 + 472) = v24;
      v25 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 480) = v25;
      *v25 = v0;
      v25[1] = SiriCorrectionsFlow.execute();
      return SiriCorrectionsFlow.execute(undoCommands:)(v24);
    }
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 16), v0 + 192);
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v56 = 0;
      _os_log_impl(&dword_1B4BE6000, v54, v55, "[CorrectionsFlow] Handling registered correcting flow", v56, 2u);
      MEMORY[0x1B5E44758](v56, -1, -1);
    }

    if ((SiriCorrectionsFlow.isSteeringInputAcceptedBy(correctingFlow:)((_QWORD *)(v0 + 192)) & 1) != 0)
    {
      v57 = *(_QWORD *)(v0 + 408);
      v58 = *(_QWORD *)(v0 + 336);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 360) + 56))(v57, 1, 1, *(_QWORD *)(v0 + 352));
      v59 = v58 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
      swift_beginAccess();
      outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v57, v59, &demangling cache variable for type metadata for PluginAction?);
      swift_endAccess();
    }
    v60 = *(_QWORD *)(v0 + 336);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 192, v0 + 232);
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 224))(v0 + 232);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 216));
    static ExecuteResponse.ongoing<A>(next:)();
    outlined destroy of UndoResult(v0 + 64);
    __swift_destroy_boxed_opaque_existential_1(v0 + 192);
    goto LABEL_19;
  }
  v45 = *(void **)(v0 + 16);
  *(_QWORD *)(v0 + 488) = v45;
  v46 = v45;
  v47 = v45;
  v48 = Logger.logObject.getter();
  v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc();
    v51 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v50 = 138412290;
    v52 = v45;
    v53 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 320) = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v51 = v53;

    _os_log_impl(&dword_1B4BE6000, v48, v49, "[CorrectionsFlow] corrections manager returned failure: %@", v50, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v51, -1, -1);
    MEMORY[0x1B5E44758](v50, -1, -1);
  }
  else
  {

  }
  v62 = *(_QWORD *)(v0 + 448);
  v61 = *(_QWORD *)(v0 + 456);
  v64 = *(_QWORD *)(v0 + 424);
  v63 = *(_QWORD *)(v0 + 432);
  v65 = *(_QWORD *)(v0 + 416);
  v75 = *(_QWORD *)(v0 + 344);

  v69(v61, *MEMORY[0x1E0D9B6D0], v63);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v68 + 104))(v64, *MEMORY[0x1E0D9B2C0], v73);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v72)(v64, 0, 1, v73);
  __swift_project_boxed_opaque_existential_1(v70, v70[3]);
  v71(v62, v61, v63);
  outlined init with copy of ReferenceResolutionClientProtocol?(v64, v65, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v66 = (_QWORD *)swift_allocObject();
  v66[2] = 0xD000000000000035;
  v66[3] = 0x80000001B4EFB3F0;
  v66[4] = v75;
  SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
  dispatch thunk of SiriKitEventSending.send(_:)();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v64, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v15(v61, v63);
  v67 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 496) = v67;
  *v67 = v0;
  v67[1] = SiriCorrectionsFlow.execute();
  return SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:)(MEMORY[0x1E0DEE9D8], 1);
}

{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v13[2];
  uint64_t v14;

  outlined destroy of UndoResult(v0 + 64);
  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 336);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  (*(void (**)(_OWORD *))(*(_QWORD *)v4 + 224))(v13);
  v5 = v4 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v5, v1, &demangling cache variable for type metadata for PluginAction?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 400), &demangling cache variable for type metadata for PluginAction?);
    static ExecuteResponse.complete()();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 32))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 352));
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1B4BE6000, v6, v7, "[CorrectionsFlow] sending followup action", v8, 2u);
      MEMORY[0x1B5E44758](v8, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 360);
    v9 = *(_QWORD *)(v0 + 368);
    v11 = *(_QWORD *)(v0 + 352);

    static ExecuteResponse.redirect(nextPluginAction:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v13[2];
  uint64_t v14;

  outlined destroy of UndoResult(v0 + 64);
  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 336);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  (*(void (**)(_OWORD *))(*(_QWORD *)v4 + 224))(v13);
  v5 = v4 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v5, v1, &demangling cache variable for type metadata for PluginAction?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 400), &demangling cache variable for type metadata for PluginAction?);
    static ExecuteResponse.complete()();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 32))(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 352));
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1B4BE6000, v6, v7, "[CorrectionsFlow] sending followup action", v8, 2u);
      MEMORY[0x1B5E44758](v8, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 360);
    v9 = *(_QWORD *)(v0 + 368);
    v11 = *(_QWORD *)(v0 + 352);

    static ExecuteResponse.redirect(nextPluginAction:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SiriCorrectionsFlow.on(input:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  os_log_type_t v61;
  uint8_t *v62;
  unint64_t v63;
  char v64;
  void (*v65)(char *, uint64_t);
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v81;
  uint8_t *v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  unint64_t v105;

  v2 = type metadata accessor for Input();
  v100 = *(_QWORD *)(v2 - 8);
  v101 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v96 = (uint64_t)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v99 = (unint64_t)&v91 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAction?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v95 = (uint64_t)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v97 = (char *)&v91 - v12;
  v13 = type metadata accessor for Parse();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Parse.DirectInvocation();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v91 - v22;
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 88))(v16, v13) != *MEMORY[0x1E0D9C658])
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (one-time initialization token for executor != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
    v44 = v100;
    v43 = v101;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v4, a1, v101);
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      v48 = swift_slowAlloc();
      *(_QWORD *)&v102 = v48;
      *(_DWORD *)v47 = 136315138;
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
      v49 = dispatch thunk of CustomStringConvertible.description.getter();
      v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, (uint64_t *)&v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v4, v43);
      _os_log_impl(&dword_1B4BE6000, v45, v46, "[CorrectionsFlow] declining input %s", v47, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v48, -1, -1);
      MEMORY[0x1B5E44758](v47, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v4, v43);
    }

    return 0;
  }
  (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
  *(_QWORD *)&v102 = Parse.DirectInvocation.identifier.getter();
  *((_QWORD *)&v102 + 1) = v24;
  v104 = 0xD000000000000024;
  v105 = 0x80000001B4EFAF90;
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type String and conformance String();
  v25 = BidirectionalCollection<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  v26 = v23;
  v27 = v18;
  if ((v25 & 1) == 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)static Logger.executor);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, v17);
    v52 = Logger.logObject.getter();
    v53 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = swift_slowAlloc();
      v100 = v17;
      v55 = (uint8_t *)v54;
      v56 = swift_slowAlloc();
      *(_QWORD *)&v102 = v56;
      v101 = (uint64_t)v26;
      *(_DWORD *)v55 = 136315138;
      v57 = Parse.DirectInvocation.identifier.getter();
      v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, (uint64_t *)&v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v59 = *(void (**)(char *, uint64_t))(v18 + 8);
      v60 = v100;
      v59(v21, v100);
      _os_log_impl(&dword_1B4BE6000, v52, v53, "[CorrectionsFlow] CorrectionsFlow declining input. wrong direct invocation identifier %s", v55, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v56, -1, -1);
      MEMORY[0x1B5E44758](v55, -1, -1);

      v59((char *)v101, v60);
    }
    else
    {

      v65 = *(void (**)(char *, uint64_t))(v18 + 8);
      v65(v21, v17);
      v65(v26, v17);
    }
    return 0;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_1B4BE6000, v29, v30, "[CorrectionsFlow] CorrectionsFlow accepting input", v31, 2u);
    MEMORY[0x1B5E44758](v31, -1, -1);
  }

  v32 = Parse.DirectInvocation.userData.getter();
  if (!v32)
    goto LABEL_38;
  v33 = v32;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  v34 = PropertyListDecoder.init()();
  if (*(_QWORD *)(v33 + 16)
    && (v35 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000030, 0x80000001B4EFB320), (v36 & 1) != 0)
    && (outlined init with copy of Any(*(_QWORD *)(v33 + 56) + 32 * v35, (uint64_t)&v102), (swift_dynamicCast() & 1) != 0))
  {
    v37 = v34;
    v39 = v104;
    v38 = v105;
    v40 = type metadata accessor for PluginAction();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B770], MEMORY[0x1E0D9B780]);
    v41 = v97;
    v92 = v39;
    v93 = v38;
    v94 = v37;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v41, 0, 1, v40);
    v84 = (uint64_t)v41;
    v85 = v95;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v84, v95, &demangling cache variable for type metadata for PluginAction?);
    v86 = v98 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v85, v86, &demangling cache variable for type metadata for PluginAction?);
    swift_endAccess();
    v87 = Logger.logObject.getter();
    v88 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v87, v88))
    {
      v90 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v90 = 0;
      _os_log_impl(&dword_1B4BE6000, v87, v88, "[CorrectionsFlow] Followup PluginAction available.", v90, 2u);
      MEMORY[0x1B5E44758](v90, -1, -1);
    }
    outlined consume of Data._Representation(v92, v93);
    v34 = v94;
  }
  else
  {
    v87 = Logger.logObject.getter();
    v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v87, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v62 = 0;
      _os_log_impl(&dword_1B4BE6000, v87, v61, "[CorrectionsFlow] No followup plugin action.", v62, 2u);
      MEMORY[0x1B5E44758](v62, -1, -1);
    }
  }

  if (*(_QWORD *)(v33 + 16)
    && (v63 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002BLL, 0x80000001B4EFB360), (v64 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v33 + 56) + 32 * v63, (uint64_t)&v102);
  }
  else
  {
    v102 = 0u;
    v103 = 0u;
  }
  v67 = v99;
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v103 + 1))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v102, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_34;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_34:
    v71 = Logger.logObject.getter();
    v72 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v71, v72))
    {
      v73 = v17;
      v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v74 = 0;
      _os_log_impl(&dword_1B4BE6000, v71, v72, "[CorrectionsFlow] No steering input in user data.", v74, 2u);
      v75 = v74;
      v17 = v73;
      MEMORY[0x1B5E44758](v75, -1, -1);
    }

    goto LABEL_37;
  }
  v69 = v104;
  v68 = v105;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A0]);
  v70 = v101;
  v99 = v68;
  v94 = v34;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v100 + 56))(v67, 0, 1, v70);
  v76 = v96;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v67, v96, &demangling cache variable for type metadata for Input?);
  v77 = v98 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_steeringInput;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v76, v77, &demangling cache variable for type metadata for Input?);
  swift_endAccess();
  v78 = Logger.logObject.getter();
  v79 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v78, v79))
  {
    v81 = v17;
    v82 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v82 = 0;
    _os_log_impl(&dword_1B4BE6000, v78, v79, "[CorrectionsFlow] Steering input available.", v82, 2u);
    v83 = v82;
    v17 = v81;
    MEMORY[0x1B5E44758](v83, -1, -1);
  }
  outlined consume of Data._Representation(v69, v99);

LABEL_37:
  swift_release();
LABEL_38:
  (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v17);
  return 1;
}

void *SiriCorrectionsConstants.correctionsPluginKey.unsafeMutableAddressor()
{
  return &static SiriCorrectionsConstants.correctionsPluginKey;
}

void *SiriCorrectionsConstants.steeringInput.unsafeMutableAddressor()
{
  return &static SiriCorrectionsConstants.steeringInput;
}

uint64_t SiriCorrectionsFlow.isSteeringInputAcceptedBy(correctingFlow:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  char *v37;
  char v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;

  v2 = v1;
  v51 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Input();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v49 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v50 = (char *)&v49 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAction?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PluginAction();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v18, (uint64_t)v13, &demangling cache variable for type metadata for PluginAction?);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v52 = v14;
  if (v19(v13, 1, v14) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for PluginAction?);
    v20 = v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_steeringInput;
    swift_beginAccess();
    outlined init with copy of ReferenceResolutionClientProtocol?(v20, (uint64_t)v5, &demangling cache variable for type metadata for Input?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for Input?);
LABEL_34:
      if (one-time initialization token for executor != -1)
        swift_once();
      v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)static Logger.executor);
      v46 = Logger.logObject.getter();
      v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v48 = 0;
        _os_log_impl(&dword_1B4BE6000, v46, v47, "[CorrectionsFlow] No steering input.", v48, 2u);
        MEMORY[0x1B5E44758](v48, -1, -1);
      }

      return 0;
    }
    v32 = v49;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v49, v5, v6);
    __swift_project_boxed_opaque_existential_1(v51, v51[3]);
    if ((dispatch thunk of CorrectingFlow.on(correction:)() & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v32, v6);
      goto LABEL_34;
    }
    if (one-time initialization token for executor != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.executor);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1B4BE6000, v34, v35, "[CorrectionsFlow] flow handles steering with original input.", v36, 2u);
      MEMORY[0x1B5E44758](v36, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v32, v6);
    return 1;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v52);
  v21 = PluginAction.flowHandlerId.getter();
  v23 = v22;
  if (v21 == (*(uint64_t (**)(void))(*(_QWORD *)v2 + 144))() && v23 == v24)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
      v28 = Logger.logObject.getter();
      v29 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v28, v29))
        goto LABEL_32;
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      v31 = "[CorrectionsFlow] Will not pass steering input because we have cross plugin followup.";
      goto LABEL_31;
    }
  }
  __swift_project_boxed_opaque_existential_1(v51, v51[3]);
  v37 = v50;
  PluginAction.input.getter();
  v38 = dispatch thunk of CorrectingFlow.on(correction:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v37, v6);
  if ((v38 & 1) != 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.executor);
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_1B4BE6000, v40, v41, "[CorrectionsFlow] flow handles steering, no need to redirect", v42, 2u);
      MEMORY[0x1B5E44758](v42, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v52);
    return 1;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v44 = type metadata accessor for Logger();
  __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v30 = 0;
    v31 = "[CorrectionsFlow] The correcting flow will not handle the followup.";
LABEL_31:
    _os_log_impl(&dword_1B4BE6000, v28, v29, v31, v30, 2u);
    MEMORY[0x1B5E44758](v30, -1, -1);
  }
LABEL_32:

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v52);
  return 0;
}

uint64_t SiriCorrectionsFlow.execute(undoCommands:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for CorrectionsActionOutcome();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SiriCorrectionsFlow.execute(undoCommands:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v18)(_QWORD, uint64_t, uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[3];
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v6 = 134217984;
    v0[2] = *(_QWORD *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[CorrectionsFlow] corrections undo action returned, count == %ld", v6, 0xCu);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v7 = (_QWORD *)v0[3];
  v8 = v7[2];
  v0[8] = v8;
  if (v8)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    v0[9] = 0;
    v0[10] = v9;
    v10 = v7 + 4;
    v11 = v7[7];
    v12 = v7[8];
    swift_bridgeObjectRetain();
    __swift_project_boxed_opaque_existential_1(v10, v11);
    v18 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v12 + 8) + *(_QWORD *)(v12 + 8));
    v13 = (_QWORD *)swift_task_alloc();
    v0[11] = v13;
    *v13 = v0;
    v13[1] = SiriCorrectionsFlow.execute(undoCommands:);
    return v18(v0[7], v11, v12);
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9D8];
    v0[12] = MEMORY[0x1E0DEE9D8];
    v16 = swift_bridgeObjectRetain();
    SiriCorrectionsFlow.logExecutedCorrectionsActions(outcomes:)(v16);
    swift_bridgeObjectRelease();
    v17 = (_QWORD *)swift_task_alloc();
    v0[13] = v17;
    *v17 = v0;
    v17[1] = SiriCorrectionsFlow.execute(undoCommands:);
    return SiriCorrectionsFlow.produceOutput(from:)(v15);
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v18)(_QWORD, uint64_t, uint64_t);

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v2 = v0[10];
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, v0[10]);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, v2);
  v5 = v0[8];
  v7 = v0[6];
  v6 = v0[7];
  v8 = v0[5];
  v9 = v0[9] + 1;
  *(_QWORD *)(v2 + 16) = v4 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v2+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v4, v6, v8);
  if (v9 == v5)
  {
    swift_bridgeObjectRelease();
    v0[12] = v2;
    v10 = swift_bridgeObjectRetain();
    SiriCorrectionsFlow.logExecutedCorrectionsActions(outcomes:)(v10);
    swift_bridgeObjectRelease();
    v11 = (_QWORD *)swift_task_alloc();
    v0[13] = v11;
    *v11 = v0;
    v11[1] = SiriCorrectionsFlow.execute(undoCommands:);
    return SiriCorrectionsFlow.produceOutput(from:)(v2);
  }
  else
  {
    v13 = v0[9] + 1;
    v0[9] = v13;
    v0[10] = v2;
    v14 = (_QWORD *)(v0[3] + 40 * v13);
    v15 = v14[7];
    v16 = v14[8];
    __swift_project_boxed_opaque_existential_1(v14 + 4, v15);
    v18 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v16 + 8) + *(_QWORD *)(v16 + 8));
    v17 = (_QWORD *)swift_task_alloc();
    v0[11] = v17;
    *v17 = v0;
    v17[1] = SiriCorrectionsFlow.execute(undoCommands:);
    return v18(v0[7], v15, v16);
  }
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in SiriCorrectionsFlow.sendSiriKitEvent(activityType:statusReason:statusReasonDescription:)()
{
  dispatch thunk of SiriKitEvent.SiriKitEventBuilder.attribute.setter();
  swift_bridgeObjectRetain();
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter();
}

uint64_t SiriCorrectionsFlow.logExecutedCorrectionsFlow(exitValue:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  int v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  char *v49;
  uint8_t *v50;
  uint8_t *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;

  v2 = v1;
  v71 = *v2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v63 - v8;
  v10 = type metadata accessor for ActivityType();
  v72 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v63 - v14;
  v16 = type metadata accessor for CorrectionsExitValue();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char **)((char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char **, uint64_t, uint64_t))(v17 + 16))(v19, a1, v16);
  v20 = (*(uint64_t (**)(char **, uint64_t))(v17 + 88))(v19, v16);
  if (v20 == *MEMORY[0x1E0D9BFD8])
  {
    (*(void (**)(char **, uint64_t))(v17 + 96))(v19, v16);
    v21 = *v19;
    v68 = v19[1];
    v69 = v21;
    v22 = v72;
    v23 = v9;
    v24 = v10;
    (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v15, *MEMORY[0x1E0D9B6D0], v10);
    v25 = *MEMORY[0x1E0D9B2C0];
    v26 = type metadata accessor for SiriKitReliabilityCodes();
    v27 = v15;
    v67 = v15;
    v70 = v7;
    v28 = v24;
    v29 = *(_QWORD *)(v26 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 104))(v23, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v23, 0, 1, v26);
    v30 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender);
    v31 = *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 24);
    v66 = v30[4];
    v32 = (uint64_t)v23;
    __swift_project_boxed_opaque_existential_1(v30, v31);
    type metadata accessor for SiriKitEvent();
    v16 = v28;
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v13, v27, v28);
    outlined init with copy of ReferenceResolutionClientProtocol?(v32, (uint64_t)v70, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v33 = (_QWORD *)swift_allocObject();
    v34 = v68;
    v33[2] = v69;
    v33[3] = v34;
    v33[4] = v71;
    swift_bridgeObjectRetain();
    SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
    dispatch thunk of SiriKitEventSending.send(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v32, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v35 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
    v36 = v67;
  }
  else
  {
    v69 = v13;
    if (v20 == *MEMORY[0x1E0D9BFE0])
    {
      v37 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v15, *MEMORY[0x1E0D9B6E8], v10);
      v38 = type metadata accessor for SiriKitReliabilityCodes();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v9, 1, 1, v38);
      v39 = *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 24);
      v70 = *(char **)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 32);
      __swift_project_boxed_opaque_existential_1((uint64_t *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender), v39);
      type metadata accessor for SiriKitEvent();
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v69, v15, v10);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      v40 = (_QWORD *)swift_allocObject();
      v40[2] = 0;
      v40[3] = 0;
      v40[4] = v71;
      SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
      dispatch thunk of SiriKitEventSending.send(_:)();
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v15, v10);
    }
    if (v20 == *MEMORY[0x1E0D9BFD0])
    {
      v42 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v15, *MEMORY[0x1E0D9B6E8], v10);
      v43 = type metadata accessor for SiriKitReliabilityCodes();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v9, 1, 1, v43);
      v44 = *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 24);
      v70 = *(char **)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 32);
      __swift_project_boxed_opaque_existential_1((uint64_t *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender), v44);
      type metadata accessor for SiriKitEvent();
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v69, v15, v10);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      v45 = (_QWORD *)swift_allocObject();
      v45[2] = 0xD000000000000011;
      v45[3] = 0x80000001B4EFB550;
      v45[4] = v71;
      SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
      dispatch thunk of SiriKitEventSending.send(_:)();
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v15, v10);
    }
    v68 = v9;
    if (one-time initialization token for executor != -1)
      swift_once();
    v70 = v7;
    v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.executor);
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = v15;
      v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v50 = 0;
      _os_log_impl(&dword_1B4BE6000, v47, v48, "[CorrectionsFlow] unexpected correctionsExitValue.", v50, 2u);
      v51 = v50;
      v15 = v49;
      MEMORY[0x1B5E44758](v51, -1, -1);
    }

    v52 = *MEMORY[0x1E0D9B6D0];
    v53 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 104);
    v54 = v72;
    v64 = v10;
    v53(v15, v52, v10);
    v55 = *MEMORY[0x1E0D9B2C0];
    v56 = type metadata accessor for SiriKitReliabilityCodes();
    v57 = *(_QWORD *)(v56 - 8);
    v58 = (uint64_t)v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 104))(v68, v55, v56);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v56);
    v59 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender);
    v60 = *(uint64_t *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 24);
    v66 = v59[4];
    v65 = __swift_project_boxed_opaque_existential_1(v59, v60);
    type metadata accessor for SiriKitEvent();
    v61 = v64;
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v69, v15, v64);
    outlined init with copy of ReferenceResolutionClientProtocol?(v58, (uint64_t)v70, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v62 = (_QWORD *)swift_allocObject();
    v62[2] = 0xD00000000000002BLL;
    v62[3] = 0x80000001B4EFB520;
    v62[4] = v71;
    SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
    dispatch thunk of SiriKitEventSending.send(_:)();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v58, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v15, v61);
    v35 = *(uint64_t (**)(char *, uint64_t))(v17 + 8);
    v36 = (char *)v19;
  }
  return v35(v36, v16);
}

uint64_t SiriCorrectionsFlow.logExecutedCorrectionsActions(outcomes:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD, _QWORD, _QWORD);
  int v27;
  void (*v28)(char *, uint64_t);
  int v29;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, _QWORD, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  int v67;
  void (*v68)(_QWORD, _QWORD, _QWORD);
  uint64_t v69;
  unint64_t v70;
  int v71;
  char *v72;
  uint64_t v73;

  v2 = v1;
  v4 = *v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v61 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v66 = (uint64_t)&v56 - v8;
  v9 = type metadata accessor for ActivityType();
  v64 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v60 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v63 = (char *)&v56 - v12;
  v13 = type metadata accessor for CorrectionsActionOutcome();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v72 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v56 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v56 - v20;
  v22 = MEMORY[0x1E0DEE9D8];
  v73 = MEMORY[0x1E0DEE9D8];
  v23 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v62 = v4;
  v65 = v2;
  v58 = v23;
  v59 = a1;
  if (v23)
  {
    v57 = v9;
    v24 = *(_QWORD *)(v14 + 72);
    v70 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v25 = a1 + v70;
    v26 = *(void (**)(_QWORD, _QWORD, _QWORD))(v14 + 16);
    v27 = *MEMORY[0x1E0D9C280];
    v71 = *MEMORY[0x1E0D9C270];
    v68 = v26;
    v69 = v24;
    v67 = v27;
    v26(v21, v25, v13);
    while (1)
    {
      v26(v19, v21, v13);
      v29 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v19, v13);
      if (v29 == v27 || v29 == v71)
      {
        (*(void (**)(char *, uint64_t))(v14 + 96))(v19, v13);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, &demangling cache variable for type metadata for Output?);
        v31 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
        v31(v72, v21, v13);
        v32 = v73;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1);
          v32 = v73;
        }
        v34 = *(_QWORD *)(v32 + 16);
        v33 = *(_QWORD *)(v32 + 24);
        if (v34 >= v33 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
          v32 = v73;
        }
        *(_QWORD *)(v32 + 16) = v34 + 1;
        v35 = v32 + v70 + v34 * v69;
        v24 = v69;
        v31((char *)v35, v72, v13);
        v73 = v32;
        v26 = v68;
        v27 = v67;
      }
      else
      {
        v28 = *(void (**)(char *, uint64_t))(v14 + 8);
        v28(v19, v13);
        v28(v21, v13);
      }
      v25 += v24;
      if (!--v23)
        break;
      v26(v21, v25, v13);
    }
    v22 = v73;
    v9 = v57;
    v36 = v65;
  }
  else
  {
    v36 = v2;
  }
  swift_bridgeObjectRelease();
  v37 = *(_QWORD *)(v22 + 16);
  swift_release();
  v39 = v63;
  v38 = v64;
  if (one-time initialization token for executor != -1)
    swift_once();
  v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain();
  v41 = Logger.logObject.getter();
  v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = swift_slowAlloc();
    *(_DWORD *)v43 = 134218240;
    v73 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 12) = 2048;
    v44 = v58;
    v73 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v41, v42, "[CorrectionsFlow] %ld out of %ld corrections actions report success.", (uint8_t *)v43, 0x16u);
    v45 = v43;
    v36 = v65;
    MEMORY[0x1B5E44758](v45, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    v44 = v58;
  }

  v46 = *(void (**)(char *, _QWORD, uint64_t))(v38 + 104);
  if (v37 == v44)
  {
    v46(v39, *MEMORY[0x1E0D9B6E8], v9);
    v47 = type metadata accessor for SiriKitReliabilityCodes();
    v48 = v66;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v66, 1, 1, v47);
    __swift_project_boxed_opaque_existential_1((_QWORD *)((char *)v36 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender), *(_QWORD *)((char *)v36 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 24));
    type metadata accessor for SiriKitEvent();
    v49 = v9;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v60, v39, v9);
    outlined init with copy of ReferenceResolutionClientProtocol?(v48, v61, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v50 = (_QWORD *)swift_allocObject();
    v50[2] = 0;
    v50[3] = 0;
  }
  else
  {
    v46(v39, *MEMORY[0x1E0D9B6D0], v9);
    v51 = *MEMORY[0x1E0D9B2C0];
    v52 = type metadata accessor for SiriKitReliabilityCodes();
    v53 = *(_QWORD *)(v52 - 8);
    v54 = v66;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 104))(v66, v51, v52);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v52);
    __swift_project_boxed_opaque_existential_1((_QWORD *)((char *)v36 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender), *(_QWORD *)((char *)v36 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 24));
    type metadata accessor for SiriKitEvent();
    v49 = v9;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v60, v39, v9);
    outlined init with copy of ReferenceResolutionClientProtocol?(v54, v61, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v50 = (_QWORD *)swift_allocObject();
    v50[2] = 0xD000000000000022;
    v50[3] = 0x80000001B4EFB4F0;
  }
  v50[4] = v62;
  SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
  dispatch thunk of SiriKitEventSending.send(_:)();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v66, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v39, v49);
}

uint64_t SiriCorrectionsFlow.produceOutput(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[62] = a1;
  v2[63] = v1;
  v3 = type metadata accessor for CorrectionsActionOutcome();
  v2[64] = v3;
  v2[65] = *(_QWORD *)(v3 - 8);
  v2[66] = swift_task_alloc();
  v2[67] = swift_task_alloc();
  v2[68] = swift_task_alloc();
  v2[69] = swift_task_alloc();
  return swift_task_switch();
}

void SiriCorrectionsFlow.produceOutput(from:)()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD, _QWORD, _QWORD);
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  __int128 *v68;
  __int128 *v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  __int128 *v80;
  uint64_t v81;
  __int128 *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  void (*v86)(_QWORD, _QWORD, _QWORD);
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89[2];

  v1 = *((_QWORD *)v0 + 62);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v68 = v0 + 6;
    v69 = (__int128 *)((char *)v0 + 136);
    v70 = (uint64_t)v0 + 56;
    v3 = v0 + 11;
    v71 = (uint64_t)(v0 + 1);
    v72 = v0 + 16;
    v76 = (__int128 *)((char *)v0 + 296);
    v77 = (uint64_t)v0 + 216;
    v4 = (uint64_t)(v0 + 21);
    v83 = (uint64_t)v0 + 376;
    v80 = v0 + 26;
    v82 = (__int128 *)((char *)v0 + 456);
    v74 = *((_QWORD *)v0 + 68);
    v5 = *((_QWORD *)v0 + 65);
    v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v84 = *(_QWORD *)(v5 + 72);
    v88 = v5;
    v7 = *(void (**)(_QWORD, _QWORD, _QWORD))(v5 + 16);
    v85 = *MEMORY[0x1E0D9C280];
    v79 = *MEMORY[0x1E0D9C278];
    v73 = *MEMORY[0x1E0D9C270];
    swift_bridgeObjectRetain();
    v75 = 0;
    v81 = 0;
    v87 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v78 = (uint64_t)(v0 + 11);
    v86 = v7;
    while (1)
    {
      v12 = *((_QWORD *)v0 + 69);
      v13 = *((_QWORD *)v0 + 68);
      v14 = *((_QWORD *)v0 + 64);
      v7(v12, v6, v14);
      v7(v13, v12, v14);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 88))(v13, v14);
      if (v15 == v85)
      {
        v16 = *((_QWORD *)v0 + 68);
        (*(void (**)(uint64_t, _QWORD))(v88 + 96))(v16, *((_QWORD *)v0 + 64));
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v16, v4, &demangling cache variable for type metadata for Output?);
        outlined init with copy of ReferenceResolutionClientProtocol?(v4, (uint64_t)v80, &demangling cache variable for type metadata for Output?);
        if (*((_QWORD *)v0 + 55))
        {
          outlined init with take of ReferenceResolutionClientProtocol(v80, v83);
          outlined init with copy of ReferenceResolutionClientProtocol(v83, (uint64_t)v82);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v17 = v87;
          else
            v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v87[2] + 1, 1, v87);
          v7 = v86;
          v19 = v17[2];
          v18 = v17[3];
          if (v19 >= v18 >> 1)
            v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
          v20 = *((_QWORD *)v0 + 69);
          v21 = *((_QWORD *)v0 + 64);
          v17[2] = v19 + 1;
          v87 = v17;
          outlined init with take of ReferenceResolutionClientProtocol(v82, (uint64_t)&v17[5 * v19 + 4]);
          __swift_destroy_boxed_opaque_existential_1(v83);
          v4 = (uint64_t)(v0 + 21);
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 21), &demangling cache variable for type metadata for Output?);
          (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v20, v21);
          goto LABEL_6;
        }
        v39 = *((_QWORD *)v0 + 69);
        v40 = *((_QWORD *)v0 + 64);
        outlined destroy of ReferenceResolutionClientProtocol?(v4, &demangling cache variable for type metadata for Output?);
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v39, v40);
        v41 = (uint64_t)(v0 + 26);
      }
      else
      {
        if (v15 == v79)
        {
          v22 = *((_QWORD *)v0 + 68);
          (*(void (**)(uint64_t, _QWORD))(v88 + 96))(v22, *((_QWORD *)v0 + 64));
          v23 = (uint64_t)v3;
          v25 = *(_QWORD *)(v74 + 40);
          v24 = *(_QWORD *)(v74 + 48);
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v22, v23, &demangling cache variable for type metadata for Output?);
          if (one-time initialization token for executor != -1)
            swift_once();
          v26 = type metadata accessor for Logger();
          __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
          swift_bridgeObjectRetain();
          v27 = Logger.logObject.getter();
          v28 = static os_log_type_t.debug.getter();
          v7 = v86;
          if (os_log_type_enabled(v27, v28))
          {
            v29 = swift_slowAlloc();
            v30 = swift_slowAlloc();
            v89[0] = v30;
            *(_DWORD *)v29 = 136315138;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v29 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, v89);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1B4BE6000, v27, v28, "[CorrectionsFlow] failure reason: %s", (uint8_t *)v29, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v30, -1, -1);
            v31 = v29;
            v4 = (uint64_t)(v0 + 21);
            MEMORY[0x1B5E44758](v31, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }

          v3 = v0 + 11;
          if (__OFADD__(v81, 1))
          {
            __break(1u);
LABEL_54:
            __break(1u);
            return;
          }
          ++v81;
          outlined init with copy of ReferenceResolutionClientProtocol?(v78, (uint64_t)v72, &demangling cache variable for type metadata for Output?);
          if (!*((_QWORD *)v0 + 35))
          {
            v60 = *((_QWORD *)v0 + 69);
            v61 = *((_QWORD *)v0 + 64);
            outlined destroy of ReferenceResolutionClientProtocol?(v78, &demangling cache variable for type metadata for Output?);
            (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v60, v61);
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v72, &demangling cache variable for type metadata for Output?);
            goto LABEL_6;
          }
          outlined init with take of ReferenceResolutionClientProtocol(v72, v77);
          outlined init with copy of ReferenceResolutionClientProtocol(v77, (uint64_t)v76);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v42 = v87;
          else
            v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v87[2] + 1, 1, v87);
          v44 = v42[2];
          v43 = v42[3];
          if (v44 >= v43 >> 1)
            v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v44 + 1, 1, v42);
          v36 = *((_QWORD *)v0 + 69);
          v37 = *((_QWORD *)v0 + 64);
          v42[2] = v44 + 1;
          v87 = v42;
          outlined init with take of ReferenceResolutionClientProtocol(v76, (uint64_t)&v42[5 * v44 + 4]);
          __swift_destroy_boxed_opaque_existential_1(v77);
          v38 = (uint64_t)(v0 + 11);
          goto LABEL_37;
        }
        if (v15 != v73)
        {
          if (one-time initialization token for executor != -1)
            swift_once();
          v45 = *((_QWORD *)v0 + 69);
          v46 = *((_QWORD *)v0 + 67);
          v47 = *((_QWORD *)v0 + 64);
          v48 = type metadata accessor for Logger();
          __swift_project_value_buffer(v48, (uint64_t)static Logger.executor);
          v86(v46, v45, v47);
          v49 = Logger.logObject.getter();
          v50 = static os_log_type_t.debug.getter();
          v51 = os_log_type_enabled(v49, v50);
          v52 = *((_QWORD *)v0 + 69);
          v53 = *((_QWORD *)v0 + 67);
          if (v51)
          {
            v54 = *((_QWORD *)v0 + 66);
            v55 = *((_QWORD *)v0 + 64);
            v67 = *((_QWORD *)v0 + 69);
            v56 = swift_slowAlloc();
            v57 = swift_slowAlloc();
            v89[0] = v57;
            *(_DWORD *)v56 = 136315138;
            v86(v54, v53, v55);
            v58 = String.init<A>(describing:)();
            *(_QWORD *)(v56 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v89);
            swift_bridgeObjectRelease();
            v9 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
            v9(v53, v55);
            _os_log_impl(&dword_1B4BE6000, v49, v50, "[CorrectionsFlow] unknown outcome %s", (uint8_t *)v56, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v57, -1, -1);
            MEMORY[0x1B5E44758](v56, -1, -1);

            v10 = v67;
            v11 = v55;
            v3 = v0 + 11;
          }
          else
          {
            v8 = *((_QWORD *)v0 + 64);

            v9 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
            v9(v53, v8);
            v10 = v52;
            v11 = v8;
          }
          v9(v10, v11);
          v4 = (uint64_t)(v0 + 21);
          v9(*((_QWORD *)v0 + 68), *((_QWORD *)v0 + 64));
          goto LABEL_5;
        }
        v32 = *((_QWORD *)v0 + 68);
        (*(void (**)(uint64_t, _QWORD))(v88 + 96))(v32, *((_QWORD *)v0 + 64));
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v32, v71, &demangling cache variable for type metadata for Output?);
        if (__OFADD__(v75, 1))
          goto LABEL_54;
        ++v75;
        outlined init with copy of ReferenceResolutionClientProtocol?(v71, (uint64_t)v68, &demangling cache variable for type metadata for Output?);
        if (*((_QWORD *)v0 + 15))
        {
          outlined init with take of ReferenceResolutionClientProtocol(v68, v70);
          outlined init with copy of ReferenceResolutionClientProtocol(v70, (uint64_t)v69);
          v7 = v86;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            v33 = v87;
          else
            v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v87[2] + 1, 1, v87);
          v35 = v33[2];
          v34 = v33[3];
          if (v35 >= v34 >> 1)
            v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v33);
          v36 = *((_QWORD *)v0 + 69);
          v37 = *((_QWORD *)v0 + 64);
          v33[2] = v35 + 1;
          v87 = v33;
          outlined init with take of ReferenceResolutionClientProtocol(v69, (uint64_t)&v33[5 * v35 + 4]);
          __swift_destroy_boxed_opaque_existential_1(v70);
          v38 = (uint64_t)(v0 + 1);
LABEL_37:
          outlined destroy of ReferenceResolutionClientProtocol?(v38, &demangling cache variable for type metadata for Output?);
          (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v36, v37);
          v4 = (uint64_t)(v0 + 21);
          goto LABEL_6;
        }
        v62 = *((_QWORD *)v0 + 69);
        v63 = *((_QWORD *)v0 + 64);
        outlined destroy of ReferenceResolutionClientProtocol?(v71, &demangling cache variable for type metadata for Output?);
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v62, v63);
        v41 = (uint64_t)(v0 + 6);
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v41, &demangling cache variable for type metadata for Output?);
LABEL_5:
      v7 = v86;
LABEL_6:
      v6 += v84;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        if (v81 <= 0)
          v64 = 2 * (v75 > 0);
        else
          v64 = 1;
        v65 = (uint64_t)v87;
        goto LABEL_52;
      }
    }
  }
  v64 = 0;
  v65 = MEMORY[0x1E0DEE9D8];
LABEL_52:
  *((_QWORD *)v0 + 70) = v65;
  v66 = (_QWORD *)swift_task_alloc();
  *((_QWORD *)v0 + 71) = v66;
  *v66 = v0;
  v66[1] = SiriCorrectionsFlow.produceOutput(from:);
  SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:)(v65, v64);
}

uint64_t SiriCorrectionsFlow.produceOutput(from:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 + 280) = a2;
  *(_QWORD *)(v3 + 104) = a1;
  *(_QWORD *)(v3 + 112) = v2;
  type metadata accessor for DialogPhase();
  *(_QWORD *)(v3 + 120) = swift_task_alloc();
  v4 = type metadata accessor for OutputGenerationManifest();
  *(_QWORD *)(v3 + 128) = v4;
  *(_QWORD *)(v3 + 136) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 144) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0[13] + 16);
  v0[19] = v1;
  if (v1)
  {
    v2 = v0[14];
    v0[32] = 0;
    v3 = (_QWORD *)(v2 + 40);
    v4 = *(_QWORD *)(v2 + 64);
    swift_bridgeObjectRetain();
    __swift_project_boxed_opaque_existential_1(v3, v4);
    v5 = (_QWORD *)swift_task_alloc();
    v0[33] = v5;
    *v5 = v0;
    v5[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
    return dispatch thunk of OutputPublisherAsync.publish(output:)();
  }
  else
  {
    v7 = (_QWORD *)swift_task_alloc();
    v0[20] = v7;
    *v7 = v0;
    v7[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
    return static ResponsePatterns.taskComplete()();
  }
}

{
  uint64_t v0;
  int v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD);

  v1 = *(unsigned __int8 *)(v0 + 280);
  if (v1 == 1)
  {
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v4;
    *v4 = v0;
    v4[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
    return static ResponsePatterns.unsupportedOperation()();
  }
  else if (v1 == 2)
  {
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v2;
    *v2 = v0;
    v2[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
    return static CorrectionsPatterns.unsupportedUndo()();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 168);
    *(_QWORD *)(v0 + 216) = v5;
    static DialogPhase.completion.getter();
    OutputGenerationManifest.init(dialogPhase:_:)();
    v7 = (uint64_t (*)(uint64_t, uint64_t, _QWORD))((int)*MEMORY[0x1E0D9BB98] + MEMORY[0x1E0D9BB98]);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 224) = v6;
    *v6 = v0;
    v6[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
    return v7(v0 + 16, v5, *(_QWORD *)(v0 + 144));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD);

  v1 = *(_QWORD *)(v0 + 64);

  *(_QWORD *)(v0 + 216) = v1;
  static DialogPhase.completion.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  v4 = (uint64_t (*)(uint64_t, uint64_t, _QWORD))((int)*MEMORY[0x1E0D9BB98] + MEMORY[0x1E0D9BB98]);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 224) = v2;
  *v2 = v0;
  v2[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  return v4(v0 + 16, v1, *(_QWORD *)(v0 + 144));
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD);

  v1 = *(_QWORD *)(v0 + 88);

  *(_QWORD *)(v0 + 216) = v1;
  static DialogPhase.completion.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  v4 = (uint64_t (*)(uint64_t, uint64_t, _QWORD))((int)*MEMORY[0x1E0D9BB98] + MEMORY[0x1E0D9BB98]);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 224) = v2;
  *v2 = v0;
  v2[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  return v4(v0 + 16, v1, *(_QWORD *)(v0 + 144));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 112) + 40), *(_QWORD *)(*(_QWORD *)(v0 + 112) + 64));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 240) = v1;
  *v1 = v0;
  v1[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  return dispatch thunk of OutputPublisherAsync.publish(output:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 256) + 1;
  if (v1 == *(_QWORD *)(v0 + 152))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 256) = v1;
    __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 112) + 40), *(_QWORD *)(*(_QWORD *)(v0 + 112) + 64));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 264) = v3;
    *v3 = v0;
    v3[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
    return dispatch thunk of OutputPublisherAsync.publish(output:)();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = *(void **)(v0 + 176);
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[CorrectionsFlow] CorrectionsFlow failed to produce output", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = *(void **)(v0 + 192);
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[CorrectionsFlow] CorrectionsFlow failed to produce output", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = *(void **)(v0 + 208);
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[CorrectionsFlow] CorrectionsFlow failed to produce output", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(void **)(v0 + 232);
  if (one-time initialization token for executor != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1B4BE6000, v6, v7, "[CorrectionsFlow] CorrectionsFlow failed to produce output", v8, 2u);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(void **)(v0 + 248);
  if (one-time initialization token for executor != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1B4BE6000, v6, v7, "[CorrectionsFlow] CorrectionsFlow failed to produce output", v8, 2u);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = *(void **)(v0 + 272);
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[CorrectionsFlow] CorrectionsFlow failed to produce output", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 168) = a1;
  *(_QWORD *)(v3 + 176) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[7] = v2;
  v3[8] = a1;
  v3[9] = v1;
  v3[24] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[10] = v2;
  v3[11] = a1;
  v3[12] = v1;
  v3[26] = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SiriCorrectionsFlow.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction, &demangling cache variable for type metadata for PluginAction?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_steeringInput, &demangling cache variable for type metadata for Input?);
  outlined destroy of SiriCorrectionsFlow.State(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_state);
  return v0;
}

uint64_t SiriCorrectionsFlow.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction, &demangling cache variable for type metadata for PluginAction?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_steeringInput, &demangling cache variable for type metadata for Input?);
  outlined destroy of SiriCorrectionsFlow.State(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_state);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.getter in conformance SiriCorrectionsFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.getter();
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.setter in conformance SiriCorrectionsFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.setter();
}

void (*protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance SiriCorrectionsFlow(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SiriEnvironmentLocating<>.siriEnvironment.modify();
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t protocol witness for Flow.on(input:) in conformance SiriCorrectionsFlow()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 264))() & 1;
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance SiriCorrectionsFlow()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return Flow.onAsync(input:)();
}

uint64_t protocol witness for Flow.execute() in conformance SiriCorrectionsFlow(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(**(_QWORD **)v1 + 256) + *(_QWORD *)(**(_QWORD **)v1 + 256));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance SiriCorrectionsFlow()
{
  type metadata accessor for SiriCorrectionsFlow();
  return Flow<>.exitValue.getter();
}

unint64_t static SiriCorrectionsConstants.correctionsInvocation.getter()
{
  return 0xD000000000000024;
}

unint64_t static SiriCorrectionsConstants.correctionsPluginKey.getter()
{
  return 0xD000000000000030;
}

unint64_t static SiriCorrectionsConstants.steeringInput.getter()
{
  return 0xD00000000000002BLL;
}

_QWORD *specialized SiriCorrectionsFlow.init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, __int128 *a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t *boxed_opaque_existential_1;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  a7[13] = a8;
  a7[14] = a9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a7 + 10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a8 - 8) + 32))(boxed_opaque_existential_1, a5, a8);
  v18 = (char *)a7 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
  v19 = type metadata accessor for PluginAction();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = (char *)a7 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_steeringInput;
  v21 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = (char *)a7 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_state;
  *(_OWORD *)v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  *((_QWORD *)v22 + 4) = 0;
  a7[2] = a1;
  a7[3] = a2;
  a7[4] = a3;
  outlined init with take of ReferenceResolutionClientProtocol(a4, (uint64_t)(a7 + 5));
  outlined init with take of ReferenceResolutionClientProtocol(a6, (uint64_t)a7 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender);
  return a7;
}

_QWORD *specialized SiriCorrectionsFlow.__allocating_init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v20;
  __int128 *v21;

  v21 = a6;
  v15 = *(_QWORD *)(a8 - 8);
  MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SiriCorrectionsFlow();
  v18 = (_QWORD *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a5, a8);
  return specialized SiriCorrectionsFlow.init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(a1, a2, a3, a4, (uint64_t)v17, v21, v18, a8, a9);
}

uint64_t outlined init with copy of SiriCorrectionsFlow.State(__int128 *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v3 = *((_QWORD *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *a1;
    v6 = a1[1];
    *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    v4 = *((_QWORD *)a1 + 4);
    *(_QWORD *)(a2 + 24) = v3;
    *(_QWORD *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  return a2;
}

uint64_t outlined destroy of SiriCorrectionsFlow.State(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t outlined assign with take of SiriCorrectionsFlow.State(__int128 *a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_QWORD *)(a2 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a2);
  v4 = *a1;
  v5 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  return a2;
}

uint64_t type metadata accessor for SiriCorrectionsFlow()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SiriCorrectionsFlow;
  if (!type metadata singleton initialization cache for SiriCorrectionsFlow)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B4D968A4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SiriCorrectionsFlow.sendSiriKitEvent(activityType:statusReason:statusReasonDescription:)()
{
  return closure #1 in SiriCorrectionsFlow.sendSiriKitEvent(activityType:statusReason:statusReasonDescription:)();
}

uint64_t outlined init with copy of UndoResult(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for UndoResult(a2, a1);
  return a2;
}

uint64_t outlined destroy of UndoResult(uint64_t a1)
{
  destroy for UndoResult(a1);
  return a1;
}

uint64_t base witness table accessor for Flow in SiriCorrectionsFlow()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow, (uint64_t (*)(uint64_t))type metadata accessor for SiriCorrectionsFlow, (uint64_t)&protocol conformance descriptor for SiriCorrectionsFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in SiriCorrectionsFlow()
{
  return lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow, (uint64_t (*)(uint64_t))type metadata accessor for SiriCorrectionsFlow, (uint64_t)&protocol conformance descriptor for SiriCorrectionsFlow);
}

uint64_t sub_1B4D9699C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B4D969CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 152);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B4D96A10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 216))();
}

uint64_t sub_1B4D96A38(__int128 *a1, uint64_t a2)
{
  _BYTE v4[40];

  outlined init with copy of SiriCorrectionsFlow.State(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 224))(v4);
}

uint64_t ObjC metadata update function for SiriCorrectionsFlow()
{
  return type metadata accessor for SiriCorrectionsFlow();
}

void type metadata completion function for SiriCorrectionsFlow()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for Input?(319, &lazy cache variable for type metadata for PluginAction?, (void (*)(uint64_t))MEMORY[0x1E0D9B770]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for Input?, (void (*)(uint64_t))MEMORY[0x1E0D9C588]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for SiriCorrectionsFlow()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.hostPluginId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.hostPluginId.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.hostPluginId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.__allocating_init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.execute(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.execute()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 256) + *(_QWORD *)(*(_QWORD *)v1 + 256));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t dispatch thunk of SiriCorrectionsFlow.on(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t destroy for SiriCorrectionsFlow.State(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    return __swift_destroy_boxed_opaque_existential_1(a1);
  return a1;
}

uint64_t initializeWithCopy for SiriCorrectionsFlow.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithCopy for SiriCorrectionsFlow.State(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *((_QWORD *)a2 + 3);
  if (*(_QWORD *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_QWORD *)(a1 + 24) = v4;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      (**(void (***)(uint64_t, __int128 *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for SiriCorrectionsFlow.State(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(_QWORD *)(a1 + 24) >= 0xFFFFFFFFuLL)
    __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriCorrectionsFlow.State(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SiriCorrectionsFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t getEnumTag for SiriCorrectionsFlow.State(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double destructiveInjectEnumTag for SiriCorrectionsFlow.State(uint64_t a1, int a2)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriCorrectionsFlow.State()
{
  return &type metadata for SiriCorrectionsFlow.State;
}

ValueMetadata *type metadata accessor for SiriCorrectionsConstants()
{
  return &type metadata for SiriCorrectionsConstants;
}

uint64_t CorrectionsService.setupNewTurn(executionUUID:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[5];
  v4 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(a1, v3, v4);
}

uint64_t protocol witness for CorrectionsHandling.undoFollowUpPluginActionUserDataKey.getter in conformance CorrectionsPlatformClient()
{
  return CorrectionsPlatformClient.undoFollowUpPluginActionUserDataKey.getter();
}

uint64_t CorrectionsService.__allocating_init(correctionsClient:conversationHandlerLocator:)(__int128 *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(a1, v4 + 16);
  *(_QWORD *)(v4 + 56) = a2;
  return v4;
}

uint64_t CorrectionsService.init(correctionsClient:conversationHandlerLocator:)(__int128 *a1, uint64_t a2)
{
  uint64_t v2;

  outlined init with take of ReferenceResolutionClientProtocol(a1, v2 + 16);
  *(_QWORD *)(v2 + 56) = a2;
  return v2;
}

uint64_t CorrectionsService.generateNewInput(from:originalInput:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  unint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  char *v37;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  _OWORD v48[2];
  __int128 v49;
  uint64_t v50;

  v39 = a2;
  v46 = a1;
  v44 = a3;
  v3 = type metadata accessor for Parse();
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  MEMORY[0x1E0C80A78](v3);
  v41 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Input();
  v40 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v45 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CorrectionsDirectInvocation();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v39 - v16;
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v39 - v18;
  if (one-time initialization token for executor != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1B4BE6000, v21, v22, "[CorrectionsService] Generating new input for undo without followup action", v23, 2u);
    MEMORY[0x1B5E44758](v23, -1, -1);
  }

  UndoAction.directInvocation.getter();
  v24 = CorrectionsDirectInvocation.userData.getter();
  v25 = *(void (**)(char *, uint64_t))(v11 + 8);
  v25(v19, v10);
  if (!v24)
    v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v26 = v8;
  UndoAction.directInvocation.getter();
  v27 = CorrectionsDirectInvocation.identifier.getter();
  v29 = v28;
  v25(v17, v10);
  v30 = v40;
  if (v27 == 0xD000000000000024 && v29 == 0x80000001B4EFAF90)
  {
    swift_bridgeObjectRelease();
    v31 = v45;
  }
  else
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v31 = v45;
    if ((v32 & 1) == 0)
      goto LABEL_14;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v39, (uint64_t)v7, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v7, 1, v26) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Input?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v31, v7, v26);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    lazy protocol witness table accessor for type Input and conformance Input();
    v33 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    v35 = v34;
    swift_release();
    v50 = MEMORY[0x1E0CB0338];
    *(_QWORD *)&v49 = v33;
    *((_QWORD *)&v49 + 1) = v35;
    outlined init with take of Any(&v49, v48);
    outlined copy of Data._Representation(v33, v35);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v47 = v24;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v48, 0xD00000000000002BLL, 0x80000001B4EFB360, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v33, v35);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v45, v26);
  }
LABEL_14:
  UndoAction.directInvocation.getter();
  CorrectionsDirectInvocation.identifier.getter();
  v25(v14, v10);
  v37 = v41;
  Parse.DirectInvocation.init(identifier:userData:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v37, *MEMORY[0x1E0D9C658], v43);
  return Input.init(parse:)();
}

uint64_t CorrectionsService.getCorrectionsAndFollowupAction(input:conversationUserInput:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[15] = a3;
  v4[16] = v3;
  v4[13] = a1;
  v4[14] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v4[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAction?);
  v4[18] = swift_task_alloc();
  v5 = type metadata accessor for PluginAction();
  v4[19] = v5;
  v4[20] = *(_QWORD *)(v5 - 8);
  v4[21] = swift_task_alloc();
  v6 = type metadata accessor for Input();
  v4[22] = v6;
  v4[23] = *(_QWORD *)(v6 - 8);
  v4[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v4[25] = swift_task_alloc();
  v7 = type metadata accessor for Parse();
  v4[26] = v7;
  v4[27] = *(_QWORD *)(v7 - 8);
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  v8 = type metadata accessor for Siri_Nlu_External_Parser();
  v4[30] = v8;
  v4[31] = *(_QWORD *)(v8 - 8);
  v4[32] = swift_task_alloc();
  v9 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v4[33] = v9;
  v4[34] = *(_QWORD *)(v9 - 8);
  v4[35] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  v4[36] = swift_task_alloc();
  v10 = type metadata accessor for Siri_Nlu_External_UserParse();
  v4[37] = v10;
  v4[38] = *(_QWORD *)(v10 - 8);
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UndoAction?);
  v4[41] = swift_task_alloc();
  v11 = type metadata accessor for UndoAction();
  v4[42] = v11;
  v4[43] = *(_QWORD *)(v11 - 8);
  v4[44] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[45] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t CorrectionsService.getCorrectionsAndFollowupAction(input:conversationUserInput:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(_QWORD, uint64_t, uint64_t, _QWORD);
  uint64_t v12;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD, uint64_t, uint64_t);
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 368) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[CorrectionsService] Checking for corrections with maybe a possible followup", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 120);

  CorrectionsService.getUndoAction(_:conversationUserInput:)(v6, v5);
  *(_QWORD *)(v0 + 376) = 0;
  v7 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 328);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    v10 = *(_QWORD *)(v0 + 184);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v9, &demangling cache variable for type metadata for UndoAction?);
    v11 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v10 + 56);
    v12 = 1;
LABEL_7:
    v11(*(_QWORD *)(v0 + 104), v12, 1, *(_QWORD *)(v0 + 176));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v8 + 32))(*(_QWORD *)(v0 + 352), v9, v7);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1B4BE6000, v14, v15, "[CorrectionsService] Detected user requested undo", v16, 2u);
    MEMORY[0x1B5E44758](v16, -1, -1);
  }

  if ((UndoAction.isExclusive.getter() & 1) != 0)
    goto LABEL_16;
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  swift_beginAccess();
  v17 = static SydneyConversationFeatureFlags.forceEnabled;
  if (*(_QWORD *)(static SydneyConversationFeatureFlags.forceEnabled + 16)
    && (v18 = specialized __RawDictionaryStorage.find<A>(_:)(2), (v19 & 1) != 0))
  {
    if (*(_BYTE *)(*(_QWORD *)(v17 + 56) + v18) != 1)
    {
LABEL_16:
      swift_release();
LABEL_17:
      v21 = *(_QWORD *)(v0 + 344);
      v20 = *(_QWORD *)(v0 + 352);
      v22 = *(_QWORD *)(v0 + 336);
      v23 = *(_QWORD *)(v0 + 176);
      v24 = *(_QWORD *)(v0 + 184);
      v25 = *(_QWORD *)(v0 + 136);
      v26 = *(_QWORD *)(v0 + 104);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 16))(v25, *(_QWORD *)(v0 + 112), v23);
      v27 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56);
      v27(v25, 0, 1, v23);
      CorrectionsService.generateNewInput(from:originalInput:)(v20, v25, v26);
      outlined destroy of ReferenceResolutionClientProtocol?(v25, &demangling cache variable for type metadata for Input?);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      v11 = v27;
      v12 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    *(_QWORD *)(v0 + 40) = &type metadata for SydneyConversationFeatureFlags;
    *(_QWORD *)(v0 + 48) = lazy protocol witness table accessor for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags();
    *(_BYTE *)(v0 + 16) = 2;
    v28 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    if ((v28 & 1) == 0)
      goto LABEL_16;
  }
  v29 = *(_QWORD *)(v0 + 296);
  v30 = *(_QWORD *)(v0 + 304);
  v31 = *(_QWORD *)(v0 + 288);
  UndoAction.parseExludingUndoUserDialogActs.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v31, 1, v29) == 1)
  {
    v32 = *(_QWORD *)(v0 + 288);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v32, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    goto LABEL_17;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 304) + 32))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v35 = 0;
    _os_log_impl(&dword_1B4BE6000, v33, v34, "[CorrectionsService] Undo is not exclusive, and we need to try and find followup actions.", v35, 2u);
    MEMORY[0x1B5E44758](v35, -1, -1);
  }
  v36 = *(_QWORD *)(v0 + 320);
  v45 = *(_QWORD *)(v0 + 304);
  v46 = *(_QWORD *)(v0 + 312);
  v37 = *(_QWORD *)(v0 + 272);
  v38 = *(_QWORD *)(v0 + 280);
  v39 = *(_QWORD *)(v0 + 256);
  v47 = *(_QWORD *)(v0 + 296);
  v48 = *(_QWORD *)(v0 + 264);
  v41 = *(_QWORD *)(v0 + 240);
  v40 = *(_QWORD *)(v0 + 248);
  v42 = *(_QWORD *)(v0 + 232);
  v49 = *(_QWORD *)(v0 + 216);
  v43 = *(_QWORD *)(v0 + 200);
  v50 = *(_QWORD *)(v0 + 208);
  v51 = *(_QWORD *)(v0 + 224);

  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v46, v36, v47);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v43, v38, v48);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v43, 0, 1, v48);
  USOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v49 + 104))(v42, *MEMORY[0x1E0D9C678], v50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v51, v42, v50);
  Input.init(parse:)();
  v44 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 384) = v44;
  *v44 = v0;
  v44[1] = CorrectionsService.getCorrectionsAndFollowupAction(input:conversationUserInput:);
  return CorrectionsService.findFollowUpPluginAction(for:)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 192));
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v23)(_QWORD, uint64_t, uint64_t, _QWORD);
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 144), &demangling cache variable for type metadata for PluginAction?);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "[CorrectionsService] No followup plugin action found, returning exclusive undo action", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }
    v52 = *(_QWORD *)(v0 + 296);
    v54 = *(_QWORD *)(v0 + 320);
    v7 = *(_QWORD *)(v0 + 272);
    v48 = *(_QWORD *)(v0 + 280);
    v50 = *(_QWORD *)(v0 + 304);
    v8 = *(_QWORD *)(v0 + 264);
    v9 = *(_QWORD *)(v0 + 232);
    v11 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 216);
    v12 = *(_QWORD *)(v0 + 184);
    v13 = *(_QWORD *)(v0 + 192);
    v14 = *(_QWORD *)(v0 + 176);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v48, v8);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v54, v52);
    v16 = *(_QWORD *)(v0 + 344);
    v15 = *(_QWORD *)(v0 + 352);
    v17 = *(_QWORD *)(v0 + 336);
    v18 = *(_QWORD *)(v0 + 176);
    v19 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 136);
    v21 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 16))(v20, *(_QWORD *)(v0 + 112), v18);
    v22 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56);
    v22(v20, 0, 1, v18);
    CorrectionsService.generateNewInput(from:originalInput:)(v15, v20, v21);
    outlined destroy of ReferenceResolutionClientProtocol?(v20, &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    v23 = v22;
    v24 = 0;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 32))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1B4BE6000, v25, v26, "[CorrectionsService] New followup plugin action found", v27, 2u);
      MEMORY[0x1B5E44758](v27, -1, -1);
    }
    v28 = *(void **)(v0 + 376);
    v29 = *(_QWORD *)(v0 + 352);
    v30 = *(_QWORD *)(v0 + 168);
    v31 = *(_QWORD *)(v0 + 104);

    CorrectionsService.generateNewInputWithFollowupFrom(undoAction:pluginAction:)(v29, v30, v31);
    v32 = v28;
    v53 = *(_QWORD *)(v0 + 336);
    v55 = *(_QWORD *)(v0 + 352);
    v49 = *(_QWORD *)(v0 + 320);
    v51 = *(_QWORD *)(v0 + 344);
    v46 = *(_QWORD *)(v0 + 304);
    v47 = *(_QWORD *)(v0 + 296);
    v43 = *(_QWORD *)(v0 + 272);
    v44 = *(_QWORD *)(v0 + 264);
    v45 = *(_QWORD *)(v0 + 280);
    v33 = *(_QWORD *)(v0 + 232);
    v35 = *(_QWORD *)(v0 + 208);
    v34 = *(_QWORD *)(v0 + 216);
    v36 = *(_QWORD *)(v0 + 184);
    v37 = *(_QWORD *)(v0 + 192);
    v38 = *(_QWORD *)(v0 + 168);
    v39 = *(_QWORD *)(v0 + 176);
    v40 = *(_QWORD *)(v0 + 152);
    v41 = *(_QWORD *)(v0 + 160);
    if (v32)
    {

      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v38, v40);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v39);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v44);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v49, v47);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v55, v53);
      v23 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v36 + 56);
      v24 = 1;
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v41 + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v39);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v44);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v49, v47);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v55, v53);
      v24 = 0;
      v23 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v36 + 56);
    }
  }
  v23(*(_QWORD *)(v0 + 104), v24, 1, *(_QWORD *)(v0 + 176));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CorrectionsService.findFollowUpPluginAction(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  v4 = type metadata accessor for Input();
  v3[20] = v4;
  v3[21] = *(_QWORD *)(v4 - 8);
  v3[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler)?);
  v3[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  v3[24] = swift_task_alloc();
  v5 = type metadata accessor for UUID();
  v3[25] = v5;
  v3[26] = *(_QWORD *)(v5 - 8);
  v3[27] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[28] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t CorrectionsService.findFollowUpPluginAction(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[27];
  v2 = v0[24];
  v0[15] = MEMORY[0x1E0DEE9E0];
  v0[16] = MEMORY[0x1E0DEE9D8];
  UUID.init()();
  Input.parse.getter();
  v3 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 0, 1, v3);
  specialized SimpleOrderedDictionary.subscript.setter(v2, v1);
  v4 = v0[15];
  v5 = v0[16];
  v0[29] = v4;
  v0[30] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  v0[31] = v6;
  *v6 = v0;
  v6[1] = CorrectionsService.findFollowUpPluginAction(for:);
  return ConversationHandlerLocator.allHandlers(for:)(v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 256);
  swift_release();
  v2 = *(_QWORD *)(v1 + 16);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  v4 = *(_QWORD *)(v3 - 8);
  if (v2)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 256)+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), *(_QWORD *)(v0 + 184), &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 184), &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler)?);
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(_QWORD *)(v0 + 88) = 0;
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 184);
    v11 = v10 + *(int *)(v7 + 48);
    outlined init with copy of ReferenceResolutionClientProtocol(v11 + 8, v0 + 56);
    outlined destroy of ConversationHandlerLocator.ScoredHandler(v11);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    if (*(_QWORD *)(v0 + 80))
    {
      v13 = *(_QWORD *)(v0 + 168);
      v12 = *(_QWORD *)(v0 + 176);
      v14 = *(_QWORD *)(v0 + 160);
      v16 = *(_QWORD *)(v0 + 136);
      v15 = *(_QWORD *)(v0 + 144);
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), v0 + 16);
      v17 = *(_QWORD *)(v0 + 40);
      v18 = *(_QWORD *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v17);
      (*(void (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v15, v14);
      PluginAction.init(flowHandlerId:input:)();
      v19 = type metadata accessor for PluginAction();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v16, 0, 1, v19);
      __swift_destroy_boxed_opaque_existential_1(v0 + 16);
      goto LABEL_13;
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ConversationHandler?);
  if (one-time initialization token for executor != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1B4BE6000, v21, v22, "[CorrectionsService] No conversation handler found for followup input, returning nil", v23, 2u);
    MEMORY[0x1B5E44758](v23, -1, -1);
  }
  v24 = *(_QWORD *)(v0 + 136);

  v25 = type metadata accessor for PluginAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CorrectionsService.findFollowUpPluginAction(for:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 256) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t CorrectionsService.generateNewInputWithFollowupFrom(undoAction:pluginAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint8_t *v45;
  uint8_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  void *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char isUniquelyReferenced_nonNull_native;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  unint64_t v130;

  v124 = a1;
  v109 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4);
  v101 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1E0C80A78](v6);
  v100 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1E0C80A78](v8);
  v102 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1E0C80A78](v10);
  v107 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for Siri_Nlu_External_UserParse();
  v110 = *(_QWORD *)(v112 - 8);
  v12 = MEMORY[0x1E0C80A78](v112);
  v106 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v113 = (char *)&v94 - v14;
  v15 = type metadata accessor for Parse();
  v122 = *(_QWORD *)(v15 - 8);
  v123 = v15;
  v16 = MEMORY[0x1E0C80A78](v15);
  v111 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v117 = (char *)&v94 - v18;
  v19 = type metadata accessor for Input();
  v120 = *(_QWORD **)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v103 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v104 = (char *)&v94 - v23;
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v94 - v24;
  v26 = type metadata accessor for USOParse();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v115 = (char *)&v94 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for PluginAction();
  v125 = *(_QWORD *)(v29 - 8);
  v126 = v29;
  v30 = MEMORY[0x1E0C80A78](v29);
  v99 = (char *)&v94 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v94 - v32;
  v121 = type metadata accessor for CorrectionsDirectInvocation();
  v116 = *(_QWORD *)(v121 - 8);
  v34 = MEMORY[0x1E0C80A78](v121);
  v108 = (char *)&v94 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v37 = (char *)&v94 - v36;
  if (one-time initialization token for executor != -1)
    swift_once();
  v114 = v27;
  v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)static Logger.executor);
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = v19;
    v42 = v26;
    v43 = v33;
    v44 = a2;
    v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v45 = 0;
    _os_log_impl(&dword_1B4BE6000, v39, v40, "[CorrectionsService] Generating new input for undo with followup action", v45, 2u);
    v46 = v45;
    a2 = v44;
    v33 = v43;
    v26 = v42;
    v19 = v41;
    MEMORY[0x1B5E44758](v46, -1, -1);
  }

  UndoAction.directInvocation.getter();
  v47 = CorrectionsDirectInvocation.userData.getter();
  v116 = *(_QWORD *)(v116 + 8);
  ((void (*)(char *, uint64_t))v116)(v37, v121);
  if (!v47)
    v47 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v48 = v122;
  v49 = v123;
  (*(void (**)(char *, uint64_t, uint64_t))(v125 + 16))(v33, a2, v126);
  v105 = a2;
  PluginAction.input.getter();
  v50 = v117;
  Input.parse.getter();
  v51 = (void (*)(char *, uint64_t))v120[1];
  v51(v25, v19);
  v52 = (*(uint64_t (**)(char *, uint64_t))(v48 + 88))(v50, v49);
  if ((_DWORD)v52 != *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v49);
    goto LABEL_18;
  }
  v53 = v52;
  v96 = v51;
  v98 = v47;
  v97 = v19;
  (*(void (**)(char *, uint64_t))(v48 + 96))(v50, v49);
  v54 = v50;
  v55 = v114;
  v56 = v115;
  (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v115, v54, v26);
  v57 = v113;
  v58 = USOParse.userParse.getter();
  v59 = MEMORY[0x1B5E3FA6C](v58);
  v60 = v110;
  v61 = v112;
  v117 = *(char **)(v110 + 8);
  ((void (*)(char *, uint64_t))v117)(v57, v112);
  v62 = *(_QWORD *)(v59 + 16);
  swift_bridgeObjectRelease();
  if (v62 < 2)
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v26);
    goto LABEL_13;
  }
  v63 = (uint64_t)v107;
  UndoAction.parseExludingUndoUserDialogActs.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v63, 1, v61) == 1)
  {
    (*(void (**)(char *, uint64_t))(v114 + 8))(v115, v26);
    outlined destroy of ReferenceResolutionClientProtocol?(v63, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
LABEL_13:
    v47 = v98;
    v49 = v123;
    goto LABEL_18;
  }
  v95 = v26;
  v64 = v106;
  (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v106, v63, v61);
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v113, v64, v61);
  USOParse.parserIdentifier.getter();
  USOParse.appBundleId.getter();
  v65 = v111;
  USOParse.init(userParse:parserIdentifier:appBundleId:)();
  v49 = v123;
  (*(void (**)(char *, uint64_t, uint64_t))(v122 + 104))(v65, v53, v123);
  v66 = v104;
  Input.init(parse:)();
  v67 = (void *)PluginAction.speechPackage.getter();
  v110 = PluginAction.flowHandlerId.getter();
  v113 = v68;
  v69 = v97;
  ((void (*)(char *, char *, uint64_t))v120[2])(v103, v66, v97);
  if (v67)
  {
    v120 = v67;
    PluginAction.utterance.getter();
    v107 = v70;
    v71 = type metadata accessor for ActionParaphrase();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v100, 1, 1, v71);
    v72 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v101, 1, 1, v72);
    v73 = v99;
    PluginAction.init(flowHandlerId:input:speechPackage:utterance:actionParaphrase:userData:loggingId:)();

    v49 = v123;
    v96(v66, v69);
    ((void (*)(char *, uint64_t))v117)(v106, v112);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v115, v95);
    v75 = v125;
    v74 = v126;
    (*(void (**)(char *, uint64_t))(v125 + 8))(v33, v126);
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v33, v73, v74);
  }
  else
  {
    PluginAction.utterance.getter();
    v120 = v76;
    v77 = type metadata accessor for ActionParaphrase();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v100, 1, 1, v77);
    v78 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v101, 1, 1, v78);
    v79 = v99;
    PluginAction.init(flowHandlerId:input:speechPackage:utterance:actionParaphrase:userData:loggingId:)();
    v96(v66, v69);
    ((void (*)(char *, uint64_t))v117)(v106, v112);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v115, v95);
    v81 = v125;
    v80 = v126;
    (*(void (**)(char *, uint64_t))(v125 + 8))(v33, v126);
    (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v33, v79, v80);
  }
  v47 = v98;
LABEL_18:
  v82 = v118[5];
  v83 = v118[6];
  __swift_project_boxed_opaque_existential_1(v118 + 2, v82);
  v84 = (*(uint64_t (**)(uint64_t, uint64_t))(v83 + 16))(v82, v83);
  v86 = v85;
  v87 = v119;
  v88 = PluginAction.serialize()();
  if (v87)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v125 + 8))(v33, v126);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v129 = MEMORY[0x1E0CB0338];
    *(_QWORD *)&v128 = v88;
    *((_QWORD *)&v128 + 1) = v89;
    outlined init with take of Any(&v128, &v127);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v130 = v47;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v127, v84, v86, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v92 = v108;
    UndoAction.directInvocation.getter();
    CorrectionsDirectInvocation.identifier.getter();
    ((void (*)(char *, uint64_t))v116)(v92, v121);
    v93 = v111;
    Parse.DirectInvocation.init(identifier:userData:)();
    (*(void (**)(char *, _QWORD, uint64_t))(v122 + 104))(v93, *MEMORY[0x1E0D9C658], v49);
    Input.init(parse:)();
    return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v33, v126);
  }
}

uint64_t CorrectionsService.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return v0;
}

uint64_t CorrectionsService.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t dispatch thunk of CorrectionsHandling.setupNewTurn(executionUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of CorrectionsHandling.undoFollowUpPluginActionUserDataKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CorrectionsHandling.checkUndo(input:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of CorrectionsHandling.commit()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CorrectionsHandling.setUndoInvocation(directInvocation:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t type metadata accessor for CorrectionsService()
{
  return objc_opt_self();
}

uint64_t method lookup function for CorrectionsService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CorrectionsService.__allocating_init(correctionsClient:conversationHandlerLocator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t CorrectionsUndoManager.__allocating_init()()
{
  uint64_t v0;
  _OWORD v2[2];
  uint64_t v3;

  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  v3 = 0;
  memset(v2, 0, sizeof(v2));
  swift_beginAccess();
  outlined assign with take of CorrectingFlow?((uint64_t)v2, v0 + 24);
  swift_endAccess();
  return v0;
}

uint64_t static UndoError.== infix(_:_:)()
{
  return 1;
}

void UndoError.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int UndoError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for forceCanUndoOutput()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 2;
  static CorrectionsUndoManager.forceCanUndoOutput = result;
  return result;
}

uint64_t *CorrectionsUndoManager.forceCanUndoOutput.unsafeMutableAddressor()
{
  if (one-time initialization token for forceCanUndoOutput != -1)
    swift_once();
  return &static CorrectionsUndoManager.forceCanUndoOutput;
}

uint64_t static CorrectionsUndoManager.forceCanUndoOutput.getter()
{
  if (one-time initialization token for forceCanUndoOutput != -1)
    swift_once();
  return swift_retain();
}

uint64_t CorrectionsUndoManager.init()()
{
  uint64_t v0;
  _OWORD v2[2];
  uint64_t v3;

  *(_QWORD *)(v0 + 56) = 0;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  v3 = 0;
  memset(v2, 0, sizeof(v2));
  swift_beginAccess();
  outlined assign with take of CorrectingFlow?((uint64_t)v2, v0 + 24);
  swift_endAccess();
  return v0;
}

Swift::Bool __swiftcall CorrectionsUndoManager.canUndo()()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (one-time initialization token for forceCanUndoOutput != -1)
    swift_once();
  v1 = static CorrectionsUndoManager.forceCanUndoOutput;
  v2 = (os_unfair_lock_s *)(static CorrectionsUndoManager.forceCanUndoOutput + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static CorrectionsUndoManager.forceCanUndoOutput + 20));
  v3 = *(unsigned __int8 *)(v1 + 16);
  os_unfair_lock_unlock(v2);
  if (v3 == 2)
  {
    swift_beginAccess();
    v4 = *(_QWORD *)(v0 + 16);
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      outlined init with copy of ReferenceResolutionClientProtocol(v4 + 40 * v5 - 8, (uint64_t)&v12);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v12, &demangling cache variable for type metadata for UndoingCommand?);
      LOBYTE(v6) = 1;
    }
    else
    {
      v14 = 0;
      v12 = 0u;
      v13 = 0u;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v12, &demangling cache variable for type metadata for UndoingCommand?);
      swift_beginAccess();
      outlined init with copy of CorrectingFlow?(v0 + 24, (uint64_t)&v12);
      LOBYTE(v6) = *((_QWORD *)&v13 + 1) != 0;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v12, &demangling cache variable for type metadata for CorrectingFlow?);
    }
  }
  else
  {
    v6 = v3 & 1;
    if (one-time initialization token for executor != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v10 = 67109120;
      LODWORD(v12) = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v8, v9, "[CorrectionsUndoManager] returning test value for canUndo %{BOOL}d", v10, 8u);
      MEMORY[0x1B5E44758](v10, -1, -1);
    }

  }
  return v6;
}

uint64_t CorrectionsUndoManager.undo()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v3 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    outlined init with copy of ReferenceResolutionClientProtocol(v4 + 40 * v5 - 8, (uint64_t)&v38);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v38, &demangling cache variable for type metadata for UndoingCommand?);
    if (one-time initialization token for executor != -1)
      goto LABEL_31;
    while (1)
    {
      v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
      v7 = Logger.logObject.getter();
      v8 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_1B4BE6000, v7, v8, "[CorrectionsUndoManager] running undo stack", v9, 2u);
        MEMORY[0x1B5E44758](v9, -1, -1);
      }

      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v37 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v11 = *v3;
      v12 = *(_QWORD *)(*v3 + 16);
      if (!v12)
        break;
      while (1)
      {
        outlined init with copy of ReferenceResolutionClientProtocol(v11 + 40 * v12 - 8, (uint64_t)&v38);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v38, &demangling cache variable for type metadata for UndoingCommand?);
        swift_beginAccess();
        v13 = (_QWORD *)*v3;
        if (!*(_QWORD *)(*v3 + 16))
          break;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v3 = (uint64_t)v13;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v15 = v13[2];
          if (!v15)
            goto LABEL_30;
        }
        else
        {
          v13 = specialized _ArrayBuffer._consumeAndCreateNew()(v13);
          *v3 = (uint64_t)v13;
          v15 = v13[2];
          if (!v15)
            goto LABEL_30;
        }
        v16 = v15 - 1;
        outlined init with take of ReferenceResolutionClientProtocol((__int128 *)&v13[5 * v15 - 1], (uint64_t)&v35);
        v13[2] = v16;
        *v3 = (uint64_t)v13;
        outlined init with take of ReferenceResolutionClientProtocol(&v35, (uint64_t)&v38);
        swift_endAccess();
        v17 = v37;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
          v37 = v17;
        }
        v19 = v17[2];
        v18 = v17[3];
        if (v19 >= v18 >> 1)
          v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
        v20 = *((_QWORD *)&v39 + 1);
        v21 = v40;
        v22 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v38, *((uint64_t *)&v39 + 1));
        MEMORY[0x1E0C80A78](v22);
        v24 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v25 + 16))(v24);
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, (uint64_t)v24, (uint64_t *)&v37, v20, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
        v11 = *v3;
        v12 = *(_QWORD *)(*v3 + 16);
        if (!v12)
        {
          v10 = v37;
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      swift_once();
    }
LABEL_17:
    v40 = 0;
    v38 = 0u;
    v39 = 0u;
    result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v38, &demangling cache variable for type metadata for UndoingCommand?);
    *(_QWORD *)a1 = v10;
    *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    v40 = 0;
    v38 = 0u;
    v39 = 0u;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v38, &demangling cache variable for type metadata for UndoingCommand?);
    swift_beginAccess();
    outlined init with copy of CorrectingFlow?(v1 + 24, (uint64_t)&v35);
    if (v36)
    {
      outlined init with take of ReferenceResolutionClientProtocol(&v35, (uint64_t)&v38);
      if (one-time initialization token for executor != -1)
        swift_once();
      v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
      v28 = Logger.logObject.getter();
      v29 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v30 = 0;
        _os_log_impl(&dword_1B4BE6000, v28, v29, "[CorrectionsUndoManager] return undo flow", v30, 2u);
        MEMORY[0x1B5E44758](v30, -1, -1);
      }

      CorrectionsUndoManager.clearUndoFlow()();
      result = outlined init with take of ReferenceResolutionClientProtocol(&v38, a1);
      *(_BYTE *)(a1 + 40) = 2;
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v35, &demangling cache variable for type metadata for CorrectingFlow?);
      if (one-time initialization token for executor != -1)
        swift_once();
      v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.executor);
      v32 = Logger.logObject.getter();
      v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v34 = 0;
        _os_log_impl(&dword_1B4BE6000, v32, v33, "[CorrectionsUndoManager] nothing to undo", v34, 2u);
        MEMORY[0x1B5E44758](v34, -1, -1);
      }

      lazy protocol witness table accessor for type UndoError and conformance UndoError();
      result = swift_allocError();
      *(_QWORD *)a1 = result;
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return result;
}

uint64_t CorrectionsUndoManager.register(action:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;

  v3 = v2;
  if (one-time initialization token for executor != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1B4BE6000, v7, v8, "[CorrectionsUndoManager] registering undo action", v9, 2u);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }

  CorrectionsUndoManager.clearUndoFlow()();
  v10 = type metadata accessor for UndoCommand();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  v12 = (_QWORD *)(v3 + 16);
  swift_beginAccess();
  v13 = *(_QWORD **)(v3 + 16);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 16) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    *v12 = v13;
  }
  v16 = v13[2];
  v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
    *v12 = v13;
  }
  v19 = v10;
  v20 = &protocol witness table for UndoCommand;
  *(_QWORD *)&v18 = v11;
  v13[2] = v16 + 1;
  outlined init with take of ReferenceResolutionClientProtocol(&v18, (uint64_t)&v13[5 * v16 + 4]);
  return swift_endAccess();
}

uint64_t UndoCommand.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t CorrectionsUndoManager.register(flow:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _BYTE v12[40];
  _BYTE v13[40];

  v2 = v1;
  if (one-time initialization token for executor != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1B4BE6000, v5, v6, "[CorrectionsUndoManager] registering undo flow", v7, 2u);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1B4BE6000, v8, v9, "[CorrectionsUndoManager] clearing undo stack", v10, 2u);
    MEMORY[0x1B5E44758](v10, -1, -1);
  }

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v13);
  outlined init with take of CorrectingFlow?((uint64_t)v13, (uint64_t)v12);
  swift_beginAccess();
  outlined assign with take of CorrectingFlow?((uint64_t)v12, v2 + 24);
  return swift_endAccess();
}

Swift::Void __swiftcall CorrectionsUndoManager.clear()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = v0;
  CorrectionsUndoManager.clearUndoFlow()();
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[CorrectionsUndoManager] clearing undo stack", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
}

uint64_t CorrectionsUndoManager.clearUndoFlow()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _OWORD v7[2];
  uint64_t v8;

  v1 = v0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[CorrectionsUndoManager] clearing undo flow", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  swift_beginAccess();
  outlined assign with take of CorrectingFlow?((uint64_t)v7, v1 + 24);
  return swift_endAccess();
}

uint64_t CorrectionsUndoManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 24, &demangling cache variable for type metadata for CorrectingFlow?);
  return v0;
}

uint64_t CorrectionsUndoManager.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 24, &demangling cache variable for type metadata for CorrectingFlow?);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CorrectionsEngine.canUndo() in conformance CorrectionsUndoManager()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))() & 1;
}

uint64_t protocol witness for CorrectionsEngine.undo() in conformance CorrectionsUndoManager()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

uint64_t protocol witness for CorrectionsEngine.clear() in conformance CorrectionsUndoManager()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 200))();
}

uint64_t protocol witness for SiriCorrectionsClient.register(action:) in conformance CorrectionsUndoManager()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 184))();
}

uint64_t UndoCommand.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t UndoCommand.execute()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t UndoCommand.execute()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))(**(int **)(v0[3] + 16) + *(_QWORD *)(v0[3] + 16));
  v1 = (_QWORD *)swift_task_alloc();
  v0[4] = v1;
  *v1 = v0;
  v1[1] = UndoCommand.execute();
  return v3(v0[2]);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t UndoCommand.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t UndoCommand.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for UndoingCommand.execute() in conformance UndoCommand(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t outlined init with copy of CorrectingFlow?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CorrectingFlow?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x1B5E43BA0);
}

unint64_t lazy protocol witness table accessor for type UndoError and conformance UndoError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UndoError and conformance UndoError;
  if (!lazy protocol witness table cache variable for type UndoError and conformance UndoError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for UndoError, &type metadata for UndoError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UndoError and conformance UndoError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UndoError and conformance UndoError;
  if (!lazy protocol witness table cache variable for type UndoError and conformance UndoError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for UndoError, &type metadata for UndoError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UndoError and conformance UndoError);
  }
  return result;
}

uint64_t type metadata accessor for UndoCommand()
{
  return objc_opt_self();
}

uint64_t outlined init with take of CorrectingFlow?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CorrectingFlow?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t instantiation function for generic protocol witness table for CorrectionsUndoManager(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CorrectionsUndoManager and conformance CorrectionsUndoManager;
  if (!lazy protocol witness table cache variable for type CorrectionsUndoManager and conformance CorrectionsUndoManager)
  {
    v1 = type metadata accessor for CorrectionsUndoManager();
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for CorrectionsUndoManager, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CorrectionsUndoManager and conformance CorrectionsUndoManager);
  }
  return result;
}

uint64_t type metadata accessor for CorrectionsUndoManager()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of CorrectionsEngine.canUndo()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CorrectionsEngine.undo()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CorrectionsEngine.clear()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

void destroy for UndoResult(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 3)
    v1 = *(_DWORD *)a1 + 3;
  if (v1 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  else if (v1 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {

  }
}

uint64_t initializeWithCopy for UndoResult(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  __int128 v4;
  uint64_t v5;
  id v6;

  v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 3)
    v3 = *(_DWORD *)a2 + 3;
  if (v3 == 2)
  {
    v4 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(_BYTE *)(a1 + 40) = 2;
  }
  else if (v3 == 1)
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 40) = 1;
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = *a2;
    v6 = (id)*a2;
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for UndoResult(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  id v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 2)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (v4 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {

    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(_BYTE *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 40) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      v7 = *(void **)a2;
      v8 = v7;
      *(_QWORD *)a1 = v7;
      *(_BYTE *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for UndoResult(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3)
      v4 = *(_DWORD *)a1 + 3;
    if (v4 == 2)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    else if (v4 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {

    }
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3)
      v5 = *(_DWORD *)a2 + 3;
    if (v5 == 2)
    {
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v6 = 2;
    }
    else if (v5 == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = 1;
    }
    else
    {
      v6 = 0;
      *(_QWORD *)a1 = *(_QWORD *)a2;
    }
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for UndoResult(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for UndoResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for UndoResult()
{
  return &type metadata for UndoResult;
}

uint64_t storeEnumTagSinglePayload for UndoError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4D9A9C0 + 4 * byte_1B4EE8D40[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4D9A9E0 + 4 * byte_1B4EE8D45[v4]))();
}

_BYTE *sub_1B4D9A9C0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4D9A9E0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4D9A9E8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4D9A9F0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4D9A9F8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4D9AA00(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UndoError()
{
  return &type metadata for UndoError;
}

uint64_t method lookup function for CorrectionsUndoManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CorrectionsUndoManager.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of CorrectionsUndoManager.canUndo()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of CorrectionsUndoManager.undo()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of CorrectionsUndoManager.register(action:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of CorrectionsUndoManager.register(flow:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of CorrectionsUndoManager.clear()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of UndoingCommand.execute()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 8) + *(_QWORD *)(a3 + 8));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v9(a1, a2, a3);
}

uint64_t method lookup function for UndoCommand()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UndoCommand.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata instantiation function for CorrectionsUndoManager.Stack()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for CorrectionsUndoManager.Stack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CorrectionsUndoManager.Stack);
}

uint64_t DecisionEngine.__allocating_init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v22;

  v13 = *(_QWORD *)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 32);
  v14 = __swift_mutable_project_boxed_opaque_existential_1(a3, v13);
  v15 = *(_QWORD *)(a5 + 24);
  v16 = *(_QWORD *)(a5 + 32);
  v17 = __swift_mutable_project_boxed_opaque_existential_1(a5, v15);
  v18 = specialized DecisionEngine.__allocating_init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(a1, a2, v14, a4, v17, a6, a7, v22, v15, v13, v16, v12);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a5);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v18;
}

uint64_t DecisionEngine.previousConversation.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t DecisionEngine.previousConversation.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 184) = a1;
  return swift_release();
}

uint64_t (*DecisionEngine.previousConversation.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a7;
  v25 = a2;
  v26 = a6;
  v12 = *(_QWORD *)(a3 + 24);
  v11 = *(_QWORD *)(a3 + 32);
  v13 = __swift_mutable_project_boxed_opaque_existential_1(a3, v12);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  v17 = *(_QWORD *)(a5 + 24);
  v18 = *(_QWORD *)(a5 + 32);
  v19 = __swift_mutable_project_boxed_opaque_existential_1(a5, v17);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v22 + 16))(v21);
  v23 = specialized DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(a1, v25, (uint64_t)v15, a4, (uint64_t)v21, v26, v27, v28, v17, v12, v18, v11);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a5);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v23;
}

uint64_t key path setter for DecisionEngine.ambiguityService : DecisionEngine(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _BYTE v5[40];
  __int128 v6[2];

  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v6);
  v3 = *a2;
  outlined init with take of ReferenceResolutionClientProtocol(v6, (uint64_t)v5);
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v5, v3 + 200, (uint64_t *)&demangling cache variable for type metadata for AmbiguityServiceProviding?);
  return swift_endAccess();
}

uint64_t DecisionEngine.ambiguityService.setter(__int128 *a1)
{
  uint64_t v1;
  _BYTE v3[40];

  outlined init with take of ReferenceResolutionClientProtocol(a1, (uint64_t)v3);
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v3, v1 + 200, (uint64_t *)&demangling cache variable for type metadata for AmbiguityServiceProviding?);
  return swift_endAccess();
}

void (*DecisionEngine.ambiguityService.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  DecisionEngine.ambiguityService.getter((uint64_t)v3);
  return DecisionEngine.ambiguityService.modify;
}

void DecisionEngine.ambiguityService.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  v3 = (__int128 *)(*a1 + 40);
  v4 = *a1 + 80;
  if ((a2 & 1) != 0)
  {
    v5 = v2[18];
    outlined init with copy of ReferenceResolutionClientProtocol(*a1, (uint64_t)v3);
    outlined init with take of ReferenceResolutionClientProtocol(v3, v4);
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v4, v5 + 200, (uint64_t *)&demangling cache variable for type metadata for AmbiguityServiceProviding?);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    v6 = v2[18];
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)*a1, (uint64_t)v3);
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v3, v6 + 200, (uint64_t *)&demangling cache variable for type metadata for AmbiguityServiceProviding?);
    swift_endAccess();
  }
  free(v2);
}

Swift::Void __swiftcall DecisionEngine.newSessionStarted()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];
  uint64_t v4;
  uint64_t v5;

  ActionGenerator.newSessionStarted()();
  DecisionEngine.ambiguityService.getter((uint64_t)v3);
  v1 = v4;
  v2 = v5;
  __swift_project_boxed_opaque_existential_1(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  swift_beginAccess();
  *(_QWORD *)(v0 + 184) = 0;
  swift_release();
}

uint64_t DecisionEngine.commitConversation(_:)(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 184) = a1;
  swift_release();
  return swift_retain();
}

Swift::Void __swiftcall DecisionEngine.commitCorrections()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD **)(v0 + 40);
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[CorrectionsService] Commit to clear context inside CorrectionsEngine", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  v6 = v1[5];
  v7 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
}

uint64_t Input.parseHypothesisId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = a1;
  v1 = type metadata accessor for Siri_Nlu_External_UserParse();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Parse();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for USOParse();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v6 + 88))(v8, v5) == *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v6 + 96))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    USOParse.userParse.getter();
    v13 = v18;
    Siri_Nlu_External_UserParse.id.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v14 = type metadata accessor for Siri_Nlu_External_UUID();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 0, 1, v14);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v16 = type metadata accessor for Siri_Nlu_External_UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v18, 1, 1, v16);
  }
}

uint64_t DecisionEngine.loadConversationFromPluginAction(_:speechData:turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[9] = a5;
  v6[10] = v5;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  v6[11] = type metadata accessor for ConversationHelperInput(0);
  v6[12] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v6[13] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t DecisionEngine.loadConversationFromPluginAction(_:speechData:turnData:bridge:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  id v4;
  _QWORD *v5;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD **)(v0 + 96);
  v3 = *(void **)(v0 + 48);
  v7 = *(_OWORD *)(v0 + 64);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 56), (uint64_t)v2 + *(int *)(v1 + 20), type metadata accessor for RemoteConversationTurnData);
  *v2 = v3;
  *(_OWORD *)((char *)v2 + *(int *)(v1 + 24)) = v7;
  v4 = v3;
  swift_unknownObjectRetain();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v5;
  *v5 = v0;
  v5[1] = DecisionEngine.loadConversationFromPluginAction(_:speechData:turnData:bridge:);
  return ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 96));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release();
  outlined destroy of CamOutput(v1, type metadata accessor for ConversationHelperInput);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release();
  outlined destroy of CamOutput(v1, type metadata accessor for ConversationHelperInput);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DecisionEngine.loadConversationFromPluginAction(_:speechData:turnData:bridge:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 128) = a1;
  return swift_task_switch();
}

uint64_t DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v9[45] = v21;
  v9[46] = v8;
  v9[43] = a7;
  v9[44] = a8;
  v9[41] = a5;
  v9[42] = a6;
  v9[39] = a3;
  v9[40] = a4;
  v9[37] = a1;
  v9[38] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v9[47] = swift_task_alloc();
  v10 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v9[48] = v10;
  v9[49] = *(_QWORD *)(v10 - 8);
  v9[50] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v9[51] = swift_task_alloc();
  v11 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v9[52] = v11;
  v9[53] = *(_QWORD *)(v11 - 8);
  v9[54] = swift_task_alloc();
  v9[55] = swift_task_alloc();
  v12 = type metadata accessor for Siri_Nlu_External_Parser();
  v9[56] = v12;
  v9[57] = *(_QWORD *)(v12 - 8);
  v9[58] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  v9[59] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityServiceResponse?);
  v9[60] = swift_task_alloc();
  v13 = type metadata accessor for AmbiguityServiceResponse(0);
  v9[61] = v13;
  v9[62] = *(_QWORD *)(v13 - 8);
  v9[63] = swift_task_alloc();
  v14 = type metadata accessor for ExecutionLocation();
  v9[64] = v14;
  v9[65] = *(_QWORD *)(v14 - 8);
  v9[66] = swift_task_alloc();
  v9[67] = swift_task_alloc();
  v9[68] = type metadata accessor for UserInputResult();
  v9[69] = swift_task_alloc();
  v9[70] = swift_task_alloc();
  type metadata accessor for UUID();
  v9[71] = swift_task_alloc();
  v15 = type metadata accessor for Parse();
  v9[72] = v15;
  v9[73] = *(_QWORD *)(v15 - 8);
  v9[74] = swift_task_alloc();
  type metadata accessor for CamParse();
  v9[75] = swift_task_alloc();
  v16 = type metadata accessor for ActionCandidate();
  v9[76] = v16;
  v9[77] = *(_QWORD *)(v16 - 8);
  v9[78] = swift_task_alloc();
  v9[79] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v9[80] = swift_task_alloc();
  v9[81] = swift_task_alloc();
  v9[82] = swift_task_alloc();
  v9[83] = swift_task_alloc();
  v9[84] = swift_task_alloc();
  v17 = type metadata accessor for Input();
  v9[85] = v17;
  v9[86] = *(_QWORD *)(v17 - 8);
  v9[87] = swift_task_alloc();
  v9[88] = swift_task_alloc();
  v9[89] = swift_task_alloc();
  v9[90] = swift_task_alloc();
  v9[91] = swift_task_alloc();
  v18 = type metadata accessor for Siri_Nlu_External_UserParse();
  v9[92] = v18;
  v9[93] = *(_QWORD *)(v18 - 8);
  v9[94] = swift_task_alloc();
  v9[95] = swift_task_alloc();
  v9[96] = swift_task_alloc();
  v9[97] = swift_task_alloc();
  v9[98] = swift_task_alloc();
  v19 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  v9[99] = v19;
  v9[100] = *(_QWORD *)(v19 - 8);
  v9[101] = swift_task_alloc();
  v9[102] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_ResponseStatus.StatusCode?, Siri_Nlu_External_ResponseStatus.StatusCode?));
  v9[103] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  v9[104] = swift_task_alloc();
  v9[105] = swift_task_alloc();
  v9[106] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  v9[107] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  v9[108] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v9[109] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t);
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint8_t *v132;
  _QWORD *v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  NSObject *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  uint8_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  NSObject *v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t, uint64_t, uint64_t);
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = v0[38];
  v2 = type metadata accessor for Logger();
  v0[110] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = *(_QWORD *)(v1 + 40);
  v0[111] = v3;
  v182 = v3;
  if (!v3)
  {
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[100] + 56);
    v11(v0[106], 1, 1, v0[99]);
    v12 = 0;
    v172 = 0;
    v175 = 0;
    v10 = 0;
    goto LABEL_16;
  }
  v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
  if (!v4)
    goto LABEL_7;
  v5 = v0[108];
  outlined init with copy of ReferenceResolutionClientProtocol?(v4 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, v5, &demangling cache variable for type metadata for PommesSearchReason?);
  v6 = type metadata accessor for PommesSearchReason();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  v9 = v0[108];
  if (v8 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[108], &demangling cache variable for type metadata for PommesSearchReason?);
LABEL_7:
    v175 = 0;
    v10 = 0;
    goto LABEL_10;
  }
  v175 = PommesSearchReason.rawValue.getter();
  v10 = v13;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
LABEL_10:
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
  if (v14)
  {
    v15 = v0[107];
    outlined init with copy of ReferenceResolutionClientProtocol?(v14 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, v15, &demangling cache variable for type metadata for PommesError?);
    v16 = type metadata accessor for PommesError();
    v17 = *(_QWORD *)(v16 - 8);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
    v19 = v0[107];
    if (v18 != 1)
    {
      v172 = PommesError.rawValue.getter();
      v12 = v20;
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v16);
      goto LABEL_15;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v0[107], &demangling cache variable for type metadata for PommesError?);
  }
  v172 = 0;
  v12 = 0;
LABEL_15:
  v21 = v0[106];
  v22 = v0[100];
  v23 = v0[99];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v3 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode, v23);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v11(v21, 0, 1, v23);
LABEL_16:
  v179 = (uint64_t)(v0 + 13);
  v0[113] = v10;
  v163 = v12;
  v0[112] = v12;
  v24 = v0[106];
  v25 = v0[105];
  v26 = v0[103];
  v27 = v0[102];
  v28 = v0[100];
  v29 = v0[99];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v25, *MEMORY[0x1E0D9F510], v29);
  v11(v25, 0, 1, v29);
  v30 = v26 + *(int *)(v27 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol?(v24, v26, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v25, v30, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  v185 = v0;
  if (v31(v26, 1, v29) == 1)
  {
    v32 = v0[106];
    v33 = v0[99];
    outlined destroy of ReferenceResolutionClientProtocol?(v0[105], (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
    outlined destroy of ReferenceResolutionClientProtocol?(v32, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
    v34 = (uint64_t)(v0 + 13);
    if (v31(v30, 1, v33) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0[103], (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
      v177 = 1;
      goto LABEL_22;
    }
LABEL_21:
    outlined destroy of ReferenceResolutionClientProtocol?(v0[103], &demangling cache variable for type metadata for (Siri_Nlu_External_ResponseStatus.StatusCode?, Siri_Nlu_External_ResponseStatus.StatusCode?));
    v177 = 0;
LABEL_22:
    v42 = v182;
    v162 = v10;
    if (!v182)
      goto LABEL_30;
    goto LABEL_25;
  }
  v35 = v0[99];
  outlined init with copy of ReferenceResolutionClientProtocol?(v0[103], v0[104], (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  v36 = v31(v30, 1, v35);
  v37 = v0[106];
  v38 = v0[105];
  v39 = v0[104];
  if (v36 == 1)
  {
    v40 = v0[100];
    v41 = v0[99];
    outlined destroy of ReferenceResolutionClientProtocol?(v0[105], (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
    outlined destroy of ReferenceResolutionClientProtocol?(v37, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    v34 = (uint64_t)(v0 + 13);
    goto LABEL_21;
  }
  v43 = v0[103];
  v44 = v0[101];
  v45 = v0[100];
  v46 = v10;
  v47 = v185[99];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v44, v30, v47);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type Siri_Nlu_External_ResponseStatus.StatusCode and conformance Siri_Nlu_External_ResponseStatus.StatusCode, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F520], MEMORY[0x1E0D9F530]);
  v177 = dispatch thunk of static Equatable.== infix(_:_:)();
  v48 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
  v48(v44, v47);
  outlined destroy of ReferenceResolutionClientProtocol?(v38, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  outlined destroy of ReferenceResolutionClientProtocol?(v37, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  v49 = v47;
  v10 = v46;
  v0 = v185;
  v48(v39, v49);
  outlined destroy of ReferenceResolutionClientProtocol?(v43, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  v34 = v179;
  v42 = v182;
  v162 = v10;
  if (!v182)
  {
LABEL_30:
    v61 = 0;
    goto LABEL_31;
  }
LABEL_25:
  v50 = *(_QWORD *)(v42 + 16);
  v51 = *(_QWORD *)(v50 + 16);
  if (!v51)
    goto LABEL_30;
  v52 = v0[93];
  v53 = v50 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
  v54 = *(_QWORD *)(v52 + 72);
  v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 16);
  swift_bridgeObjectRetain_n();
  v56 = v51 - 1;
  do
  {
    v57 = v56;
    v58 = v0[98];
    v59 = v0[92];
    v60 = v55(v58, v53, v59);
    MEMORY[0x1B5E3FA6C](v60);
    v61 = Array<A>.hasWantedToUndo.getter();
    v0 = v185;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v58, v59);
    if ((v61 & 1) != 0)
      break;
    v56 = v57 - 1;
    v53 += v54;
  }
  while (v57);
  swift_bridgeObjectRelease_n();
  v10 = v162;
  v34 = v179;
LABEL_31:
  v161 = v61;
  v62 = v61 & 1;
  *((_BYTE *)v0 + 1240) = v61 & 1;
  v63 = v0[86];
  v64 = v0[85];
  v65 = v0[84];
  v66 = v0[41];
  v67 = v0[38];
  v68 = *(int *)(type metadata accessor for ConversationHelperInput(0) + 20);
  *((_DWORD *)v0 + 308) = v68;
  v160 = v66 + v68;
  v69 = *(void **)(*(_QWORD *)(v66 + v68 + 32) + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo);
  v0[114] = v69;
  v0[2] = v175;
  v0[3] = v10;
  v0[4] = v172;
  v0[5] = v163;
  *((_BYTE *)v0 + 48) = v177 & 1;
  *((_BYTE *)v0 + 49) = v62;
  v0[7] = v69;
  v70 = *(_QWORD *)(v67 + 16);
  v0[115] = v70;
  v71 = *(_QWORD *)(v67 + 24);
  v0[116] = v71;
  v159 = v69;
  swift_bridgeObjectRetain();
  DecisionEngine.ambiguityService.getter(v34);
  v72 = v185[16];
  v73 = (_QWORD *)v34;
  v74 = v185[17];
  __swift_project_boxed_opaque_existential_1(v73, v72);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 24))(v67, v72, v74);
  v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
  v185[117] = v75;
  if (v75(v65, 1, v64) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v185[84], &demangling cache variable for type metadata for Input?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
    swift_bridgeObjectRetain();
    v76 = Logger.logObject.getter();
    v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc();
      v79 = swift_slowAlloc();
      v186 = v79;
      *(_DWORD *)v78 = 136315138;
      swift_bridgeObjectRetain();
      v185[33] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, &v186);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v76, v77, "[DecisionEngine]: Could not extract ranked input from ConversationUserInput for rcId: %s", v78, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v79, -1, -1);
      MEMORY[0x1B5E44758](v78, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    if (!v182)
    {
      v91 = v185;
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v185[93] + 56))(v185[59], 1, 1, v185[92]);
      goto LABEL_69;
    }
    v89 = *(_QWORD *)(v182 + 16);
    v90 = *(_QWORD *)(v89 + 16);
    v91 = v185;
    if (!v90)
    {
      swift_bridgeObjectRetain();
      v125 = 1;
      goto LABEL_68;
    }
    v92 = v185[93];
    v170 = v185[53];
    v173 = v185[57];
    v158 = v185[49];
    v93 = v89 + ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80));
    v168 = *MEMORY[0x1E0D9F138];
    v164 = *(_QWORD *)(v92 + 72);
    v165 = v92;
    v166 = *(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v95 = v91[96];
      v180 = v90;
      v183 = v91[95];
      v96 = v91[92];
      v97 = v91[58];
      v98 = v91[56];
      v99 = v185[55];
      v100 = v185[54];
      v101 = v185[52];
      v166(v95, v93, v96);
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v97, v98);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v170 + 104))(v100, v168, v101);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F178]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      v102 = v185[30];
      v103 = v185[32];
      v104 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
      v104(v100, v101);
      v105 = v99;
      v91 = v185;
      v104(v105, v101);
      v166(v183, v95, v96);
      if (v102 != v103)
        goto LABEL_44;
      v106 = (char *)v185[51];
      Siri_Nlu_External_UserParse.preferredUserDialogAct.getter(v106);
      v107 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
      v108 = *(_QWORD *)(v107 - 8);
      v109 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107);
      v110 = v185[51];
      if (v109 == 1)
        break;
      v111 = v185[50];
      v112 = v185[48];
      Siri_Nlu_External_UserDialogAct.delegated.getter();
      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v110, v107);
      v113 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
      v115 = v114;
      (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v111, v112);
      v116 = v185[95];
      v117 = v185[92];
      if (v113 == 0xD000000000000026 && v115 == 0x80000001B4EFB8C0)
      {
        (*(void (**)(_QWORD, _QWORD))(v165 + 8))(v185[95], v185[92]);
        swift_bridgeObjectRelease();
LABEL_67:
        (*(void (**)(_QWORD, _QWORD, _QWORD))(v185[93] + 32))(v185[59], v185[96], v185[92]);
        v125 = 0;
LABEL_68:
        v127 = v91[93];
        v128 = v91[92];
        v129 = v91[59];
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v127 + 56))(v129, v125, 1, v128);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v129, 1, v128) == 1)
        {
LABEL_69:
          outlined destroy of ReferenceResolutionClientProtocol?(v91[59], &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
          if ((DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(_QWORD *)v160, *(_QWORD *)(v160 + 8), v161 & 1) & 1) != 0)
          {
            v130 = Logger.logObject.getter();
            v131 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v130, v131))
            {
              v132 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v132 = 0;
              _os_log_impl(&dword_1B4BE6000, v130, v131, "[DecisionEngine] Returning fallback response", v132, 2u);
              MEMORY[0x1B5E44758](v132, -1, -1);
            }

            v133 = (_QWORD *)swift_task_alloc();
            v91[153] = v133;
            *v133 = v91;
            v133[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
            return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(v91[37], v91[41], (uint64_t)(v91 + 2));
          }
          swift_release();
          v134 = Logger.logObject.getter();
          v135 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v134, v135))
          {
            v136 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v136 = 0;
            _os_log_impl(&dword_1B4BE6000, v134, v135, "[DecisionEngine] Returning no response to enforce server fallback", v136, 2u);
            MEMORY[0x1B5E44758](v136, -1, -1);
            v137 = v159;
          }
          else
          {
            v137 = v134;
            v134 = v159;
          }
          v156 = v91[37];

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v157 = type metadata accessor for DecisionEngineResponse();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v157 - 8) + 56))(v156, 1, 1, v157);
        }
        else
        {
          v138 = v91[97];
          v139 = v91[93];
          v140 = v91[92];
          v141 = v91[59];
          swift_release();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v139 + 32))(v138, v141, v140);
          v142 = Logger.logObject.getter();
          v143 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v142, v143))
          {
            v144 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v144 = 0;
            _os_log_impl(&dword_1B4BE6000, v142, v143, "[DecisionEngine] Returning response with NLv3 fallback exception parse.", v144, 2u);
            MEMORY[0x1B5E44758](v144, -1, -1);
          }
          v145 = v91[97];
          v146 = v91[94];
          v147 = v91[93];
          v148 = v91[92];
          v181 = v91[86];
          v184 = v91[85];
          v149 = v91[74];
          v171 = v91[73];
          v174 = v91[72];
          v176 = v91[87];
          v150 = v91[57];
          v151 = v91[58];
          v152 = v91[56];
          v167 = v185[53];
          v169 = v185[52];
          v153 = v185[47];
          v178 = v185[37];

          (*(void (**)(uint64_t, uint64_t, uint64_t))(v147 + 16))(v146, v145, v148);
          Siri_Nlu_External_UserParse.parser.getter();
          Siri_Nlu_External_Parser.parserID.getter();
          (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v151, v152);
          v91 = v185;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v167 + 56))(v153, 0, 1, v169);
          USOParse.init(userParse:parserIdentifier:appBundleId:)();
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v171 + 104))(v149, *MEMORY[0x1E0D9C678], v174);
          Input.init(parse:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v145, v148);
          v154 = type metadata accessor for DecisionEngineResponse();
          v155 = v178 + *(int *)(v154 + 24);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v181 + 32))(v155, v176, v184);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v181 + 56))(v155, 0, 1, v184);
          *(_QWORD *)v178 = 0;
          *(_BYTE *)(v178 + 8) = 0;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v154 - 8) + 56))(v178, 0, 1, v154);
        }
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return ((uint64_t (*)(void))v91[1])();
      }
      v118 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v94 = *(void (**)(uint64_t, uint64_t))(v165 + 8);
      v94(v116, v117);
      swift_bridgeObjectRelease();
      if ((v118 & 1) != 0)
        goto LABEL_67;
LABEL_45:
      v94(v185[96], v185[92]);
      v93 += v164;
      v90 = v180 - 1;
      if (v180 == 1)
      {
        v125 = 1;
        goto LABEL_68;
      }
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v185[51], &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_44:
    v94 = *(void (**)(uint64_t, uint64_t))(v165 + 8);
    v94(v185[95], v185[92]);
    goto LABEL_45;
  }
  v80 = v185[91];
  v81 = v185[85];
  v82 = v185[84];
  v83 = v185[39];
  v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(v185[86] + 32);
  v185[118] = v84;
  v84(v80, v82, v81);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  Input.stripSetIdentity()();
  if ((v83 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter())
    {
LABEL_36:
      swift_bridgeObjectRetain();
      v85 = Logger.logObject.getter();
      v86 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v85, v86))
      {
        v87 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v87 = 134217984;
        if ((v83 & 0xC000000000000001) != 0)
          v88 = __CocoaSet.count.getter();
        else
          v88 = *(_QWORD *)(v185[39] + 16);
        v185[36] = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v85, v86, "[DecisionEngine] %ld active conversations are present. Trying to find an existing flow", v87, 0xCu);
        MEMORY[0x1B5E44758](v87, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      v185[119] = *(_QWORD *)(v185[46] + 32);
      v126 = (_QWORD *)swift_task_alloc();
      v185[120] = v126;
      *v126 = v185;
      v126[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
      return ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:)(v185[91], v185[39], v185[41]);
    }
  }
  else if (*(_QWORD *)(v185[39] + 16))
  {
    goto LABEL_36;
  }
  v119 = v185[46];
  v120 = *(_QWORD *)(v119 + 176);
  if (!v120)
  {
    v121 = DecisionEngine.getRREntities()();
    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    SiriEnvironment.salientEntitiesProvider.getter();
    swift_release();
    swift_bridgeObjectRetain();
    dispatch thunk of SalientEntitiesDataProvider.salientEntities.setter();
    swift_release();
    *(_QWORD *)(v119 + 176) = v121;
    swift_bridgeObjectRelease();
    v120 = *(_QWORD *)(v119 + 176);
    v119 = v185[46];
  }
  v185[129] = v120;
  if (v120)
    v122 = v120;
  else
    v122 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v123 = (_QWORD *)swift_task_alloc();
  v185[130] = v123;
  *v123 = v185;
  v123[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  return ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(v185[38], v122, v119 + 96);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void (*v20)(_QWORD, unint64_t, _QWORD);
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;

  if (*(_QWORD *)(v0 + 968))
  {
    swift_release();
    swift_bridgeObjectRelease();
    v1 = Logger.logObject.getter();
    v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1B4BE6000, v1, v2, "[DecisionEngine] found an existing flow that can handle top NL parse this turn.", v3, 2u);
      MEMORY[0x1B5E44758](v3, -1, -1);
    }
    v4 = *(_QWORD *)(v0 + 968);
    v5 = *(void **)(v0 + 912);
    v6 = *(_QWORD *)(v0 + 728);
    v7 = *(_QWORD *)(v0 + 688);
    v8 = *(_QWORD *)(v0 + 680);
    v9 = *(_QWORD *)(v0 + 296);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = type metadata accessor for DecisionEngineResponse();
    v11 = v9 + *(int *)(v10 + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v11, v6, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v8);
    *(_QWORD *)v9 = v4;
    *(_BYTE *)(v9 + 8) = 1;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 0, 1, v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 728);
    v14 = Input.alternatives.getter();
    v15 = swift_task_alloc();
    *(_QWORD *)(v15 + 16) = v13;
    v16 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11SiriKitFlow5ParseOGG_AH5InputVs5NeverOTg506_sSi11fg5Flow5i4OAA5j32VIgynr_Si6offset_AC7elementtAEs5K11OIegnrzr_TRSiAjNIgynr_Tf1cn_nTf4ng_n(v14, (void (*)(_QWORD, char *))partial apply for closure #3 in DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v15);
    *(_QWORD *)(v0 + 976) = v16;
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    v17 = *(_QWORD *)(v16 + 16);
    *(_QWORD *)(v0 + 984) = v17;
    if (v17)
    {
      v18 = *(_QWORD *)(v0 + 688);
      v19 = *(_DWORD *)(v18 + 80);
      *(_DWORD *)(v0 + 1236) = v19;
      *(_QWORD *)(v0 + 992) = *(_QWORD *)(v18 + 72);
      v20 = *(void (**)(_QWORD, unint64_t, _QWORD))(v18 + 16);
      *(_QWORD *)(v0 + 1000) = v20;
      *(_QWORD *)(v0 + 1008) = 0;
      v20(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 976) + ((v19 + 32) & ~(unint64_t)v19), *(_QWORD *)(v0 + 680));
      v21 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1016) = v21;
      *v21 = v0;
      v21[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
      return ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:)(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 328));
    }
    else
    {
      swift_bridgeObjectRelease();
      v22 = *(_QWORD *)(v0 + 368);
      v23 = *(_QWORD *)(v22 + 176);
      if (!v23)
      {
        v24 = DecisionEngine.getRREntities()();
        type metadata accessor for SiriEnvironment();
        static SiriEnvironment.default.getter();
        SiriEnvironment.salientEntitiesProvider.getter();
        swift_release();
        swift_bridgeObjectRetain();
        dispatch thunk of SalientEntitiesDataProvider.salientEntities.setter();
        swift_release();
        *(_QWORD *)(v22 + 176) = v24;
        swift_bridgeObjectRelease();
        v23 = *(_QWORD *)(v22 + 176);
        v22 = *(_QWORD *)(v0 + 368);
      }
      *(_QWORD *)(v0 + 1032) = v23;
      if (v23)
        v25 = v23;
      else
        v25 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      v26 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1040) = v26;
      *v26 = v0;
      v26[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
      return ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(*(_QWORD *)(v0 + 304), v25, v22 + 96);
    }
  }
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_QWORD *)(v0 + 1024))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v1 = Logger.logObject.getter();
    v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1B4BE6000, v1, v2, "[DecisionEngine] found an existing flow that can handle alternative NL parse this turn.", v3, 2u);
      MEMORY[0x1B5E44758](v3, -1, -1);
    }
    v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 944);
    v5 = *(void **)(v0 + 912);
    v21 = *(_QWORD *)(v0 + 1024);
    v22 = *(_QWORD *)(v0 + 728);
    v6 = *(_QWORD *)(v0 + 720);
    v7 = *(_QWORD *)(v0 + 688);
    v8 = *(_QWORD *)(v0 + 680);
    v9 = *(_QWORD *)(v0 + 296);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = type metadata accessor for DecisionEngineResponse();
    v11 = v9 + *(int *)(v10 + 24);
    v4(v11, v6, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v8);
    *(_QWORD *)v9 = v21;
    *(_BYTE *)(v9 + 8) = 1;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 0, 1, v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v22, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 984);
    v14 = *(_QWORD *)(v0 + 1008) + 1;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 688) + 8))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 680));
    if (v14 == v13)
    {
      swift_bridgeObjectRelease();
      v15 = *(_QWORD *)(v0 + 368);
      v16 = *(_QWORD *)(v15 + 176);
      if (!v16)
      {
        v17 = DecisionEngine.getRREntities()();
        type metadata accessor for SiriEnvironment();
        static SiriEnvironment.default.getter();
        SiriEnvironment.salientEntitiesProvider.getter();
        swift_release();
        swift_bridgeObjectRetain();
        dispatch thunk of SalientEntitiesDataProvider.salientEntities.setter();
        swift_release();
        *(_QWORD *)(v15 + 176) = v17;
        swift_bridgeObjectRelease();
        v16 = *(_QWORD *)(v15 + 176);
        v15 = *(_QWORD *)(v0 + 368);
      }
      *(_QWORD *)(v0 + 1032) = v16;
      if (v16)
        v18 = v16;
      else
        v18 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      v19 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1040) = v19;
      *v19 = v0;
      v19[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
      return ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(*(_QWORD *)(v0 + 304), v18, v15 + 96);
    }
    else
    {
      *(_QWORD *)(v0 + 1008) = v14;
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 1000))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 976)+ ((*(unsigned __int8 *)(v0 + 1236) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1236))+ *(_QWORD *)(v0 + 992) * v14, *(_QWORD *)(v0 + 680));
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1016) = v20;
      *v20 = v0;
      v20[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
      return ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:)(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 328));
    }
  }
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  _QWORD *v47;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  id v58;
  id v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[16];

  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitActionCandidatesGenerated(rcId:actionCandidates:)();
  swift_release();
  swift_bridgeObjectRetain();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 1048);
    v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v4 = 134217984;
    *(_QWORD *)(v0 + 280) = *(_QWORD *)(v3 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v1, v2, "[DecisionEngine] Generated %ld action candidates", v4, 0xCu);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  CorrectionsService.getCorrectionsAction(input:conversationUserInput:)(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 664));
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 664);
    v8 = *(_QWORD *)(v0 + 656);
    v9 = (uint8_t *)swift_slowAlloc();
    v74[0] = swift_slowAlloc();
    v10 = v74[0];
    *(_DWORD *)v9 = 136315138;
    swift_beginAccess();
    outlined init with copy of ReferenceResolutionClientProtocol?(v7, v8, &demangling cache variable for type metadata for Input?);
    v11 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 272) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v5, v6, "[DecisionEngine] Corrections Input: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }

  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 936);
  v14 = *(_QWORD *)(v0 + 680);
  v15 = *(_QWORD *)(v0 + 664);
  v16 = *(_QWORD *)(v0 + 648);
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v15, v16, &demangling cache variable for type metadata for Input?);
  if (v13(v16, 1, v14) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 648), &demangling cache variable for type metadata for Input?);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 320);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 944))(*(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 680));
    if (v17)
    {
      v67 = *(_QWORD *)(v0 + 920);
      v69 = *(_QWORD *)(v0 + 928);
      v71 = *(_QWORD *)(v0 + 888);
      v18 = *(_QWORD *)(v0 + 616);
      v19 = *(_QWORD **)(v0 + 600);
      v20 = *(_QWORD *)(v0 + 592);
      v21 = *(_QWORD *)(v0 + 584);
      v61 = *(_QWORD *)(v0 + 576);
      v62 = *(_QWORD *)(v0 + 624);
      v63 = *(_QWORD *)(v0 + 360);
      v64 = *(_QWORD *)(v0 + 608);
      v65 = *(_QWORD *)(v0 + 304);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      Input.parse.getter();
      Parse.asCamParse()(v19);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v61);
      UUID.init()();
      ActionCandidate.init(flowHandlerId:parse:affinityScore:loggingId:userData:)();
      ObjectType = swift_getObjectType();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ActionCandidate>);
      v23 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_1B4EE3F50;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v18 + 16))(v24 + v23, v62, v64);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 136))(v24, v67, v69, ObjectType);
      swift_bridgeObjectRelease();
      v25 = *(void **)(v65 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfo);
      v26 = *(void **)(v65 + 32);
      v68 = (uint64_t)v26;
      v70 = (uint64_t)v25;
      if (v71)
      {
        v27 = *(_QWORD *)(v0 + 888);
        v28 = *(_QWORD *)(v27 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult + 8);
        v72 = *(_QWORD *)(v27 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
        v29 = v26;
        swift_bridgeObjectRetain();
        v30 = v25;
        v66 = NLResponse.requestLanguageVariant.getter();
        v32 = v31;
      }
      else
      {
        v49 = v26;
        v50 = v25;
        v66 = 0;
        v32 = 0;
        v72 = 0;
        v28 = 0;
      }
      v51 = *(_QWORD *)(v0 + 928);
      v52 = *(_QWORD *)(v0 + 920);
      v53 = *(_QWORD *)(v0 + 536);
      v54 = *(_QWORD *)(v0 + 528);
      v55 = *(_QWORD *)(v0 + 512);
      v56 = *(_QWORD *)(v0 + 304);
      v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 520) + 16);
      v57(v53, v56 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation, v55);
      v57(v54, v56 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_nlLocation, v55);
      v58 = objc_allocWithZone((Class)type metadata accessor for RemoteConversationSpeechData());
      v59 = RemoteConversationSpeechData.init(rcId:asrOnDevice:userSpecificInfo:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:asrLocation:nlLocation:)(v52, v51, 1, v70, v68, 0, 0, v72, v28, v66, v32, v53, v54);
      *(_QWORD *)(v0 + 1056) = v59;
      v60 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 1064) = v60;
      *v60 = v0;
      v60[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
      return RemoteConversationClient.accept(input:speechData:)(*(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 712), (uint64_t)v59);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 688) + 8))(*(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 680));
  }
  v33 = *(_QWORD *)(v0 + 1048);
  v34 = *(_QWORD *)(v0 + 928);
  v35 = *(_QWORD *)(v0 + 920);
  v36 = *(_QWORD *)(v0 + 360);
  v37 = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 136))(v33, v35, v34, v37, v36);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v33 + 16))
  {
    v38 = *(_QWORD *)(v0 + 368);
    DecisionEngine.ambiguityService.getter(v0 + 64);
    v39 = *(_QWORD *)(v0 + 88);
    v40 = *(_QWORD *)(v0 + 96);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 64), v39);
    *(_QWORD *)(v0 + 1152) = *(_QWORD *)(v38 + 32);
    swift_beginAccess();
    *(_QWORD *)(v0 + 1160) = *(_QWORD *)(v38 + 184);
    v73 = **(int **)(v40 + 32) + *(_QWORD *)(v40 + 32);
    swift_retain();
    v41 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1168) = v41;
    *v41 = v0;
    v41[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
    v43 = *(_QWORD *)(v0 + 336);
    v42 = *(_QWORD *)(v0 + 344);
    v74[14] = v39;
    v74[15] = v40;
    v74[12] = v43;
    v74[13] = v42;
    __asm { BR              X8 }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v44 = Logger.logObject.getter();
  v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v46 = 0;
    _os_log_impl(&dword_1B4BE6000, v44, v45, "[DecisionEngine] Skipping ambiguity handling as there are no actions from action generator", v46, 2u);
    MEMORY[0x1B5E44758](v46, -1, -1);
  }

  v47 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 1112) = v47;
  *v47 = v0;
  v47[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  return CorrectionsService.getCorrectionsAndFollowupAction(input:conversationUserInput:)(*(_QWORD *)(v0 + 656), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 304));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 1072) = v0;
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 552), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v1 = *(void **)(v0 + 912);
    v16 = *(_QWORD *)(v0 + 728);
    v11 = *(_QWORD *)(v0 + 712);
    v12 = *(_QWORD *)(v0 + 688);
    v2 = *(_QWORD *)(v0 + 680);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 944);
    v15 = *(_QWORD *)(v0 + 664);
    v3 = *(_QWORD *)(v0 + 624);
    v4 = *(_QWORD *)(v0 + 616);
    v5 = *(_QWORD *)(v0 + 608);
    v6 = *(_QWORD *)(v0 + 560);
    v13 = *(_QWORD *)(v0 + 320);
    v7 = *(_QWORD *)(v0 + 296);
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v6, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v8 = type metadata accessor for DecisionEngineResponse();
    v9 = v7 + *(int *)(v8 + 24);
    v14(v9, v11, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v2);
    *(_QWORD *)v7 = v13;
    *(_BYTE *)(v7 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
    outlined destroy of ReferenceResolutionClientProtocol?(v15, &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v2);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 1080) = static MessageBusActor.shared;
    swift_retain();
    return swift_task_switch();
  }
}

{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[136] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v0[89], v0[41], 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 1096);
  v2 = *(_QWORD *)(v0 + 328) + *(int *)(v0 + 1232);
  if ((DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v0 + 1240)) & 1) == 0|| v1)
  {
    v5 = *(_QWORD *)(v0 + 1096);
    v6 = *(_QWORD *)(v0 + 712);
    v7 = *(_QWORD *)(v0 + 688);
    v8 = *(_QWORD *)(v0 + 680);
    v9 = *(_QWORD *)(v0 + 296);
    swift_release();
    v10 = v9 + *(int *)(type metadata accessor for DecisionEngineResponse() + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v6, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v8);
    *(_QWORD *)v9 = v5;
    *(_BYTE *)(v9 + 8) = 0;
    return swift_task_switch();
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1104) = v3;
    *v3 = v0;
    v3[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
    return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 328), v0 + 16);
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(void **)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 688);
  v10 = *(_QWORD *)(v0 + 680);
  v11 = *(_QWORD *)(v0 + 712);
  v14 = *(_QWORD *)(v0 + 664);
  v15 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 624);
  v4 = *(_QWORD *)(v0 + 616);
  v5 = *(_QWORD *)(v0 + 608);
  v6 = *(_QWORD *)(v0 + 560);
  v12 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 552);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of CamOutput(v6, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v7(v11, v10);
  v8 = type metadata accessor for DecisionEngineResponse();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v12, 0, 1, v8);
  outlined destroy of CamOutput(v13, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  outlined destroy of ReferenceResolutionClientProtocol?(v14, &demangling cache variable for type metadata for Input?);
  v7(v15, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 936);
  v2 = *(_QWORD *)(v0 + 680);
  v3 = *(_QWORD *)(v0 + 664);
  v4 = *(_QWORD *)(v0 + 640);
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(*(_QWORD *)(v0 + 656), v3, &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v3, v4, &demangling cache variable for type metadata for Input?);
  v5 = v1(v4, 1, v2);
  v6 = *(_QWORD *)(v0 + 704);
  if (v5 == 1)
  {
    v7 = *(_QWORD *)(v0 + 640);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 688) + 16))(v6, *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 680));
    outlined destroy of ReferenceResolutionClientProtocol?(v7, &demangling cache variable for type metadata for Input?);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v0 + 944))(v6, *(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 680));
  }
  *(_QWORD *)(v0 + 1120) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[141] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v0[88], v0[41], 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 1136);
  v2 = *(_QWORD *)(v0 + 328) + *(int *)(v0 + 1232);
  if ((DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v0 + 1240)) & 1) == 0|| v1)
  {
    v5 = *(_QWORD *)(v0 + 1136);
    v6 = *(_QWORD *)(v0 + 704);
    v7 = *(_QWORD *)(v0 + 688);
    v8 = *(_QWORD *)(v0 + 680);
    v9 = *(_QWORD *)(v0 + 296);
    swift_release();
    v10 = v9 + *(int *)(type metadata accessor for DecisionEngineResponse() + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v6, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v8);
    *(_QWORD *)v9 = v5;
    *(_BYTE *)(v9 + 8) = 0;
    return swift_task_switch();
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1144) = v3;
    *v3 = v0;
    v3[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
    return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 328), v0 + 16);
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  v1 = *(void **)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 704);
  v4 = *(_QWORD *)(v0 + 688);
  v5 = *(_QWORD *)(v0 + 680);
  v6 = *(_QWORD *)(v0 + 664);
  v7 = *(_QWORD *)(v0 + 296);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v3, v5);
  v9 = type metadata accessor for DecisionEngineResponse();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 0, 1, v9);
  outlined destroy of ReferenceResolutionClientProtocol?(v6, &demangling cache variable for type metadata for Input?);
  v8(v2, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)
  {

    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  _QWORD *v9;

  v1 = v0[61];
  v2 = v0[62];
  v3 = v0[60];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 8));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[60], &demangling cache variable for type metadata for AmbiguityServiceResponse?);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "[DecisionEngine] AmbiguityService couldn't find best action. Falling back to default input", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }

    v0[149] = static MessageBusActor.shared;
    swift_retain();
    v7 = (_QWORD *)swift_task_alloc();
    v0[150] = (uint64_t)v7;
    *v7 = v0;
    v7[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
    return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v0[91], v0[41], 0, 1);
  }
  else
  {
    outlined init with take of StringKeyedValue(v0[60], v0[63], type metadata accessor for AmbiguityServiceResponse);
    v9 = (_QWORD *)swift_task_alloc();
    v0[147] = (uint64_t)v9;
    *v9 = v0;
    v9[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
    return DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:)(v0[37], v0[63], v0[41], v0[42], v0[43], (uint64_t)(v0 + 2));
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 1184) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 688);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_QWORD *)(v0 + 664);
  v6 = *(_QWORD *)(v0 + 504);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined destroy of CamOutput(v6, type metadata accessor for AmbiguityServiceResponse);
  outlined destroy of ReferenceResolutionClientProtocol?(v5, &demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 1208);
  v2 = *(_QWORD *)(v0 + 328) + *(int *)(v0 + 1232);
  if ((DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v0 + 1240)) & 1) == 0|| v1)
  {
    v5 = *(_QWORD *)(v0 + 1208);
    v6 = *(_QWORD *)(v0 + 728);
    v7 = *(_QWORD *)(v0 + 688);
    v8 = *(_QWORD *)(v0 + 680);
    v9 = *(_QWORD *)(v0 + 296);
    swift_release();
    v10 = v9 + *(int *)(type metadata accessor for DecisionEngineResponse() + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v10, v6, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v8);
    *(_QWORD *)v9 = v5;
    *(_BYTE *)(v9 + 8) = 0;
    return swift_task_switch();
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1216) = v3;
    *v3 = v0;
    v3[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
    return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 328), v0 + 16);
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 728);
  v3 = *(_QWORD *)(v0 + 688);
  v4 = *(_QWORD *)(v0 + 680);
  v5 = *(_QWORD *)(v0 + 664);
  v6 = *(_QWORD *)(v0 + 296);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for DecisionEngineResponse();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  outlined destroy of ReferenceResolutionClientProtocol?(v5, &demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 296);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for DecisionEngineResponse();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 0, 1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 688);
  v3 = *(_QWORD *)(v0 + 680);
  v9 = *(_QWORD *)(v0 + 712);
  v10 = *(_QWORD *)(v0 + 664);
  v4 = *(_QWORD *)(v0 + 624);
  v5 = *(_QWORD *)(v0 + 616);
  v6 = *(_QWORD *)(v0 + 608);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v7(v9, v3);
  outlined destroy of ReferenceResolutionClientProtocol?(v10, &demangling cache variable for type metadata for Input?);
  v7(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 680));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;

  v1 = v0[61];
  v2 = v0[62];
  v3 = v0[60];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 8));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v1);
  outlined destroy of ReferenceResolutionClientProtocol?(v0[60], &demangling cache variable for type metadata for AmbiguityServiceResponse?);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1B4BE6000, v4, v5, "[DecisionEngine] AmbiguityService couldn't find best action. Falling back to default input", v6, 2u);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }

  v0[149] = static MessageBusActor.shared;
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc();
  v0[150] = (uint64_t)v7;
  *v7 = v0;
  v7[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v0[91], v0[41], 0, 1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 912);
  v2 = *(_QWORD *)(v0 + 688);
  v3 = *(_QWORD *)(v0 + 664);
  v4 = *(_QWORD *)(v0 + 504);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined destroy of CamOutput(v4, type metadata accessor for AmbiguityServiceResponse);
  outlined destroy of ReferenceResolutionClientProtocol?(v3, &demangling cache variable for type metadata for Input?);
  (*(void (**)(_QWORD, _QWORD))(v2 + 8))(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 680));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 968) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 1024) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 1048) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 1096) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 1136) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 1208) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DecisionEngine.CAMFallbackInfo.init(pommesSearchReason:pommesError:emptyNLInput:hasUndoRequest:conjunctionInfo:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_BYTE *)(a8 + 32) = a5;
  *(_BYTE *)(a8 + 33) = a6;
  *(_QWORD *)(a8 + 40) = a7;
  return result;
}

uint64_t DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1B4BE6000, v17, v18, "[DecisionEngine] userWantedToUndo present, so we need to generate CAM fallback flow to produce undo fallback behavior.", v19, 2u);
      MEMORY[0x1B5E44758](v19, -1, -1);
    }

    return 1;
  }
  else
  {
    v21 = *(_QWORD *)(v3 + 192);
    v22 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v15, 1, 1, v22);
    v23 = type metadata accessor for ServerFallbackReason();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v12, 1, 1, v23);
    if ((specialized ServerFallbackDisablingUtils.shouldDisableServerFallback(isDomainDirected:topNlParse:serverFallbackReason:)(1, (uint64_t)v15, (uint64_t)v12) & 1) != 0)
    {
      v24 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v9, 1, 1, v24);
      v25 = (_QWORD *)swift_allocObject();
      v25[2] = 0;
      v25[3] = 0;
      v25[4] = v21;
      v25[5] = a1;
      v25[6] = a2;
      swift_retain();
      swift_bridgeObjectRetain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:), (uint64_t)v25);
      swift_release();
      v26 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
      v20 = objc_msgSend(v26, sel_shouldDisableServerFallbackDomain);

    }
    else
    {
      v20 = 0;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for ServerFallbackReason?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc();
      v31 = swift_slowAlloc();
      v34 = v31;
      *(_DWORD *)v30 = 67109378;
      LODWORD(v33) = (_DWORD)v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 8) = 2080;
      swift_bridgeObjectRetain();
      v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v28, v29, "[DecisionEngine] empty nlParses and shouldDisableServerfallbackWithABExperiment = %{BOOL}d for executionRequestId: %s", (uint8_t *)v30, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v31, -1, -1);
      MEMORY[0x1B5E44758](v30, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  return (uint64_t)v20;
}

uint64_t DecisionEngine.getCAMFallback(conversationHelperInput:info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[49] = a3;
  v4[50] = v3;
  v4[47] = a1;
  v4[48] = a2;
  v5 = type metadata accessor for Parse();
  v4[51] = v5;
  v4[52] = *(_QWORD *)(v5 - 8);
  v4[53] = swift_task_alloc();
  v6 = type metadata accessor for Input();
  v4[54] = v6;
  v4[55] = *(_QWORD *)(v6 - 8);
  v4[56] = swift_task_alloc();
  v7 = type metadata accessor for Parse.DirectInvocation();
  v4[57] = v7;
  v4[58] = *(_QWORD *)(v7 - 8);
  v4[59] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[60] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t DecisionEngine.getCAMFallback(conversationHelperInput:info:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = MEMORY[0x1E0DEA968];
  if (v2)
  {
    *(_QWORD *)(v0 + 208) = *(_QWORD *)v1;
    *(_QWORD *)(v0 + 232) = v3;
    *(_QWORD *)(v0 + 216) = v2;
    outlined init with take of Any((_OWORD *)(v0 + 208), (_OWORD *)(v0 + 16));
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 16), 0xD000000000000012, 0x80000001B4EFB300, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v1 = *(_QWORD *)(v0 + 392);
  }
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
  {
    v6 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v0 + 328) = v3;
    *(_QWORD *)(v0 + 304) = v6;
    *(_QWORD *)(v0 + 312) = v5;
    outlined init with take of Any((_OWORD *)(v0 + 304), (_OWORD *)(v0 + 48));
    swift_bridgeObjectRetain();
    v7 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 48), 0x724573656D6D6F70, 0xEB00000000726F72, v7);
    swift_bridgeObjectRelease();
    v1 = *(_QWORD *)(v0 + 392);
  }
  v8 = *(_BYTE *)(v1 + 32);
  v9 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(v0 + 104) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(v0 + 80) = v8;
  outlined init with take of Any((_OWORD *)(v0 + 80), (_OWORD *)(v0 + 112));
  v10 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 112), 0x494C4E7974706D65, 0xEC0000007475706ELL, v10);
  swift_bridgeObjectRelease();
  v11 = *(_BYTE *)(v1 + 33);
  *(_QWORD *)(v0 + 168) = v9;
  *(_BYTE *)(v0 + 144) = v11;
  outlined init with take of Any((_OWORD *)(v0 + 144), (_OWORD *)(v0 + 176));
  v12 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 176), 0x526F646E55736168, 0xEE00747365757165, v12);
  swift_bridgeObjectRelease();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v1 + 40, v0 + 360, (uint64_t *)&demangling cache variable for type metadata for RequestConjunctionInfo?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v0 + 360, v0 + 368, (uint64_t *)&demangling cache variable for type metadata for RequestConjunctionInfo?);
  outlined retain of RequestConjunctionInfo?((id *)(v0 + 360));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RequestConjunctionInfo?);
  lazy protocol witness table accessor for type RequestConjunctionInfo? and conformance <A> A?();
  v13 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v15 = v14;
  outlined release of RequestConjunctionInfo?((id *)(v0 + 360));
  swift_release();
  *(_QWORD *)(v0 + 264) = MEMORY[0x1E0CB0338];
  *(_QWORD *)(v0 + 240) = v13;
  *(_QWORD *)(v0 + 248) = v15;
  outlined init with take of Any((_OWORD *)(v0 + 240), (_OWORD *)(v0 + 272));
  outlined copy of Data._Representation(v13, v15);
  v16 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 272), 0x74636E756A6E6F63, 0xEF6F666E496E6F69, v16);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v13, v15);
  v18 = *(_QWORD *)(v0 + 464);
  v17 = *(_QWORD *)(v0 + 472);
  v19 = *(_QWORD *)(v0 + 456);
  v21 = *(_QWORD *)(v0 + 416);
  v20 = *(_QWORD *)(v0 + 424);
  v22 = *(_QWORD *)(v0 + 408);
  static CamDirectInvocationIdentifiers.fallback.getter();
  Parse.DirectInvocation.init(identifier:userData:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v20, v17, v19);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v21 + 104))(v20, *MEMORY[0x1E0D9C658], v22);
  Input.init(parse:)();
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 488) = v23;
  *v23 = v0;
  v23[1] = DecisionEngine.getCAMFallback(conversationHelperInput:info:);
  return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 384), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 496);
  v2 = *(_QWORD *)(v0 + 472);
  v3 = *(_QWORD *)(v0 + 456);
  v4 = *(_QWORD *)(v0 + 464);
  v6 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 432);
  v8 = *(_QWORD *)(v0 + 376);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v9 = v8 + *(int *)(type metadata accessor for DecisionEngineResponse() + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v5, v7);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v9, 0, 1, v7);
  *(_QWORD *)v8 = v1;
  *(_BYTE *)(v8 + 8) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t DecisionEngine.getCAMFallback(conversationHelperInput:info:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 496) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #3 in DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;

  v20[0] = a3;
  v20[1] = a4;
  v7 = type metadata accessor for Parse();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Input();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v15(v14, a3, v11);
  v16 = Input.alternatives.getter();
  v17 = *(void (**)(char *, uint64_t))(v12 + 8);
  v17(v14, v11);
  v21 = v16;
  specialized Array.remove(at:)(a1, (uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Parse>);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1B4EE3F50;
  v15(v14, v20[0], v11);
  Input.parse.getter();
  v17(v14, v11);
  v20[2] = v18;
  specialized Array.append<A>(contentsOf:)(v21);
  return Input.init(parse:alternatives:)();
}

uint64_t DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[10] = a6;
  v7[11] = v6;
  v7[8] = a2;
  v7[9] = a3;
  v7[7] = a1;
  v8 = type metadata accessor for PluginAction();
  v7[12] = v8;
  v7[13] = *(_QWORD *)(v8 - 8);
  v7[14] = swift_task_alloc();
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
  v7[17] = swift_task_alloc();
  v9 = type metadata accessor for AmbiguityOutput(0);
  v7[18] = v9;
  v7[19] = *(_QWORD *)(v9 - 8);
  v7[20] = swift_task_alloc();
  v7[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v7[22] = swift_task_alloc();
  v7[23] = swift_task_alloc();
  v10 = type metadata accessor for Input();
  v7[24] = v10;
  v7[25] = *(_QWORD *)(v10 - 8);
  v7[26] = swift_task_alloc();
  v7[27] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v7[28] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void (*v46)(_QWORD, unint64_t, uint64_t);
  uint64_t v47;
  char v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  _QWORD *v72;
  uint64_t v73;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 64), v3, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    v18 = *(_QWORD *)(v0 + 216);
    v19 = *(_QWORD *)(v0 + 192);
    v20 = *(_QWORD *)(v0 + 184);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 200) + 32);
    *(_QWORD *)(v0 + 232) = v21;
    v21(v18, v20, v19);
    v22 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 240) = v22;
    *v22 = v0;
    v22[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
    v23 = *(_QWORD *)(v0 + 216);
    return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v23, *(_QWORD *)(v0 + 72), 0, 0);
  }
  outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 184), &demangling cache variable for type metadata for Input?);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = type metadata accessor for AmbiguityServiceResponse(0);
  outlined init with copy of ReferenceResolutionClientProtocol?(v7 + *(int *)(v8 + 20), v6, &demangling cache variable for type metadata for AmbiguityOutput?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 136), &demangling cache variable for type metadata for AmbiguityOutput?);
    goto LABEL_4;
  }
  v24 = *(_QWORD *)(v0 + 160);
  v25 = *(_QWORD *)(v0 + 168);
  outlined init with take of StringKeyedValue(*(_QWORD *)(v0 + 136), v25, type metadata accessor for AmbiguityOutput);
  outlined init with copy of ConversationHelperInput(v25, v24, type metadata accessor for AmbiguityOutput);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v26 = *(_QWORD *)(v0 + 208);
    v27 = *(_QWORD *)(v0 + 192);
    v28 = *(_QWORD *)(v0 + 160);
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 200) + 32);
    *(_QWORD *)(v0 + 336) = v29;
    v29(v26, v28, v27);
    if (one-time initialization token for executor != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_1B4BE6000, v31, v32, "[AmbiguityService]: Received an ambiguity flow", v33, 2u);
      MEMORY[0x1B5E44758](v33, -1, -1);
    }

    v34 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 344) = v34;
    *v34 = v0;
    v34[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
    v23 = *(_QWORD *)(v0 + 208);
    return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v23, *(_QWORD *)(v0 + 72), 0, 0);
  }
  v37 = **(_QWORD **)(v0 + 160);
  *(_QWORD *)(v0 + 256) = v37;
  if (one-time initialization token for executor != -1)
    swift_once();
  v38 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 264) = __swift_project_value_buffer(v38, (uint64_t)static Logger.executor);
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v41 = 0;
    _os_log_impl(&dword_1B4BE6000, v39, v40, "[DecisionEngine]: Received actions to execute", v41, 2u);
    MEMORY[0x1B5E44758](v41, -1, -1);
  }

  v42 = *(_QWORD *)(v37 + 16);
  *(_QWORD *)(v0 + 272) = v42;
  if (v42)
  {
    v43 = *(_QWORD *)(v0 + 96);
    v44 = *(_QWORD *)(v0 + 104);
    v45 = *(_DWORD *)(v44 + 80);
    *(_DWORD *)(v0 + 368) = v45;
    *(_QWORD *)(v0 + 280) = *(_QWORD *)(v44 + 72);
    v46 = *(void (**)(_QWORD, unint64_t, uint64_t))(v44 + 16);
    *(_QWORD *)(v0 + 288) = v46;
    *(_QWORD *)(v0 + 296) = 0;
    v46(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 256) + ((v45 + 32) & ~(unint64_t)v45), v43);
    if (PluginAction.flowHandlerId.getter() == 0xD000000000000013 && v47 == 0x80000001B4EF6400)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v48 & 1) == 0)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 288))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 96));
        v61 = Logger.logObject.getter();
        v62 = static os_log_type_t.debug.getter();
        v63 = os_log_type_enabled(v61, v62);
        v64 = *(_QWORD *)(v0 + 120);
        v65 = *(_QWORD *)(v0 + 96);
        v66 = *(_QWORD *)(v0 + 104);
        if (v63)
        {
          v67 = swift_slowAlloc();
          v68 = swift_slowAlloc();
          v73 = v68;
          *(_DWORD *)v67 = 136315138;
          v69 = PluginAction.flowHandlerId.getter();
          *(_QWORD *)(v67 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, &v73);
          swift_bridgeObjectRelease();
          v71 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
          v71(v64, v65);
          _os_log_impl(&dword_1B4BE6000, v61, v62, "[DecisionEngine]: Trying to load new conversation for %s", (uint8_t *)v67, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v68, -1, -1);
          MEMORY[0x1B5E44758](v67, -1, -1);
        }
        else
        {
          v71 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
          v71(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
        }

        *(_QWORD *)(v0 + 304) = v71;
        v72 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 312) = v72;
        *v72 = v0;
        v72[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
        return ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 72));
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v51 = 0;
      _os_log_impl(&dword_1B4BE6000, v49, v50, "[DecisionEngine]: Found SNLC handler. Returning corresponding response", v51, 2u);
      MEMORY[0x1B5E44758](v51, -1, -1);
    }
    v52 = *(_QWORD *)(v0 + 192);
    v53 = *(_QWORD *)(v0 + 200);
    v55 = *(_QWORD *)(v0 + 168);
    v54 = *(_QWORD *)(v0 + 176);
    v56 = *(_QWORD *)(v0 + 128);
    v57 = *(_QWORD *)(v0 + 96);
    v58 = *(_QWORD *)(v0 + 104);
    v59 = *(_QWORD *)(v0 + 56);

    PluginAction.input.getter();
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v56, v57);
    outlined destroy of CamOutput(v55, type metadata accessor for AmbiguityOutput);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v52);
    *(_QWORD *)v59 = 0;
    *(_BYTE *)(v59 + 8) = 0;
    v60 = type metadata accessor for DecisionEngineResponse();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v54, v59 + *(int *)(v60 + 24), &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v59, 0, 1, v60);
LABEL_32:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  swift_bridgeObjectRelease();
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 168), type metadata accessor for AmbiguityOutput);
LABEL_4:
  v9 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 72);
  v11 = type metadata accessor for ConversationHelperInput(0);
  if ((DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(_QWORD *)(v10 + *(int *)(v11 + 20)), *(_QWORD *)(v10 + *(int *)(v11 + 20) + 8), *(_BYTE *)(v9 + 33)) & 1) == 0)
  {
    v35 = *(_QWORD *)(v0 + 56);
    swift_release();
    v36 = type metadata accessor for DecisionEngineResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
    goto LABEL_32;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1B4BE6000, v13, v14, "[DecisionEngine]: Generating CAM Fallback", v15, 2u);
    MEMORY[0x1B5E44758](v15, -1, -1);
  }

  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 360) = v16;
  *v16 = v0;
  v16[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
  return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  void (*v45)(_QWORD, unint64_t, uint64_t);
  uint64_t v46;
  char v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  _QWORD *v71;
  uint64_t v72;

  v1 = *(_QWORD *)(v0 + 248);
  if (v1)
  {
    v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 232);
    v3 = *(_QWORD *)(v0 + 216);
    v4 = *(_QWORD *)(v0 + 192);
    v5 = *(_QWORD *)(v0 + 200);
    v6 = *(_QWORD *)(v0 + 56);
    swift_release();
    v7 = type metadata accessor for DecisionEngineResponse();
    v8 = v6 + *(int *)(v7 + 24);
    v2(v8, v3, v4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
    *(_QWORD *)v6 = v1;
    *(_BYTE *)(v6 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));
  v10 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 64);
  v14 = type metadata accessor for AmbiguityServiceResponse(0);
  outlined init with copy of ReferenceResolutionClientProtocol?(v13 + *(int *)(v14 + 20), v12, &demangling cache variable for type metadata for AmbiguityOutput?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 136), &demangling cache variable for type metadata for AmbiguityOutput?);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 168);
    outlined init with take of StringKeyedValue(*(_QWORD *)(v0 + 136), v24, type metadata accessor for AmbiguityOutput);
    outlined init with copy of ConversationHelperInput(v24, v23, type metadata accessor for AmbiguityOutput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v25 = *(_QWORD *)(v0 + 208);
      v26 = *(_QWORD *)(v0 + 192);
      v27 = *(_QWORD *)(v0 + 160);
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 200) + 32);
      *(_QWORD *)(v0 + 336) = v28;
      v28(v25, v27, v26);
      if (one-time initialization token for executor != -1)
        swift_once();
      v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v32 = 0;
        _os_log_impl(&dword_1B4BE6000, v30, v31, "[AmbiguityService]: Received an ambiguity flow", v32, 2u);
        MEMORY[0x1B5E44758](v32, -1, -1);
      }

      v33 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 344) = v33;
      *v33 = v0;
      v33[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
      return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 72), 0, 0);
    }
    v36 = **(_QWORD **)(v0 + 160);
    *(_QWORD *)(v0 + 256) = v36;
    if (one-time initialization token for executor != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 264) = __swift_project_value_buffer(v37, (uint64_t)static Logger.executor);
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_1B4BE6000, v38, v39, "[DecisionEngine]: Received actions to execute", v40, 2u);
      MEMORY[0x1B5E44758](v40, -1, -1);
    }

    v41 = *(_QWORD *)(v36 + 16);
    *(_QWORD *)(v0 + 272) = v41;
    if (v41)
    {
      v42 = *(_QWORD *)(v0 + 96);
      v43 = *(_QWORD *)(v0 + 104);
      v44 = *(_DWORD *)(v43 + 80);
      *(_DWORD *)(v0 + 368) = v44;
      *(_QWORD *)(v0 + 280) = *(_QWORD *)(v43 + 72);
      v45 = *(void (**)(_QWORD, unint64_t, uint64_t))(v43 + 16);
      *(_QWORD *)(v0 + 288) = v45;
      *(_QWORD *)(v0 + 296) = 0;
      v45(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 256) + ((v44 + 32) & ~(unint64_t)v44), v42);
      if (PluginAction.flowHandlerId.getter() == 0xD000000000000013 && v46 == 0x80000001B4EF6400)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v47 & 1) == 0)
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 288))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 96));
          v60 = Logger.logObject.getter();
          v61 = static os_log_type_t.debug.getter();
          v62 = os_log_type_enabled(v60, v61);
          v63 = *(_QWORD *)(v0 + 120);
          v64 = *(_QWORD *)(v0 + 96);
          v65 = *(_QWORD *)(v0 + 104);
          if (v62)
          {
            v66 = swift_slowAlloc();
            v67 = swift_slowAlloc();
            v72 = v67;
            *(_DWORD *)v66 = 136315138;
            v68 = PluginAction.flowHandlerId.getter();
            *(_QWORD *)(v66 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, &v72);
            swift_bridgeObjectRelease();
            v70 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
            v70(v63, v64);
            _os_log_impl(&dword_1B4BE6000, v60, v61, "[DecisionEngine]: Trying to load new conversation for %s", (uint8_t *)v66, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1B5E44758](v67, -1, -1);
            MEMORY[0x1B5E44758](v66, -1, -1);
          }
          else
          {
            v70 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
            v70(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
          }

          *(_QWORD *)(v0 + 304) = v70;
          v71 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 312) = v71;
          *v71 = v0;
          v71[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
          return ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 72));
        }
      }
      swift_bridgeObjectRelease();
      swift_release();
      v48 = Logger.logObject.getter();
      v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v50 = 0;
        _os_log_impl(&dword_1B4BE6000, v48, v49, "[DecisionEngine]: Found SNLC handler. Returning corresponding response", v50, 2u);
        MEMORY[0x1B5E44758](v50, -1, -1);
      }
      v51 = *(_QWORD *)(v0 + 192);
      v52 = *(_QWORD *)(v0 + 200);
      v54 = *(_QWORD *)(v0 + 168);
      v53 = *(_QWORD *)(v0 + 176);
      v55 = *(_QWORD *)(v0 + 128);
      v56 = *(_QWORD *)(v0 + 96);
      v57 = *(_QWORD *)(v0 + 104);
      v58 = *(_QWORD *)(v0 + 56);

      PluginAction.input.getter();
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v55, v56);
      outlined destroy of CamOutput(v54, type metadata accessor for AmbiguityOutput);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v53, 0, 1, v51);
      *(_QWORD *)v58 = 0;
      *(_BYTE *)(v58 + 8) = 0;
      v59 = type metadata accessor for DecisionEngineResponse();
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v53, v58 + *(int *)(v59 + 24), &demangling cache variable for type metadata for Input?);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v58, 0, 1, v59);
      goto LABEL_3;
    }
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 168), type metadata accessor for AmbiguityOutput);
  }
  v15 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 72);
  v17 = type metadata accessor for ConversationHelperInput(0);
  if ((DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(_QWORD *)(v16 + *(int *)(v17 + 20)), *(_QWORD *)(v16 + *(int *)(v17 + 20) + 8), *(_BYTE *)(v15 + 33)) & 1) == 0)
  {
    v34 = *(_QWORD *)(v0 + 56);
    swift_release();
    v35 = type metadata accessor for DecisionEngineResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 1, 1, v35);
    goto LABEL_3;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1B4BE6000, v19, v20, "[DecisionEngine]: Generating CAM Fallback", v21, 2u);
    MEMORY[0x1B5E44758](v21, -1, -1);
  }

  v22 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 360) = v22;
  *v22 = v0;
  v22[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
  return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  _QWORD *v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;

  if (*(_QWORD *)(v0 + 328))
  {
    v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 288);
    v2 = *(_QWORD *)(v0 + 128);
    v3 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 96);
    swift_bridgeObjectRelease();
    swift_release();
    v1(v3, v2, v4);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.debug.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 96);
    if (v7)
    {
      v62 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v63 = v11;
      *(_DWORD *)v10 = 136315138;
      v12 = PluginAction.flowHandlerId.getter();
      *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v62(v8, v9);
      _os_log_impl(&dword_1B4BE6000, v5, v6, "[DecisionEngine]: Found new conversation for %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v11, -1, -1);
      MEMORY[0x1B5E44758](v10, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0 + 304))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 96));
    }

    v24 = *(_QWORD *)(v0 + 328);
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
    v26 = *(_QWORD *)(v0 + 192);
    v27 = *(_QWORD *)(v0 + 200);
    v29 = *(_QWORD *)(v0 + 168);
    v28 = *(_QWORD *)(v0 + 176);
    v30 = *(_QWORD *)(v0 + 128);
    v31 = *(_QWORD *)(v0 + 96);
    v32 = *(_QWORD *)(v0 + 56);
    PluginAction.input.getter();
    v25(v30, v31);
    outlined destroy of CamOutput(v29, type metadata accessor for AmbiguityOutput);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v28, 0, 1, v26);
    *(_QWORD *)v32 = v24;
    *(_BYTE *)(v32 + 8) = 0;
    v33 = type metadata accessor for DecisionEngineResponse();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v28, v32 + *(int *)(v33 + 24), &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 0, 1, v33);
    goto LABEL_13;
  }
  (*(void (**)(_QWORD, _QWORD))(v0 + 304))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 96));
  v14 = *(_QWORD *)(v0 + 296) + 1;
  if (v14 != *(_QWORD *)(v0 + 272))
  {
    *(_QWORD *)(v0 + 296) = v14;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 288))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 256)+ ((*(unsigned __int8 *)(v0 + 368) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 368))+ *(_QWORD *)(v0 + 280) * v14, *(_QWORD *)(v0 + 96));
    if (PluginAction.flowHandlerId.getter() == 0xD000000000000013 && v34 == 0x80000001B4EF6400)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 288))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 96));
        v50 = Logger.logObject.getter();
        v51 = static os_log_type_t.debug.getter();
        v52 = os_log_type_enabled(v50, v51);
        v53 = *(_QWORD *)(v0 + 120);
        v54 = *(_QWORD *)(v0 + 96);
        v55 = *(_QWORD *)(v0 + 104);
        if (v52)
        {
          v56 = swift_slowAlloc();
          v57 = swift_slowAlloc();
          v63 = v57;
          *(_DWORD *)v56 = 136315138;
          v58 = PluginAction.flowHandlerId.getter();
          *(_QWORD *)(v56 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, &v63);
          swift_bridgeObjectRelease();
          v60 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
          v60(v53, v54);
          _os_log_impl(&dword_1B4BE6000, v50, v51, "[DecisionEngine]: Trying to load new conversation for %s", (uint8_t *)v56, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v57, -1, -1);
          MEMORY[0x1B5E44758](v56, -1, -1);
        }
        else
        {
          v60 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
          v60(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
        }

        *(_QWORD *)(v0 + 304) = v60;
        v61 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 312) = v61;
        *v61 = v0;
        v61[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
        return ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 72));
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_1B4BE6000, v38, v39, "[DecisionEngine]: Found SNLC handler. Returning corresponding response", v40, 2u);
      MEMORY[0x1B5E44758](v40, -1, -1);
    }
    v41 = *(_QWORD *)(v0 + 192);
    v42 = *(_QWORD *)(v0 + 200);
    v44 = *(_QWORD *)(v0 + 168);
    v43 = *(_QWORD *)(v0 + 176);
    v45 = *(_QWORD *)(v0 + 128);
    v46 = *(_QWORD *)(v0 + 96);
    v47 = *(_QWORD *)(v0 + 104);
    v48 = *(_QWORD *)(v0 + 56);

    PluginAction.input.getter();
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v45, v46);
    outlined destroy of CamOutput(v44, type metadata accessor for AmbiguityOutput);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v43, 0, 1, v41);
    *(_QWORD *)v48 = 0;
    *(_BYTE *)(v48 + 8) = 0;
    v49 = type metadata accessor for DecisionEngineResponse();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v43, v48 + *(int *)(v49 + 24), &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 0, 1, v49);
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 168), type metadata accessor for AmbiguityOutput);
  v15 = *(_QWORD *)(v0 + 80);
  v16 = *(_QWORD *)(v0 + 72);
  v17 = type metadata accessor for ConversationHelperInput(0);
  if ((DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(_QWORD *)(v16 + *(int *)(v17 + 20)), *(_QWORD *)(v16 + *(int *)(v17 + 20) + 8), *(_BYTE *)(v15 + 33)) & 1) == 0)
  {
    v35 = *(_QWORD *)(v0 + 56);
    swift_release();
    v36 = type metadata accessor for DecisionEngineResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 1, 1, v36);
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1B4BE6000, v19, v20, "[DecisionEngine]: Generating CAM Fallback", v21, 2u);
    MEMORY[0x1B5E44758](v21, -1, -1);
  }

  v22 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 360) = v22;
  *v22 = v0;
  v22[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
  return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 56);
  swift_release();
  outlined destroy of CamOutput(v6, type metadata accessor for AmbiguityOutput);
  v8 = type metadata accessor for DecisionEngineResponse();
  v9 = v7 + *(int *)(v8 + 24);
  v2(v9, v3, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v5);
  *(_QWORD *)v7 = v1;
  *(_BYTE *)(v7 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  swift_release();
  v2 = type metadata accessor for DecisionEngineResponse();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  _QWORD *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  _QWORD *v56;
  uint64_t v57;

  v1 = *(void **)(v0 + 320);
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 320);
    v7 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
    v8 = *(_QWORD *)(v0 + 128);
    v9 = *(_QWORD *)(v0 + 96);
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    v57 = v11;
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)(v0 + 40) = v6;
    v12 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v13 = String.init<A>(describing:)();
    *(_QWORD *)(v10 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v57);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v4, v5, "[AmbiguityService]: Error when loading a new conversation from a plugin action: %s. Will try the next pluginAction", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v11, -1, -1);
    MEMORY[0x1B5E44758](v10, -1, -1);

    v7(v8, v9);
  }
  else
  {
    v15 = *(void **)(v0 + 320);
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
    v17 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 96);

    v16(v17, v18);
  }
  v19 = *(_QWORD *)(v0 + 296) + 1;
  if (v19 != *(_QWORD *)(v0 + 272))
  {
    *(_QWORD *)(v0 + 296) = v19;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 288))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 256)+ ((*(unsigned __int8 *)(v0 + 368) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 368))+ *(_QWORD *)(v0 + 280) * v19, *(_QWORD *)(v0 + 96));
    if (PluginAction.flowHandlerId.getter() == 0xD000000000000013 && v29 == 0x80000001B4EF6400)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 288))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 96));
        v45 = Logger.logObject.getter();
        v46 = static os_log_type_t.debug.getter();
        v47 = os_log_type_enabled(v45, v46);
        v48 = *(_QWORD *)(v0 + 120);
        v49 = *(_QWORD *)(v0 + 96);
        v50 = *(_QWORD *)(v0 + 104);
        if (v47)
        {
          v51 = swift_slowAlloc();
          v52 = swift_slowAlloc();
          v57 = v52;
          *(_DWORD *)v51 = 136315138;
          v53 = PluginAction.flowHandlerId.getter();
          *(_QWORD *)(v51 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, &v57);
          swift_bridgeObjectRelease();
          v55 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
          v55(v48, v49);
          _os_log_impl(&dword_1B4BE6000, v45, v46, "[DecisionEngine]: Trying to load new conversation for %s", (uint8_t *)v51, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v52, -1, -1);
          MEMORY[0x1B5E44758](v51, -1, -1);
        }
        else
        {
          v55 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
          v55(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
        }

        *(_QWORD *)(v0 + 304) = v55;
        v56 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 312) = v56;
        *v56 = v0;
        v56[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
        return ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 72));
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_1B4BE6000, v33, v34, "[DecisionEngine]: Found SNLC handler. Returning corresponding response", v35, 2u);
      MEMORY[0x1B5E44758](v35, -1, -1);
    }
    v36 = *(_QWORD *)(v0 + 192);
    v37 = *(_QWORD *)(v0 + 200);
    v39 = *(_QWORD *)(v0 + 168);
    v38 = *(_QWORD *)(v0 + 176);
    v40 = *(_QWORD *)(v0 + 128);
    v41 = *(_QWORD *)(v0 + 96);
    v42 = *(_QWORD *)(v0 + 104);
    v43 = *(_QWORD *)(v0 + 56);

    PluginAction.input.getter();
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
    outlined destroy of CamOutput(v39, type metadata accessor for AmbiguityOutput);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
    *(_QWORD *)v43 = 0;
    *(_BYTE *)(v43 + 8) = 0;
    v44 = type metadata accessor for DecisionEngineResponse();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v38, v43 + *(int *)(v44 + 24), &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 0, 1, v44);
LABEL_19:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  swift_bridgeObjectRelease();
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 168), type metadata accessor for AmbiguityOutput);
  v20 = *(_QWORD *)(v0 + 80);
  v21 = *(_QWORD *)(v0 + 72);
  v22 = type metadata accessor for ConversationHelperInput(0);
  if ((DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(_QWORD *)(v21 + *(int *)(v22 + 20)), *(_QWORD *)(v21 + *(int *)(v22 + 20) + 8), *(_BYTE *)(v20 + 33)) & 1) == 0)
  {
    v30 = *(_QWORD *)(v0 + 56);
    swift_release();
    v31 = type metadata accessor for DecisionEngineResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
    goto LABEL_19;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_1B4BE6000, v24, v25, "[DecisionEngine]: Generating CAM Fallback", v26, 2u);
    MEMORY[0x1B5E44758](v26, -1, -1);
  }

  v27 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 360) = v27;
  *v27 = v0;
  v27[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
  return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

