uint64_t DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 248) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 320) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 328) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 352) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t DecisionEngine.CAMFallbackInfo.pommesSearchReason.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DecisionEngine.CAMFallbackInfo.pommesSearchReason.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*DecisionEngine.CAMFallbackInfo.pommesSearchReason.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t DecisionEngine.CAMFallbackInfo.pommesError.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DecisionEngine.CAMFallbackInfo.pommesError.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*DecisionEngine.CAMFallbackInfo.pommesError.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t DecisionEngine.CAMFallbackInfo.emptyNLInput.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t DecisionEngine.CAMFallbackInfo.emptyNLInput.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*DecisionEngine.CAMFallbackInfo.emptyNLInput.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t DecisionEngine.CAMFallbackInfo.hasUndoRequest.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t DecisionEngine.CAMFallbackInfo.hasUndoRequest.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = result;
  return result;
}

uint64_t (*DecisionEngine.CAMFallbackInfo.hasUndoRequest.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

void *DecisionEngine.CAMFallbackInfo.conjunctionInfo.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 40);
  v2 = v1;
  return v1;
}

void DecisionEngine.CAMFallbackInfo.conjunctionInfo.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
}

uint64_t (*DecisionEngine.CAMFallbackInfo.conjunctionInfo.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

double DecisionEngine.CAMFallbackInfo.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 40) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 32) = 0;
  return result;
}

uint64_t default argument 2 of DecisionEngine.CAMFallbackInfo.init(pommesSearchReason:pommesError:emptyNLInput:hasUndoRequest:conjunctionInfo:)()
{
  return 0;
}

uint64_t default argument 3 of DecisionEngine.CAMFallbackInfo.init(pommesSearchReason:pommesError:emptyNLInput:hasUndoRequest:conjunctionInfo:)()
{
  return 0;
}

uint64_t DecisionEngine.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 200, (uint64_t *)&demangling cache variable for type metadata for AmbiguityServiceProviding?);
  return v0;
}

uint64_t DecisionEngine.__deallocating_deinit()
{
  DecisionEngine.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DecisionMaking.loadConversationFromPluginAction(_:speechData:turnData:bridge:) in conformance DecisionEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = protocol witness for AceServiceInvokerAsync.submitToRemote<A>(_:_:setRefId:) in conformance AceServiceInvokerImpl;
  return DecisionEngine.loadConversationFromPluginAction(_:speechData:turnData:bridge:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for DecisionMaking.commitConversation(_:) in conformance DecisionEngine()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v4)(void);

  v1 = *(_QWORD *)(v0 + 64);
  v2 = **(_QWORD **)(v0 + 72);
  swift_beginAccess();
  *(_QWORD *)(v2 + 184) = v1;
  swift_release();
  v4 = *(uint64_t (**)(void))(v0 + 8);
  swift_retain();
  return v4();
}

uint64_t protocol witness for DecisionMaking.newSessionStarted() in conformance DecisionEngine()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;

  v1 = *v0;
  ActionGenerator.newSessionStarted()();
  DecisionEngine.ambiguityService.getter((uint64_t)v5);
  v2 = v6;
  v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  swift_beginAccess();
  *(_QWORD *)(v1 + 184) = 0;
  return swift_release();
}

uint64_t Siri_Nlu_External_UserDialogAct.isSetIdentity.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];

  v0 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
  {
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v8 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v9 = MEMORY[0x1B5E400FC](v8);
    if (v9 >> 62)
      goto LABEL_16;
    for (i = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
    {
      v11 = 4;
      while (1)
      {
        v12 = v11 - 4;
        if ((v9 & 0xC000000000000001) == 0)
          break;
        MEMORY[0x1B5E43B94](v11 - 4, v9);
        v13 = __OFADD__(v12, 1);
        v14 = v11 - 3;
        if (v13)
          goto LABEL_15;
LABEL_12:
        static UsoTask_CodegenConverter.convert(task:)();
        swift_release();
        if (v18)
        {
          outlined init with take of Any(&v17, v19);
          outlined init with take of Any(v19, &v17);
          type metadata accessor for UsoTask_setIdentity_common_Person();
          if ((swift_dynamicCast() & 1) != 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            return 1;
          }
        }
        else
        {
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
        ++v11;
        if (v14 == i)
          goto LABEL_17;
      }
      swift_retain();
      v13 = __OFADD__(v12, 1);
      v14 = v11 - 3;
      if (!v13)
        goto LABEL_12;
LABEL_15:
      __break(1u);
LABEL_16:
      ;
    }
LABEL_17:
    swift_release();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  unint64_t *v4;
  uint64_t v5;
  void (*v6)(_QWORD);
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a4;
    v9 = a3;
    v5 = a2;
    v7 = a1;
    v8 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v25 < v5)
    goto LABEL_31;
LABEL_4:
  v11 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v10 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v13 = v12 + v10;
    if (!__OFADD__(v12, v10))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v8 = *v4;
  if (*v4 >> 62)
    goto LABEL_34;
  v12 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  v13 = v12 + v10;
  if (__OFADD__(v12, v10))
    goto LABEL_36;
LABEL_8:
  v8 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v8;
  v28 = v9;
  v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
  {
    v15 = v8 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v12 = 1;
  }
  if (v8 >> 62)
    goto LABEL_37;
  v16 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v16 <= v13)
    v16 = v13;
  swift_bridgeObjectRetain();
  v8 = MEMORY[0x1B5E43BA0](v12, v16, 1, v8);
  swift_bridgeObjectRelease();
  *v4 = v8;
  v15 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v17 = (_QWORD *)(v15 + 32 + 8 * v7);
  v6(0);
  swift_arrayDestroy();
  if (!v10)
  {
LABEL_28:
    *v17 = v28;
    return specialized Array._endMutation()();
  }
  if (!(v8 >> 62))
  {
    v18 = *(_QWORD *)(v15 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v19 = v26 - v5;
  if (__OFSUB__(v26, v5))
    goto LABEL_40;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v20 = (char *)(v17 + 1);
    v21 = (char *)(v15 + 32 + 8 * v5);
    if (v17 + 1 != (_QWORD *)v21 || v20 >= &v21[8 * v19])
      memmove(v20, v21, 8 * v19);
    if (!(v8 >> 62))
    {
      v22 = *(_QWORD *)(v15 + 16);
      v23 = v22 + v10;
      if (!__OFADD__(v22, v10))
      {
LABEL_27:
        *(_QWORD *)(v15 + 16) = v23;
        goto LABEL_28;
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v23 = v27 + v10;
    if (!__OFADD__(v27, v10))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[5];
  uint64_t v38[5];

  v38[3] = a10;
  v38[4] = a12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v38);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a10 - 8) + 32))(boxed_opaque_existential_1, a3, a10);
  v37[3] = a9;
  v37[4] = a11;
  v20 = __swift_allocate_boxed_opaque_existential_1(v37);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a9 - 8) + 32))(v20, a5, a9);
  type metadata accessor for ServerFallbackDisablingUtils();
  *(_QWORD *)(a8 + 176) = 0;
  *(_QWORD *)(a8 + 184) = 0;
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v21[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v21[4] = 0;
  *(_QWORD *)(a8 + 192) = v21;
  *(_OWORD *)(a8 + 200) = 0u;
  *(_OWORD *)(a8 + 216) = 0u;
  *(_QWORD *)(a8 + 232) = 0;
  *(_QWORD *)(a8 + 24) = a1;
  outlined init with copy of ReferenceResolutionClientProtocol(a2, a8 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v37, (uint64_t)&v34);
  type metadata accessor for ConversationHelper();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = a1;
  outlined init with take of ReferenceResolutionClientProtocol(&v34, v22 + 24);
  *(_QWORD *)(a8 + 32) = v22;
  v23 = type metadata accessor for LinkMetadataProvider();
  v24 = swift_allocObject();
  v25 = objc_allocWithZone(MEMORY[0x1E0D44208]);
  swift_retain_n();
  swift_retain();
  *(_QWORD *)(v24 + 16) = objc_msgSend(v25, sel_init);
  v26 = type metadata accessor for AppShortcutStateProvider();
  v27 = swift_allocObject();
  type metadata accessor for AppShortcutExpansionContextBuilder();
  v28 = (_QWORD *)swift_allocObject();
  v28[9] = v23;
  v28[10] = &protocol witness table for LinkMetadataProvider;
  v28[6] = v24;
  v28[14] = v26;
  v28[15] = &protocol witness table for AppShortcutStateProvider;
  v28[11] = v27;
  type metadata accessor for ConditionalIntentMetadataStore();
  v28[4] = 0;
  v28[5] = 0;
  v28[3] = 0;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = MEMORY[0x1E0DEE9E0];
  v28[2] = v29;
  type metadata accessor for ActionGenerator();
  v30 = (_QWORD *)swift_allocObject();
  v30[3] = v28;
  v30[4] = a1;
  v30[2] = a4;
  *(_QWORD *)(a8 + 16) = v30;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v38, (uint64_t)&v34);
  type metadata accessor for CorrectionsService();
  v31 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(&v34, v31 + 16);
  *(_QWORD *)(v31 + 56) = a1;
  *(_QWORD *)(a8 + 40) = v31;
  *(_QWORD *)(a8 + 88) = a7;
  v35 = type metadata accessor for AppShortcutProvider();
  v36 = MEMORY[0x1E0D9BED0];
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v34);
  swift_retain();
  AppShortcutProvider.init()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  __swift_destroy_boxed_opaque_existential_1(a2);
  outlined init with take of ReferenceResolutionClientProtocol(&v34, a8 + 96);
  outlined init with take of ReferenceResolutionClientProtocol(a6, a8 + 136);
  return a8;
}

uint64_t specialized DecisionEngine.__allocating_init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;

  v27 = a6;
  v28 = a7;
  v25 = a2;
  v26 = a4;
  v23 = a11;
  v24 = a1;
  v14 = *(_QWORD *)(a9 - 8);
  v15 = MEMORY[0x1E0C80A78](a1);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a10 - 8);
  MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a3, a10);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a5, a9);
  return specialized DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(v24, v25, (uint64_t)v20, v26, (uint64_t)v17, v27, v28, v21, a9, a10, v23, a12);
}

uint64_t sub_1B4DA4670@<X0>(uint64_t a1@<X8>)
{
  return DecisionEngine.ambiguityService.getter(a1);
}

uint64_t type metadata accessor for DecisionEngine()
{
  return objc_opt_self();
}

uint64_t method lookup function for DecisionEngine()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DecisionEngine.__allocating_init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

void destroy for DecisionEngine.CAMFallbackInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for DecisionEngine.CAMFallbackInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = v5;
  return a1;
}

uint64_t assignWithCopy for DecisionEngine.CAMFallbackInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v4 = *(void **)(a1 + 40);
  v5 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = v5;

  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DecisionEngine.CAMFallbackInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  v6 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for DecisionEngine.CAMFallbackInfo(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DecisionEngine.CAMFallbackInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DecisionEngine.CAMFallbackInfo()
{
  return &type metadata for DecisionEngine.CAMFallbackInfo;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11SiriKitFlow5ParseOGG_AH5InputVs5NeverOTg506_sSi11fg5Flow5i4OAA5j32VIgynr_Si6offset_AC7elementtAEs5K11OIegnrzr_TRSiAjNIgynr_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(_QWORD, char *), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(_QWORD, char *);
  uint64_t v38;
  uint64_t v39;

  v37 = a2;
  v38 = a3;
  v36 = type metadata accessor for Input();
  v4 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Parse));
  v8 = MEMORY[0x1E0C80A78](v7);
  v35 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (uint64_t *)((char *)&v28 - v11);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v28 - v13;
  v39 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v15 = v39;
  v16 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v34 = v16;
  v28 = a1;
  if (v16)
  {
    v17 = type metadata accessor for Parse();
    v18 = 0;
    v19 = *(_QWORD *)(v17 - 8);
    v20 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v21 = *(_QWORD *)(v19 + 72);
    v31 = v19;
    v32 = v17;
    v29 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    v30 = v21;
    v33 = v6;
    do
    {
      v22 = &v35[*(int *)(v7 + 48)];
      v23 = v32;
      v29(v22, v20, v32);
      v24 = (char *)v12 + *(int *)(v7 + 48);
      *v12 = v18;
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v24, v22, v23);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for (offset: Int, element: Parse));
      v37(*(_QWORD *)v14, &v14[*(int *)(v7 + 48)]);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for (offset: Int, element: Parse));
      v15 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v39;
      }
      v26 = *(_QWORD *)(v15 + 16);
      v25 = *(_QWORD *)(v15 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v15 = v39;
      }
      ++v18;
      *(_QWORD *)(v15 + 16) = v26 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v15+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v26, v33, v36);
      v39 = v15;
      v20 += v30;
    }
    while (v34 != v18);
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t partial apply for closure #3 in DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #3 in DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:)(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

id *outlined retain of RequestConjunctionInfo?(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

unint64_t lazy protocol witness table accessor for type RequestConjunctionInfo? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type RequestConjunctionInfo? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type RequestConjunctionInfo? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for RequestConjunctionInfo?);
    v2 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type RequestConjunctionInfo and conformance RequestConjunctionInfo, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EE40], MEMORY[0x1E0D9EE50]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestConjunctionInfo? and conformance <A> A?);
  }
  return result;
}

id *outlined release of RequestConjunctionInfo?(id *a1)
{

  return a1;
}

uint64_t sub_1B4DA4CA0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)(a1, v4, v5, v6, v7, v8);
}

uint64_t *DecisionEngineCurareDonator.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1)
    swift_once();
  return &static DecisionEngineCurareDonator.instance;
}

uint64_t (*AnyEncodable.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t (*v5)();

  v5 = implicit closure #1 in AnyEncodable.init<A>(_:)(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

uint64_t (*implicit closure #1 in AnyEncodable.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a2;
  *(_QWORD *)(v9 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, v7, a2);
  return partial apply for implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
}

uint64_t AnyEncodable.encode(to:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t DecisionEngineCurareStream.streamId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DecisionEngineCurareStream.__allocating_init(streamId:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t DecisionEngineCurareStream.init(streamId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t DecisionEngineCurareStream.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DecisionEngineCurareStream.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t one-time initialization function for instance()
{
  uint64_t result;

  result = specialized DecisionEngineCurareDonator.__allocating_init()();
  static DecisionEngineCurareDonator.instance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for NoopSiriKitEventSender();
  result = swift_initStaticObject();
  static NoopSiriKitEventSender.instance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for IntentLoggingEventSink();
  result = swift_initStaticObject();
  static IntentLoggingEventSink.instance = result;
  return result;
}

{
  uint64_t result;

  result = specialized SelfReflectionCurareDonator.__allocating_init()();
  static SelfReflectionCurareDonator.instance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for SiriKitCurareDonator();
  swift_allocObject();
  result = SiriKitCurareDonator.().init()();
  static SiriKitCurareDonator.instance = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  if (one-time initialization token for instance != -1)
    swift_once();
  v0 = static TaskLoggingService.instance;
  type metadata accessor for TaskLoggingEventSink();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = v0;
  static TaskLoggingEventSink.instance = v1;
  return swift_retain();
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD *v8;
  uint64_t result;
  __int128 v10;
  uint64_t v11;
  _UNKNOWN **v12;
  __int128 v13;
  ValueMetadata *v14;
  _UNKNOWN **v15;

  v0 = type metadata accessor for FeatureChecker();
  v1 = swift_allocObject();
  *(_BYTE *)(v1 + 16) = AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags();
  v14 = &type metadata for IntelligenceFlowFeatureFlag;
  v15 = (_UNKNOWN **)lazy protocol witness table accessor for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag();
  v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  *(_BYTE *)(v1 + 17) = v2 & 1;
  if (one-time initialization token for instance != -1)
    swift_once();
  v3 = static SiriKitBiomeDonator.instance;
  v14 = (ValueMetadata *)type metadata accessor for SiriKitBiomeDonator();
  v15 = &protocol witness table for SiriKitBiomeDonator;
  *(_QWORD *)&v13 = v3;
  v4 = one-time initialization token for instance;
  swift_retain();
  if (v4 != -1)
    swift_once();
  v5 = static SiriKitCurareDonator.instance;
  v11 = type metadata accessor for SiriKitCurareDonator();
  v12 = &protocol witness table for SiriKitCurareDonator;
  v6 = (void *)objc_opt_self();
  swift_retain();
  v7 = objc_msgSend(v6, sel_shared, v5);
  type metadata accessor for TaskLoggingService();
  v8 = (_QWORD *)swift_allocObject();
  v8[24] = v0;
  v8[25] = &protocol witness table for FeatureChecker;
  v8[21] = v1;
  outlined init with take of ReferenceResolutionClientProtocol(&v13, (uint64_t)(v8 + 2));
  result = outlined init with take of ReferenceResolutionClientProtocol(&v10, (uint64_t)(v8 + 7));
  v8[12] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v8[13] = 0;
  v8[14] = closure #1 in default argument 3 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:);
  v8[15] = 0;
  v8[16] = closure #1 in default argument 4 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:);
  v8[17] = 0;
  v8[18] = closure #1 in default argument 5 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:);
  v8[19] = 0;
  v8[20] = v7;
  static TaskLoggingService.instance = (uint64_t)v8;
  return result;
}

uint64_t static DecisionEngineCurareDonator.instance.getter()
{
  if (one-time initialization token for instance != -1)
    swift_once();
  return swift_retain();
}

uint64_t DecisionEngineCurareDonator.__allocating_init(decisionEngineStream:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v2 = swift_allocObject();
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, v2 + 16, &demangling cache variable for type metadata for DecisionEngineStream?);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.instrumentation);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "Failed to create stream for DecisionEngine - donations will be disabled.", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }

  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for DecisionEngineStream?);
  return v2;
}

uint64_t DecisionEngineCurareDonator.init(decisionEngineStream:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v2 = v1;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, v1 + 16, &demangling cache variable for type metadata for DecisionEngineStream?);
  if (!*(_QWORD *)(a1 + 24))
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.instrumentation);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1B4BE6000, v5, v6, "Failed to create stream for DecisionEngine - donations will be disabled.", v7, 2u);
      MEMORY[0x1B5E44758](v7, -1, -1);
    }

  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for DecisionEngineStream?);
  return v2;
}

uint64_t closure #1 in DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(v8 + 232) = v13;
  *(_OWORD *)(v8 + 216) = v12;
  *(_QWORD *)(v8 + 200) = a7;
  *(_QWORD *)(v8 + 208) = a8;
  *(_QWORD *)(v8 + 184) = a5;
  *(_QWORD *)(v8 + 192) = a6;
  *(_QWORD *)(v8 + 176) = a4;
  type metadata accessor for String.Encoding();
  *(_QWORD *)(v8 + 240) = swift_task_alloc();
  v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CamParse?)
                 - 8);
  *(_QWORD *)(v8 + 248) = v9;
  *(_QWORD *)(v8 + 256) = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 264) = swift_task_alloc();
  *(_QWORD *)(v8 + 272) = swift_task_alloc();
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?)
                  - 8);
  *(_QWORD *)(v8 + 280) = v10;
  *(_QWORD *)(v8 + 288) = *(_QWORD *)(v10 + 64);
  *(_QWORD *)(v8 + 296) = swift_task_alloc();
  *(_QWORD *)(v8 + 304) = swift_task_alloc();
  *(_QWORD *)(v8 + 312) = swift_task_alloc();
  *(_QWORD *)(v8 + 320) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  Swift::String v5;
  Swift::String v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;

  v1 = v0 + 104;
  v3 = *(_QWORD *)(v0 + 192);
  v2 = *(void **)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 184);
  v65 = *(_QWORD *)(v0 + 176);
  v66 = v4;
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = 58;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v3;
  v6._object = v2;
  String.append(_:)(v6);
  v7 = v66;
  v64 = v65;
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v65 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v7, &v65);
    v1 = v0 + 104;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v9, v10, "Creating DecisionEngineResponse donation to Curare for interactionId: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v12, -1, -1);
    MEMORY[0x1B5E44758](v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v13 = *(_QWORD *)(v0 + 320);
  v14 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 224);
  v16 = *(_QWORD *)(v0 + 208);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, AnyEncodable)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
  strcpy((char *)(inited + 32), "flowHandlerId");
  *(_WORD *)(inited + 46) = -4864;
  *(_QWORD *)(v0 + 104) = v16;
  *(_QWORD *)(v0 + 112) = v14;
  v18 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v1, v18 + 16, (uint64_t *)&demangling cache variable for type metadata for String?);
  *(_QWORD *)(inited + 48) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(_QWORD *)(inited + 56) = v18;
  swift_bridgeObjectRetain();
  v19 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  outlined init with copy of ReferenceResolutionClientProtocol?(v15, v13, &demangling cache variable for type metadata for Parse?);
  v20 = type metadata accessor for Parse();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v13, 1, v20);
  v24 = *(_QWORD *)(v0 + 320);
  if (v23 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 320), &demangling cache variable for type metadata for Parse?);
  }
  else
  {
    v25 = (*(uint64_t (**)(_QWORD, uint64_t))(v21 + 88))(*(_QWORD *)(v0 + 320), v20);
    v26 = *MEMORY[0x1E0D9C658];
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v24, v20);
    if (v25 == v26)
    {
      v28 = *(_QWORD *)(v0 + 304);
      v27 = *(_QWORD *)(v0 + 312);
      v29 = *(_QWORD *)(v0 + 280);
      outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 224), v27, &demangling cache variable for type metadata for Parse?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v27, v28, &demangling cache variable for type metadata for Parse?);
      v30 = (*(unsigned __int8 *)(v29 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
      v31 = swift_allocObject();
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v28, v31 + v30, &demangling cache variable for type metadata for Parse?);
      outlined destroy of ReferenceResolutionClientProtocol?(v27, &demangling cache variable for type metadata for Parse?);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v65 = v19;
      v33 = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
      goto LABEL_14;
    }
  }
  v34 = *(_QWORD *)(v0 + 296);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 224), v34, &demangling cache variable for type metadata for Parse?);
  v35 = v22(v34, 1, v20);
  v36 = *(_QWORD *)(v0 + 296);
  v37 = *(_QWORD *)(v0 + 272);
  if (v35 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 296), &demangling cache variable for type metadata for Parse?);
    v38 = type metadata accessor for CamParse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v37, 1, 1, v38);
  }
  else
  {
    Parse.asCamParse()(*(_QWORD **)(v0 + 272));
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v36, v20);
    v39 = type metadata accessor for CamParse();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v37, 0, 1, v39);
  }
  v41 = *(_QWORD *)(v0 + 264);
  v40 = *(_QWORD *)(v0 + 272);
  v42 = *(_QWORD *)(v0 + 248);
  outlined init with copy of ReferenceResolutionClientProtocol?(v40, v41, &demangling cache variable for type metadata for CamParse?);
  v43 = (*(unsigned __int8 *)(v42 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  v31 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v41, v31 + v43, &demangling cache variable for type metadata for CamParse?);
  outlined destroy of ReferenceResolutionClientProtocol?(v40, &demangling cache variable for type metadata for CamParse?);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v65 = v19;
  v33 = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
LABEL_14:
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v33, v31, 0x6573726170, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
  v44 = v65;
  swift_bridgeObjectRelease();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  *(_QWORD *)(v0 + 144) = v44;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : AnyEncodable]);
  lazy protocol witness table accessor for type [String : AnyEncodable] and conformance <> [A : B]();
  v49 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v51 = v50;
  swift_bridgeObjectRelease();
  swift_release();
  static String.Encoding.utf8.getter();
  v52 = String.init(data:encoding:)();
  if (v53)
  {
    v54 = v52;
    v55 = v53;
    v56 = *(_QWORD **)(v0 + 232);
    v57 = v56[3];
    v58 = v56[4];
    __swift_project_boxed_opaque_existential_1(v56, v57);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v58 + 8))(v54, v55, v64, v7, v57, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v45 = Logger.logObject.getter();
    v59 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v59))
    {
      v61 = (uint8_t *)swift_slowAlloc();
      v62 = swift_slowAlloc();
      v65 = v62;
      *(_DWORD *)v61 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v7, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v45, v59, "Donated DecisionEngineResponse to Curare for interactionId:%s", v61, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v62, -1, -1);
      MEMORY[0x1B5E44758](v61, -1, -1);
      outlined consume of Data._Representation(v49, v51);
      goto LABEL_24;
    }
    outlined consume of Data._Representation(v49, v51);
LABEL_23:
    swift_bridgeObjectRelease_n();
    goto LABEL_24;
  }
  outlined consume of Data._Representation(v49, v51);
  swift_bridgeObjectRetain();
  v45 = Logger.logObject.getter();
  v46 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v45, v46))
    goto LABEL_23;
  v47 = (uint8_t *)swift_slowAlloc();
  v48 = swift_slowAlloc();
  v65 = v48;
  *(_DWORD *)v47 = 136315138;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v7, &v65);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1B4BE6000, v45, v46, "Failed to convert DecisionEngineResponse donation to JSON for interactionId:%s", v47, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1B5E44758](v48, -1, -1);
  MEMORY[0x1B5E44758](v47, -1, -1);
LABEL_24:

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v11 = dispatch thunk of Actor.unownedExecutor.getter();
      v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v11 = 0;
  v13 = 0;
LABEL_6:
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t DecisionEngineCurareDonator.deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for DecisionEngineStream?);
  return v0;
}

uint64_t DecisionEngineCurareDonator.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for DecisionEngineStream?);
  return swift_deallocClassInstance();
}

uint64_t sub_1B4DA5F54()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = type metadata accessor for Parse();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v0 + v2, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v2, v4);
  __swift_destroy_boxed_opaque_existential_1(v0 + ((v3 + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  v3 = v1[3];
  v11 = v1[2];
  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = v1[8];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)(a1, v11, v3, v4, v5, v6, v7, v8);
}

uint64_t specialized DecisionEngineCurareDonator.__allocating_init()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  __int128 v12;
  __int128 v13;
  _UNKNOWN **v14;

  v0 = (void *)objc_opt_self();
  if (objc_msgSend(v0, sel_isSupportedUser) && objc_msgSend(v0, sel_isSupportedPlatform))
  {
    v1 = type metadata accessor for DecisionEngineCurareStream();
    v2 = swift_allocObject();
    *(_QWORD *)(v2 + 16) = 0xD000000000000016;
    *(_QWORD *)(v2 + 24) = 0x80000001B4EFB9B0;
    *((_QWORD *)&v13 + 1) = v1;
    v14 = &protocol witness table for DecisionEngineCurareStream;
    *(_QWORD *)&v12 = v2;
    type metadata accessor for DecisionEngineCurareDonator();
    v3 = swift_allocObject();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v12, v3 + 16, &demangling cache variable for type metadata for DecisionEngineStream?);
  }
  else
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.instrumentation);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1B4BE6000, v5, v6, "Unsupported User/Platform for feature store - donations will be disabled.", v7, 2u);
      MEMORY[0x1B5E44758](v7, -1, -1);
    }

    type metadata accessor for DecisionEngineCurareDonator();
    v12 = 0u;
    v13 = 0u;
    v14 = 0;
    v3 = swift_allocObject();
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v12, v3 + 16, &demangling cache variable for type metadata for DecisionEngineStream?);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1B4BE6000, v8, v9, "Failed to create stream for DecisionEngine - donations will be disabled.", v10, 2u);
      MEMORY[0x1B5E44758](v10, -1, -1);
    }

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v12, &demangling cache variable for type metadata for DecisionEngineStream?);
  }
  return v3;
}

_QWORD *assignWithCopy for AnyEncodable(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AnyEncodable(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AnyEncodable()
{
  return &type metadata for AnyEncodable;
}

uint64_t dispatch thunk of DecisionEngineStream.insert(jsonStr:interactionId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t type metadata accessor for DecisionEngineCurareStream()
{
  return objc_opt_self();
}

uint64_t method lookup function for DecisionEngineCurareStream()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DecisionEngineCurareStream.__allocating_init(streamId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for DecisionEngineCurareDonator()
{
  return objc_opt_self();
}

uint64_t method lookup function for DecisionEngineCurareDonator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DecisionEngineCurareDonator.__allocating_init(decisionEngineStream:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_1B4DA6424()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)()
{
  return dispatch thunk of Encodable.encode(to:)();
}

uint64_t sub_1B4DA64B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B4DA64D4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B4DA64F8()
{
  return objectdestroy_13Tm(&demangling cache variable for type metadata for CamParse?, (uint64_t (*)(_QWORD))MEMORY[0x1E0D97A50]);
}

unint64_t lazy protocol witness table accessor for type AnyEncodable and conformance AnyEncodable()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyEncodable and conformance AnyEncodable;
  if (!lazy protocol witness table cache variable for type AnyEncodable and conformance AnyEncodable)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for AnyEncodable, &type metadata for AnyEncodable);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyEncodable and conformance AnyEncodable);
  }
  return result;
}

uint64_t sub_1B4DA6550()
{
  return objectdestroy_13Tm(&demangling cache variable for type metadata for Parse?, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9C698]);
}

uint64_t objectdestroy_13Tm(uint64_t *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8) + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = a2(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v2 + v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2 + v5, v6);
  return swift_deallocObject();
}

uint64_t DecisionEngineResponse.topNlParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a1;
  v2 = type metadata accessor for Parse();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for USOParse();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DecisionEngineResponse();
  outlined init with copy of Input?(v1 + *(int *)(v13 + 24), (uint64_t)v12);
  v14 = type metadata accessor for Input();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) == 1)
  {
    outlined destroy of Input?((uint64_t)v12);
    v16 = type metadata accessor for Siri_Nlu_External_UserParse();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v22, 1, 1, v16);
  }
  else
  {
    Input.parse.getter();
    if ((*(unsigned int (**)(char *, uint64_t))(v3 + 88))(v5, v2) == *MEMORY[0x1E0D9C678])
    {
      (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
      v18 = v22;
      USOParse.userParse.getter();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v19 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 0, 1, v19);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v20 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v22, 1, 1, v20);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v12, v14);
  }
}

uint64_t Input.topNlParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for Parse();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for USOParse();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v3 + 88))(v5, v2) == *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    USOParse.userParse.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v10 = type metadata accessor for Siri_Nlu_External_UserParse();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 0, 1, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v12 = type metadata accessor for Siri_Nlu_External_UserParse();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
}

uint64_t outlined init with copy of Input?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Input?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DecisionEngineResponse.init(conversation:existingFlowSelected:inputGivenToFlow:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;

  *(_QWORD *)a4 = a1;
  *(_BYTE *)(a4 + 8) = a2;
  v5 = a4 + *(int *)(type metadata accessor for DecisionEngineResponse() + 24);
  return outlined init with take of Input?(a3, v5);
}

uint64_t DecisionEngineResponse.conversation.getter()
{
  return swift_retain();
}

uint64_t DecisionEngineResponse.existingFlowSelected.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t DecisionEngineResponse.inputGivenToFlow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for DecisionEngineResponse() + 24);
  return outlined init with copy of Input?(v3, a1);
}

uint64_t DecisionMaking.getNlParse(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = a2;
  v3 = type metadata accessor for LinkParse();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for USOParse();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Parse();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v15 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v14, v11);
  if (v15 == *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
    v16 = v23;
    USOParse.userParse.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v17 = type metadata accessor for Siri_Nlu_External_UserParse();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 0, 1, v17);
  }
  else
  {
    v19 = v23;
    if (v15 == *MEMORY[0x1E0D9C680])
    {
      (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v14, v3);
      LinkParse.usoParse.getter();
      USOParse.userParse.getter();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v20 = type metadata accessor for Siri_Nlu_External_UserParse();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 0, 1, v20);
    }
    else
    {
      v21 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v19, 1, 1, v21);
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for DecisionEngineResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    v6 = *(int *)(a3 + 24);
    v7 = (void *)(a1 + v6);
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Input();
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
    swift_retain();
    if (v11(v8, 1, v9))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t assignWithCopy for DecisionEngineResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for Input();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for DecisionEngineResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = type metadata accessor for Input();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for DecisionEngineResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for Input();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_1B4DA70FC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v9);
  }
}

char *sub_1B4DA7188(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

void type metadata completion function for DecisionEngineResponse()
{
  unint64_t v0;

  type metadata accessor for Input?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t dispatch thunk of DecisionMaking.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a9 + 8) + *(_QWORD *)(a9 + 8));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 16) = v17;
  *v17 = v9;
  v17[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v19(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t dispatch thunk of DecisionMaking.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a9 + 16) + *(_QWORD *)(a9 + 16));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v9 + 16) = v17;
  *v17 = v9;
  v17[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v19(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t dispatch thunk of DecisionMaking.loadConversationFromPluginAction(_:speechData:turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a7 + 24)
                                                                                              + *(_QWORD *)(a7 + 24));
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v15;
  *v15 = v7;
  v15[1] = dispatch thunk of CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:);
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of DecisionMaking.commitConversation(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 32) + *(_QWORD *)(a3 + 32));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of DecisionMaking.commitCorrections()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 40) + *(_QWORD *)(a2 + 40));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v7(a1, a2);
}

uint64_t dispatch thunk of DecisionMaking.newTurnStarted(executionUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of DecisionMaking.newSessionStarted()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t DefaultDeviceState.inputOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_inputOrigin, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA7D50], a1);
}

uint64_t DefaultDeviceState.interactionType.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_interactionType, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA8038], a1);
}

uint64_t DefaultDeviceState.multiUserState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MultiUserState(v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_multiUserState, a1);
}

uint64_t DefaultDeviceState.siriLocale.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriLocale, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0E38], a1);
}

uint64_t DefaultDeviceState.siriVoiceGender.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriVoiceGender, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA7B28], a1);
}

uint64_t DefaultDeviceState.isEyesFree.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isEyesFree);
}

uint64_t DefaultDeviceState.isVoiceTriggerEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isVoiceTriggerEnabled);
}

uint64_t DefaultDeviceState.isTextToSpeechEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isTextToSpeechEnabled);
}

uint64_t DefaultDeviceState.isCarPlay.getter()
{
  return DefaultDeviceState.isCarPlay.getter((void (*)(uint64_t))MEMORY[0x1E0DA8100]);
}

uint64_t DefaultDeviceState.restrictions.getter()
{
  return Restrictions.deviceRestrictions.getter();
}

unint64_t lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions;
  if (!lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions)
  {
    v1 = type metadata accessor for DeviceRestrictions();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DA8110], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions);
  }
  return result;
}

uint64_t DefaultDeviceState.isCarDNDMode.getter()
{
  return DefaultDeviceState.isCarPlay.getter(MEMORY[0x1E0DA80C0]);
}

uint64_t DefaultDeviceState.isHeadGestureRecognitionAvailable.getter()
{
  return DefaultDeviceState.isCarPlay.getter(MEMORY[0x1E0DA80C8]);
}

uint64_t DefaultDeviceState.isCarPlay.getter(void (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v12;

  v2 = type metadata accessor for DeviceRestrictions();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v12 - v7;
  v9 = Restrictions.deviceRestrictions.getter();
  a1(v9);
  lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions();
  LOBYTE(a1) = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v6, v2);
  v10(v8, v2);
  return a1 & 1;
}

uint64_t DefaultDeviceState.isDirectAction.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isDirectAction);
}

uint64_t DefaultDeviceState.renderDeviceIdiom.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_renderDeviceIdiom, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA7CA8], a1);
}

uint64_t DefaultDeviceState.sessionHandOffContinuityID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_sessionHandOffContinuityID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DefaultDeviceState.preferencesLanguageCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_preferencesLanguageCode);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DefaultDeviceState.personalDomainsAuthenticationMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_personalDomainsAuthenticationMode, a1, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
}

uint64_t DefaultDeviceState.bargeInContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_bargeInContext, a1, (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
}

uint64_t DefaultDeviceState.endpointId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_endpointId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DefaultDeviceState.restrictedCommands.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationRequestProcessorBase.sessionId.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_restrictedCommands, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA7E38], a1);
}

uint64_t DefaultDeviceState.authenticationState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_authenticationState, a1);
}

uint64_t DefaultDeviceState.__allocating_init(inputOrigin:interactionType:renderDeviceIdiom:multiUserState:siriLocale:siriVoiceGender:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:isLockedWithPasscodeClosure:sessionHandOffContinuityID:preferencesLanguageCode:personalDomainsAuthenticationMode:bargeInContext:peerName:endpointId:restrictedCommands:authenticationState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t (*a11)(), uint64_t (*a12)(), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,__int128 *a24)
{
  uint64_t v29;

  v29 = swift_allocObject();
  DefaultDeviceState.init(inputOrigin:interactionType:renderDeviceIdiom:multiUserState:siriLocale:siriVoiceGender:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:isLockedWithPasscodeClosure:sessionHandOffContinuityID:preferencesLanguageCode:personalDomainsAuthenticationMode:bargeInContext:peerName:endpointId:restrictedCommands:authenticationState:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24);
  return v29;
}

uint64_t DefaultDeviceState.init(inputOrigin:interactionType:renderDeviceIdiom:multiUserState:siriLocale:siriVoiceGender:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:isLockedWithPasscodeClosure:sessionHandOffContinuityID:preferencesLanguageCode:personalDomainsAuthenticationMode:bargeInContext:peerName:endpointId:restrictedCommands:authenticationState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t (*a11)(), uint64_t (*a12)(), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,__int128 *a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t (*v55)();
  uint64_t (*v56)();
  uint64_t (**v57)();
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  __int128 *v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)();
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v25 = v24;
  v80 = a8;
  v79 = a7;
  v99 = a6;
  v100 = a5;
  v101 = a23;
  v97 = a22;
  v98 = a24;
  v95 = a20;
  v96 = a21;
  v93 = a18;
  v94 = a19;
  v91 = a16;
  v92 = a17;
  v90 = a15;
  v87 = a13;
  v88 = a14;
  v84 = a12;
  v75 = a10;
  v74 = a9;
  v30 = type metadata accessor for DeviceRestrictions();
  v78 = *(_QWORD *)(v30 - 8);
  v31 = MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v71 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v71 - v34;
  v36 = OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isHomePodGestalt;
  *(_BYTE *)(v25 + v36) = MGGetSInt32Answer() == 7;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isAppleTVGestalt) = 0;
  v37 = OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPhoneGestalt;
  *(_BYTE *)(v25 + v37) = MGGetSInt32Answer() == 1;
  v38 = OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPadGestalt;
  *(_BYTE *)(v25 + v38) = MGGetSInt32Answer() == 3;
  v39 = OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPodGestalt;
  *(_BYTE *)(v25 + v39) = MGGetSInt32Answer() == 2;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isXRGestalt) = 0;
  v40 = v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_inputOrigin;
  v41 = type metadata accessor for InputOrigin();
  v81 = *(_QWORD *)(v41 - 8);
  v82 = v41;
  v42 = *(void (**)(uint64_t, uint64_t))(v81 + 16);
  v89 = a1;
  v42(v40, a1);
  v43 = v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_interactionType;
  v44 = type metadata accessor for InteractionType();
  v76 = *(_QWORD *)(v44 - 8);
  v45 = *(void (**)(uint64_t, uint64_t))(v76 + 16);
  v86 = a2;
  v77 = v44;
  v45(v43, a2);
  v46 = v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_renderDeviceIdiom;
  v47 = type metadata accessor for DeviceIdiom();
  v73 = *(_QWORD *)(v47 - 8);
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16);
  v85 = a3;
  v48(v46, a3, v47);
  v83 = a4;
  outlined init with copy of MultiUserState(a4, v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_multiUserState);
  v49 = v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriLocale;
  v50 = type metadata accessor for Locale();
  v72 = *(_QWORD *)(v50 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16))(v49, v100, v50);
  v51 = v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriVoiceGender;
  v52 = type metadata accessor for SiriVoiceGender();
  v53 = *(_QWORD *)(v52 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v99, v52);
  *(_BYTE *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isEyesFree) = v79;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isVoiceTriggerEnabled) = v80;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isTextToSpeechEnabled) = v74;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isDirectAction) = v75;
  Restrictions.deviceRestrictions.getter();
  static DeviceRestrictions.starkMode.getter();
  lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions();
  LOBYTE(a4) = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v54 = *(void (**)(char *, uint64_t))(v78 + 8);
  v54(v33, v30);
  v54(v35, v30);
  if ((a4 & 1) != 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_release();
    v55 = 0;
    v56 = getEnumTag for CamFeatureFlag;
  }
  else
  {
    v56 = a11;
    v55 = v84;
  }
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v99, v52);
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v100, v50);
  outlined destroy of MultiUserState(v83);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v85, v47);
  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v86, v77);
  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v89, v82);
  v57 = (uint64_t (**)())(v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isLockedWithPasscodeClosure);
  *v57 = v56;
  v57[1] = v55;
  v58 = (_QWORD *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_sessionHandOffContinuityID);
  v59 = v88;
  *v58 = v87;
  v58[1] = v59;
  v60 = (_QWORD *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_preferencesLanguageCode);
  v62 = v91;
  v61 = v92;
  *v60 = v90;
  v60[1] = v62;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v61, v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_personalDomainsAuthenticationMode, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v93, v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_bargeInContext, (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
  v63 = (_QWORD *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_peerName);
  v64 = v95;
  *v63 = v94;
  v63[1] = v64;
  v65 = v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_restrictedCommands;
  v66 = type metadata accessor for Restrictions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v65, v101, v66);
  v67 = (_QWORD *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_endpointId);
  v69 = v97;
  v68 = v98;
  *v67 = v96;
  v67[1] = v69;
  outlined init with take of ReferenceResolutionClientProtocol(v68, v25 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_authenticationState);
  return v25;
}

uint64_t DefaultDeviceState.isHomePod.getter()
{
  return DefaultDeviceState.isHomePod.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isHomePodGestalt, MEMORY[0x1E0DA7C88]);
}

uint64_t DefaultDeviceState.isWatch.getter()
{
  return DefaultDeviceState.isWatch.getter(MEMORY[0x1E0DA7C80]);
}

uint64_t DefaultDeviceState.isMac.getter()
{
  return DefaultDeviceState.isWatch.getter(MEMORY[0x1E0DA7C60]);
}

uint64_t DefaultDeviceState.isAppleTV.getter()
{
  return DefaultDeviceState.isWatch.getter(MEMORY[0x1E0DA7C50]);
}

uint64_t DefaultDeviceState.isWatch.getter(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(char *, _QWORD, uint64_t);
  char v7;
  void (*v8)(char *, uint64_t);
  char v9;
  uint64_t v11;

  v2 = type metadata accessor for DeviceIdiom();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v6(v5, *MEMORY[0x1E0DA7C98], v2);
  v7 = static DeviceIdiom.== infix(_:_:)();
  v8 = *(void (**)(char *, uint64_t))(v3 + 8);
  v8(v5, v2);
  if ((v7 & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    v6(v5, *a1, v2);
    v9 = static DeviceIdiom.== infix(_:_:)();
    v8(v5, v2);
  }
  return v9 & 1;
}

uint64_t DefaultDeviceState.isPhone.getter()
{
  return DefaultDeviceState.isHomePod.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPhoneGestalt, MEMORY[0x1E0DA7C78]);
}

uint64_t DefaultDeviceState.isPad.getter()
{
  return DefaultDeviceState.isHomePod.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPadGestalt, MEMORY[0x1E0DA7C68]);
}

uint64_t DefaultDeviceState.isPod.getter()
{
  return DefaultDeviceState.isHomePod.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPodGestalt, MEMORY[0x1E0DA7C70]);
}

uint64_t DefaultDeviceState.isHomePod.getter(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, _QWORD, uint64_t);
  char v10;
  void (*v11)(char *, uint64_t);
  char v12;
  uint64_t v14;

  v5 = type metadata accessor for DeviceIdiom();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, _QWORD, uint64_t))(v6 + 104);
  v9(v8, *MEMORY[0x1E0DA7C98], v5);
  v10 = static DeviceIdiom.== infix(_:_:)();
  v11 = *(void (**)(char *, uint64_t))(v6 + 8);
  v11(v8, v5);
  if ((v10 & 1) != 0)
  {
    v12 = *(_BYTE *)(v2 + *a1);
  }
  else
  {
    v9(v8, *a2, v5);
    v12 = static DeviceIdiom.== infix(_:_:)();
    v11(v8, v5);
  }
  return v12 & 1;
}

uint64_t DefaultDeviceState.isLockedWithPasscode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isLockedWithPasscodeClosure))() & 1;
}

uint64_t DefaultDeviceState.peerDeviceName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void (*v5)(char *, _QWORD, uint64_t);
  char v6;
  void (*v7)(char *, uint64_t);
  uint64_t v8;
  char v9;
  uint64_t v11;

  v1 = type metadata accessor for DeviceIdiom();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void (**)(char *, _QWORD, uint64_t))(v2 + 104);
  v5(v4, *MEMORY[0x1E0DA7C98], v1);
  v6 = static DeviceIdiom.== infix(_:_:)();
  v7 = *(void (**)(char *, uint64_t))(v2 + 8);
  v7(v4, v1);
  if ((v6 & 1) == 0)
  {
    v5(v4, *MEMORY[0x1E0DA7C88], v1);
    v9 = static DeviceIdiom.== infix(_:_:)();
    v7(v4, v1);
    if ((v9 & 1) == 0)
      return 0;
LABEL_5:
    v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_peerName);
    swift_bridgeObjectRetain();
    return v8;
  }
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isHomePodGestalt) == 1)
    goto LABEL_5;
  return 0;
}

BOOL DefaultDeviceState.isSidekick.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_endpointId + 8) != 0;
}

uint64_t DefaultDeviceState.isXRDevice.getter()
{
  return 0;
}

uint64_t DefaultDeviceState.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_inputOrigin;
  v2 = type metadata accessor for InputOrigin();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_interactionType;
  v4 = type metadata accessor for InteractionType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  outlined destroy of MultiUserState(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_multiUserState);
  v5 = v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriLocale;
  v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriVoiceGender;
  v8 = type metadata accessor for SiriVoiceGender();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_renderDeviceIdiom;
  v10 = type metadata accessor for DeviceIdiom();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_personalDomainsAuthenticationMode, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_bargeInContext, (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
  swift_bridgeObjectRelease();
  v11 = v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_restrictedCommands;
  v12 = type metadata accessor for Restrictions();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_authenticationState);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t DefaultDeviceState.__deallocating_deinit()
{
  DefaultDeviceState.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DeviceState.isHomePod.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isHomePod.getter in conformance DefaultDeviceState(a1, a2, &OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isHomePodGestalt, MEMORY[0x1E0DA7C88]);
}

uint64_t protocol witness for DeviceState.isWatch.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isWatch.getter in conformance DefaultDeviceState(a1, a2, MEMORY[0x1E0DA7C80]);
}

uint64_t protocol witness for DeviceState.isMac.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isWatch.getter in conformance DefaultDeviceState(a1, a2, MEMORY[0x1E0DA7C60]);
}

uint64_t protocol witness for DeviceState.isCarPlay.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isCarPlay.getter in conformance DefaultDeviceState(a1, a2, (void (*)(uint64_t))MEMORY[0x1E0DA8100]);
}

uint64_t protocol witness for DeviceState.isAppleTV.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isWatch.getter in conformance DefaultDeviceState(a1, a2, MEMORY[0x1E0DA7C50]);
}

uint64_t protocol witness for DeviceState.isWatch.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(char *, _QWORD, uint64_t);
  char v9;
  void (*v10)(char *, uint64_t);
  char v11;
  uint64_t v13;

  v4 = type metadata accessor for DeviceIdiom();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void (**)(char *, _QWORD, uint64_t))(v5 + 104);
  v8(v7, *MEMORY[0x1E0DA7C98], v4);
  v9 = static DeviceIdiom.== infix(_:_:)();
  v10 = *(void (**)(char *, uint64_t))(v5 + 8);
  v10(v7, v4);
  if ((v9 & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    v8(v7, *a3, v4);
    v11 = static DeviceIdiom.== infix(_:_:)();
    v10(v7, v4);
  }
  return v11 & 1;
}

uint64_t protocol witness for DeviceState.isPhone.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isHomePod.getter in conformance DefaultDeviceState(a1, a2, &OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPhoneGestalt, MEMORY[0x1E0DA7C78]);
}

uint64_t protocol witness for DeviceState.isPad.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isHomePod.getter in conformance DefaultDeviceState(a1, a2, &OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPadGestalt, MEMORY[0x1E0DA7C68]);
}

uint64_t protocol witness for DeviceState.isPod.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isHomePod.getter in conformance DefaultDeviceState(a1, a2, &OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPodGestalt, MEMORY[0x1E0DA7C70]);
}

uint64_t protocol witness for DeviceState.isHomePod.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int *a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, _QWORD, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  char v15;
  uint64_t v17;

  v7 = type metadata accessor for DeviceIdiom();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v4;
  v12 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
  v12(v10, *MEMORY[0x1E0DA7C98], v7);
  v13 = static DeviceIdiom.== infix(_:_:)();
  v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  v14(v10, v7);
  if ((v13 & 1) != 0)
  {
    v15 = *(_BYTE *)(v11 + *a3);
  }
  else
  {
    v12(v10, *a4, v7);
    v15 = static DeviceIdiom.== infix(_:_:)();
    v14(v10, v7);
  }
  return v15 & 1;
}

uint64_t protocol witness for DeviceState.isCarDNDMode.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isCarPlay.getter in conformance DefaultDeviceState(a1, a2, MEMORY[0x1E0DA80C0]);
}

uint64_t protocol witness for DeviceState.isHeadGestureRecognitionAvailable.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isCarPlay.getter in conformance DefaultDeviceState(a1, a2, MEMORY[0x1E0DA80C8]);
}

uint64_t protocol witness for DeviceState.isCarPlay.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v14;

  v4 = type metadata accessor for DeviceRestrictions();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v14 - v9;
  v11 = Restrictions.deviceRestrictions.getter();
  a3(v11);
  lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions();
  LOBYTE(a3) = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return a3 & 1;
}

uint64_t protocol witness for DeviceState.isDirectAction.getter in conformance DefaultDeviceState()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isDirectAction);
}

uint64_t protocol witness for DeviceState.isTextToSpeechEnabled.getter in conformance DefaultDeviceState()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isTextToSpeechEnabled);
}

uint64_t protocol witness for DeviceState.isLockedWithPasscode.getter in conformance DefaultDeviceState()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(*v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isLockedWithPasscodeClosure))() & 1;
}

uint64_t protocol witness for DeviceState.isEyesFree.getter in conformance DefaultDeviceState()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isEyesFree);
}

uint64_t protocol witness for DeviceState.isVoiceTriggerEnabled.getter in conformance DefaultDeviceState()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isVoiceTriggerEnabled);
}

uint64_t protocol witness for DeviceState.interactionType.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DeviceState.interactionType.getter in conformance DefaultDeviceState(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_interactionType, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA8038], a1);
}

uint64_t protocol witness for DeviceState.inputOrigin.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DeviceState.interactionType.getter in conformance DefaultDeviceState(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_inputOrigin, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA7D50], a1);
}

uint64_t protocol witness for DeviceState.multiUserState.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of MultiUserState(*v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_multiUserState, a1);
}

uint64_t protocol witness for DeviceState.siriLocale.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DeviceState.interactionType.getter in conformance DefaultDeviceState(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriLocale, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0E38], a1);
}

uint64_t protocol witness for DeviceState.sessionHandOffContinuityID.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.sessionHandOffContinuityID.getter in conformance DefaultDeviceState(a1, a2, &OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_sessionHandOffContinuityID);
}

uint64_t protocol witness for DeviceState.siriVoiceGender.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DeviceState.interactionType.getter in conformance DefaultDeviceState(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriVoiceGender, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA7B28], a1);
}

uint64_t protocol witness for DeviceState.preferencesLanguageCode.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.sessionHandOffContinuityID.getter in conformance DefaultDeviceState(a1, a2, &OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_preferencesLanguageCode);
}

uint64_t protocol witness for DeviceState.sessionHandOffContinuityID.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;

  v4 = *(_QWORD *)(*v3 + *a3);
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t protocol witness for DeviceState.personalDomainsAuthenticationMode.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(*v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_personalDomainsAuthenticationMode, a1, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
}

uint64_t protocol witness for DeviceState.bargeInContext.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(*v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_bargeInContext, a1, (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
}

uint64_t protocol witness for DeviceState.peerDeviceName.getter in conformance DefaultDeviceState()
{
  return DefaultDeviceState.peerDeviceName.getter();
}

uint64_t protocol witness for DeviceState.restrictions.getter in conformance DefaultDeviceState()
{
  return Restrictions.deviceRestrictions.getter();
}

uint64_t protocol witness for DeviceState.restrictedCommands.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DeviceState.interactionType.getter in conformance DefaultDeviceState(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_restrictedCommands, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA7E38], a1);
}

uint64_t protocol witness for DeviceState.interactionType.getter in conformance DefaultDeviceState@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *v3 + *a1;
  v6 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v5, v6);
}

BOOL protocol witness for DeviceState.isSidekick.getter in conformance DefaultDeviceState()
{
  _QWORD *v0;

  return *(_QWORD *)(*v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_endpointId + 8) != 0;
}

uint64_t protocol witness for DeviceState.authenticationState.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(*v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_authenticationState, a1);
}

uint64_t AuthenticationStateImpl.isAuthenticatedByWatch.getter(char a1)
{
  return a1 & 1;
}

uint64_t AuthenticationStateImpl.isAuthenticatedByHeadphones.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

unint64_t static AuthenticationStateImpl.from(invocationState:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(_BYTE *, uint64_t);
  char v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  char v19;
  uint8_t *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  char v24;
  uint64_t v25;
  unint64_t result;
  _BYTE v27[12];
  int v28;
  uint64_t v29;
  _BOOL4 v30;
  int v31;

  v29 = a2;
  v3 = type metadata accessor for DeviceRestrictions();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v9 = &v27[-v8];
  v10 = a1[3];
  v11 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 184);
  v12(v10, v11);
  static DeviceRestrictions.unauthenticatedByWatchProximity.getter();
  lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions();
  v28 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v13 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v13(v7, v3);
  v13(v9, v3);
  v12(v10, v11);
  static DeviceRestrictions.unauthenticatedByHeadphonesState.getter();
  v14 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v13(v7, v3);
  v13(v9, v3);
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  v18 = os_log_type_enabled(v16, v17);
  v19 = v28;
  if (v18)
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v20 = 67109120;
    v30 = (v19 & 1) == 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v16, v17, "Is watch authenticated? %{BOOL}d", v20, 8u);
    MEMORY[0x1B5E44758](v20, -1, -1);
  }

  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v23 = 67109120;
    v24 = v14 ^ 1;
    v31 = v24 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v21, v22, "Is headphones authenticated? %{BOOL}d", v23, 8u);
    MEMORY[0x1B5E44758](v23, -1, -1);

  }
  else
  {

    v24 = v14 ^ 1;
  }
  v25 = v29;
  *(_QWORD *)(v29 + 24) = &type metadata for AuthenticationStateImpl;
  result = lazy protocol witness table accessor for type AuthenticationStateImpl and conformance AuthenticationStateImpl();
  *(_QWORD *)(v25 + 32) = result;
  *(_BYTE *)v25 = (v19 & 1) == 0;
  *(_BYTE *)(v25 + 1) = v24 & 1;
  return result;
}

SiriKitRuntime::AuthenticationStateImpl __swiftcall AuthenticationStateImpl.init(isAuthenticatedByWatch:isAuthenticatedByHeadphones:)(Swift::Bool isAuthenticatedByWatch, Swift::Bool isAuthenticatedByHeadphones)
{
  __int16 v2;

  if (isAuthenticatedByHeadphones)
    v2 = 256;
  else
    v2 = 0;
  return (SiriKitRuntime::AuthenticationStateImpl)(v2 & 0xFFFE | isAuthenticatedByWatch);
}

uint64_t protocol witness for AuthenticationState.isAuthenticatedByWatch.getter in conformance AuthenticationStateImpl()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t protocol witness for AuthenticationState.isAuthenticatedByHeadphones.getter in conformance AuthenticationStateImpl()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

unint64_t lazy protocol witness table accessor for type AuthenticationStateImpl and conformance AuthenticationStateImpl()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AuthenticationStateImpl and conformance AuthenticationStateImpl;
  if (!lazy protocol witness table cache variable for type AuthenticationStateImpl and conformance AuthenticationStateImpl)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for AuthenticationStateImpl, &type metadata for AuthenticationStateImpl);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AuthenticationStateImpl and conformance AuthenticationStateImpl);
  }
  return result;
}

uint64_t ObjC metadata update function for DefaultDeviceState()
{
  return type metadata accessor for DefaultDeviceState();
}

uint64_t type metadata accessor for DefaultDeviceState()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DefaultDeviceState;
  if (!type metadata singleton initialization cache for DefaultDeviceState)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for DefaultDeviceState()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  type metadata accessor for InputOrigin();
  if (v0 <= 0x3F)
  {
    type metadata accessor for InteractionType();
    if (v1 <= 0x3F)
    {
      type metadata accessor for MultiUserState();
      if (v2 <= 0x3F)
      {
        type metadata accessor for Locale();
        if (v3 <= 0x3F)
        {
          type metadata accessor for SiriVoiceGender();
          if (v4 <= 0x3F)
          {
            type metadata accessor for DeviceIdiom();
            if (v5 <= 0x3F)
            {
              type metadata accessor for Input?(319, &lazy cache variable for type metadata for PersonalDomainsAuthenticationMode?, (void (*)(uint64_t))MEMORY[0x1E0DA8220]);
              if (v6 <= 0x3F)
              {
                type metadata accessor for Input?(319, &lazy cache variable for type metadata for BargeInContext?, (void (*)(uint64_t))MEMORY[0x1E0DA7F90]);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for Restrictions();
                  if (v8 <= 0x3F)
                    swift_updateClassMetadata2();
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t method lookup function for DefaultDeviceState()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DefaultDeviceState.__allocating_init(inputOrigin:interactionType:renderDeviceIdiom:multiUserState:siriLocale:siriVoiceGender:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:isLockedWithPasscodeClosure:sessionHandOffContinuityID:preferencesLanguageCode:personalDomainsAuthenticationMode:bargeInContext:peerName:endpointId:restrictedCommands:authenticationState:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 280))();
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AuthenticationStateImpl(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticationStateImpl(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B4DA91FC + 4 * byte_1B4EE9175[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1B4DA9230 + 4 * byte_1B4EE9170[v4]))();
}

uint64_t sub_1B4DA9230(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B4DA9238(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1B4DA9240);
  return result;
}

uint64_t sub_1B4DA924C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1B4DA9254);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B4DA9258(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B4DA9260(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationStateImpl()
{
  return &type metadata for AuthenticationStateImpl;
}

uint64_t DefaultMeCardProxy.__allocating_init(remoteMeCard:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t DefaultMeCardProxy.init(remoteMeCard:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

void *DefaultMeCardProxy.fetchMeCard(options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  void (*v7)(char *, uint64_t);
  uint64_t v8;
  char v9;
  void *v10;
  id v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for MeCardOptions();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static MeCardOptions.ignoreLocalMeCard.getter();
  lazy protocol witness table accessor for type MeCardOptions and conformance MeCardOptions();
  v6 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v7 = *(void (**)(char *, uint64_t))(v3 + 8);
  v7(v5, v2);
  if ((v6 & 1) != 0)
    goto LABEL_5;
  if (one-time initialization token for instance != -1)
    swift_once();
  v8 = static MeCardService.instance;
  static MeCardOptions.ignoreCachedMeCard.getter();
  v9 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v7(v5, v2);
  v10 = (void *)(*(uint64_t (**)(BOOL))(*(_QWORD *)v8 + 168))((v9 & 1) == 0);
  if (!v10)
  {
LABEL_5:
    v10 = *(void **)(v1 + 16);
    v11 = v10;
  }
  return v10;
}

unint64_t lazy protocol witness table accessor for type MeCardOptions and conformance MeCardOptions()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MeCardOptions and conformance MeCardOptions;
  if (!lazy protocol witness table cache variable for type MeCardOptions and conformance MeCardOptions)
  {
    v1 = type metadata accessor for MeCardOptions();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0D98240], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeCardOptions and conformance MeCardOptions);
  }
  return result;
}

uint64_t DefaultMeCardProxy.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DefaultMeCardProxy.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t protocol witness for MeCardProxy.fetchMeCard(options:) in conformance DefaultMeCardProxy()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t type metadata accessor for DefaultMeCardProxy()
{
  return objc_opt_self();
}

uint64_t method lookup function for DefaultMeCardProxy()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DefaultMeCardProxy.__allocating_init(remoteMeCard:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of DefaultMeCardProxy.fetchMeCard(options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t *DeviceContextHelper.sharedInstance.unsafeMutableAddressor()
{
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  return &static DeviceContextHelper.sharedInstance;
}

uint64_t one-time initialization function for legacyNLContextKey()
{
  uint64_t result;

  result = MEMORY[0x1B5E432E8](0x4C4E79636167656CLL, 0xEF747865746E6F43);
  static DeviceContextHelper.legacyNLContextKey = result;
  return result;
}

uint64_t *DeviceContextHelper.legacyNLContextKey.unsafeMutableAddressor()
{
  if (one-time initialization token for legacyNLContextKey != -1)
    swift_once();
  return &static DeviceContextHelper.legacyNLContextKey;
}

id static DeviceContextHelper.legacyNLContextKey.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for legacyNLContextKey, (id *)&static DeviceContextHelper.legacyNLContextKey);
}

uint64_t one-time initialization function for onDeviceConversationKey()
{
  uint64_t result;

  result = MEMORY[0x1B5E432E8](0xD000000000000019, 0x80000001B4EF4560);
  static DeviceContextHelper.onDeviceConversationKey = result;
  return result;
}

uint64_t *DeviceContextHelper.onDeviceConversationKey.unsafeMutableAddressor()
{
  if (one-time initialization token for onDeviceConversationKey != -1)
    swift_once();
  return &static DeviceContextHelper.onDeviceConversationKey;
}

id static DeviceContextHelper.onDeviceConversationKey.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for onDeviceConversationKey, (id *)&static DeviceContextHelper.onDeviceConversationKey);
}

uint64_t one-time initialization function for serverBoundContextUpdate()
{
  uint64_t result;

  result = MEMORY[0x1B5E432E8](0xD00000000000001ALL, 0x80000001B4EF4590);
  static DeviceContextHelper.serverBoundContextUpdate = result;
  return result;
}

uint64_t *DeviceContextHelper.serverBoundContextUpdate.unsafeMutableAddressor()
{
  if (one-time initialization token for serverBoundContextUpdate != -1)
    swift_once();
  return &static DeviceContextHelper.serverBoundContextUpdate;
}

id static DeviceContextHelper.serverBoundContextUpdate.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for serverBoundContextUpdate, (id *)&static DeviceContextHelper.serverBoundContextUpdate);
}

id static DeviceContextHelper.legacyNLContextKey.getter(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

void one-time initialization function for sharedInstance()
{
  uint64_t inited;

  type metadata accessor for DeviceContextHelper();
  inited = swift_initStaticObject();
  specialized DeviceContextHelper.registerTransfomers()();
  static DeviceContextHelper.sharedInstance = inited;
}

uint64_t DeviceContextHelper.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  specialized DeviceContextHelper.registerTransfomers()();
  return v0;
}

uint64_t static DeviceContextHelper.sharedInstance.getter()
{
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  return swift_retain();
}

uint64_t DeviceContextHelper.init()()
{
  uint64_t v0;

  specialized DeviceContextHelper.registerTransfomers()();
  return v0;
}

uint64_t DeviceContextHelper.donateContextToCollector(_:_:)(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  _BYTE v16[24];
  ValueMetadata *v17;
  unint64_t v18;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v17 = &type metadata for HALFeatureFlags;
  v18 = lazy protocol witness table accessor for type HALFeatureFlags and conformance HALFeatureFlags();
  v10 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if ((v10 & 1) == 0)
    return a2(0);
  v11 = objc_msgSend((id)objc_opt_self(), sel_defaultService);
  v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v3;
  v13[5] = v11;
  v13[6] = a1;
  v13[7] = a2;
  v13[8] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in DeviceContextHelper.donateContextToCollector(_:_:), (uint64_t)v13);
  return swift_release();
}

id DeviceContextHelper.getContextDonationService()()
{
  return objc_msgSend((id)objc_opt_self(), sel_defaultService);
}

uint64_t closure #1 in DeviceContextHelper.donateContextToCollector(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[4] = a7;
  v8[5] = a8;
  v8[2] = a5;
  v8[3] = a6;
  return swift_task_switch();
}

uint64_t closure #1 in DeviceContextHelper.donateContextToCollector(_:_:)()
{
  uint64_t v0;

  specialized DeviceContextHelper.donateDataWithContext(_:_:_:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id closure #2 in DeviceContextHelper.fetchContextFromCollector(from:_:_:)(unint64_t a1, void (*a2)(_QWORD), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v9;
  uint64_t i;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  id result;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  id v61;
  id v62;
  char v63;
  uint64_t v64;
  char v65;
  id v66;
  id v67;
  id v68;
  id v69;
  uint64_t v70;
  void (*v71)(_QWORD);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[2];
  unint64_t v78;

  v6 = (uint64_t *)(a4 + 16);
  if (!a1)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v19, v20))
      goto LABEL_38;
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    v22 = "Nil contexts returned from ContextCollector";
    goto LABEL_37;
  }
  if (!(a1 >> 62))
  {
    v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_4;
LABEL_28:
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v19, v20))
      goto LABEL_38;
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    v22 = "Empty contexts returned from ContextCollector";
    goto LABEL_37;
  }
  swift_bridgeObjectRetain();
  v9 = _CocoaArrayWrapper.endIndex.getter();
  if (!v9)
    goto LABEL_28;
LABEL_4:
  *(_QWORD *)&v77[0] = MEMORY[0x1E0DEE9D8];
  if (v9 < 1)
  {
    __break(1u);
  }
  else
  {
    v71 = a2;
    for (i = 0; i != v9; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v11 = (id)MEMORY[0x1B5E43B94](i, a1);
      else
        v11 = *(id *)(a1 + 8 * i + 32);
      v12 = v11;
      if (objc_msgSend(v11, sel_proximity) == (id)4000)
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v78 = *(_QWORD *)&v77[0];
    a2 = v71;
    if ((*(_QWORD *)&v77[0] & 0x8000000000000000) == 0 && (*(_QWORD *)&v77[0] & 0x4000000000000000) == 0)
    {
      if (*(_QWORD *)(*(_QWORD *)&v77[0] + 16))
        goto LABEL_16;
LABEL_34:
      swift_release();
      if (one-time initialization token for conversationBridge == -1)
      {
LABEL_35:
        v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
        v19 = Logger.logObject.getter();
        v20 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v19, v20))
        {
LABEL_38:

          swift_beginAccess();
          v26 = swift_bridgeObjectRetain();
          a2(v26);
          return (id)swift_bridgeObjectRelease();
        }
        v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v21 = 0;
        v22 = "Filtered context is empty";
LABEL_37:
        _os_log_impl(&dword_1B4BE6000, v19, v20, v22, v21, 2u);
        MEMORY[0x1B5E44758](v21, -1, -1);
        goto LABEL_38;
      }
LABEL_105:
      swift_once();
      goto LABEL_35;
    }
  }
  swift_retain();
  v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v24)
    goto LABEL_34;
LABEL_16:
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v78);
  v13 = v78;
  if (!(v78 >> 62))
  {
    v14 = *(_QWORD *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v14)
      goto LABEL_18;
LABEL_40:
    swift_bridgeObjectRelease();
    v16 = 0;
    v17 = *(_QWORD *)(a5 + 16);
    if (!v17)
    {
LABEL_101:
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v70 = swift_bridgeObjectRetain();
      v71(v70);

      return (id)swift_bridgeObjectRelease();
    }
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_40;
LABEL_18:
  if ((v13 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v15 = *(id *)(v13 + 32);
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_105;
  }
  v15 = (id)MEMORY[0x1B5E43B94](0, v13);
LABEL_21:
  v16 = v15;
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a5 + 16);
  if (!v17)
    goto LABEL_101;
LABEL_41:
  swift_bridgeObjectRetain();
  v27 = 0;
  v72 = v17;
  v73 = a5;
  while (1)
  {
    v28 = *(unsigned __int8 *)(a5 + v27 + 32);
    if (!v16)
    {
      v75 = 0u;
      v76 = 0u;
LABEL_75:
      outlined destroy of Any?((uint64_t)&v75);
      if (one-time initialization token for conversationBridge != -1)
        swift_once();
      v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.conversationBridge);
      v48 = Logger.logObject.getter();
      v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = swift_slowAlloc();
        v51 = swift_slowAlloc();
        *(_QWORD *)&v77[0] = v51;
        *(_DWORD *)v50 = 136315138;
        v52 = 0x4C4E79636167656CLL;
        if (v28 != 1)
          v52 = 0xD00000000000001ALL;
        v53 = 0xEF747865746E6F43;
        if (v28 != 1)
          v53 = 0x80000001B4EF4590;
        if (v28)
          v54 = v52;
        else
          v54 = 0xD000000000000019;
        if (v28)
          v55 = v53;
        else
          v55 = 0x80000001B4EF4560;
        *(_QWORD *)(v50 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, (uint64_t *)v77);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v48, v49, "Missing context data for key=%s", (uint8_t *)v50, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v51, -1, -1);
        MEMORY[0x1B5E44758](v50, -1, -1);

        v17 = v72;
        a5 = v73;
      }
      else
      {

      }
      swift_beginAccess();
      swift_bridgeObjectRetain();
      v56 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
      v58 = v57;
      swift_bridgeObjectRelease();
      if ((v58 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v60 = *v6;
        *(_QWORD *)&v75 = *v6;
        *v6 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          v60 = v75;
        }
        specialized _NativeDictionary._delete(at:)(v56, v60);
        *v6 = v60;
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      swift_endAccess();
      goto LABEL_44;
    }
    result = objc_msgSend(v16, sel_serializedContextByKey);
    if (!result)
      break;
    v30 = result;
    v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v32 = 0x80000001B4EF4590;
    v33 = 0x4C4E79636167656CLL;
    if (v28 == 1)
      v32 = 0xEF747865746E6F43;
    else
      v33 = 0xD00000000000001ALL;
    if (v28)
      v34 = v33;
    else
      v34 = 0xD000000000000019;
    if (v28)
      v35 = v32;
    else
      v35 = 0x80000001B4EF4560;
    if (*(_QWORD *)(v31 + 16) && (v36 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v35), (v37 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v31 + 56) + 32 * v36, (uint64_t)&v75);
    }
    else
    {
      v75 = 0u;
      v76 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v76 + 1))
      goto LABEL_75;
    outlined init with take of Any(&v75, v77);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.conversationBridge);
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc();
      v42 = swift_slowAlloc();
      *(_QWORD *)&v75 = v42;
      *(_DWORD *)v41 = 136315138;
      v43 = 0x80000001B4EF4590;
      v44 = 0x4C4E79636167656CLL;
      if (v28 == 1)
        v43 = 0xEF747865746E6F43;
      else
        v44 = 0xD00000000000001ALL;
      if (v28)
        v45 = v44;
      else
        v45 = 0xD000000000000019;
      if (v28)
        v46 = v43;
      else
        v46 = 0x80000001B4EF4560;
      *(_QWORD *)(v41 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)&v75);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v39, v40, "Found data for key=%s", (uint8_t *)v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v42, -1, -1);
      MEMORY[0x1B5E44758](v41, -1, -1);

      v17 = v72;
      a5 = v73;
    }
    else
    {

    }
    if (v28)
    {
      outlined init with copy of Any((uint64_t)v77, (uint64_t)&v75);
      if (v28 == 1)
      {
        v61 = objc_allocWithZone((Class)type metadata accessor for ServerPromptData());
        v62 = ServerPromptData.init(serializedBackingStore:)((uint64_t)&v75);
        swift_beginAccess();
        v63 = swift_isUniquelyReferenced_nonNull_native();
        v74 = *v6;
        *v6 = 0x8000000000000000;
        v64 = (uint64_t)v62;
        v65 = 1;
      }
      else
      {
        v68 = objc_allocWithZone((Class)type metadata accessor for ServerBoundContextUpdateContainer());
        v69 = ServerBoundContextUpdateContainer.init(serializedBackingStore:)((uint64_t)&v75);
        swift_beginAccess();
        v63 = swift_isUniquelyReferenced_nonNull_native();
        v74 = *v6;
        *v6 = 0x8000000000000000;
        v64 = (uint64_t)v69;
        v65 = 2;
      }
    }
    else
    {
      outlined init with copy of Any((uint64_t)v77, (uint64_t)&v75);
      v66 = objc_allocWithZone((Class)type metadata accessor for ConversationalContextContainer());
      v67 = ConversationalContextContainer.init(serializedBackingStore:)((uint64_t)&v75);
      swift_beginAccess();
      v63 = swift_isUniquelyReferenced_nonNull_native();
      v74 = *v6;
      *v6 = 0x8000000000000000;
      v64 = (uint64_t)v67;
      v65 = 0;
    }
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v64, v65, v63);
    *v6 = v74;
    swift_bridgeObjectRelease();
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
LABEL_44:
    if (v17 == ++v27)
    {
      swift_bridgeObjectRelease();
      goto LABEL_101;
    }
  }
  __break(1u);
  return result;
}

uint64_t DeviceContextHelper.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DeviceContextHelper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DeviceContextDonation.donateContextToCollector(_:_:) in conformance DeviceContextHelper(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  return DeviceContextHelper.donateContextToCollector(_:_:)(a1, a2, a3);
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(id *__src, id *a2, unint64_t a3, void **a4)
{
  id *v4;
  id *v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  void **v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id *v20;
  void **v21;
  id *v22;
  id *v23;
  id *v24;
  id *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t result;
  id *v32;
  id *v35;
  char *v36;
  void **v37;
  id *v38;

  v4 = a2;
  v5 = __src;
  v6 = (char *)a2 - (char *)__src;
  v7 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v7 = (char *)a2 - (char *)__src;
  v8 = v7 >> 3;
  v9 = a3 - (_QWORD)a2;
  v10 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v10 = a3 - (_QWORD)a2;
  v11 = v10 >> 3;
  v38 = __src;
  v37 = a4;
  if (v8 >= v10 >> 3)
  {
    if (v9 >= -7)
    {
      if (a4 != a2 || &a2[v11] <= a4)
        memmove(a4, a2, 8 * v11);
      v22 = &a4[v11];
      v36 = (char *)v22;
      v38 = v4;
      if (v5 < v4 && v9 >= 8)
      {
        v23 = (id *)(a3 - 8);
        v24 = v4;
        v32 = v5;
        do
        {
          v35 = v4;
          v25 = v23 + 1;
          v26 = *--v24;
          v27 = *(v22 - 1);
          v28 = v26;
          v29 = objc_msgSend(v27, sel_proximity);
          v30 = objc_msgSend(v28, sel_proximity);

          if ((uint64_t)v30 >= (uint64_t)v29)
          {
            v36 = (char *)(v22 - 1);
            if (v25 < v22 || v23 >= v22 || v25 != v22)
              *v23 = *(v22 - 1);
            v24 = v35;
            --v22;
          }
          else
          {
            if (v25 != v35 || v23 >= v35)
              *v23 = *v24;
            v38 = v24;
          }
          if (v24 <= v32)
            break;
          --v23;
          v4 = v24;
        }
        while (v22 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v6 >= -7)
  {
    if (a4 != __src || &__src[v8] <= a4)
      memmove(a4, __src, 8 * v8);
    v12 = &a4[v8];
    v36 = (char *)v12;
    if ((unint64_t)v4 < a3 && v6 >= 8)
    {
      v13 = a4;
      do
      {
        v14 = v5;
        v15 = *v13;
        v16 = *v4;
        v17 = v15;
        v18 = objc_msgSend(v16, sel_proximity);
        v19 = objc_msgSend(v17, sel_proximity);

        if ((uint64_t)v19 >= (uint64_t)v18)
        {
          v21 = v14;
          if (v14 != v13)
            *v14 = *v13;
          v37 = ++v13;
          v20 = v4;
        }
        else
        {
          v20 = v4 + 1;
          v21 = v14;
          if (v14 < v4 || v14 >= v20 || v14 != v4)
            *v14 = *v4;
        }
        v5 = v21 + 1;
        if (v13 >= v12)
          break;
        v4 = v20;
      }
      while ((unint64_t)v20 < a3);
      v38 = v5;
    }
LABEL_43:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v38, (const void **)&v37, &v36);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized DeviceContextHelper.registerTransfomers()()
{
  uint64_t v0;
  id v1;
  id v2;

  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  v0 = static GenericContextTransformer.sharedInstance;
  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultService);
  v2 = v1;
  if (one-time initialization token for legacyNLContextKey != -1)
  {
    swift_once();
    v1 = v2;
  }
  objc_msgSend(v1, sel_registerContextTransformer_forType_, v0, static DeviceContextHelper.legacyNLContextKey);
  if (one-time initialization token for onDeviceConversationKey != -1)
    swift_once();
  objc_msgSend(v2, sel_registerContextTransformer_forType_, v0, static DeviceContextHelper.onDeviceConversationKey);
  if (one-time initialization token for serverBoundContextUpdate != -1)
    swift_once();
  objc_msgSend(v2, sel_registerContextTransformer_forType_, v0, static DeviceContextHelper.serverBoundContextUpdate);

}

unint64_t lazy protocol witness table accessor for type HALFeatureFlags and conformance HALFeatureFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HALFeatureFlags and conformance HALFeatureFlags;
  if (!lazy protocol witness table cache variable for type HALFeatureFlags and conformance HALFeatureFlags)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for HALFeatureFlags, &type metadata for HALFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HALFeatureFlags and conformance HALFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HALFeatureFlags and conformance HALFeatureFlags;
  if (!lazy protocol witness table cache variable for type HALFeatureFlags and conformance HALFeatureFlags)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for HALFeatureFlags, &type metadata for HALFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HALFeatureFlags and conformance HALFeatureFlags);
  }
  return result;
}

uint64_t sub_1B4DAA8E4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DeviceContextHelper.donateContextToCollector(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 40);
  v4 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch();
}

void specialized DeviceContextHelper.donateDataWithContext(_:_:_:)(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  id v29;
  Class isa;
  Class v31;
  id v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  unint64_t v56;
  id v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;

  v47 = a4;
  v48 = a3;
  v57 = a1;
  v5 = type metadata accessor for Date();
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v44 - v9;
  Date.init()();
  v58 = v10;
  v59 = v8;
  Date.addingTimeInterval(_:)();
  v11 = *(_QWORD *)(a2 + 64);
  v53 = a2 + 64;
  v12 = 1 << *(_BYTE *)(a2 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v54 = (unint64_t)(v12 + 63) >> 6;
  v60 = a2;
  swift_bridgeObjectRetain();
  v15 = 0;
  v52 = (unint64_t)"rsion";
  v51 = (unint64_t)"tionState";
  v55 = 0x80000001B4EF4590;
  v56 = 0x80000001B4EF4560;
  *(_QWORD *)&v16 = 136315138;
  v50 = v16;
  v49 = MEMORY[0x1E0DEE9B8] + 8;
  while (1)
  {
    if (v14)
    {
      v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_21;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v19 >= v54)
      goto LABEL_44;
    v20 = *(_QWORD *)(v53 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v54)
        goto LABEL_44;
      v20 = *(_QWORD *)(v53 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v54)
          goto LABEL_44;
        v20 = *(_QWORD *)(v53 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_20:
    v14 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_21:
    v22 = *(unsigned __int8 *)(*(_QWORD *)(v60 + 48) + v18);
    v23 = *(_QWORD *)(*(_QWORD *)(v60 + 56) + 8 * v18);
    v24 = 0x4C4E79636167656CLL;
    if (v22 != 1)
      v24 = 0xD00000000000001ALL;
    v25 = 0xEF747865746E6F43;
    if (v22 != 1)
      v25 = v55;
    if (v22)
      v26 = v24;
    else
      v26 = 0xD000000000000019;
    if (v22)
      v27 = v25;
    else
      v27 = v56;
    swift_unknownObjectRetain();
    v28 = (void *)MEMORY[0x1B5E432E8](v26, v27);
    swift_bridgeObjectRelease();
    v29 = objc_allocWithZone(MEMORY[0x1E0CFE870]);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v31 = Date._bridgeToObjectiveC()().super.isa;
    v32 = objc_msgSend(v29, sel_initWithType_deliveryDate_expirationDate_redactedKeyPaths_historyConfiguration_, v28, isa, v31, 0, 0);

    objc_msgSend(v57, sel_donateContext_withMetadata_pushToRemote_, v23, v32, 1);
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.conversationBridge);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc();
      v37 = swift_slowAlloc();
      v61 = v37;
      *(_DWORD *)v36 = v50;
      v38 = v51 | 0x8000000000000000;
      v39 = 0x4C4E79636167656CLL;
      if (v22 == 1)
        v38 = 0xEF747865746E6F43;
      else
        v39 = 0xD00000000000001ALL;
      if (v22)
        v40 = v39;
      else
        v40 = 0xD000000000000019;
      if (v22)
        v41 = v38;
      else
        v41 = v52 | 0x8000000000000000;
      *(_QWORD *)(v36 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v61);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v34, v35, "Syncing the contextType=%s to ContextCollector", (uint8_t *)v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v37, -1, -1);
      MEMORY[0x1B5E44758](v36, -1, -1);
    }

    swift_unknownObjectRelease();
  }
  v21 = v19 + 3;
  if (v21 >= v54)
  {
LABEL_44:
    swift_release();
    v48(1);
    v42 = v46;
    v43 = *(void (**)(char *, uint64_t))(v45 + 8);
    v43(v59, v46);
    v43(v58, v42);
    return;
  }
  v20 = *(_QWORD *)(v53 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v54)
      goto LABEL_44;
    v20 = *(_QWORD *)(v53 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_20;
  }
LABEL_46:
  __break(1u);
}

uint64_t specialized DeviceContextHelper.fetchContextFromCollector(from:_:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned __int8 v24;
  Class isa;
  void *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v8 = swift_allocObject();
  v9 = v8;
  *(_QWORD *)(v8 + 16) = MEMORY[0x1E0DEE9E0];
  v10 = *(_QWORD *)(a2 + 16);
  v11 = MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v28 = a3;
    v29 = a4;
    v30 = v8;
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v11 = aBlock[0];
    v12 = (unsigned __int8 *)(a2 + 32);
    do
    {
      v14 = *v12++;
      v13 = v14;
      v15 = v14 == 1;
      if (v14 == 1)
        v16 = 0x4C4E79636167656CLL;
      else
        v16 = 0xD00000000000001ALL;
      if (v15)
        v17 = 0xEF747865746E6F43;
      else
        v17 = 0x80000001B4EF4590;
      if (v13)
        v18 = v16;
      else
        v18 = 0xD000000000000019;
      if (v13)
        v19 = v17;
      else
        v19 = 0x80000001B4EF4560;
      aBlock[0] = v11;
      v21 = *(_QWORD *)(v11 + 16);
      v20 = *(_QWORD *)(v11 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        v11 = aBlock[0];
      }
      *(_QWORD *)(v11 + 16) = v21 + 1;
      v22 = v11 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v18;
      *(_QWORD *)(v22 + 40) = v19;
      --v10;
    }
    while (v10);
    v9 = v30;
    a4 = v29;
    a3 = v28;
  }
  specialized Set.init<A>(_:)(v11);
  swift_bridgeObjectRelease();
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = a3;
  v23[3] = a4;
  v23[4] = v9;
  v23[5] = a2;
  v24 = objc_msgSend(a1, sel_respondsToSelector_, sel_fetchContextsForKeys_includesNearbyDevices_completion_);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if ((v24 & 1) != 0)
  {
    swift_unknownObjectRetain();
    isa = Set._bridgeToObjectiveC()().super.isa;
    aBlock[4] = partial apply for closure #2 in DeviceContextHelper.fetchContextFromCollector(from:_:_:);
    aBlock[5] = v23;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AFServiceDeviceContext]?) -> ();
    aBlock[3] = &block_descriptor_9;
    v26 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(a1, sel_fetchContextsForKeys_includesNearbyDevices_completion_, isa, 1, v26);
    _Block_release(v26);
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_release();
}

uint64_t dispatch thunk of DeviceContextDonation.donateContextToCollector(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of DeviceContextRetriever.fetchContextFromCollector(from:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t method lookup function for DeviceContextHelper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DeviceContextHelper.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t sub_1B4DAB130()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B4DAB154()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id partial apply for closure #2 in DeviceContextHelper.fetchContextFromCollector(from:_:_:)(unint64_t a1)
{
  uint64_t v1;

  return closure #2 in DeviceContextHelper.fetchContextFromCollector(from:_:_:)(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

id specialized static DialogMetricsLogger.getSparseDialog(_:)(void *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  if (!a1)
    return 0;
  v2 = objc_allocWithZone(MEMORY[0x1E0D88030]);
  v3 = a1;
  v4 = objc_msgSend(v2, sel_init);
  objc_msgSend(v4, sel_setCanUseServerTTS_, objc_msgSend(v3, sel_canUseServerTTS));
  v5 = objc_msgSend(v3, sel_caption);
  if (v5)
  {
    v6 = objc_allocWithZone(MEMORY[0x1E0D88040]);
    v7 = v5;
    v5 = objc_msgSend(v6, sel_init);
    v8 = objc_msgSend(v7, sel_speakableTextOverride);
    objc_msgSend(v5, sel_setSpeakableTextOverride_, v8);

    v9 = objc_msgSend(v7, sel_text);
    objc_msgSend(v5, sel_setText_, v9);

  }
  objc_msgSend(v4, sel_setCaption_, v5);

  v10 = objc_msgSend(v3, sel_configuration);
  if (v10)
  {
    v11 = objc_allocWithZone(MEMORY[0x1E0D88038]);
    v12 = v10;
    v10 = objc_msgSend(v11, sel_init);
    v13 = objc_msgSend(v12, sel_gender);
    objc_msgSend(v10, sel_setGender_, v13);

    v14 = objc_msgSend(v12, sel_languageCode);
    objc_msgSend(v10, sel_setLanguageCode_, v14);

  }
  objc_msgSend(v4, sel_setConfiguration_, v10);

  v15 = objc_msgSend(v3, sel_content);
  if (v15)
  {
    v16 = objc_allocWithZone(MEMORY[0x1E0D88040]);
    v17 = v15;
    v15 = objc_msgSend(v16, sel_init);
    v18 = objc_msgSend(v17, sel_speakableTextOverride);
    objc_msgSend(v15, (SEL)&selRef_textToSpeechEnabled + 3, v18);

    v19 = objc_msgSend(v17, (SEL)&selRef_loadFlowPluginWithBundleId_bundlePath_rcId_hypothesisId_reply_);
    objc_msgSend(v15, (SEL)&selRef_temperatureUnit, v19);

  }
  objc_msgSend(v4, sel_setContent_, v15);

  v20 = objc_msgSend(v3, sel_dialogIdentifier);
  objc_msgSend(v4, sel_setDialogIdentifier_, v20);

  objc_msgSend(v4, sel_setPrintedOnly_, objc_msgSend(v3, sel_printedOnly));
  objc_msgSend(v4, sel_setSpokenOnly_, objc_msgSend(v3, sel_spokenOnly));

  return v4;
}

id specialized static DialogMetricsLogger.getSparseAddDialog(addDialog:)(void *a1)
{
  id v2;
  id result;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  Class isa;
  id v11;
  id v12;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D884F0]), sel_init);
  result = objc_msgSend(a1, sel_dialogs);
  if (!result)
    goto LABEL_16;
  v4 = result;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SADialog);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_4;
LABEL_14:
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v2, sel_setDialogs_, isa);

    v11 = objc_msgSend(a1, sel_listenAfterSpeaking);
    objc_msgSend(v2, sel_setListenAfterSpeaking_, v11);

    v12 = objc_msgSend(a1, sel_listenAfterSpeakingBehavior);
    objc_msgSend(v2, sel_setListenAfterSpeakingBehavior_, v12);

    return v2;
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
    goto LABEL_14;
LABEL_4:
  result = (id)specialized ContiguousArray.reserveCapacity(_:)();
  if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v8 = (id)MEMORY[0x1B5E43B94](v7, v5);
      else
        v8 = *(id *)(v5 + 8 * v7 + 32);
      v9 = v8;
      if (!specialized static DialogMetricsLogger.getSparseDialog(_:)(v8))
        objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88030]), sel_init);

      ++v7;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v6 != v7);
    goto LABEL_14;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized static DialogMetricsLogger.logAnalytics(dialog:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  unint64_t v11;
  id v12;
  id v13;
  id v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  unint64_t v18;
  _OWORD v19[2];
  __int128 v20;
  uint64_t v21;
  unint64_t v22;

  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v6 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.instrumentation);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1B4BE6000, v8, v9, "Logging Dialog to AFAnalytics", v10, 2u);
    MEMORY[0x1B5E44758](v10, -1, -1);
  }

  v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v22 = v11;
  v12 = specialized static DialogMetricsLogger.getSparseAddDialog(addDialog:)(a1);
  v13 = objc_msgSend(v12, sel_dictionary);
  if (v13)
  {
    v14 = v13;
    v21 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
    *(_QWORD *)&v20 = v14;
    outlined init with take of Any(&v20, v19);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = v11;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 0x6C46746E65696C43, 0xEE0077656956776FLL, isUniquelyReferenced_nonNull_native);
    v16 = v18;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0x6C46746E65696C43, 0xEE0077656956776FLL, &v20);
    outlined destroy of Any?((uint64_t)&v20);
    v16 = v22;
  }
  specialized static Log.logAFAnalytics(eventType:eventContext:)(3700, v16);

  swift_bridgeObjectRelease();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

ValueMetadata *type metadata accessor for DialogMetricsLogger()
{
  return &type metadata for DialogMetricsLogger;
}

double DispatchTimeInterval.seconds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  double v7;
  double v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;

  v1 = type metadata accessor for DispatchTimeInterval();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  v5 = (*(uint64_t (**)(uint64_t *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == *MEMORY[0x1E0DEF4A0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    return (double)*v4;
  }
  if (v5 == *MEMORY[0x1E0DEF490])
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    v7 = (double)*v4;
    v8 = 1000.0;
    return v7 / v8;
  }
  if (v5 == *MEMORY[0x1E0DEF488])
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    v7 = (double)*v4;
    v8 = 1000000.0;
    return v7 / v8;
  }
  if (v5 == *MEMORY[0x1E0DEF480])
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    v7 = (double)*v4;
    v8 = 1000000000.0;
    return v7 / v8;
  }
  if (v5 != *MEMORY[0x1E0DEF498])
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1B4BE6000, v10, v11, "Cannot convert unknown DispatchTimeInterval to seconds, returning Double.infinity", v12, 2u);
      MEMORY[0x1B5E44758](v12, -1, -1);
    }

    (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(v4, v1);
  }
  return INFINITY;
}

SiriKitRuntime::EmergencyAffinityScorer __swiftcall EmergencyAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::EmergencyAffinityScorer result;

  v0 = (void *)0x80000001B4EF69F0;
  v1 = 0xD000000000000022;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

void *EmergencyAffinityScorer.sirenIdentifierNamespace.unsafeMutableAddressor()
{
  return &static EmergencyAffinityScorer.sirenIdentifierNamespace;
}

unint64_t static EmergencyAffinityScorer.sirenIdentifierNamespace.getter()
{
  return 0xD000000000000012;
}

void *EmergencyAffinityScorer.organizationIdentifierNamespace.unsafeMutableAddressor()
{
  return &static EmergencyAffinityScorer.organizationIdentifierNamespace;
}

unint64_t static EmergencyAffinityScorer.organizationIdentifierNamespace.getter()
{
  return 0xD000000000000015;
}

uint64_t EmergencyAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for EmergencyAffinityScorer()
{
  return &type metadata for EmergencyAffinityScorer;
}

uint64_t EmergencyCallMitigatorOverride.overrideType.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

uint64_t (*EmergencyCallMitigatorOverride.overrideType.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t EmergencyCallMitigatorOverride.topRankedParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Siri_Nlu_External_UserParse?(v1 + OBJC_IVAR____TtC14SiriKitRuntime30EmergencyCallMitigatorOverride_topRankedParse, a1);
}

uint64_t EmergencyCallMitigatorOverride.__allocating_init(topRankedParse:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_BYTE *)(v2 + 16) = 1;
  outlined init with take of Siri_Nlu_External_UserParse?(a1, v2 + OBJC_IVAR____TtC14SiriKitRuntime30EmergencyCallMitigatorOverride_topRankedParse);
  return v2;
}

uint64_t EmergencyCallMitigatorOverride.init(topRankedParse:)(uint64_t a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = 1;
  outlined init with take of Siri_Nlu_External_UserParse?(a1, v1 + OBJC_IVAR____TtC14SiriKitRuntime30EmergencyCallMitigatorOverride_topRankedParse);
  return v1;
}

uint64_t EmergencyCallMitigatorOverride.deinit()
{
  uint64_t v0;

  outlined destroy of Siri_Nlu_External_UserParse?(v0 + OBJC_IVAR____TtC14SiriKitRuntime30EmergencyCallMitigatorOverride_topRankedParse);
  return v0;
}

_QWORD *sub_1B4DABEA8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 96))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1B4DABEE8(char *a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  v2 = *a2;
  v4 = *a1;
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 104))(&v4);
}

uint64_t ObjC metadata update function for EmergencyCallMitigatorOverride()
{
  return type metadata accessor for EmergencyCallMitigatorOverride();
}

void type metadata completion function for EmergencyCallMitigatorOverride()
{
  unint64_t v0;

  type metadata accessor for Siri_Nlu_External_UserParse?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for EmergencyCallMitigatorOverride()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EmergencyCallMitigatorOverride.overrideType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of EmergencyCallMitigatorOverride.overrideType.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of EmergencyCallMitigatorOverride.overrideType.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of EmergencyCallMitigatorOverride.__allocating_init(topRankedParse:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of EmergencyCallMitigatorOverride.evaluate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t static EmergencyRequestUtils.isEmergencyRequest(userDialogAct:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  objc_opt_self();
  v0 = swift_dynamicCastObjCClass();
  if (!v0)
    return 0;
  v1 = (void *)v0;
  swift_unknownObjectRetain();
  v2 = objc_msgSend(v1, sel_task);
  v3 = objc_msgSend(v2, sel_identifiers);

  type metadata accessor for USOSerializedIdentifier();
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
    goto LABEL_42;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5)
  {
LABEL_43:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v8 = 0;
    goto LABEL_44;
  }
LABEL_4:
  if ((v4 & 0xC000000000000001) != 0)
    v6 = (id)MEMORY[0x1B5E43B94](0, v4);
  else
    v6 = *(id *)(v4 + 32);
  v7 = v6;
  if ((USOSerializedIdentifier.isEmergencyNumber.getter() & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();

    v8 = 1;
    goto LABEL_44;
  }
  v9 = 0;
  v10 = v5 - 1;
  while (1)
  {
    v12 = objc_msgSend(v7, sel_namespaceString);
    if (v12)
      break;

    if (v10 == v9)
      goto LABEL_43;
LABEL_19:
    if ((v4 & 0xC000000000000001) != 0)
      v18 = (id)MEMORY[0x1B5E43B94](v9 + 1, v4);
    else
      v18 = *(id *)(v4 + 8 * v9 + 40);
    v7 = v18;
    if (__OFADD__(v9 + 1, 1))
    {
      __break(1u);
LABEL_42:
      swift_bridgeObjectRetain();
      v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5)
        goto LABEL_43;
      goto LABEL_4;
    }
    v19 = objc_msgSend(v18, sel_namespaceString);
    if (!v19)
      goto LABEL_27;
    v20 = v19;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

    if (v21 != 0xD000000000000014 || v23 != 0x80000001B4EF4A20)
    {
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v24 & 1) != 0)
        goto LABEL_31;
LABEL_27:
      v25 = objc_msgSend(v7, sel_namespaceString);
      if (!v25)
        goto LABEL_11;
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v29 = v28;

      if (v27 != 0x6D754E656E6F6870 || v29 != 0xEB00000000726562)
      {
        v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v34 & 1) == 0)
          goto LABEL_11;
        goto LABEL_31;
      }
    }
    swift_bridgeObjectRelease();
LABEL_31:
    v30 = objc_msgSend(v7, sel_value);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v32;

    if (v31 == 0x636E656772656D65 && v33 == 0xEF7265626D754E79)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
LABEL_37:
      swift_unknownObjectRelease();
      v8 = 1;
      goto LABEL_44;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
      swift_bridgeObjectRelease();

      goto LABEL_37;
    }
LABEL_11:
    ++v9;
  }
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  if (v14 == 0xD000000000000015 && v16 == 0x80000001B4EF4A50)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_40;
  }
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    if (v10 == v9)
      goto LABEL_43;
    goto LABEL_19;
  }
  swift_unknownObjectRelease();
LABEL_40:
  swift_bridgeObjectRelease();
  v8 = 1;
LABEL_44:
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t USOSerializedIdentifier.isEmergencyRequest.getter()
{
  void *v0;
  uint64_t result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if ((USOSerializedIdentifier.isEmergencyNumber.getter() & 1) != 0)
    return 1;
  result = (uint64_t)objc_msgSend(v0, sel_namespaceString);
  if (result)
  {
    v2 = (void *)result;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

    if (v3 == 0xD000000000000015 && v5 == 0x80000001B4EF4A50)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      return v6 & 1;
    }
  }
  return result;
}

uint64_t USOSerializedIdentifier.isEmergencyOrganization.getter()
{
  void *v0;
  uint64_t result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  result = (uint64_t)objc_msgSend(v0, sel_namespaceString);
  if (result)
  {
    v2 = (void *)result;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;

    if (v3 == 0xD000000000000015 && v5 == 0x80000001B4EF4A50)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      return v6 & 1;
    }
  }
  return result;
}

uint64_t USOSerializedIdentifier.KnownEmergencyNamespaces.rawValue.getter(char a1)
{
  uint64_t result;

  result = 0xD000000000000014;
  if (a1)
  {
    if (a1 == 1)
      return 0x6D754E656E6F6870;
    else
      return 0xD000000000000015;
  }
  return result;
}

uint64_t USOSerializedIdentifier.KnownEmergencyIdentifiers.rawValue.getter()
{
  return 0x636E656772656D65;
}

BOOL USOSerializedIdentifier.KnownEmergencyIdentifiers.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of USOSerializedIdentifier.KnownEmergencyIdentifiers.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance USOSerializedIdentifier.KnownEmergencyIdentifiers()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance USOSerializedIdentifier.KnownEmergencyIdentifiers()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance USOSerializedIdentifier.KnownEmergencyIdentifiers()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance USOSerializedIdentifier.KnownEmergencyIdentifiers@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance USOSerializedIdentifier.KnownEmergencyIdentifiers, *a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance USOSerializedIdentifier.KnownEmergencyIdentifiers(_QWORD *a1@<X8>)
{
  *a1 = 0x636E656772656D65;
  a1[1] = 0xEF7265626D754E79;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance USOSerializedIdentifier.KnownEmergencyNamespaces(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0x6D754E656E6F6870;
  v4 = 0xEB00000000726562;
  v5 = 0x80000001B4EF4A50;
  if (v2 != 1)
  {
    v3 = 0xD000000000000015;
    v4 = 0x80000001B4EF4A50;
  }
  if (*a1)
    v6 = v3;
  else
    v6 = 0xD000000000000014;
  if (v2)
    v7 = v4;
  else
    v7 = 0x80000001B4EF4A20;
  v8 = 0x6D754E656E6F6870;
  if (*a2 == 1)
    v5 = 0xEB00000000726562;
  else
    v8 = 0xD000000000000015;
  if (*a2)
    v9 = v8;
  else
    v9 = 0xD000000000000014;
  if (*a2)
    v10 = v5;
  else
    v10 = 0x80000001B4EF4A20;
  if (v6 == v9 && v7 == v10)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance USOSerializedIdentifier.KnownEmergencyNamespaces()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance USOSerializedIdentifier.KnownEmergencyNamespaces()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance USOSerializedIdentifier.KnownEmergencyNamespaces()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance USOSerializedIdentifier.KnownEmergencyNamespaces@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized USOSerializedIdentifier.KnownEmergencyNamespaces.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance USOSerializedIdentifier.KnownEmergencyNamespaces(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xD000000000000014;
  v3 = 0xEB00000000726562;
  v4 = 0x6D754E656E6F6870;
  if (*v1 != 1)
  {
    v4 = 0xD000000000000015;
    v3 = 0x80000001B4EF4A50;
  }
  if (*v1)
  {
    v2 = v4;
    v5 = v3;
  }
  else
  {
    v5 = 0x80000001B4EF4A20;
  }
  *a1 = v2;
  a1[1] = v5;
}

unint64_t specialized USOSerializedIdentifier.KnownEmergencyNamespaces.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of USOSerializedIdentifier.KnownEmergencyNamespaces.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type USOSerializedIdentifier.KnownEmergencyIdentifiers and conformance USOSerializedIdentifier.KnownEmergencyIdentifiers()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type USOSerializedIdentifier.KnownEmergencyIdentifiers and conformance USOSerializedIdentifier.KnownEmergencyIdentifiers;
  if (!lazy protocol witness table cache variable for type USOSerializedIdentifier.KnownEmergencyIdentifiers and conformance USOSerializedIdentifier.KnownEmergencyIdentifiers)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for USOSerializedIdentifier.KnownEmergencyIdentifiers, &type metadata for USOSerializedIdentifier.KnownEmergencyIdentifiers);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type USOSerializedIdentifier.KnownEmergencyIdentifiers and conformance USOSerializedIdentifier.KnownEmergencyIdentifiers);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type USOSerializedIdentifier.KnownEmergencyNamespaces and conformance USOSerializedIdentifier.KnownEmergencyNamespaces()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type USOSerializedIdentifier.KnownEmergencyNamespaces and conformance USOSerializedIdentifier.KnownEmergencyNamespaces;
  if (!lazy protocol witness table cache variable for type USOSerializedIdentifier.KnownEmergencyNamespaces and conformance USOSerializedIdentifier.KnownEmergencyNamespaces)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for USOSerializedIdentifier.KnownEmergencyNamespaces, &type metadata for USOSerializedIdentifier.KnownEmergencyNamespaces);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type USOSerializedIdentifier.KnownEmergencyNamespaces and conformance USOSerializedIdentifier.KnownEmergencyNamespaces);
  }
  return result;
}

ValueMetadata *type metadata accessor for EmergencyRequestUtils()
{
  return &type metadata for EmergencyRequestUtils;
}

uint64_t storeEnumTagSinglePayload for USOSerializedIdentifier.KnownEmergencyIdentifiers(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4DACCAC + 4 * byte_1B4EE9530[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4DACCCC + 4 * byte_1B4EE9535[v4]))();
}

_BYTE *sub_1B4DACCAC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4DACCCC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4DACCD4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4DACCDC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4DACCE4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4DACCEC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for USOSerializedIdentifier.KnownEmergencyIdentifiers()
{
  return &type metadata for USOSerializedIdentifier.KnownEmergencyIdentifiers;
}

uint64_t storeEnumTagSinglePayload for USOSerializedIdentifier.KnownEmergencyNamespaces(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B4DACD54 + 4 * byte_1B4EE953F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B4DACD88 + 4 * byte_1B4EE953A[v4]))();
}

uint64_t sub_1B4DACD88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DACD90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4DACD98);
  return result;
}

uint64_t sub_1B4DACDA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4DACDACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B4DACDB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DACDB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for USOSerializedIdentifier.KnownEmergencyNamespaces()
{
  return &type metadata for USOSerializedIdentifier.KnownEmergencyNamespaces;
}

uint64_t EmptyAsrOverride.overrideType.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

uint64_t (*EmptyAsrOverride.overrideType.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t EmptyAsrOverride.endpointMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t EmptyAsrOverride.consecutiveEmptyInputs.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t EmptyAsrOverride.isFirstRequestInSession.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t EmptyAsrOverride.isFlowAwaitingInput.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t EmptyAsrOverride.didPreviouslyFallbackToServer.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t EmptyAsrOverride.isSpeechRequest.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 43);
}

uint64_t EmptyAsrOverride.isNlEmpty.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 44);
}

uint64_t EmptyAsrOverride.aceInputOrigin.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EmptyAsrOverride.__allocating_init(endpointMode:aceInputOrigin:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:didPreviouslyFallbackToServer:isSpeechRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, uint64_t a7, char a8, char a9)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 6;
  *(_BYTE *)(result + 40) = a5;
  *(_BYTE *)(result + 41) = a6;
  *(_QWORD *)(result + 24) = a1;
  *(_QWORD *)(result + 32) = a7;
  *(_BYTE *)(result + 42) = a8;
  *(_BYTE *)(result + 44) = a4;
  *(_BYTE *)(result + 43) = a9;
  *(_QWORD *)(result + 48) = a2;
  *(_QWORD *)(result + 56) = a3;
  return result;
}

uint64_t EmptyAsrOverride.init(endpointMode:aceInputOrigin:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:didPreviouslyFallbackToServer:isSpeechRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, uint64_t a7, char a8, char a9)
{
  uint64_t v9;

  *(_BYTE *)(v9 + 16) = 6;
  *(_BYTE *)(v9 + 40) = a5;
  *(_BYTE *)(v9 + 41) = a6;
  *(_QWORD *)(v9 + 24) = a1;
  *(_QWORD *)(v9 + 32) = a7;
  *(_BYTE *)(v9 + 42) = a8;
  *(_BYTE *)(v9 + 44) = a4;
  *(_BYTE *)(v9 + 43) = a9;
  *(_QWORD *)(v9 + 48) = a2;
  *(_QWORD *)(v9 + 56) = a3;
  return v9;
}

uint64_t EmptyAsrOverride.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t outlined destroy of InputOrigin?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_1B4DACFCC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 152))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1B4DAD00C(char *a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  v2 = *a2;
  v4 = *a1;
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 160))(&v4);
}

uint64_t method lookup function for EmptyAsrOverride()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EmptyAsrOverride.overrideType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of EmptyAsrOverride.overrideType.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of EmptyAsrOverride.overrideType.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of EmptyAsrOverride.__allocating_init(endpointMode:aceInputOrigin:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:didPreviouslyFallbackToServer:isSpeechRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of EmptyAsrOverride.evaluate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t EmptyASRRule.ruleType.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t EmptyASRRule.ruleType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t (*EmptyASRRule.ruleType.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t EmptyASRRule.endpointMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t EmptyASRRule.isFirstRequestInSession.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t EmptyASRRule.isSystemPrompted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t EmptyASRRule.didPreviouslyFallbackToServer.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 35);
}

uint64_t EmptyASRRule.__allocating_init(endpointMode:isFirstRequestInSession:isSystemPrompted:didPreviouslyFallbackToServer:)(uint64_t a1, char a2, char a3, char a4, char a5)
{
  uint64_t result;

  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 6;
  *(_QWORD *)(result + 24) = a1;
  *(_BYTE *)(result + 32) = a2 & 1;
  *(_BYTE *)(result + 33) = a3;
  *(_BYTE *)(result + 34) = a4;
  *(_BYTE *)(result + 35) = a5;
  return result;
}

uint64_t EmptyASRRule.init(endpointMode:isFirstRequestInSession:isSystemPrompted:didPreviouslyFallbackToServer:)(uint64_t a1, char a2, char a3, char a4, char a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 16) = 6;
  *(_QWORD *)(v5 + 24) = a1;
  *(_BYTE *)(v5 + 32) = a2 & 1;
  *(_BYTE *)(v5 + 33) = a3;
  *(_BYTE *)(v5 + 34) = a4;
  *(_BYTE *)(v5 + 35) = a5;
  return v5;
}

SiriKitRuntime::PreExecutionDecision __swiftcall EmptyASRRule.evaluate()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  if (one-time initialization token for conversationBridge != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315906;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AFEndpointMode?);
    v6 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 1024;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v4 + 18) = 1024;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v4 + 24) = 1024;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "endpointMode:%s, isFirstRequestInSession:%{BOOL}d, isSystemPrompted:%{BOOL}d, didPreviouslyFallbackToServer:%{BOOL}d", (uint8_t *)v4, 0x1Eu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v5, -1, -1);
    MEMORY[0x1B5E44758](v4, -1, -1);

    if ((*(_BYTE *)(v0 + 33) & 1) == 0)
      goto LABEL_5;
    return 7;
  }

  swift_release_n();
  if ((*(_BYTE *)(v0 + 33) & 1) != 0)
    return 7;
LABEL_5:
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    if (*(_BYTE *)(v0 + 34) != 1)
      return 8;
  }
  else if (*(_BYTE *)(v0 + 34) != 1 || *(_QWORD *)(v0 + 24) == 2)
  {
    return 8;
  }
  if (*(_BYTE *)(v0 + 35) == 1)
    return 8;
  return 11;
}

uint64_t EmptyASRRule.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t EmptyASRRule.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1B4DAD4B0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4DAD4E0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 128))(*a1);
}

uint64_t type metadata accessor for EmptyASRRule()
{
  return objc_opt_self();
}

uint64_t method lookup function for EmptyASRRule()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EmptyASRRule.ruleType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of EmptyASRRule.ruleType.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of EmptyASRRule.ruleType.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of EmptyASRRule.__allocating_init(endpointMode:isFirstRequestInSession:isSystemPrompted:didPreviouslyFallbackToServer:)(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 144))(a1, a2 & 1);
}

uint64_t dispatch thunk of EmptyASRRule.evaluate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t SiriRequestContext.publisher.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1, a1);
}

uint64_t SiriRequestContext.aceService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 40, a1);
}

uint64_t SiriRequestContext.init(publisher:aceService:)@<X0>(__int128 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with take of ReferenceResolutionClientProtocol(a1, a3);
  return outlined init with take of ReferenceResolutionClientProtocol(a2, a3 + 40);
}

uint64_t EncoreConversation.encoreEventsHandled.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_encoreEventsHandled;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t EncoreConversation.encoreRegistered.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_encoreRegistered);
  swift_beginAccess();
  return *v1;
}

void EncoreConversation.State.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for EncoreConversation.State(0);
  MEMORY[0x1E0C80A78](v1);
  outlined init with copy of ConversationHelperInput(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_1B4DAD6E8 + 4 * byte_1B4EE9820[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B4DAD6E8()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0, &demangling cache variable for type metadata for ActingFlow?);
  return 0x7964616572;
}

_QWORD *EncoreConversation.__allocating_init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v14;

  v14 = specialized EncoreConversation.__allocating_init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a11 - 8) + 8))(a1, a11);
  return v14;
}

_QWORD *EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v14;

  v14 = specialized EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a11 - 8) + 8))(a1, a11);
  return v14;
}

uint64_t closure #1 in EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return EncoreConversation.setupEncoreEventHandling()();
}

uint64_t EncoreConversation.setupEncoreEventHandling()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  *(_QWORD *)(v1 + 48) = static ConversationActor.shared;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 56) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[EncoreConversation] Register Encore Handler.", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }

  if (one-time initialization token for shared != -1)
    swift_once();
  *(_QWORD *)(v0 + 64) = static ReactiveUIEventActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B4BE6000, v1, v2, "[ReactiveEventActor] setting new handler", v3, 2u);
    MEMORY[0x1B5E44758](v3, -1, -1);
  }
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);

  v6 = *(_QWORD *)(v4 + 112);
  *(_QWORD *)(v4 + 112) = partial apply for closure #1 in EncoreConversation.setupEncoreEventHandling();
  *(_QWORD *)(v4 + 120) = v5;
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v6);
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B4BE6000, v1, v2, "[EncoreConversation] Registered Encore Handler.", v3, 2u);
    MEMORY[0x1B5E44758](v3, -1, -1);
  }
  v4 = *(_QWORD *)(v0 + 40);

  v5 = (_BYTE *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_encoreRegistered);
  swift_beginAccess();
  *v5 = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EncoreConversation.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  BOOL v15;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1B4BE6000, v6, v7, "[EncoreConversation] deinit.", v8, 2u);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }

  v9 = *(_QWORD *)(v1 + 16);
  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.releaseJetsamTransaction()(v9, &v15);
  OS_dispatch_semaphore.signal()();
  v10 = *(_QWORD *)(v1 + 24);
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v4, 1, 1, v11);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v10;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in EncoreConversation.deinit, (uint64_t)v12);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_siriRequest, &demangling cache variable for type metadata for SiriRequest?);
  outlined destroy of CamOutput(v1 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state, type metadata accessor for EncoreConversation.State);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v1 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_correctionsEngine);
  return v1;
}

uint64_t closure #1 in EncoreConversation.deinit()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return EncoreEngine.stop()();
}

uint64_t EncoreEngine.stop()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  v1[9] = type metadata accessor for EncoreEngineEvent(0);
  v1[10] = swift_task_alloc();
  return swift_task_switch();
}

{
  swift_storeEnumTagMultiPayload();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  outlined init with copy of ConversationHelperInput(v1, v3, type metadata accessor for EncoreEngineEvent);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of ConversationHelperInput(v3, v2, type metadata accessor for EncoreEngine.EngineEvent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  outlined destroy of CamOutput(v3, type metadata accessor for EncoreEngine.EngineEvent);
  outlined destroy of CamOutput(v1, type metadata accessor for EncoreEngineEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EncoreConversation.__deallocating_deinit()
{
  EncoreConversation.deinit();
  return swift_deallocClassInstance();
}

uint64_t closure #1 in EncoreConversation.setupEncoreEventHandling()(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = one-time initialization token for shared;
  swift_retain();
  v9 = a1;
  if (v8 != -1)
    swift_once();
  v10 = static ConversationActor.shared;
  v11 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v10;
  v12[3] = v11;
  v12[4] = a2;
  v12[5] = v9;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in EncoreConversation.setupEncoreEventHandling(), (uint64_t)v12);
  return swift_release();
}

uint64_t closure #1 in closure #1 in EncoreConversation.setupEncoreEventHandling()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in EncoreConversation.setupEncoreEventHandling()()
{
  uint64_t v0;

  EncoreConversation.handleEncoreEvent(event:)(*(void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void EncoreConversation.handleEncoreEvent(event:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  id v25;
  uint8_t *v26;
  _QWORD *v27;
  uint64_t v28;
  int EnumCaseMultiPayload;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55[10];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequest?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for EncoreConversation.State(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v53 = (uint64_t)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v49 - v13;
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  v16 = (id)__swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  v17 = a1;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v52 = (uint8_t *)v9;
    v20 = swift_slowAlloc();
    v54 = v14;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc();
    v49 = v10;
    v50 = v16;
    v23 = (_QWORD *)v22;
    v51 = v2;
    *(_DWORD *)v21 = 138412290;
    v55[7] = (uint64_t)v17;
    v24 = v6;
    v25 = v17;
    v2 = v51;
    v9 = (char *)v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v23 = v17;

    v6 = v24;
    _os_log_impl(&dword_1B4BE6000, v18, v19, "[EncoreConversation] handleEncoreEvent %@", v21, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v16 = v50;
    MEMORY[0x1B5E44758](v23, -1, -1);
    v26 = v21;
    v14 = v54;
    MEMORY[0x1B5E44758](v26, -1, -1);
  }
  else
  {

  }
  v27 = (_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_encoreEventsHandled);
  swift_beginAccess();
  if (__OFADD__(*v27, 1))
  {
    __break(1u);
    goto LABEL_22;
  }
  ++*v27;
  v28 = v2 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v28, (uint64_t)v14, type metadata accessor for EncoreConversation.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    swift_release();
LABEL_11:
    v30 = v2 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_siriRequest;
    swift_beginAccess();
    outlined init with copy of ReferenceResolutionClientProtocol?(v30, (uint64_t)v9, &demangling cache variable for type metadata for SiriRequest?);
    v31 = type metadata accessor for SiriRequest(0);
    LODWORD(v30) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v9, 1, v31);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for SiriRequest?);
    if ((_DWORD)v30 == 1)
    {
      v32 = Logger.logObject.getter();
      v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v34 = 0;
        _os_log_impl(&dword_1B4BE6000, v32, v33, "[EncoreConversation] handleEncoreEvent failed. Missing siriRequest)", v34, 2u);
        MEMORY[0x1B5E44758](v34, -1, -1);
      }

      return;
    }
    v44 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v6, 1, 1, v44);
    v45 = one-time initialization token for shared;
    v16 = v17;
    swift_retain();
    if (v45 == -1)
    {
LABEL_18:
      v46 = static ConversationActor.shared;
      v47 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
      v48 = (_QWORD *)swift_allocObject();
      v48[2] = v46;
      v48[3] = v47;
      v48[4] = v2;
      v48[5] = v16;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in EncoreConversation.handleEncoreEvent(event:), (uint64_t)v48);
      swift_release();
      return;
    }
LABEL_22:
    swift_once();
    goto LABEL_18;
  }
  if (!EnumCaseMultiPayload)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for ActingFlow?);
    goto LABEL_11;
  }
  swift_retain_n();
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    v38 = swift_slowAlloc();
    v54 = v14;
    v55[0] = v38;
    *(_DWORD *)v37 = 136315138;
    v52 = v37 + 4;
    v39 = v53;
    outlined init with copy of ConversationHelperInput(v28, v53, type metadata accessor for EncoreConversation.State);
    EncoreConversation.State.description.getter();
    v41 = v40;
    v43 = v42;
    outlined destroy of CamOutput(v39, type metadata accessor for EncoreConversation.State);
    v55[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, v55);
    v14 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v35, v36, "[EncoreConversation] handleEncoreEvent failed. Invalid state %s.", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v38, -1, -1);
    MEMORY[0x1B5E44758](v37, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  outlined destroy of CamOutput((uint64_t)v14, type metadata accessor for EncoreConversation.State);
}

Swift::Void __swiftcall EncoreConversation.setEncoreRegistered(registered:)(Swift::Bool registered)
{
  uint64_t v1;
  Swift::Bool *v3;

  v3 = (Swift::Bool *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_encoreRegistered);
  swift_beginAccess();
  *v3 = registered;
}

uint64_t closure #1 in EncoreConversation.handleEncoreEvent(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[2] = a4;
  v5[3] = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v5[4] = v6;
  v5[5] = *(_QWORD *)(v6 - 8);
  v5[6] = swift_task_alloc();
  v5[7] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v5[8] = swift_task_alloc();
  v5[9] = swift_task_alloc();
  v5[10] = type metadata accessor for EncoreEngineEvent(0);
  v5[11] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in EncoreConversation.handleEncoreEvent(event:)()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  id v4;

  v1 = (_QWORD *)v0[11];
  v2 = (void *)v0[3];
  v0[12] = *(_QWORD *)(v0[2] + 24);
  *v1 = v2;
  swift_storeEnumTagMultiPayload();
  v3 = one-time initialization token for shared;
  v4 = v2;
  if (v3 != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  outlined init with copy of ConversationHelperInput(v1, v3, type metadata accessor for EncoreEngineEvent);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of ConversationHelperInput(v3, v2, type metadata accessor for EncoreEngine.EngineEvent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  outlined destroy of CamOutput(v3, type metadata accessor for EncoreEngine.EngineEvent);
  outlined destroy of CamOutput(v1, type metadata accessor for EncoreEngineEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EncoreConversation.cancel()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  v1[9] = type metadata accessor for EncoreEngineEvent(0);
  v1[10] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void (**v5)();
  uint64_t v6;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[EncoreConversation] Cancel. Sending ensureReady event to interrupt any running request.", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = (void (**)())v0[10];
  v6 = v0[2];

  v0[11] = *(_QWORD *)(v6 + 24);
  *v5 = closure #1 in EncoreConversation.cancel();
  v5[1] = 0;
  swift_storeEnumTagMultiPayload();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  outlined init with copy of ConversationHelperInput(v1, v3, type metadata accessor for EncoreEngineEvent);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of ConversationHelperInput(v3, v2, type metadata accessor for EncoreEngine.EngineEvent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  outlined destroy of CamOutput(v3, type metadata accessor for EncoreEngine.EngineEvent);
  outlined destroy of CamOutput(v1, type metadata accessor for EncoreEngineEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in EncoreConversation.cancel()()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for executor != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "[EncoreConversation] Ensured ready due to cancellation.", v2, 2u);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

}

uint64_t EncoreConversation.ensureReady(timeout:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[11] = a1;
  v2[12] = v1;
  v3 = type metadata accessor for TimeoutError();
  v2[13] = v3;
  v2[14] = *(_QWORD *)(v3 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for ConversationCommitResult();
  v2[17] = swift_task_alloc();
  v2[18] = type metadata accessor for EncoreConversation.State(0);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v2[21] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t EncoreConversation.ensureReady(timeout:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t (*v16)(void);
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t *v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint8_t *buf;
  uint64_t v50;
  uint64_t v51[3];

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 176) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  v4 = &demangling cache variable for type metadata for (SiriCorrectionsFlow.State, SiriCorrectionsFlow.State);
  if (os_log_type_enabled(v2, v3))
  {
    v5 = *(_QWORD *)(v0 + 160);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = (uint8_t *)swift_slowAlloc();
    buf = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v7 = 136315138;
    v51[0] = (uint64_t)buf;
    v8 = v6 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
    swift_beginAccess();
    outlined init with copy of ConversationHelperInput(v8, v5, type metadata accessor for EncoreConversation.State);
    EncoreConversation.State.description.getter();
    v10 = v9;
    v12 = v11;
    outlined destroy of CamOutput(v5, type metadata accessor for EncoreConversation.State);
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v51);
    v4 = &demangling cache variable for type metadata for (SiriCorrectionsFlow.State, SiriCorrectionsFlow.State);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[EncoreConversation] Ensuring ready. state: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](buf, -1, -1);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v13 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 96) + v4[213];
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v14, v13, type metadata accessor for EncoreConversation.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 4:
      *(_QWORD *)(v0 + 208) = **(_QWORD **)(v0 + 152);
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_1B4BE6000, v17, v18, "[EncoreConversation] ensureReady waiting for commit to complete.", v19, 2u);
        MEMORY[0x1B5E44758](v19, -1, -1);
      }

      DispatchTimeInterval.seconds.getter();
      swift_retain();
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 216) = v20;
      *v20 = v0;
      v20[1] = EncoreConversation.ensureReady(timeout:);
      return withTimeout<A>(seconds:operation:)();
    case 2:
      v21 = *(_QWORD *)(v0 + 152);
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation, task: Task<(), Error>));
      *(_QWORD *)(v0 + 184) = *(_QWORD *)(v21 + *(int *)(v22 + 64));
      v23 = Logger.logObject.getter();
      v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v25 = 0;
        _os_log_impl(&dword_1B4BE6000, v23, v24, "[EncoreConversation] ensureReady waiting for prepare to complete.", v25, 2u);
        MEMORY[0x1B5E44758](v25, -1, -1);
      }

      *(_DWORD *)(v0 + 248) = *(_DWORD *)(v22 + 48);
      DispatchTimeInterval.seconds.getter();
      swift_retain();
      v26 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 192) = v26;
      *v26 = v0;
      v26[1] = EncoreConversation.ensureReady(timeout:);
      return withTimeout<A>(seconds:operation:)();
    case 0:
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 152), &demangling cache variable for type metadata for ActingFlow?);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v16 = *(uint64_t (**)(void))(v0 + 8);
      return v16();
  }
  swift_retain_n();
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = *(_QWORD *)(v0 + 160);
    v31 = (uint8_t *)swift_slowAlloc();
    v50 = swift_slowAlloc();
    v51[0] = v50;
    *(_DWORD *)v31 = 136315138;
    outlined init with copy of ConversationHelperInput(v14, v30, type metadata accessor for EncoreConversation.State);
    EncoreConversation.State.description.getter();
    v33 = v32;
    v35 = v34;
    outlined destroy of CamOutput(v30, type metadata accessor for EncoreConversation.State);
    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v28, v29, "[EncoreConversation] ensureReady can only be called for committed conversation. Invalid state %s.", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v50, -1, -1);
    MEMORY[0x1B5E44758](v31, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v36 = *(_QWORD *)(v0 + 152);
  v37 = *(_QWORD *)(v0 + 160);
  v51[0] = 0;
  v51[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  strcpy((char *)v51, "Invalid state ");
  HIBYTE(v51[1]) = -18;
  outlined init with copy of ConversationHelperInput(v14, v37, type metadata accessor for EncoreConversation.State);
  EncoreConversation.State.description.getter();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  outlined destroy of CamOutput(v37, type metadata accessor for EncoreConversation.State);
  v39._object = (void *)0x80000001B4EFBE30;
  v39._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v39);
  v40 = v51[0];
  v41 = v51[1];
  lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  v42 = (void *)swift_allocError();
  *v43 = v40;
  v43[1] = v41;
  swift_willThrow();
  outlined destroy of CamOutput(v36, type metadata accessor for EncoreConversation.State);
  *(_QWORD *)(v0 + 64) = v42;
  v44 = v42;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
  {

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }

  v45 = Logger.logObject.getter();
  v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v47 = 0;
    _os_log_impl(&dword_1B4BE6000, v45, v46, "[EncoreConversation] Grace period expired. Sending ensureReady event.", v47, 2u);
    MEMORY[0x1B5E44758](v47, -1, -1);
  }
  v48 = *(_QWORD *)(v0 + 96);

  *(_QWORD *)(v0 + 232) = *(_QWORD *)(v48 + 24);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(int *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 152);
  swift_release();
  outlined destroy of CamOutput(v2 + v1, type metadata accessor for RequestContinuation);
  outlined destroy of CamOutput(v2, type metadata accessor for SiriRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    outlined destroy of CamOutput(*(_QWORD *)(v2 + 136), (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 240) = v1;
  *v1 = v0;
  v1[1] = EncoreConversation.ensureReady(timeout:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;

  v1 = *(int *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 152);
  swift_release_n();
  outlined destroy of CamOutput(v2 + v1, type metadata accessor for RequestContinuation);
  outlined destroy of CamOutput(v2, type metadata accessor for SiriRequest);
  v3 = *(void **)(v0 + 200);
  *(_QWORD *)(v0 + 64) = v3;
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1B4BE6000, v5, v6, "[EncoreConversation] Grace period expired. Sending ensureReady event.", v7, 2u);
      MEMORY[0x1B5E44758](v7, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 96);

    *(_QWORD *)(v0 + 232) = *(_QWORD *)(v8 + 24);
    return swift_task_switch();
  }
  else
  {

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  swift_release_n();
  v1 = *(void **)(v0 + 224);
  *(_QWORD *)(v0 + 64) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1B4BE6000, v3, v4, "[EncoreConversation] Grace period expired. Sending ensureReady event.", v5, 2u);
      MEMORY[0x1B5E44758](v5, -1, -1);
    }
    v6 = *(_QWORD *)(v0 + 96);

    *(_QWORD *)(v0 + 232) = *(_QWORD *)(v6 + 24);
    return swift_task_switch();
  }
  else
  {

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t closure #1 in EncoreConversation.ensureReady(timeout:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return Task.value.getter();
}

uint64_t EncoreEngine.asyncEnsureReadyEvent()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *v1 = v0;
  v1[1] = AceServiceInvokerImpl.prepareForAudioHandoffFailed();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t EncoreConversation.accept(request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[67] = v2;
  v3[66] = a2;
  v3[65] = a1;
  v3[68] = type metadata accessor for UserInputResult();
  v3[69] = swift_task_alloc();
  v4 = type metadata accessor for Parse();
  v3[70] = v4;
  v3[71] = *(_QWORD *)(v4 - 8);
  v3[72] = swift_task_alloc();
  v3[73] = type metadata accessor for RequestContinuation(0);
  v3[74] = swift_task_alloc();
  v3[75] = swift_task_alloc();
  v3[76] = swift_task_alloc();
  v3[77] = swift_task_alloc();
  v5 = type metadata accessor for ExecutionContext();
  v3[78] = v5;
  v3[79] = *(_QWORD *)(v5 - 8);
  v3[80] = swift_task_alloc();
  v3[81] = swift_task_alloc();
  v6 = type metadata accessor for ConversationContext();
  v3[82] = v6;
  v3[83] = *(_QWORD *)(v6 - 8);
  v3[84] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTaskMetadata?);
  v3[85] = swift_task_alloc();
  v7 = type metadata accessor for Date();
  v3[86] = v7;
  v3[87] = *(_QWORD *)(v7 - 8);
  v3[88] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
  v3[89] = swift_task_alloc();
  v3[90] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  v3[91] = swift_task_alloc();
  v8 = type metadata accessor for ResponseMode();
  v3[92] = v8;
  v3[93] = *(_QWORD *)(v8 - 8);
  v3[94] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequest?);
  v3[95] = swift_task_alloc();
  v3[96] = type metadata accessor for EncoreConversation.State(0);
  v3[97] = swift_task_alloc();
  v3[98] = swift_task_alloc();
  v9 = type metadata accessor for SiriRequest(0);
  v3[99] = v9;
  v3[100] = *(_QWORD *)(v9 - 8);
  v3[101] = swift_task_alloc();
  v3[102] = swift_task_alloc();
  v3[103] = swift_task_alloc();
  v3[104] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v3[105] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t EncoreConversation.accept(request:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t, uint64_t);
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  os_log_type_t type[8];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  os_log_type_t v94[8];
  uint64_t v95[3];

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 832);
  v2 = *(_QWORD *)(v0 + 824);
  v3 = *(_QWORD *)(v0 + 528);
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  outlined init with copy of ConversationHelperInput(v3, v1, type metadata accessor for SiriRequest);
  outlined init with copy of ConversationHelperInput(v3, v2, type metadata accessor for SiriRequest);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(uint64_t **)(v0 + 832);
  v9 = *(_QWORD *)(v0 + 824);
  if (v7)
  {
    v10 = swift_slowAlloc();
    v90 = swift_slowAlloc();
    v95[0] = v90;
    *(_DWORD *)v10 = 136315394;
    v11 = *v8;
    v12 = v8[1];
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 504) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput((uint64_t)v8, type metadata accessor for SiriRequest);
    *(_WORD *)(v10 + 12) = 2080;
    type metadata accessor for Input();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
    v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 512) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v9, type metadata accessor for SiriRequest);
    _os_log_impl(&dword_1B4BE6000, v5, v6, "[EncoreConversation] Accept. request id: %s %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v90, -1, -1);
    MEMORY[0x1B5E44758](v10, -1, -1);
  }
  else
  {
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 832), type metadata accessor for SiriRequest);
    outlined destroy of CamOutput(v9, type metadata accessor for SiriRequest);
  }

  v15 = *(_QWORD *)(v0 + 784);
  v16 = *(_QWORD *)(v0 + 536);
  v17 = OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
  *(_QWORD *)(v0 + 848) = OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
  v18 = v16 + v17;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v18, v15, type metadata accessor for EncoreConversation.State);
  if (!swift_getEnumCaseMultiPayload())
  {
    v28 = *(_QWORD *)(v0 + 816);
    v29 = *(_QWORD *)(v0 + 808);
    v30 = *(_QWORD *)(v0 + 800);
    v31 = *(_QWORD *)(v0 + 792);
    v32 = *(_QWORD *)(v0 + 760);
    v33 = *(_QWORD *)(v0 + 536);
    v34 = *(_QWORD *)(v0 + 528);
    outlined init with take of ActingFlow?(*(_QWORD *)(v0 + 784), v0 + 256);
    outlined init with copy of ConversationHelperInput(v34, v32, type metadata accessor for SiriRequest);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v32, 0, 1, v31);
    v35 = v33 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_siriRequest;
    swift_beginAccess();
    outlined assign with take of SiriRequest?(v32, v35);
    swift_endAccess();
    outlined init with copy of ConversationHelperInput(v34, v28, type metadata accessor for SiriRequest);
    outlined init with copy of ConversationHelperInput(v34, v29, type metadata accessor for SiriRequest);
    swift_retain_n();
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.debug.getter();
    v38 = os_log_type_enabled(v36, v37);
    v39 = *(_QWORD *)(v0 + 816);
    v40 = *(_QWORD *)(v0 + 808);
    if (v38)
    {
      v41 = *(_QWORD *)(v0 + 752);
      v88 = *(_QWORD *)(v0 + 736);
      *(_QWORD *)type = *(_QWORD *)(v0 + 744);
      v42 = swift_slowAlloc();
      v91 = swift_slowAlloc();
      v95[0] = v91;
      *(_DWORD *)v42 = 136315650;
      v43 = ObjectIdentifier.debugDescription.getter();
      *(_QWORD *)(v0 + 480) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v42 + 12) = 2080;
      v45 = ObjectIdentifier.debugDescription.getter();
      *(_QWORD *)(v0 + 488) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of CamOutput(v39, type metadata accessor for SiriRequest);
      *(_WORD *)(v42 + 22) = 2080;
      CurrentRequest.responseMode.getter();
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA7DE8], MEMORY[0x1E0D9C7A0]);
      v47 = dispatch thunk of CustomStringConvertible.description.getter();
      v49 = v48;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)type + 8))(v41, v88);
      *(_QWORD *)(v0 + 496) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of CamOutput(v40, type metadata accessor for SiriRequest);
      _os_log_impl(&dword_1B4BE6000, v36, v37, "Setting environment %s currentRequest to %s with responseMode %s", (uint8_t *)v42, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v91, -1, -1);
      MEMORY[0x1B5E44758](v42, -1, -1);
    }
    else
    {
      swift_release_n();
      outlined destroy of CamOutput(v39, type metadata accessor for SiriRequest);
      outlined destroy of CamOutput(v40, type metadata accessor for SiriRequest);
    }

    v58 = *(_QWORD *)(v0 + 792);
    v59 = *(_QWORD *)(v0 + 720);
    v60 = *(_QWORD *)(v0 + 528);
    swift_retain();
    SiriEnvironment.currentRequest.setter();
    SiriEnvironment.userIdentity.getter();
    v61 = v60 + *(int *)(v58 + 36);
    outlined init with copy of ReferenceResolutionClientProtocol?(v61, v59, &demangling cache variable for type metadata for SiriRequestIdentities?);
    v62 = type metadata accessor for SiriRequestIdentities(0);
    v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 48);
    v64 = v63(v59, 1, v62);
    v65 = *(_QWORD *)(v0 + 728);
    v66 = *(_QWORD *)(v0 + 720);
    if (v64 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 720), &demangling cache variable for type metadata for SiriRequestIdentities?);
      v67 = type metadata accessor for IdentifiedUser();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v65, 1, 1, v67);
    }
    else
    {
      outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), &demangling cache variable for type metadata for IdentifiedUser?);
      outlined destroy of CamOutput(v66, type metadata accessor for SiriRequestIdentities);
    }
    v68 = *(_QWORD *)(v0 + 712);
    dispatch thunk of UserIdentityProvider.identityForCurrentRequest.setter();
    swift_release();
    SiriEnvironment.userIdentity.getter();
    outlined init with copy of ReferenceResolutionClientProtocol?(v61, v68, &demangling cache variable for type metadata for SiriRequestIdentities?);
    v69 = v63(v68, 1, v62);
    v70 = *(_QWORD *)(v0 + 712);
    if (v69 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 712), &demangling cache variable for type metadata for SiriRequestIdentities?);
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined destroy of CamOutput(v70, type metadata accessor for SiriRequestIdentities);
    }
    v71 = *(_QWORD *)(v0 + 536);
    dispatch thunk of UserIdentityProvider.knownHomeMembers.setter();
    swift_release();
    v72 = *(_QWORD *)(v71 + 48);
    swift_beginAccess();
    v73 = *(_QWORD *)(v72 + 32);
    if (v73 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      if (result)
        goto LABEL_22;
    }
    else
    {
      v74 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v74)
      {
LABEL_22:
        if ((v73 & 0xC000000000000001) != 0)
        {
          v75 = MEMORY[0x1B5E43B94](0, v73);
        }
        else
        {
          if (!*(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          v75 = *(_QWORD *)(v73 + 32);
          swift_retain();
        }
        v76 = *(_QWORD *)(v0 + 704);
        v77 = *(_QWORD *)(v0 + 696);
        v78 = *(_QWORD *)(v0 + 688);
        *(_QWORD *)v94 = *(_QWORD *)(v0 + 680);
        swift_bridgeObjectRelease();
        type metadata accessor for FlowTaskProvider();
        v79 = v75 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime;
        v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16);
        v80(v76, v75 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v78);
        swift_retain();
        swift_bridgeObjectRetain();
        dispatch thunk of FlowTaskProvider.__allocating_init(id:isClientInitiated:creationTime:)();
        SiriEnvironment.flowTask.setter();
        SiriEnvironment.currentRequest.getter();
        v80(v76, v79, v78);
        swift_bridgeObjectRetain();
        FlowTaskMetadata.init(id:isClientInitiated:creationTime:)();
        v81 = type metadata accessor for FlowTaskMetadata();
        (*(void (**)(os_log_type_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(*(os_log_type_t **)v94, 0, 1, v81);
        CurrentRequest.flowTaskMetadata.setter();
        swift_release();
        swift_release_n();
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRelease();
LABEL_28:
    v82 = *(_QWORD *)(v0 + 792);
    v83 = *(_QWORD *)(v0 + 648);
    v84 = *(_QWORD *)(v0 + 640);
    v92 = *(_QWORD *)(v0 + 632);
    v93 = *(_QWORD *)(v0 + 624);
    v85 = *(_QWORD *)(v0 + 528);
    SiriEnvironment.scopedReferenceResolutionData.getter();
    outlined copy of Data?(*(_QWORD *)(v85 + *(int *)(v82 + 28)), *(_QWORD *)(v85 + *(int *)(v82 + 28) + 8));
    dispatch thunk of ScopedReferenceResolutionDataProvider.dataForCurrentRequest.setter();
    swift_release();
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    static AceService.currentAsync.getter();
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 16, v0 + 296);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 56, v0 + 136);
    ExecutionContext.init(outputPublisher:aceServiceInvoker:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16))(v84, v83, v93);
    ConversationContext.init(executionContext:)();
    (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v83, v93);
    outlined destroy of SiriRequestContext(v0 + 16);
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 256, v0 + 96, &demangling cache variable for type metadata for ActingFlow?);
    if (*(_QWORD *)(v0 + 120))
    {
      v86 = *(_QWORD *)(v0 + 536);
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 96), v0 + 216);
      *(_QWORD *)(v0 + 856) = *(_QWORD *)(v86 + 24);
      return swift_task_switch();
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for ActingFlow?);
      v87 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 896) = v87;
      *v87 = v0;
      v87[1] = EncoreConversation.accept(request:);
      return EncoreConversation.isEmpty()();
    }
  }
  outlined destroy of CamOutput(*(_QWORD *)(v0 + 784), type metadata accessor for EncoreConversation.State);
  swift_retain_n();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = *(_QWORD *)(v0 + 776);
    v22 = (uint8_t *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v95[0] = v23;
    *(_DWORD *)v22 = 136315138;
    outlined init with copy of ConversationHelperInput(v18, v21, type metadata accessor for EncoreConversation.State);
    EncoreConversation.State.description.getter();
    v25 = v24;
    v27 = v26;
    outlined destroy of CamOutput(v21, type metadata accessor for EncoreConversation.State);
    *(_QWORD *)(v0 + 472) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v19, v20, "[EncoreConversation] Accept failed. Invalid state %s.", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v23, -1, -1);
    MEMORY[0x1B5E44758](v22, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v50 = *(_QWORD *)(v0 + 776);
  v95[0] = 0;
  v95[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  strcpy((char *)v95, "Invalid state ");
  HIBYTE(v95[1]) = -18;
  outlined init with copy of ConversationHelperInput(v18, v50, type metadata accessor for EncoreConversation.State);
  EncoreConversation.State.description.getter();
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  outlined destroy of CamOutput(v50, type metadata accessor for EncoreConversation.State);
  v52._object = (void *)0x80000001B4EFBE70;
  v52._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v52);
  type metadata accessor for Input();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
  v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  v55 = v95[0];
  v54 = v95[1];
  lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  swift_allocError();
  *v56 = v55;
  v56[1] = v54;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[107];
  v2 = swift_task_alloc();
  v0[108] = v2;
  *(_QWORD *)(v2 + 16) = v0 + 27;
  *(_QWORD *)(v2 + 24) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[109] = v3;
  *v3 = v0;
  v3[1] = EncoreConversation.accept(request:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 880) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  outlined init with take of StringKeyedValue(*(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 616), type metadata accessor for RequestContinuation);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
  if ((ActingFlow.isAdaptedFlow.getter() & 1) != 0)
  {
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 888) = v1;
    *v1 = v0;
    v1[1] = EncoreConversation.accept(request:);
    return EncoreEngine.asyncAcceptEvent(request:context:)(*(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 672));
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 576);
    v4 = *(_QWORD *)(v0 + 568);
    v5 = *(_QWORD *)(v0 + 560);
    v6 = *(_QWORD *)(v0 + 536);
    Input.parse.getter();
    v7 = Parse.usoTasks.getter();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    *(_QWORD *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_tasks) = v7;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 216);
    outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 616), *(_QWORD *)(v0 + 552), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      v8 = *(_QWORD *)(v0 + 776);
      v9 = *(_QWORD *)(v0 + 616);
      v10 = *(_QWORD *)(v0 + 528);
      v11 = *(_QWORD *)(v0 + 536) + *(_QWORD *)(v0 + 848);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 256, &demangling cache variable for type metadata for ActingFlow?);
      v12 = v8
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                   + 48);
      outlined init with copy of ConversationHelperInput(v10, v8, type metadata accessor for SiriRequest);
      outlined init with copy of ConversationHelperInput(v9, v12, type metadata accessor for RequestContinuation);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      outlined assign with take of EncoreConversation.State(v8, v11);
      swift_endAccess();
    }
    else
    {
      v13 = *(_QWORD *)(v0 + 672);
      v14 = *(_QWORD *)(v0 + 664);
      v15 = *(_QWORD *)(v0 + 656);
      outlined destroy of CamOutput(*(_QWORD *)(v0 + 552), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 256, &demangling cache variable for type metadata for ActingFlow?);
    }
    v16 = *(_QWORD *)(v0 + 616);
    outlined init with copy of ConversationHelperInput(v16, *(_QWORD *)(v0 + 520), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
    outlined destroy of CamOutput(v16, type metadata accessor for RequestContinuation);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 256, &demangling cache variable for type metadata for ActingFlow?);
  __swift_destroy_boxed_opaque_existential_1(v0 + 216);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 616);
  v2 = *(_QWORD *)(v0 + 600);
  outlined destroy of CamOutput(v1, type metadata accessor for RequestContinuation);
  outlined init with take of StringKeyedValue(v2, v1, type metadata accessor for RequestContinuation);
  v3 = *(_QWORD *)(v0 + 576);
  v4 = *(_QWORD *)(v0 + 568);
  v5 = *(_QWORD *)(v0 + 560);
  v6 = *(_QWORD *)(v0 + 536);
  Input.parse.getter();
  v7 = Parse.usoTasks.getter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_tasks) = v7;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 216);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 616), *(_QWORD *)(v0 + 552), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v8 = *(_QWORD *)(v0 + 776);
    v9 = *(_QWORD *)(v0 + 616);
    v10 = *(_QWORD *)(v0 + 528);
    v11 = *(_QWORD *)(v0 + 536) + *(_QWORD *)(v0 + 848);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 256, &demangling cache variable for type metadata for ActingFlow?);
    v12 = v8
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                 + 48);
    outlined init with copy of ConversationHelperInput(v10, v8, type metadata accessor for SiriRequest);
    outlined init with copy of ConversationHelperInput(v9, v12, type metadata accessor for RequestContinuation);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of EncoreConversation.State(v8, v11);
    swift_endAccess();
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 672);
    v14 = *(_QWORD *)(v0 + 664);
    v15 = *(_QWORD *)(v0 + 656);
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 552), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 256, &demangling cache variable for type metadata for ActingFlow?);
  }
  v16 = *(_QWORD *)(v0 + 616);
  outlined init with copy of ConversationHelperInput(v16, *(_QWORD *)(v0 + 520), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  outlined destroy of CamOutput(v16, type metadata accessor for RequestContinuation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;

  if (*(_BYTE *)(v0 + 952) == 1)
  {
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 904) = v1;
    *v1 = v0;
    v1[1] = EncoreConversation.accept(request:);
    return EncoreConversation.attemptCorrection(on:)(v0 + 176, *(_QWORD *)(v0 + 528));
  }
  else
  {
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 944) = v3;
    *v3 = v0;
    v3[1] = EncoreConversation.accept(request:);
    return EncoreEngine.asyncAcceptEvent(request:context:)(*(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 672));
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  __int128 *v1;
  uint64_t v2;
  _QWORD *v4;

  v1 = (__int128 *)(v0 + 22);
  if (v0[25])
  {
    v2 = v0[67];
    outlined init with take of ReferenceResolutionClientProtocol(v1, (uint64_t)(v0 + 42));
    v0[114] = *(_QWORD *)(v2 + 24);
    return swift_task_switch();
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v1, &demangling cache variable for type metadata for ActingFlow?);
    v4 = (_QWORD *)swift_task_alloc();
    v0[118] = v4;
    *v4 = v0;
    v4[1] = EncoreConversation.accept(request:);
    return EncoreEngine.asyncAcceptEvent(request:context:)(v0[75], v0[66], v0[84]);
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[114];
  v2 = swift_task_alloc();
  v0[115] = v2;
  *(_QWORD *)(v2 + 16) = v0 + 42;
  *(_QWORD *)(v2 + 24) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[116] = v3;
  *v3 = v0;
  v3[1] = EncoreConversation.accept(request:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 936) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 616);
  v2 = *(_QWORD *)(v0 + 592);
  __swift_destroy_boxed_opaque_existential_1(v0 + 336);
  outlined init with take of StringKeyedValue(v2, v1, type metadata accessor for RequestContinuation);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 616), *(_QWORD *)(v0 + 552), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v3 = *(_QWORD *)(v0 + 776);
    v4 = *(_QWORD *)(v0 + 616);
    v5 = *(_QWORD *)(v0 + 528);
    v6 = *(_QWORD *)(v0 + 536) + *(_QWORD *)(v0 + 848);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 256, &demangling cache variable for type metadata for ActingFlow?);
    v7 = v3
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                + 48);
    outlined init with copy of ConversationHelperInput(v5, v3, type metadata accessor for SiriRequest);
    outlined init with copy of ConversationHelperInput(v4, v7, type metadata accessor for RequestContinuation);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of EncoreConversation.State(v3, v6);
    swift_endAccess();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 672);
    v9 = *(_QWORD *)(v0 + 664);
    v10 = *(_QWORD *)(v0 + 656);
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 552), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 256, &demangling cache variable for type metadata for ActingFlow?);
  }
  v11 = *(_QWORD *)(v0 + 616);
  outlined init with copy of ConversationHelperInput(v11, *(_QWORD *)(v0 + 520), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  outlined destroy of CamOutput(v11, type metadata accessor for RequestContinuation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 672);
  v2 = *(_QWORD *)(v0 + 664);
  v3 = *(_QWORD *)(v0 + 656);
  __swift_destroy_boxed_opaque_existential_1(v0 + 336);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 256, &demangling cache variable for type metadata for ActingFlow?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  outlined init with take of StringKeyedValue(*(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 616), type metadata accessor for RequestContinuation);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 616), *(_QWORD *)(v0 + 552), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v1 = *(_QWORD *)(v0 + 776);
    v2 = *(_QWORD *)(v0 + 616);
    v3 = *(_QWORD *)(v0 + 528);
    v4 = *(_QWORD *)(v0 + 536) + *(_QWORD *)(v0 + 848);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 664) + 8))(*(_QWORD *)(v0 + 672), *(_QWORD *)(v0 + 656));
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 256, &demangling cache variable for type metadata for ActingFlow?);
    v5 = v1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                + 48);
    outlined init with copy of ConversationHelperInput(v3, v1, type metadata accessor for SiriRequest);
    outlined init with copy of ConversationHelperInput(v2, v5, type metadata accessor for RequestContinuation);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of EncoreConversation.State(v1, v4);
    swift_endAccess();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 672);
    v7 = *(_QWORD *)(v0 + 664);
    v8 = *(_QWORD *)(v0 + 656);
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 552), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 256, &demangling cache variable for type metadata for ActingFlow?);
  }
  v9 = *(_QWORD *)(v0 + 616);
  outlined init with copy of ConversationHelperInput(v9, *(_QWORD *)(v0 + 520), (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  outlined destroy of CamOutput(v9, type metadata accessor for RequestContinuation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EncoreConversation.accept(request:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 952) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t EncoreEngine.asyncPushEvent(flow:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t EncoreEngine.asyncPushEvent(flow:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  type metadata accessor for RequestContinuation(0);
  *v2 = v0;
  v2[1] = EncoreEngine.asyncPushEvent(flow:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[7] = type metadata accessor for SiriRequest(0);
  v4[8] = swift_task_alloc();
  v5 = type metadata accessor for Parse();
  v4[9] = v5;
  v4[10] = *(_QWORD *)(v5 - 8);
  v4[11] = swift_task_alloc();
  v6 = type metadata accessor for Parse.DirectInvocation();
  v4[12] = v6;
  v4[13] = *(_QWORD *)(v6 - 8);
  v4[14] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t EncoreEngine.asyncAcceptEvent(request:context:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v37;

  v1 = v0[11];
  v2 = v0 + 10;
  v3 = v0[10];
  v5 = v0 + 9;
  v4 = v0[9];
  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v3 + 88))(v1, v4) == *MEMORY[0x1E0D9C658])
  {
    v7 = v0 + 14;
    v6 = v0[14];
    v2 = v0 + 13;
    v8 = v0[13];
    v5 = v0 + 12;
    v9 = v0[12];
    v10 = v0[11];
    (*(void (**)(uint64_t, _QWORD))(v0[10] + 96))(v10, v0[9]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v6, v10, v9);
    v11 = Parse.DirectInvocation.toSnippetEvent.getter();
    v0[15] = v11;
    if (v11)
    {
      v12 = v11;
      if (one-time initialization token for executor != -1)
        swift_once();
      v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
      v14 = Logger.logObject.getter();
      v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_1B4BE6000, v14, v15, "[EncoreConversation] asyncAcceptEvent DirectInvocation", v16, 2u);
        MEMORY[0x1B5E44758](v16, -1, -1);
      }
      v18 = v0[5];
      v17 = v0[6];

      v19 = (_QWORD *)swift_task_alloc();
      v0[16] = v19;
      v19[2] = v17;
      v19[3] = v12;
      v19[4] = v18;
      v20 = (_QWORD *)swift_task_alloc();
      v0[17] = v20;
      type metadata accessor for RequestContinuation(0);
      *v20 = v0;
      v20[1] = EncoreEngine.asyncAcceptEvent(request:context:);
      return withCheckedContinuation<A>(isolation:function:_:)();
    }
  }
  else
  {
    v7 = v0 + 11;
  }
  (*(void (**)(_QWORD, _QWORD))(*v2 + 8))(*v7, *v5);
  if (one-time initialization token for executor != -1)
    swift_once();
  v21 = v0[8];
  v22 = v0[4];
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
  outlined init with copy of ConversationHelperInput(v22, v21, type metadata accessor for SiriRequest);
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  v26 = os_log_type_enabled(v24, v25);
  v27 = v0[8];
  if (v26)
  {
    v28 = (uint8_t *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    v37 = v29;
    *(_DWORD *)v28 = 136315138;
    type metadata accessor for Input();
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
    v30 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v27, type metadata accessor for SiriRequest);
    _os_log_impl(&dword_1B4BE6000, v24, v25, "[EncoreConversation] default asyncAcceptEvent %s", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v29, -1, -1);
    MEMORY[0x1B5E44758](v28, -1, -1);
  }
  else
  {
    outlined destroy of CamOutput(v0[8], type metadata accessor for SiriRequest);
  }

  v32 = v0[6];
  v33 = swift_task_alloc();
  v0[18] = v33;
  v34 = *((_OWORD *)v0 + 2);
  *(_QWORD *)(v33 + 16) = v32;
  *(_OWORD *)(v33 + 24) = v34;
  v35 = (_QWORD *)swift_task_alloc();
  v0[19] = v35;
  type metadata accessor for RequestContinuation(0);
  *v35 = v0;
  v35[1] = EncoreEngine.asyncAcceptEvent(request:context:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t EncoreConversation.isEmpty()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  *(_QWORD *)(v1 + 24) = static ConversationActor.shared;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = EncoreConversation.isEmpty();
  return EncoreEngine.isEmpty()();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  int v4;
  uint8_t *v5;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(unsigned __int8 *)(v0 + 44);
    v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v5 = 67109120;
    *(_DWORD *)(v0 + 40) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[EncoreConversation] Is empty %{BOOL}d", v5, 8u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 44));
}

uint64_t EncoreConversation.isEmpty()(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 44) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t EncoreConversation.attemptCorrection(on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[23] = a2;
  v3[24] = v2;
  v3[22] = a1;
  v4 = type metadata accessor for AcceptanceType();
  v3[25] = v4;
  v3[26] = *(_QWORD *)(v4 - 8);
  v3[27] = swift_task_alloc();
  v5 = type metadata accessor for Acceptance();
  v3[28] = v5;
  v3[29] = *(_QWORD *)(v5 - 8);
  v3[30] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t EncoreConversation.attemptCorrection(on:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t OpaqueTypeConformance2;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v1 = *(_QWORD *)(v0 + 192) + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_correctionsEngine;
  outlined init with copy of ReferenceResolutionClientProtocol(v1, v0 + 64);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 64), v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  if ((v4 & 1) != 0)
  {
    v29 = *(_QWORD *)(v0 + 216);
    v30 = *(_QWORD *)(v0 + 208);
    v5 = *(_QWORD *)(v0 + 192);
    v31 = *(_QWORD *)(v0 + 200);
    v28 = *(_QWORD *)(v0 + 184);
    outlined init with copy of ReferenceResolutionClientProtocol(v1, v0 + 104);
    v6 = *(_QWORD *)(v0 + 128);
    v27 = *(_QWORD *)(v0 + 136);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 104), v6);
    v8 = *(_QWORD *)(v5 + 32);
    v7 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v0 + 40) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of Flow.toActingFlow()>>.0);
    v9 = type metadata accessor for SiriCorrectionsFlow();
    v10 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow, (uint64_t (*)(uint64_t))type metadata accessor for SiriCorrectionsFlow, (uint64_t)&protocol conformance descriptor for SiriCorrectionsFlow);
    *(_QWORD *)(v0 + 144) = v9;
    *(_QWORD *)(v0 + 152) = v10;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    *(_QWORD *)(v0 + 160) = v9;
    *(_QWORD *)(v0 + 48) = OpaqueTypeConformance2;
    *(_QWORD *)(v0 + 168) = v10;
    v12 = (_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 56) = swift_getOpaqueTypeConformance2();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 16));
    CorrectionsEngine.getCorrectionFlow(pluginId:)(v8, v7, v6, v27);
    __swift_destroy_boxed_opaque_existential_1(v0 + 104);
    type metadata accessor for SiriEnvironment();
    v13 = swift_task_alloc();
    *(_QWORD *)(v13 + 16) = v0 + 16;
    *(_QWORD *)(v13 + 24) = v28;
    static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
    swift_task_dealloc();
    Acceptance.type.getter();
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 88))(v29, v31);
    v15 = *(_QWORD *)(v0 + 240);
    v16 = *(_QWORD *)(v0 + 232);
    v18 = *(_QWORD *)(v0 + 216);
    v17 = *(_QWORD *)(v0 + 224);
    v19 = *(_QWORD *)(v0 + 200);
    v20 = *(_QWORD *)(v0 + 208);
    v21 = *(_QWORD *)(v0 + 176);
    if (v14 == *MEMORY[0x1E0D9B810])
    {
      (*(void (**)(_QWORD, _QWORD))(v16 + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 224));
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      *(_QWORD *)(v21 + 32) = 0;
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)(v21 + 16) = 0u;
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v20 + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
      v32 = *(_OWORD *)(v0 + 40);
      v23 = *(_QWORD *)(v0 + 40);
      v24 = __swift_project_boxed_opaque_existential_1(v12, v23);
      *(_OWORD *)(v21 + 24) = v32;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v21);
      (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(boxed_opaque_existential_1, v24, v23);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 176);
    *(_QWORD *)(v22 + 32) = 0;
    *(_OWORD *)v22 = 0u;
    *(_OWORD *)(v22 + 16) = 0u;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EncoreConversation.prepare()()
{
  uint64_t v0;
  _QWORD *v1;

  v1[9] = v0;
  v1[10] = type metadata accessor for EncoreConversation.State(0);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  type metadata accessor for RequestContinuation(0);
  v1[13] = swift_task_alloc();
  type metadata accessor for SiriRequest(0);
  v1[14] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v34;
  uint64_t v35[3];

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[EncoreConversation] Prepare", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = v0[9];
  v6 = v0[12];

  v7 = v5 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v7, v6, type metadata accessor for EncoreConversation.State);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = v0[13];
    v9 = v0[14];
    v10 = v0[11];
    v11 = v0[12];
    v12 = v7;
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation));
    v14 = v11 + *(int *)(v13 + 48);
    outlined init with take of StringKeyedValue(v11, v9, type metadata accessor for SiriRequest);
    outlined init with take of StringKeyedValue(v14, v8, type metadata accessor for RequestContinuation);
    v15 = v10 + *(int *)(v13 + 48);
    outlined init with take of StringKeyedValue(v9, v10, type metadata accessor for SiriRequest);
    outlined init with take of StringKeyedValue(v8, v15, type metadata accessor for RequestContinuation);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of EncoreConversation.State(v10, v12);
    swift_endAccess();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v16 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    outlined destroy of CamOutput(v0[12], type metadata accessor for EncoreConversation.State);
    swift_retain_n();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = v0[11];
      v20 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v35[0] = v34;
      *(_DWORD *)v20 = 136315138;
      outlined init with copy of ConversationHelperInput(v7, v19, type metadata accessor for EncoreConversation.State);
      EncoreConversation.State.description.getter();
      v21 = v7;
      v23 = v22;
      v25 = v24;
      outlined destroy of CamOutput(v19, type metadata accessor for EncoreConversation.State);
      v26 = v23;
      v7 = v21;
      v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v17, v18, "[EncoreConversation] Prepare failed. Invalid state %s.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v34, -1, -1);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v27 = v0[11];
    v35[0] = 0;
    v35[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    strcpy((char *)v35, "Invalid state ");
    HIBYTE(v35[1]) = -18;
    outlined init with copy of ConversationHelperInput(v7, v27, type metadata accessor for EncoreConversation.State);
    EncoreConversation.State.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v27, type metadata accessor for EncoreConversation.State);
    v29._object = (void *)0x80000001B4EFBEE0;
    v29._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v29);
    v30 = v35[0];
    v31 = v35[1];
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *v32 = v30;
    v32[1] = v31;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v16 = (uint64_t (*)(void))v0[1];
  }
  return v16();
}

uint64_t EncoreConversation.commit()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[9] = a1;
  v2[10] = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v2[11] = swift_task_alloc();
  v2[12] = type metadata accessor for EncoreConversation.State(0);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v3 = *(_QWORD *)(type metadata accessor for RequestContinuation(0) - 8);
  v2[15] = v3;
  v2[16] = *(_QWORD *)(v3 + 64);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v4 = *(_QWORD *)(type metadata accessor for SiriRequest(0) - 8);
  v2[19] = v4;
  v2[20] = *(_QWORD *)(v4 + 64);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v2[23] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t EncoreConversation.commit()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[3];

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[EncoreConversation] Commit", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 80);

  v6 = *(_QWORD *)(v5 + 16);
  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.ensureJetsamTransaction()(v6);
  OS_dispatch_semaphore.signal()();
  v7 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 80) + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
  swift_beginAccess();
  outlined init with copy of ConversationHelperInput(v8, v7, type metadata accessor for EncoreConversation.State);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    v10 = *(_QWORD *)(v0 + 168);
    v9 = *(_QWORD *)(v0 + 176);
    v11 = *(_QWORD *)(v0 + 144);
    v12 = *(_QWORD *)(v0 + 136);
    v44 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 112);
    v41 = *(_QWORD *)(v0 + 120);
    v42 = *(_QWORD *)(v0 + 152);
    v14 = *(uint64_t **)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 88);
    v43 = v15;
    v45 = *(_QWORD *)(v0 + 80);
    v16 = v13
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                 + 48);
    outlined init with take of StringKeyedValue(v13, v9, type metadata accessor for SiriRequest);
    outlined init with take of StringKeyedValue(v16, v11, type metadata accessor for RequestContinuation);
    v17 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 1, 1, v17);
    outlined init with copy of ConversationHelperInput(v9, v10, type metadata accessor for SiriRequest);
    outlined init with copy of ConversationHelperInput(v11, v12, type metadata accessor for RequestContinuation);
    v18 = static ConversationActor.shared;
    v19 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
    v20 = (*(unsigned __int8 *)(v42 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
    v21 = (v44 + *(unsigned __int8 *)(v41 + 80) + v20) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = v18;
    v22[3] = v19;
    v22[4] = v45;
    outlined init with take of StringKeyedValue(v10, (uint64_t)v22 + v20, type metadata accessor for SiriRequest);
    outlined init with take of StringKeyedValue(v12, (uint64_t)v22 + v21, type metadata accessor for RequestContinuation);
    swift_retain();
    swift_retain();
    v23 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime24ConversationCommitResultO_Tgm5(v43, (uint64_t)&async function pointer to partial apply for closure #1 in EncoreConversation.commit(), (uint64_t)v22);
    *(_QWORD *)(v0 + 192) = v23;
    *v14 = v23;
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    swift_retain();
    outlined assign with take of EncoreConversation.State((uint64_t)v14, v8);
    swift_endAccess();
    v24 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 200) = v24;
    type metadata accessor for ConversationCommitResult();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    *v24 = v0;
    v24[1] = EncoreConversation.commit();
    return Task.value.getter();
  }
  else
  {
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 112), type metadata accessor for EncoreConversation.State);
    swift_retain_n();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = *(_QWORD *)(v0 + 104);
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v46[0] = v30;
      *(_DWORD *)v29 = 136315138;
      outlined init with copy of ConversationHelperInput(v8, v28, type metadata accessor for EncoreConversation.State);
      EncoreConversation.State.description.getter();
      v32 = v31;
      v34 = v33;
      outlined destroy of CamOutput(v28, type metadata accessor for EncoreConversation.State);
      *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v26, v27, "[EncoreConversation] Commit failed. Invalid state %s.", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v30, -1, -1);
      MEMORY[0x1B5E44758](v29, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v35 = *(_QWORD *)(v0 + 104);
    v46[0] = 0;
    v46[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    strcpy((char *)v46, "Invalid state ");
    HIBYTE(v46[1]) = -18;
    outlined init with copy of ConversationHelperInput(v8, v35, type metadata accessor for EncoreConversation.State);
    EncoreConversation.State.description.getter();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v35, type metadata accessor for EncoreConversation.State);
    v37._object = (void *)0x80000001B4EFBF00;
    v37._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v37);
    v38 = v46[0];
    v39 = v46[1];
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *v40 = v38;
    v40[1] = v39;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 144);
  swift_release();
  outlined destroy of CamOutput(v2, type metadata accessor for RequestContinuation);
  outlined destroy of CamOutput(v1, type metadata accessor for SiriRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 144);
  swift_release();
  outlined destroy of CamOutput(v2, type metadata accessor for RequestContinuation);
  outlined destroy of CamOutput(v1, type metadata accessor for SiriRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in EncoreConversation.commit()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[27] = a5;
  v6[28] = a6;
  v6[25] = a1;
  v6[26] = a4;
  v6[29] = type metadata accessor for EncoreConversation.State(0);
  v6[30] = swift_task_alloc();
  v6[31] = type metadata accessor for ConversationCommitResult();
  v6[32] = swift_task_alloc();
  v6[33] = swift_task_alloc();
  v7 = *(_QWORD *)(type metadata accessor for RequestContinuation(0) - 8);
  v6[34] = v7;
  v6[35] = *(_QWORD *)(v7 + 64);
  v6[36] = swift_task_alloc();
  v8 = type metadata accessor for ExecutionContext();
  v6[37] = v8;
  v6[38] = *(_QWORD *)(v8 - 8);
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  v9 = type metadata accessor for ConversationContext();
  v6[41] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[42] = v10;
  v6[43] = *(_QWORD *)(v10 + 64);
  v6[44] = swift_task_alloc();
  v6[45] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v6[46] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t closure #1 in EncoreConversation.commit()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = v0[39];
  v1 = v0[40];
  v4 = v0[37];
  v3 = v0[38];
  v5 = v0[26];
  v17 = (uint64_t *)v0[27];
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  static AceService.currentAsync.getter();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v0 + 2), (uint64_t)(v0 + 12));
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v0 + 7), (uint64_t)(v0 + 17));
  ExecutionContext.init(outputPublisher:aceServiceInvoker:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  ConversationContext.init(executionContext:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v4);
  outlined destroy of SiriRequestContext((uint64_t)(v0 + 2));
  v6 = OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_taskObserver;
  v0[47] = OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_taskObserver;
  v7 = (_QWORD *)(v5 + v6);
  v0[48] = *v7;
  v8 = v7[1];
  ObjectType = swift_getObjectType();
  v10 = *(_QWORD *)(v5 + 56);
  v11 = OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_tasks;
  v0[49] = OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_tasks;
  v12 = *(_QWORD *)(v5 + v11);
  v0[50] = v12;
  v13 = *v17;
  v14 = v17[1];
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v8 + 8)
                                                                                     + *(_QWORD *)(v8 + 8));
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v15 = (_QWORD *)swift_task_alloc();
  v0[51] = v15;
  *v15 = v0;
  v15[1] = closure #1 in EncoreConversation.commit();
  return v18(v10, v12, v13, v14, ObjectType, v8);
}

{
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[44];
  v2 = v0[45];
  v3 = v0[42];
  v4 = v0[41];
  v6 = v0[35];
  v5 = v0[36];
  v7 = v0[34];
  v8 = v0[26];
  outlined init with copy of ConversationHelperInput(v0[28], v5, type metadata accessor for RequestContinuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  v9 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v10 = (v6 + *(unsigned __int8 *)(v3 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v11 = swift_allocObject();
  v0[52] = v11;
  *(_QWORD *)(v11 + 16) = v8;
  outlined init with take of StringKeyedValue(v5, v11 + v9, type metadata accessor for RequestContinuation);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v11 + v10, v1, v4);
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc();
  v0[53] = (uint64_t)v12;
  *v12 = v0;
  v12[1] = closure #1 in EncoreConversation.commit();
  return EncoreConversation.runAndLogIntentFinalExecutionContext(request:finalExecution:)(v0[25], v0[27], (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in EncoreConversation.commit(), v11);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 264), (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
  if (swift_getEnumCaseMultiPayload())
  {
    v1 = *(_QWORD *)(v0 + 264);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 336) + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 328));
    outlined destroy of CamOutput(v1, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
    v2 = *(_QWORD *)(v0 + 240);
    v3 = *(_QWORD *)(v0 + 208);
    *(_QWORD *)(v2 + 32) = 0;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    swift_storeEnumTagMultiPayload();
    v4 = v3 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
    swift_beginAccess();
    outlined assign with take of EncoreConversation.State(v2, v4);
    swift_endAccess();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 440) = v6;
    *v6 = v0;
    v6[1] = closure #1 in EncoreConversation.commit();
    return EncoreConversation.isEmpty()();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t ObjectType;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 200);
  if (*(_BYTE *)(v0 + 464) == 1)
  {
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 200), (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
    v2 = swift_bridgeObjectRetain();
    v3 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v0 + 208) + *(_QWORD *)(v0 + 392));
    swift_bridgeObjectRetain();
    outlined destroy of CamOutput(v1, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
    v2 = MEMORY[0x1E0DEE9D8];
  }
  v4 = *(_QWORD **)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = (_QWORD *)(*(_QWORD *)(v0 + 208) + *(_QWORD *)(v0 + 376));
  *v4 = v3;
  v4[1] = v2;
  swift_storeEnumTagMultiPayload();
  outlined init with take of StringKeyedValue((uint64_t)v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
  *(_QWORD *)(v0 + 448) = *v6;
  v7 = v6[1];
  ObjectType = swift_getObjectType();
  v11 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v7 + 16) + *(_QWORD *)(v7 + 16));
  swift_unknownObjectRetain();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 456) = v9;
  *v9 = v0;
  v9[1] = closure #1 in EncoreConversation.commit();
  return v11(ObjectType, v7);
}

{
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 336) + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 328));
  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v1 + 32) = 0;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  swift_storeEnumTagMultiPayload();
  v3 = v2 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
  swift_beginAccess();
  outlined assign with take of EncoreConversation.State(v1, v3);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 336) + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 328));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in EncoreConversation.commit()(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 464) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in EncoreConversation.commit()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in EncoreConversation.commit()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  type metadata accessor for ConversationCommitResult();
  *v4 = v0;
  v4[1] = closure #2 in withCancellableContinuation<A>(body:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t EncoreEngine.asyncCommitEvent(continuation:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t EncoreEngine.asyncCommitEvent(continuation:context:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  v3 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v4;
  type metadata accessor for ConversationCommitResult();
  *v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t EncoreConversation.runAndLogIntentFinalExecutionContext(request:finalExecution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = type metadata accessor for ConversationCommitResult();
  v5[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v5[9] = swift_task_alloc();
  v6 = type metadata accessor for UUID();
  v5[10] = v6;
  v5[11] = *(_QWORD *)(v6 - 8);
  v5[12] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v5[13] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t EncoreConversation.runAndLogIntentFinalExecutionContext(request:finalExecution:)()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)v0[3];
  v0[14] = *v1;
  v0[15] = v1[1];
  type metadata accessor for SiriRequest(0);
  Input.identifier.getter();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 128) = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 24);
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 136) = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(v0 + 128) + 24) + 160))();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  void (*v7)(uint64_t, _QWORD, uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t (*v10)(_QWORD);

  v2 = v0[11];
  v1 = v0[12];
  v4 = v0[9];
  v3 = v0[10];
  v5 = (int *)v0[4];
  v0[18] = type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[19] = v6;
  v6(v4, v1, v3);
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56);
  v0[20] = v7;
  v7(v4, 0, 1, v3);
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextStarted(rcId:hypothesisId:fromPlugin:stackDepth:)();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v10 = (uint64_t (*)(_QWORD))((char *)v5 + *v5);
  v8 = (_QWORD *)swift_task_alloc();
  v0[21] = v8;
  *v8 = v0;
  v8[1] = EncoreConversation.runAndLogIntentFinalExecutionContext(request:finalExecution:);
  return v10(v0[2]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 152);
  v1 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 160);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  outlined init with copy of ConversationHelperInput(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 64), (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  static ConversationSELFHelper.shared.getter();
  v2(v6, v3, v5);
  v1(v6, 0, 1, v5);
  v8 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 80);
  v11 = *(_QWORD *)(v0 + 64);
  if (EnumCaseMultiPayload == 1)
  {
    dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextFailed(rcId:hypothesisId:reason:)();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v9);
    v12 = type metadata accessor for FlowUnhandledReason();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v9);
    outlined destroy of CamOutput(v11, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  void (*v2)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 152);
  v2 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 160);
  v3 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  static ConversationSELFHelper.shared.getter();
  v1(v5, v3, v4);
  v2(v5, 0, 1, v4);
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextFailed(rcId:hypothesisId:reason:)();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EncoreConversation.stackCount.getter()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(v0 + 24) + 24) + 160))();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t EncoreConversation.isCorrectable()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v0 + 56) + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_correctionsEngine, v0 + 16);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v3 & 1);
}

uint64_t closure #1 in EncoreConversation.attemptCorrection(on:)(_QWORD *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for SiriRequest(0);
  return dispatch thunk of InputAccepting.accept(input:)();
}

uint64_t EncoreConversation.paraphrase()(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t EncoreConversation.paraphrase()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[EncoreConversation] Paraphrase", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }

  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1B4BE6000, v5, v6, "[EncoreConversation] Paraphrasing not implemented yet, will return an empty paraphrase.", v7, 2u);
    MEMORY[0x1B5E44758](v7, -1, -1);
  }

  static ActionParaphrase.noParaphrase()();
  type metadata accessor for ConversationParaphraseResult(0);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EncoreConversation.flexibleExecutionSupport()(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t EncoreConversation.flexibleExecutionSupport()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t (*v5)(uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[EncoreConversation] flexibleExecutionSupport unimplemented", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }

  type metadata accessor for FlexibleExecutionSupportOptions();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C460];
  *(_QWORD *)(v0 + 16) = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions, v5, MEMORY[0x1E0D9C470]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FlexibleExecutionSupportOptions]);
  lazy protocol witness table accessor for type [FlexibleExecutionSupportOptions] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for Conversational.cancel() in conformance EncoreConversation()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return EncoreConversation.cancel()();
}

uint64_t protocol witness for Conversational.ensureReady(timeout:) in conformance EncoreConversation(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return EncoreConversation.ensureReady(timeout:)(a1);
}

uint64_t protocol witness for Conversational.accept(request:) in conformance EncoreConversation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return EncoreConversation.accept(request:)(a1, a2);
}

uint64_t protocol witness for Conversational.paraphrase() in conformance EncoreConversation(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return EncoreConversation.paraphrase()(a1);
}

uint64_t protocol witness for Conversational.prepare() in conformance EncoreConversation()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return EncoreConversation.prepare()();
}

uint64_t protocol witness for Conversational.commit() in conformance EncoreConversation(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return EncoreConversation.commit()(a1);
}

uint64_t protocol witness for Conversational.isEmpty() in conformance EncoreConversation()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return EncoreConversation.isEmpty()();
}

uint64_t protocol witness for Conversational.isCorrectable() in conformance EncoreConversation()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = *v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t protocol witness for Conversational.flexibleExecutionSupport() in conformance EncoreConversation(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return EncoreConversation.flexibleExecutionSupport()(a1);
}

uint64_t closure #1 in EncoreEngine.asyncPushEvent(flow:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  __int128 v19[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  outlined init with copy of ReferenceResolutionClientProtocol(a2, (uint64_t)v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v14 = (*(unsigned __int8 *)(v7 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v15 = (v8 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  outlined init with take of ReferenceResolutionClientProtocol(v19, v16 + 32);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v16 + v14, v9, v6);
  *(_QWORD *)(v16 + v15) = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:), v16);
  return swift_release();
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v6[5] = v7;
  v6[6] = *(_QWORD *)(v7 - 8);
  v6[7] = swift_task_alloc();
  v6[8] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v6[9] = swift_task_alloc();
  v6[10] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Error>);
  v6[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[12] = v9;
  v6[13] = *(_QWORD *)(v9 + 64);
  v6[14] = swift_task_alloc();
  v6[15] = type metadata accessor for EncoreEngineEvent(0);
  v6[16] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = v0[16];
  v2 = v0[14];
  v3 = v0[11];
  v4 = v0[12];
  v5 = v0[3];
  outlined init with copy of ReferenceResolutionClientProtocol(v0[2], v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  *(_QWORD *)(v1 + 40) = partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:);
  *(_QWORD *)(v1 + 48) = v7;
  swift_storeEnumTagMultiPayload();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[7];
  v4 = v0[5];
  v5 = v0[6];
  outlined init with copy of ConversationHelperInput(v0[16], v1, type metadata accessor for EncoreEngineEvent);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of ConversationHelperInput(v1, v2, type metadata accessor for EncoreEngine.EngineEvent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  outlined destroy of CamOutput(v1, type metadata accessor for EncoreEngine.EngineEvent);
  return swift_task_switch();
}

{
  uint64_t v0;

  outlined destroy of CamOutput(*(_QWORD *)(v0 + 128), type metadata accessor for EncoreEngineEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in EncoreEngine.asyncEnsureReadyEvent()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v11 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = 0;
  *((_QWORD *)v12 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v12[v11], (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in EncoreEngine.asyncEnsureReadyEvent(), (uint64_t)v12);
  return swift_release();
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncEnsureReadyEvent()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v5[4] = v6;
  v5[5] = *(_QWORD *)(v6 - 8);
  v5[6] = swift_task_alloc();
  v5[7] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v5[8] = swift_task_alloc();
  v5[9] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v5[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[11] = v8;
  v5[12] = *(_QWORD *)(v8 + 64);
  v5[13] = swift_task_alloc();
  v5[14] = type metadata accessor for EncoreEngineEvent(0);
  v5[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncEnsureReadyEvent()()
{
  _QWORD *v0;
  uint64_t (**v1)();
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = (uint64_t (**)())v0[15];
  v2 = v0[13];
  v3 = v0[10];
  v4 = v0[11];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[3], v3);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v6 + v5, v2, v3);
  *v1 = partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed();
  v1[1] = (uint64_t (*)())v6;
  swift_storeEnumTagMultiPayload();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  outlined init with copy of ConversationHelperInput(v1, v3, type metadata accessor for EncoreEngineEvent);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of ConversationHelperInput(v3, v2, type metadata accessor for EncoreEngine.EngineEvent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  outlined destroy of CamOutput(v3, type metadata accessor for EncoreEngine.EngineEvent);
  outlined destroy of CamOutput(v1, type metadata accessor for EncoreEngineEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Parse.DirectInvocation.toSnippetEvent.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;

  v0 = Parse.DirectInvocation.identifier.getter();
  v2 = v1;
  type metadata accessor for SnippetService();
  if (v0 == static SnippetService.DirectInvocationIdentifier.getter() && v2 == v3)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
      return 0;
  }
  v5 = Parse.DirectInvocation.userData.getter();
  if (!v5)
    return 0;
  v6 = v5;
  v7 = static SnippetService.EventDataKey.getter();
  if (!*(_QWORD *)(v6 + 16) || (v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8), (v10 & 1) == 0))
  {
    v19 = 0u;
    v20 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v9, (uint64_t)&v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v20 + 1))
  {
LABEL_12:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v19, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    if (one-time initialization token for executor != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_1B4BE6000, v12, v13, "[EncoreConversation] DirectInvocation failed to find Snippet Event Key", v14, 2u);
      MEMORY[0x1B5E44758](v14, -1, -1);
    }

    return 0;
  }
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSKeyedUnarchiver);
  type metadata accessor for EncoreEvent();
  v16 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  outlined consume of Data._Representation(v17, v18);
  return v16;
}

uint64_t closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  void *v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;

  v26 = a2;
  v27 = a3;
  v25 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
  v6 = *(_QWORD *)(v5 - 8);
  v23 = v5;
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  v24 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ConversationContext();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a4, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v25, v5);
  v16 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v17 = (v10 + *(unsigned __int8 *)(v6 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = 0;
  v19 = v27;
  *((_QWORD *)v18 + 4) = v26;
  *((_QWORD *)v18 + 5) = v19;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v18[v16], v11, v8);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v18[v17], v24, v23);
  swift_retain();
  v20 = v19;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:), (uint64_t)v18);
  return swift_release();
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v7[6] = v8;
  v7[7] = *(_QWORD *)(v8 - 8);
  v7[8] = swift_task_alloc();
  v7[9] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v7[10] = swift_task_alloc();
  v7[11] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
  v7[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[13] = v10;
  v7[14] = *(_QWORD *)(v10 + 64);
  v7[15] = swift_task_alloc();
  v7[16] = type metadata accessor for EncoreEngineEvent(0);
  v7[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v1 = (_QWORD *)v0[17];
  v2 = v0[15];
  v4 = v0[12];
  v3 = v0[13];
  v6 = v0[4];
  v5 = v0[5];
  v7 = (void *)v0[3];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
  v9 = (char *)v1 + *(int *)(v8 + 48);
  v10 = (_QWORD *)((char *)v1 + *(int *)(v8 + 64));
  *v1 = v7;
  v11 = type metadata accessor for ConversationContext();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v6, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  v12 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v13 + v12, v2, v4);
  *v10 = partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:);
  v10[1] = v13;
  swift_storeEnumTagMultiPayload();
  v14 = one-time initialization token for shared;
  v15 = v7;
  if (v14 != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v7[6] = v8;
  v7[7] = *(_QWORD *)(v8 - 8);
  v7[8] = swift_task_alloc();
  v7[9] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v7[10] = swift_task_alloc();
  v7[11] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
  v7[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[13] = v10;
  v7[14] = *(_QWORD *)(v10 + 64);
  v7[15] = swift_task_alloc();
  v7[16] = type metadata accessor for EncoreEngineEvent(0);
  v7[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v1 = v0[17];
  v2 = v0[15];
  v4 = v0[12];
  v3 = v0[13];
  v6 = v0[4];
  v5 = v0[5];
  v7 = v0[3];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
  v9 = v1 + *(int *)(v8 + 48);
  v10 = (_QWORD *)(v1 + *(int *)(v8 + 64));
  outlined init with copy of ConversationHelperInput(v7, v1, type metadata accessor for SiriRequest);
  v11 = type metadata accessor for ConversationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v6, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  v12 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v13 + v12, v2, v4);
  *v10 = partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:);
  v10[1] = v13;
  swift_storeEnumTagMultiPayload();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  outlined init with copy of ConversationHelperInput(v1, v3, type metadata accessor for EncoreEngineEvent);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of ConversationHelperInput(v3, v2, type metadata accessor for EncoreEngine.EngineEvent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  outlined destroy of CamOutput(v3, type metadata accessor for EncoreEngine.EngineEvent);
  outlined destroy of CamOutput(v1, type metadata accessor for EncoreEngineEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v6;

  v2 = type metadata accessor for RequestContinuation(0);
  MEMORY[0x1E0C80A78](v2);
  outlined init with copy of ConversationHelperInput(a1, (uint64_t)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD), uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t (*v29)(_QWORD);
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = a2;
  v39 = a8;
  v36 = a1;
  v37 = a7;
  v35 = a4;
  v33 = a3;
  v40 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v34 = *(_QWORD *)(v40 - 8);
  v9 = *(_QWORD *)(v34 + 64);
  MEMORY[0x1E0C80A78](v40);
  v32 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ConversationContext();
  v11 = *(_QWORD *)(v10 - 8);
  v30 = v10;
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10);
  v31 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a6(0);
  v29 = a6;
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v29 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  outlined init with copy of ConversationHelperInput(v33, (uint64_t)v17, a6);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v35, v10);
  v22 = v34;
  v23 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v32, v36, v40);
  v24 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v25 = (v15 + *(unsigned __int8 *)(v11 + 80) + v24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v26 = (v12 + *(unsigned __int8 *)(v22 + 80) + v25) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v27 = (char *)swift_allocObject();
  *((_QWORD *)v27 + 2) = 0;
  *((_QWORD *)v27 + 3) = 0;
  *((_QWORD *)v27 + 4) = v38;
  outlined init with take of StringKeyedValue((uint64_t)v17, (uint64_t)&v27[v24], v29);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v27[v25], v31, v30);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(&v27[v26], v23, v40);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v20, v39, (uint64_t)v27);
  return swift_release();
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v7[6] = v8;
  v7[7] = *(_QWORD *)(v8 - 8);
  v7[8] = swift_task_alloc();
  v7[9] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v7[10] = swift_task_alloc();
  v7[11] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
  v7[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[13] = v10;
  v7[14] = *(_QWORD *)(v10 + 64);
  v7[15] = swift_task_alloc();
  v7[16] = type metadata accessor for EncoreEngineEvent(0);
  v7[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)(uint64_t);
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v1 = v0[17];
  v2 = v0[15];
  v4 = v0[12];
  v3 = v0[13];
  v6 = v0[4];
  v5 = v0[5];
  v7 = v0[3];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
  v9 = v1 + *(int *)(v8 + 48);
  v10 = (uint64_t (**)(uint64_t))(v1 + *(int *)(v8 + 64));
  outlined init with copy of ConversationHelperInput(v7, v1, type metadata accessor for RequestContinuation);
  v11 = type metadata accessor for ConversationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v6, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  v12 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v13 + v12, v2, v4);
  *v10 = partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:);
  v10[1] = (uint64_t (*)(uint64_t))v13;
  swift_storeEnumTagMultiPayload();
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[2];

  v9 = a3(0);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v19 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(a4);
  MEMORY[0x1E0C80A78](v15);
  v17 = (_QWORD *)((char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v17, a4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v19[1] = *v17;
    __swift_instantiateConcreteTypeFromMangledName(a5);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    outlined init with take of StringKeyedValue((uint64_t)v17, (uint64_t)v14, a3);
    outlined init with copy of ConversationHelperInput((uint64_t)v14, (uint64_t)v12, a3);
    __swift_instantiateConcreteTypeFromMangledName(a5);
    CheckedContinuation.resume(returning:)();
    return outlined destroy of CamOutput((uint64_t)v14, a3);
  }
}

_QWORD *specialized EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  id v31;
  _QWORD *v32;
  uint8_t *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *boxed_opaque_existential_1;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v58;
  _QWORD *v59;
  os_log_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74[6];

  v13 = v12;
  v66 = a3;
  v67 = a7;
  v71 = a5;
  v65 = a2;
  v17 = a10;
  v68 = a11;
  v69 = a1;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchTimeInterval();
  v73 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v72 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_siriRequest;
  v24 = type metadata accessor for SiriRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  *(_QWORD *)((char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_tasks) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)((char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_encoreEventsHandled) = 0;
  *((_BYTE *)v13 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_encoreRegistered) = 0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v64 = a12;
  v70 = a9;
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
  v26 = a4;
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v63 = a10;
    v29 = swift_slowAlloc();
    v62 = v20;
    v30 = (uint8_t *)v29;
    v59 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v30 = 138412290;
    v60 = v27;
    v61 = a6;
    v74[0] = (uint64_t)v26;
    v31 = v26;
    a6 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v32 = v59;
    *v59 = v26;

    v17 = v63;
    v27 = v60;
    _os_log_impl(&dword_1B4BE6000, v60, v28, "[EncoreConversation] init %@", v30, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v32, -1, -1);
    v33 = v30;
    v20 = v62;
    MEMORY[0x1B5E44758](v33, -1, -1);
  }
  else
  {

  }
  v34 = v66;
  v13[4] = v65;
  v13[5] = v34;
  v13[6] = v71;
  v13[7] = v26;
  v35 = (_QWORD *)((char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_taskObserver);
  v36 = v67;
  v37 = v68;
  *v35 = a6;
  v35[1] = v36;
  v38 = (_QWORD *)((char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state);
  v39 = v64;
  v38[3] = v37;
  v38[4] = v39;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v38);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(boxed_opaque_existential_1, v69, v37);
  type metadata accessor for EncoreConversation.State(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v17, (uint64_t)v13 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_correctionsEngine);
  if (v70)
  {
    v41 = v26;
    swift_retain();
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for SiriEnvironment();
    v42 = v26;
    swift_retain();
    swift_unknownObjectRetain();
    static SiriEnvironment.default.getter();
  }
  type metadata accessor for SiriEnvironment();
  swift_allocObject();
  swift_retain();
  v13[8] = SiriEnvironment.init(parent:)();
  type metadata accessor for SiriCorrectionsClientProvider();
  swift_allocObject();
  swift_retain();
  SiriCorrectionsClientProvider.init()();
  SiriEnvironment.correctionsClientProvider.setter();
  swift_release();
  SiriEnvironment.correctionsClientProvider.getter();
  v43 = v17[3];
  v44 = v17[4];
  v45 = __swift_project_boxed_opaque_existential_1(v17, v43);
  v74[3] = v43;
  v74[4] = *(_QWORD *)(v44 + 8);
  v46 = __swift_allocate_boxed_opaque_existential_1(v74);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v46, v45, v43);
  dispatch thunk of SiriCorrectionsClientProvider.correctionsClient.setter();
  swift_release();
  type metadata accessor for UserIdentityProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UserIdentityProvider and conformance UserIdentityProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C058], MEMORY[0x1E0D9C040]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for FlowTaskProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type FlowTaskProvider and conformance FlowTaskProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B088], MEMORY[0x1E0D9B078]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for CallStateEnvironmentProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type CallStateEnvironmentProvider and conformance CallStateEnvironmentProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C3D8], MEMORY[0x1E0D9C3C0]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for ScopedReferenceResolutionDataProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type ScopedReferenceResolutionDataProvider and conformance ScopedReferenceResolutionDataProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3C80], MEMORY[0x1E0DA3C70]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for MetricsEnvironmentProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type MetricsEnvironmentProvider and conformance MetricsEnvironmentProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C360], MEMORY[0x1E0D9C358]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for AceServiceContextProvider();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AceServiceContextProvider and conformance AceServiceContextProvider, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C308], MEMORY[0x1E0D9C2F8]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  v13[9] = a8;
  v47 = one-time initialization token for defaultTimeout;
  swift_retain();
  if (v47 != -1)
    swift_once();
  v48 = __swift_project_value_buffer(v21, (uint64_t)static JetsamHelper.defaultTimeout);
  v50 = v72;
  v49 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v72, v48, v21);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v51 = static OS_dispatch_queue.main.getter();
  type metadata accessor for JetsamHelper();
  v52 = (_QWORD *)swift_allocObject();
  v53 = (_QWORD *)((char *)v52 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  *v53 = 0;
  v53[1] = 0;
  v52[2] = 0xD00000000000002ALL;
  v52[3] = 0x80000001B4EFC010;
  v52[4] = dispatch_semaphore_create(1);
  v52[5] = v51;
  (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))((uint64_t)v52 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout, v50, v21);
  v13[2] = v52;
  type metadata accessor for EncoreEngine();
  swift_allocObject();
  swift_retain();
  v54 = swift_retain();
  v13[3] = EncoreEngine.init(rootEnvironment:snippetManager:)(v54, a8);
  v55 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v20, 1, 1, v55);
  v56 = (_QWORD *)swift_allocObject();
  v56[2] = 0;
  v56[3] = 0;
  v56[4] = v13;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v20, (uint64_t)&async function pointer to partial apply for closure #1 in EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:), (uint64_t)v56);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v13;
}

_QWORD *specialized EncoreConversation.__allocating_init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12)
{
  swift_allocObject();
  return specialized EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t partial apply for closure #1 in EncoreConversation.setupEncoreEventHandling()(void *a1)
{
  uint64_t v1;

  return closure #1 in EncoreConversation.setupEncoreEventHandling()(a1, v1);
}

uint64_t partial apply for closure #1 in EncoreConversation.deinit()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return EncoreEngine.stop()();
}

uint64_t type metadata accessor for EncoreConversation.State(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for EncoreConversation.State);
}

uint64_t partial apply for closure #1 in EncoreConversation.handleEncoreEvent(event:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in EncoreConversation.handleEncoreEvent(event:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in EncoreEngine.asyncEnsureReadyEvent()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in EncoreEngine.asyncEnsureReadyEvent()(a1, v1);
}

uint64_t partial apply for closure #2 in EncoreConversation.ensureReady(timeout:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in Conversation.ensureReady(timeout:)();
}

uint64_t partial apply for closure #1 in EncoreConversation.ensureReady(timeout:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in EncoreConversation.ensureReady(timeout:)();
}

uint64_t outlined init with take of ActingFlow?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SiriRequest?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequest?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SiriRequestContext(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  return a1;
}

uint64_t outlined assign with take of EncoreConversation.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for EncoreConversation.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in EncoreEngine.asyncPushEvent(flow:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in EncoreEngine.asyncPushEvent(flow:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(a1, v1[2], v1[3], v1[4], &demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>, type metadata accessor for SiriRequest, (uint64_t)&unk_1E6849208, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in EncoreEngine.asyncAcceptEvent(request:context:));
}

uint64_t partial apply for closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1B4DB8414()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for SiriRequest(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RequestContinuation(0) - 8) + 80);
  v6 = v3 + v4 + v5;
  swift_unknownObjectRelease();
  swift_release();
  v7 = v0 + v3;
  swift_bridgeObjectRelease();
  v8 = v7 + v1[5];
  v9 = type metadata accessor for Input();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  swift_release();
  v11 = (uint64_t *)(v7 + v1[7]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    outlined consume of Data._Representation(*v11, v12);
  v13 = v6 & ~v5;
  swift_release();
  v14 = v7 + v1[9];
  v15 = type metadata accessor for SiriRequestIdentities(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = type metadata accessor for IdentifiedUser();
    v17 = *(_QWORD *)(v16 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v14, v16);
    swift_bridgeObjectRelease();
  }
  type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
    v10(v0 + v13, v9);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EncoreConversation.commit()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for SiriRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RequestContinuation(0) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + (v8 & ~v7);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in EncoreConversation.commit()(a1, v9, v10, v11, v12, v13);
}

uint64_t partial apply for closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(a1, v1[2], v1[3], v1[4], &demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>, type metadata accessor for RequestContinuation, (uint64_t)&unk_1E6849140, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:));
}

uint64_t destroy for SiriRequestContext(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
}

uint64_t initializeWithCopy for SiriRequestContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for SiriRequestContext(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 5, a2 + 5);
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for SiriRequestContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriRequestContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriRequestContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriRequestContext()
{
  return &type metadata for SiriRequestContext;
}

uint64_t ObjC metadata update function for EncoreConversation()
{
  return type metadata accessor for EncoreConversation(0);
}

uint64_t type metadata accessor for EncoreConversation(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for EncoreConversation);
}

void type metadata completion function for EncoreConversation()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for SiriRequest?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for EncoreConversation.State(319);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for EncoreConversation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EncoreConversation.__allocating_init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

void type metadata accessor for SiriRequest?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SiriRequest?)
  {
    type metadata accessor for SiriRequest(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SiriRequest?);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for EncoreConversation.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1B4DB8A90 + 4 * byte_1B4EE9825[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for EncoreConversation.State(uint64_t a1)
{
  uint64_t result;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      if (*(_QWORD *)(a1 + 24))
        return __swift_destroy_boxed_opaque_existential_1(a1);
      return result;
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      v3 = (int *)type metadata accessor for SiriRequest(0);
      v4 = a1 + v3[5];
      v5 = type metadata accessor for Input();
      v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
      v6(v4, v5);
      swift_release();
      v7 = (uint64_t *)(a1 + v3[7]);
      v8 = v7[1];
      if (v8 >> 60 != 15)
        outlined consume of Data._Representation(*v7, v8);
      swift_release();
      v9 = a1 + v3[9];
      v10 = type metadata accessor for SiriRequestIdentities(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
      {
        v11 = type metadata accessor for IdentifiedUser();
        v12 = *(_QWORD *)(v11 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
          (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
        swift_bridgeObjectRelease();
      }
      v13 = a1
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                   + 48);
      type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
        v6(v13, v5);
      type metadata accessor for RequestContinuation(0);
      goto LABEL_23;
    case 2:
      swift_bridgeObjectRelease();
      v14 = (int *)type metadata accessor for SiriRequest(0);
      v15 = a1 + v14[5];
      v16 = type metadata accessor for Input();
      v17 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8);
      v17(v15, v16);
      swift_release();
      v18 = (uint64_t *)(a1 + v14[7]);
      v19 = v18[1];
      if (v19 >> 60 != 15)
        outlined consume of Data._Representation(*v18, v19);
      swift_release();
      v20 = a1 + v14[9];
      v21 = type metadata accessor for SiriRequestIdentities(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
      {
        v22 = type metadata accessor for IdentifiedUser();
        v23 = *(_QWORD *)(v22 - 8);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
          (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v20, v22);
        swift_bridgeObjectRelease();
      }
      v24 = a1
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation, task: Task<(), Error>))
                   + 48);
      type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
        v17(v24, v16);
      type metadata accessor for RequestContinuation(0);
      swift_release();
      goto LABEL_23;
    case 4:
LABEL_23:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for EncoreConversation.State()
{
  char *v0;

  v0 = (char *)sub_1B4DB9578 + 4 * byte_1B4EE982F[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_1B4DB9578()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v3 = (int *)type metadata accessor for SiriRequest(0);
  v4 = v3[5];
  v5 = (char *)v0 + v4;
  v6 = (char *)v1 + v4;
  v7 = type metadata accessor for Input();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v31 = v8;
  v32 = v7;
  v8(v5, v6, v7);
  *(_QWORD *)((char *)v0 + v3[6]) = *(_QWORD *)((char *)v1 + v3[6]);
  v9 = v3[7];
  v10 = (char *)v0 + v9;
  v11 = (_QWORD *)((char *)v1 + v9);
  v12 = *(_QWORD *)((char *)v1 + v9 + 8);
  swift_retain();
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)v10 = *(_OWORD *)v11;
  }
  else
  {
    v13 = *v11;
    outlined copy of Data._Representation(*v11, v12);
    *(_QWORD *)v10 = v13;
    *((_QWORD *)v10 + 1) = v12;
  }
  *(_QWORD *)((char *)v0 + v3[8]) = *(_QWORD *)((char *)v1 + v3[8]);
  v14 = v3[9];
  v15 = (char *)v0 + v14;
  v16 = (char *)v1 + v14;
  v17 = type metadata accessor for SiriRequestIdentities(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  swift_retain();
  if (v19(v16, 1, v17))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = type metadata accessor for IdentifiedUser();
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v16, 1, v21))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v15, v16, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v15, 0, 1, v21);
    }
    *(_QWORD *)&v15[*(int *)(v17 + 20)] = *(_QWORD *)&v16[*(int *)(v17 + 20)];
    v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56);
    swift_bridgeObjectRetain();
    v24(v15, 0, 1, v17);
  }
  v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
               + 48);
  v26 = (char *)v0 + v25;
  v27 = (char *)v1 + v25;
  v28 = type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v31(v26, v27, v32);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  v29 = type metadata accessor for RequestContinuation(0);
  *(_QWORD *)&v26[*(int *)(v29 + 20)] = *(_QWORD *)&v27[*(int *)(v29 + 20)];
  swift_retain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for EncoreConversation.State(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    outlined destroy of CamOutput(result, type metadata accessor for EncoreConversation.State);
    v2 = (char *)&loc_1B4DB9AD8 + 4 * byte_1B4EE9834[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

_OWORD *initializeWithTake for EncoreConversation.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v63)(char *, char *, uint64_t);
  void (*v64)(char *, char *, uint64_t);
  void (*v65)(char *, char *, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      *a1 = *a2;
      v19 = (int *)type metadata accessor for SiriRequest(0);
      v20 = v19[5];
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v11 = type metadata accessor for Input();
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
      v12(v21, v22, v11);
      *(_QWORD *)((char *)a1 + v19[6]) = *(_QWORD *)((char *)a2 + v19[6]);
      *(_OWORD *)((char *)a1 + v19[7]) = *(_OWORD *)((char *)a2 + v19[7]);
      *(_QWORD *)((char *)a1 + v19[8]) = *(_QWORD *)((char *)a2 + v19[8]);
      v23 = v19[9];
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for SiriRequestIdentities(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        v64 = v12;
        v44 = type metadata accessor for IdentifiedUser();
        v45 = *(_QWORD *)(v44 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v25, 1, v44))
        {
          v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v24, v25, v44);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v24, 0, 1, v44);
        }
        *(_QWORD *)&v24[*(int *)(v26 + 20)] = *(_QWORD *)&v25[*(int *)(v26 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        v12 = v64;
      }
      v55 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                   + 48);
      v51 = (char *)a1 + v55;
      v52 = (char *)a2 + v55;
      v53 = type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
        goto LABEL_20;
      goto LABEL_21;
    case 2:
      *a1 = *a2;
      v29 = (int *)type metadata accessor for SiriRequest(0);
      v30 = v29[5];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = type metadata accessor for Input();
      v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
      v34(v31, v32, v33);
      *(_QWORD *)((char *)a1 + v29[6]) = *(_QWORD *)((char *)a2 + v29[6]);
      *(_OWORD *)((char *)a1 + v29[7]) = *(_OWORD *)((char *)a2 + v29[7]);
      *(_QWORD *)((char *)a1 + v29[8]) = *(_QWORD *)((char *)a2 + v29[8]);
      v35 = v29[9];
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      v38 = type metadata accessor for SiriRequestIdentities(0);
      v39 = *(_QWORD *)(v38 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        v65 = v34;
        v47 = type metadata accessor for IdentifiedUser();
        v48 = *(_QWORD *)(v47 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v37, 1, v47))
        {
          v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v36, v37, v47);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v36, 0, 1, v47);
        }
        *(_QWORD *)&v36[*(int *)(v38 + 20)] = *(_QWORD *)&v37[*(int *)(v38 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
        v34 = v65;
      }
      v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation, task: Task<(), Error>));
      v57 = *(int *)(v56 + 48);
      v58 = (char *)a1 + v57;
      v59 = (char *)a2 + v57;
      v60 = type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v34(v58, v59, v33);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      v61 = type metadata accessor for RequestContinuation(0);
      *(_QWORD *)&v58[*(int *)(v61 + 20)] = *(_QWORD *)&v59[*(int *)(v61 + 20)];
      *(_QWORD *)((char *)a1 + *(int *)(v56 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v56 + 64));
      goto LABEL_33;
    case 1:
      *a1 = *a2;
      v7 = (int *)type metadata accessor for SiriRequest(0);
      v8 = v7[5];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for Input();
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
      v12(v9, v10, v11);
      *(_QWORD *)((char *)a1 + v7[6]) = *(_QWORD *)((char *)a2 + v7[6]);
      *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
      *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)((char *)a2 + v7[8]);
      v13 = v7[9];
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      v16 = type metadata accessor for SiriRequestIdentities(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        v63 = v12;
        v41 = type metadata accessor for IdentifiedUser();
        v42 = *(_QWORD *)(v41 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v15, 1, v41))
        {
          v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v14, v15, v41);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v14, 0, 1, v41);
        }
        *(_QWORD *)&v14[*(int *)(v16 + 20)] = *(_QWORD *)&v15[*(int *)(v16 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
        v12 = v63;
      }
      v50 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                   + 48);
      v51 = (char *)a1 + v50;
      v52 = (char *)a2 + v50;
      v53 = type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
LABEL_20:
        v12(v51, v52, v11);
        swift_storeEnumTagMultiPayload();
LABEL_22:
        v54 = type metadata accessor for RequestContinuation(0);
        *(_QWORD *)&v51[*(int *)(v54 + 20)] = *(_QWORD *)&v52[*(int *)(v54 + 20)];
LABEL_33:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_21:
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      goto LABEL_22;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for EncoreConversation.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v63)(char *, char *, uint64_t);
  void (*v64)(char *, char *, uint64_t);
  void (*v65)(char *, char *, uint64_t);

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for EncoreConversation.State);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 3:
        *a1 = *a2;
        v19 = (int *)type metadata accessor for SiriRequest(0);
        v20 = v19[5];
        v21 = (char *)a1 + v20;
        v22 = (char *)a2 + v20;
        v11 = type metadata accessor for Input();
        v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
        v12(v21, v22, v11);
        *(_QWORD *)((char *)a1 + v19[6]) = *(_QWORD *)((char *)a2 + v19[6]);
        *(_OWORD *)((char *)a1 + v19[7]) = *(_OWORD *)((char *)a2 + v19[7]);
        *(_QWORD *)((char *)a1 + v19[8]) = *(_QWORD *)((char *)a2 + v19[8]);
        v23 = v19[9];
        v24 = (char *)a1 + v23;
        v25 = (char *)a2 + v23;
        v26 = type metadata accessor for SiriRequestIdentities(0);
        v27 = *(_QWORD *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
        }
        else
        {
          v64 = v12;
          v44 = type metadata accessor for IdentifiedUser();
          v45 = *(_QWORD *)(v44 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v25, 1, v44))
          {
            v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v24, v25, v44);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v24, 0, 1, v44);
          }
          *(_QWORD *)&v24[*(int *)(v26 + 20)] = *(_QWORD *)&v25[*(int *)(v26 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
          v12 = v64;
        }
        v55 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                     + 48);
        v51 = (char *)a1 + v55;
        v52 = (char *)a2 + v55;
        v53 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
          goto LABEL_21;
        goto LABEL_22;
      case 2:
        *a1 = *a2;
        v29 = (int *)type metadata accessor for SiriRequest(0);
        v30 = v29[5];
        v31 = (char *)a1 + v30;
        v32 = (char *)a2 + v30;
        v33 = type metadata accessor for Input();
        v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 32);
        v34(v31, v32, v33);
        *(_QWORD *)((char *)a1 + v29[6]) = *(_QWORD *)((char *)a2 + v29[6]);
        *(_OWORD *)((char *)a1 + v29[7]) = *(_OWORD *)((char *)a2 + v29[7]);
        *(_QWORD *)((char *)a1 + v29[8]) = *(_QWORD *)((char *)a2 + v29[8]);
        v35 = v29[9];
        v36 = (char *)a1 + v35;
        v37 = (char *)a2 + v35;
        v38 = type metadata accessor for SiriRequestIdentities(0);
        v39 = *(_QWORD *)(v38 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
        {
          v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
        }
        else
        {
          v65 = v34;
          v47 = type metadata accessor for IdentifiedUser();
          v48 = *(_QWORD *)(v47 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v37, 1, v47))
          {
            v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v36, v37, v47);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v36, 0, 1, v47);
          }
          *(_QWORD *)&v36[*(int *)(v38 + 20)] = *(_QWORD *)&v37[*(int *)(v38 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
          v34 = v65;
        }
        v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation, task: Task<(), Error>));
        v57 = *(int *)(v56 + 48);
        v58 = (char *)a1 + v57;
        v59 = (char *)a2 + v57;
        v60 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v34(v58, v59, v33);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
        }
        v61 = type metadata accessor for RequestContinuation(0);
        *(_QWORD *)&v58[*(int *)(v61 + 20)] = *(_QWORD *)&v59[*(int *)(v61 + 20)];
        *(_QWORD *)((char *)a1 + *(int *)(v56 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v56 + 64));
        goto LABEL_34;
      case 1:
        *a1 = *a2;
        v7 = (int *)type metadata accessor for SiriRequest(0);
        v8 = v7[5];
        v9 = (char *)a1 + v8;
        v10 = (char *)a2 + v8;
        v11 = type metadata accessor for Input();
        v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
        v12(v9, v10, v11);
        *(_QWORD *)((char *)a1 + v7[6]) = *(_QWORD *)((char *)a2 + v7[6]);
        *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
        *(_QWORD *)((char *)a1 + v7[8]) = *(_QWORD *)((char *)a2 + v7[8]);
        v13 = v7[9];
        v14 = (char *)a1 + v13;
        v15 = (char *)a2 + v13;
        v16 = type metadata accessor for SiriRequestIdentities(0);
        v17 = *(_QWORD *)(v16 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
        {
          v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        }
        else
        {
          v63 = v12;
          v41 = type metadata accessor for IdentifiedUser();
          v42 = *(_QWORD *)(v41 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v15, 1, v41))
          {
            v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v14, v15, v41);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v14, 0, 1, v41);
          }
          *(_QWORD *)&v14[*(int *)(v16 + 20)] = *(_QWORD *)&v15[*(int *)(v16 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
          v12 = v63;
        }
        v50 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                     + 48);
        v51 = (char *)a1 + v50;
        v52 = (char *)a2 + v50;
        v53 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
LABEL_21:
          v12(v51, v52, v11);
          swift_storeEnumTagMultiPayload();
LABEL_23:
          v54 = type metadata accessor for RequestContinuation(0);
          *(_QWORD *)&v51[*(int *)(v54 + 20)] = *(_QWORD *)&v52[*(int *)(v54 + 20)];
LABEL_34:
          swift_storeEnumTagMultiPayload();
          return a1;
        }
LABEL_22:
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
        goto LABEL_23;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for EncoreConversation.State()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v6;
  char v7;
  char v8;
  const char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v9 = "(";
  v0 = type metadata accessor for SiriRequest(319);
  if (v1 <= 0x3F)
  {
    v2 = type metadata accessor for RequestContinuation(319);
    if (v3 > 0x3F)
    {
      return v2;
    }
    else
    {
      swift_getTupleTypeLayout2();
      v10 = &v8;
      v4 = MEMORY[0x1E0DE9D48] + 64;
      swift_getTupleTypeLayout3();
      v11 = &v7;
      swift_getTupleTypeLayout2();
      v12 = &v6;
      v13 = v4;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v0;
}

uint64_t sub_1B4DBB080()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(type metadata accessor for RequestContinuation(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v13 = *(_QWORD *)(v1 + 64);
  v3 = type metadata accessor for ConversationContext();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v12 = *(_QWORD *)(v4 + 64);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  swift_unknownObjectRelease();
  swift_release();
  type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = type metadata accessor for Input();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v0 + v2, v9);
  }
  v10 = (v2 + v13 + v5) & ~v5;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v10, v3);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + ((v10 + v12 + v8) & ~v8), v6);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v4 = *(_QWORD *)(type metadata accessor for RequestContinuation(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for ConversationContext() - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>)
                                       - 8)
                           + 80);
  v11 = v8 + v9 + v10;
  v12 = v1[2];
  v13 = v1[3];
  v14 = v1[4];
  v15 = (uint64_t)v1 + v5;
  v16 = (uint64_t)v1 + v8;
  v17 = (uint64_t)v1 + (v11 & ~v10);
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v18;
  *v18 = v2;
  v18[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(a1, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_1B4DBB2C8()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(a1, &demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>, (uint64_t (*)(_QWORD))type metadata accessor for ConversationCommitResult, &demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
}

uint64_t sub_1B4DBB2F0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for RequestContinuation(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = type metadata accessor for ConversationContext();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  swift_release();
  type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Input();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v2, v7);
  }
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + ((v2 + v3 + v6) & ~v6), v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in EncoreConversation.commit()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for RequestContinuation(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ConversationContext() - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = v1 + v5;
  v11 = v1 + (v8 & ~v7);
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in EncoreConversation.commit()(a1, v9, v10, v11);
}

uint64_t sub_1B4DBB48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for ConversationContext();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for ConversationContext() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>)
                                      - 8)
                          + 80);
  v8 = (v6 + v7) & ~v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = v1[5];
  v13 = (uint64_t)v1 + v5;
  v14 = (uint64_t)v1 + v8;
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(a1, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1B4DBB628()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
  return closure #1 in closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(a1);
}

uint64_t sub_1B4DBB67C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v1 = (int *)type metadata accessor for SiriRequest(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v23 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for ConversationContext();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v22 = *(_QWORD *)(v5 + 64);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
  v7 = *(_QWORD *)(v25 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  swift_unknownObjectRelease();
  swift_release();
  v24 = v3;
  v9 = v0 + v3;
  swift_bridgeObjectRelease();
  v10 = v0 + v3 + v1[5];
  v11 = type metadata accessor for Input();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_release();
  v12 = (uint64_t *)(v9 + v1[7]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    outlined consume of Data._Representation(*v12, v13);
  swift_release();
  v14 = v9 + v1[9];
  v15 = type metadata accessor for SiriRequestIdentities(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v21 = v4;
    v16 = type metadata accessor for IdentifiedUser();
    v17 = *(_QWORD *)(v16 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v14, v16);
    swift_bridgeObjectRelease();
    v4 = v21;
  }
  v18 = (v24 + v23 + v6) & ~v6;
  v19 = (v18 + v22 + v8) & ~v8;
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v18, v4);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v19, v25);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v4 = *(_QWORD *)(type metadata accessor for SiriRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for ConversationContext() - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>)
                                       - 8)
                           + 80);
  v11 = v8 + v9 + v10;
  v12 = v1[2];
  v13 = v1[3];
  v14 = v1[4];
  v15 = (uint64_t)v1 + v5;
  v16 = (uint64_t)v1 + v8;
  v17 = (uint64_t)v1 + (v11 & ~v10);
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v18;
  *v18 = v2;
  v18[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(a1, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_1B4DBB964()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
}

uint64_t sub_1B4DBB970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Error>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + 32;
  v9 = v1 + v5;
  v10 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:)(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_1B4DBBABC()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(a1, &demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Error>, type metadata accessor for RequestContinuation, &demangling cache variable for type metadata for Result<RequestContinuation, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8) + 80);
  return closure #1 in closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:)(a1, v4 + ((v9 + 16) & ~v9), a3, a4, a2);
}

uint64_t partial apply for closure #1 in EncoreConversation.attemptCorrection(on:)()
{
  uint64_t v0;

  return closure #1 in EncoreConversation.attemptCorrection(on:)(*(_QWORD **)(v0 + 16));
}

uint64_t sub_1B4DBBB64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in EncoreEngine.asyncEnsureReadyEvent()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>)
                                      - 8)
                          + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in EncoreEngine.asyncEnsureReadyEvent()(a1, v5, v6, v7, v8);
}

uint64_t sub_1B4DBBC7C()
{
  return objectdestroy_115Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

uint64_t objectdestroy_3Tm_0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in EncoreConversation.setupEncoreEventHandling()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in EncoreConversation.setupEncoreEventHandling()(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return EncoreConversation.setupEncoreEventHandling()();
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = type metadata accessor for Parse();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * (v7 - a1))
  {
    result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v10)
  {
    result = swift_arrayInitWithTakeBackToFront();
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

uint64_t EncoreEngine.__allocating_init(rootEnvironment:snippetManager:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  EncoreEngine.init(rootEnvironment:snippetManager:)(a1, a2);
  return v4;
}

uint64_t EncoreEngine.send(event:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for EncoreEngine.EngineEvent(0);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v13 - v10;
  outlined init with copy of ConversationHelperInput(a1, (uint64_t)&v13 - v10, type metadata accessor for EncoreEngineEvent);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of ConversationHelperInput((uint64_t)v11, (uint64_t)v9, type metadata accessor for EncoreEngine.EngineEvent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return outlined destroy of CamOutput((uint64_t)v11, type metadata accessor for EncoreEngine.EngineEvent);
}

uint64_t *FlowActor.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static FlowActor.shared;
}

uint64_t EncoreEngine.isEmpty()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 24);
  if (v4)
  {
    v6 = swift_slowAlloc();
    *(_DWORD *)v6 = 67109376;
    v7 = *(_QWORD *)(v5 + 24);
    *(_DWORD *)(v0 + 16) = (*(uint64_t (**)(void))(*(_QWORD *)v7 + 184))() & 1;
    v8 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 8) = 2048;
    *(_QWORD *)(v0 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 160))(v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[EncoreEngine] Is empty: %{BOOL}d count: %ld.", (uint8_t *)v6, 0x12u);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  v9 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)(v0 + 24) + 24) + 184))();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v9 & 1);
}

uint64_t EncoreEngine.stackCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 24) + 160))();
}

uint64_t FlowActor.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  return v0;
}

uint64_t static FlowActor.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t FlowActor.deinit()
{
  uint64_t v0;

  swift_defaultActor_destroy();
  return v0;
}

uint64_t FlowActor.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t FlowActor.init()()
{
  uint64_t v0;

  swift_defaultActor_initialize();
  return v0;
}

uint64_t FlowActor.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for static GlobalActor.shared.getter in conformance FlowActor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t protocol witness for static GlobalActor.sharedUnownedExecutor.getter in conformance FlowActor()
{
  type metadata accessor for FlowActor();
  return static GlobalActor.sharedUnownedExecutor.getter();
}

uint64_t RequestContinuation.userInputResult.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ConversationHelperInput(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
}

uint64_t RequestContinuation.agent.getter()
{
  type metadata accessor for RequestContinuation(0);
  return swift_retain();
}

uint64_t RequestContinuation.init(userInputResult:agent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  outlined init with take of StringKeyedValue(a1, a3, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
  result = type metadata accessor for RequestContinuation(0);
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t ActingFlowAgent.flow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 16, a1);
}

uint64_t ActingFlowAgent.unwrappedFlow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 56, a1);
}

uint64_t ActingFlowAgent.lifeCycleModifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + 96, a1, &demangling cache variable for type metadata for LifeCycleModifier?);
}

uint64_t ActingFlowAgent.inputAccepting.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + 136, a1, &demangling cache variable for type metadata for InputAccepting?);
}

uint64_t ActingFlowAgent.executable.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + 176, a1, &demangling cache variable for type metadata for Executable?);
}

uint64_t ActingFlowAgent.snippetEventHandling.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ActingFlowAgent.environment.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3[2];
  uint64_t v4;
  _BYTE v5[40];
  _QWORD v6[4];

  outlined init with copy of ReferenceResolutionClientProtocol(v0 + 56, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentLocating);
  if (swift_dynamicCast())
  {
    outlined init with take of ReferenceResolutionClientProtocol(v3, (uint64_t)v6);
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    v1 = dispatch thunk of SiriEnvironmentLocating.siriEnvironment.getter();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }
  else
  {
    v4 = 0;
    memset(v3, 0, sizeof(v3));
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, &demangling cache variable for type metadata for SiriEnvironmentLocating?);
    v1 = *(_QWORD *)(v0 + 232);
    if (v1)
    {
      swift_retain();
    }
    else
    {
      type metadata accessor for SiriEnvironment();
      return static SiriEnvironment.default.getter();
    }
  }
  return v1;
}

uint64_t ActingFlowAgent.environment.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v4[2];
  uint64_t v5;
  _BYTE v6[40];
  _QWORD v7[4];

  outlined init with copy of ReferenceResolutionClientProtocol(v1 + 56, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentLocating);
  if (swift_dynamicCast())
  {
    outlined init with take of ReferenceResolutionClientProtocol(v4, (uint64_t)v7);
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    dispatch thunk of SiriEnvironmentLocating.siriEnvironment.setter();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    v5 = 0;
    memset(v4, 0, sizeof(v4));
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for SiriEnvironmentLocating?);
    *(_QWORD *)(v1 + 232) = a1;
    return swift_release();
  }
}

uint64_t (*ActingFlowAgent.environment.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = ActingFlowAgent.environment.getter();
  return ActingFlowAgent.environment.modify;
}

uint64_t ActingFlowAgent.environment.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return ActingFlowAgent.environment.setter(*a1);
  v2 = swift_retain();
  ActingFlowAgent.environment.setter(v2);
  return swift_release();
}

uint64_t ActingFlowAgent.__allocating_init(flow:environment:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  ActingFlowAgent.init(flow:environment:)(a1, a2);
  return v4;
}

_QWORD *ActingFlowAgent.init(flow:environment:)(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12[2];

  v2[29] = 0;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)(v2 + 2));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  ActingFlow.unwrap.getter();
  outlined init with take of ReferenceResolutionClientProtocol(v12, (uint64_t)(v2 + 7));
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LifeCycleModifier);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v11 = 0;
    v9 = 0u;
    v10 = 0u;
  }
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v9, (uint64_t)(v2 + 12), &demangling cache variable for type metadata for LifeCycleModifier?);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v2 + 7), (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputAccepting);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v11 = 0;
    v9 = 0u;
    v10 = 0u;
  }
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v9, (uint64_t)(v2 + 17), &demangling cache variable for type metadata for InputAccepting?);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v2 + 7), (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Executable);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v11 = 0;
    v9 = 0u;
    v10 = 0u;
  }
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v9, (uint64_t)(v2 + 22), &demangling cache variable for type metadata for Executable?);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v2 + 7), (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetEventHandling);
  v5 = swift_dynamicCast();
  v7 = *((_QWORD *)&v9 + 1);
  v6 = v9;
  if (!v5)
  {
    v6 = 0;
    v7 = 0;
  }
  v2[27] = v6;
  v2[28] = v7;
  ActingFlowAgent.environment.setter(a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v2;
}

uint64_t ActingFlowAgent.snippetIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;

  if (*(_QWORD *)(v1 + 216))
  {
    swift_getObjectType();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v3 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a1, 0, 1, v3);
  }
  else
  {
    v5 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
}

uint64_t ActingFlowAgent.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for LifeCycleModifier?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 136, &demangling cache variable for type metadata for InputAccepting?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 176, &demangling cache variable for type metadata for Executable?);
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t ActingFlowAgent.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for LifeCycleModifier?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 136, &demangling cache variable for type metadata for InputAccepting?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 176, &demangling cache variable for type metadata for Executable?);
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t OrderedForest<A>.debugDescription()()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), _QWORD))(*(_QWORD *)v0 + 304))(closure #1 in OrderedForest<A>.debugDescription(), 0);
}

uint64_t closure #1 in OrderedForest<A>.debugDescription()(_QWORD *a1)
{
  _BYTE v2[40];

  outlined init with copy of ReferenceResolutionClientProtocol(*a1 + 56, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
  return String.init<A>(describing:)();
}

uint64_t ExecutableTask.executingNode.getter()
{
  return swift_retain();
}

uint64_t ExecutableTask.context.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_context;
  v4 = type metadata accessor for ConversationContext();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ExecutableTask.runningTask.getter()
{
  return swift_retain();
}

uint64_t key path getter for ExecutableTask.actionCompletion : ExecutableTask@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
  swift_beginAccess();
  v5 = *v3;
  v4 = v3[1];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  *a2 = partial apply for thunk for @callee_guaranteed (@guaranteed SMTTCUPackageMutating?) -> ();
  a2[1] = (uint64_t (*)())v6;
  return swift_retain();
}

uint64_t key path setter for ExecutableTask.actionCompletion : ExecutableTask(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();

  v4 = *a1;
  v3 = a1[1];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  v6 = (uint64_t (**)())(*a2 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
  swift_beginAccess();
  *v6 = partial apply for thunk for @callee_guaranteed (@guaranteed SMTTCUPackageMutating?) -> ();
  v6[1] = (uint64_t (*)())v5;
  swift_retain();
  return swift_release();
}

uint64_t ExecutableTask.actionCompletion.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
  swift_beginAccess();
  v2 = *v1;
  swift_retain();
  return v2;
}

uint64_t ExecutableTask.actionCompletion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_release();
}

uint64_t (*ExecutableTask.actionCompletion.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ExecutableTask.__allocating_init(executingNode:context:runningTask:actionCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  v11 = v10 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_context;
  v12 = type metadata accessor for ConversationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a2, v12);
  *(_QWORD *)(v10 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_runningTask) = a3;
  v13 = (_QWORD *)(v10 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
  *v13 = a4;
  v13[1] = a5;
  return v10;
}

uint64_t ExecutableTask.init(executingNode:context:runningTask:actionCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  *(_QWORD *)(v5 + 16) = a1;
  v10 = v5 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_context;
  v11 = type metadata accessor for ConversationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a2, v11);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_runningTask) = a3;
  v12 = (_QWORD *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
  *v12 = a4;
  v12[1] = a5;
  return v5;
}

uint64_t ExecutableTask.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_context;
  v2 = type metadata accessor for ConversationContext();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  return v0;
}

uint64_t ExecutableTask.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_context;
  v2 = type metadata accessor for ConversationContext();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t OrderedForest<A>.find(value:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;

  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 192);
  v4 = swift_retain();
  v5 = v3(v4);
  swift_release();
  if (!v5)
    return 0;
  while (1)
  {
    Strong = swift_weakLoadStrong();
    if (*(_QWORD *)(v5 + 16) == a1)
      break;
    swift_release();
    v5 = Strong;
    if (!Strong)
      return Strong;
  }
  swift_release();
  return v5;
}

uint64_t one-time initialization function for TaskPriority()
{
  uint64_t v0;

  v0 = type metadata accessor for TaskPriority();
  __swift_allocate_value_buffer(v0, static EncoreEngine.TaskPriority);
  __swift_project_value_buffer(v0, (uint64_t)static EncoreEngine.TaskPriority);
  return static TaskPriority.userInitiated.getter();
}

uint64_t EncoreEngine.TaskPriority.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for TaskPriority != -1)
    swift_once();
  v0 = type metadata accessor for TaskPriority();
  return __swift_project_value_buffer(v0, (uint64_t)static EncoreEngine.TaskPriority);
}

uint64_t static EncoreEngine.TaskPriority.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for TaskPriority != -1)
    swift_once();
  v2 = type metadata accessor for TaskPriority();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static EncoreEngine.TaskPriority);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

_QWORD *EncoreEngine.init(rootEnvironment:snippetManager:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[7] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EventQueue<EncoreEngine.EngineEvent>);
  swift_allocObject();
  v2[2] = specialized EventQueue.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrderedForest<ActingFlowAgent>);
  v9 = (_QWORD *)swift_allocObject();
  v9[3] = 0;
  v9[4] = 0;
  v9[2] = 0;
  v2[3] = v9;
  v2[4] = a1;
  v10 = MEMORY[0x1E0DEE9D8];
  v2[5] = a2;
  v2[6] = v10;
  swift_retain_n();
  swift_retain();
  swift_retain();
  dispatch thunk of SnippetManager.positionLookup.setter();
  swift_release();
  if (one-time initialization token for TaskPriority != -1)
    swift_once();
  v11 = type metadata accessor for TaskPriority();
  v12 = __swift_project_value_buffer(v11, (uint64_t)static EncoreEngine.TaskPriority);
  v13 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v8, v12, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v11);
  v14 = swift_allocObject();
  swift_weakInit();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v14;
  v16 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #2 in EncoreEngine.init(rootEnvironment:snippetManager:), (uint64_t)v15);
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3[7] = v16;
  swift_release();
  return v3;
}

uint64_t type metadata accessor for EncoreEngine.EngineEvent(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for EncoreEngine.EngineEvent);
}

uint64_t type metadata accessor for EncoreEngineEvent(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for EncoreEngineEvent);
}

uint64_t EventQueue.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  EventQueue.init()();
  return v0;
}

uint64_t closure #1 in EncoreEngine.init(rootEnvironment:snippetManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t Strong;
  uint64_t v21;
  char v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v24 - v13;
  swift_getObjectType();
  v25 = a1;
  v15 = dispatch thunk of RawRepresentable.rawValue.getter();
  v16 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(a3 + 24) + 192))(v15);
  v17 = 0;
  do
  {
    if (!v16)
    {
      v17 = 0;
      v23 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
      goto LABEL_11;
    }
    Strong = swift_weakLoadStrong();
    v21 = *(_QWORD *)(*(_QWORD *)(v16 + 16) + 216);
    if (!v21)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
LABEL_3:
      swift_release();
      result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      goto LABEL_4;
    }
    swift_getObjectType();
    v25 = v21;
    dispatch thunk of RawRepresentable.rawValue.getter();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      goto LABEL_3;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
    v22 = static UUID.== infix(_:_:)();
    swift_release();
    v23 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
    result = v23(v12, v8);
    if ((v22 & 1) != 0)
    {
      swift_release();
LABEL_11:
      v23(v14, v8);
      return v17;
    }
LABEL_4:
    v16 = Strong;
  }
  while (!__OFADD__(v17++, 1));
  __break(1u);
  return result;
}

uint64_t EncoreEngine.position(of:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t Strong;
  uint64_t v19;
  char v20;
  uint64_t (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v22 - v11;
  swift_getObjectType();
  v23 = a1;
  v13 = dispatch thunk of RawRepresentable.rawValue.getter();
  v14 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v1 + 24) + 192))(v13);
  v15 = 0;
  do
  {
    if (!v14)
    {
      v15 = 0;
      v21 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
      goto LABEL_11;
    }
    Strong = swift_weakLoadStrong();
    v19 = *(_QWORD *)(*(_QWORD *)(v14 + 16) + 216);
    if (!v19)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
LABEL_3:
      swift_release();
      result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      goto LABEL_4;
    }
    swift_getObjectType();
    v23 = v19;
    dispatch thunk of RawRepresentable.rawValue.getter();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
      goto LABEL_3;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
    v20 = static UUID.== infix(_:_:)();
    swift_release();
    v21 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
    result = v21(v10, v6);
    if ((v20 & 1) != 0)
    {
      swift_release();
LABEL_11:
      v21(v12, v6);
      return v15;
    }
LABEL_4:
    v14 = Strong;
  }
  while (!__OFADD__(v15++, 1));
  __break(1u);
  return result;
}

uint64_t closure #2 in EncoreEngine.init(rootEnvironment:snippetManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  return swift_task_switch();
}

uint64_t closure #2 in EncoreEngine.init(rootEnvironment:snippetManager:)()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  *(_QWORD *)(v0 + 48) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = closure #2 in EncoreEngine.init(rootEnvironment:snippetManager:);
  return EncoreEngine.startEventLoop()();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t EncoreEngine.startEventLoop()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  type metadata accessor for EncoreEngineEvent(0);
  v1[3] = swift_task_alloc();
  v2 = type metadata accessor for EncoreEngine.EngineEvent(0);
  v1[4] = v2;
  v1[5] = *(_QWORD *)(v2 - 8);
  v1[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EncoreEngine.EngineEvent?);
  v1[7] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Iterator);
  v1[8] = v3;
  v1[9] = *(_QWORD *)(v3 - 8);
  v1[10] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  v1[11] = static FlowActor.shared;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  _QWORD *v6;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 96) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[EncoreEngine] Event process loop started.", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>);
  AsyncStream.makeAsyncIterator()();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type FlowActor and conformance FlowActor, v5, (uint64_t (*)(uint64_t))type metadata accessor for FlowActor, (uint64_t)&protocol conformance descriptor for FlowActor);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v6;
  *v6 = v0;
  v6[1] = EncoreEngine.startEventLoop();
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  int EnumCaseMultiPayload;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(v0 + 56);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 40) + 48))(v1, 1, *(_QWORD *)(v0 + 32)) == 1)
  {
    v2 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    *(_QWORD *)(v2 + 56) = 0;
    swift_release();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1B4BE6000, v3, v4, "[EncoreEngine] Event process loop ends.", v5, 2u);
      MEMORY[0x1B5E44758](v5, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    outlined init with take of StringKeyedValue(v1, *(_QWORD *)(v0 + 48), type metadata accessor for EncoreEngine.EngineEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v8 = *(uint64_t **)(v0 + 48);
    if (EnumCaseMultiPayload == 1)
    {
      EncoreEngine.handleInternal(event:)(*v8);
      swift_release();
    }
    else
    {
      v10 = *(_QWORD *)(v0 + 24);
      outlined init with take of StringKeyedValue((uint64_t)v8, v10, type metadata accessor for EncoreEngineEvent);
      EncoreEngine.handleExternal(event:)(v10);
      outlined destroy of CamOutput(v10, type metadata accessor for EncoreEngineEvent);
    }
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type FlowActor and conformance FlowActor, v9, (uint64_t (*)(uint64_t))type metadata accessor for FlowActor, (uint64_t)&protocol conformance descriptor for FlowActor);
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v11;
    *v11 = v0;
    v11[1] = EncoreEngine.startEventLoop();
    return AsyncStream.Iterator.next(isolation:)();
  }
}

uint64_t EncoreEngine.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = v0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[EncoreEngine] deinit.", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t EncoreEngine.__deallocating_deinit()
{
  EncoreEngine.deinit();
  return swift_deallocClassInstance();
}

uint64_t EventQueue.send(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AsyncStream.Continuation.YieldResult();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v12 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  type metadata accessor for AsyncStream.Continuation();
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void EncoreEngine.handleExternal(event:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD);
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;

  v56 = 0;
  v52 = type metadata accessor for ConversationContext();
  v53 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v43 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for SiriRequest(0);
  v40 = *(_QWORD *)(v32 - 8);
  v3 = MEMORY[0x1E0C80A78](v32);
  v44 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v50 = (char *)&v31 - v6;
  v41 = v7;
  MEMORY[0x1E0C80A78](v5);
  v55 = (char *)&v31 - v8;
  v51 = type metadata accessor for UserInputResult();
  v9 = MEMORY[0x1E0C80A78](v51);
  MEMORY[0x1E0C80A78](v9);
  v34 = (char *)&v31 - v10;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RequestContinuation, Error>);
  v42 = *(_QWORD *)(v35 - 8);
  v11 = *(_QWORD *)(v42 + 64);
  v12 = MEMORY[0x1E0C80A78](v35);
  v37 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v33 = (char *)&v31 - v14;
  MEMORY[0x1E0C80A78](v13);
  v38 = (char *)&v31 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v16);
  v54 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for RequestContinuation(0);
  v49 = *(_QWORD *)(v48 - 8);
  v18 = *(_QWORD *)(v49 + 64);
  v19 = MEMORY[0x1E0C80A78](v48);
  v46 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v19);
  v39 = (char *)&v31 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  MEMORY[0x1E0C80A78](v22);
  v47 = (char *)&v31 - v23;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemEvents?);
  MEMORY[0x1E0C80A78](v24);
  v36 = type metadata accessor for SystemEvents();
  v45 = *(_QWORD *)(v36 - 8);
  v25 = MEMORY[0x1E0C80A78](v36);
  MEMORY[0x1E0C80A78](v25);
  v31 = (char *)&v31 - v26;
  v27 = type metadata accessor for EncoreEngineEvent(0);
  MEMORY[0x1E0C80A78](v27);
  outlined init with copy of ConversationHelperInput(a1, (uint64_t)&v31 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), v29);
  v30 = (char *)sub_1B4DBE668 + 4 * word_1B4EE9970[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_1B4DBE668()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_log_type_t v9;
  _DWORD *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject **v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void (*v18);
  uint64_t v19;
  void (*v20);
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  _QWORD *v27;
  NSObject *v28;
  uint8_t *v29;
  NSObject *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _QWORD *v34;
  NSObject *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  int v40;
  NSObject *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  _QWORD *v45;
  NSObject *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;

  v4 = *v0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  v7 = v4;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (_DWORD *)swift_slowAlloc();
    *(_QWORD *)(v3 - 304) = swift_slowAlloc();
    *(_QWORD *)(v3 - 296) = v10;
    *v10 = 138412290;
    *(_QWORD *)(v3 - 136) = v7;
    v11 = v7;
    *(_QWORD *)(v3 - 288) = v6;
    v12 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v13 = *(NSObject ***)(v3 - 304);
    *v13 = v7;

    v14 = *(uint8_t **)(v3 - 296);
    _os_log_impl(&dword_1B4BE6000, v8, v9, "[EncoreEngine] Handling snippet event request: %@.", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v13, -1, -1);
    MEMORY[0x1B5E44758](v14, -1, -1);
  }
  else
  {

    v8 = v7;
  }
  v15 = *(_QWORD *)(v3 - 440);
  v16 = *(_QWORD *)(v3 - 368);

  lazy protocol witness table accessor for type SystemEvents? and conformance <A> A?();
  v17 = *(void **)(v3 - 272);
  dispatch thunk of EncoreEvent.getValue<A>()();
  if (v17)
  {

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v1, 1, 1, v15);
  }
  else if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v1, 1, v15) != 1)
  {
    v39 = *(_QWORD *)(v3 - 480);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v39, v1, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v2, v39, v15);
    v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 88))(v2, v15);
    if (v40 == *MEMORY[0x1E0D1F2E0])
    {
      v41 = v7;
      v42 = Logger.logObject.getter();
      v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc();
        v45 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v44 = 138412290;
        *(_QWORD *)(v3 - 136) = v41;
        v46 = v41;
        v16 = *(_QWORD *)(v3 - 368);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v45 = v41;

        _os_log_impl(&dword_1B4BE6000, v42, v43, "[EncoreEngine] Snippet Disappeared: Remove it?: %@.", v44, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v45, -1, -1);
        MEMORY[0x1B5E44758](v44, -1, -1);
      }
      else
      {

        v42 = v41;
      }

      dispatch thunk of SnippetManager.snippetDisappeared()();
    }
    else
    {
      if (v40 != *MEMORY[0x1E0D1F2E8])
      {
        specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000027, 0x80000001B4EFC040, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Encore/EncoreEngine.swift", 94, 2, 239);
        __break(1u);
        return;
      }
      v47 = Logger.logObject.getter();
      v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v49 = 0;
        _os_log_impl(&dword_1B4BE6000, v47, v48, "Ignoring .returnedToVoiceMode event since it was sent over XPC. This is not supported.", v49, 2u);
        MEMORY[0x1B5E44758](v49, -1, -1);
      }

    }
    (*(void (**)(_QWORD, uint64_t))(v16 + 8))(*(_QWORD *)(v3 - 480), v15);
    return;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for SystemEvents?);
  if (EncoreEngine.discover(event:)(v7))
  {
    v20 = v18;
    v21 = v19;
    swift_release();
    v22 = v7;
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc();
      *(_QWORD *)(v3 - 288) = v20;
      v26 = (uint8_t *)v25;
      v27 = (_QWORD *)swift_slowAlloc();
      *(_QWORD *)(v3 - 272) = v21;
      *(_DWORD *)v26 = 138412290;
      *(_QWORD *)(v3 - 136) = v22;
      v28 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v27 = v22;

      _os_log_impl(&dword_1B4BE6000, v23, v24, "[EncoreEngine] Invoking event handler for event: %@", v26, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v27, -1, -1);
      v29 = v26;
      v20 = *(void (**))(v3 - 288);
      MEMORY[0x1B5E44758](v29, -1, -1);
    }
    else
    {

      v23 = v22;
    }

    dispatch thunk of SnippetManager.canSendXPCUpdates.setter();
    v20(v22);
    dispatch thunk of SnippetManager.canSendXPCUpdates.setter();
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1B4BE6000, v36, v37, "Finished handling encore XPC event.", v38, 2u);
      MEMORY[0x1B5E44758](v38, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
    }
  }
  else
  {
    v30 = v7;
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v33 = 138412290;
      *(_QWORD *)(v3 - 136) = v30;
      v35 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v34 = v30;

      _os_log_impl(&dword_1B4BE6000, v31, v32, "[EncoreEngine] None of flow registers to handle snippet event: %@.", v33, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v34, -1, -1);
      MEMORY[0x1B5E44758](v33, -1, -1);

    }
    else
    {

    }
  }
}

void EncoreEngine.handleInternal(event:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char isCancelled;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  char v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (**v41)(uint64_t);
  void (*v42)(uint64_t);
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD v55[5];
  uint64_t v56[2];
  uint64_t v57[3];

  v2 = v1;
  v53 = type metadata accessor for EncoreEngine.ActionOutcome(0);
  MEMORY[0x1E0C80A78](v53);
  v54 = (uint64_t *)((char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = one-time initialization token for executor;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  swift_retain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v57[0] = v10;
    *(_DWORD *)v9 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol(a1 + 56, (uint64_t)v55);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    v11 = String.init<A>(describing:)();
    v55[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v7, v8, "[EncoreEngine] Handling executable flow %s completion event.", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v10, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  swift_beginAccess();
  swift_retain();
  v13 = swift_bridgeObjectRetain();
  v14 = specialized Collection.firstIndex(where:)(v13, a1);
  v16 = v15;
  swift_release();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v31, v32))
    {
      swift_release();

      return;
    }
    v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v33 = 0;
    _os_log_impl(&dword_1B4BE6000, v31, v32, "[EncoreEngine] Expired execution task.", v33, 2u);
    MEMORY[0x1B5E44758](v33, -1, -1);

    goto LABEL_24;
  }
  swift_beginAccess();
  v17 = specialized Array.remove(at:)(v14);
  swift_endAccess();
  v18 = *(_QWORD *)(v17 + 16);
  v19 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v2 + 24) + 192);
  swift_retain();
  v20 = swift_retain();
  Strong = v19(v20);
  while (1)
  {
    v22 = Strong;
    if (!Strong)
      break;
    Strong = swift_weakLoadStrong();
    swift_release();
    if (v18 == v22)
    {
      swift_release();
      break;
    }
  }
  swift_release();
  swift_release();
  swift_retain_n();
  swift_retain_n();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  v25 = os_log_type_enabled(v23, v24);
  v52 = v2;
  if (v25)
  {
    HIDWORD(v51) = v22 == 0;
    v26 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    v56[0] = v27;
    *(_DWORD *)v26 = 136315650;
    outlined init with copy of ReferenceResolutionClientProtocol(a1 + 56, (uint64_t)v55);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    v28 = String.init<A>(describing:)();
    v55[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v26 + 12) = 1024;
    isCancelled = swift_task_isCancelled();
    swift_release();
    LODWORD(v55[0]) = isCancelled & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v26 + 18) = 1024;
    LODWORD(v55[0]) = HIDWORD(v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v23, v24, "[EncoreEngine] Found executable task %s cancelled: %{BOOL}d detached: %{BOOL}d.", (uint8_t *)v26, 0x18u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v27, -1, -1);
    MEMORY[0x1B5E44758](v26, -1, -1);

    if (!v22)
      goto LABEL_18;
    goto LABEL_17;
  }
  swift_release_n();
  swift_release_n();

  if (v22)
  {
LABEL_17:
    swift_retain();
    v34 = swift_task_isCancelled();
    swift_release();
    if ((v34 & 1) != 0)
      goto LABEL_18;
    v46 = *(_QWORD *)(v17 + 16);
    v47 = v17 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_context;
    v48 = v17 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion;
    swift_beginAccess();
    v50 = *(void (**)(_QWORD))v48;
    v49 = *(_QWORD *)(v48 + 8);
    swift_retain();
    swift_retain();
    EncoreEngine.action(mode:starting:context:completion:)(1, v46, v47, v50, v49);
    swift_release();
    swift_release();
    swift_release();
LABEL_24:
    swift_release();
    return;
  }
LABEL_18:
  swift_retain_n();
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    v38 = swift_slowAlloc();
    v56[0] = v38;
    *(_DWORD *)v37 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol(a1 + 56, (uint64_t)v55);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    v39 = String.init<A>(describing:)();
    v55[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v35, v36, "[EncoreEngine] Expired execution agent %s.", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v38, -1, -1);
    MEMORY[0x1B5E44758](v37, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v41 = (void (**)(uint64_t))(v17 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
  swift_beginAccess();
  v42 = *v41;
  lazy protocol witness table accessor for type CancelledError and conformance CancelledError();
  v43 = swift_allocError();
  *v44 = 0xD000000000000025;
  v44[1] = 0x80000001B4EFC440;
  v45 = (uint64_t)v54;
  *v54 = v43;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  v42(v45);
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of CamOutput(v45, type metadata accessor for EncoreEngine.ActionOutcome);
}

uint64_t EncoreEngine.discover(event:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  void **p_cache;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  void **v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD v50[2];
  __int128 v51;
  __int128 v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[5];
  uint64_t v57;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceName?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  EncoreEvent.serviceName.getter();
  v6 = type metadata accessor for ServiceName();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
  {
    MEMORY[0x1B5E41464]();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    v15 = swift_bridgeObjectRelease();
    v16 = (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v1 + 24) + 192))(v15);
    if (!v16)
      return v16;
    p_cache = &OBJC_METACLASS____TtC14SiriKitRuntime14RealCamWrapper.cache;
    *(_QWORD *)&v17 = 136315138;
    v51 = v17;
    v50[1] = MEMORY[0x1E0DEE9B8] + 8;
    *(_QWORD *)&v17 = 136315394;
    v52 = v17;
    v53 = a1;
    while (1)
    {
      while (1)
      {
        Strong = swift_weakLoadStrong();
        v31 = *(_QWORD *)(v16 + 16);
        v32 = *(_QWORD *)(v31 + 216);
        if (v32)
          break;
        if (p_cache[49] != (void *)-1)
          swift_once();
        v40 = type metadata accessor for Logger();
        __swift_project_value_buffer(v40, (uint64_t)static Logger.executor);
        swift_retain_n();
        v38 = Logger.logObject.getter();
        v41 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v38, v41))
        {

          goto LABEL_8;
        }
        v42 = swift_slowAlloc();
        v43 = swift_slowAlloc();
        v57 = v43;
        *(_DWORD *)v42 = v51;
        outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v16 + 16) + 56, (uint64_t)v56);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
        v44 = String.init<A>(describing:)();
        *(_QWORD *)(v42 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v57);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v38, v41, "[EncoreEngine] Node (%s) does not implement snippetEventHandling", (uint8_t *)v42, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v43, -1, -1);
        MEMORY[0x1B5E44758](v42, -1, -1);
        swift_release();
LABEL_11:

        v16 = Strong;
        if (!Strong)
          return v16;
      }
      v33 = *(_QWORD *)(v31 + 224);
      swift_getObjectType();
      swift_unknownObjectRetain();
      v34 = SnippetEventHandling.handler(for:)();
      if (v34)
      {
        v47 = v34;
        v48 = v35;
        swift_release();
        v49 = (_QWORD *)swift_allocObject();
        v49[2] = v16;
        v49[3] = v32;
        v49[4] = v33;
        v49[5] = v47;
        v49[6] = v48;
        swift_retain();
        return v16;
      }
      if (p_cache[49] != (void *)-1)
        swift_once();
      v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
      swift_retain_n();
      v37 = a1;
      v38 = Logger.logObject.getter();
      v39 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v19 = swift_slowAlloc();
        v54 = swift_slowAlloc();
        v57 = v54;
        *(_DWORD *)v19 = v52;
        outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v16 + 16) + 56, (uint64_t)v56);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
        v20 = String.init<A>(describing:)();
        v55 = Strong;
        *(_QWORD *)(v19 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v57);
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2080;
        v22 = v37;
        v23 = objc_msgSend(v22, sel_description);
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v25 = p_cache;
        v27 = v26;

        *(_QWORD *)(v19 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v27, &v57);
        Strong = v55;
        p_cache = v25;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v38, v39, "[EncoreEngine] Node (%s) implements snippetEventHandling, but doesn't handle events of type '%s'", (uint8_t *)v19, 0x16u);
        v29 = v54;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v29, -1, -1);
        v30 = v19;
        a1 = v53;
        MEMORY[0x1B5E44758](v30, -1, -1);
        swift_release();
        swift_unknownObjectRelease();
        goto LABEL_11;
      }

      swift_unknownObjectRelease();
LABEL_8:
      swift_release_n();
      v16 = Strong;
      if (!Strong)
        return v16;
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for ServiceName?);
  if (one-time initialization token for executor != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v12 = 138412290;
    v56[0] = v9;
    v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v13 = v9;

    _os_log_impl(&dword_1B4BE6000, v10, v11, "[EncoreEngine] Snippet event does not have an event name. %@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v13, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);

  }
  else
  {

  }
  return 0;
}

void EncoreEngine.ensureReady()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  v1 = v0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[EncoreEngine] Ensuring engine is ready.", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  swift_beginAccess();
  swift_retain();
  v6 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t *)(v1 + 48), v1);
  v7 = v6;
  v8 = *(_QWORD *)(v1 + 48);
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9 >= v7)
      goto LABEL_7;
LABEL_11:
    __break(1u);
    return;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v9 < v6)
    goto LABEL_11;
LABEL_7:
  specialized Array.replaceSubrange<A>(_:with:)(v7, v9);
  swift_endAccess();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1B4BE6000, v10, v11, "[EncoreEngine] Engine is ready.", v12, 2u);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }

}

uint64_t EncoreEngine.continuation(for:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD);
  uint64_t v31;
  void (*v32)(_QWORD);
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint8_t *v38;
  NSObject *v39;
  _QWORD *v40;
  uint8_t *v41;
  uint64_t v42;
  NSObject *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  _QWORD *v47;
  NSObject *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  char *v53;
  int v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  _BYTE *v59;
  uint8_t *v60;
  _BYTE *v61;
  uint64_t v62;
  void (*v63)(_QWORD);
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  uint8_t *v73;
  uint64_t (*v74)(uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  unsigned int (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  void (**v83)(uint64_t, char *, uint64_t);
  void (*v84)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  char *v90;
  char v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  _BOOL4 v96;
  _BYTE *v97;
  uint64_t (**v98)(char *, uint64_t);
  uint8_t *v99;
  uint64_t (**v100)(char *, uint64_t);
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t Strong;
  _QWORD *v125;
  void (*v126)(_QWORD);
  _BYTE *v127;
  uint64_t v128;
  NSObject *v129;

  v127 = a2;
  v121 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1E0C80A78](v121);
  v125 = (uint64_t *)((char *)&v112 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v119 = (uint64_t)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v123 = (uint64_t)&v112 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v122 = (uint64_t)&v112 - v10;
  MEMORY[0x1E0C80A78](v9);
  v120 = (void (*)(char *, uint64_t, uint64_t))((char *)&v112 - v11);
  v118 = type metadata accessor for UUID();
  v126 = *(void (**)(_QWORD))(v118 - 8);
  v12 = MEMORY[0x1E0C80A78](v118);
  v14 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v112 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemEvents?);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SystemEvents();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v112 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v112 - v25;
  lazy protocol witness table accessor for type SystemEvents? and conformance <A> A?();
  v27 = a1;
  dispatch thunk of EncoreEvent.getValue<A>()();
  v28 = (uint64_t)v120;
  v115 = v14;
  v116 = v26;
  v117 = v16;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, &demangling cache variable for type metadata for SystemEvents?);
    v29 = EncoreEngine.discover(event:)(v27);
    if (v29)
    {
      v31 = v29;
      v32 = v30;
      if (one-time initialization token for executor != -1)
        swift_once();
      v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.executor);
      v34 = v27;
      v35 = Logger.logObject.getter();
      v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = swift_slowAlloc();
        v126 = v32;
        v38 = (uint8_t *)v37;
        v125 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v38 = 138412290;
        v129 = v34;
        v39 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v40 = v125;
        *v125 = v34;

        _os_log_impl(&dword_1B4BE6000, v35, v36, "[EncoreEngine] Invoking event handler for event: %@", v38, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v40, -1, -1);
        v41 = v38;
        v32 = v126;
        MEMORY[0x1B5E44758](v41, -1, -1);
      }
      else
      {

        v35 = v34;
      }
      v49 = v127;

      v32(v34);
      swift_release();
      type metadata accessor for UserInputResult();
      swift_storeEnumTagMultiPayload();
      v50 = *(_QWORD *)(v31 + 16);
      swift_retain();
      swift_release();
      result = type metadata accessor for RequestContinuation(0);
      *(_QWORD *)&v49[*(int *)(result + 20)] = v50;
    }
    else
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v42 = type metadata accessor for Logger();
      __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
      v43 = v27;
      v44 = Logger.logObject.getter();
      v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc();
        v47 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v46 = 138412290;
        v129 = v43;
        v48 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v47 = v43;

        _os_log_impl(&dword_1B4BE6000, v44, v45, "[EncoreEngine] None of flow registers to handle snippet event: %@.", v46, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v47, -1, -1);
        MEMORY[0x1B5E44758](v46, -1, -1);
      }
      else
      {

        v44 = v43;
      }
      v61 = v127;

      *v61 = 0;
      type metadata accessor for UserInputResult();
      swift_storeEnumTagMultiPayload();
      result = type metadata accessor for RequestContinuation(0);
      *(_QWORD *)&v61[*(int *)(result + 20)] = 0;
    }
    return result;
  }
  v52 = v20;
  v53 = v116;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v116, v19, v20);
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v24, v53, v20);
  v54 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v24, v20);
  if (v54 == *MEMORY[0x1E0D1F2E0])
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)static Logger.executor);
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.error.getter();
    v58 = os_log_type_enabled(v56, v57);
    v59 = v127;
    if (v58)
    {
      v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v60 = 0;
      _os_log_impl(&dword_1B4BE6000, v56, v57, "Rejecting .snippetDisappeared event since it was sent over DI. This is not supported and will likely cause a user facing error.", v60, 2u);
      MEMORY[0x1B5E44758](v60, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v21 + 8))(v116, v20);
LABEL_29:
    *v59 = 0;
    type metadata accessor for UserInputResult();
    swift_storeEnumTagMultiPayload();
    result = type metadata accessor for RequestContinuation(0);
    *(_QWORD *)&v59[*(int *)(result + 20)] = 0;
    return result;
  }
  v114 = v21;
  if (v54 != *MEMORY[0x1E0D1F2E8])
  {
    result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000027, 0x80000001B4EFC040, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Encore/EncoreEngine.swift", 94, 2, 363);
    __break(1u);
    return result;
  }
  v62 = Strong;
  dispatch thunk of SnippetManager.flowIdentifierOfCurrentSnippet.getter();
  v63 = v126;
  v64 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v126 + 6);
  v65 = v118;
  v66 = v64(v28, 1, v118) == 1;
  v68 = v122;
  v67 = v123;
  if (v66)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v28, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v69 = type metadata accessor for Logger();
    __swift_project_value_buffer(v69, (uint64_t)static Logger.executor);
    v70 = Logger.logObject.getter();
    v71 = static os_log_type_t.error.getter();
    v72 = os_log_type_enabled(v70, v71);
    v59 = v127;
    if (v72)
    {
      v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v73 = 0;
      _os_log_impl(&dword_1B4BE6000, v70, v71, "Got a .returnedToVoiceMode event but SnippetManager isn't aware of any snippets on screen. Rejecting input which will likely cause a user facing error.", v73, 2u);
      MEMORY[0x1B5E44758](v73, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v114 + 8))(v116, v52);
    goto LABEL_29;
  }
  v113 = v52;
  v120 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v63 + 4);
  v120(v117, v28, v65);
  v74 = *(uint64_t (**)(uint64_t))(**(_QWORD **)(v62 + 24) + 192);
  v112 = swift_retain();
  v75 = v74(v112);
  v76 = v121;
  if (!v75)
  {
LABEL_43:
    swift_release();
    if (one-time initialization token for executor != -1)
      swift_once();
    v93 = type metadata accessor for Logger();
    __swift_project_value_buffer(v93, (uint64_t)static Logger.executor);
    v94 = Logger.logObject.getter();
    v95 = static os_log_type_t.default.getter();
    v96 = os_log_type_enabled(v94, v95);
    v98 = (uint64_t (**)(char *, uint64_t))v126;
    v97 = v127;
    if (v96)
    {
      v99 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v99 = 0;
      _os_log_impl(&dword_1B4BE6000, v94, v95, "Failed to find flow agent to handle .returnToVoiceMode event. Rejecting input which will likely cause a user facing error.", v99, 2u);
      MEMORY[0x1B5E44758](v99, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v114 + 8))(v116, v113);
    *v97 = 0;
    type metadata accessor for UserInputResult();
    swift_storeEnumTagMultiPayload();
    *(_QWORD *)&v97[*(int *)(type metadata accessor for RequestContinuation(0) + 20)] = 0;
    return v98[1](v117, v65);
  }
  v77 = v75;
  v78 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
  while (1)
  {
    v80 = v78;
    v81 = v64;
    Strong = swift_weakLoadStrong();
    v82 = *(_QWORD *)(*(_QWORD *)(v77 + 16) + 216);
    if (v82)
    {
      swift_getObjectType();
      v129 = v82;
      dispatch thunk of RawRepresentable.rawValue.getter();
      v76 = v121;
      v83 = (void (**)(uint64_t, char *, uint64_t))v126;
      v84 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v126 + 7);
      v84(v68, 0, 1, v65);
    }
    else
    {
      v83 = (void (**)(uint64_t, char *, uint64_t))v126;
      v84 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)v126 + 7);
      v84(v68, 1, 1, v65);
    }
    v85 = v68;
    v83[2](v67, v117, v65);
    v84(v67, 0, 1, v65);
    v86 = v125;
    v87 = (uint64_t)v125 + *(int *)(v76 + 48);
    v78 = v80;
    outlined init with copy of ReferenceResolutionClientProtocol?(v85, (uint64_t)v125, v80);
    outlined init with copy of ReferenceResolutionClientProtocol?(v67, v87, v80);
    v64 = v81;
    if (v81((uint64_t)v86, 1, v65) == 1)
      break;
    v88 = v119;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v86, v119, v80);
    v89 = v81(v87, 1, v65);
    v90 = v115;
    if (v89 == 1)
    {
      (*((void (**)(uint64_t, uint64_t))v126 + 1))(v88, v65);
      v64 = v81;
      goto LABEL_33;
    }
    v120(v115, v87, v65);
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
    v91 = dispatch thunk of static Equatable.== infix(_:_:)();
    v92 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v126 + 1);
    v92(v88, v65);
    v92((uint64_t)v90, v65);
    v76 = v121;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v86, v80);
    v67 = v123;
    outlined destroy of ReferenceResolutionClientProtocol?(v123, v80);
    v68 = v122;
    outlined destroy of ReferenceResolutionClientProtocol?(v122, v80);
    v64 = v81;
    v79 = Strong;
    if ((v91 & 1) != 0)
      goto LABEL_49;
LABEL_34:
    swift_release();
    v77 = v79;
    if (!v79)
      goto LABEL_43;
  }
  if (v81(v87, 1, v65) != 1)
  {
LABEL_33:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v125, &demangling cache variable for type metadata for (UUID?, UUID?));
    v67 = v123;
    outlined destroy of ReferenceResolutionClientProtocol?(v123, v80);
    v68 = v122;
    outlined destroy of ReferenceResolutionClientProtocol?(v122, v80);
    v79 = Strong;
    goto LABEL_34;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v125, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?(v123, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?(v122, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_49:
  swift_release();
  swift_release();
  v100 = (uint64_t (**)(char *, uint64_t))v126;
  if (one-time initialization token for executor != -1)
    swift_once();
  v101 = type metadata accessor for Logger();
  __swift_project_value_buffer(v101, (uint64_t)static Logger.executor);
  swift_retain_n();
  v102 = Logger.logObject.getter();
  v103 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v102, v103))
  {
    v104 = (uint8_t *)swift_slowAlloc();
    v105 = swift_slowAlloc();
    *(_DWORD *)v104 = 136315138;
    v128 = *(_QWORD *)(v77 + 16);
    v129 = v105;
    type metadata accessor for ActingFlowAgent();
    swift_retain();
    v100 = (uint64_t (**)(char *, uint64_t))v126;
    v106 = String.init<A>(describing:)();
    v128 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v107, (uint64_t *)&v129);
    v108 = v117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v102, v103, "Found flow agent to handle .returnToVoiceMode event: %s", v104, 0xCu);
    swift_arrayDestroy();
    v109 = v105;
    v65 = v118;
    MEMORY[0x1B5E44758](v109, -1, -1);
    MEMORY[0x1B5E44758](v104, -1, -1);

    (*(void (**)(char *, uint64_t))(v114 + 8))(v116, v113);
    v110 = v127;
  }
  else
  {
    swift_release_n();

    (*(void (**)(char *, uint64_t))(v114 + 8))(v116, v113);
    v110 = v127;
    v108 = v117;
  }
  type metadata accessor for UserInputResult();
  swift_storeEnumTagMultiPayload();
  v111 = *(_QWORD *)(v77 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)&v110[*(int *)(type metadata accessor for RequestContinuation(0) + 20)] = v111;
  return v100[1](v108, v65);
}

uint64_t closure #1 in EncoreEngine.handleExternal(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint8_t *v8;
  id v9;
  _QWORD *v11;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(void **)(v0 + 24);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 24);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    *(_QWORD *)(v0 + 16) = v7;
    v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v11 = v7;

    _os_log_impl(&dword_1B4BE6000, v4, v5, "[EncoreEngine] SnippetEvent: %@ completed.", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v11, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }
  else
  {

  }
  (*(void (**)(_QWORD))(v0 + 32))(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t EncoreEngine.push(parentNode:flow:insideEncoreEnvironment:)(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  _BYTE v12[40];

  outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)&v10, &demangling cache variable for type metadata for ActingFlow?);
  if (v11)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v10, (uint64_t)v12);
    if (a1)
      ActingFlowAgent.environment.getter();
    else
      swift_retain();
    type metadata accessor for SiriEnvironment();
    swift_allocObject();
    swift_retain();
    v6 = SiriEnvironment.init(parent:)();
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v12, (uint64_t)&v10);
    type metadata accessor for ActingFlowAgent();
    v7 = swift_allocObject();
    swift_retain();
    ActingFlowAgent.init(flow:environment:)(&v10, v6);
    if ((a3 & 1) != 0)
    {
      v5 = EncoreEngine.push(parentNode:flowAgent:)(a1, v7);
      swift_release();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    }
    else
    {
      v8 = ActingFlowAgent.environment.getter();
      MEMORY[0x1E0C80A78](v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Node<ActingFlowAgent>?);
      static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      return v10;
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v10, &demangling cache variable for type metadata for ActingFlow?);
    return 0;
  }
  return v5;
}

uint64_t closure #2 in EncoreEngine.handleExternal(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[14] = a6;
  v7[15] = a7;
  v7[12] = a4;
  v7[13] = a5;
  return swift_task_switch();
}

uint64_t closure #2 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 96);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol(v1, v0 + 16);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v10 = v6;
    *(_DWORD *)v5 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 16, v0 + 56);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    v7 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[EncoreEngine] Push flow: %s completed.", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  (*(void (**)(_QWORD))(v0 + 104))(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #3 in EncoreEngine.handleExternal(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t closure #3 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void (*v5)(void);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[EncoreEngine] EnsureReady completed.", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = *(void (**)(void))(v0 + 16);

  v5();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #4 in EncoreEngine.handleExternal(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[7] = type metadata accessor for SiriRequest(0);
  v7[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #4 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  outlined init with copy of ConversationHelperInput(v1, v2, type metadata accessor for SiriRequest);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 64);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v13 = v9;
    *(_DWORD *)v8 = 136315138;
    type metadata accessor for Input();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C588], MEMORY[0x1E0D9C5A8]);
    v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v7, type metadata accessor for SiriRequest);
    _os_log_impl(&dword_1B4BE6000, v4, v5, "[EncoreEngine] Accept request: %s completed.", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }
  else
  {
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 64), type metadata accessor for SiriRequest);
  }

  (*(void (**)(_QWORD))(v0 + 32))(*(_QWORD *)(v0 + 48));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #5 in EncoreEngine.handleExternal(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  v42 = a3;
  v43 = a4;
  v38 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v41 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for EncoreEngine.ActionOutcome(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v38 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
  v39 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v39 + 64);
  v16 = MEMORY[0x1E0C80A78](v14);
  v40 = (uint64_t)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v38 - v17;
  outlined init with copy of ConversationHelperInput(a1, (uint64_t)v13, type metadata accessor for EncoreEngine.ActionOutcome);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v19 = type metadata accessor for FlowUnhandledReason();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, v13, v19);
      type metadata accessor for ConversationCommitResult();
      goto LABEL_6;
    case 1u:
      v21 = type metadata accessor for PluginAction();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v18, v13, v21);
      type metadata accessor for ConversationCommitResult();
      goto LABEL_6;
    case 2u:
      v22 = *((_QWORD *)v13 + 2);
      v23 = *((_QWORD *)v13 + 3);
      *(_OWORD *)v18 = *(_OWORD *)v13;
      *((_QWORD *)v18 + 2) = v22;
      *((_QWORD *)v18 + 3) = v23;
      type metadata accessor for ConversationCommitResult();
LABEL_6:
      swift_storeEnumTagMultiPayload();
      goto LABEL_8;
    case 3u:
      *(_QWORD *)v18 = *(_QWORD *)v13;
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      v20 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)v18 = MEMORY[0x1E0DEE9D8];
      *((_QWORD *)v18 + 1) = v20;
      type metadata accessor for ConversationCommitResult();
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      outlined destroy of CamOutput((uint64_t)v13, type metadata accessor for EncoreEngine.ActionOutcome);
      break;
  }
  v24 = v8;
  dispatch thunk of SnippetManager.canSendAddViews.setter();
  if (one-time initialization token for TaskPriority != -1)
    swift_once();
  v25 = type metadata accessor for TaskPriority();
  v26 = __swift_project_value_buffer(v25, (uint64_t)static EncoreEngine.TaskPriority);
  v27 = *(_QWORD *)(v25 - 8);
  v28 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v41, v26, v25);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v27 + 56))(v28, 0, 1, v25);
  outlined init with copy of ConversationHelperInput(a1, (uint64_t)v11, type metadata accessor for EncoreEngine.ActionOutcome);
  v29 = v40;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v18, v40, &demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
  v30 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v31 = (v9 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = (uint64_t)v11;
  v33 = (*(unsigned __int8 *)(v39 + 80) + v31 + 16) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = 0;
  *(_QWORD *)(v34 + 24) = 0;
  outlined init with take of StringKeyedValue(v32, v34 + v30, type metadata accessor for EncoreEngine.ActionOutcome);
  v35 = (_QWORD *)(v34 + v31);
  v36 = v43;
  *v35 = v42;
  v35[1] = v36;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v29, v34 + v33, &demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
  swift_retain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v28, (uint64_t)&async function pointer to partial apply for closure #1 in closure #5 in EncoreEngine.handleExternal(event:), v34);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v28, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, &demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
}

uint64_t closure #1 in closure #5 in EncoreEngine.handleExternal(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  type metadata accessor for EncoreEngine.ActionOutcome(0);
  v7[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #5 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  outlined init with copy of ConversationHelperInput(v1, v2, type metadata accessor for EncoreEngine.ActionOutcome);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 56);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v13 = v9;
    *(_DWORD *)v8 = 136315138;
    EncoreEngine.ActionOutcome.description.getter();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamOutput(v7, type metadata accessor for EncoreEngine.ActionOutcome);
    _os_log_impl(&dword_1B4BE6000, v4, v5, "[EncoreEngine] Commit completed. outcome: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }
  else
  {
    outlined destroy of CamOutput(*(_QWORD *)(v0 + 56), type metadata accessor for EncoreEngine.ActionOutcome);
  }

  (*(void (**)(_QWORD))(v0 + 32))(*(_QWORD *)(v0 + 48));
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void EncoreEngine.action(mode:starting:context:completion:)(char a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  void (*v32)(_QWORD);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  _QWORD v39[5];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD);
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56[2];
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char v63;

  v51 = a5;
  v50 = a4;
  v41 = a3;
  v42 = type metadata accessor for EncoreEngine.ActionOutcome(0);
  MEMORY[0x1E0C80A78](v42);
  v43 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for InterruptionPolicy();
  v45 = *(_QWORD *)(v46 - 8);
  v8 = MEMORY[0x1E0C80A78](v46);
  v39[0] = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v44 = (char *)v39 - v10;
  v49 = type metadata accessor for FlowTraceEvent();
  v48 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v47 = (char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for ConversationContext();
  v39[2] = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v39[1] = v12;
  v39[4] = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v13);
  v39[3] = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  swift_retain_n();
  v52 = v16;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    *(_QWORD *)&v58 = swift_slowAlloc();
    *(_DWORD *)v19 = 136315394;
    if (a2)
    {
      outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(a2 + 16) + 56, (uint64_t)&v60);
    }
    else
    {
      v62 = 0;
      v60 = 0u;
      v61 = 0u;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow?);
    v22 = String.init<A>(describing:)();
    *(_QWORD *)&v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)&v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v19 + 12) = 2080;
    *(_QWORD *)&v60 = 0;
    *((_QWORD *)&v60 + 1) = 0xE000000000000000;
    __asm { BR              X10 }
  }
  swift_release_n();

  v63 = a1;
  if (!a2)
  {
    v20 = 0;
    goto LABEL_11;
  }
  swift_retain_n();
  v20 = 0;
  for (i = a2; ; i = v24)
  {
    v54 = v20;
    swift_retain_n();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc();
      *(_QWORD *)&v58 = swift_slowAlloc();
      *(_DWORD *)v27 = 136315394;
      outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(i + 16) + 56, (uint64_t)&v60);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      v28 = String.init<A>(describing:)();
      *(_QWORD *)&v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)&v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v27 + 12) = 2080;
      swift_beginAccess();
      *(_QWORD *)&v60 = 0;
      *((_QWORD *)&v60 + 1) = 0xE000000000000000;
      __asm { BR              X10 }
    }
    swift_release_n();

    swift_release();
    outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(i + 16) + 176, (uint64_t)&v58, &demangling cache variable for type metadata for Executable?);
    if (v59)
    {
      outlined init with take of ReferenceResolutionClientProtocol(&v58, (uint64_t)&v60);
      swift_beginAccess();
      __asm { BR              X10 }
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v58, &demangling cache variable for type metadata for Executable?);
    v30 = swift_allocObject();
    *(_BYTE *)(v30 + 16) = 0;
    v31 = (_QWORD *)swift_allocObject();
    v32 = v50;
    v31[2] = v30;
    v31[3] = v32;
    v31[4] = v51;
    v33 = *(_QWORD *)(i + 16);
    v34 = MEMORY[0x1E0C80A78](v31);
    v53 = &v39[-6];
    v35 = v55;
    v39[-4] = i;
    v39[-3] = v35;
    v39[-2] = partial apply for closure #2 in EncoreEngine.action(mode:starting:context:completion:);
    v39[-1] = v34;
    v36 = one-time initialization token for $conversationContext;
    swift_retain_n();
    swift_retain();
    if (v36 != -1)
      swift_once();
    *(_QWORD *)&v60 = v33;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EncoreConversationContext?);
    swift_task_localValuePush();
    type metadata accessor for SiriEnvironment();
    outlined init with copy of ReferenceResolutionClientProtocol(v33 + 56, (uint64_t)&v58);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentLocating);
    if (swift_dynamicCast())
    {
      outlined init with take of ReferenceResolutionClientProtocol(v56, (uint64_t)&v60);
      __swift_project_boxed_opaque_existential_1(&v60, *((uint64_t *)&v61 + 1));
      dispatch thunk of SiriEnvironmentLocating.siriEnvironment.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
    }
    else
    {
      v57 = 0;
      memset(v56, 0, sizeof(v56));
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v56, &demangling cache variable for type metadata for SiriEnvironmentLocating?);
      if (*(_QWORD *)(v33 + 232))
        swift_retain();
      else
        static SiriEnvironment.default.getter();
    }
    v20 = v54;
    static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
    swift_release();
    swift_task_localValuePop();
    swift_release_n();
    swift_release();
    swift_release();
    swift_beginAccess();
    v37 = *(_BYTE *)(v30 + 16);
    swift_release();
    if ((v37 & 1) != 0)
      break;
LABEL_11:
    v24 = (*(uint64_t (**)(void))(**(_QWORD **)(v55 + 24) + 216))();
    if (!v24)
    {
      v38 = (uint64_t)v43;
      swift_storeEnumTagMultiPayload();
      v50(v38);
      outlined destroy of CamOutput(v38, type metadata accessor for EncoreEngine.ActionOutcome);
      break;
    }
  }
  flushProcessWideSiriEnvironmentCache()();
}

uint64_t closure #6 in EncoreEngine.handleExternal(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[2] = a4;
  v5[3] = a5;
  v5[4] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
  v5[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #6 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v0;
  uint64_t *v1;
  void (*v2)(uint64_t *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *(uint64_t **)(v0 + 40);
  v2 = *(void (**)(uint64_t *))(v0 + 16);
  lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  v3 = swift_allocError();
  *v4 = 0xD00000000000001DLL;
  v4[1] = 0x80000001B4EFC400;
  *v1 = v3;
  swift_storeEnumTagMultiPayload();
  v2(v1);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v1, &demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall EventQueue.finish()()
{
  type metadata accessor for AsyncStream.Continuation();
  AsyncStream.Continuation.finish()();
}

uint64_t closure #1 in EncoreEngine.ensureReady()(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t Strong;
  BOOL v32;
  char *v33;
  int v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(_QWORD);
  uint64_t v77;
  Swift::String v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[3];
  __int128 v88;
  uint64_t v89;
  _QWORD v90[4];
  uint64_t v91;

  v3 = v2;
  v86 = a2;
  v80 = type metadata accessor for EncoreEngine.ActionOutcome(0);
  MEMORY[0x1E0C80A78](v80);
  v81 = (uint64_t *)((char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for InterruptionPolicy();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v84 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v79 - v10;
  v12 = *a1;
  if (one-time initialization token for executor != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
  swift_retain_n();
  v83 = v14;
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v82 = v6;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc();
    v85 = v7;
    v20 = v19;
    *(_DWORD *)v18 = 136315138;
    *(_QWORD *)&v88 = v19;
    v21 = *(_QWORD *)(*(_QWORD *)(v12 + 16) + 16) + 176;
    v79 = v12;
    outlined init with copy of ReferenceResolutionClientProtocol?(v21, (uint64_t)v90, &demangling cache variable for type metadata for Executable?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Executable?);
    v22 = String.init<A>(describing:)();
    v90[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)&v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v3 = v2;
    v12 = v79;
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v15, v16, "[EncoreEngine] Checking executable %s.", v18, 0xCu);
    swift_arrayDestroy();
    v24 = v20;
    v7 = v85;
    MEMORY[0x1B5E44758](v24, -1, -1);
    v25 = v18;
    v6 = v82;
    MEMORY[0x1B5E44758](v25, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 16) + 176, (uint64_t)&v88, &demangling cache variable for type metadata for Executable?);
  if (v89)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v88, (uint64_t)v90);
    v26 = *(_QWORD *)(v12 + 16);
    v27 = *(_QWORD *)(v86 + 24);
    v28 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 192);
    v29 = swift_retain();
    v30 = v28(v29);
    do
    {
      if (!v30)
      {
        swift_release();
LABEL_16:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
        return 1;
      }
      Strong = swift_weakLoadStrong();
      swift_release();
      v32 = v26 == v30;
      v30 = Strong;
    }
    while (!v32);
    swift_release();
    swift_release();
    __swift_project_boxed_opaque_existential_1(v90, v90[3]);
    dispatch thunk of Executable.interruptionPolicy.getter();
    v33 = v84;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v84, v11, v6);
    v34 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v33, v6);
    if (v34 == *MEMORY[0x1E0D9BE08])
    {
      v84 = v11;
      v85 = v7;
      swift_retain_n();
      v35 = v12;
      v36 = Logger.logObject.getter();
      v37 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc();
        v39 = swift_slowAlloc();
        *(_DWORD *)v38 = 136315138;
        v86 = v3;
        v87[0] = v39;
        v82 = v6;
        outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(*(_QWORD *)(v35 + 16) + 16) + 176, (uint64_t)&v88, &demangling cache variable for type metadata for Executable?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Executable?);
        v40 = String.init<A>(describing:)();
        *(_QWORD *)&v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v87);
        v6 = v82;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B4BE6000, v36, v37, "[EncoreEngine] Interruption: %s interrupted with .clear policy.", v38, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v39, -1, -1);
        MEMORY[0x1B5E44758](v38, -1, -1);
      }
      else
      {
        swift_release_n();
      }

      MEMORY[0x1B5E436B4](*(_QWORD *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_runningTask), MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
      (*(void (**)(_QWORD))(*(_QWORD *)v27 + 248))(*(_QWORD *)(v35 + 16));
      swift_release();
      v55 = v35 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion;
      v42 = 1;
      swift_beginAccess();
      v56 = *(void (**)(uint64_t))v55;
      *(_QWORD *)&v88 = 0;
      *((_QWORD *)&v88 + 1) = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(33);
      outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(*(_QWORD *)(v35 + 16) + 16) + 56, (uint64_t)&v88);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      v57 = String.init<A>(describing:)();
      v59 = v58;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v88 = v57;
      *((_QWORD *)&v88 + 1) = v59;
      v60._object = (void *)0x80000001B4EFC420;
      v60._countAndFlagsBits = 0xD00000000000001FLL;
      String.append(_:)(v60);
      v61 = v88;
      type metadata accessor for FlowAbort();
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type FlowAbort and conformance FlowAbort, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B138], MEMORY[0x1E0D9B140]);
      v62 = swift_allocError();
      MEMORY[0x1B5E3EA34](v61, *((_QWORD *)&v61 + 1));
      v63 = (uint64_t)v81;
      *v81 = v62;
      swift_storeEnumTagMultiPayload();
      v56(v63);
      swift_release();
      outlined destroy of CamOutput(v63, type metadata accessor for EncoreEngine.ActionOutcome);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v6);
      *(_QWORD *)v55 = destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
      *(_QWORD *)(v55 + 8) = 0;
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
      return v42;
    }
    if (v34 == *MEMORY[0x1E0D9BE00])
    {
      v44 = v12;
      v45 = v12 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion;
      swift_beginAccess();
      v46 = *(void (**)(uint64_t))v45;
      v47 = (uint64_t)v81;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      v46(v47);
      swift_release();
      outlined destroy of CamOutput(v47, type metadata accessor for EncoreEngine.ActionOutcome);
      *(_QWORD *)v45 = destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
      *(_QWORD *)(v45 + 8) = 0;
      swift_release();
      swift_retain_n();
      v48 = Logger.logObject.getter();
      v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v84 = v11;
        v50 = (uint8_t *)swift_slowAlloc();
        v51 = swift_slowAlloc();
        *(_DWORD *)v50 = 136315138;
        v91 = v51;
        v82 = v6;
        v52 = *(_QWORD *)(*(_QWORD *)(v44 + 16) + 16) + 176;
        v85 = v7;
        outlined init with copy of ReferenceResolutionClientProtocol?(v52, (uint64_t)&v88, &demangling cache variable for type metadata for Executable?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Executable?);
        v53 = String.init<A>(describing:)();
        *(_QWORD *)&v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B4BE6000, v48, v49, "[EncoreEngine] Interruption: %s continues to run.", v50, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v51, -1, -1);
        MEMORY[0x1B5E44758](v50, -1, -1);

        (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v82);
      }
      else
      {

        swift_release_n();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
      return 0;
    }
    if (v34 == *MEMORY[0x1E0D9BE10])
    {
      swift_retain_n();
      v64 = v12;
      v65 = Logger.logObject.getter();
      v66 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v65, v66))
      {
        v84 = v11;
        v67 = (uint8_t *)swift_slowAlloc();
        v68 = swift_slowAlloc();
        v83 = v68;
        *(_DWORD *)v67 = 136315138;
        v87[0] = v68;
        v69 = *(_QWORD *)(*(_QWORD *)(v64 + 16) + 16) + 176;
        v85 = v7;
        outlined init with copy of ReferenceResolutionClientProtocol?(v69, (uint64_t)&v88, &demangling cache variable for type metadata for Executable?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Executable?);
        v70 = String.init<A>(describing:)();
        *(_QWORD *)&v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, v87);
        v11 = v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v7 = v85;
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B4BE6000, v65, v66, "[EncoreEngine] Interruption: %s interrupted with .notify policy.", v67, 0xCu);
        v72 = v83;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v72, -1, -1);
        MEMORY[0x1B5E44758](v67, -1, -1);
      }
      else
      {
        swift_release_n();
      }

      v73 = *(_QWORD *)(v64 + 16);
      v74 = v64 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_context;
      v75 = v64 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion;
      swift_beginAccess();
      v76 = *(void (**)(_QWORD))v75;
      v77 = *(_QWORD *)(v75 + 8);
      swift_retain();
      EncoreEngine.action(mode:starting:context:completion:)(2, v73, v74, v76, v77);
      swift_release();
      MEMORY[0x1B5E436B4](*(_QWORD *)(v64 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_runningTask), MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      goto LABEL_16;
    }
    *(_QWORD *)&v88 = 0;
    *((_QWORD *)&v88 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v78._countAndFlagsBits = 0xD00000000000002CLL;
    v78._object = (void *)0x80000001B4EFC310;
    String.append(_:)(v78);
    _print_unlocked<A, B>(_:_:)();
    result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v88, *((unint64_t *)&v88 + 1), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Encore/EncoreEngine.swift", 94, 2, 435);
    __break(1u);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v88, &demangling cache variable for type metadata for Executable?);
    return 1;
  }
  return result;
}

uint64_t closure #1 in EncoreEngine.discover(request:)(_QWORD *a1, uint64_t a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 *v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t result;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  _BYTE v45[40];
  uint64_t v46;
  unint64_t v47;

  v42 = a4;
  v43 = a5;
  v44 = a3;
  v40 = type metadata accessor for AcceptanceType();
  v38 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v41 = (__int128 *)((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = type metadata accessor for FlowTraceEvent();
  v37 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Acceptance();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v14 = a2 + *(int *)(type metadata accessor for SiriRequest(0) + 20);
  v15 = v11;
  dispatch thunk of InputAccepting.accept(input:)();
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flow: InputAccepting, input: Input, result: Acceptance));
  v17 = &v9[*(int *)(v16 + 48)];
  v18 = &v9[*(int *)(v16 + 64)];
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)v9);
  v19 = type metadata accessor for Input();
  v20 = v14;
  v21 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v20, v19);
  v22 = v18;
  v23 = v10;
  v24 = v40;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v22, v13, v23);
  v25 = v37;
  v26 = v39;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v9, *MEMORY[0x1E0D9AFC8], v39);
  static FlowTrace.trace(event:)();
  v27 = v9;
  v28 = v41;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v26);
  Acceptance.type.getter();
  v29 = (*(uint64_t (**)(__int128 *, uint64_t))(v21 + 88))(v28, v24);
  if (v29 == *MEMORY[0x1E0D9B820])
  {
    (*(void (**)(__int128 *, uint64_t))(v21 + 96))(v28, v24);
    outlined init with take of ReferenceResolutionClientProtocol(v28, (uint64_t)&v46);
    v30 = v42;
    (*(void (**)(_QWORD *))(**(_QWORD **)(v43 + 24) + 232))(v42);
    swift_release();
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v46, (uint64_t)v45);
    v31 = EncoreEngine.push(parentNode:flow:insideEncoreEnvironment:)(v30, (uint64_t)v45, 1);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v45, &demangling cache variable for type metadata for ActingFlow?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v23);
    *v44 = v31;
    return swift_release();
  }
  v32 = v42;
  v33 = v44;
  if (v29 == *MEMORY[0x1E0D9B828])
  {
    (*(void (**)(__int128 *, uint64_t))(v21 + 96))(v28, v24);
    outlined init with take of ReferenceResolutionClientProtocol(v28, (uint64_t)&v46);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v46, (uint64_t)v45);
    v34 = EncoreEngine.push(parentNode:flow:insideEncoreEnvironment:)(v32, (uint64_t)v45, 1);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v45, &demangling cache variable for type metadata for ActingFlow?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v23);
    *v33 = v34;
    return swift_release();
  }
  if (v29 == *MEMORY[0x1E0D9B818])
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v23);
    *v33 = (uint64_t)v32;
    swift_retain();
    return swift_release();
  }
  if (v29 == *MEMORY[0x1E0D9B810])
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v13, v23);
  v46 = 0;
  v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  v36._object = (void *)0x80000001B4EFC2E0;
  v36._countAndFlagsBits = 0xD000000000000028;
  String.append(_:)(v36);
  _print_unlocked<A, B>(_:_:)();
  result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Encore/EncoreEngine.swift", 94, 2, 463);
  __break(1u);
  return result;
}

uint64_t closure #1 in EncoreEngine.discover(event:)()
{
  uint64_t v0;

  v0 = one-time initialization token for $conversationContext;
  swift_retain();
  if (v0 != -1)
    swift_once();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EncoreConversationContext?);
  swift_task_localValuePush();
  type metadata accessor for SiriEnvironment();
  ActingFlowAgent.environment.getter();
  static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
  swift_release();
  swift_task_localValuePop();
  return swift_release();
}

uint64_t closure #1 in closure #1 in EncoreEngine.discover(event:)(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t (*v19)(_QWORD);
  uint64_t v20;

  if (one-time initialization token for executor != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  swift_unknownObjectRetain_n();
  v7 = a3;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v19 = a4;
    v10 = swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v20 = v18;
    *(_DWORD *)v10 = 136315394;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetEventHandling);
    v12 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2112;
    v14 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v11 = v7;

    _os_log_impl(&dword_1B4BE6000, v8, v9, "[EncoreEngine] Passing snippet event to %s. event: %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v11, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v18, -1, -1);
    v15 = v10;
    a4 = v19;
    MEMORY[0x1B5E44758](v15, -1, -1);

  }
  else
  {

    v16 = swift_unknownObjectRelease_n();
  }
  return a4(v16);
}

uint64_t closure #1 in EncoreEngine.action(mode:starting:context:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[27] = a6;
  v7[28] = a7;
  v7[25] = a4;
  v7[26] = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v7[29] = v8;
  v7[30] = *(_QWORD *)(v8 - 8);
  v7[31] = swift_task_alloc();
  v7[32] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v7[33] = swift_task_alloc();
  v7[34] = swift_task_alloc();
  v9 = type metadata accessor for FlowTraceEvent();
  v7[35] = v9;
  v7[36] = *(_QWORD *)(v9 - 8);
  v7[37] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in EncoreEngine.action(mode:starting:context:completion:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v17[14];

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = v0[25];
  v2 = type metadata accessor for Logger();
  v0[38] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol(v1, (uint64_t)(v0 + 2));
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    v17[0] = v6;
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Executable);
    v7 = String.init<A>(describing:)();
    v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[EncoreEngine] Executing flow: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  }

  v9 = v0[27];
  v10 = v0[25];
  v11 = *(_QWORD *)(v0[26] + 16);
  v0[39] = v11;
  v12 = swift_task_alloc();
  v0[40] = v12;
  *(_QWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v9;
  v13 = one-time initialization token for $conversationContext;
  swift_retain();
  if (v13 != -1)
    swift_once();
  v0[23] = v11;
  v14 = (_QWORD *)swift_task_alloc();
  v0[41] = v14;
  v14[2] = v11;
  v14[3] = &async function pointer to partial apply for closure #1 in closure #1 in EncoreEngine.action(mode:starting:context:completion:);
  v14[4] = v12;
  swift_retain();
  v15 = (_QWORD *)swift_task_alloc();
  v0[42] = v15;
  *v15 = v0;
  v15[1] = closure #1 in EncoreEngine.action(mode:starting:context:completion:);
  v17[12] = 32;
  v17[13] = MEMORY[0x1E0DEE9C0] + 8;
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)();
}

{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 280);
  swift_release();
  swift_task_dealloc();
  outlined init with copy of ReferenceResolutionClientProtocol(v1 + 56, v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, *MEMORY[0x1E0D9AFE8], v4);
  static FlowTrace.trace(event:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v0 + 200), v0 + 96);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v12 = v9;
      *(_DWORD *)v8 = 136315138;
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 96, v0 + 136);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Executable);
      v10 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(v0 + 96);
      _os_log_impl(&dword_1B4BE6000, v6, v7, "[EncoreEngine] Executing flow: %s completed.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v9, -1, -1);
      MEMORY[0x1B5E44758](v8, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(v0 + 96);
    }

    if (one-time initialization token for shared != -1)
      swift_once();
    return swift_task_switch();
  }
}

{
  return swift_release();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v0[33];
  v1 = (_QWORD *)v0[34];
  v3 = v0[31];
  v4 = v0[29];
  v5 = v0[30];
  *v1 = v0[39];
  swift_storeEnumTagMultiPayload();
  outlined init with copy of ConversationHelperInput((uint64_t)v1, v2, type metadata accessor for EncoreEngine.EngineEvent);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  outlined destroy of CamOutput((uint64_t)v1, type metadata accessor for EncoreEngine.EngineEvent);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in EncoreEngine.action(mode:starting:context:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a2;
  v3[3] = a3;
  v4 = type metadata accessor for ExecutionContext();
  v3[4] = v4;
  v3[5] = *(_QWORD *)(v4 - 8);
  v3[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in EncoreEngine.action(mode:starting:context:completion:)()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24));
  ConversationContext.executionContext.getter();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = closure #1 in closure #1 in EncoreEngine.action(mode:starting:context:completion:);
  return dispatch thunk of Executable.execute(with:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 48);
  v2 = *(_QWORD *)(*v0 + 32);
  v3 = *(_QWORD *)(*v0 + 40);
  v5 = *v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t closure #3 in EncoreEngine.action(mode:starting:context:completion:)(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t (*v34)(void);
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  int v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  _QWORD *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  void (*v67)(void);
  void (*v68)(void);
  void (*v69)(void);
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void (*v78)(void);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(void);
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  void (*v92)(void);
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t result;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  NSObject *v122;
  os_log_type_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void (*v128)(char *, uint64_t);
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  NSObject *v141;
  os_log_type_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  Swift::String v156;
  char *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t, uint64_t, uint64_t);
  uint64_t v169;
  uint64_t v170;
  void (*v171)(uint64_t);
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  _OWORD v182[2];
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;

  v170 = a4;
  v171 = a3;
  v6 = type metadata accessor for PluginAction();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v158 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v162 = (char *)&v158 - v11;
  v166 = type metadata accessor for FlowUnhandledReason();
  v165 = *(_QWORD *)(v166 - 8);
  MEMORY[0x1E0C80A78](v166);
  v164 = (char *)&v158 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = type metadata accessor for EncoreEngine.ActionOutcome(0);
  MEMORY[0x1E0C80A78](v169);
  v172 = (uint64_t *)((char *)&v158 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v176 = (_QWORD *)type metadata accessor for FlowActionType();
  v175 = *(v176 - 1);
  v14 = MEMORY[0x1E0C80A78](v176);
  v159 = (char *)&v158 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v158 - v16;
  v179 = type metadata accessor for FlowTraceEvent();
  v174 = *(_QWORD *)(v179 - 8);
  MEMORY[0x1E0C80A78](v179);
  v178 = (uint64_t)&v158 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
  swift_retain_n();
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  v23 = os_log_type_enabled(v21, v22);
  v181 = a1;
  v180 = a2;
  v163 = v6;
  v161 = v7;
  v160 = v10;
  if (v23)
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v25 = swift_slowAlloc();
    v186 = v25;
    *(_DWORD *)v24 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol(v181[2] + 56, (uint64_t)&v189);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    v26 = String.init<A>(describing:)();
    v189 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v186);
    a2 = v180;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a1 = v181;
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v21, v22, "[EncoreEngine] Calling action on node %s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v25, -1, -1);
    MEMORY[0x1B5E44758](v24, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  swift_retain_n();
  v177 = v20;
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    *(_DWORD *)v30 = 136315138;
    v189 = v31;
    v32 = (*(uint64_t (**)(uint64_t (*)(_QWORD *), _QWORD))(**(_QWORD **)(a2 + 24) + 304))(closure #1 in OrderedForest<A>.debugDescription(), 0);
    v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v189);
    a1 = v181;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v28, v29, "[EncoreEngine] Current Flow Tree:\n%s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v31, -1, -1);
    MEMORY[0x1B5E44758](v30, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v34 = *(uint64_t (**)(void))(*a1 + 128);
  v35 = v34();
  v36 = a1[2];
  v37 = a1;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v36 + 56), *(_QWORD *)(v36 + 80));
  dispatch thunk of ActingFlow.action.getter();
  v38 = v178;
  v39 = v178 + 40;
  v173 = v36 + 56;
  outlined init with copy of ReferenceResolutionClientProtocol(v36 + 56, v178);
  v167 = v39;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v189, v38 + 40);
  v40 = *MEMORY[0x1E0D9AFD0];
  v41 = v174;
  v42 = v179;
  v168 = *(void (**)(uint64_t, uint64_t, uint64_t))(v174 + 104);
  v168(v38, v40, v179);
  static FlowTrace.trace(event:)();
  v43 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v43(v38, v42);
  __swift_project_boxed_opaque_existential_1(&v189, v190);
  dispatch thunk of FlowAction.type.getter();
  v44 = v175;
  v45 = v176;
  v46 = (*(uint64_t (**)(char *, _QWORD *))(v175 + 88))(v17, v176);
  if (v46 == *MEMORY[0x1E0D9AFA0])
  {
    (*(void (**)(char *, _QWORD *))(v44 + 96))(v17, v45);
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)v17, (uint64_t)&v186);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v186, (uint64_t)&v183);
    swift_retain_n();
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = swift_slowAlloc();
      v50 = swift_slowAlloc();
      v191 = v50;
      *(_DWORD *)v49 = 136315394;
      outlined init with copy of ReferenceResolutionClientProtocol(v173, (uint64_t)v182);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      v51 = String.init<A>(describing:)();
      *(_QWORD *)&v182[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v49 + 12) = 2080;
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v183, (uint64_t)v182);
      v53 = String.init<A>(describing:)();
      *(_QWORD *)&v182[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, &v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v183);
      _os_log_impl(&dword_1B4BE6000, v47, v48, "[EncoreEngine] Delegate to %s child: %s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      v37 = v181;
      MEMORY[0x1B5E44758](v50, -1, -1);
      MEMORY[0x1B5E44758](v49, -1, -1);
    }
    else
    {
      swift_release_n();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v183);
    }

    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v186, (uint64_t)&v183);
    EncoreEngine.push(parentNode:flow:insideEncoreEnvironment:)(v37, (uint64_t)&v183, 1);
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v183, &demangling cache variable for type metadata for ActingFlow?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v186);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v189);
  }
  if (v46 == *MEMORY[0x1E0D9AF98])
  {
    v174 = v35;
    (*(void (**)(char *, _QWORD *))(v44 + 96))(v17, v45);
    v55 = v17[72];
    outlined init with take of Any(v17, v182);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)(v17 + 32), (uint64_t)&v186, &demangling cache variable for type metadata for ActingFlow?);
    v56 = v181;
    swift_retain_n();
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v57, v58))
    {
      LODWORD(v176) = v55;
      v59 = swift_slowAlloc();
      v175 = swift_slowAlloc();
      v191 = v175;
      *(_DWORD *)v59 = 136315394;
      outlined init with copy of ReferenceResolutionClientProtocol(v173, (uint64_t)&v183);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      v60 = String.init<A>(describing:)();
      *(_QWORD *)&v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v62 = swift_release_n();
      *(_WORD *)(v59 + 12) = 2080;
      v63 = ((uint64_t (*)(uint64_t))v34)(v62);
      if (v63)
      {
        v64 = *(_QWORD *)(v63 + 16);
        swift_retain();
        swift_release();
        outlined init with copy of ReferenceResolutionClientProtocol(v64 + 56, (uint64_t)&v183);
        swift_release();
      }
      else
      {
        v185 = 0;
        v183 = 0u;
        v184 = 0u;
      }
      v81 = v180;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow?);
      v99 = String.init<A>(describing:)();
      *(_QWORD *)&v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, &v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v101 = v181;
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v57, v58, "[EncoreEngine] Conclude %s parent: %s", (uint8_t *)v59, 0x16u);
      v102 = v175;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v102, -1, -1);
      v103 = v59;
      v56 = v101;
      MEMORY[0x1B5E44758](v103, -1, -1);

      v55 = (int)v176;
    }
    else
    {
      swift_release_n();

      v81 = v180;
    }
    (*(void (**)(_QWORD *))(**(_QWORD **)(v81 + 24) + 240))(v56);
    swift_release();
    outlined init with copy of ReferenceResolutionClientProtocol?(v36 + 96, (uint64_t)&v183, &demangling cache variable for type metadata for LifeCycleModifier?);
    v104 = v174;
    if (*((_QWORD *)&v184 + 1))
    {
      __swift_project_boxed_opaque_existential_1(&v183, *((uint64_t *)&v184 + 1));
      if (v104)
      {
        v105 = *(_QWORD *)(v104 + 16);
        swift_retain();
      }
      else
      {
        v105 = 0;
      }
      LifeCycleModifier.onDetached(value:parentFlowContext:)((uint64_t)v182, v105);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v183);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v183, &demangling cache variable for type metadata for LifeCycleModifier?);
    }
    v106 = v178;
    outlined init with copy of ReferenceResolutionClientProtocol(v173, v178);
    outlined init with copy of Any((uint64_t)v182, v167);
    v107 = v179;
    v168(v106, *MEMORY[0x1E0D9AFE0], v179);
    static FlowTrace.trace(event:)();
    v43(v106, v107);
    EncoreEngine.push(parentNode:flow:insideEncoreEnvironment:)(0, (uint64_t)&v186, 1);
    swift_release();
    if (v55)
    {
      swift_retain_n();
      v108 = Logger.logObject.getter();
      v109 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v108, v109))
      {
        v110 = (uint8_t *)swift_slowAlloc();
        v111 = swift_slowAlloc();
        v191 = v111;
        *(_DWORD *)v110 = 136315138;
        outlined init with copy of ReferenceResolutionClientProtocol(v173, (uint64_t)&v183);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
        v112 = String.init<A>(describing:)();
        *(_QWORD *)&v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v113, &v191);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B4BE6000, v108, v109, "[EncoreEngine] Conclude and yield %s", v110, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v111, -1, -1);
        MEMORY[0x1B5E44758](v110, -1, -1);
      }
      else
      {
        swift_release_n();
      }

      v114 = (uint64_t)v172;
      swift_storeEnumTagMultiPayload();
      v171(v114);
      swift_release();
      outlined destroy of CamOutput(v114, type metadata accessor for EncoreEngine.ActionOutcome);
    }
    else
    {
      swift_release();
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v186, &demangling cache variable for type metadata for ActingFlow?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v182);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v189);
  }
  v65 = v181;
  v66 = v180;
  if (v46 == *MEMORY[0x1E0D9AF80])
  {
    (*(void (**)(char *, _QWORD *))(v44 + 96))(v17, v45);
    v67 = *(void (**)(void))v17;
    swift_retain();
    v68 = v67;
    swift_retain();
    v69 = v67;
    v70 = Logger.logObject.getter();
    v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = swift_slowAlloc();
      v73 = swift_slowAlloc();
      v174 = v35;
      v74 = (_QWORD *)v73;
      v75 = swift_slowAlloc();
      *(_QWORD *)&v183 = v75;
      *(_DWORD *)v72 = 136315394;
      outlined init with copy of ReferenceResolutionClientProtocol(v173, (uint64_t)&v186);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      v76 = String.init<A>(describing:)();
      v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, (uint64_t *)&v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v72 + 12) = 2112;
      v78 = v67;
      v79 = _swift_stdlib_bridgeErrorToNSError();
      v186 = v79;
      v66 = v180;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v74 = v79;

      _os_log_impl(&dword_1B4BE6000, v70, v71, "[EncoreEngine] Abort flow: %s reason: %@", (uint8_t *)v72, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v74, -1, -1);
      swift_arrayDestroy();
      v80 = v75;
      v65 = v181;
      MEMORY[0x1B5E44758](v80, -1, -1);
      MEMORY[0x1B5E44758](v72, -1, -1);
    }
    else
    {
      swift_release_n();

    }
    (*(void (**)(_QWORD *))(**(_QWORD **)(v66 + 24) + 248))(v65);
    swift_release();
    v91 = v172;
    *v172 = (uint64_t)v67;
    swift_storeEnumTagMultiPayload();
    v92 = v67;
    v171((uint64_t)v91);

LABEL_47:
    swift_release();
    v115 = (uint64_t)v91;
LABEL_48:
    outlined destroy of CamOutput(v115, type metadata accessor for EncoreEngine.ActionOutcome);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v189);
  }
  if (v46 == *MEMORY[0x1E0D9AF88])
  {
    (*(void (**)(char *, _QWORD *))(v44 + 96))(v17, v45);
    v83 = *(void (**)(void))v17;
    v82 = *((_QWORD *)v17 + 1);
    swift_retain_n();
    v84 = Logger.logObject.getter();
    v85 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v84, v85))
    {
      v179 = (uint64_t)v83;
      v86 = (uint8_t *)swift_slowAlloc();
      v87 = swift_slowAlloc();
      v180 = v82;
      v88 = v87;
      *(_QWORD *)&v183 = v87;
      *(_DWORD *)v86 = 136315138;
      outlined init with copy of ReferenceResolutionClientProtocol(v173, (uint64_t)&v186);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      v89 = String.init<A>(describing:)();
      v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, (uint64_t *)&v183);
      v83 = (void (*)(void))v179;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v84, v85, "[EncoreEngine] Yield %s", v86, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v88, -1, -1);
      MEMORY[0x1B5E44758](v86, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v83();
    v91 = v172;
    swift_storeEnumTagMultiPayload();
    v171((uint64_t)v91);
    swift_release();
    goto LABEL_47;
  }
  if (v46 == *MEMORY[0x1E0D9AFB0])
  {
    (*(void (**)(char *, _QWORD *))(v44 + 96))(v17, v45);
    (*(void (**)(char *, char *, uint64_t))(v165 + 32))(v164, v17, v166);
    swift_retain_n();
    v93 = Logger.logObject.getter();
    v94 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v93, v94))
    {
      v95 = (uint8_t *)swift_slowAlloc();
      v96 = swift_slowAlloc();
      *(_QWORD *)&v183 = v96;
      *(_DWORD *)v95 = 136315138;
      outlined init with copy of ReferenceResolutionClientProtocol(v173, (uint64_t)&v186);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      v97 = String.init<A>(describing:)();
      v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, (uint64_t *)&v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v93, v94, "[EncoreEngine] Unhandled flow: %s", v95, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v96, -1, -1);
      MEMORY[0x1B5E44758](v95, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v133 = v165;
    v134 = (uint64_t)v172;
    v135 = v164;
    v136 = v166;
    (*(void (**)(uint64_t *, char *, uint64_t))(v165 + 16))(v172, v164, v166);
    swift_storeEnumTagMultiPayload();
    v171(v134);
    swift_release();
    outlined destroy of CamOutput(v134, type metadata accessor for EncoreEngine.ActionOutcome);
    (*(void (**)(char *, uint64_t))(v133 + 8))(v135, v136);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v189);
  }
  if (v46 == *MEMORY[0x1E0D9AFA8])
  {
    v174 = v35;
    (*(void (**)(char *, _QWORD *))(v44 + 96))(v17, v45);
    v117 = &v17[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (exitValue: Any, nextPluginAction: PluginAction))
                       + 48)];
    outlined init with take of Any(v17, &v183);
    v118 = v161;
    v119 = v162;
    v120 = v163;
    (*(void (**)(char *, char *, uint64_t))(v161 + 32))(v162, v117, v163);
    v121 = v160;
    v176 = *(_QWORD **)(v118 + 16);
    ((void (*)(char *, char *, uint64_t))v176)(v160, v119, v120);
    swift_retain_n();
    v122 = Logger.logObject.getter();
    v123 = static os_log_type_t.debug.getter();
    v124 = v123;
    if (os_log_type_enabled(v122, v123))
    {
      v125 = swift_slowAlloc();
      v177 = swift_slowAlloc();
      *(_QWORD *)&v182[0] = v177;
      *(_DWORD *)v125 = 136315394;
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9B770], MEMORY[0x1E0D9B788]);
      LODWORD(v175) = v124;
      v126 = dispatch thunk of CustomStringConvertible.description.getter();
      v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v126, v127, (uint64_t *)v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v128 = *(void (**)(char *, uint64_t))(v161 + 8);
      v128(v121, v120);
      *(_WORD *)(v125 + 12) = 2080;
      outlined init with copy of ReferenceResolutionClientProtocol(v173, (uint64_t)&v186);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      v129 = String.init<A>(describing:)();
      v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v129, v130, (uint64_t *)v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v122, (os_log_type_t)v175, "[EncoreEngine] Redirect nextPluginAction: %s flow: %s", (uint8_t *)v125, 0x16u);
      v131 = v177;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v131, -1, -1);
      v132 = v125;
      v65 = v181;
      MEMORY[0x1B5E44758](v132, -1, -1);
    }
    else
    {
      v128 = *(void (**)(char *, uint64_t))(v118 + 8);
      v128(v121, v120);
      swift_release_n();
    }

    v148 = v174;
    (*(void (**)(_QWORD *))(**(_QWORD **)(v66 + 24) + 240))(v65);
    swift_release();
    outlined init with copy of ReferenceResolutionClientProtocol?(v36 + 96, (uint64_t)&v186, &demangling cache variable for type metadata for LifeCycleModifier?);
    if (v188)
    {
      __swift_project_boxed_opaque_existential_1(&v186, v188);
      if (v148)
      {
        v149 = *(_QWORD *)(v148 + 16);
        swift_retain();
      }
      else
      {
        v149 = 0;
      }
      LifeCycleModifier.onDetached(value:parentFlowContext:)((uint64_t)&v183, v149);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v186);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v186, &demangling cache variable for type metadata for LifeCycleModifier?);
    }
    v151 = v178;
    outlined init with copy of ReferenceResolutionClientProtocol(v173, v178);
    outlined init with copy of Any((uint64_t)&v183, v167);
    v152 = v179;
    v168(v151, *MEMORY[0x1E0D9AFE0], v179);
    static FlowTrace.trace(event:)();
    v43(v151, v152);
    v153 = (uint64_t)v172;
    v154 = v162;
    v155 = v163;
    ((void (*)(uint64_t *, char *, uint64_t))v176)(v172, v162, v163);
    swift_storeEnumTagMultiPayload();
    v171(v153);
    swift_release();
    outlined destroy of CamOutput(v153, type metadata accessor for EncoreEngine.ActionOutcome);
    v128(v154, v155);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v183);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v189);
  }
  if (v46 == *MEMORY[0x1E0D9AF90])
  {
    (*(void (**)(char *, _QWORD *))(v44 + 96))(v17, v45);
    v138 = *(_QWORD *)v17;
    v137 = *((_QWORD *)v17 + 1);
    v140 = *((_QWORD *)v17 + 2);
    v139 = *((_QWORD *)v17 + 3);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v141 = Logger.logObject.getter();
    v142 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v141, v142))
    {
      v143 = swift_slowAlloc();
      v174 = v35;
      v144 = v143;
      v145 = swift_slowAlloc();
      *(_QWORD *)&v183 = v145;
      *(_DWORD *)v144 = 136315650;
      v180 = v140;
      swift_bridgeObjectRetain();
      v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v138, v137, (uint64_t *)&v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v179 = v138;
      *(_WORD *)(v144 + 12) = 2080;
      swift_bridgeObjectRetain();
      v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v180, v139, (uint64_t *)&v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v144 + 22) = 2080;
      outlined init with copy of ReferenceResolutionClientProtocol(v173, (uint64_t)&v186);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      v146 = String.init<A>(describing:)();
      v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v146, v147, (uint64_t *)&v183);
      v138 = v179;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v140 = v180;
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v141, v142, "[EncoreEngine] Reparse requestID: %s userID: %s flow: %s", (uint8_t *)v144, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v145, -1, -1);
      MEMORY[0x1B5E44758](v144, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
    }

    v150 = v172;
    *v172 = v138;
    v150[1] = v137;
    v150[2] = v140;
    v150[3] = v139;
    swift_storeEnumTagMultiPayload();
    v171((uint64_t)v150);
    swift_release();
    v115 = (uint64_t)v150;
    goto LABEL_48;
  }
  v186 = 0;
  v187 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v156._object = (void *)0x80000001B4EFC3D0;
  v156._countAndFlagsBits = 0xD000000000000029;
  String.append(_:)(v156);
  __swift_project_boxed_opaque_existential_1(&v189, v190);
  v157 = v159;
  dispatch thunk of FlowAction.type.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, _QWORD *))(v44 + 8))(v157, v45);
  result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v186, v187, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Encore/EncoreEngine.swift", 94, 2, 608);
  __break(1u);
  return result;
}

uint64_t LifeCycleModifier.onDetached(value:parentFlowContext:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (!a2)
    return dispatch thunk of LifeCycleModifier.onDetached(value:)();
  MEMORY[0x1E0C80A78](a1);
  v2 = one-time initialization token for $conversationContext;
  swift_retain_n();
  if (v2 != -1)
    swift_once();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EncoreConversationContext?);
  swift_task_localValuePush();
  type metadata accessor for SiriEnvironment();
  ActingFlowAgent.environment.getter();
  static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
  swift_release();
  swift_task_localValuePop();
  return swift_release_n();
}

uint64_t EncoreEngine.push(parentNode:flowAgent:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void **p_cache;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t result;
  Swift::String v77;
  _BYTE v78[12];
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 *v83;
  _BYTE *v84;
  __int128 *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v3 = v2;
  v6 = (__int128 *)type metadata accessor for FlowTraceEvent();
  v7 = (__int128 *)*((_QWORD *)v6 - 1);
  MEMORY[0x1E0C80A78](v6);
  v86 = &v78[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentOption?);
  MEMORY[0x1E0C80A78](v9);
  v11 = &v78[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for AttachmentOption();
  v87 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (uint64_t *)&v78[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v13);
  p_cache = (void **)(&OBJC_METACLASS____TtC14SiriKitRuntime14RealCamWrapper + 16);
  v85 = v7;
  if (!a1)
    goto LABEL_37;
  v84 = &v78[-v16];
  v82 = v3;
  outlined init with copy of ReferenceResolutionClientProtocol?(a2 + 96, (uint64_t)&v89, &demangling cache variable for type metadata for LifeCycleModifier?);
  if (*((_QWORD *)&v90 + 1))
  {
    __swift_project_boxed_opaque_existential_1(&v89, *((uint64_t *)&v90 + 1));
    swift_retain();
    dispatch thunk of LifeCycleModifier.attachmentOption.getter();
    v18 = v87;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v11, 0, 1, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v18 + 48))(v11, 1, v12) != 1)
    {
      v19 = v84;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v84, v11, v12);
      goto LABEL_7;
    }
  }
  else
  {
    swift_retain();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v89, &demangling cache variable for type metadata for LifeCycleModifier?);
    v18 = v87;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v87 + 56))(v11, 1, 1, v12);
  }
  v19 = v84;
  static AttachmentOption.Default.getter();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for AttachmentOption?);
LABEL_7:
  (*(void (**)(uint64_t *, _BYTE *, uint64_t))(v18 + 16))(v15, v19, v12);
  v20 = (*(uint64_t (**)(uint64_t *, uint64_t))(v18 + 88))(v15, v12);
  v21 = *MEMORY[0x1E0D9BC00];
  v81 = v12;
  if (v20 != v21)
  {
    if (v20 != *MEMORY[0x1E0D9BBF8])
    {
      if (v20 != *MEMORY[0x1E0D9BBF0])
      {
        *(_QWORD *)&v89 = 0;
        *((_QWORD *)&v89 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(44);
        v77._object = (void *)0x80000001B4EFC2B0;
        v77._countAndFlagsBits = 0xD00000000000002ALL;
        String.append(_:)(v77);
        _print_unlocked<A, B>(_:_:)();
        result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v89, *((unint64_t *)&v89 + 1), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Encore/EncoreEngine.swift", 94, 2, 659);
        __break(1u);
        return result;
      }
      if (one-time initialization token for executor != -1)
        swift_once();
      v56 = type metadata accessor for Logger();
      __swift_project_value_buffer(v56, (uint64_t)static Logger.executor);
      swift_retain_n();
      swift_retain_n();
      v57 = Logger.logObject.getter();
      v58 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v57, v58))
      {
        v59 = swift_slowAlloc();
        v80 = swift_slowAlloc();
        v88 = v80;
        *(_DWORD *)v59 = 136315394;
        outlined init with copy of ReferenceResolutionClientProtocol(a2 + 16, (uint64_t)&v89);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
        v60 = String.init<A>(describing:)();
        *(_QWORD *)&v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v59 + 12) = 2080;
        outlined init with copy of ReferenceResolutionClientProtocol(a1[2] + 56, (uint64_t)&v89);
        v62 = String.init<A>(describing:)();
        *(_QWORD *)&v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &v88);
        v7 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v57, v58, "[EncoreEngine] Attachment option: detachNone flow: %s parent: %s", (uint8_t *)v59, 0x16u);
        v64 = v80;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v64, -1, -1);
        MEMORY[0x1B5E44758](v59, -1, -1);
        swift_release();

        (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v84, v81);
      }
      else
      {
        swift_release_n();
        swift_release_n();

        (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v19, v81);
      }
      v3 = v82;
      goto LABEL_36;
    }
    if (one-time initialization token for executor == -1)
      goto LABEL_14;
    goto LABEL_50;
  }
  (*(void (**)(uint64_t *, uint64_t))(v18 + 96))(v15, v12);
  v22 = *v15;
  if (one-time initialization token for executor != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  v26 = v25;
  v27 = os_log_type_enabled(v24, v25);
  v83 = v6;
  if (v27)
  {
    v28 = swift_slowAlloc();
    v79 = v26;
    v29 = v28;
    v80 = swift_slowAlloc();
    v88 = v80;
    *(_DWORD *)v29 = 136315650;
    swift_bridgeObjectRetain();
    v30 = Set.description.getter();
    v32 = v31;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    v6 = &v89;
    outlined init with copy of ReferenceResolutionClientProtocol(a2 + 16, (uint64_t)&v89);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    v33 = String.init<A>(describing:)();
    *(_QWORD *)&v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 22) = 2080;
    v7 = &v89;
    outlined init with copy of ReferenceResolutionClientProtocol(a1[2] + 56, (uint64_t)&v89);
    v35 = String.init<A>(describing:)();
    v19 = (_BYTE *)v36;
    *(_QWORD *)&v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v24, (os_log_type_t)v79, "[EncoreEngine] Attachment option: detach(%s) flow: %s parent: %s", (uint8_t *)v29, 0x20u);
    v37 = v80;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v37, -1, -1);
    MEMORY[0x1B5E44758](v29, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_release_n();
    v38 = swift_bridgeObjectRelease_n();
  }
  v50 = (*(uint64_t (**)(uint64_t))(*a1 + 152))(v38);
  v51 = specialized _ArrayProtocol.filter(_:)(v50, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v51 >> 62)
  {
    swift_bridgeObjectRetain();
    v52 = _CocoaArrayWrapper.endIndex.getter();
    if (v52)
      goto LABEL_19;
  }
  else
  {
    v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v52)
    {
LABEL_19:
      if (v52 >= 1)
      {
        v53 = 0;
        v54 = *(void (**)(uint64_t))(**(_QWORD **)(v82 + 24) + 240);
        do
        {
          if ((v51 & 0xC000000000000001) != 0)
          {
            v55 = MEMORY[0x1B5E43B94](v53, v51);
          }
          else
          {
            v55 = *(_QWORD *)(v51 + 8 * v53 + 32);
            swift_retain();
          }
          ++v53;
          v54(v55);
          swift_release();
          swift_release();
        }
        while (v52 != v53);
        goto LABEL_35;
      }
      __break(1u);
LABEL_50:
      swift_once();
LABEL_14:
      v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)static Logger.executor);
      swift_retain_n();
      swift_retain_n();
      v40 = Logger.logObject.getter();
      v41 = static os_log_type_t.debug.getter();
      v42 = v41;
      if (os_log_type_enabled(v40, v41))
      {
        v43 = swift_slowAlloc();
        LODWORD(v80) = v42;
        v44 = v43;
        v45 = swift_slowAlloc();
        v88 = v45;
        *(_DWORD *)v44 = 136315394;
        outlined init with copy of ReferenceResolutionClientProtocol(a2 + 16, (uint64_t)&v89);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
        v46 = String.init<A>(describing:)();
        *(_QWORD *)&v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 12) = 2080;
        outlined init with copy of ReferenceResolutionClientProtocol(a1[2] + 56, (uint64_t)&v89);
        v48 = String.init<A>(describing:)();
        *(_QWORD *)&v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v88);
        v7 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        v19 = v84;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v40, (os_log_type_t)v80, "[EncoreEngine] Attachment option: detachSiblings flow: %s parent: %s", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v45, -1, -1);
        MEMORY[0x1B5E44758](v44, -1, -1);

      }
      else
      {

        swift_release_n();
        swift_release_n();
      }
      v3 = v82;
      (*(void (**)(_QWORD *))(**(_QWORD **)(v82 + 24) + 232))(a1);
      swift_release();
      swift_release();
      (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v19, v81);
      goto LABEL_36;
    }
  }
LABEL_35:
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v84, v81);
  swift_bridgeObjectRelease();
  v3 = v82;
  v6 = v83;
  v7 = v85;
LABEL_36:
  p_cache = &OBJC_METACLASS____TtC14SiriKitRuntime14RealCamWrapper.cache;
LABEL_37:
  if (p_cache[49] != (void *)-1)
    swift_once();
  v65 = type metadata accessor for Logger();
  __swift_project_value_buffer(v65, (uint64_t)static Logger.executor);
  swift_retain_n();
  swift_retain_n();
  v66 = Logger.logObject.getter();
  v67 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v66, v67))
  {
    v83 = v6;
    v68 = swift_slowAlloc();
    v69 = swift_slowAlloc();
    v88 = v69;
    *(_DWORD *)v68 = 136315394;
    outlined init with copy of ReferenceResolutionClientProtocol(a2 + 16, (uint64_t)&v89);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    v70 = String.init<A>(describing:)();
    *(_QWORD *)&v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v68 + 12) = 2080;
    if (a1)
    {
      outlined init with copy of ReferenceResolutionClientProtocol(a1[2] + 56, (uint64_t)&v89);
    }
    else
    {
      v91 = 0;
      v89 = 0u;
      v90 = 0u;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow?);
    v72 = String.init<A>(describing:)();
    *(_QWORD *)&v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v66, v67, "[EncoreEngine] Pushing %s parent: %s", (uint8_t *)v68, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v69, -1, -1);
    MEMORY[0x1B5E44758](v68, -1, -1);

    v6 = v83;
    v7 = v85;
  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(a2 + 96, (uint64_t)&v89, &demangling cache variable for type metadata for LifeCycleModifier?);
  if (*((_QWORD *)&v90 + 1))
  {
    __swift_project_boxed_opaque_existential_1(&v89, *((uint64_t *)&v90 + 1));
    dispatch thunk of LifeCycleModifier.onAttached()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v89);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v89, &demangling cache variable for type metadata for LifeCycleModifier?);
  }
  v74 = v86;
  outlined init with copy of ReferenceResolutionClientProtocol(a2 + 56, (uint64_t)v86);
  (*((void (**)(_BYTE *, _QWORD, __int128 *))v7 + 13))(v74, *MEMORY[0x1E0D9AFD8], v6);
  static FlowTrace.trace(event:)();
  (*((void (**)(_BYTE *, __int128 *))v7 + 1))(v74, v6);
  v75 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)&v89 = a2;
  return (*(uint64_t (**)(__int128 *, _QWORD *))(*(_QWORD *)v75 + 208))(&v89, a1);
}

void EncoreEngine.ActionMode.description.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B4DC8C34()
{
  void *v0;
  Swift::String v1;
  uint64_t v3;

  v1._countAndFlagsBits = 0x656D75736572;
  v1._object = v0;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t EncoreEngine.ActionMode.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4DC8CC4 + 4 * byte_1B4EE9996[a1]))(0x6C616D726F6ELL, 0xE600000000000000);
}

uint64_t sub_1B4DC8CC4()
{
  return 0x656D75736572;
}

uint64_t sub_1B4DC8CD4()
{
  return 0x7075727265746E69;
}

uint64_t sub_1B4DC8CF0()
{
  return 0x705570617277;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance EncoreEngine.ActionMode(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B4DC8D50@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B4DC8DA4 + 4 * byte_1B4EE999E[a1]))(0x656D75736572);
}

uint64_t sub_1B4DC8DA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x656D75736572 && v1 == v2)
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance EncoreEngine.ActionMode()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1B4DC8E88()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance EncoreEngine.ActionMode()
{
  __asm { BR              X10 }
}

uint64_t sub_1B4DC8F24()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance EncoreEngine.ActionMode()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1B4DC8FB8()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance EncoreEngine.ActionMode@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized EncoreEngine.ActionMode.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance EncoreEngine.ActionMode()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B4DC9074 + 4 * byte_1B4EE99AE[*v0]))();
}

void sub_1B4DC9074(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x656D75736572;
  a1[1] = v1;
}

void sub_1B4DC9088(_QWORD *a1@<X8>)
{
  *a1 = 0x7075727265746E69;
  a1[1] = 0xE900000000000074;
}

void sub_1B4DC90A8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x705570617277;
  a1[1] = v1;
}

void protocol witness for CustomStringConvertible.description.getter in conformance EncoreEngine.ActionMode()
{
  __asm { BR              X10 }
}

uint64_t sub_1B4DC9100()
{
  void *v0;
  Swift::String v1;
  uint64_t v3;

  v1._countAndFlagsBits = 0x656D75736572;
  v1._object = v0;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  return v3;
}

void EncoreEngine.ActionOutcome.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = type metadata accessor for PluginAction();
  MEMORY[0x1E0C80A78](v1);
  v2 = type metadata accessor for FlowUnhandledReason();
  MEMORY[0x1E0C80A78](v2);
  v3 = type metadata accessor for EncoreEngine.ActionOutcome(0);
  MEMORY[0x1E0C80A78](v3);
  outlined init with copy of ConversationHelperInput(v0, (uint64_t)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v6 = (char *)sub_1B4DC927C + 4 * byte_1B4EE99B6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_1B4DC927C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v0);
  *(_QWORD *)(v4 - 96) = 0;
  *(_QWORD *)(v4 - 88) = 0xE000000000000000;
  v5._countAndFlagsBits = 0x656C646E61686E75;
  v5._object = (void *)0xEA00000000002864;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7 = *(_QWORD *)(v4 - 96);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v7;
}

uint64_t EventQueue.events.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 88);
  v4 = type metadata accessor for AsyncStream();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t EventQueue.continuation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  v4 = type metadata accessor for AsyncStream.Continuation();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t specialized EventQueue.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.BufferingPolicy);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>);
  v17 = *(_QWORD *)(v5 - 8);
  v18 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v17 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
  v19 = v13;
  type metadata accessor for EncoreEngine.EngineEvent(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DF07B8], v1);
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88), v7, v18);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation?);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v14);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96), v11, v14);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation?);
    return v0;
  }
  return result;
}

uint64_t EventQueue.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v18 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  v16 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v3 = (char *)&v16 - v2;
  v19 = type metadata accessor for AsyncStream();
  v17 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v5 = (char *)&v16 - v4;
  v6 = type metadata accessor for AsyncStream.Continuation();
  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v16 - v12;
  v14 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))((char *)&v16 - v12, 1, 1, v6);
  v20 = v1;
  v21 = v13;
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v3, *MEMORY[0x1E0DF07B8], v18);
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88), v5, v19);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96), v11, v6);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return v0;
  }
  return result;
}

uint64_t specialized closure #1 in EventQueue.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  outlined destroy of ReferenceResolutionClientProtocol?(a2, &demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation?);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t closure #1 in EventQueue.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for AsyncStream.Continuation();
  v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  v6 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, v4);
}

uint64_t EventQueue.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[EncoreEngine] EventQueue deinit.", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  v6 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 88);
  v7 = type metadata accessor for AsyncStream();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  v9 = type metadata accessor for AsyncStream.Continuation();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return v1;
}

uint64_t EventQueue.__deallocating_deinit()
{
  EventQueue.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch();
}

uint64_t specialized closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)()
{
  uint64_t v0;
  _QWORD *v1;

  type metadata accessor for SiriEnvironment();
  *(_QWORD *)(v0 + 48) = ActingFlowAgent.environment.getter();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = specialized closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:);
  return static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for RequestContinuation(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for RequestContinuation);
}

uint64_t partial apply for closure #1 in EncoreEngine.init(rootEnvironment:snippetManager:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in EncoreEngine.init(rootEnvironment:snippetManager:)(a1, a2, v2);
}

uint64_t sub_1B4DC9D20()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B4DC9D44()
{
  return objectdestroy_2Tm_0((void (*)(_QWORD))MEMORY[0x1E0DEEEC0]);
}

uint64_t partial apply for closure #2 in EncoreEngine.init(rootEnvironment:snippetManager:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v3[5] = v2;
  return swift_task_switch();
}

uint64_t type metadata accessor for FlowActor()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type SystemEvents? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type SystemEvents? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type SystemEvents? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SystemEvents?);
    v2 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type SystemEvents and conformance SystemEvents, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D1F2F0], MEMORY[0x1E0D1F300]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEE9A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemEvents? and conformance <A> A?);
  }
  return result;
}

unint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int isUniquelyReferenced_nonNull_bridgeObject;
  int v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v5 = swift_bridgeObjectRetain();
  v6 = specialized Collection.firstIndex(where:)(v5, a2);
  v8 = v7;
  swift_bridgeObjectRelease();
  if (!v2)
  {
    if ((v8 & 1) != 0)
    {
      v20 = *a1;
      if (v20 >> 62)
      {
        swift_bridgeObjectRetain();
        v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v6 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
    }
    else
    {
      v9 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_54;
      if ((unint64_t)*a1 >> 62)
      {
LABEL_55:
        swift_bridgeObjectRetain();
        v22 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v9 != v22)
          goto LABEL_6;
      }
      else if (v9 != *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_6:
        v10 = v6 + 5;
        while (1)
        {
          v11 = v10 - 4;
          v12 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            v13 = MEMORY[0x1B5E43B94](v10 - 4);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_45:
              __break(1u);
LABEL_46:
              __break(1u);
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
              goto LABEL_55;
            }
            if (v11 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_45;
            v13 = *(_QWORD *)(v12 + 8 * v10);
            swift_retain();
          }
          v23 = v13;
          v9 = closure #1 in EncoreEngine.ensureReady()(&v23, a2);
          swift_release();
          if ((v9 & 1) == 0)
            break;
LABEL_32:
          v9 = v10 - 3;
          if (__OFADD__(v11, 1))
            goto LABEL_46;
          if ((unint64_t)*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            v19 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v19 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          ++v10;
          if (v9 == v19)
            goto LABEL_43;
        }
        if (v11 == v6)
        {
LABEL_31:
          if (__OFADD__(v6++, 1))
            goto LABEL_47;
          goto LABEL_32;
        }
        v9 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v14 = MEMORY[0x1B5E43B94](v6, *a1);
          v9 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_17:
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_50;
            if (v11 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_51;
            v15 = *(_QWORD *)(v9 + 8 * v10);
            swift_retain();
            goto LABEL_20;
          }
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0)
            goto LABEL_48;
          if (v6 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_49;
          v14 = *(_QWORD *)(v9 + 8 * v6 + 32);
          swift_retain();
          if ((v9 & 0xC000000000000001) == 0)
            goto LABEL_17;
        }
        v15 = MEMORY[0x1B5E43B94](v10 - 4, v9);
        v9 = *a1;
LABEL_20:
        isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v9;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v9 < 0 || (v9 & 0x4000000000000000) != 0)
          specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v15;
        swift_release();
        specialized Array._endMutation()();
        v9 = *a1;
        v17 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v9;
        if (!v17 || v9 < 0 || (v9 & 0x4000000000000000) != 0)
          specialized _ArrayBuffer._consumeAndCreateNew()(v9);
        if ((v11 & 0x8000000000000000) != 0)
          goto LABEL_52;
        if (v11 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_53;
        *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v10) = v14;
        swift_release();
        specialized Array._endMutation()();
        goto LABEL_31;
      }
    }
  }
LABEL_43:
  swift_release();
  return v6;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t *v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v3 = a1;
  v28 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
LABEL_28:
    v17 = _CocoaArrayWrapper.endIndex.getter();
    if (v17)
      goto LABEL_3;
  }
  else
  {
    v17 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v17)
    {
LABEL_3:
      v16 = v3;
      v4 = 0;
      v19 = v3 & 0xFFFFFFFFFFFFFF8;
      v20 = v3 & 0xC000000000000001;
      v18 = v3 + 32;
      v5 = &demangling cache variable for type metadata for LifeCycleModifier?;
      v6 = a2 + 56;
      v3 = v17;
      while (1)
      {
        if (v20)
        {
          v7 = MEMORY[0x1B5E43B94](v4, v16);
          v8 = __OFADD__(v4++, 1);
          if (v8)
          {
LABEL_25:
            __break(1u);
            return v28;
          }
        }
        else
        {
          if (v4 >= *(_QWORD *)(v19 + 16))
          {
            __break(1u);
            goto LABEL_28;
          }
          v7 = *(_QWORD *)(v18 + 8 * v4);
          swift_retain();
          v8 = __OFADD__(v4++, 1);
          if (v8)
            goto LABEL_25;
        }
        outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v7 + 16) + 96, (uint64_t)v21, v5);
        if (!v22)
          break;
        v9 = v5;
        __swift_project_boxed_opaque_existential_1(v21, v22);
        dispatch thunk of LifeCycleModifier.id.getter();
        v3 = v17;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
        if (!*((_QWORD *)&v24 + 1))
          goto LABEL_19;
        v26[0] = v23;
        v26[1] = v24;
        v27 = v25;
        if (*(_QWORD *)(a2 + 16))
        {
          v10 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
          v11 = -1 << *(_BYTE *)(a2 + 32);
          v12 = v10 & ~v11;
          if (((*(_QWORD *)(v6 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
          {
            v13 = ~v11;
            while (1)
            {
              outlined init with copy of AnyHashable(*(_QWORD *)(a2 + 48) + 40 * v12, (uint64_t)&v23);
              v14 = MEMORY[0x1B5E43AF8](&v23, v26);
              outlined destroy of AnyHashable((uint64_t)&v23);
              if ((v14 & 1) != 0)
                break;
              v12 = (v12 + 1) & v13;
              if (((*(_QWORD *)(v6 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
              {
                outlined destroy of AnyHashable((uint64_t)v26);
                swift_release();
                v5 = v9;
                goto LABEL_5;
              }
            }
            outlined destroy of AnyHashable((uint64_t)v26);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v5 = v9;
          }
          else
          {
            outlined destroy of AnyHashable((uint64_t)v26);
            swift_release();
          }
LABEL_5:
          v3 = v17;
          goto LABEL_6;
        }
        outlined destroy of AnyHashable((uint64_t)v26);
LABEL_20:
        swift_release();
LABEL_6:
        if (v4 == v3)
          return v28;
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, v5);
      v23 = 0u;
      v24 = 0u;
      v25 = 0;
LABEL_19:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v23, &demangling cache variable for type metadata for AnyHashable?);
      goto LABEL_20;
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

{
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v9 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
LABEL_16:
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      for (i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v6 = MEMORY[0x1B5E43B94](i, a1);
          v7 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_13:
            __break(1u);
            return v9;
          }
        }
        else
        {
          if (i >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          v6 = *(_QWORD *)(a1 + 8 * i + 32);
          swift_retain();
          v7 = i + 1;
          if (__OFADD__(i, 1))
            goto LABEL_13;
        }
        if (v6 == a2)
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        if (v7 == v4)
          return v9;
      }
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t type metadata accessor for ActingFlowAgent()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in LifeCycleModifier.onDetached(value:parentFlowContext:)()
{
  return dispatch thunk of LifeCycleModifier.onDetached(value:)();
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;

  if (a1 >> 62)
    goto LABEL_14;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = 0;
  if (v5)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x1B5E43B94](v6, a1);
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 8 * v6 + 32);
        swift_retain();
      }
      v11 = v7;
      v8 = closure #1 in EncoreEngine.ensureReady()(&v11, a2);
      swift_release();
      if (v2 || (v8 & 1) != 0)
        break;
      v9 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        v5 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v6 = 0;
        if (!v5)
          return v6;
      }
      else
      {
        ++v6;
        if (v9 == v5)
          return 0;
      }
    }
  }
  return v6;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 >> 62)
    goto LABEL_11;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v5 = 0;
  if (v4)
  {
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0 ? MEMORY[0x1B5E43B94](v5, a1) : swift_retain();
      v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 16);
      swift_release();
      if (v7 == a2)
        break;
      v8 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_11:
        swift_bridgeObjectRetain();
        v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v5 = 0;
        if (!v4)
          return v5;
      }
      else
      {
        ++v5;
        if (v8 == v4)
          return 0;
      }
    }
  }
  return v5;
}

{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;

  if (a1 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  for (i = 0; v4; i = 0)
  {
    v6 = *(_QWORD *)(a2 + 16);
    a2 = *(_QWORD *)(a2 + 24);
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x1B5E43B94](i, a1);
      }
      else
      {
        v7 = *(_QWORD *)(a1 + 8 * i + 32);
        swift_retain();
      }
      if (*(_QWORD *)(v7 + 16) == v6 && *(_QWORD *)(v7 + 24) == a2)
      {
        swift_release();
        return i;
      }
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      if ((v9 & 1) != 0)
        return i;
      v10 = i + 1;
      if (__OFADD__(i, 1))
        break;
      ++i;
      if (v10 == v4)
        return 0;
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return i;
}

uint64_t specialized EncoreEngine.action(mode:starting:context:completion:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  unint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[5];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65[2];
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  char v72;

  v64 = a4;
  v48 = a3;
  v49 = type metadata accessor for EncoreEngine.ActionOutcome(0);
  MEMORY[0x1E0C80A78](v49);
  v50 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for FlowTraceEvent();
  v58 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59);
  v57 = (char *)v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for InterruptionPolicy();
  v55 = *(_QWORD *)(v56 - 8);
  v14 = MEMORY[0x1E0C80A78](v56);
  v46[0] = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v54 = (char *)v46 - v16;
  v47 = type metadata accessor for ConversationContext();
  v46[2] = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v46[1] = v17;
  v46[4] = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v18);
  v46[3] = (char *)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a5;
  v20[3] = a6;
  v51 = a6;
  v60 = v20;
  v20[4] = a7;
  v21 = one-time initialization token for executor;
  v52 = a5;
  swift_retain();
  v53 = a7;
  swift_retain();
  if (v21 != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
  swift_retain_n();
  v61 = v23;
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc();
    *(_QWORD *)&v67 = swift_slowAlloc();
    *(_DWORD *)v26 = 136315394;
    if (a2)
    {
      outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(a2 + 16) + 56, (uint64_t)&v69);
    }
    else
    {
      v71 = 0;
      v69 = 0u;
      v70 = 0u;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow?);
    v28 = String.init<A>(describing:)();
    *(_QWORD *)&v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)&v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v26 + 12) = 2080;
    *(_QWORD *)&v69 = 0;
    *((_QWORD *)&v69 + 1) = 0xE000000000000000;
    __asm { BR              X10 }
  }
  swift_release_n();

  v72 = a1;
  if (!a2)
    goto LABEL_24;
  swift_retain_n();
  for (i = a2; ; i = v43)
  {
    v63 = 0;
    swift_retain_n();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc();
      *(_QWORD *)&v67 = swift_slowAlloc();
      *(_DWORD *)v32 = 136315394;
      outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(i + 16) + 56, (uint64_t)&v69);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      v33 = String.init<A>(describing:)();
      *(_QWORD *)&v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v32 + 12) = 2080;
      swift_beginAccess();
      *(_QWORD *)&v69 = 0;
      *((_QWORD *)&v69 + 1) = 0xE000000000000000;
      __asm { BR              X10 }
    }
    swift_release_n();

    swift_release();
    outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(i + 16) + 176, (uint64_t)&v67, &demangling cache variable for type metadata for Executable?);
    if (v68)
    {
      outlined init with take of ReferenceResolutionClientProtocol(&v67, (uint64_t)&v69);
      swift_beginAccess();
      __asm { BR              X10 }
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v67, &demangling cache variable for type metadata for Executable?);
    v35 = swift_allocObject();
    *(_BYTE *)(v35 + 16) = 0;
    v62 = v35 + 16;
    v36 = (_QWORD *)swift_allocObject();
    v36[2] = v35;
    v36[3] = partial apply for closure #5 in EncoreEngine.handleExternal(event:);
    v36[4] = v60;
    v37 = *(_QWORD *)(i + 16);
    v38 = MEMORY[0x1E0C80A78](v36);
    v39 = v64;
    v46[-4] = i;
    v46[-3] = v39;
    v46[-2] = partial apply for closure #2 in EncoreEngine.action(mode:starting:context:completion:);
    v46[-1] = v38;
    v40 = one-time initialization token for $conversationContext;
    swift_retain_n();
    swift_retain();
    if (v40 != -1)
      swift_once();
    *(_QWORD *)&v69 = v37;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EncoreConversationContext?);
    swift_task_localValuePush();
    type metadata accessor for SiriEnvironment();
    outlined init with copy of ReferenceResolutionClientProtocol(v37 + 56, (uint64_t)&v67);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentLocating);
    if (swift_dynamicCast())
    {
      outlined init with take of ReferenceResolutionClientProtocol(v65, (uint64_t)&v69);
      __swift_project_boxed_opaque_existential_1(&v69, *((uint64_t *)&v70 + 1));
      dispatch thunk of SiriEnvironmentLocating.siriEnvironment.getter();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    }
    else
    {
      v66 = 0;
      memset(v65, 0, sizeof(v65));
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v65, &demangling cache variable for type metadata for SiriEnvironmentLocating?);
      if (*(_QWORD *)(v37 + 232))
        swift_retain();
      else
        static SiriEnvironment.default.getter();
    }
    v41 = v63;
    static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
    swift_release();
    if (v41)
    {
      swift_release();
      swift_release();
      swift_task_localValuePop();
      __break(1u);
      JUMPOUT(0x1B4DCBA94);
    }
    swift_task_localValuePop();
    swift_release_n();
    swift_release();
    swift_release();
    swift_beginAccess();
    v42 = *(_BYTE *)(v35 + 16);
    swift_release();
    if ((v42 & 1) != 0)
      break;
LABEL_24:
    v43 = (*(uint64_t (**)(void))(**(_QWORD **)(v64 + 24) + 216))();
    if (!v43)
    {
      v44 = (uint64_t)v50;
      swift_storeEnumTagMultiPayload();
      closure #5 in EncoreEngine.handleExternal(event:)(v44, v52, v51, v53);
      outlined destroy of CamOutput(v44, type metadata accessor for EncoreEngine.ActionOutcome);
      break;
    }
  }
  flushProcessWideSiriEnvironmentCache()();
  return swift_release();
}

unint64_t specialized EncoreEngine.ActionMode.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of EncoreEngine.ActionMode.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t type metadata accessor for EncoreEngine.ActionOutcome(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for EncoreEngine.ActionOutcome);
}

uint64_t partial apply for closure #1 in EventQueue.init()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in EventQueue.init()(a1, *(_QWORD *)(v1 + 24));
}

uint64_t associated type witness table accessor for GlobalActor.ActorType : Actor in FlowActor(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type FlowActor and conformance FlowActor, a2, (uint64_t (*)(uint64_t))type metadata accessor for FlowActor, (uint64_t)&protocol conformance descriptor for FlowActor);
}

unint64_t lazy protocol witness table accessor for type EncoreEngine.ActionMode and conformance EncoreEngine.ActionMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncoreEngine.ActionMode and conformance EncoreEngine.ActionMode;
  if (!lazy protocol witness table cache variable for type EncoreEngine.ActionMode and conformance EncoreEngine.ActionMode)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for EncoreEngine.ActionMode, &type metadata for EncoreEngine.ActionMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncoreEngine.ActionMode and conformance EncoreEngine.ActionMode);
  }
  return result;
}

uint64_t sub_1B4DCBD40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = ActingFlowAgent.environment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B4DCBD68()
{
  uint64_t v0;

  v0 = swift_retain();
  return ActingFlowAgent.environment.setter(v0);
}

uint64_t method lookup function for FlowActor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FlowActor.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t *initializeBufferWithCopyOfBuffer for RequestContinuation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UserInputResult();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v8 = type metadata accessor for Input();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for RequestContinuation(uint64_t a1)
{
  uint64_t v2;

  type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  }
  return swift_release();
}

char *initializeWithCopy for RequestContinuation(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Input();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_retain();
  return a1;
}

char *assignWithCopy for RequestContinuation(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
    v6 = type metadata accessor for UserInputResult();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Input();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for RequestContinuation(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Input();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for RequestContinuation(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for UserInputResult);
    v6 = type metadata accessor for UserInputResult();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for Input();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RequestContinuation()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4DCC1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UserInputResult();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for RequestContinuation()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4DCC258(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UserInputResult();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t type metadata completion function for RequestContinuation()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UserInputResult();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for EncoreEngineEvent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v7;
  char *v8;
  char *v9;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *(char **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = &v9[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = *(char **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v8 = v7;
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v11 = *(char **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v12 = v11;
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
        v14 = *(int *)(v13 + 48);
        v15 = &a1[v14];
        v16 = &a2[v14];
        v17 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
        v18 = *(int *)(v13 + 64);
        v19 = &a1[v18];
        v20 = &a2[v18];
        v21 = *((_QWORD *)v20 + 1);
        *(_QWORD *)v19 = *(_QWORD *)v20;
        *((_QWORD *)v19 + 1) = v21;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v22 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v22;
        (**(void (***)(void *, const void *))(v22 - 8))(a1, a2);
        v23 = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 6) = v23;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v24 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v24;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        v25 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v25;
        v26 = (int *)type metadata accessor for SiriRequest(0);
        v27 = v26[5];
        v28 = &a1[v27];
        v29 = &a2[v27];
        v30 = type metadata accessor for Input();
        v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
        swift_bridgeObjectRetain();
        v31(v28, v29, v30);
        *(_QWORD *)&a1[v26[6]] = *(_QWORD *)&a2[v26[6]];
        v32 = v26[7];
        v33 = &a1[v32];
        v34 = &a2[v32];
        v35 = *(_QWORD *)&a2[v32 + 8];
        swift_retain();
        if (v35 >> 60 == 15)
        {
          *(_OWORD *)v33 = *(_OWORD *)v34;
        }
        else
        {
          v38 = *(_QWORD *)v34;
          outlined copy of Data._Representation(v38, v35);
          *(_QWORD *)v33 = v38;
          *((_QWORD *)v33 + 1) = v35;
        }
        *(_QWORD *)&a1[v26[8]] = *(_QWORD *)&a2[v26[8]];
        v39 = v26[9];
        v40 = &a1[v39];
        v41 = &a2[v39];
        v42 = type metadata accessor for SiriRequestIdentities(0);
        v43 = *(_QWORD *)(v42 - 8);
        v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
        swift_retain();
        if (v44(v41, 1, v42))
        {
          v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          v56 = type metadata accessor for IdentifiedUser();
          v57 = *(_QWORD *)(v56 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v41, 1, v56))
          {
            v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v40, v41, v56);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v40, 0, 1, v56);
          }
          *(_QWORD *)&v40[*(int *)(v42 + 20)] = *(_QWORD *)&v41[*(int *)(v42 + 20)];
          v59 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56);
          swift_bridgeObjectRetain();
          v59(v40, 0, 1, v42);
        }
        v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
        v61 = *(int *)(v60 + 48);
        v62 = &a1[v61];
        v63 = &a2[v61];
        v64 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v62, v63, v64);
        v65 = *(int *)(v60 + 64);
        v66 = &a1[v65];
        v67 = &a2[v65];
        v68 = *((_QWORD *)v67 + 1);
        *(_QWORD *)v66 = *(_QWORD *)v67;
        *((_QWORD *)v66 + 1) = v68;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        v36 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v37 = type metadata accessor for Input();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(a1, a2, v37);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        }
        v46 = type metadata accessor for RequestContinuation(0);
        *(_QWORD *)&a1[*(int *)(v46 + 20)] = *(_QWORD *)&a2[*(int *)(v46 + 20)];
        swift_retain();
        v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
        v48 = *(int *)(v47 + 48);
        v49 = &a1[v48];
        v50 = &a2[v48];
        v51 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
        v52 = *(int *)(v47 + 64);
        v53 = &a1[v52];
        v54 = &a2[v52];
        v55 = *((_QWORD *)v54 + 1);
        *(_QWORD *)v53 = *(_QWORD *)v54;
        *((_QWORD *)v53 + 1) = v55;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void destroy for EncoreEngineEvent(id *a1)
{
  uint64_t *v2;
  int *v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:

      return;
    case 1u:

      v2 = &demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ());
      goto LABEL_15;
    case 2u:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      goto LABEL_16;
    case 3u:
      goto LABEL_16;
    case 4u:
      swift_bridgeObjectRelease();
      v3 = (int *)type metadata accessor for SiriRequest(0);
      v4 = (char *)a1 + v3[5];
      v5 = type metadata accessor for Input();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
      swift_release();
      v6 = (uint64_t *)((char *)a1 + v3[7]);
      v7 = v6[1];
      if (v7 >> 60 != 15)
        outlined consume of Data._Representation(*v6, v7);
      swift_release();
      v8 = (char *)a1 + v3[9];
      v9 = type metadata accessor for SiriRequestIdentities(0);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
      {
        v10 = type metadata accessor for IdentifiedUser();
        v11 = *(_QWORD *)(v10 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
          (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
        swift_bridgeObjectRelease();
      }
      v2 = &demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ());
      goto LABEL_15;
    case 5u:
      type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v12 = type metadata accessor for Input();
        (*(void (**)(id *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
      }
      type metadata accessor for RequestContinuation(0);
      swift_release();
      v2 = &demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ());
LABEL_15:
      v13 = (char *)a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v2) + 48);
      v14 = type metadata accessor for ConversationContext();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
LABEL_16:
      swift_release();
      break;
    default:
      return;
  }
}

char *initializeWithCopy for EncoreEngineEvent(char *a1, char *a2, uint64_t a3)
{
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = v6;
      goto LABEL_21;
    case 1u:
      v8 = *(void **)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v9 = v8;
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
      v11 = *(int *)(v10 + 48);
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = type metadata accessor for ConversationContext();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
      v15 = *(int *)(v10 + 64);
      v16 = &a1[v15];
      v17 = &a2[v15];
      v18 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *((_QWORD *)v16 + 1) = v18;
      swift_retain();
      goto LABEL_21;
    case 2u:
      v19 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v19;
      (**(void (***)(void *, const void *))(v19 - 8))(a1, a2);
      v20 = *((_QWORD *)a2 + 6);
      *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      *((_QWORD *)a1 + 6) = v20;
      swift_retain();
      goto LABEL_21;
    case 3u:
      v21 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v21;
      swift_retain();
      goto LABEL_21;
    case 4u:
      v22 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v22;
      v23 = (int *)type metadata accessor for SiriRequest(0);
      v24 = v23[5];
      v25 = &a1[v24];
      v26 = &a2[v24];
      v27 = type metadata accessor for Input();
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      swift_bridgeObjectRetain();
      v28(v25, v26, v27);
      *(_QWORD *)&a1[v23[6]] = *(_QWORD *)&a2[v23[6]];
      v29 = v23[7];
      v30 = &a1[v29];
      v31 = &a2[v29];
      v32 = *(_QWORD *)&a2[v29 + 8];
      swift_retain();
      if (v32 >> 60 == 15)
      {
        *(_OWORD *)v30 = *(_OWORD *)v31;
      }
      else
      {
        v35 = *(_QWORD *)v31;
        outlined copy of Data._Representation(v35, v32);
        *(_QWORD *)v30 = v35;
        *((_QWORD *)v30 + 1) = v32;
      }
      *(_QWORD *)&a1[v23[8]] = *(_QWORD *)&a2[v23[8]];
      v36 = v23[9];
      v37 = &a1[v36];
      v38 = &a2[v36];
      v39 = type metadata accessor for SiriRequestIdentities(0);
      v40 = *(_QWORD *)(v39 - 8);
      v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
      swift_retain();
      if (v41(v38, 1, v39))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        v53 = type metadata accessor for IdentifiedUser();
        v54 = *(_QWORD *)(v53 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v38, 1, v53))
        {
          v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v37, v38, v53);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v37, 0, 1, v53);
        }
        *(_QWORD *)&v37[*(int *)(v39 + 20)] = *(_QWORD *)&v38[*(int *)(v39 + 20)];
        v56 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56);
        swift_bridgeObjectRetain();
        v56(v37, 0, 1, v39);
      }
      v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
      v58 = *(int *)(v57 + 48);
      v59 = &a1[v58];
      v60 = &a2[v58];
      v61 = type metadata accessor for ConversationContext();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v59, v60, v61);
      v62 = *(int *)(v57 + 64);
      v63 = &a1[v62];
      v64 = &a2[v62];
      v65 = *((_QWORD *)v64 + 1);
      *(_QWORD *)v63 = *(_QWORD *)v64;
      *((_QWORD *)v63 + 1) = v65;
      swift_retain();
      goto LABEL_21;
    case 5u:
      v33 = type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v34 = type metadata accessor for Input();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(a1, a2, v34);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      v43 = type metadata accessor for RequestContinuation(0);
      *(_QWORD *)&a1[*(int *)(v43 + 20)] = *(_QWORD *)&a2[*(int *)(v43 + 20)];
      swift_retain();
      v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
      v45 = *(int *)(v44 + 48);
      v46 = &a1[v45];
      v47 = &a2[v45];
      v48 = type metadata accessor for ConversationContext();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
      v49 = *(int *)(v44 + 64);
      v50 = &a1[v49];
      v51 = &a2[v49];
      v52 = *((_QWORD *)v51 + 1);
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *((_QWORD *)v50 + 1) = v52;
      swift_retain();
LABEL_21:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void **assignWithCopy for EncoreEngineEvent(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for EncoreEngineEvent);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = *a2;
        *a1 = *a2;
        v7 = v6;
        goto LABEL_22;
      case 1u:
        v8 = *a2;
        *a1 = *a2;
        v9 = v8;
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
        v11 = *(int *)(v10 + 48);
        v12 = (char *)a1 + v11;
        v13 = (char *)a2 + v11;
        v14 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
        v15 = *(int *)(v10 + 64);
        v16 = (void **)((char *)a1 + v15);
        v17 = (void **)((char *)a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        swift_retain();
        goto LABEL_22;
      case 2u:
        v19 = a2[3];
        a1[3] = v19;
        a1[4] = a2[4];
        (**((void (***)(void **, const void *))v19 - 1))(a1, a2);
        v20 = a2[6];
        a1[5] = a2[5];
        a1[6] = v20;
        swift_retain();
        goto LABEL_22;
      case 3u:
        v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        swift_retain();
        goto LABEL_22;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        v22 = (int *)type metadata accessor for SiriRequest(0);
        v23 = v22[5];
        v24 = (char *)a1 + v23;
        v25 = (char *)a2 + v23;
        v26 = type metadata accessor for Input();
        v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
        swift_bridgeObjectRetain();
        v27(v24, v25, v26);
        *(void **)((char *)a1 + v22[6]) = *(void **)((char *)a2 + v22[6]);
        v28 = v22[7];
        v29 = (char *)a1 + v28;
        v30 = (_OWORD *)((char *)a2 + v28);
        v31 = *(unint64_t *)((char *)a2 + v28 + 8);
        swift_retain();
        if (v31 >> 60 == 15)
        {
          *(_OWORD *)v29 = *v30;
        }
        else
        {
          v34 = *(_QWORD *)v30;
          outlined copy of Data._Representation(v34, v31);
          *(_QWORD *)v29 = v34;
          *((_QWORD *)v29 + 1) = v31;
        }
        *(void **)((char *)a1 + v22[8]) = *(void **)((char *)a2 + v22[8]);
        v35 = v22[9];
        v36 = (char *)a1 + v35;
        v37 = (char *)a2 + v35;
        v38 = type metadata accessor for SiriRequestIdentities(0);
        v39 = *(_QWORD *)(v38 - 8);
        v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
        swift_retain();
        if (v40(v37, 1, v38))
        {
          v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        }
        else
        {
          v52 = type metadata accessor for IdentifiedUser();
          v53 = *(_QWORD *)(v52 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v37, 1, v52))
          {
            v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v36, v37, v52);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v36, 0, 1, v52);
          }
          *(_QWORD *)&v36[*(int *)(v38 + 20)] = *(_QWORD *)&v37[*(int *)(v38 + 20)];
          v55 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56);
          swift_bridgeObjectRetain();
          v55(v36, 0, 1, v38);
        }
        v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
        v57 = *(int *)(v56 + 48);
        v58 = (char *)a1 + v57;
        v59 = (char *)a2 + v57;
        v60 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
        v61 = *(int *)(v56 + 64);
        v62 = (void **)((char *)a1 + v61);
        v63 = (void **)((char *)a2 + v61);
        v64 = v63[1];
        *v62 = *v63;
        v62[1] = v64;
        swift_retain();
        goto LABEL_22;
      case 5u:
        v32 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v33 = type metadata accessor for Input();
          (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(a1, a2, v33);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        v42 = type metadata accessor for RequestContinuation(0);
        *(void **)((char *)a1 + *(int *)(v42 + 20)) = *(void **)((char *)a2 + *(int *)(v42 + 20));
        swift_retain();
        v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
        v44 = *(int *)(v43 + 48);
        v45 = (char *)a1 + v44;
        v46 = (char *)a2 + v44;
        v47 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
        v48 = *(int *)(v43 + 64);
        v49 = (void **)((char *)a1 + v48);
        v50 = (void **)((char *)a2 + v48);
        v51 = v50[1];
        *v49 = *v50;
        v49[1] = v51;
        swift_retain();
LABEL_22:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for EncoreEngineEvent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 5:
      v12 = type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v13 = type metadata accessor for Input();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      v25 = type metadata accessor for RequestContinuation(0);
      *(_QWORD *)((char *)a1 + *(int *)(v25 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v25 + 20));
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
      v27 = *(int *)(v26 + 48);
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      v30 = type metadata accessor for ConversationContext();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
      *(_OWORD *)((char *)a1 + *(int *)(v26 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v26 + 64));
      goto LABEL_17;
    case 4:
      *a1 = *a2;
      v14 = (int *)type metadata accessor for SiriRequest(0);
      v15 = v14[5];
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for Input();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
      *(_QWORD *)((char *)a1 + v14[6]) = *(_QWORD *)((char *)a2 + v14[6]);
      *(_OWORD *)((char *)a1 + v14[7]) = *(_OWORD *)((char *)a2 + v14[7]);
      *(_QWORD *)((char *)a1 + v14[8]) = *(_QWORD *)((char *)a2 + v14[8]);
      v19 = v14[9];
      v20 = (char *)a1 + v19;
      v21 = (char *)a2 + v19;
      v22 = type metadata accessor for SiriRequestIdentities(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        v31 = type metadata accessor for IdentifiedUser();
        v32 = *(_QWORD *)(v31 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v21, 1, v31))
        {
          v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v20, v21, v31);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v20, 0, 1, v31);
        }
        *(_QWORD *)&v20[*(int *)(v22 + 20)] = *(_QWORD *)&v21[*(int *)(v22 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
      v35 = *(int *)(v34 + 48);
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      v38 = type metadata accessor for ConversationContext();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
      *(_OWORD *)((char *)a1 + *(int *)(v34 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v34 + 64));
      goto LABEL_17;
    case 1:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
      v8 = *(int *)(v7 + 48);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for ConversationContext();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *(_OWORD *)((char *)a1 + *(int *)(v7 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 64));
LABEL_17:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for EncoreEngineEvent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for EncoreEngineEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 5:
        v12 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v13 = type metadata accessor for Input();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        }
        v25 = type metadata accessor for RequestContinuation(0);
        *(_QWORD *)((char *)a1 + *(int *)(v25 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v25 + 20));
        v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
        v27 = *(int *)(v26 + 48);
        v28 = (char *)a1 + v27;
        v29 = (char *)a2 + v27;
        v30 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
        *(_OWORD *)((char *)a1 + *(int *)(v26 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v26 + 64));
        goto LABEL_18;
      case 4:
        *a1 = *a2;
        v14 = (int *)type metadata accessor for SiriRequest(0);
        v15 = v14[5];
        v16 = (char *)a1 + v15;
        v17 = (char *)a2 + v15;
        v18 = type metadata accessor for Input();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
        *(_QWORD *)((char *)a1 + v14[6]) = *(_QWORD *)((char *)a2 + v14[6]);
        *(_OWORD *)((char *)a1 + v14[7]) = *(_OWORD *)((char *)a2 + v14[7]);
        *(_QWORD *)((char *)a1 + v14[8]) = *(_QWORD *)((char *)a2 + v14[8]);
        v19 = v14[9];
        v20 = (char *)a1 + v19;
        v21 = (char *)a2 + v19;
        v22 = type metadata accessor for SiriRequestIdentities(0);
        v23 = *(_QWORD *)(v22 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
        {
          v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          v31 = type metadata accessor for IdentifiedUser();
          v32 = *(_QWORD *)(v31 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v21, 1, v31))
          {
            v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v20, v21, v31);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v20, 0, 1, v31);
          }
          *(_QWORD *)&v20[*(int *)(v22 + 20)] = *(_QWORD *)&v21[*(int *)(v22 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
        }
        v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
        v35 = *(int *)(v34 + 48);
        v36 = (char *)a1 + v35;
        v37 = (char *)a2 + v35;
        v38 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
        *(_OWORD *)((char *)a1 + *(int *)(v34 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v34 + 64));
        goto LABEL_18;
      case 1:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
        v8 = *(int *)(v7 + 48);
        v9 = (char *)a1 + v8;
        v10 = (char *)a2 + v8;
        v11 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
        *(_OWORD *)((char *)a1 + *(int *)(v7 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 64));
LABEL_18:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for EncoreEngineEvent()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;

  v8 = MEMORY[0x1E0DE9D10] + 64;
  result = type metadata accessor for ConversationContext();
  if (v1 <= 0x3F)
  {
    v2 = MEMORY[0x1E0DEE9D0] + 64;
    swift_getTupleTypeLayout3();
    v9 = &v7;
    v10 = "8";
    v11 = v2;
    result = type metadata accessor for SiriRequest(319);
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout3();
      v12 = &v6;
      result = type metadata accessor for RequestContinuation(319);
      if (v4 <= 0x3F)
      {
        swift_getTupleTypeLayout3();
        v13 = &v5;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t method lookup function for ActingFlowAgent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActingFlowAgent.__allocating_init(flow:environment:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t ObjC metadata update function for ExecutableTask()
{
  return type metadata accessor for ExecutableTask(0);
}

uint64_t type metadata accessor for ExecutableTask(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ExecutableTask);
}

uint64_t type metadata completion function for ExecutableTask()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ConversationContext();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ExecutableTask()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ExecutableTask.__allocating_init(executingNode:context:runningTask:actionCompletion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata accessor for EncoreEngine()
{
  return objc_opt_self();
}

uint64_t method lookup function for EncoreEngine()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EncoreEngine.__allocating_init(rootEnvironment:snippetManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

_QWORD *initializeBufferWithCopyOfBuffer for EncoreEngine.InternalEvent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for EncoreEngine.InternalEvent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for EncoreEngine.InternalEvent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EncoreEngine.InternalEvent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EncoreEngine.InternalEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EncoreEngine.InternalEvent()
{
  return &type metadata for EncoreEngine.InternalEvent;
}

char *initializeBufferWithCopyOfBuffer for EncoreEngine.EngineEvent(char *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v6 = *(char **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = &v6[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_retain();
    }
    else
    {
      v7 = type metadata accessor for EncoreEngineEvent(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v8 = *(char **)a2;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v9 = v8;
          goto LABEL_25;
        case 1u:
          v10 = *(char **)a2;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          v11 = v10;
          v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
          v13 = *(int *)(v12 + 48);
          v14 = &a1[v13];
          v15 = &a2[v13];
          v16 = type metadata accessor for ConversationContext();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
          v17 = *(int *)(v12 + 64);
          v18 = &a1[v17];
          v19 = &a2[v17];
          v20 = *((_QWORD *)v19 + 1);
          *(_QWORD *)v18 = *(_QWORD *)v19;
          *((_QWORD *)v18 + 1) = v20;
          swift_retain();
          goto LABEL_25;
        case 2u:
          v21 = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 24) = v21;
          (**(void (***)(void *, const void *))(v21 - 8))(a1, a2);
          v22 = *((_QWORD *)a2 + 6);
          *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
          *((_QWORD *)a1 + 6) = v22;
          swift_retain();
          goto LABEL_25;
        case 3u:
          v23 = *((_QWORD *)a2 + 1);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *((_QWORD *)a1 + 1) = v23;
          swift_retain();
          goto LABEL_25;
        case 4u:
          v24 = *((_QWORD *)a2 + 1);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *((_QWORD *)a1 + 1) = v24;
          v25 = (int *)type metadata accessor for SiriRequest(0);
          v26 = v25[5];
          v27 = &a1[v26];
          v28 = &a2[v26];
          v29 = type metadata accessor for Input();
          v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
          swift_bridgeObjectRetain();
          v30(v27, v28, v29);
          *(_QWORD *)&a1[v25[6]] = *(_QWORD *)&a2[v25[6]];
          v31 = v25[7];
          v32 = &a1[v31];
          v33 = &a2[v31];
          v34 = *(_QWORD *)&a2[v31 + 8];
          swift_retain();
          if (v34 >> 60 == 15)
          {
            *(_OWORD *)v32 = *(_OWORD *)v33;
          }
          else
          {
            v37 = *(_QWORD *)v33;
            outlined copy of Data._Representation(v37, v34);
            *(_QWORD *)v32 = v37;
            *((_QWORD *)v32 + 1) = v34;
          }
          *(_QWORD *)&a1[v25[8]] = *(_QWORD *)&a2[v25[8]];
          v38 = v25[9];
          v39 = &a1[v38];
          v40 = &a2[v38];
          v41 = type metadata accessor for SiriRequestIdentities(0);
          v42 = *(_QWORD *)(v41 - 8);
          v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
          swift_retain();
          if (v43(v40, 1, v41))
          {
            v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
            memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
          }
          else
          {
            v55 = type metadata accessor for IdentifiedUser();
            v56 = *(_QWORD *)(v55 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v40, 1, v55))
            {
              v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
              memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v39, v40, v55);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v39, 0, 1, v55);
            }
            *(_QWORD *)&v39[*(int *)(v41 + 20)] = *(_QWORD *)&v40[*(int *)(v41 + 20)];
            v58 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56);
            swift_bridgeObjectRetain();
            v58(v39, 0, 1, v41);
          }
          v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
          v60 = *(int *)(v59 + 48);
          v61 = &a1[v60];
          v62 = &a2[v60];
          v63 = type metadata accessor for ConversationContext();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v61, v62, v63);
          v64 = *(int *)(v59 + 64);
          v65 = &a1[v64];
          v66 = &a2[v64];
          v67 = *((_QWORD *)v66 + 1);
          *(_QWORD *)v65 = *(_QWORD *)v66;
          *((_QWORD *)v65 + 1) = v67;
          swift_retain();
          goto LABEL_25;
        case 5u:
          v35 = type metadata accessor for UserInputResult();
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            v36 = type metadata accessor for Input();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16))(a1, a2, v36);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
          }
          v45 = type metadata accessor for RequestContinuation(0);
          *(_QWORD *)&a1[*(int *)(v45 + 20)] = *(_QWORD *)&a2[*(int *)(v45 + 20)];
          swift_retain();
          v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
          v47 = *(int *)(v46 + 48);
          v48 = &a1[v47];
          v49 = &a2[v47];
          v50 = type metadata accessor for ConversationContext();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
          v51 = *(int *)(v46 + 64);
          v52 = &a1[v51];
          v53 = &a2[v51];
          v54 = *((_QWORD *)v53 + 1);
          *(_QWORD *)v52 = *(_QWORD *)v53;
          *((_QWORD *)v52 + 1) = v54;
          swift_retain();
LABEL_25:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
          break;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for EncoreEngine.EngineEvent(id *a1)
{
  uint64_t *v2;
  int *v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  if (swift_getEnumCaseMultiPayload() != 1)
  {
    type metadata accessor for EncoreEngineEvent(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:

        return;
      case 1u:

        v2 = &demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ());
        goto LABEL_16;
      case 2u:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
        break;
      case 3u:
        break;
      case 4u:
        swift_bridgeObjectRelease();
        v3 = (int *)type metadata accessor for SiriRequest(0);
        v4 = (char *)a1 + v3[5];
        v5 = type metadata accessor for Input();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
        swift_release();
        v6 = (uint64_t *)((char *)a1 + v3[7]);
        v7 = v6[1];
        if (v7 >> 60 != 15)
          outlined consume of Data._Representation(*v6, v7);
        swift_release();
        v8 = (char *)a1 + v3[9];
        v9 = type metadata accessor for SiriRequestIdentities(0);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
        {
          v10 = type metadata accessor for IdentifiedUser();
          v11 = *(_QWORD *)(v10 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
            (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
          swift_bridgeObjectRelease();
        }
        v2 = &demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ());
        goto LABEL_16;
      case 5u:
        type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v12 = type metadata accessor for Input();
          (*(void (**)(id *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
        }
        type metadata accessor for RequestContinuation(0);
        swift_release();
        v2 = &demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ());
LABEL_16:
        v13 = (char *)a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v2) + 48);
        v14 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
        break;
      default:
        return;
    }
  }
  swift_release();
}

char *initializeWithCopy for EncoreEngine.EngineEvent(char *a1, char *a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    swift_retain();
  }
  else
  {
    v4 = type metadata accessor for EncoreEngineEvent(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v5 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v6 = v5;
        goto LABEL_23;
      case 1u:
        v7 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v8 = v7;
        v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
        v10 = *(int *)(v9 + 48);
        v11 = &a1[v10];
        v12 = &a2[v10];
        v13 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
        v14 = *(int *)(v9 + 64);
        v15 = &a1[v14];
        v16 = &a2[v14];
        v17 = *((_QWORD *)v16 + 1);
        *(_QWORD *)v15 = *(_QWORD *)v16;
        *((_QWORD *)v15 + 1) = v17;
        swift_retain();
        goto LABEL_23;
      case 2u:
        v18 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v18;
        (**(void (***)(void *, const void *))(v18 - 8))(a1, a2);
        v19 = *((_QWORD *)a2 + 6);
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        *((_QWORD *)a1 + 6) = v19;
        swift_retain();
        goto LABEL_23;
      case 3u:
        v20 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v20;
        swift_retain();
        goto LABEL_23;
      case 4u:
        v21 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v21;
        v22 = (int *)type metadata accessor for SiriRequest(0);
        v23 = v22[5];
        v24 = &a1[v23];
        v25 = &a2[v23];
        v26 = type metadata accessor for Input();
        v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
        swift_bridgeObjectRetain();
        v27(v24, v25, v26);
        *(_QWORD *)&a1[v22[6]] = *(_QWORD *)&a2[v22[6]];
        v28 = v22[7];
        v29 = &a1[v28];
        v30 = &a2[v28];
        v31 = *(_QWORD *)&a2[v28 + 8];
        swift_retain();
        if (v31 >> 60 == 15)
        {
          *(_OWORD *)v29 = *(_OWORD *)v30;
        }
        else
        {
          v34 = *(_QWORD *)v30;
          outlined copy of Data._Representation(v34, v31);
          *(_QWORD *)v29 = v34;
          *((_QWORD *)v29 + 1) = v31;
        }
        *(_QWORD *)&a1[v22[8]] = *(_QWORD *)&a2[v22[8]];
        v35 = v22[9];
        v36 = &a1[v35];
        v37 = &a2[v35];
        v38 = type metadata accessor for SiriRequestIdentities(0);
        v39 = *(_QWORD *)(v38 - 8);
        v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
        swift_retain();
        if (v40(v37, 1, v38))
        {
          v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
        }
        else
        {
          v52 = type metadata accessor for IdentifiedUser();
          v53 = *(_QWORD *)(v52 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v37, 1, v52))
          {
            v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v36, v37, v52);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v36, 0, 1, v52);
          }
          *(_QWORD *)&v36[*(int *)(v38 + 20)] = *(_QWORD *)&v37[*(int *)(v38 + 20)];
          v55 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56);
          swift_bridgeObjectRetain();
          v55(v36, 0, 1, v38);
        }
        v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
        v57 = *(int *)(v56 + 48);
        v58 = &a1[v57];
        v59 = &a2[v57];
        v60 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v58, v59, v60);
        v61 = *(int *)(v56 + 64);
        v62 = &a1[v61];
        v63 = &a2[v61];
        v64 = *((_QWORD *)v63 + 1);
        *(_QWORD *)v62 = *(_QWORD *)v63;
        *((_QWORD *)v62 + 1) = v64;
        swift_retain();
        goto LABEL_23;
      case 5u:
        v32 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v33 = type metadata accessor for Input();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(a1, a2, v33);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        v42 = type metadata accessor for RequestContinuation(0);
        *(_QWORD *)&a1[*(int *)(v42 + 20)] = *(_QWORD *)&a2[*(int *)(v42 + 20)];
        swift_retain();
        v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
        v44 = *(int *)(v43 + 48);
        v45 = &a1[v44];
        v46 = &a2[v44];
        v47 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
        v48 = *(int *)(v43 + 64);
        v49 = &a1[v48];
        v50 = &a2[v48];
        v51 = *((_QWORD *)v50 + 1);
        *(_QWORD *)v49 = *(_QWORD *)v50;
        *((_QWORD *)v49 + 1) = v51;
        swift_retain();
LABEL_23:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        break;
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for EncoreEngine.EngineEvent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for EncoreEngine.EngineEvent);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
    }
    else
    {
      v4 = type metadata accessor for EncoreEngineEvent(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          v5 = (void *)*a2;
          *a1 = *a2;
          v6 = v5;
          goto LABEL_24;
        case 1u:
          v7 = (void *)*a2;
          *a1 = *a2;
          v8 = v7;
          v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
          v10 = *(int *)(v9 + 48);
          v11 = (char *)a1 + v10;
          v12 = (char *)a2 + v10;
          v13 = type metadata accessor for ConversationContext();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
          v14 = *(int *)(v9 + 64);
          v15 = (_QWORD *)((char *)a1 + v14);
          v16 = (_QWORD *)((char *)a2 + v14);
          v17 = v16[1];
          *v15 = *v16;
          v15[1] = v17;
          swift_retain();
          goto LABEL_24;
        case 2u:
          v18 = a2[3];
          a1[3] = v18;
          a1[4] = a2[4];
          (**(void (***)(_QWORD *, _QWORD *))(v18 - 8))(a1, a2);
          v19 = a2[6];
          a1[5] = a2[5];
          a1[6] = v19;
          swift_retain();
          goto LABEL_24;
        case 3u:
          v20 = a2[1];
          *a1 = *a2;
          a1[1] = v20;
          swift_retain();
          goto LABEL_24;
        case 4u:
          *a1 = *a2;
          a1[1] = a2[1];
          v21 = (int *)type metadata accessor for SiriRequest(0);
          v22 = v21[5];
          v23 = (char *)a1 + v22;
          v24 = (char *)a2 + v22;
          v25 = type metadata accessor for Input();
          v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
          swift_bridgeObjectRetain();
          v26(v23, v24, v25);
          *(_QWORD *)((char *)a1 + v21[6]) = *(_QWORD *)((char *)a2 + v21[6]);
          v27 = v21[7];
          v28 = (char *)a1 + v27;
          v29 = (_OWORD *)((char *)a2 + v27);
          v30 = *(_QWORD *)((char *)a2 + v27 + 8);
          swift_retain();
          if (v30 >> 60 == 15)
          {
            *(_OWORD *)v28 = *v29;
          }
          else
          {
            v33 = *(_QWORD *)v29;
            outlined copy of Data._Representation(v33, v30);
            *(_QWORD *)v28 = v33;
            *((_QWORD *)v28 + 1) = v30;
          }
          *(_QWORD *)((char *)a1 + v21[8]) = *(_QWORD *)((char *)a2 + v21[8]);
          v34 = v21[9];
          v35 = (char *)a1 + v34;
          v36 = (char *)a2 + v34;
          v37 = type metadata accessor for SiriRequestIdentities(0);
          v38 = *(_QWORD *)(v37 - 8);
          v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
          swift_retain();
          if (v39(v36, 1, v37))
          {
            v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
            memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
          }
          else
          {
            v51 = type metadata accessor for IdentifiedUser();
            v52 = *(_QWORD *)(v51 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v36, 1, v51))
            {
              v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
              memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v35, v36, v51);
              (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v35, 0, 1, v51);
            }
            *(_QWORD *)&v35[*(int *)(v37 + 20)] = *(_QWORD *)&v36[*(int *)(v37 + 20)];
            v54 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56);
            swift_bridgeObjectRetain();
            v54(v35, 0, 1, v37);
          }
          v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
          v56 = *(int *)(v55 + 48);
          v57 = (char *)a1 + v56;
          v58 = (char *)a2 + v56;
          v59 = type metadata accessor for ConversationContext();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v57, v58, v59);
          v60 = *(int *)(v55 + 64);
          v61 = (_QWORD *)((char *)a1 + v60);
          v62 = (_QWORD *)((char *)a2 + v60);
          v63 = v62[1];
          *v61 = *v62;
          v61[1] = v63;
          swift_retain();
          goto LABEL_24;
        case 5u:
          v31 = type metadata accessor for UserInputResult();
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            v32 = type metadata accessor for Input();
            (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(a1, a2, v32);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
          }
          v41 = type metadata accessor for RequestContinuation(0);
          *(_QWORD *)((char *)a1 + *(int *)(v41 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v41 + 20));
          swift_retain();
          v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
          v43 = *(int *)(v42 + 48);
          v44 = (char *)a1 + v43;
          v45 = (char *)a2 + v43;
          v46 = type metadata accessor for ConversationContext();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v44, v45, v46);
          v47 = *(int *)(v42 + 64);
          v48 = (_QWORD *)((char *)a1 + v47);
          v49 = (_QWORD *)((char *)a2 + v47);
          v50 = v49[1];
          *v48 = *v49;
          v48[1] = v50;
          swift_retain();
LABEL_24:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
          break;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for EncoreEngine.EngineEvent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  if (!swift_getEnumCaseMultiPayload())
  {
    v6 = type metadata accessor for EncoreEngineEvent(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 5:
        v13 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v14 = type metadata accessor for Input();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        }
        v26 = type metadata accessor for RequestContinuation(0);
        *(_QWORD *)((char *)a1 + *(int *)(v26 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v26 + 20));
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
        v28 = *(int *)(v27 + 48);
        v29 = (char *)a1 + v28;
        v30 = (char *)a2 + v28;
        v31 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
        *(_OWORD *)((char *)a1 + *(int *)(v27 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v27 + 64));
        break;
      case 4:
        *a1 = *a2;
        v15 = (int *)type metadata accessor for SiriRequest(0);
        v16 = v15[5];
        v17 = (char *)a1 + v16;
        v18 = (char *)a2 + v16;
        v19 = type metadata accessor for Input();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
        *(_QWORD *)((char *)a1 + v15[6]) = *(_QWORD *)((char *)a2 + v15[6]);
        *(_OWORD *)((char *)a1 + v15[7]) = *(_OWORD *)((char *)a2 + v15[7]);
        *(_QWORD *)((char *)a1 + v15[8]) = *(_QWORD *)((char *)a2 + v15[8]);
        v20 = v15[9];
        v21 = (char *)a1 + v20;
        v22 = (char *)a2 + v20;
        v23 = type metadata accessor for SiriRequestIdentities(0);
        v24 = *(_QWORD *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          v32 = type metadata accessor for IdentifiedUser();
          v33 = *(_QWORD *)(v32 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v22, 1, v32))
          {
            v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v21, v22, v32);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v21, 0, 1, v32);
          }
          *(_QWORD *)&v21[*(int *)(v23 + 20)] = *(_QWORD *)&v22[*(int *)(v23 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
        v36 = *(int *)(v35 + 48);
        v37 = (char *)a1 + v36;
        v38 = (char *)a2 + v36;
        v39 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
        *(_OWORD *)((char *)a1 + *(int *)(v35 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v35 + 64));
        break;
      case 1:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
        v9 = *(int *)(v8 + 48);
        v10 = (char *)a1 + v9;
        v11 = (char *)a2 + v9;
        v12 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
        *(_OWORD *)((char *)a1 + *(int *)(v8 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v8 + 64));
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_20:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_20;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for EncoreEngine.EngineEvent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for EncoreEngine.EngineEvent);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v6 = type metadata accessor for EncoreEngineEvent(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 5:
        v13 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v14 = type metadata accessor for Input();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
        }
        v26 = type metadata accessor for RequestContinuation(0);
        *(_QWORD *)((char *)a1 + *(int *)(v26 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v26 + 20));
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
        v28 = *(int *)(v27 + 48);
        v29 = (char *)a1 + v28;
        v30 = (char *)a2 + v28;
        v31 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
        *(_OWORD *)((char *)a1 + *(int *)(v27 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v27 + 64));
        break;
      case 4:
        *a1 = *a2;
        v15 = (int *)type metadata accessor for SiriRequest(0);
        v16 = v15[5];
        v17 = (char *)a1 + v16;
        v18 = (char *)a2 + v16;
        v19 = type metadata accessor for Input();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
        *(_QWORD *)((char *)a1 + v15[6]) = *(_QWORD *)((char *)a2 + v15[6]);
        *(_OWORD *)((char *)a1 + v15[7]) = *(_OWORD *)((char *)a2 + v15[7]);
        *(_QWORD *)((char *)a1 + v15[8]) = *(_QWORD *)((char *)a2 + v15[8]);
        v20 = v15[9];
        v21 = (char *)a1 + v20;
        v22 = (char *)a2 + v20;
        v23 = type metadata accessor for SiriRequestIdentities(0);
        v24 = *(_QWORD *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          v32 = type metadata accessor for IdentifiedUser();
          v33 = *(_QWORD *)(v32 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v22, 1, v32))
          {
            v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v21, v22, v32);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v21, 0, 1, v32);
          }
          *(_QWORD *)&v21[*(int *)(v23 + 20)] = *(_QWORD *)&v22[*(int *)(v23 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
        v36 = *(int *)(v35 + 48);
        v37 = (char *)a1 + v36;
        v38 = (char *)a2 + v36;
        v39 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
        *(_OWORD *)((char *)a1 + *(int *)(v35 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v35 + 64));
        break;
      case 1:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
        v9 = *(int *)(v8 + 48);
        v10 = (char *)a1 + v9;
        v11 = (char *)a2 + v9;
        v12 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
        *(_OWORD *)((char *)a1 + *(int *)(v8 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v8 + 64));
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
LABEL_21:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_21;
  }
  return a1;
}

uint64_t type metadata completion function for EncoreEngine.EngineEvent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for EncoreEngineEvent(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for EncoreEngine.ActionMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B4DCF5D4 + 4 * byte_1B4EE9A03[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B4DCF608 + 4 * byte_1B4EE99FE[v4]))();
}

uint64_t sub_1B4DCF608(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DCF610(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4DCF618);
  return result;
}

uint64_t sub_1B4DCF624(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4DCF62CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B4DCF630(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DCF638(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EncoreEngine.ActionMode()
{
  return &type metadata for EncoreEngine.ActionMode;
}

char *initializeBufferWithCopyOfBuffer for EncoreEngine.ActionOutcome(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v8[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = type metadata accessor for FlowUnhandledReason();
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v10 = type metadata accessor for PluginAction();
        (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v11 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v11;
        v12 = a2[2];
        v13 = a2[3];
        *((_QWORD *)a1 + 2) = v12;
        *((_QWORD *)a1 + 3) = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v14 = *a2;
        v15 = v14;
        *(_QWORD *)a1 = v14;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void destroy for EncoreEngine.ActionOutcome(id *a1)
{
  uint64_t v2;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v2 = type metadata accessor for FlowUnhandledReason();
      goto LABEL_4;
    case 1u:
      v2 = type metadata accessor for PluginAction();
LABEL_4:
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
      break;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 3u:

      break;
    default:
      return;
  }
}

_QWORD *initializeWithCopy for EncoreEngine.ActionOutcome(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = type metadata accessor for FlowUnhandledReason();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_7;
    case 1u:
      v7 = type metadata accessor for PluginAction();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_7;
    case 2u:
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      v9 = a2[2];
      v10 = a2[3];
      a1[2] = v9;
      a1[3] = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 3u:
      v11 = (void *)*a2;
      v12 = v11;
      *a1 = v11;
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for EncoreEngine.ActionOutcome(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for EncoreEngine.ActionOutcome);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for FlowUnhandledReason();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_8;
      case 1u:
        v7 = type metadata accessor for PluginAction();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_8;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 3u:
        v8 = (void *)*a2;
        v9 = v8;
        *a1 = v8;
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for EncoreEngine.ActionOutcome(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v8 = type metadata accessor for PluginAction();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for FlowUnhandledReason();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for EncoreEngine.ActionOutcome(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of CamOutput((uint64_t)a1, type metadata accessor for EncoreEngine.ActionOutcome);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for PluginAction();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for FlowUnhandledReason();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for EncoreEngine.ActionOutcome()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for FlowUnhandledReason();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for PluginAction();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for EventQueue()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for AsyncStream();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for AsyncStream.Continuation();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for EventQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventQueue);
}

uint64_t method lookup function for EventQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EventQueue.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1B4DCFDA0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B4DCFDC4()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EncoreEngine.discover(event:)()
{
  return closure #1 in EncoreEngine.discover(event:)();
}

uint64_t partial apply for closure #1 in closure #1 in EncoreEngine.discover(event:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in EncoreEngine.discover(event:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(uint64_t (**)(_QWORD))(v0 + 40));
}

uint64_t partial apply for closure #6 in EncoreEngine.handleExternal(event:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #6 in EncoreEngine.handleExternal(event:)(a1, v4, v5, v7, v6);
}

uint64_t sub_1B4DCFEA4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v16)(unint64_t, uint64_t);

  v1 = (int *)type metadata accessor for SiriRequest(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RequestContinuation(0) - 8) + 80);
  swift_unknownObjectRelease();
  v6 = v0 + v3;
  swift_bridgeObjectRelease();
  v7 = v0 + v3 + v1[5];
  v8 = type metadata accessor for Input();
  v16 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v16(v7, v8);
  swift_release();
  v9 = (uint64_t *)(v6 + v1[7]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    outlined consume of Data._Representation(*v9, v10);
  swift_release();
  v11 = v6 + v1[9];
  v12 = type metadata accessor for SiriRequestIdentities(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v13 = type metadata accessor for IdentifiedUser();
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v11, v13);
    swift_bridgeObjectRelease();
  }
  swift_release();
  type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
    v16(v0 + ((v4 + v5 + 16) & ~v5), v8);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in EncoreEngine.handleExternal(event:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(type metadata accessor for SiriRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RequestContinuation(0) - 8) + 80);
  v8 = (v6 + v7 + 16) & ~v7;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = v1 + v6;
  v13 = *(_QWORD *)(v1 + v6);
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v1 + v8;
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #4 in EncoreEngine.handleExternal(event:)(a1, v9, v10, v11, v13, v14, v15);
}

uint64_t partial apply for closure #1 in EncoreEngine.discover(request:)()
{
  uint64_t v0;

  return closure #1 in EncoreEngine.discover(request:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t **)(v0 + 32), *(_QWORD **)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t objectdestroy_18Tm_0()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t sub_1B4DD0218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RequestContinuation, Error>)
                                      - 8)
                          + 80);
  v2 = (v1 + 88) & ~v1;
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1)
  {

  }
  else
  {
    type metadata accessor for UserInputResult();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v3 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v0 + v2, v3);
    }
    type metadata accessor for RequestContinuation(0);
    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RequestContinuation, Error>)
                                      - 8)
                          + 80);
  v3 = v0 + ((v2 + 88) & ~v2);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 72);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v4 + 120) = v3;
  *(_OWORD *)(v4 + 104) = v5;
  *(_QWORD *)(v4 + 96) = v0 + 32;
  return swift_task_switch();
}

uint64_t sub_1B4DD038C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RequestContinuation(0) - 8) + 80);
  swift_unknownObjectRelease();

  swift_release();
  type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v2 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0 + ((v1 + 56) & ~v1), v2);
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for RequestContinuation(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = v0 + ((v2 + 56) & ~v2);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v5 + 40) = v3;
  *(_QWORD *)(v5 + 48) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in EncoreEngine.push(parentNode:flow:insideEncoreEnvironment:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = EncoreEngine.push(parentNode:flowAgent:)(*(_QWORD **)(v1 + 24), *(_QWORD *)(v1 + 32));
  *a1 = result;
  return result;
}

uint64_t sub_1B4DD0514()
{
  return objectdestroy_2Tm_0((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #5 in EncoreEngine.handleExternal(event:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #5 in EncoreEngine.handleExternal(event:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B4DD052C()
{
  return swift_deallocObject();
}

uint64_t sub_1B4DD053C()
{
  return objectdestroy_2Tm_0((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #3 in EncoreEngine.action(mode:starting:context:completion:)()
{
  uint64_t v0;

  return closure #3 in EncoreEngine.action(mode:starting:context:completion:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t partial apply for closure #1 in EncoreEngine.action(mode:starting:context:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for ConversationContext() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = (uint64_t)(v1 + 4);
  v9 = v1[9];
  v10 = (uint64_t)v1 + v5;
  v11 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in EncoreEngine.action(mode:starting:context:completion:)(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t partial apply for closure #1 in closure #1 in EncoreEngine.action(mode:starting:context:completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in EncoreEngine.action(mode:starting:context:completion:)(a1, v5, v4);
}

uint64_t partial apply for specialized closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch();
}

uint64_t sub_1B4DD0704()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(type metadata accessor for EncoreEngine.ActionOutcome(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<ConversationCommitResult, Error>)
                                      - 8)
                          + 80);
  v5 = (v3 + v4 + 16) & ~v4;
  swift_unknownObjectRelease();
  v6 = (id *)(v0 + v2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v7 = type metadata accessor for FlowUnhandledReason();
      goto LABEL_6;
    case 1u:
      v7 = type metadata accessor for PluginAction();
LABEL_6:
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      break;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 3u:

      break;
    default:
      break;
  }
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1)
  {

  }
  else
  {
    type metadata accessor for ConversationCommitResult();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 1u:
        v8 = type metadata accessor for FlowUnhandledReason();
        goto LABEL_12;
      case 2u:
        v8 = type metadata accessor for PluginAction();
LABEL_12:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v5, v8);
        break;
      default:
        return swift_deallocObject();
    }
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #5 in EncoreEngine.handleExternal(event:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(type metadata accessor for EncoreEngine.ActionOutcome(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<ConversationCommitResult, Error>)
                                      - 8)
                          + 80);
  v8 = (v6 + v7 + 16) & ~v7;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = v1 + v6;
  v13 = *(_QWORD *)(v1 + v6);
  v14 = *(_QWORD *)(v12 + 8);
  v15 = v1 + v8;
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #5 in EncoreEngine.handleExternal(event:)(a1, v9, v10, v11, v13, v14, v15);
}

uint64_t sub_1B4DD09B4()
{
  return objectdestroy_2Tm_0((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #2 in EncoreEngine.action(mode:starting:context:completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(uint64_t (**)(uint64_t))(v1 + 24);
  swift_beginAccess();
  *(_BYTE *)(v3 + 16) = 1;
  return v4(a1);
}

uint64_t objectdestroy_47Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for ConversationContext();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in EventQueue.init()(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in EventQueue.init()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t closure #3 in EncoreEngine.action(mode:starting:context:completion:)partial apply()
{
  return partial apply for closure #3 in EncoreEngine.action(mode:starting:context:completion:)();
}

uint64_t static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = one-time initialization token for $conversationContext;
  v1 = swift_retain();
  if (v0 != -1)
    v1 = swift_once();
  MEMORY[0x1E0C80A78](v1);
  swift_retain();
  TaskLocal.withValue<A>(_:operation:file:line:)();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = one-time initialization token for $conversationContext;
  swift_retain();
  if (v2 != -1)
  {
    swift_once();
    v1 = *(_QWORD *)(v0 + 32);
  }
  v3 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 16) = v1;
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  v5 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v5;
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:);
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return swift_task_switch();
}

uint64_t one-time initialization function for $conversationContext()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskLocal<EncoreConversationContext?>);
  swift_allocObject();
  result = TaskLocal.init(wrappedValue:)();
  static EncoreEnvironment.$conversationContext = result;
  return result;
}

uint64_t *EncoreEnvironment.$conversationContext.unsafeMutableAddressor()
{
  if (one-time initialization token for $conversationContext != -1)
    swift_once();
  return &static EncoreEnvironment.$conversationContext;
}

uint64_t static EncoreEnvironment.$conversationContext.getter()
{
  if (one-time initialization token for $conversationContext != -1)
    swift_once();
  return swift_retain();
}

uint64_t static EncoreEnvironment.conversationContext.getter()
{
  uint64_t v1;

  if (one-time initialization token for $conversationContext != -1)
    swift_once();
  TaskLocal.get()();
  return v1;
}

uint64_t closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)()
{
  type metadata accessor for SiriEnvironment();
  ActingFlowAgent.environment.getter();
  static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
  return swift_release();
}

{
  uint64_t v0;
  _QWORD *v1;

  type metadata accessor for SiriEnvironment();
  *(_QWORD *)(v0 + 56) = ActingFlowAgent.environment.getter();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:);
  return static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t partial apply for closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)()
{
  return closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)();
}

uint64_t closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = swift_task_alloc();
  v7 = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  *(_QWORD *)(v6 + 40) = v5;
  *(_QWORD *)(v6 + 48) = v4;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch();
}

ValueMetadata *type metadata accessor for EncoreConversationContext()
{
  return &type metadata for EncoreConversationContext;
}

ValueMetadata *type metadata accessor for EncoreEnvironment()
{
  return &type metadata for EncoreEnvironment;
}

const char *EncoreFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *EncoreFeatureFlag.feature.getter()
{
  return "encore";
}

uint64_t EncoreFeatureFlag.isEnabled.getter()
{
  char v0;
  _BYTE v2[24];
  ValueMetadata *v3;
  unint64_t v4;

  v3 = &type metadata for EncoreFeatureFlag;
  v4 = lazy protocol witness table accessor for type EncoreFeatureFlag and conformance EncoreFeatureFlag();
  v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return v0 & 1;
}

unint64_t lazy protocol witness table accessor for type EncoreFeatureFlag and conformance EncoreFeatureFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncoreFeatureFlag and conformance EncoreFeatureFlag;
  if (!lazy protocol witness table cache variable for type EncoreFeatureFlag and conformance EncoreFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for EncoreFeatureFlag, &type metadata for EncoreFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncoreFeatureFlag and conformance EncoreFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EncoreFeatureFlag and conformance EncoreFeatureFlag;
  if (!lazy protocol witness table cache variable for type EncoreFeatureFlag and conformance EncoreFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for EncoreFeatureFlag, &type metadata for EncoreFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncoreFeatureFlag and conformance EncoreFeatureFlag);
  }
  return result;
}

uint64_t static EncoreFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void EncoreFeatureFlag.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int EncoreFeatureFlag.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance EncoreFeatureFlag()
{
  return "encore";
}

uint64_t storeEnumTagSinglePayload for EncoreFeatureFlag(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4DD1328 + 4 * asc_1B4EE9E00[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4DD1348 + 4 * byte_1B4EE9E05[v4]))();
}

_BYTE *sub_1B4DD1328(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4DD1348(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4DD1350(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4DD1358(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4DD1360(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4DD1368(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for EncoreFeatureFlag()
{
  return &type metadata for EncoreFeatureFlag;
}

uint64_t EndpointInfoProvider.__allocating_init(endpointInfo:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

void *EndpointInfoProvider.endpointInfo.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t EndpointInfoProvider.init(endpointInfo:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

Swift::String_optional __swiftcall EndpointInfoProvider.getIdentifier()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = EndpointInfoProvider.getIdentifier()((SEL *)&selRef_identifier);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall EndpointInfoProvider.getMediaRouteIdentifier()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = EndpointInfoProvider.getIdentifier()((SEL *)&selRef_mediaRouteIdentifier);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

uint64_t EndpointInfoProvider.getIdentifier()(SEL *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;

  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v2 = objc_msgSend(*(id *)(v1 + 16), *a1);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t EndpointInfoProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t method lookup function for EndpointInfoProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EndpointInfoProvider.__allocating_init(endpointInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of EndpointInfoProvider.getIdentifier()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of EndpointInfoProvider.getMediaRouteIdentifier()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

id ExecuteNLOnServerMessage.toSARDExecuteNLOnServer(rcState:requestType:refId:)(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  void *v10;

  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88350]), sel_init);
  v10 = v8;
  specialized ExecuteNLOnServerMessage.populateExecuteNLOnServer<A>(executeNLOnServer:rcState:requestType:refId:)(&v10, a1, a2, a3, a4);
  return v8;
}

void specialized ExecuteNLOnServerMessage.populateExecuteNLOnServer<A>(executeNLOnServer:rcState:requestType:refId:)(void **a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  Class isa;
  int64_t v42;
  void (*v43)(int64_t, uint64_t, uint64_t);
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  int64_t v66;
  unint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  void *v74;
  id v75;
  uint64_t v76;
  id v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void (*v84)(char *, uint64_t);
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  void *v89;
  Swift::String v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v95;
  char v96;
  char v97;
  char v98;
  unint64_t v99;
  void *v100;
  Swift::String v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  char *v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  const char *v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  void *v127;
  Class v128;
  Class v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  NSDictionary v139;
  void *v140;
  uint64_t v141;
  id object;
  int64_t v143;
  unint64_t countAndFlagsBits;
  uint64_t v145;
  char *v146;
  void **v147;
  char *v148;
  int64_t v149;
  uint64_t v150;
  __int128 v151;
  char *v152;
  uint64_t v153;
  id v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  int64_t v159;
  uint64_t v160;
  char *v161;

  v153 = a5;
  v150 = a3;
  *(_QWORD *)&v151 = a4;
  v149 = a2;
  v6 = type metadata accessor for UserID();
  v156 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v155 = (char *)&v141 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v152 = (char *)&v141 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage)?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v158 = (char *)&v141 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v157 = (uint64_t)&v141 - v13;
  v14 = type metadata accessor for RequestType();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v148 = (char *)&v141 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v146 = (char *)&v141 - v19;
  MEMORY[0x1E0C80A78](v18);
  v159 = (int64_t)&v141 - v20;
  v21 = type metadata accessor for UUID();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v141 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a1;
  UUID.init()();
  v26 = UUID.uuidString.getter();
  v28 = v27;
  v29 = *(void (**)(char *, uint64_t))(v22 + 8);
  v30 = v150;
  v29(v24, v21);
  v31 = (void *)MEMORY[0x1B5E432E8](v26, v28);
  swift_bridgeObjectRelease();
  v32 = v25;
  v33 = v14;
  objc_msgSend(v32, sel_setAceId_, v31);

  v147 = a1;
  v34 = *a1;
  v35 = (void *)MEMORY[0x1B5E432E8](v151, v153);
  objc_msgSend(v34, sel_setRefId_, v35);

  v36 = v154;
  v37 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v38 = (void *)MEMORY[0x1B5E432E8](v37);
  swift_bridgeObjectRelease();
  objc_msgSend(v34, sel_setResultCandidateId_, v38);

  v39 = ExecuteNLOnServerMessageBase.delegatedUserDialogActs.getter();
  v40 = v36;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D36_Nlu_External_DelegatedUserDialogActVG_So07SARDAcehijK0Cs5NeverOTg504_s16d215MessageTypes017ExecuteNLOnServerB0C0A10KitRuntimeE08populatedeF0012_5D0D35F2EC9L19E34FFD49FF2EFDE053307executeeF07rcState11requestType5refIdyxz_AD015ResultCandidateT0CAA07RequestV0OSStSo011SARDExecuteeF0CRbzlFSo29lhijku15A8NLUTypes0A36_f1_g1_hijK6VXEfU_0dO5Types0qrsO0CTf1cn_nTf4ng_n(v39);
  swift_bridgeObjectRelease();

  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDAceDelegatedUserDialogAct);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v34, sel_setAceDelegatedUserDialogActList_, isa);

  v42 = v159;
  v43 = *(void (**)(int64_t, uint64_t, uint64_t))(v15 + 16);
  v43(v159, v30, v33);
  v44 = (*(uint64_t (**)(int64_t, uint64_t))(v15 + 88))(v42, v33);
  if (v44 != *MEMORY[0x1E0D9E8A0])
  {
    if (v44 == *MEMORY[0x1E0D9E888])
    {
LABEL_59:
      v111 = (*(uint64_t (**)(void))(*(_QWORD *)v149 + 856))();
      if (v112)
      {
        v113 = (void *)MEMORY[0x1B5E432E8](v111);
        swift_bridgeObjectRelease();
      }
      else
      {
        v113 = 0;
      }
      objc_msgSend(v34, sel_setUtterance_, v113);

      objc_msgSend(v34, sel_setRequestType_, *MEMORY[0x1E0D88FB8]);
      return;
    }
    if (v44 != *MEMORY[0x1E0D9E868])
    {
      if (v44 == *MEMORY[0x1E0D9E860])
      {
        v130 = objc_msgSend(v34, sel_setRequestType_, *MEMORY[0x1E0D88FA8]);
        v131 = (*(uint64_t (**)(id))(*(_QWORD *)v149 + 880))(v130);
        if (v132 != 1)
        {
          v137 = v131;
          v138 = v132;
          if (v133)
          {
            swift_bridgeObjectRetain();
            v139.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          else
          {
            v139.super.isa = 0;
          }
          objc_msgSend(v34, sel_setRequestExecutionParameters_, v139.super.isa);

          if (v138)
          {
            swift_bridgeObjectRetain();
            v140 = (void *)MEMORY[0x1B5E432E8](v137, v138);
            swift_bridgeObjectRelease_n();
          }
          else
          {
            v140 = 0;
          }
          swift_bridgeObjectRelease();
          objc_msgSend(v34, sel_setDirectAction_, v140);

          return;
        }
        if (one-time initialization token for conversationBridge != -1)
          swift_once();
        v134 = type metadata accessor for Logger();
        __swift_project_value_buffer(v134, (uint64_t)static Logger.conversationBridge);
        v115 = v146;
        v43((int64_t)v146, v30, v33);
        v116 = Logger.logObject.getter();
        v117 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v116, v117))
        {
          v118 = (uint8_t *)swift_slowAlloc();
          v119 = swift_slowAlloc();
          v161 = (char *)v119;
          *(_DWORD *)v118 = 136315138;
          v135 = RequestType.rawValue.getter();
          v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v136, (uint64_t *)&v161);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v15 + 8))(v115, v33);
          v122 = "Could not cast ResultCandidateState to DirectActionResultCandidateState even though requestType: %s";
          goto LABEL_67;
        }
LABEL_79:
        (*(void (**)(char *, uint64_t))(v15 + 8))(v115, v33);

        return;
      }
      if (v44 != *MEMORY[0x1E0D9E890] && v44 != *MEMORY[0x1E0D9E880])
      {
        if (v44 == *MEMORY[0x1E0D9E8A8])
          goto LABEL_59;
        if (v44 != *MEMORY[0x1E0D9E898] && v44 != *MEMORY[0x1E0D9E8B8] && v44 != *MEMORY[0x1E0D9E870])
          (*(void (**)(int64_t, uint64_t))(v15 + 8))(v42, v33);
      }
    }
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v114 = type metadata accessor for Logger();
    __swift_project_value_buffer(v114, (uint64_t)static Logger.conversationBridge);
    v115 = v148;
    v43((int64_t)v148, v30, v33);
    v116 = Logger.logObject.getter();
    v117 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v116, v117))
    {
      v118 = (uint8_t *)swift_slowAlloc();
      v119 = swift_slowAlloc();
      v161 = (char *)v119;
      *(_DWORD *)v118 = 136315138;
      v120 = RequestType.rawValue.getter();
      v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v121, (uint64_t *)&v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v115, v33);
      v122 = "Should not have received requestType: %s for server fallback";
LABEL_67:
      _os_log_impl(&dword_1B4BE6000, v116, v117, v122, v118, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v119, -1, -1);
      MEMORY[0x1B5E44758](v118, -1, -1);

      return;
    }
    goto LABEL_79;
  }
  v45 = MEMORY[0x1E0DEE9D8];
  v46 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v47 = specialized Dictionary.init(dictionaryLiteral:)(v45);
  v48 = *(_QWORD *)(ExecuteNLOnServerMessage.sharedUserIdToSpeechPackage.getter() + 16);
  swift_bridgeObjectRelease();
  if (!v48)
  {
    if (one-time initialization token for conversationBridge != -1)
      goto LABEL_97;
    goto LABEL_69;
  }
  v145 = v46;
  v146 = (char *)v47;
  v154 = v40;
  v49 = ExecuteNLOnServerMessage.sharedUserIdToSpeechPackage.getter();
  v159 = 0;
  v51 = *(_QWORD *)(v49 + 64);
  v148 = (char *)(v49 + 64);
  v153 = v49;
  v52 = 1 << *(_BYTE *)(v49 + 32);
  v53 = -1;
  if (v52 < 64)
    v53 = ~(-1 << v52);
  v54 = v53 & v51;
  v149 = (unint64_t)(v52 + 63) >> 6;
  v143 = v149 - 1;
  *(_QWORD *)&v50 = 136315394;
  v151 = v50;
  v150 = MEMORY[0x1E0DEE9B8] + 8;
  v56 = v155;
  v55 = v156;
  v57 = v152;
  v58 = (uint64_t)v158;
  if ((v53 & v51) == 0)
    goto LABEL_8;
LABEL_6:
  v59 = __clz(__rbit64(v54));
  v54 &= v54 - 1;
  v60 = v59 | (v159 << 6);
LABEL_7:
  v61 = v153;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v55 + 16))(v58, *(_QWORD *)(v153 + 48) + *(_QWORD *)(v55 + 72) * v60, v6);
  v62 = *(_QWORD *)(v61 + 56);
  v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage));
  v64 = *(void **)(v62 + 8 * v60);
  *(_QWORD *)(v58 + *(int *)(v63 + 48)) = v64;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v58, 0, 1, v63);
  v65 = v64;
  while (1)
  {
    v70 = v157;
    outlined init with take of (key: UserID, value: AFSpeechPackage)?(v58, v157);
    v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 48))(v70, 1, v71) == 1)
    {
      swift_release();
      goto LABEL_72;
    }
    v72 = *(void **)(v70 + *(int *)(v71 + 48));
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v57, v70, v6);
    v73 = objc_msgSend(v72, sel_recognition);
    if (!v73)
      goto LABEL_33;
    v74 = v73;
    v75 = objc_msgSend(v72, sel_rawRecognition);
    if (v75)
    {
      v89 = v75;
      UserID.sharedUserId.getter();
      v90 = String.lowercased()();
      countAndFlagsBits = v90._countAndFlagsBits;
      swift_bridgeObjectRelease();
      v91 = objc_msgSend(v74, sel_aceRecognition);
      if (v91)
      {
        v92 = (uint64_t)v91;
        v93 = v145;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v161 = (char *)v93;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v92, countAndFlagsBits, (uint64_t)v90._object, isUniquelyReferenced_nonNull_native);
        v145 = (uint64_t)v161;
      }
      else
      {
        v95 = v145;
        swift_bridgeObjectRetain();
        countAndFlagsBits = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)v90._object);
        v97 = v96;
        swift_bridgeObjectRelease();
        if ((v97 & 1) == 0)
        {
LABEL_48:
          swift_bridgeObjectRelease();
          UserID.sharedUserId.getter();
          v101 = String.lowercased()();
          countAndFlagsBits = (unint64_t)v101._object;
          swift_bridgeObjectRelease();
          v102 = objc_msgSend(v89, sel_aceRecognition);
          if (v102)
          {
            v103 = (uint64_t)v102;
            v104 = (uint64_t)v146;
            v105 = swift_isUniquelyReferenced_nonNull_native();
            v161 = (char *)v104;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v103, v101._countAndFlagsBits, countAndFlagsBits, v105);
            v146 = v161;

            swift_bridgeObjectRelease();
          }
          else
          {
            v106 = (uint64_t)v146;
            swift_bridgeObjectRetain();
            v107 = specialized __RawDictionaryStorage.find<A>(_:)(v101._countAndFlagsBits, countAndFlagsBits);
            v109 = v108;
            swift_bridgeObjectRelease();
            if ((v109 & 1) != 0)
            {
              v110 = swift_isUniquelyReferenced_nonNull_native();
              v161 = (char *)v106;
              v58 = (uint64_t)v158;
              if ((v110 & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                v106 = (uint64_t)v161;
              }
              swift_bridgeObjectRelease();
              object = *(id *)(*(_QWORD *)(v106 + 56) + 8 * v107);
              v146 = (char *)v106;
              specialized _NativeDictionary._delete(at:)(v107, v106);

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_57;
            }

          }
          swift_bridgeObjectRelease();
          v58 = (uint64_t)v158;
LABEL_57:
          v57 = v152;
          (*(void (**)(char *, uint64_t))(v55 + 8))(v152, v6);
          goto LABEL_39;
        }
        object = v90._object;
        v98 = swift_isUniquelyReferenced_nonNull_native();
        v161 = (char *)v95;
        if ((v98 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v95 = (uint64_t)v161;
        }
        v99 = countAndFlagsBits;
        swift_bridgeObjectRelease();
        v100 = *(void **)(*(_QWORD *)(v95 + 56) + 8 * v99);
        v145 = v95;
        specialized _NativeDictionary._delete(at:)(v99, v95);

      }
      swift_bridgeObjectRelease();
      goto LABEL_48;
    }

LABEL_33:
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v76 = type metadata accessor for Logger();
    __swift_project_value_buffer(v76, (uint64_t)static Logger.conversationBridge);
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v56, v57, v6);
    v77 = v154;
    v78 = Logger.logObject.getter();
    v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      v80 = swift_slowAlloc();
      v81 = swift_slowAlloc();
      v161 = (char *)v81;
      *(_DWORD *)v80 = v151;
      lazy protocol witness table accessor for type UserID and conformance UserID();
      v82 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v80 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, (uint64_t *)&v161);
      swift_bridgeObjectRelease();
      v84 = *(void (**)(char *, uint64_t))(v156 + 8);
      v84(v155, v6);
      *(_WORD *)(v80 + 12) = 2080;
      v85 = RequestMessageBase.requestId.getter();
      *(_QWORD *)(v80 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, (uint64_t *)&v161);

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v78, v79, "Since MultiUserAFSpeechPackage does not contain a pre-itn and post-itn recognitions for user : %s, hence SARDExecuteNLOnServer will not contain them either for requestId : %s", (uint8_t *)v80, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v81, -1, -1);
      v87 = v80;
      v57 = v152;
      MEMORY[0x1B5E44758](v87, -1, -1);

      v84(v57, v6);
      v56 = v155;
      v55 = v156;
    }
    else
    {

      v88 = *(void (**)(char *, uint64_t))(v55 + 8);
      v88(v56, v6);
      v88(v57, v6);
    }
    v58 = (uint64_t)v158;
LABEL_39:
    if (v54)
      goto LABEL_6;
LABEL_8:
    v66 = v159 + 1;
    if (__OFADD__(v159, 1))
      break;
    if (v66 < v149)
    {
      v67 = *(_QWORD *)&v148[8 * v66];
      if (v67)
        goto LABEL_11;
      v68 = v159 + 2;
      ++v159;
      if (v66 + 1 < v149)
      {
        v67 = *(_QWORD *)&v148[8 * v68];
        if (v67)
          goto LABEL_14;
        v159 = v66 + 1;
        if (v66 + 2 < v149)
        {
          v67 = *(_QWORD *)&v148[8 * v66 + 16];
          if (v67)
          {
            v66 += 2;
            goto LABEL_11;
          }
          v159 = v66 + 2;
          if (v66 + 3 < v149)
          {
            v67 = *(_QWORD *)&v148[8 * v66 + 24];
            if (v67)
            {
              v66 += 3;
              goto LABEL_11;
            }
            v68 = v66 + 4;
            v159 = v66 + 3;
            if (v66 + 4 < v149)
            {
              v67 = *(_QWORD *)&v148[8 * v68];
              if (!v67)
              {
                while (1)
                {
                  v66 = v68 + 1;
                  if (__OFADD__(v68, 1))
                    break;
                  if (v66 >= v149)
                  {
                    v159 = v143;
                    goto LABEL_28;
                  }
                  v67 = *(_QWORD *)&v148[8 * v66];
                  ++v68;
                  if (v67)
                    goto LABEL_11;
                }
                __break(1u);
                return;
              }
LABEL_14:
              v66 = v68;
LABEL_11:
              v54 = (v67 - 1) & v67;
              v60 = __clz(__rbit64(v67)) + (v66 << 6);
              v159 = v66;
              goto LABEL_7;
            }
          }
        }
      }
    }
LABEL_28:
    v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v58, 1, 1, v69);
    v54 = 0;
  }
  __break(1u);
LABEL_97:
  swift_once();
LABEL_69:
  v123 = type metadata accessor for Logger();
  __swift_project_value_buffer(v123, (uint64_t)static Logger.conversationBridge);
  v124 = Logger.logObject.getter();
  v125 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v124, v125))
  {
    v126 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v126 = 0;
    _os_log_impl(&dword_1B4BE6000, v124, v125, "SharedUserIdToSpeechPackage property on ENOSMessage is empty for a speech request. Sending empty dictionary to server.", v126, 2u);
    MEMORY[0x1B5E44758](v126, -1, -1);
  }

LABEL_72:
  v127 = *v147;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SASRecognition);
  v128 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v127, sel_setRecognitionSausageMap_, v128);

  v129 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v127, sel_setPreITNRecognitionSausageMap_, v129);

  objc_msgSend(v127, sel_setRequestType_, *MEMORY[0x1E0D88FB0]);
}

id ExecuteNLOnServerMessage.toSARDMUXExecuteNLOnServer(rcState:requestType:refId:)(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void (*v17)(void);
  id v18;
  char v19;
  uint64_t countAndFlagsBits;
  void *v21;
  void *v23;

  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88360]), sel_init);
  v23 = v8;
  specialized ExecuteNLOnServerMessage.populateExecuteNLOnServer<A>(executeNLOnServer:rcState:requestType:refId:)(&v23, a1, a2, a3, a4);
  v9 = v8;
  objc_msgSend(v9, sel_setMuxStateRollback_, ExecuteNLOnServerMessage.isMuxStateRollback.getter() & 1);

  v10 = v9;
  v11 = ExecuteNLOnServerMessage.mostRecentVoiceIdScoreCard.getter();
  if (v11)
  {
    v12 = (void *)v11;
    v13 = AFVoiceIdScoreCard.toSAConfidenceScores()();

  }
  else
  {
    v13 = 0;
  }
  objc_msgSend(v10, sel_setVoiceIDConfidenceScores_, v13);

  objc_msgSend(v10, sel_setMarkedForHandOff_, 0);
  v14 = v10;
  v15 = UserID.sharedUserId.getter();
  v16 = (void *)MEMORY[0x1B5E432E8](v15);
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_setSelectedUserId_, v16);

  v17 = *(void (**)(void))(*(_QWORD *)a1 + 736);
  v18 = v14;
  v17();
  if ((v19 & 1) != 0)
  {
    v21 = 0;
  }
  else
  {
    countAndFlagsBits = AFUserIdentityClassfication.toAceUserIdentityClassification()()._countAndFlagsBits;
    v21 = (void *)MEMORY[0x1B5E432E8](countAndFlagsBits);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v18, sel_setSelectedUserIdentityClassification_, v21);

  return v18;
}

void closure #1 in ExecuteNLOnServerMessage.populateExecuteNLOnServer<A>(executeNLOnServer:rcState:requestType:refId:)(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  v19 = a1;
  v18 = type metadata accessor for Siri_Nlu_External_RewriteMessage();
  v1 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Google_Protobuf_StringValue();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88340]), sel_init);
  objc_msgSend(v8, sel_setAsrHypothesisIndex_, Siri_Nlu_External_DelegatedUserDialogAct.asrHypothesisIndex.getter());
  v9 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
  v10 = (void *)MEMORY[0x1B5E432E8](v9);
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setExternalParserId_, v10);

  Siri_Nlu_External_DelegatedUserDialogAct.rewrittenUtterance.getter();
  v11 = Google_Protobuf_StringValue.value.getter();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0)
    v14 = v11 & 0xFFFFFFFFFFFFLL;
  if (v14)
    v15 = (void *)MEMORY[0x1B5E432E8](v11, v13);
  else
    v15 = 0;
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setRewrittenUtterance_, v15);

  if ((Siri_Nlu_External_DelegatedUserDialogAct.hasRewrite.getter() & 1) != 0)
  {
    Siri_Nlu_External_DelegatedUserDialogAct.rewrite.getter();
    v16 = specialized ExecuteNLOnServerMessage.convert(rewriteMessage:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v18);
  }
  else
  {
    v16 = 0;
  }
  v17 = v19;
  objc_msgSend(v8, sel_setRewriteMessage_, v16, v18);

  *v17 = v8;
}

id specialized ExecuteNLOnServerMessage.convert(rewriteMessage:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v17;

  v0 = type metadata accessor for Siri_Nlu_External_RewriteMessage.RewriteType();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = Siri_Nlu_External_RewriteMessage.rewrittenUtterance.getter();
  v6 = v5;
  v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v7 = v4 & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    v8 = v4;
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88348]), sel_init);
    v10 = (void *)MEMORY[0x1B5E432E8](v8, v6);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setRewrittenUtterance_, v10);

    Siri_Nlu_External_RewriteMessage.rewriteType.getter();
    v11 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
    if (v11 == *MEMORY[0x1E0D9F540])
    {
      objc_msgSend(v9, sel_setRewriteType_, *MEMORY[0x1E0D88F90]);
    }
    else if (v11 == *MEMORY[0x1E0D9F548])
    {
      objc_msgSend(v9, sel_setRewriteType_, *MEMORY[0x1E0D88F98]);
    }
    else
    {
      objc_msgSend(v9, sel_setRewriteType_, *MEMORY[0x1E0D88FA0]);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v13, v14, "Recevied empty rewrittenUtterance inside RewriteMessage", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

    return 0;
  }
  return v9;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D36_Nlu_External_DelegatedUserDialogActVG_So07SARDAcehijK0Cs5NeverOTg504_s16d215MessageTypes017ExecuteNLOnServerB0C0A10KitRuntimeE08populatedeF0012_5D0D35F2EC9L19E34FFD49FF2EFDE0533LL07executeeF07rcState11requestType5refIdyxz_AD015ResultCandidateT0CAA07RequestV0OSStSo011SARDExecuteeF0CRbzlFSo29lhijku15A8NLUTypes0A36_f1_g1_hijK6VXEfU_0dO5Types0qrsO0CTf1cn_nTf4ng_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v4)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v6 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct() - 8);
    v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v8 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      closure #1 in ExecuteNLOnServerMessage.populateExecuteNLOnServer<A>(executeNLOnServer:rcState:requestType:refId:)(&v9);
      if (v2)
        break;
      v2 = 0;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v7 += v8;
      if (!--v4)
        return v10;
    }
    return swift_release();
  }
  return result;
}

uint64_t outlined init with take of (key: UserID, value: AFSpeechPackage)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void static ExecuteOnRemoteCmds.includes(_:)()
{
  __asm { BR              X8 }
}

void ExecuteOnRemoteCmds.cmdType.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B4DD2F04()
{
  return type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
}

void ExecuteOnRemoteCmds.isSameType(_:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

id sub_1B4DD3018()
{
  void *v0;

  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  return objc_msgSend(v0, sel_isKindOfClass_, swift_getObjCClassFromMetadata());
}

void *static ExecuteOnRemoteCmds.allCases.getter()
{
  return &outlined read-only object #0 of static ExecuteOnRemoteCmds.allCases.getter;
}

uint64_t ExecuteOnRemoteCmds.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4DD3168 + 4 * byte_1B4EE9F61[a1]))(0x6569566563414153, 0xE900000000000077);
}

unint64_t sub_1B4DD3168()
{
  return 0xD000000000000012;
}

unint64_t sub_1B4DD3264()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExecuteOnRemoteCmds(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = ExecuteOnRemoteCmds.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == ExecuteOnRemoteCmds.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExecuteOnRemoteCmds()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  ExecuteOnRemoteCmds.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExecuteOnRemoteCmds()
{
  unsigned __int8 *v0;

  ExecuteOnRemoteCmds.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExecuteOnRemoteCmds()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  ExecuteOnRemoteCmds.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ExecuteOnRemoteCmds@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ExecuteOnRemoteCmds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ExecuteOnRemoteCmds@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ExecuteOnRemoteCmds.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ExecuteOnRemoteCmds(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ExecuteOnRemoteCmds.allCases.getter;
}

unint64_t specialized ExecuteOnRemoteCmds.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExecuteOnRemoteCmds.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB)
    return 11;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type ExecuteOnRemoteCmds and conformance ExecuteOnRemoteCmds()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExecuteOnRemoteCmds and conformance ExecuteOnRemoteCmds;
  if (!lazy protocol witness table cache variable for type ExecuteOnRemoteCmds and conformance ExecuteOnRemoteCmds)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ExecuteOnRemoteCmds, &type metadata for ExecuteOnRemoteCmds);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecuteOnRemoteCmds and conformance ExecuteOnRemoteCmds);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ExecuteOnRemoteCmds] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ExecuteOnRemoteCmds] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ExecuteOnRemoteCmds] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ExecuteOnRemoteCmds]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ExecuteOnRemoteCmds] and conformance [A]);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ExecuteOnRemoteCmds(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ExecuteOnRemoteCmds(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1B4DD3624 + 4 * byte_1B4EE9F71[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1B4DD3658 + 4 * byte_1B4EE9F6C[v4]))();
}

uint64_t sub_1B4DD3658(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DD3660(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4DD3668);
  return result;
}

uint64_t sub_1B4DD3674(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4DD367CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1B4DD3680(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DD3688(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExecuteOnRemoteCmds()
{
  return &type metadata for ExecuteOnRemoteCmds;
}

uint64_t static ServiceBridgeDelegate.defaultSubmitExternalActivationRequest(withRequestInfo:serviceHelper:completion:)(uint64_t a1, id a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  void *v9;
  _QWORD v10[6];

  result = (uint64_t)objc_msgSend(a2, sel_respondsToSelector_, sel_submitExternalActivationRequest_completion_);
  if ((result & 1) != 0)
  {
    v10[4] = a3;
    v10[5] = a4;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    v10[3] = &block_descriptor_10;
    v9 = _Block_copy(v10);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(a2, sel_submitExternalActivationRequest_completion_, a1, v9);
    _Block_release(v9);
    return swift_unknownObjectRelease();
  }
  return result;
}

void static ServiceBridgeDelegate.prepareForAudioHandoffFailedDefault(_:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  static ServiceBridgeDelegate.prepareForAudioHandoffDefault(_:completion:)(a1, a2, a3, a4, a5, (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> (), (uint64_t)&block_descriptor_6_0, (SEL *)&selRef_prepareForAudioHandoffFailedWithCompletion_);
}

id ExecutionContextUpdate.__allocating_init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10)
{
  objc_class *v10;
  id v19;
  id v20;

  v19 = objc_allocWithZone(v10);
  v20 = specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10);

  return v20;
}

uint64_t static ExecutionContextUpdate.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static ExecutionContextUpdate.supportsSecureCoding;
}

uint64_t static ExecutionContextUpdate.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static ExecutionContextUpdate.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ExecutionContextUpdate.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

void *ExecutionContextUpdate.provideContextCommand.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___SKRExecutionContextUpdate_provideContextCommand);
  v2 = v1;
  return v1;
}

void *ExecutionContextUpdate.nativeFlowContextCommand.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___SKRExecutionContextUpdate_nativeFlowContextCommand);
  v2 = v1;
  return v1;
}

uint64_t ExecutionContextUpdate.nluSystemDialogActs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ExecutionContextUpdate.nluActiveTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ExecutionContextUpdate.nluCompletedTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ExecutionContextUpdate.undoDirectInvocation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR___SKRExecutionContextUpdate_undoDirectInvocation, a1, &demangling cache variable for type metadata for Parse.DirectInvocation?);
}

uint64_t ExecutionContextUpdate.rrEntities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ExecutionContextUpdate.pommesContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR___SKRExecutionContextUpdate_pommesContext, a1, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
}

uint64_t ExecutionContextUpdate.contextUpdateScope.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t updated;

  v3 = v1 + OBJC_IVAR___SKRExecutionContextUpdate_contextUpdateScope;
  updated = type metadata accessor for ContextUpdateScope();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 16))(a1, v3, updated);
}

uint64_t ExecutionContextUpdate.restoreSessionForRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId);
  swift_bridgeObjectRetain();
  return v1;
}

id ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id v13;

  v13 = specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);

  return v13;
}

uint64_t ExecutionContextUpdate.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4DD3BA4
                                                                     + 4 * aK[a1]))(0xD000000000000015, 0x80000001B4EF4BB0);
}

unint64_t sub_1B4DD3BA4()
{
  return 0xD000000000000010;
}

uint64_t sub_1B4DD3BC0()
{
  uint64_t v0;

  return v0 + 8;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExecutionContextUpdate.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = ExecutionContextUpdate.CodingKeys.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == ExecutionContextUpdate.CodingKeys.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExecutionContextUpdate.CodingKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  ExecutionContextUpdate.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExecutionContextUpdate.CodingKeys()
{
  unsigned __int8 *v0;

  ExecutionContextUpdate.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExecutionContextUpdate.CodingKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  ExecutionContextUpdate.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ExecutionContextUpdate.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ExecutionContextUpdate.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ExecutionContextUpdate.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ExecutionContextUpdate.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ExecutionContextUpdate.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ExecutionContextUpdate.init(coder:)(a1);
}

Swift::Void __swiftcall ExecutionContextUpdate.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  Class v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  Class v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Class v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  Class v55;
  void *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  Class v70;
  void *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  Class v75;
  void *v76;
  uint64_t updated;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  objc_class *isa;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;

  v2 = v1;
  v89 = type metadata accessor for Siri_Nlu_External_Task();
  v91 = *(_QWORD *)(v89 - 8);
  v4 = MEMORY[0x1E0C80A78](v89);
  v87 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v88 = (char *)&v82 - v6;
  v7 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_provideContextCommand);
  v12 = (void *)MEMORY[0x1B5E432E8](0xD000000000000015, 0x80000001B4EF4BB0);
  v13 = &selRef_reason;
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11, v12);

  v14 = *(_QWORD *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_nluSystemDialogActs);
  isa = with.super.isa;
  v84 = v2;
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = v14 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      v17 = *(_QWORD *)(v8 + 72);
      v90 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
      v82 = v14;
      swift_bridgeObjectRetain();
      v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v85 = v17;
      v86 = v8;
      do
      {
        v90(v10, v16, v7);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F6B0], MEMORY[0x1E0D9F688]);
        v19 = Message.serializedData(partial:)();
        v21 = v20;
        outlined copy of Data._Representation(v19, v20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
        v23 = v18[2];
        v22 = v18[3];
        if (v23 >= v22 >> 1)
          v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v18);
        v18[2] = v23 + 1;
        v24 = &v18[2 * v23];
        v24[4] = v19;
        v24[5] = v21;
        outlined consume of Data._Representation(v19, v21);
        v25 = v85;
        (*(void (**)(char *, uint64_t))(v86 + 8))(v10, v7);
        v16 += v25;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease();
      with.super.isa = isa;
    }
    v26 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v27 = (void *)MEMORY[0x1B5E432E8](0xD000000000000013, 0x80000001B4EF4C30);
    v13 = &selRef_reason;
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v26, v27);

    v2 = v84;
  }
  v28 = *(_QWORD *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_nativeFlowContextCommand);
  v29 = (void *)MEMORY[0x1B5E432E8](0xD000000000000018, 0x80000001B4EF4BF0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v28, v29);

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  v30 = JSONEncoder.init()();
  v92 = *(_QWORD *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_rrEntities);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]?);
  lazy protocol witness table accessor for type [RREntity]? and conformance <A> A?();
  v31 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v33 = v32;
  swift_bridgeObjectRelease();
  v34 = Data._bridgeToObjectiveC()().super.isa;
  v35 = (void *)MEMORY[0x1B5E432E8](0x697469746E457272, 0xEA00000000007365);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v34, v35);

  outlined consume of Data._Representation(v31, v33);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  lazy protocol witness table accessor for type PommesContext? and conformance <A> A?();
  v36 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v38 = v37;
  v39 = Data._bridgeToObjectiveC()().super.isa;
  v40 = (void *)MEMORY[0x1B5E432E8](0x6F4373656D6D6F70, 0xED0000747865746ELL);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v39, v40);

  outlined consume of Data._Representation(v36, v38);
  v41 = v89;
  v42 = v88;
  v43 = *(_QWORD *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_nluActiveTasks);
  if (v43)
  {
    v44 = *(_QWORD *)(v43 + 16);
    if (v44)
    {
      v90 = (void (*)(char *, uint64_t, uint64_t))v30;
      v45 = v43 + ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80));
      v46 = *(_QWORD *)(v91 + 72);
      v47 = *(void (**)(char *, uint64_t, uint64_t))(v91 + 16);
      v86 = v43;
      swift_bridgeObjectRetain();
      v48 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        v47(v42, v45, v41);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F0B8], MEMORY[0x1E0D9F090]);
        v49 = Message.serializedData(partial:)();
        v51 = v50;
        outlined copy of Data._Representation(v49, v50);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
        v53 = v48[2];
        v52 = v48[3];
        if (v53 >= v52 >> 1)
          v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v52 > 1), v53 + 1, 1, v48);
        v48[2] = v53 + 1;
        v54 = &v48[2 * v53];
        v54[4] = v49;
        v54[5] = v51;
        outlined consume of Data._Representation(v49, v51);
        v42 = v88;
        v41 = v89;
        (*(void (**)(char *, uint64_t))(v91 + 8))(v88, v89);
        v45 += v46;
        --v44;
      }
      while (v44);
      swift_bridgeObjectRelease();
      with.super.isa = isa;
      v30 = (uint64_t)v90;
    }
    v55 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v56 = (void *)MEMORY[0x1B5E432E8](0x7669746341756C6ELL, 0xEE00736B73615465);
    v13 = &selRef_reason;
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v55, v56);

    v2 = v84;
  }
  v57 = *(char **)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_nluCompletedTasks);
  if (v57)
  {
    v58 = *((_QWORD *)v57 + 2);
    if (v58)
    {
      v90 = (void (*)(char *, uint64_t, uint64_t))v30;
      v59 = &v57[(*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80)];
      v60 = *(_QWORD *)(v91 + 72);
      v61 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
      v88 = v57;
      swift_bridgeObjectRetain();
      v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v63 = v87;
      do
      {
        v61(v63, v59, v41);
        lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F0B8], MEMORY[0x1E0D9F090]);
        v64 = Message.serializedData(partial:)();
        v66 = v65;
        outlined copy of Data._Representation(v64, v65);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
        v68 = v62[2];
        v67 = v62[3];
        if (v68 >= v67 >> 1)
          v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v67 > 1), v68 + 1, 1, v62);
        v62[2] = v68 + 1;
        v69 = &v62[2 * v68];
        v69[4] = v64;
        v69[5] = v66;
        outlined consume of Data._Representation(v64, v66);
        v41 = v89;
        v63 = v87;
        (*(void (**)(char *, uint64_t))(v91 + 8))(v87, v89);
        v59 += v60;
        --v58;
      }
      while (v58);
      swift_bridgeObjectRelease();
      v2 = v84;
      v13 = &selRef_reason;
    }
    v70 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v71 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EF4C60);
    with.super.isa = isa;
    objc_msgSend(isa, v13[34], v70, v71);

  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  lazy protocol witness table accessor for type Parse.DirectInvocation? and conformance <A> A?();
  v72 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v74 = v73;
  v75 = Data._bridgeToObjectiveC()().super.isa;
  v76 = (void *)MEMORY[0x1B5E432E8](0xD000000000000014, 0x80000001B4EF4C80);
  objc_msgSend(with.super.isa, v13[34], v75, v76);

  outlined consume of Data._Representation(v72, v74);
  updated = ContextUpdateScope.rawValue.getter();
  v78 = (void *)MEMORY[0x1B5E432E8](updated);
  swift_bridgeObjectRelease();
  v79 = (void *)MEMORY[0x1B5E432E8](0xD000000000000012, 0x80000001B4EF4CA0);
  objc_msgSend(with.super.isa, v13[34], v78, v79);

  if (*(_QWORD *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId + 8))
    v80 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId));
  else
    v80 = 0;
  v81 = (void *)MEMORY[0x1B5E432E8](0xD00000000000001ALL, 0x80000001B4EF4CC0);
  objc_msgSend(with.super.isa, v13[34], v80, v81);
  swift_release();

}

id ExecutionContextUpdate.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ExecutionContextUpdate.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ExecutionContextUpdate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExecutionContextUpdate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  void *v12;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t updated;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  id v30;
  id v31;
  objc_class *v32;
  id v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  objc_super v41;

  v12 = v11;
  v39 = a11;
  v40 = a8;
  v38 = a10;
  v36 = a7;
  v37 = a9;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a8, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  v23 = v12;
  specialized static ExecutionContextUpdate.synchronizePromptContexts(pommesContext:nativeFlowContextCommand:)((void (*)(_QWORD, _QWORD, _QWORD))v22, a2);
  *(_QWORD *)&v23[OBJC_IVAR___SKRExecutionContextUpdate_provideContextCommand] = a1;
  *(_QWORD *)&v23[OBJC_IVAR___SKRExecutionContextUpdate_nativeFlowContextCommand] = a2;
  *(_QWORD *)&v23[OBJC_IVAR___SKRExecutionContextUpdate_nluSystemDialogActs] = a3;
  *(_QWORD *)&v23[OBJC_IVAR___SKRExecutionContextUpdate_nluActiveTasks] = a4;
  *(_QWORD *)&v23[OBJC_IVAR___SKRExecutionContextUpdate_nluCompletedTasks] = a5;
  outlined init with copy of ReferenceResolutionClientProtocol?(a6, (uint64_t)&v23[OBJC_IVAR___SKRExecutionContextUpdate_undoDirectInvocation], &demangling cache variable for type metadata for Parse.DirectInvocation?);
  *(_QWORD *)&v23[OBJC_IVAR___SKRExecutionContextUpdate_rrEntities] = v36;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t)&v23[OBJC_IVAR___SKRExecutionContextUpdate_pommesContext], (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  v24 = &v23[OBJC_IVAR___SKRExecutionContextUpdate_contextUpdateScope];
  updated = type metadata accessor for ContextUpdateScope();
  v26 = *(_QWORD *)(updated - 8);
  v27 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v24, v37, updated);
  v28 = &v23[OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId];
  v29 = v39;
  *(_QWORD *)v28 = v38;
  *((_QWORD *)v28 + 1) = v29;
  v30 = a2;
  v31 = a1;

  v32 = (objc_class *)type metadata accessor for ExecutionContextUpdate();
  v41.receiver = v23;
  v41.super_class = v32;
  v33 = objc_msgSendSuper2(&v41, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, updated);
  outlined destroy of ReferenceResolutionClientProtocol?(v40, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  outlined destroy of ReferenceResolutionClientProtocol?(a6, &demangling cache variable for type metadata for Parse.DirectInvocation?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  return v33;
}

id specialized static ExecutionContextUpdate.convertFromFlowContextUpdate(_:nluActiveTasks:nluCompletedTasks:populateLegacyProvideContext:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t updated;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  int v43;
  char v44;
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  char *v72;
  id v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  char *v82;
  uint64_t v83;
  char *v84;
  void *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v81 = a4;
  v91 = a2;
  v92 = a3;
  updated = type metadata accessor for ContextUpdateScope();
  v88 = *(_QWORD *)(updated - 8);
  v89 = updated;
  v6 = MEMORY[0x1E0C80A78](updated);
  v82 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v90 = (char *)&v77 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v9);
  v96 = (uint64_t)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  MEMORY[0x1E0C80A78](v11);
  v95 = (uint64_t)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for NLContextUpdateSerializationOptions();
  v79 = *(_QWORD *)(v13 - 8);
  v80 = v13;
  MEMORY[0x1E0C80A78](v13);
  v78 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for NLContextUpdate();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v84 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v87 = (uint64_t)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v86 = (char *)&v77 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v93 = (char *)&v77 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v83 = (uint64_t)&v77 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v77 - v28;
  v30 = MEMORY[0x1E0C80A78](v27);
  v32 = (char *)&v77 - v31;
  v33 = MEMORY[0x1E0C80A78](v30);
  v35 = (char *)&v77 - v34;
  v36 = MEMORY[0x1E0C80A78](v33);
  v38 = (char *)&v77 - v37;
  MEMORY[0x1E0C80A78](v36);
  v40 = (char *)&v77 - v39;
  v41 = a1;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)&v77 - v39, &demangling cache variable for type metadata for NLContextUpdate?);
  v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v43 = v42(v40, 1, v15);
  v94 = v16;
  if (v43 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v40, &demangling cache variable for type metadata for NLContextUpdate?);
    goto LABEL_4;
  }
  v44 = NLContextUpdate.isClientOnly.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v40, v15);
  if ((v44 & 1) == 0)
  {
LABEL_4:
    outlined init with copy of ReferenceResolutionClientProtocol?(v41, (uint64_t)v38, &demangling cache variable for type metadata for NLContextUpdate?);
    v45 = v42(v38, 1, v15);
    v46 = (uint64_t)v93;
    if (v45 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v38, &demangling cache variable for type metadata for NLContextUpdate?);
      v85 = 0;
    }
    else
    {
      v85 = (void *)NLContextUpdate.doConvertToServerContextUpdate()();
      (*(void (**)(char *, uint64_t))(v94 + 8))(v38, v15);
    }
    goto LABEL_8;
  }
  v85 = 0;
  v46 = (uint64_t)v93;
LABEL_8:
  v47 = v84;
  outlined init with copy of ReferenceResolutionClientProtocol?(v41, (uint64_t)v35, &demangling cache variable for type metadata for NLContextUpdate?);
  if (v42(v35, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v35, &demangling cache variable for type metadata for NLContextUpdate?);
    v84 = 0;
    v48 = v94;
  }
  else
  {
    v48 = v94;
    (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v47, v35, v15);
    if ((v81 & 1) != 0)
    {
      v97 = MEMORY[0x1E0DEE9D8];
      v84 = (char *)lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type NLContextUpdateSerializationOptions and conformance NLContextUpdateSerializationOptions, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C510], MEMORY[0x1E0D9C520]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NLContextUpdateSerializationOptions]);
      v49 = v47;
      lazy protocol witness table accessor for type [NLContextUpdateSerializationOptions] and conformance [A]();
      v50 = v78;
      v51 = v80;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      v84 = (char *)NLContextUpdate.doConvertToAceContextUpdate(options:)();
      (*(void (**)(char *, uint64_t))(v79 + 8))(v50, v51);
      v52 = v49;
      v46 = (uint64_t)v93;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v52, v15);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v15);
      v84 = 0;
    }
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v41, (uint64_t)v32, &demangling cache variable for type metadata for NLContextUpdate?);
  if (v42(v32, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v32, &demangling cache variable for type metadata for NLContextUpdate?);
    v53 = 0;
  }
  else
  {
    v53 = NLContextUpdate.nluSystemDialogActs.getter();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v32, v15);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v41, (uint64_t)v29, &demangling cache variable for type metadata for NLContextUpdate?);
  v54 = v42(v29, 1, v15);
  v55 = v90;
  if (v54 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v29, &demangling cache variable for type metadata for NLContextUpdate?);
    v56 = type metadata accessor for Parse.DirectInvocation();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v95, 1, 1, v56);
  }
  else
  {
    NLContextUpdate.undoDirectInvocation.getter();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v15);
  }
  v57 = v83;
  outlined init with copy of ReferenceResolutionClientProtocol?(v41, v83, &demangling cache variable for type metadata for NLContextUpdate?);
  v58 = v42((char *)v57, 1, v15);
  v59 = (uint64_t)v86;
  if (v58 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v57, &demangling cache variable for type metadata for NLContextUpdate?);
    v60 = 0;
  }
  else
  {
    v61 = v57;
    v60 = NLContextUpdate.rrEntities.getter();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v61, v15);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v41, v46, &demangling cache variable for type metadata for NLContextUpdate?);
  if (v42((char *)v46, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v46, &demangling cache variable for type metadata for NLContextUpdate?);
    v62 = type metadata accessor for PommesContext();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v96, 1, 1, v62);
  }
  else
  {
    NLContextUpdate.pommesContext.getter();
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v15);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v41, v59, &demangling cache variable for type metadata for NLContextUpdate?);
  if (v42((char *)v59, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v59, &demangling cache variable for type metadata for NLContextUpdate?);
    (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v55, *MEMORY[0x1E0D9BD88], v89);
  }
  else
  {
    v63 = v48;
    v64 = v82;
    NLContextUpdate.contextUpdateScope.getter();
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v59, v15);
    (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v55, v64, v89);
  }
  v65 = v87;
  outlined init with copy of ReferenceResolutionClientProtocol?(v41, v87, &demangling cache variable for type metadata for NLContextUpdate?);
  if (v42((char *)v65, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v65, &demangling cache variable for type metadata for NLContextUpdate?);
    v66 = 0;
    v67 = 0;
  }
  else
  {
    v66 = NLContextUpdate.restoreSessionForRequestId.getter();
    v67 = v68;
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v65, v15);
  }
  objc_allocWithZone((Class)type metadata accessor for ExecutionContextUpdate());
  v69 = v91;
  swift_bridgeObjectRetain();
  v70 = v92;
  swift_bridgeObjectRetain();
  v76 = v67;
  v75 = (uint64_t)v55;
  v72 = v84;
  v71 = v85;
  v73 = specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(v84, v85, v53, v69, v70, v95, v60, v96, v75, v66, v76);

  return v73;
}

unint64_t lazy protocol witness table accessor for type [RREntity]? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type [RREntity]? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type [RREntity]? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RREntity]?);
    v2 = lazy protocol witness table accessor for type [RREntity] and conformance <A> [A]();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEE988], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [RREntity]? and conformance <A> A?);
  }
  return result;
}

uint64_t ObjC metadata update function for ExecutionContextUpdate()
{
  return type metadata accessor for ExecutionContextUpdate();
}

void type metadata completion function for ExecutionContextUpdate()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Input?(319, &lazy cache variable for type metadata for Parse.DirectInvocation?, (void (*)(uint64_t))MEMORY[0x1E0D9C618]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Input?(319, &lazy cache variable for type metadata for PommesContext?, (void (*)(uint64_t))MEMORY[0x1E0D98A90]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for ContextUpdateScope();
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for ExecutionContextUpdate()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ExecutionContextUpdate.__allocating_init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of ExecutionContextUpdate.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of ExecutionContextUpdate.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t getEnumTagSinglePayload for ExecutionContextUpdate.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ExecutionContextUpdate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1B4DD5830 + 4 * byte_1B4EEA092[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1B4DD5864 + 4 * byte_1B4EEA08D[v4]))();
}

uint64_t sub_1B4DD5864(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DD586C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4DD5874);
  return result;
}

uint64_t sub_1B4DD5880(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4DD5888);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1B4DD588C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DD5894(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ExecutionContextUpdate.CodingKeys()
{
  return &unk_1E6849C80;
}

unint64_t lazy protocol witness table accessor for type ExecutionContextUpdate.CodingKeys and conformance ExecutionContextUpdate.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExecutionContextUpdate.CodingKeys and conformance ExecutionContextUpdate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExecutionContextUpdate.CodingKeys and conformance ExecutionContextUpdate.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ExecutionContextUpdate.CodingKeys, &unk_1E6849C80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionContextUpdate.CodingKeys and conformance ExecutionContextUpdate.CodingKeys);
  }
  return result;
}

unint64_t specialized ExecutionContextUpdate.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExecutionContextUpdate.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xD)
    return 13;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type [NLContextUpdateSerializationOptions] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [NLContextUpdateSerializationOptions] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NLContextUpdateSerializationOptions] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NLContextUpdateSerializationOptions]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [NLContextUpdateSerializationOptions] and conformance [A]);
  }
  return result;
}

id ExecutionInputInfo.__allocating_init(parseId:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ExecutionInputInfo.init(parseId:)(a1);
}

id ExecutionInputInfo.__allocating_init(executePommes:)(char a1)
{
  objc_class *v1;
  _BYTE *v3;
  _QWORD *v4;
  objc_super v6;

  v3 = objc_allocWithZone(v1);
  v4 = &v3[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId];
  *v4 = 0;
  v4[1] = 0;
  v3[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes] = a1;
  v6.receiver = v3;
  v6.super_class = v1;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t static ExecutionInputInfo.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static ExecutionInputInfo.supportsSecureCoding;
}

uint64_t static ExecutionInputInfo.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static ExecutionInputInfo.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ExecutionInputInfo.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ExecutionInputInfo.parseId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExecutionInputInfo.executePommes.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes);
}

unint64_t ExecutionInputInfo.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;

  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId + 8))
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId);
    v2 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId + 8);
  }
  else
  {
    v2 = (void *)0xE300000000000000;
    v1 = 7104878;
  }
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x80000001B4EFC570;
  v4._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v4);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes))
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes))
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0xD00000000000001BLL;
}

id ExecutionInputInfo.init(parseId:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  objc_class *v13;
  id v14;
  uint64_t v15;
  objc_super v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1;
  static ConversionUtils.convertProtoToUuid(protoUuid:)();
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = UUID.uuidString.getter();
    v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
  }
  v12 = (uint64_t *)&v6[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId];
  *v12 = v9;
  v12[1] = v10;
  v6[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes] = 0;

  v13 = (objc_class *)type metadata accessor for ExecutionInputInfo();
  v17.receiver = v6;
  v17.super_class = v13;
  v14 = objc_msgSendSuper2(&v17, sel_init);
  v15 = type metadata accessor for Siri_Nlu_External_UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  return v14;
}

id ExecutionInputInfo.init(executePommes:)(char a1)
{
  _BYTE *v1;
  _QWORD *v2;
  objc_super v4;

  v2 = &v1[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId];
  *v2 = 0;
  v2[1] = 0;
  v1[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes] = a1;
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for ExecutionInputInfo();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for ExecutionInputInfo()
{
  return objc_opt_self();
}

id ExecutionInputInfo.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;
  id v4;

  v3 = objc_allocWithZone(v1);
  v4 = specialized ExecutionInputInfo.init(coder:)(a1);

  return v4;
}

id ExecutionInputInfo.init(coder:)(void *a1)
{
  id v2;

  v2 = specialized ExecutionInputInfo.init(coder:)(a1);

  return v2;
}

Swift::Void __swiftcall ExecutionInputInfo.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId + 8))
  {
    v3 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId));
    v4 = (void *)MEMORY[0x1B5E432E8](0x64496573726170, 0xE700000000000000);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  }
  v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes);
  v6 = (id)MEMORY[0x1B5E432E8](0x5065747563657865, 0xED000073656D6D6FLL);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v5, v6);

}

id ExecutionInputInfo.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ExecutionInputInfo.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ExecutionInputInfo.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExecutionInputInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized ExecutionInputInfo.init(coder:)(void *a1)
{
  void *v1;
  _BYTE *v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  void *v13;
  unsigned __int8 v14;
  objc_super v16;

  v3 = v1;
  v4 = (void *)MEMORY[0x1B5E432E8](0x64496573726170, 0xE700000000000000);
  v5 = objc_msgSend(a1, sel_containsValueForKey_, v4);

  if (v5)
  {
    type metadata accessor for NSString();
    v6 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v6)
    {
      v7 = (void *)v6;
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v10 = v9;

    }
    else
    {
      v8 = 0;
      v10 = 0;
    }
    v12 = (uint64_t *)&v3[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId];
    *v12 = v8;
    v12[1] = v10;
  }
  else
  {
    v11 = &v3[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId];
    *v11 = 0;
    v11[1] = 0;
  }
  v13 = (void *)MEMORY[0x1B5E432E8](0x5065747563657865, 0xED000073656D6D6FLL);
  v14 = objc_msgSend(a1, sel_decodeBoolForKey_, v13);

  v3[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes] = v14;
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for ExecutionInputInfo();
  return objc_msgSendSuper2(&v16, sel_init);
}

uint64_t method lookup function for ExecutionInputInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ExecutionInputInfo.__allocating_init(parseId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ExecutionInputInfo.__allocating_init(executePommes:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ExecutionInputInfo.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ExecutionInputInfo.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t ExecutionOutput.__allocating_init(command:contextUpdate:fullPrint:fullSpeak:executionRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(v8 + 136))(a1, a2, a3, a4, a5, a6, 0, 0, 0, 0, a7, a8);
}

id ExecutionOutput.__allocating_init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  objc_class *v11;
  id v19;
  id v20;

  v19 = objc_allocWithZone(v11);
  v20 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10, a11);

  return v20;
}

uint64_t static ExecutionOutput.supportsSecureCoding.getter()
{
  swift_beginAccess();
  return static ExecutionOutput.supportsSecureCoding;
}

uint64_t static ExecutionOutput.supportsSecureCoding.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  static ExecutionOutput.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ExecutionOutput.supportsSecureCoding.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ExecutionOutput.executionRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___SKRExecutionOutput_executionRequestId);
  swift_bridgeObjectRetain();
  return v1;
}

void *ExecutionOutput.command.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___SKRExecutionOutput_command);
  v2 = v1;
  return v1;
}

void *ExecutionOutput.contextUpdate.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
  v2 = v1;
  return v1;
}

uint64_t ExecutionOutput.fullPrint.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKRExecutionOutput_fullPrint);
}

uint64_t ExecutionOutput.fullSpeak.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKRExecutionOutput_fullSpeak);
}

uint64_t ExecutionOutput.redactedFullPrint.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKRExecutionOutput_redactedFullPrint);
}

uint64_t ExecutionOutput.redactedFullSpeak.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKRExecutionOutput_redactedFullSpeak);
}

id ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  id v14;

  v14 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);

  return v14;
}

uint64_t ExecutionOutput.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4DD6674 + 4 * byte_1B4EEA1D8[a1]))(0xD000000000000012, 0x80000001B4EF4CE0);
}

uint64_t sub_1B4DD6674()
{
  return 0x646E616D6D6F63;
}

uint64_t sub_1B4DD668C()
{
  return 0x55747865746E6F63;
}

uint64_t sub_1B4DD66B0()
{
  return 0x6E6972506C6C7566;
}

uint64_t sub_1B4DD66D0()
{
  return 0x616570536C6C7566;
}

unint64_t sub_1B4DD66EC()
{
  return 0xD000000000000011;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ExecutionOutput.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance ExecutionOutput.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>._rawHashValue(seed:)(0, *v0);
}

void protocol witness for Hashable.hash(into:) in conformance ExecutionOutput.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ExecutionOutput.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ExecutionOutput.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized ExecutionOutput.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ExecutionOutput.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ExecutionOutput.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ExecutionOutput.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ExecutionOutput.init(coder:)(a1);
}

Swift::Void __swiftcall ExecutionOutput.encode(with:)(NSCoder with)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v3 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR___SKRExecutionOutput_executionRequestId), *(_QWORD *)(v1 + OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8));
  v4 = (void *)MEMORY[0x1B5E432E8](0xD000000000000012, 0x80000001B4EF4CE0);
  -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v3, v4);

  v5 = *(void **)(v1 + OBJC_IVAR___SKRExecutionOutput_command);
  if (v5)
  {
    v6 = v5;
    v7 = (void *)MEMORY[0x1B5E432E8](0x646E616D6D6F63, 0xE700000000000000);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v6, v7);

  }
  v8 = *(void **)(v1 + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
  if (v8)
  {
    v9 = v8;
    v10 = (void *)MEMORY[0x1B5E432E8](0x55747865746E6F63, 0xED00006574616470);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v9, v10);

  }
  if (*(_QWORD *)(v1 + OBJC_IVAR___SKRExecutionOutput_fullPrint + 8))
  {
    v11 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR___SKRExecutionOutput_fullPrint));
    v12 = (void *)MEMORY[0x1B5E432E8](0x6E6972506C6C7566, 0xE900000000000074);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v11, v12);

  }
  if (*(_QWORD *)(v1 + OBJC_IVAR___SKRExecutionOutput_fullSpeak + 8))
  {
    v13 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR___SKRExecutionOutput_fullSpeak));
    v14 = (void *)MEMORY[0x1B5E432E8](0x616570536C6C7566, 0xE90000000000006BLL);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v13, v14);

  }
  if (*(_QWORD *)(v1 + OBJC_IVAR___SKRExecutionOutput_redactedFullPrint + 8))
  {
    v15 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR___SKRExecutionOutput_redactedFullPrint));
    v16 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EF4D10);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v15, v16);

  }
  if (*(_QWORD *)(v1 + OBJC_IVAR___SKRExecutionOutput_redactedFullSpeak + 8))
  {
    v17 = (void *)MEMORY[0x1B5E432E8](*(_QWORD *)(v1 + OBJC_IVAR___SKRExecutionOutput_redactedFullSpeak));
    v18 = (id)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EF4D30);
    -[objc_class encodeObject:forKey:](with.super.isa, sel_encodeObject_forKey_, v17, v18);

  }
}

id ExecutionOutput.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ExecutionOutput.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ExecutionOutput.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExecutionOutput();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  char *v12;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint64_t v49;
  _QWORD *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  id v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  id v60;
  id v61;
  _QWORD *v62;
  unint64_t v63;
  id v64;
  char *v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  id v78;
  id v79;
  id v80;
  char *v81;
  NSObject *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  void (*v90)(unint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  id v100;
  char *v101;
  objc_class *v102;
  unint64_t v104;
  void *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t updated;
  char *v113;
  unint64_t v114;
  char *v115;
  _QWORD *v116;
  uint64_t v117;
  char *v118;
  id v119;
  uint64_t v120;
  objc_super v121;
  _OWORD v122[2];
  uint64_t v123;
  uint64_t v124;

  v118 = a8;
  v119 = a2;
  v117 = a10;
  v124 = *MEMORY[0x1E0C80C00];
  updated = type metadata accessor for ContextUpdateScope();
  v110 = *(_QWORD *)(updated - 8);
  MEMORY[0x1E0C80A78](updated);
  v113 = (char *)&v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v20);
  v111 = (char *)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  MEMORY[0x1E0C80A78](v22);
  v109 = (char *)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v24);
  v107 = (uint64_t)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x1E0C80A78](v26);
  v115 = (char *)&v104 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v116 = *(_QWORD **)(v108 - 8);
  v28 = MEMORY[0x1E0C80A78](v108);
  v114 = (unint64_t)&v104 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v106 = (char *)&v104 - v30;
  v31 = &v12[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
  *(_QWORD *)v31 = a11;
  *((_QWORD *)v31 + 1) = a12;
  v32 = v12;
  v33 = &v12[OBJC_IVAR___SKRExecutionOutput_fullPrint];
  *(_QWORD *)v33 = a3;
  *((_QWORD *)v33 + 1) = a4;
  v34 = &v12[OBJC_IVAR___SKRExecutionOutput_fullSpeak];
  *(_QWORD *)v34 = a5;
  *((_QWORD *)v34 + 1) = a6;
  v35 = &v12[OBJC_IVAR___SKRExecutionOutput_redactedFullPrint];
  v36 = v118;
  *(_QWORD *)v35 = a7;
  *((_QWORD *)v35 + 1) = v36;
  v37 = &v12[OBJC_IVAR___SKRExecutionOutput_redactedFullSpeak];
  v38 = a1;
  v39 = v117;
  *(_QWORD *)v37 = a9;
  *((_QWORD *)v37 + 1) = v39;
  if (a1 && (objc_opt_self(), (v40 = swift_dynamicCastObjCClass()) != 0) && !v119)
  {
    v41 = (void *)v40;
    v42 = one-time initialization token for executor;
    v118 = v12;
    v43 = v38;
    if (v42 != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    v45 = __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
    v119 = v43;
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.debug.getter();
    v48 = os_log_type_enabled(v46, v47);
    v105 = v32;
    if (v48)
    {
      v49 = swift_slowAlloc();
      v50 = (_QWORD *)swift_slowAlloc();
      v117 = swift_slowAlloc();
      *(_QWORD *)&v122[0] = v117;
      *(_DWORD *)v49 = 136315394;
      v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000067, 0x80000001B4EFC650, (uint64_t *)v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v49 + 12) = 2112;
      v120 = (uint64_t)v41;
      v51 = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v50 = v41;

      _os_log_impl(&dword_1B4BE6000, v46, v47, "ExecutionOutput: %s: converting SARDNativeFlowContextUpdate=%@ to ExecutionOutput", (uint8_t *)v49, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v50, -1, -1);
      v52 = v117;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v52, -1, -1);
      MEMORY[0x1B5E44758](v49, -1, -1);

    }
    else
    {

      v61 = v119;
    }
    v62 = v116;
    v63 = v114;
    v64 = objc_msgSend(v41, sel_promptContextProto);
    v65 = v115;
    if (v64)
    {
      v66 = v64;
      v117 = v45;
      v67 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v69 = v68;

      v123 = 0;
      memset(v122, 0, sizeof(v122));
      outlined copy of Data._Representation(v67, v69);
      BinaryDecodingOptions.init()();
      v70 = lazy protocol witness table accessor for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext();
      v71 = v108;
      Message.init(serializedData:extensions:partial:options:)();
      v104 = v70;
      v107 = v67;
      v114 = v69;
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v62[7])(v65, 0, 1, v71);
      v81 = v106;
      ((void (*)(char *, char *, uint64_t))v62[4])(v106, v65, v71);
      ((void (*)(unint64_t, char *, uint64_t))v62[2])(v63, v81, v71);
      v82 = Logger.logObject.getter();
      v83 = static os_log_type_t.debug.getter();
      v84 = os_log_type_enabled(v82, v83);
      v85 = v71;
      if (v84)
      {
        v86 = swift_slowAlloc();
        v87 = swift_slowAlloc();
        v117 = (uint64_t)v41;
        v88 = v87;
        *(_QWORD *)&v122[0] = v87;
        *(_DWORD *)v86 = 136315394;
        v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000067, 0x80000001B4EFC650, (uint64_t *)v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v86 + 12) = 2080;
        v89 = Message.textFormatString()();
        v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89._countAndFlagsBits, (unint64_t)v89._object, (uint64_t *)v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v90 = (void (*)(unint64_t, uint64_t))v116[1];
        v90(v63, v85);
        _os_log_impl(&dword_1B4BE6000, v82, v83, "ExecutionOutput: %s: NFCU has prompt context %s", (uint8_t *)v86, 0x16u);
        swift_arrayDestroy();
        v91 = v88;
        v41 = (void *)v117;
        MEMORY[0x1B5E44758](v91, -1, -1);
        MEMORY[0x1B5E44758](v86, -1, -1);

      }
      else
      {

        v90 = (void (*)(unint64_t, uint64_t))v62[1];
        v90(v63, v85);
      }
      outlined consume of Data._Representation(v107, v114);
      v90((unint64_t)v81, v85);
    }
    else
    {
      v72 = Logger.logObject.getter();
      v73 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v72, v73))
      {
        v74 = (uint8_t *)swift_slowAlloc();
        v75 = swift_slowAlloc();
        *(_QWORD *)&v122[0] = v75;
        *(_DWORD *)v74 = 136315138;
        v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000067, 0x80000001B4EFC650, (uint64_t *)v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B4BE6000, v72, v73, "ExecutionOutput: %s: NFCU has no (or invalid) prompt context", v74, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v75, -1, -1);
        MEMORY[0x1B5E44758](v74, -1, -1);
      }

    }
    v32 = v105;
    v93 = updated;
    v92 = (uint64_t)v113;
    v95 = v110;
    v94 = (uint64_t)v111;
    v96 = (uint64_t)v109;
    v97 = type metadata accessor for Parse.DirectInvocation();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v96, 1, 1, v97);
    v98 = type metadata accessor for PommesContext();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v94, 1, 1, v98);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v95 + 104))(v92, *MEMORY[0x1E0D9BD88], v93);
    v99 = objc_allocWithZone((Class)type metadata accessor for ExecutionContextUpdate());
    v100 = specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(0, v41, 0, 0, 0, v96, 0, v94, v92, 0, 0);

    v101 = v118;
    *(_QWORD *)&v118[OBJC_IVAR___SKRExecutionOutput_contextUpdate] = v100;
    *(_QWORD *)&v101[OBJC_IVAR___SKRExecutionOutput_command] = 0;
  }
  else
  {
    v53 = one-time initialization token for executor;
    v54 = v12;
    if (v53 != -1)
      swift_once();
    v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)static Logger.executor);
    v56 = v38;
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v118 = v54;
      v59 = swift_slowAlloc();
      v116 = (_QWORD *)swift_slowAlloc();
      v117 = swift_slowAlloc();
      *(_QWORD *)&v122[0] = v117;
      *(_DWORD *)v59 = 136315394;
      v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000067, 0x80000001B4EFC650, (uint64_t *)v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v59 + 12) = 2112;
      if (v38)
      {
        v120 = (uint64_t)v56;
        v60 = v56;
      }
      else
      {
        v120 = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v76 = v116;
      *v116 = v38;

      _os_log_impl(&dword_1B4BE6000, v57, v58, "ExecutionOutput: %s: converting non-context ACE command=%@ to ExecutionOutput", (uint8_t *)v59, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v76, -1, -1);
      v77 = v117;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v77, -1, -1);
      MEMORY[0x1B5E44758](v59, -1, -1);

      v54 = v118;
    }
    else
    {

    }
    *(_QWORD *)&v54[OBJC_IVAR___SKRExecutionOutput_command] = v38;
    v78 = v119;
    *(_QWORD *)&v54[OBJC_IVAR___SKRExecutionOutput_contextUpdate] = v119;
    v79 = v78;
    v80 = v56;
  }

  v102 = (objc_class *)type metadata accessor for ExecutionOutput();
  v121.receiver = v32;
  v121.super_class = v102;
  return objc_msgSendSuper2(&v121, sel_init);
}

uint64_t method lookup function for ExecutionOutput()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ExecutionOutput.__allocating_init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of ExecutionOutput.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ExecutionOutput.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ExecutionOutput.hasEmptyNativeFlowContextUpdate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t getEnumTagSinglePayload for ExecutionOutput.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ExecutionOutput.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B4DD786C + 4 * byte_1B4EEA1E4[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B4DD78A0 + 4 * byte_1B4EEA1DF[v4]))();
}

uint64_t sub_1B4DD78A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DD78A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4DD78B0);
  return result;
}

uint64_t sub_1B4DD78BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4DD78C4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B4DD78C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DD78D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ExecutionOutput.CodingKeys()
{
  return &unk_1E6849DB0;
}

unint64_t lazy protocol witness table accessor for type ExecutionOutput.CodingKeys and conformance ExecutionOutput.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExecutionOutput.CodingKeys and conformance ExecutionOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExecutionOutput.CodingKeys and conformance ExecutionOutput.CodingKeys)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ExecutionOutput.CodingKeys, &unk_1E6849DB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionOutput.CodingKeys and conformance ExecutionOutput.CodingKeys);
  }
  return result;
}

unint64_t specialized ExecutionOutput.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExecutionOutput.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext[0];
  if (!lazy protocol witness table cache variable for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext[0])
  {
    v1 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DA0060], v1);
    atomic_store(result, lazy protocol witness table cache variable for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext);
  }
  return result;
}

uint64_t outlined destroy of Com_Apple_Siri_Product_Proto_PromptContext?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of ExecutionOverride.overrideType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ExecutionOverride.evaluate()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 16) + *(_QWORD *)(a3 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v9(a1, a2, a3);
}

uint64_t ExecutionOverrideContext.__allocating_init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, char a6)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = a3;
  *(_BYTE *)(result + 33) = a4;
  *(_QWORD *)(result + 40) = a5;
  *(_BYTE *)(result + 48) = a6;
  return result;
}

uint64_t ExecutionOverrideContext.activeTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ExecutionOverrideContext.executedTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ExecutionOverrideContext.isTriggerlessFollowup.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t ExecutionOverrideContext.isMitigated.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t ExecutionOverrideContext.endpointMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t ExecutionOverrideContext.isMedocSupported.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ExecutionOverrideContext.init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, char a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_BYTE *)(v6 + 32) = a3;
  *(_BYTE *)(v6 + 33) = a4;
  *(_QWORD *)(v6 + 40) = a5;
  *(_BYTE *)(v6 + 48) = a6;
  return v6;
}

uint64_t ExecutionOverrideContext.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;

  _StringGuts.grow(_:)(88);
  v1._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x6576697463617B20;
  v2._object = (void *)0xEF203A736B736154;
  String.append(_:)(v2);
  v3 = type metadata accessor for Siri_Nlu_External_Task();
  v4 = swift_bridgeObjectRetain();
  v5._countAndFlagsBits = MEMORY[0x1B5E434D4](v4, v3);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6._object = (void *)0x80000001B4EFC6C0;
  v6._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v6);
  v7 = swift_bridgeObjectRetain();
  v8._countAndFlagsBits = MEMORY[0x1B5E434D4](v7, v3);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD000000000000019;
  v9._object = (void *)0x80000001B4EFC6E0;
  String.append(_:)(v9);
  if (*(_BYTE *)(v0 + 32))
    v10 = 1702195828;
  else
    v10 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 32))
    v11 = 0xE400000000000000;
  else
    v11 = 0xE500000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0xD000000000000014;
  v13._object = (void *)0x80000001B4EFC700;
  String.append(_:)(v13);
  if (*(_BYTE *)(v0 + 48))
    v14 = 1702195828;
  else
    v14 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 48))
    v15 = 0xE400000000000000;
  else
    v15 = 0xE500000000000000;
  v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 125;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return 0;
}

uint64_t ExecutionOverrideContext.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExecutionOverrideContext()
{
  return ExecutionOverrideContext.debugDescription.getter();
}

uint64_t method lookup function for ExecutionOverrideContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ExecutionOverrideContext.__allocating_init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

SiriKitRuntime::ExecutionOverrideDecision_optional __swiftcall ExecutionOverrideDecision.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  SiriKitRuntime::ExecutionOverrideDecision_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExecutionOverrideDecision.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 12;
  if (v5 < 0xC)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExecutionOverrideDecision(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type ExecutionOverrideDecision and conformance ExecutionOverrideDecision()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExecutionOverrideDecision and conformance ExecutionOverrideDecision;
  if (!lazy protocol witness table cache variable for type ExecutionOverrideDecision and conformance ExecutionOverrideDecision)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ExecutionOverrideDecision, &type metadata for ExecutionOverrideDecision);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionOverrideDecision and conformance ExecutionOverrideDecision);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExecutionOverrideDecision()
{
  Hasher.init(_seed:)();
  ExecutionOverrideDecision.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExecutionOverrideDecision()
{
  ExecutionOverrideDecision.rawValue.getter();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExecutionOverrideDecision()
{
  Hasher.init(_seed:)();
  ExecutionOverrideDecision.rawValue.getter();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

SiriKitRuntime::ExecutionOverrideDecision_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ExecutionOverrideDecision(Swift::String *a1)
{
  return ExecutionOverrideDecision.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ExecutionOverrideDecision@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ExecutionOverrideDecision.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for ExecutionOverrideDecision(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1B4DD7FB8 + 4 * byte_1B4EEA3B1[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1B4DD7FEC + 4 * byte_1B4EEA3AC[v4]))();
}

uint64_t sub_1B4DD7FEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DD7FF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4DD7FFCLL);
  return result;
}

uint64_t sub_1B4DD8008(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4DD8010);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1B4DD8014(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DD801C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExecutionOverrideDecision()
{
  return &type metadata for ExecutionOverrideDecision;
}

uint64_t ExecutionOverrideDecisionMaker.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t ExecutionOverrideDecisionMaker.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t ExecutionOverrideDecisionMaker.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ExecutionOverrideDecisionMaker.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ExecutionOverrideDecisionMaker()
{
  return objc_opt_self();
}

uint64_t method lookup function for ExecutionOverrideDecisionMaker()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ExecutionOverrideDecisionMaker.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of ExecutionOverrideDecisionMaker.evaluate(rules:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 88) + *(_QWORD *)(*(_QWORD *)v1 + 88));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v6(a1);
}

uint64_t static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, char, char);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, char, char))((char *)&async function pointer to specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)
                                                                                              + async function pointer to specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v10;
  *v10 = v8;
  v10[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v12(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  *(_BYTE *)(v8 + 485) = v18;
  *(_QWORD *)(v8 + 352) = v16;
  *(_QWORD *)(v8 + 360) = v17;
  *(_BYTE *)(v8 + 484) = v15;
  *(_BYTE *)(v8 + 483) = v14;
  *(_QWORD *)(v8 + 344) = v13;
  *(_OWORD *)(v8 + 328) = v12;
  *(_BYTE *)(v8 + 482) = a8;
  *(_BYTE *)(v8 + 481) = a7;
  *(_BYTE *)(v8 + 480) = a6;
  *(_QWORD *)(v8 + 312) = a4;
  *(_QWORD *)(v8 + 320) = a5;
  *(_QWORD *)(v8 + 296) = a2;
  *(_QWORD *)(v8 + 304) = a3;
  *(_QWORD *)(v8 + 288) = a1;
  v9 = type metadata accessor for Parse();
  *(_QWORD *)(v8 + 368) = v9;
  *(_QWORD *)(v8 + 376) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 384) = swift_task_alloc();
  v10 = type metadata accessor for USOParse();
  *(_QWORD *)(v8 + 392) = v10;
  *(_QWORD *)(v8 + 400) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 408) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  *(_QWORD *)(v8 + 416) = swift_task_alloc();
  *(_QWORD *)(v8 + 424) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  *(_QWORD *)(v8 + 432) = swift_task_alloc();
  *(_QWORD *)(v8 + 440) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t inited;
  uint64_t v71;
  _QWORD *v72;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = type metadata accessor for Logger();
  v4 = __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  *(_QWORD *)(v0 + 448) = v4;
  specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/ExecutionOverrideHandler.swift", 45, 2, (uint64_t)"runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)", 246, 2, v4);
  outlined init with copy of ReferenceResolutionClientProtocol?(v2, v1, &demangling cache variable for type metadata for Input?);
  v5 = type metadata accessor for Input();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v1, 1, v5) == 1)
  {
    v7 = *(_QWORD *)(v0 + 440);
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 424), &demangling cache variable for type metadata for Input?);
    v8 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 376);
    v9 = *(_QWORD *)(v0 + 384);
    v11 = *(_QWORD *)(v0 + 368);
    Input.parse.getter();
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 88))(v9, v11);
    v13 = *(_QWORD *)(v0 + 440);
    if (v12 == *MEMORY[0x1E0D9C678])
    {
      v15 = *(_QWORD *)(v0 + 400);
      v14 = *(_QWORD *)(v0 + 408);
      v17 = *(_QWORD *)(v0 + 384);
      v16 = *(_QWORD *)(v0 + 392);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 376) + 96))(v17, *(_QWORD *)(v0 + 368));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v14, v17, v16);
      USOParse.userParse.getter();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      v18 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v13, 0, 1, v18);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 376) + 8))(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 368));
      v19 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v13, 1, 1, v19);
    }
    (*(void (**)(_QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v0 + 424), v5);
  }
  v21 = *(_QWORD *)(v0 + 432);
  v20 = *(_QWORD *)(v0 + 440);
  v23 = *(_QWORD *)(v0 + 352);
  v22 = *(_QWORD *)(v0 + 360);
  v24 = *(_BYTE *)(v0 + 484);
  v25 = *(_BYTE *)(v0 + 480);
  *(_QWORD *)(v0 + 280) = MEMORY[0x1E0DEE9D8];
  outlined init with copy of ReferenceResolutionClientProtocol?(v20, v21, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  v26 = type metadata accessor for HangUpOverride();
  swift_allocObject();
  swift_unknownObjectRetain();
  v27 = HangUpOverride.init(topRankedParse:bridge:isSpeechRequest:isNlEmpty:)(v21, v23, v22, v24, v25);
  swift_beginAccess();
  v28 = *(_QWORD **)(v0 + 280);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
  v30 = v28[2];
  v29 = v28[3];
  if (v30 >= v29 >> 1)
    v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v28);
  v31 = *(_QWORD *)(v0 + 416);
  v32 = *(_BYTE *)(v0 + 481);
  v33 = *(_QWORD *)(v0 + 320);
  v76 = *(_QWORD *)(v0 + 312);
  v75 = *(_QWORD *)(v0 + 304);
  *(_QWORD *)(v0 + 120) = v26;
  *(_QWORD *)(v0 + 128) = &protocol witness table for HangUpOverride;
  *(_QWORD *)(v0 + 96) = v27;
  v28[2] = v30 + 1;
  outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 96), (uint64_t)&v28[5 * v30 + 4]);
  *(_QWORD *)(v0 + 280) = v28;
  outlined init with copy of ReferenceResolutionClientProtocol?(v33, v31, &demangling cache variable for type metadata for Input?);
  v34 = type metadata accessor for WaitUniversalActionOverride();
  v35 = swift_allocObject();
  *(_BYTE *)(v35 + 16) = 7;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v31, v35 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_input, &demangling cache variable for type metadata for Input?);
  v74 = v32;
  *(_BYTE *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_isFirstRequestInSession) = v32;
  v36 = (_QWORD *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_aceInputOrigin);
  *v36 = v75;
  v36[1] = v76;
  v37 = *(_QWORD **)(v0 + 280);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
  v39 = v37[2];
  v38 = v37[3];
  if (v39 >= v38 >> 1)
    v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v38 > 1), v39 + 1, 1, v37);
  v41 = *(_QWORD *)(v0 + 432);
  v40 = *(_QWORD *)(v0 + 440);
  *(_QWORD *)(v0 + 160) = v34;
  *(_QWORD *)(v0 + 168) = &protocol witness table for WaitUniversalActionOverride;
  *(_QWORD *)(v0 + 136) = v35;
  v37[2] = v39 + 1;
  outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 136), (uint64_t)&v37[5 * v39 + 4]);
  *(_QWORD *)(v0 + 280) = v37;
  outlined init with copy of ReferenceResolutionClientProtocol?(v40, v41, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  v42 = type metadata accessor for EmergencyCallMitigatorOverride();
  v43 = swift_allocObject();
  *(_BYTE *)(v43 + 16) = 1;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v41, v43 + OBJC_IVAR____TtC14SiriKitRuntime30EmergencyCallMitigatorOverride_topRankedParse, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  v44 = *(_QWORD **)(v0 + 280);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
  v46 = v44[2];
  v45 = v44[3];
  if (v46 >= v45 >> 1)
    v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v45 > 1), v46 + 1, 1, v44);
  v48 = *(_QWORD *)(v0 + 432);
  v47 = *(_QWORD *)(v0 + 440);
  v49 = *(_QWORD *)(v0 + 344);
  *(_QWORD *)(v0 + 40) = v42;
  *(_QWORD *)(v0 + 48) = &protocol witness table for EmergencyCallMitigatorOverride;
  *(_QWORD *)(v0 + 16) = v43;
  v44[2] = v46 + 1;
  outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 16), (uint64_t)&v44[5 * v46 + 4]);
  *(_QWORD *)(v0 + 280) = v44;
  v50 = *(_QWORD *)(v49 + 16);
  v51 = *(_QWORD *)(v49 + 24);
  outlined init with copy of ReferenceResolutionClientProtocol?(v47, v48, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  LOBYTE(v47) = *(_BYTE *)(v49 + 32);
  *(_BYTE *)(v0 + 486) = v47;
  v52 = *(_BYTE *)(v49 + 33);
  LOBYTE(v49) = *(_BYTE *)(v49 + 48);
  v53 = type metadata accessor for AnnounceExecutionOverride();
  v54 = swift_allocObject();
  *(_WORD *)(v54 + 16) = 1028;
  *(_QWORD *)(v54 + 24) = v50;
  *(_QWORD *)(v54 + 32) = v51;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v48, v54 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_topNlParse, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  *(_BYTE *)(v54 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isTriggerlessFollowup) = v47;
  *(_BYTE *)(v54 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMitigated) = v52;
  *(_BYTE *)(v54 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMedocSupported) = v49;
  v55 = *(_QWORD **)(v0 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
  v57 = v55[2];
  v56 = v55[3];
  if (v57 >= v56 >> 1)
    v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v56 > 1), v57 + 1, 1, v55);
  v58 = *(_BYTE *)(v0 + 485);
  *(_QWORD *)(v0 + 80) = v53;
  *(_QWORD *)(v0 + 88) = &protocol witness table for AnnounceExecutionOverride;
  *(_QWORD *)(v0 + 56) = v54;
  v55[2] = v57 + 1;
  outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), (uint64_t)&v55[5 * v57 + 4]);
  *(_QWORD *)(v0 + 280) = v55;
  swift_endAccess();
  if ((v58 & 1) == 0)
  {
    v59 = *(_BYTE *)(v0 + 484);
    v60 = *(_BYTE *)(v0 + 483);
    v62 = *(_QWORD *)(v0 + 328);
    v61 = *(_QWORD *)(v0 + 336);
    v63 = *(_BYTE *)(v0 + 482);
    v64 = *(_BYTE *)(v0 + 480);
    v66 = *(_QWORD *)(v0 + 304);
    v65 = *(_QWORD *)(v0 + 312);
    v77 = type metadata accessor for EmptyAsrOverride();
    v67 = swift_allocObject();
    *(_BYTE *)(v67 + 16) = 6;
    *(_BYTE *)(v67 + 40) = v74;
    *(_BYTE *)(v67 + 41) = v63;
    *(_QWORD *)(v67 + 24) = v61;
    *(_QWORD *)(v67 + 32) = v62;
    *(_BYTE *)(v67 + 42) = v60;
    *(_BYTE *)(v67 + 44) = v64;
    *(_BYTE *)(v67 + 43) = v59;
    *(_QWORD *)(v67 + 48) = v66;
    *(_QWORD *)(v67 + 56) = v65;
    swift_beginAccess();
    v55 = *(_QWORD **)(v0 + 280);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
    v69 = v55[2];
    v68 = v55[3];
    if (v69 >= v68 >> 1)
      v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v68 > 1), v69 + 1, 1, v55);
    *(_QWORD *)(v0 + 200) = v77;
    *(_QWORD *)(v0 + 208) = &protocol witness table for EmptyAsrOverride;
    *(_QWORD *)(v0 + 176) = v67;
    v55[2] = v69 + 1;
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 176), (uint64_t)&v55[5 * v69 + 4]);
    *(_QWORD *)(v0 + 280) = v55;
    swift_endAccess();
  }
  type metadata accessor for ExecutionOverrideDecisionMaker();
  inited = swift_initStaticObject();
  type metadata accessor for CompositeExecutionOverrides();
  v71 = swift_allocObject();
  *(_QWORD *)(v0 + 456) = v71;
  *(_QWORD *)(v71 + 16) = v55;
  v78 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)inited + 88) + *(_QWORD *)(*(_QWORD *)inited + 88));
  swift_bridgeObjectRetain();
  v72 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 464) = v72;
  *v72 = v0;
  v72[1] = specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:);
  return v78(v71);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v6;

  v1 = *(void **)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 344);
  swift_retain();
  v6 = v1;
  specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/ExecutionOverrideHandler.swift", 45, 2, (uint64_t)"runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)", 246, 2, v2, v3);

  swift_release();
  v4 = *(_QWORD *)(v0 + 440);
  specialized Logger.debugF(_:_:_:_:)();
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitExecutionOverrideInfo(rcId:executionOverrideDecision:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v4, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 472));
}

uint64_t specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 472) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

ValueMetadata *type metadata accessor for ExecutionOverrideHandler()
{
  return &type metadata for ExecutionOverrideHandler;
}

id ExecutionOverrideResult.__allocating_init(type:decision:)(_BYTE *a1, char *a2)
{
  objc_class *v2;
  _BYTE *v5;
  char v6;
  objc_super v8;

  v5 = objc_allocWithZone(v2);
  v6 = *a2;
  v5[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_type] = *a1;
  v5[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_decision] = v6;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

void ExecutionOverrideResult.type.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_type);
}

void ExecutionOverrideResult.decision.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_decision);
}

id ExecutionOverrideResult.init(type:decision:)(_BYTE *a1, char *a2)
{
  _BYTE *v2;
  objc_class *ObjectType;
  char v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  v6 = *a2;
  v2[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_type] = *a1;
  v2[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_decision] = v6;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, sel_init);
}

id ExecutionOverrideResult.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ExecutionOverrideResult.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ExecutionOverrideResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for ExecutionOverrideResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ExecutionOverrideResult.__allocating_init(type:decision:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t ExecutionOverrideType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4DD8F98 + 4 * byte_1B4EEA570[*v0]))(0xD000000000000016, 0x80000001B4EF4EF0);
}

uint64_t sub_1B4DD8F98@<X0>(uint64_t a1@<X8>)
{
  return a1 - 1;
}

uint64_t sub_1B4DD9028()
{
  return 1701736302;
}

uint64_t ExecutionOverrideType.asCNVSchemaType(isTriggerlessFollowUp:)(char a1)
{
  _BYTE *v1;
  uint64_t result;

  result = 5;
  switch(*v1)
  {
    case 0:
      return result;
    case 1:
      result = 4;
      break;
    case 2:
      result = 7;
      break;
    case 4:
      result = 1;
      break;
    case 6:
      result = 6;
      break;
    case 8:
      if ((a1 & 1) != 0)
        result = 3;
      else
        result = 2;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

SiriKitRuntime::ExecutionOverrideType_optional __swiftcall ExecutionOverrideType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  SiriKitRuntime::ExecutionOverrideType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExecutionOverrideType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 9;
  if (v5 < 9)
    v7 = v5;
  *v4 = v7;
  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ExecutionOverrideType(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

unint64_t lazy protocol witness table accessor for type ExecutionOverrideType and conformance ExecutionOverrideType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ExecutionOverrideType and conformance ExecutionOverrideType;
  if (!lazy protocol witness table cache variable for type ExecutionOverrideType and conformance ExecutionOverrideType)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ExecutionOverrideType, &type metadata for ExecutionOverrideType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionOverrideType and conformance ExecutionOverrideType);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExecutionOverrideType()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ExecutionOverrideType(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExecutionOverrideType()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

SiriKitRuntime::ExecutionOverrideType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ExecutionOverrideType(Swift::String *a1)
{
  return ExecutionOverrideType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ExecutionOverrideType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ExecutionOverrideType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for ExecutionOverrideType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1B4DD9250 + 4 * byte_1B4EEA587[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1B4DD9284 + 4 * byte_1B4EEA582[v4]))();
}

uint64_t sub_1B4DD9284(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DD928C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4DD9294);
  return result;
}

uint64_t sub_1B4DD92A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4DD92A8);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1B4DD92AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DD92B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExecutionOverrideType()
{
  return &type metadata for ExecutionOverrideType;
}

uint64_t FeatureChecker.__allocating_init()()
{
  uint64_t v0;
  char v1;
  _BYTE v3[24];
  ValueMetadata *v4;
  unint64_t v5;

  v0 = swift_allocObject();
  *(_BYTE *)(v0 + 16) = AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags();
  v4 = &type metadata for IntelligenceFlowFeatureFlag;
  v5 = lazy protocol witness table accessor for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag();
  v1 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_BYTE *)(v0 + 17) = v1 & 1;
  return v0;
}

uint64_t FeatureChecker.isSystemAssistantExperienceSupported.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t FeatureChecker.isIntelligenceFlowFeatureEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t FeatureChecker.isSystemAssistantExperienceEnabled.getter()
{
  return AFDeviceSupportsSAE();
}

uint64_t FeatureChecker.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t FeatureChecker.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t FeatureChecker.init()()
{
  uint64_t v0;
  char v1;
  _BYTE v3[24];
  ValueMetadata *v4;
  unint64_t v5;

  *(_BYTE *)(v0 + 16) = AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags();
  v4 = &type metadata for IntelligenceFlowFeatureFlag;
  v5 = lazy protocol witness table accessor for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag();
  v1 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  *(_BYTE *)(v0 + 17) = v1 & 1;
  return v0;
}

uint64_t protocol witness for FeatureChecking.isSystemAssistantExperienceSupported.getter in conformance FeatureChecker()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 16);
}

uint64_t protocol witness for FeatureChecking.isSystemAssistantExperienceEnabled.getter in conformance FeatureChecker()
{
  return AFDeviceSupportsSAE();
}

uint64_t protocol witness for FeatureChecking.isIntelligenceFlowFeatureEnabled.getter in conformance FeatureChecker()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 17);
}

uint64_t dispatch thunk of FeatureChecking.isSystemAssistantExperienceSupported.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of FeatureChecking.isSystemAssistantExperienceEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FeatureChecking.isIntelligenceFlowFeatureEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata accessor for FeatureChecker()
{
  return objc_opt_self();
}

uint64_t method lookup function for FeatureChecker()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FeatureChecker.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

SiriKitRuntime::FindMyAffinityScorer __swiftcall FindMyAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::FindMyAffinityScorer result;

  v0 = (void *)0x80000001B4EF6A20;
  v1 = 0xD000000000000026;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t FindMyAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized FindMyAffinityScorer.findMyDeviceNameIdentifiers(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  if (!a1)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1B4BE6000, v4, v5, "FindMyAffinityScorer findMyDeviceNameIdentifiers | missing reference", v6, 2u);
      MEMORY[0x1B5E44758](v6, -1, -1);
    }

    return MEMORY[0x1E0DEE9D8];
  }
  swift_retain();
  v1 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (!v1)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1B4BE6000, v8, v9, "FindMyAffinityScorer findMyDeviceNameIdentifiers | unable to obtain device name identifiers", v10, 2u);
      MEMORY[0x1B5E44758](v10, -1, -1);
    }

    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  v2 = v1;
  swift_release();
  return v2;
}

uint64_t specialized FindMyAffinityScorer.containsDeviceNameIdentifier(reference:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void (*v26)(char *, uint64_t);
  _QWORD v27[2];

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v27 - v7;
  v9 = specialized FindMyAffinityScorer.findMyDeviceNameIdentifiers(from:)(a1);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v11 = v9 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v12 = *(_QWORD *)(v3 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v27[1] = v9;
    swift_bridgeObjectRetain();
    while (1)
    {
      v13(v8, v11, v2);
      v16 = UsoIdentifier.namespace.getter();
      if (v17)
      {
        if (v16 == 0x6369746E616D6573 && v17 == 0xEE0065756C61765FLL)
        {
          swift_bridgeObjectRelease();
          v13(v6, (unint64_t)v8, v2);
LABEL_11:
          if (UsoIdentifier.appBundleId.getter() == 0x794D646E6946 && v19 == 0xE600000000000000)
          {
            swift_bridgeObjectRelease();
            v26 = *(void (**)(char *, uint64_t))(v3 + 8);
            v26(v6, v2);
            v26(v8, v2);
LABEL_22:
            swift_bridgeObjectRelease_n();
            return 1;
          }
          v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v15 = *(void (**)(char *, uint64_t))(v3 + 8);
          v15(v6, v2);
          v15(v8, v2);
          if ((v14 & 1) != 0)
            goto LABEL_22;
          goto LABEL_4;
        }
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v13(v6, (unint64_t)v8, v2);
        if ((v18 & 1) != 0)
          goto LABEL_11;
      }
      else
      {
        v13(v6, (unint64_t)v8, v2);
      }
      v20 = *(void (**)(char *, uint64_t))(v3 + 8);
      v20(v6, v2);
      v20(v8, v2);
LABEL_4:
      v11 += v12;
      if (!--v10)
      {
        swift_bridgeObjectRelease_n();
        if (one-time initialization token for executor != -1)
          swift_once();
        v21 = type metadata accessor for Logger();
        __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
        v22 = Logger.logObject.getter();
        v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v24 = 0;
          _os_log_impl(&dword_1B4BE6000, v22, v23, "FindMyAffinityScorer containsDeviceNameIdentifier | unable to obtain identifier", v24, 2u);
          MEMORY[0x1B5E44758](v24, -1, -1);
        }

        return 0;
      }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized FindMyAffinityScorer.containsDeviceTypeIdentifier(reference:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(char *, unint64_t, uint64_t);
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v19;
  unint64_t v20;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = specialized FindMyAffinityScorer.findMyDeviceNameIdentifiers(from:)(a1);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    v10 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v19 = v6;
    swift_bridgeObjectRetain();
    v20 = 0x80000001B4EFCA00;
    do
    {
      v10(v5, v8, v2);
      v12 = UsoIdentifier.namespace.getter();
      if (v13)
      {
        if (v12 == 0xD000000000000010 && v13 == v20)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_17:
          swift_bridgeObjectRelease_n();
          return 1;
        }
        v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        if ((v11 & 1) != 0)
          goto LABEL_17;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      }
      v8 += v9;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease_n();
    if (one-time initialization token for executor != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1B4BE6000, v15, v16, "FindMyAffinityScorer containsDeviceTypeIdentifier | No findMyDeviceType", v17, 2u);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t specialized FindMyAffinityScorer.isSupported(usoTask:)()
{
  char v0;
  char v1;
  uint64_t v3;
  _BYTE v4[32];
  _BYTE v5[24];
  uint64_t v6;

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v6)
    goto LABEL_12;
  outlined init with copy of Any?((uint64_t)v5, (uint64_t)v4);
  type metadata accessor for UsoTask_getLocation_common_UserEntity();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_ping_common_UserEntity();
    if (!swift_dynamicCast())
    {
      type metadata accessor for UsoTask_request_common_UserEntity();
      if (swift_dynamicCast())
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        swift_release();
        goto LABEL_9;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
LABEL_12:
      v1 = 0;
      goto LABEL_13;
    }
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  swift_release();
  v0 = specialized FindMyAffinityScorer.containsDeviceNameIdentifier(reference:)(v3);
  swift_release();
  if ((v0 & 1) == 0)
  {
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
LABEL_9:
    v1 = specialized FindMyAffinityScorer.containsDeviceTypeIdentifier(reference:)(v3);
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  swift_release();
  v1 = 1;
LABEL_10:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
LABEL_13:
  outlined destroy of Any?((uint64_t)v5);
  return v1 & 1;
}

uint64_t specialized FindMyAffinityScorer.score(input:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v22;

  v0 = type metadata accessor for Parse();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for USOParse();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) != *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (one-time initialization token for executor != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v8 = 2;
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1B4BE6000, v10, v11, "FindMyAffinityScorer score | unexpected parse", v12, 2u);
      MEMORY[0x1B5E44758](v12, -1, -1);

      return v8;
    }

    return 2;
  }
  (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  if (!specialized static AffinityScorerUtils.getTask(_:)())
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1B4BE6000, v14, v15, "FindMyAffinityScorer score | unable to obtain task from parse", v16, 2u);
      MEMORY[0x1B5E44758](v16, -1, -1);
    }

    goto LABEL_20;
  }
  if ((specialized FindMyAffinityScorer.isSupported(usoTask:)() & 1) == 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1B4BE6000, v18, v19, "FindMyAffinityScorer score | task is unsupported by FMD or doesn't contain device name identifier", v20, 2u);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }

    swift_release();
LABEL_20:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 2;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_release();
  return 3;
}

ValueMetadata *type metadata accessor for FindMyAffinityScorer()
{
  return &type metadata for FindMyAffinityScorer;
}

uint64_t FlexibleAnnounceFeatureFlag.isEnabled.getter()
{
  unsigned __int8 *v0;
  os_unfair_lock_s *v1;
  unsigned __int8 v3;

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  v0 = (unsigned __int8 *)(static FlexibleAnnounceFeatureFlag.forceEnabled + 16);
  v1 = (os_unfair_lock_s *)(static FlexibleAnnounceFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static FlexibleAnnounceFeatureFlag.forceEnabled + 20));
  closure #1 in FlexibleAnnounceFeatureFlag.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

const char *FlexibleAnnounceFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *FlexibleAnnounceFeatureFlag.feature.getter()
{
  return "intuitive_conversation_announce";
}

uint64_t *FlexibleAnnounceFeatureFlag.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return &static FlexibleAnnounceFeatureFlag.forceEnabled;
}

uint64_t static FlexibleAnnounceFeatureFlag.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  return swift_retain();
}

unsigned __int8 *closure #1 in FlexibleAnnounceFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  char v4;
  char v5;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;

  v3 = *result;
  if (v3 == 2)
  {
    v7 = &type metadata for FlexibleAnnounceFeatureFlag;
    v8 = lazy protocol witness table accessor for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag();
    v4 = isFeatureEnabled(_:)();
    result = (unsigned __int8 *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    v5 = v4 & 1;
  }
  else
  {
    v5 = v3 & 1;
  }
  *a2 = v5;
  return result;
}

uint64_t static FlexibleAnnounceFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void FlexibleAnnounceFeatureFlag.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int FlexibleAnnounceFeatureFlag.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag;
  if (!lazy protocol witness table cache variable for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for FlexibleAnnounceFeatureFlag, &type metadata for FlexibleAnnounceFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag;
  if (!lazy protocol witness table cache variable for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for FlexibleAnnounceFeatureFlag, &type metadata for FlexibleAnnounceFeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance FlexibleAnnounceFeatureFlag()
{
  return "intuitive_conversation_announce";
}

uint64_t storeEnumTagSinglePayload for FlexibleAnnounceFeatureFlag(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4DDA3CC + 4 * asc_1B4EEA720[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4DDA3EC + 4 * byte_1B4EEA725[v4]))();
}

_BYTE *sub_1B4DDA3CC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4DDA3EC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4DDA3F4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4DDA3FC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4DDA404(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4DDA40C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FlexibleAnnounceFeatureFlag()
{
  return &type metadata for FlexibleAnnounceFeatureFlag;
}

uint64_t FlowAgent.__allocating_init(flow:tasks:pluginInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  FlowAgent.init(flow:tasks:pluginInfo:completion:)(a1, a2, a3, a4);
  return v8;
}

uint64_t FlowAgent.flow.getter()
{
  return swift_retain();
}

uint64_t FlowAgent.completion.getter()
{
  return swift_retain();
}

uint64_t FlowAgent.isPreparableFlow.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 128);
}

uint64_t FlowAgent.couldPrepareBeCalled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t FlowAgent.couldPrepareBeCalled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 129) = a1;
  return result;
}

uint64_t (*FlowAgent.couldPrepareBeCalled.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t FlowAgent.isCancelled.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 130);
}

uint64_t FlowAgent.isCancelled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 130) = a1;
  return result;
}

uint64_t (*FlowAgent.isCancelled.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t FlowAgent.tasks.getter()
{
  return swift_bridgeObjectRetain();
}

id FlowAgent.pluginInfo.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 160);
}

uint64_t FlowAgent.init(flow:tasks:pluginInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v11[24];
  uint64_t v12;

  v5 = v4;
  swift_defaultActor_initialize();
  *(_BYTE *)(v5 + 130) = 0;
  *(_QWORD *)(v5 + 136) = 0;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 112) = a1;
  *(_QWORD *)(v5 + 120) = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreparableFlow);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyFlow.unbox<A>(as:)();
  swift_release();
  swift_release();
  LOBYTE(a1) = v12 != 0;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for PreparableFlow?);
  *(_BYTE *)(v5 + 128) = a1;
  *(_BYTE *)(v5 + 129) = a1;
  *(_QWORD *)(v5 + 152) = a2;
  *(_QWORD *)(v5 + 160) = a3;
  return v5;
}

uint64_t FlowAgent.__allocating_init(loadedFlow:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  type metadata accessor for FlowPluginInfo();
  LoadedFlowInfo.fromBundle.getter();
  v4 = FlowPluginInfo.__allocating_init(pluginBundle:)(v11);
  v5 = LoadedFlowInfo.flow.getter();
  v6 = LoadedFlowInfo.activeTasks.getter();
  if (v6)
    v7 = v6;
  else
    v7 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for FlowAgent();
  v8 = swift_allocObject();
  FlowAgent.init(flow:tasks:pluginInfo:completion:)(v5, v7, v4, a2);
  v9 = type metadata accessor for LoadedFlowInfo();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
  return v8;
}

uint64_t type metadata accessor for FlowAgent()
{
  return objc_opt_self();
}

Swift::Void __swiftcall FlowAgent.cancel()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[3];

  v1 = type metadata accessor for FlowTraceEvent();
  v34 = *(_QWORD *)(v1 - 8);
  v35 = v1;
  MEMORY[0x1E0C80A78](v1);
  v33 = (uint64_t *)((char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for executor != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  swift_retain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    *(_DWORD *)v6 = 136315138;
    v37 = *(_QWORD *)(v0 + 112);
    v38[0] = v7;
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
    v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v4, v5, "[Conversation] Cancel flow %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  *(_BYTE *)(v0 + 130) = 1;
  v10 = *(_QWORD *)(v0 + 144);
  if (v10)
  {
    swift_retain_n();
    swift_retain();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      *(_DWORD *)v13 = 136315138;
      v32 = v13 + 4;
      v36 = *(_QWORD *)(v0 + 112);
      v37 = v14;
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
      v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v11, v12, "%s cancelling prepare() task.", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v14, -1, -1);
      MEMORY[0x1B5E44758](v13, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v17 = type metadata accessor for PrepareResponse();
    v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    MEMORY[0x1B5E436B4](v10, v17, v18, MEMORY[0x1E0DEDB38]);
    swift_release();
  }
  v19 = *(_QWORD *)(v0 + 136);
  if (v19)
  {
    swift_retain_n();
    swift_retain();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      *(_DWORD *)v22 = 136315138;
      v32 = v22 + 4;
      v36 = *(_QWORD *)(v0 + 112);
      v37 = v23;
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
      v24 = dispatch thunk of CustomStringConvertible.description.getter();
      v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v20, v21, "%s cancelling execute() task.", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v23, -1, -1);
      MEMORY[0x1B5E44758](v22, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v26 = type metadata accessor for ExecuteResponse();
    v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    MEMORY[0x1B5E436B4](v19, v26, v27, MEMORY[0x1E0DEDB38]);
    swift_release();
  }
  v29 = v33;
  v28 = v34;
  *v33 = *(_QWORD *)(v0 + 112);
  v30 = v35;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v28 + 104))(v29, *MEMORY[0x1E0D9B018], v35);
  swift_retain();
  static FlowTrace.trace(event:)();
  (*(void (**)(_QWORD *, uint64_t))(v28 + 8))(v29, v30);
}

uint64_t FlowAgent.on(input:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[8] = a1;
  v2[9] = v1;
  v3 = type metadata accessor for FlowTraceEvent();
  v2[10] = v3;
  v2[11] = *(_QWORD *)(v3 - 8);
  v2[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t FlowAgent.on(input:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[9];
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v16 = v7;
    *(_DWORD *)v6 = 136315138;
    v0[6] = *(_QWORD *)(v5 + 112);
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
    v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "%s on input.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v11 = v0[8];
  v10 = v0[9];
  type metadata accessor for SiriEnvironment();
  v12 = *(_QWORD *)(v10 + 112);
  v0[13] = v12;
  v0[5] = v12;
  v13 = swift_task_alloc();
  v0[14] = v13;
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v10;
  swift_retain();
  v14 = (_QWORD *)swift_task_alloc();
  v0[15] = v14;
  type metadata accessor for AnyFlow();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9AC70]);
  *v14 = v0;
  v14[1] = FlowAgent.on(input:);
  return static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(unsigned __int8 *)(v0 + 128);
  if ((_DWORD)v1 == 1)
  {
    v2 = *(_QWORD *)(v0 + 72);
    v3 = *(_BYTE *)(v2 + 128);
    swift_beginAccess();
    *(_BYTE *)(v2 + 129) = v3;
  }
  v5 = *(_QWORD **)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flow: AnyFlow, input: Input, result: Bool));
  v10 = (char *)v5 + *(int *)(v9 + 48);
  v11 = *(int *)(v9 + 64);
  *v5 = v4;
  v12 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v8, v12);
  *((_BYTE *)v5 + v11) = v1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v5, *MEMORY[0x1E0D9B000], v6);
  swift_retain();
  static FlowTrace.trace(event:)();
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v5, v6);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t closure #1 in FlowAgent.on(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for OSSignpostID();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  v5 = type metadata accessor for UUID();
  v3[8] = v5;
  v3[9] = *(_QWORD *)(v5 - 8);
  v3[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in FlowAgent.on(input:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_BYTE *)(v0 + 144) = static os_signpost_type_t.begin.getter();
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 88) = static Log.executor;
  *(_QWORD *)(v0 + 96) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v4 = swift_allocObject();
  *(_QWORD *)(v0 + 104) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_1B4EEA7F0;
  Input.identifier.getter();
  v5 = UUID.uuidString.getter();
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(_QWORD *)(v4 + 56) = MEMORY[0x1E0DEA968];
  v8 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v0 + 112) = v8;
  *(_QWORD *)(v4 + 64) = v8;
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 112);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD **)(v0 + 104);
  v3 = AnyFlow.description.getter();
  v2[12] = MEMORY[0x1E0DEA968];
  v2[13] = v1;
  v2[9] = v3;
  v2[10] = v4;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD **)(v0 + 104);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B4EE3F50;
  v4 = ObjectIdentifier.hashValue.getter();
  v5 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v3 + 56) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v3 + 64) = v5;
  *(_QWORD *)(v3 + 32) = v4;
  v6 = String.init(format:_:)();
  v2[17] = MEMORY[0x1E0DEA968];
  v2[18] = v1;
  v2[14] = v6;
  v2[15] = v7;
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;
  uint64_t (*v10)(_QWORD);

  v1 = (_QWORD *)v0[13];
  v3 = v0[6];
  v2 = v0[7];
  v4 = v0[5];
  AnyFlow.description.getter();
  v5 = String.hashValue.getter();
  swift_bridgeObjectRelease();
  v6 = MEMORY[0x1E0DEB490];
  v1[22] = MEMORY[0x1E0DEB418];
  v1[23] = v6;
  v1[19] = v5;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[16] = v7;
  v7(v2, v4);
  v10 = (uint64_t (*)(_QWORD))((int)*MEMORY[0x1E0D9ACB0] + MEMORY[0x1E0D9ACB0]);
  v8 = (_QWORD *)swift_task_alloc();
  v0[17] = v8;
  *v8 = v0;
  v8[1] = closure #1 in FlowAgent.on(input:);
  return v10(v0[3]);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(unsigned __int8 *)(v0 + 145);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_BYTE **)(v0 + 16);
  static os_signpost_type_t.end.getter();
  v6 = swift_allocObject();
  v7 = MEMORY[0x1E0DEB418];
  *(_OWORD *)(v6 + 16) = xmmword_1B4EE3F50;
  v8 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v6 + 56) = v7;
  *(_QWORD *)(v6 + 64) = v8;
  *(_QWORD *)(v6 + 32) = v1;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  v2(v3, v4);
  *v5 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in FlowAgent.on(input:)(char a1)
{
  uint64_t v1;

  *(_BYTE *)(*(_QWORD *)v1 + 145) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t FlowAgent.paraphrase()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = v1;
  return swift_task_switch();
}

uint64_t FlowAgent.paraphrase()()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v14;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[6];
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    v0[3] = *(_QWORD *)(v5 + 112);
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
    v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "%s paraphrase.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v10 = v0[6];
  type metadata accessor for SiriEnvironment();
  v0[2] = *(_QWORD *)(v10 + 112);
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc();
  v0[7] = v11;
  type metadata accessor for AnyFlow();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8];
  type metadata accessor for ActionParaphrase();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, v12, MEMORY[0x1E0D9AC70]);
  *v11 = v0;
  v11[1] = FlowAgent.paraphrase();
  return static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:)();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in FlowAgent.paraphrase()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 112) = a1;
  *(_QWORD *)(v2 + 120) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in FlowAgent.paraphrase()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 128) = *(_QWORD *)(*(_QWORD *)(v0 + 120) + 112);
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParaphrasableFlow);
  dispatch thunk of AnyFlow.unbox<A>(as:)();
  if (*(_QWORD *)(v0 + 80))
  {
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), v0 + 16);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v1;
    *v1 = v0;
    v1[1] = closure #1 in FlowAgent.paraphrase();
    return dispatch thunk of ParaphrasableFlow.paraphrase()();
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ParaphrasableFlow?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
    swift_retain_n();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = *(_QWORD *)(v0 + 128);
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v11 = v8;
      *(_DWORD *)v7 = 136315138;
      *(_QWORD *)(v0 + 96) = v6;
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
      v9 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v4, v5, "[Conversation] %s paraphrase called on non input paraphrasing flow", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    static ActionParaphrase.noParaphrase()();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t FlowAgent.execute(timeout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  v4 = type metadata accessor for CancellationError();
  v3[22] = v4;
  v3[23] = *(_QWORD *)(v4 - 8);
  v3[24] = swift_task_alloc();
  v5 = type metadata accessor for TimeoutError();
  v3[25] = v5;
  v3[26] = *(_QWORD *)(v5 - 8);
  v3[27] = swift_task_alloc();
  v6 = type metadata accessor for FlowTraceEvent();
  v3[28] = v6;
  v3[29] = *(_QWORD *)(v6 - 8);
  v3[30] = swift_task_alloc();
  v7 = type metadata accessor for ExecuteResponse();
  v3[31] = v7;
  v3[32] = *(_QWORD *)(v7 - 8);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  v8 = type metadata accessor for DispatchTimeInterval();
  v3[35] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[36] = v9;
  v3[37] = *(_QWORD *)(v9 + 64);
  v3[38] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v3[39] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t FlowAgent.execute(timeout:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 168);
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 130) == 1)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(_QWORD *)(v0 + 168);
    if (v5)
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v34 = v8;
      *(_DWORD *)v7 = 136315138;
      *(_QWORD *)(v0 + 136) = *(_QWORD *)(v6 + 112);
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
      v9 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v3, v4, "[Conversation] %s execute cancelled before call.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v7, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    static ExecuteResponse.complete()();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 320) = __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    swift_retain_n();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.debug.getter();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v0 + 168);
    if (v14)
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v34 = v17;
      *(_DWORD *)v16 = 136315138;
      *(_QWORD *)(v0 + 120) = *(_QWORD *)(v15 + 112);
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
      v18 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v12, v13, "[Conversation] %s execute.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v17, -1, -1);
      MEMORY[0x1B5E44758](v16, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v22 = *(_QWORD *)(v0 + 304);
    v21 = *(_QWORD *)(v0 + 312);
    v23 = *(_QWORD *)(v0 + 288);
    v24 = *(_QWORD *)(v0 + 280);
    v26 = *(_QWORD *)(v0 + 160);
    v25 = *(_QWORD *)(v0 + 168);
    v27 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v21, 1, 1, v27);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v26, v24);
    v29 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type FlowAgent and conformance FlowAgent, v28, (uint64_t (*)(uint64_t))type metadata accessor for FlowAgent, (uint64_t)&protocol conformance descriptor for FlowAgent);
    v30 = (*(unsigned __int8 *)(v23 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    v31 = (char *)swift_allocObject();
    *((_QWORD *)v31 + 2) = v25;
    *((_QWORD *)v31 + 3) = v29;
    *((_QWORD *)v31 + 4) = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(&v31[v30], v22, v24);
    swift_retain_n();
    v32 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC11SiriKitFlow15ExecuteResponseV_Tgm5(v21, (uint64_t)&async function pointer to partial apply for closure #1 in FlowAgent.execute(timeout:), (uint64_t)v31);
    *(_QWORD *)(v0 + 328) = v32;
    *(_QWORD *)(v25 + 136) = v32;
    swift_retain();
    swift_release();
    v33 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 336) = v33;
    *(_QWORD *)(v0 + 344) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    *v33 = v0;
    v33[1] = FlowAgent.execute(timeout:);
    return Task.value.getter();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 352) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 256) + 32);
  v2(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 248));
  if (*(_BYTE *)(v1 + 130) == 1)
  {
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(_QWORD *)(v0 + 168);
    if (v5)
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v28 = v8;
      *(_DWORD *)v7 = 136315138;
      *(_QWORD *)(v0 + 104) = *(_QWORD *)(v6 + 112);
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
      v9 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v3, v4, "[Conversation] %s execute cancelled.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v27 = *(_QWORD *)(v0 + 272);
    v19 = *(_QWORD *)(v0 + 248);
    v20 = *(_QWORD *)(v0 + 256);
    v22 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD **)(v0 + 240);
    v23 = *(_QWORD *)(v0 + 224);
    v24 = *(_QWORD *)(v0 + 168);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flow: AnyFlow, response: ExecuteResponse));
    *v21 = *(_QWORD *)(v24 + 112);
    swift_retain();
    static ExecuteResponse.complete()();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v22 + 104))(v21, *MEMORY[0x1E0D9B008], v23);
    static FlowTrace.trace(event:)();
    (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v21, v23);
    static ExecuteResponse.complete()();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v27, v19);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 272);
    v12 = *(_QWORD *)(v0 + 248);
    v13 = *(_QWORD *)(v0 + 256);
    v15 = *(_QWORD *)(v0 + 232);
    v14 = *(_QWORD **)(v0 + 240);
    v16 = *(_QWORD *)(v0 + 224);
    v17 = *(_QWORD *)(v0 + 168);
    v26 = *(_QWORD *)(v0 + 152);
    v18 = (char *)v14
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flow: AnyFlow, response: ExecuteResponse))
                 + 48);
    *v14 = *(_QWORD *)(v17 + 112);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v11, v12);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v14, *MEMORY[0x1E0D9B008], v16);
    swift_retain();
    static FlowTrace.trace(event:)();
    swift_release();
    (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v14, v16);
    v2(v26, v11, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v44;
  unint64_t v45;

  v1 = *(void **)(v0 + 352);
  *(_QWORD *)(v0 + 40) = v1;
  v2 = v1;
  if (swift_dynamicCast())
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.fault.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(_QWORD *)(v0 + 168);
    if (v5)
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v44 = v8;
      *(_DWORD *)v7 = 136315138;
      *(_QWORD *)(v0 + 88) = *(_QWORD *)(v6 + 112);
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
      v9 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v3, v4, "[Conversation] %s timed out during execution", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v21 = *(void **)(v0 + 352);
    v22 = *(_QWORD *)(v0 + 168);
    v44 = 0;
    v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    *(_QWORD *)(v0 + 80) = *(_QWORD *)(v22 + 112);
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
    swift_retain();
    v23 = dispatch thunk of CustomStringConvertible.description.getter();
    v25 = v24;
    swift_bridgeObjectRelease();
    swift_release();
    v44 = v23;
    v45 = v25;
    v26._object = (void *)0x80000001B4EFCA60;
    v26._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v26);
    v27 = v44;
    v28 = v45;
    lazy protocol witness table accessor for type TimedOutError and conformance TimedOutError();
    swift_allocError();
    *v29 = v27;
    v29[1] = v28;
    swift_willThrow();
    swift_release();
    v30 = v21;
LABEL_14:

    goto LABEL_15;
  }
  v11 = *(void **)(v0 + 352);
  *(_QWORD *)(v0 + 48) = v11;
  v12 = v11;
  if (swift_dynamicCast())
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
    swift_retain_n();
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(_QWORD *)(v0 + 168);
    if (v15)
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v44 = v18;
      *(_DWORD *)v17 = 136315138;
      *(_QWORD *)(v0 + 64) = *(_QWORD *)(v16 + 112);
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
      v19 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v13, v14, "[Conversation] %s cancelled during execution", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v18, -1, -1);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v34 = *(void **)(v0 + 352);
    v35 = *(_QWORD *)(v0 + 168);
    v44 = 0;
    v45 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    *(_QWORD *)(v0 + 56) = *(_QWORD *)(v35 + 112);
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
    swift_retain();
    v36 = dispatch thunk of CustomStringConvertible.description.getter();
    v38 = v37;
    swift_bridgeObjectRelease();
    swift_release();
    v44 = v36;
    v45 = v38;
    v39._object = (void *)0x80000001B4EFCA40;
    v39._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v39);
    v40 = v44;
    v41 = v45;
    lazy protocol witness table accessor for type CancelledError and conformance CancelledError();
    swift_allocError();
    *v42 = v40;
    v42[1] = v41;
    swift_willThrow();
    swift_release();
    v30 = v34;
    goto LABEL_14;
  }
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v33 = 0;
    _os_log_impl(&dword_1B4BE6000, v31, v32, "Unknown result from withTimeout, assuming timed out", v33, 2u);
    MEMORY[0x1B5E44758](v33, -1, -1);
  }

  swift_willThrow();
  swift_release();
LABEL_15:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in FlowAgent.execute(timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in FlowAgent.execute(timeout:)()
{
  uint64_t v0;
  _QWORD *v1;

  DispatchTimeInterval.seconds.getter();
  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  type metadata accessor for ExecuteResponse();
  *v1 = v0;
  v1[1] = closure #1 in FlowAgent.execute(timeout:);
  return withTimeout<A>(seconds:operation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 24) + 136) = 0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_release();
  *(_QWORD *)(v1 + 136) = 0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in FlowAgent.execute(timeout:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[3] = a1;
  v2[4] = a2;
  v2[5] = type metadata accessor for SiriEnvironment();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in FlowAgent.execute(timeout:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 112);
  swift_retain();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v2)(uint64_t);

  v0[2] = v0[6];
  v1 = (_QWORD *)swift_task_alloc();
  v0[7] = v1;
  type metadata accessor for AnyFlow();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8];
  type metadata accessor for ExecuteResponse();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, v2, MEMORY[0x1E0D9AC70]);
  *v1 = v0;
  v1[1] = closure #1 in closure #1 in FlowAgent.execute(timeout:);
  return static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:)();
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in FlowAgent.execute(timeout:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[5] = a1;
  v2[6] = a2;
  v2[7] = type metadata accessor for ExecuteResponseType();
  v2[8] = swift_task_alloc();
  v3 = type metadata accessor for ExecuteResponse();
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in FlowAgent.execute(timeout:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v0[12] = *(_QWORD *)(v0[6] + 112);
  v3 = (uint64_t (*)(_QWORD))((int)*MEMORY[0x1E0D9ACA8] + MEMORY[0x1E0D9ACA8]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[13] = v1;
  *v1 = v0;
  v1[1] = closure #1 in closure #1 in closure #1 in FlowAgent.execute(timeout:);
  return v3(v0[5]);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_retain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v0 + 96);
    v18 = *(_QWORD *)(v0 + 88);
    v20 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 72);
    v9 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v22 = v19;
    *(_DWORD *)v9 = 136315394;
    *(_QWORD *)(v0 + 16) = v8;
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
    v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 12) = 2080;
    ExecuteResponse.type.getter();
    v12 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v21);
    _os_log_impl(&dword_1B4BE6000, v6, v7, "[Conversation] %s execute returned with response type %s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v19, -1, -1);
    MEMORY[0x1B5E44758](v9, -1, -1);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 80);
    v14 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 72);
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t FlowAgent.prepare()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[29] = a1;
  v2[30] = v1;
  v3 = type metadata accessor for CancellationError();
  v2[31] = v3;
  v2[32] = *(_QWORD *)(v3 - 8);
  v2[33] = swift_task_alloc();
  v4 = type metadata accessor for FlowTraceEvent();
  v2[34] = v4;
  v2[35] = *(_QWORD *)(v4 - 8);
  v2[36] = swift_task_alloc();
  v5 = type metadata accessor for PrepareResponse();
  v2[37] = v5;
  v2[38] = *(_QWORD *)(v5 - 8);
  v2[39] = swift_task_alloc();
  v6 = type metadata accessor for OSSignpostID();
  v2[40] = v6;
  v2[41] = *(_QWORD *)(v6 - 8);
  v2[42] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t FlowAgent.prepare()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40[2];

  v1 = *(_QWORD *)(v0 + 240);
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 130) == 1)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(_QWORD *)(v0 + 240);
    if (v5)
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v40[0] = v8;
      *(_DWORD *)v7 = 136315138;
      *(_QWORD *)(v0 + 216) = *(_QWORD *)(v6 + 112);
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
      v9 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v3, v4, "[Conversation] %s prepare cancelled before call.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v8, -1, -1);
      MEMORY[0x1B5E44758](v7, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    static PrepareResponse.complete()();
    goto LABEL_17;
  }
  v11 = *(_QWORD *)(v0 + 240);
  swift_beginAccess();
  if ((*(_BYTE *)(v11 + 129) & 1) == 0)
  {
LABEL_16:
    static PrepareResponse.ongoing(needsExecute:)();
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v0 + 240) + 112);
  *(_QWORD *)(v0 + 344) = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreparableFlow);
  dispatch thunk of AnyFlow.unbox<A>(as:)();
  if (!*(_QWORD *)(v0 + 80))
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for PreparableFlow?);
    goto LABEL_16;
  }
  outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), v0 + 16);
  if (one-time initialization token for executor != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 352) = __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
  swift_retain_n();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v40[0] = v17;
    *(_DWORD *)v16 = 136315138;
    *(_QWORD *)(v0 + 200) = v12;
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
    v18 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v14, v15, "[Conversation] %s prepare.", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v17, -1, -1);
    MEMORY[0x1B5E44758](v16, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v39 = *(_QWORD *)(v0 + 240);
  v21 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1B4EE4F40;
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1B4EE3F50;
  v24 = ObjectIdentifier.hashValue.getter();
  v25 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v23 + 56) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v23 + 64) = v25;
  *(_QWORD *)(v23 + 32) = v24;
  v26 = String.init(format:_:)();
  v28 = v27;
  v29 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v22 + 56) = MEMORY[0x1E0DEA968];
  v30 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v22 + 64) = v30;
  *(_QWORD *)(v22 + 32) = v26;
  *(_QWORD *)(v22 + 40) = v28;
  v31 = AnyFlow.description.getter();
  *(_QWORD *)(v22 + 96) = v29;
  *(_QWORD *)(v22 + 104) = v30;
  *(_QWORD *)(v22 + 72) = v31;
  *(_QWORD *)(v22 + 80) = v32;
  AnyFlow.description.getter();
  v33 = String.hashValue.getter();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v22 + 136) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v22 + 144) = v25;
  *(_QWORD *)(v22 + 112) = v33;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for SiriEnvironment();
  *(_QWORD *)(v0 + 152) = v12;
  v34 = swift_task_alloc();
  *(_QWORD *)(v34 + 16) = v39;
  *(_QWORD *)(v34 + 24) = v0 + 16;
  v35 = type metadata accessor for AnyFlow();
  v36 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8];
  *(_QWORD *)(v0 + 360) = v35;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<PrepareResponse, Error>);
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, v36, MEMORY[0x1E0D9AC70]);
  static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:)();
  swift_task_dealloc();
  swift_release();
  v37 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 368) = v37;
  *(_QWORD *)(v39 + 144) = v37;
  swift_retain();
  swift_release();
  v38 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 376) = v38;
  *(_QWORD *)(v0 + 384) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *v38 = v0;
  v38[1] = FlowAgent.prepare();
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 392) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 328);
  v13 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD **)(v0 + 288);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 232);
  v9 = *(_QWORD *)(v0 + 240);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v8, *(_QWORD *)(v0 + 312), v4);
  *(_BYTE *)(v9 + 129) = (PrepareResponse.needsExecute.getter() & 1) == 0;
  v10 = (char *)v6
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flow: AnyFlow, response: PrepareResponse))
               + 48);
  *v6 = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v10, v8, v4);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v6, *MEMORY[0x1E0D9B010], v7);
  swift_retain();
  static FlowTrace.trace(event:)();
  swift_release();
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v6, v7);
  $defer #1 () in FlowAgent.prepare()();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v13);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  void *v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(void **)(v0 + 392);
  *(_QWORD *)(v0 + 160) = v1;
  v2 = v1;
  if (swift_dynamicCast())
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 8))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 248));
    swift_retain_n();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = *(_QWORD *)(v0 + 344);
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = swift_slowAlloc();
      v31 = v7;
      *(_DWORD *)v6 = 136315138;
      *(_QWORD *)(v0 + 184) = v5;
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
      v8 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B4BE6000, v3, v4, "[Conversation] %s prepare cancelled.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v7, -1, -1);
      MEMORY[0x1B5E44758](v6, -1, -1);

    }
    else
    {
      swift_release_n();

    }
  }
  else
  {
    v10 = *(void **)(v0 + 392);
    v11 = v10;
    v12 = v10;
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(void **)(v0 + 392);
    if (v15)
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v31 = v18;
      *(_DWORD *)v17 = 136315138;
      *(_QWORD *)(v0 + 168) = v16;
      v19 = v16;
      v20 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v13, v14, "[Conversation] Error preparing flow: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v18, -1, -1);
      MEMORY[0x1B5E44758](v17, -1, -1);
    }
    else
    {

    }
  }
  v22 = *(_QWORD *)(v0 + 336);
  v23 = *(_QWORD *)(v0 + 344);
  v28 = *(id *)(v0 + 392);
  v29 = *(_QWORD *)(v0 + 328);
  v30 = *(_QWORD *)(v0 + 320);
  v24 = *(_QWORD *)(v0 + 280);
  v25 = *(_QWORD **)(v0 + 288);
  v26 = *(_QWORD *)(v0 + 272);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flow: AnyFlow, response: PrepareResponse));
  *v25 = v23;
  swift_retain();
  static PrepareResponse.complete()();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v24 + 104))(v25, *MEMORY[0x1E0D9B010], v26);
  static FlowTrace.trace(event:)();
  (*(void (**)(_QWORD *, uint64_t))(v24 + 8))(v25, v26);
  static PrepareResponse.complete()();
  swift_release();

  $defer #1 () in FlowAgent.prepare()();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v22, v30);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void $defer #1 () in FlowAgent.prepare()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  static os_signpost_type_t.end.getter();
  if (one-time initialization token for executor != -1)
    swift_once();
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for executor != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    *(_DWORD *)v3 = 136315138;
    v7 = v4;
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9ACD8]);
    v5 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v1, v2, "%s prepare completed.", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v4, -1, -1);
    MEMORY[0x1B5E44758](v3, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t closure #1 in FlowAgent.prepare()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  outlined init with copy of ReferenceResolutionClientProtocol(a2, (uint64_t)v15);
  v11 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type FlowAgent and conformance FlowAgent, v10, (uint64_t (*)(uint64_t))type metadata accessor for FlowAgent, (uint64_t)&protocol conformance descriptor for FlowAgent);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = a1;
  v12[3] = v11;
  v12[4] = a1;
  outlined init with take of ReferenceResolutionClientProtocol(v15, (uint64_t)(v12 + 5));
  swift_retain_n();
  result = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC11SiriKitFlow15PrepareResponseV_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in FlowAgent.prepare(), (uint64_t)v12);
  *a3 = result;
  return result;
}

uint64_t closure #1 in closure #1 in FlowAgent.prepare()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[8] = a4;
  v5[9] = a5;
  v5[7] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in FlowAgent.prepare()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v0 + 72), v0 + 16);
  v1 = swift_allocObject();
  *(_QWORD *)(v0 + 80) = v1;
  outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 16), v1 + 16);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v2;
  type metadata accessor for PrepareResponse();
  *v2 = v0;
  v2[1] = closure #1 in closure #1 in FlowAgent.prepare();
  return withCancellableContinuation<A>(body:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 64) + 144) = 0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release();
  *(_QWORD *)(v1 + 144) = 0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #1 in FlowAgent.prepare()(uint64_t a1, _QWORD *a2)
{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  swift_retain();
  dispatch thunk of PreparableFlow.prepare(completion:)();
  return swift_release();
}

Swift::Void __swiftcall FlowAgent.complete()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[5];
  _BYTE v8[32];

  v1 = type metadata accessor for FlowTraceEvent();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (_QWORD *)((char *)&v7[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for SiriEnvironment();
  v5 = *(_QWORD *)(v0 + 112);
  v7[0] = v5;
  type metadata accessor for AnyFlow();
  lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ACC8], MEMORY[0x1E0D9AC70]);
  swift_retain();
  static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:)();
  swift_release();
  if (*(_QWORD *)(v0 + 120))
  {
    outlined init with copy of Any((uint64_t)v8, (uint64_t)v7);
    swift_retain();
    dispatch thunk of AnyChildCompletion.completion(exitValue:)();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  *v4 = v5;
  outlined init with copy of Any((uint64_t)v8, (uint64_t)(v4 + 1));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0D9B020], v1);
  swift_retain();
  static FlowTrace.trace(event:)();
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t FlowAgent.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();
  return v0;
}

uint64_t FlowAgent.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t FlowAgent.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t partial apply for closure #1 in FlowAgent.on(input:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in FlowAgent.on(input:)(a1, v5, v4);
}

uint64_t partial apply for closure #1 in FlowAgent.paraphrase()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  v4[14] = a1;
  v4[15] = v1;
  return swift_task_switch();
}

uint64_t sub_1B4DDEC80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for DispatchTimeInterval();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FlowAgent.execute(timeout:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DispatchTimeInterval() - 8) + 80);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = v1 + ((v4 + 40) & ~v4);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v7[3] = v5;
  v7[4] = v6;
  v7[2] = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in FlowAgent.prepare()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in FlowAgent.prepare()(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in FlowAgent.complete()()
{
  return dispatch thunk of AnyFlow.exitValue.getter();
}

uint64_t sub_1B4DDEDC8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 129);
  return result;
}

uint64_t sub_1B4DDEE0C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 129) = v2;
  return result;
}

uint64_t sub_1B4DDEE4C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 130);
  return result;
}

uint64_t sub_1B4DDEE90(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 130) = v2;
  return result;
}

uint64_t method lookup function for FlowAgent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FlowAgent.couldPrepareBeCalled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of FlowAgent.couldPrepareBeCalled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of FlowAgent.couldPrepareBeCalled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of FlowAgent.isCancelled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of FlowAgent.isCancelled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of FlowAgent.isCancelled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of FlowAgent.__allocating_init(flow:tasks:pluginInfo:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of FlowAgent.cancel()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of FlowAgent.on(input:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 272) + *(_QWORD *)(*(_QWORD *)v1 + 272));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v6(a1);
}

uint64_t dispatch thunk of FlowAgent.paraphrase()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 280) + *(_QWORD *)(*(_QWORD *)v1 + 280));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t dispatch thunk of FlowAgent.execute(timeout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 288) + *(_QWORD *)(*(_QWORD *)v2 + 288));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v8(a1, a2);
}

uint64_t dispatch thunk of FlowAgent.prepare()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 296) + *(_QWORD *)(*(_QWORD *)v1 + 296));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t dispatch thunk of FlowAgent.complete()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t sub_1B4DDF0EC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in FlowAgent.prepare()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v5[8] = v4;
  v5[9] = v1 + 40;
  v5[7] = a1;
  return swift_task_switch();
}

uint64_t sub_1B4DDF194()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in FlowAgent.prepare()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in FlowAgent.prepare()(a1, (_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in FlowAgent.execute(timeout:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v4[3] = a1;
  v4[4] = v1;
  v4[5] = type metadata accessor for SiriEnvironment();
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in FlowAgent.execute(timeout:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in closure #1 in FlowAgent.execute(timeout:)(a1, v1);
}

uint64_t dispatch thunk of FlowBundle.warmup(refId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of FlowBundle.findFlow(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t FlowExtensionConnection.__allocating_init(nsExtension:onConnectionInterrupted:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  FlowExtensionConnection.init(nsExtension:onConnectionInterrupted:)(a1, a2, a3);
  return v6;
}

_QWORD *FlowExtensionConnection.init(nsExtension:onConnectionInterrupted:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;

  v4 = (_QWORD *)v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, v3 + 32);
  v12 = a1[3];
  v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v26 = v14;
  v15._countAndFlagsBits = 60;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  UUID.init()();
  v16 = UUID.uuidString.getter();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 62;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  v22 = v25;
  v21 = v26;
  v4[2] = v25;
  v4[3] = v21;
  v4[9] = a2;
  v4[10] = a3;
  type metadata accessor for InterruptibleTaskManager();
  v23 = (_QWORD *)swift_allocObject();
  v23[4] = MEMORY[0x1E0DEE9E0];
  v23[5] = 0;
  v23[2] = v22;
  v23[3] = v21;
  v4[20] = v23;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v4;
}

uint64_t FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  v5[6] = a1;
  v7 = type metadata accessor for OSSignpostID();
  v5[11] = v7;
  v5[12] = *(_QWORD *)(v7 - 8);
  v5[13] = swift_task_alloc();
  v8 = type metadata accessor for OSSignposter();
  v5[14] = v8;
  v5[15] = *(_QWORD *)(v8 - 8);
  v5[16] = swift_task_alloc();
  v11 = type metadata accessor for InterruptibleTaskResult(0, a4, v9, v10);
  v5[17] = v11;
  v5[18] = *(_QWORD *)(v11 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[21] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint8_t *v24;
  NSObject *v25;
  os_signpost_type_t v26;
  os_signpost_id_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_signpost_type_t v33;
  os_signpost_id_t v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];

  v1 = v0[10];
  v2 = *(_QWORD *)(v1 + 88);
  v0[22] = v2;
  if (v2)
  {
    v3 = v0[8];
    v4 = v0[9];
    v5 = v0[7];
    v6 = *(_QWORD *)(v1 + 96);
    v7 = (_QWORD *)swift_allocObject();
    v0[23] = v7;
    v7[2] = v4;
    v7[3] = v5;
    v7[4] = v3;
    v7[5] = v2;
    v7[6] = v6;
    swift_unknownObjectRetain_n();
    swift_retain();
    v8 = (_QWORD *)swift_task_alloc();
    v0[24] = v8;
    *v8 = v0;
    v8[1] = FlowExtensionConnection.withRemoteConversationConnection<A>(execute:);
    return InterruptibleTaskManager.perform<A>(_:)(v0[20], (uint64_t)&async function pointer to partial apply for closure #1 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:), (uint64_t)v7, v0[9]);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    swift_retain();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.info.getter();
    v13 = os_log_type_enabled(v11, v12);
    v14 = v0[10];
    if (v13)
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v42[0] = v16;
      *(_DWORD *)v15 = 136315138;
      v18 = *(_QWORD *)(v14 + 16);
      v17 = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1B4BE6000, v11, v12, "Flow Extension %s is not active, beginning new request.", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v16, -1, -1);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }
    else
    {
      swift_release();
    }

    if (one-time initialization token for executor != -1)
      swift_once();
    v20 = v0[15];
    v19 = v0[16];
    v21 = v0[14];
    v22 = (_QWORD *)v0[10];
    v23 = __swift_project_value_buffer(v21, (uint64_t)static Signposter.executor);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v23, v21);
    static OSSignpostID.exclusive.getter();
    v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v24 = 0;
    v25 = OSSignposter.logHandle.getter();
    v26 = static os_signpost_type_t.begin.getter();
    v27 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v25, v26, v27, "FlowExtensionBringup", "", v24, 2u);
    closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(v22, v42);
    v28 = v0[15];
    v29 = v0[13];
    v38 = v0[14];
    v39 = v0[16];
    v31 = v0[11];
    v30 = v0[12];
    v32 = v0[8];
    v40 = v0[7];
    v41 = v0[9];
    v33 = static os_signpost_type_t.end.getter();
    v34 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v25, v33, v34, "FlowExtensionBringup", "", v24, 2u);

    v37 = *(_OWORD *)v42;
    v0[26] = v42[0];
    MEMORY[0x1B5E44758](v24, -1, -1);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v39, v38);
    v35 = swift_allocObject();
    v0[27] = v35;
    *(_QWORD *)(v35 + 16) = v41;
    *(_QWORD *)(v35 + 24) = v40;
    *(_QWORD *)(v35 + 32) = v32;
    *(_OWORD *)(v35 + 40) = v37;
    swift_retain();
    swift_unknownObjectRetain();
    v36 = (_QWORD *)swift_task_alloc();
    v0[28] = v36;
    *v36 = v0;
    v36[1] = FlowExtensionConnection.withRemoteConversationConnection<A>(execute:);
    return InterruptibleTaskManager.perform<A>(_:)(v0[19], (uint64_t)&async function pointer to partial apply for closure #3 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:), v35, v0[9]);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release();
  InterruptibleTaskResult.get()(v1, v2);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release();
  InterruptibleTaskResult.get()(v1, v2);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)a2 + *a2);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v9;
  *v9 = v5;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v11(a1, a4, a5);
}

void closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  id v15;
  Swift::String v16;
  __int128 v17;
  __int128 *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  __int128 v35;
  __int128 *v36;
  uint64_t v37;
  void *v38;
  Swift::String v39;
  __int128 v40;
  __int128 *v41;
  Swift::String v42;
  uint64_t v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  __int128 v48;
  __int128 *v49;
  _QWORD v50[3];
  __int128 aBlock;
  void (*v52)(uint64_t, void *);
  void *v53;
  uint64_t (*v54)(void *);
  _QWORD *v55;
  _QWORD v56[4];
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v50 - v9;
  v11 = a1[7];
  v12 = a1[8];
  __swift_project_boxed_opaque_existential_1(a1 + 4, v11);
  v13 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(v12 + 24))(0, 0, v11, v12);
  if (v2)
  {
    *(_QWORD *)&aBlock = 0;
    *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v14._countAndFlagsBits = 0xD000000000000033;
    v14._object = (void *)0x80000001B4EFCD20;
    String.append(_:)(v14);
    v57[0] = v2;
    v15 = v2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v16._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17 = aBlock;
    lazy protocol witness table accessor for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError();
    swift_allocError();
    *v18 = v17;
    swift_willThrow();

    return;
  }
  *(_QWORD *)&aBlock = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSCopying);
  v19 = type metadata accessor for UUID();
  v20 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v8, v20 ^ 1u, 1, v19);
  outlined init with take of UUID?((uint64_t)v8, (uint64_t)v10);
  v21 = a1[7];
  v22 = a1[8];
  __swift_project_boxed_opaque_existential_1(a1 + 4, v21);
  (*(void (**)(__int128 *__return_ptr, char *, uint64_t, uint64_t))(v22 + 32))(&aBlock, v10, v21, v22);
  if (!v53)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&aBlock, &demangling cache variable for type metadata for NSExtensionContextProtocol?);
    *(_QWORD *)&aBlock = 0;
    *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    *(_QWORD *)&aBlock = 0xD000000000000024;
    *((_QWORD *)&aBlock + 1) = 0x80000001B4EFCD60;
    v32 = a1[2];
    v33 = (void *)a1[3];
    swift_bridgeObjectRetain();
    v34._countAndFlagsBits = v32;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35 = aBlock;
    lazy protocol witness table accessor for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError();
    swift_allocError();
    *v36 = v35;
    swift_willThrow();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    return;
  }
  outlined init with take of ReferenceResolutionClientProtocol(&aBlock, (uint64_t)v57);
  v23 = v58;
  v24 = v59;
  __swift_project_boxed_opaque_existential_1(v57, v58);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
  if (!v25)
  {
    *(_QWORD *)&aBlock = 0;
    *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    *(_QWORD *)&aBlock = 0xD000000000000026;
    *((_QWORD *)&aBlock + 1) = 0x80000001B4EFCD90;
    v37 = a1[2];
    v38 = (void *)a1[3];
    swift_bridgeObjectRetain();
    v39._countAndFlagsBits = v37;
    v39._object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40 = aBlock;
    lazy protocol witness table accessor for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError();
    swift_allocError();
    *v41 = v40;
    swift_willThrow();
LABEL_10:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    goto LABEL_11;
  }
  v26 = (void *)v25;
  v54 = partial apply for closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:);
  v55 = a1;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v52 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v53 = &block_descriptor_11;
  v27 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v28 = objc_msgSend(v26, sel_remoteObjectProxyWithErrorHandler_, v27);
  _Block_release(v27);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v56, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationXPC);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(_QWORD *)&aBlock = 0;
    *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(82);
    v42._object = (void *)0x80000001B4EFCDC0;
    v42._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v42);
    v43 = a1[2];
    v44 = (void *)a1[3];
    swift_bridgeObjectRetain();
    v45._countAndFlagsBits = v43;
    v45._object = v44;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._countAndFlagsBits = 0xD00000000000002ELL;
    v46._object = (void *)0x80000001B4EFCDF0;
    String.append(_:)(v46);
    __swift_project_boxed_opaque_existential_1(v56, v56[3]);
    v50[0] = swift_getDynamicType();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
    v47._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48 = aBlock;
    lazy protocol witness table accessor for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError();
    swift_allocError();
    *v49 = v48;
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
    goto LABEL_10;
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_getObjectType();
  v29 = RemoteConversationXPC.sendableWrapper.getter();
  v31 = v30;
  swift_unknownObjectRelease();
  a1[11] = v29;
  a1[12] = v31;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v57, (uint64_t)&aBlock);
  swift_beginAccess();
  outlined assign with take of NSExtensionContextProtocol?((uint64_t)&aBlock, (uint64_t)(a1 + 13));
  swift_endAccess();
  *a2 = v29;
  a2[1] = v31;
LABEL_11:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
}

uint64_t closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26[3];

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
  swift_retain();
  v8 = a1;
  swift_retain();
  v9 = a1;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v26[0] = v13;
    *(_DWORD *)v12 = 136315394;
    v14 = *(_QWORD *)(a2 + 16);
    v15 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v25 = (uint64_t)a1;
    v16 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v17 = String.init<A>(describing:)();
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v10, v11, "Error communicating with Siri Flow Extension %s: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v13, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }
  else
  {
    swift_release_n();

  }
  v19 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v6, 1, 1, v19);
  swift_retain();
  v20 = a1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v21 = static MessageBusActor.shared;
  v22 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  v23 = (_QWORD *)swift_allocObject();
  v23[2] = v21;
  v23[3] = v22;
  v23[4] = a2;
  v23[5] = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:), (uint64_t)v23);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 40) + 72))(*(_QWORD *)(v0 + 48));
  FlowExtensionConnection.invalidate()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

SiriKitRuntime::RemoteConversationConnectionInvalidationResult __swiftcall FlowExtensionConnection.invalidate()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  SiriKitRuntime::RemoteConversationConnectionInvalidationResult v4;
  _OWORD v6[2];
  uint64_t v7;

  v1 = v0;
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v3 = *(_QWORD *)(v0 + 160);
  swift_beginAccess();
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 16) == 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  swift_unknownObjectRelease();
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  swift_beginAccess();
  outlined assign with take of NSExtensionContextProtocol?((uint64_t)v6, v1 + 104);
  swift_endAccess();
  InterruptibleTaskManager.invalidate()();
  return v4;
}

uint64_t closure #3 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)a2 + *a2);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v9;
  *v9 = v5;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v11(a1, a4, a5);
}

uint64_t FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  v6 = type metadata accessor for InterruptibleTaskResult(0, a4, a3, a4);
  v5[10] = v6;
  v5[11] = *(_QWORD *)(v6 - 8);
  v5[12] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[13] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t FlowExtensionConnection.kill()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 48);
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "Killing process for %s with SIGKILL", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  v10 = *(_QWORD **)(v0 + 48);
  v11 = v10[7];
  v12 = v10[8];
  __swift_project_boxed_opaque_existential_1(v10 + 4, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(9, v11, v12);
  FlowExtensionConnection.invalidate()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t FlowExtensionConnection.ExtensionError.errorDescription.getter(uint64_t a1, void *a2)
{
  Swift::String v4;

  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  return 0xD000000000000019;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance FlowExtensionConnection.ExtensionError()
{
  uint64_t v0;

  return FlowExtensionConnection.ExtensionError.errorDescription.getter(*(_QWORD *)v0, *(void **)(v0 + 8));
}

uint64_t FlowExtensionConnection.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_unknownObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 104, &demangling cache variable for type metadata for NSExtensionContextProtocol?);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t FlowExtensionConnection.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_release();
  swift_unknownObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 104, &demangling cache variable for type metadata for NSExtensionContextProtocol?);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for RemoteConversationConnectionProviding.withRemoteConversationConnection<A>(execute:) in conformance FlowExtensionConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(a1, a2, a3, a4);
}

uint64_t protocol witness for RemoteConversationConnectionProviding.withRemoteConversationConnectionIfValid<A>(execute:) in conformance FlowExtensionConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:)(a1, a2, a3, a4);
}

uint64_t protocol witness for RemoteConversationConnectionProviding.invalidate() in conformance FlowExtensionConnection()
{
  return FlowExtensionConnection.invalidate()();
}

uint64_t partial apply for closure #3 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = (int *)v1[3];
  v6 = v1[5];
  v5 = v1[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  v8 = (_QWORD *)swift_task_alloc();
  v7[2] = v8;
  *v8 = v7;
  v8[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v10(a1, v6, v5);
}

uint64_t partial apply for closure #1 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = (int *)v1[3];
  v6 = v1[5];
  v5 = v1[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  v8 = (_QWORD *)swift_task_alloc();
  v7[2] = v8;
  *v8 = v7;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v10(a1, v6, v5);
}

uint64_t outlined assign with take of NSExtensionContextProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSExtensionContextProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = (int *)v1[3];
  v6 = v1[5];
  v5 = v1[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  v8 = (_QWORD *)swift_task_alloc();
  v7[2] = v8;
  *v8 = v7;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v10(a1, v6, v5);
}

unint64_t lazy protocol witness table accessor for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError;
  if (!lazy protocol witness table cache variable for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for FlowExtensionConnection.ExtensionError, &type metadata for FlowExtensionConnection.ExtensionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError);
  }
  return result;
}

uint64_t type metadata accessor for FlowExtensionConnection()
{
  return objc_opt_self();
}

uint64_t method lookup function for FlowExtensionConnection()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FlowExtensionConnection.__allocating_init(nsExtension:onConnectionInterrupted:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

ValueMetadata *type metadata accessor for FlowExtensionConnection.ExtensionError()
{
  return &type metadata for FlowExtensionConnection.ExtensionError;
}

uint64_t partial apply for closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(void *a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(a1, v1);
}

uint64_t sub_1B4DE1520()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(a1, v4, v5, v7, v6);
}

uint64_t NoopSiriKitEventSender.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t FlowExtensionContext.__allocating_init(inputItems:listenerEndpoint:contextUUID:overrideFlowExtension:overrideSiriKitRuntime:overrideExtensionId:overrideIntentTopics:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v9;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v18 = objc_allocWithZone(v9);
  specialized FlowExtensionContext.init(inputItems:listenerEndpoint:contextUUID:overrideFlowExtension:overrideSiriKitRuntime:overrideExtensionId:overrideIntentTopics:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v20 = v19;
  swift_release();
  swift_unknownObjectRelease();

  return v20;
}

uint64_t FlowExtensionContext.init(inputItems:listenerEndpoint:contextUUID:overrideFlowExtension:overrideSiriKitRuntime:overrideExtensionId:overrideIntentTopics:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;

  specialized FlowExtensionContext.init(inputItems:listenerEndpoint:contextUUID:overrideFlowExtension:overrideSiriKitRuntime:overrideExtensionId:overrideIntentTopics:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v11 = v10;
  swift_release();
  swift_unknownObjectRelease();

  return v11;
}

id FlowExtensionContext.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t FlowExtensionContext.init()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectType = swift_getObjectType();
  v4 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  v5 = (*(uint64_t (**)(_QWORD))(ObjectType + 216))(MEMORY[0x1E0DEE9D8]);
  swift_deallocPartialClassInstance();
  return v5;
}

id FlowExtensionContext.__allocating_init(inputItems:)()
{
  objc_class *v0;
  id v1;
  Class isa;
  id v3;

  v1 = objc_allocWithZone(v0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithInputItems_, isa);

  return v3;
}

uint64_t FlowExtensionContext.init(inputItems:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectType = swift_getObjectType();
  v6 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 1, 1, v6);
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, char *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(ObjectType + 216))(a1, 0, v4, 0, 0, 0, 0, 0, MEMORY[0x1E0DEE9D8]);
  swift_deallocPartialClassInstance();
  return v7;
}

id FlowExtensionContext.__allocating_init(inputItems:listenerEndpoint:contextUUID:)(uint64_t a1, void *a2, uint64_t a3)
{
  objc_class *v3;
  objc_class *v4;
  NSArray v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  id v11;

  v4 = v3;
  v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a3, 1, v8) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a3, v8);
  }
  v11 = objc_msgSend(objc_allocWithZone(v4), sel_initWithInputItems_listenerEndpoint_contextUUID_, v7.super.isa, a2, isa);

  return v11;
}

uint64_t FlowExtensionContext.init(inputItems:listenerEndpoint:contextUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v12;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectType = swift_getObjectType();
  outlined init with copy of UUID?(a3, (uint64_t)v8);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, char *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(ObjectType + 216))(a1, a2, v8, 0, 0, 0, 0, 0, MEMORY[0x1E0DEE9D8]);
  outlined destroy of UUID?(a3);
  swift_deallocPartialClassInstance();
  return v10;
}

id static FlowExtensionContext._extensionAuxiliaryVendorProtocol()()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for remoteConversationXPCInterface, (id *)&static RemoteConversationXPCHelper.remoteConversationXPCInterface);
}

id static FlowExtensionContext._extensionAuxiliaryHostProtocol()()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for remoteConversationHostXPCInterface, (id *)&static RemoteConversationXPCHelper.remoteConversationHostXPCInterface);
}

id @objc static FlowExtensionContext._extensionAuxiliaryVendorProtocol()(uint64_t a1, uint64_t a2, _QWORD *a3, id *a4)
{
  if (*a3 != -1)
    swift_once();
  return *a4;
}

uint64_t FlowExtensionContext.remoteConversationService.getter()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR___SKRFlowExtensionContext____lazy_storage___remoteConversationService;
  if (*(_QWORD *)&v0[OBJC_IVAR___SKRFlowExtensionContext____lazy_storage___remoteConversationService])
  {
    v2 = *(_QWORD *)&v0[OBJC_IVAR___SKRFlowExtensionContext____lazy_storage___remoteConversationService];
  }
  else
  {
    v2 = closure #1 in FlowExtensionContext.remoteConversationService.getter(v0);
    *(_QWORD *)&v0[v1] = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t closure #1 in FlowExtensionContext.remoteConversationService.getter(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjCClassFromMetadata;
  void *v22;
  id v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t result;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = type metadata accessor for FlowPluginBundleImpl();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)&a1[OBJC_IVAR___SKRFlowExtensionContext_overrideFlowExtension];
  v37 = v3;
  if (!v6)
  {
    v8 = objc_msgSend(a1, sel__principalObject);
    if (v8)
    {
      v9 = (uint64_t)v8;
      swift_getObjectType();
      v10 = swift_conformsToProtocol2();
      if (v10)
        v11 = v10;
      else
        v11 = 0;
      if (v10)
        v7 = v9;
      else
        v7 = 0;
      if (v7)
      {
        v36 = v11;
        goto LABEL_12;
      }
      swift_unknownObjectRelease();
    }
    v42 = 0;
    v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v33._object = (void *)0x80000001B4EFD140;
    v33._countAndFlagsBits = 0xD000000000000035;
    String.append(_:)(v33);
    *(_QWORD *)&v39 = objc_msgSend(a1, sel__principalObject);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject?);
    v34._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v42, v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/FlowExtension/FlowExtensionContext.swift", 128, 2, 82);
    __break(1u);
    return result;
  }
  v36 = *(_QWORD *)&a1[OBJC_IVAR___SKRFlowExtensionContext_overrideFlowExtension + 8];
  v7 = v6;
LABEL_12:
  v12 = *(_QWORD *)&a1[OBJC_IVAR___SKRFlowExtensionContext_overrideSiriKitRuntime];
  if (v12)
  {
    swift_unknownObjectRetain();
    v13 = v12;
  }
  else
  {
    v14 = type metadata accessor for NoopSiriKitEventSender();
    v15 = swift_allocObject();
    v44 = v14;
    v45 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type NoopSiriKitEventSender and conformance NoopSiriKitEventSender, v16, (uint64_t (*)(uint64_t))type metadata accessor for NoopSiriKitEventSender, (uint64_t)&protocol conformance descriptor for NoopSiriKitEventSender);
    v42 = v15;
    type metadata accessor for SiriKitRuntimeState();
    v39 = 0u;
    v40 = 0u;
    v41 = 0;
    swift_allocObject();
    swift_unknownObjectRetain();
    v13 = SiriKitRuntimeState.init(customEventSender:rrClient:)((uint64_t)&v42, (uint64_t)&v39);
  }
  v17 = *(_QWORD *)&a1[OBJC_IVAR___SKRFlowExtensionContext_overrideExtensionId + 8];
  v35 = v13;
  if (v17)
  {
    v18 = v2;
    v19 = *(_QWORD *)&a1[OBJC_IVAR___SKRFlowExtensionContext_overrideExtensionId];
    swift_retain();
    swift_bridgeObjectRetain();
    v20 = v17;
  }
  else
  {
    swift_getObjectType();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v22 = (void *)objc_opt_self();
    swift_retain();
    v23 = objc_msgSend(v22, sel_bundleForClass_, ObjCClassFromMetadata, v35);
    v19 = NSBundle.packageId.getter();
    v20 = v24;
    v25 = objc_msgSend(v23, sel_infoDictionary);
    if (v25)
    {
      v26 = v25;
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    }
    v18 = v2;
    static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
    swift_bridgeObjectRelease();

  }
  v27 = type metadata accessor for RemoteConversationService(0);
  ObjectType = swift_getObjectType();
  v44 = ObjectType;
  v45 = *(_QWORD *)(*(_QWORD *)(v36 + 8) + 8);
  v29 = v45;
  v42 = v7;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  FlowPluginBundleImpl.init(bundlePath:supportedTopics:)();
  type metadata accessor for SnippetManager();
  v39 = 0u;
  v40 = 0u;
  v41 = 0;
  v30 = static SnippetManager.sharedInstance.getter();
  v38 = v7;
  swift_unknownObjectRetain();
  v31 = specialized RemoteConversationService.__allocating_init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)((uint64_t)&v38, v19, v20, (uint64_t)v5, v35, (uint64_t)closure #1 in closure #1 in FlowExtensionContext.remoteConversationService.getter, 0, v30, (uint64_t)&v39, v27, ObjectType, v18, v29, MEMORY[0x1E0D9B0F0]);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v42);
  swift_unknownObjectRelease();
  return (uint64_t)v31;
}

uint64_t closure #1 in closure #1 in FlowExtensionContext.remoteConversationService.getter()
{
  return 0;
}

uint64_t FlowExtensionContext.remoteConversationService.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___SKRFlowExtensionContext____lazy_storage___remoteConversationService) = a1;
  return swift_release();
}

uint64_t (*FlowExtensionContext.remoteConversationService.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = FlowExtensionContext.remoteConversationService.getter();
  return FlowExtensionContext.remoteConversationService.modify;
}

uint64_t FlowExtensionContext.remoteConversationService.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + OBJC_IVAR___SKRFlowExtensionContext____lazy_storage___remoteConversationService) = *a1;
  return swift_release();
}

uint64_t FlowExtensionContext.warmup(refId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0xE0))(v10);
  if (one-time initialization token for executor != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 1, 1, v15);
  v16 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v16 != -1)
    swift_once();
  v17 = static ConversationActor.shared;
  v18 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, 255, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v19 = (_QWORD *)swift_allocObject();
  v19[2] = v17;
  v19[3] = v18;
  v19[4] = v13;
  v19[5] = a1;
  v19[6] = a2;
  v19[7] = a3;
  v19[8] = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.warmup(refId:reply:), (uint64_t)v19);
  swift_release();
  return swift_release();
}

uint64_t FlowExtensionContext.canHandle(inputData:rcId:reply:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a3;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v6) + 0xE0))(v13);
  if (one-time initialization token for executor != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v15, 1, 1, v18);
  outlined copy of Data._Representation(a1, a2);
  v19 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v19 != -1)
    swift_once();
  v20 = static ConversationActor.shared;
  v21 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, 255, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v20;
  v22[3] = v21;
  v22[4] = a1;
  v22[5] = a2;
  v22[6] = a5;
  v22[7] = a6;
  v23 = v26;
  v22[8] = v16;
  v22[9] = v23;
  v22[10] = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:), (uint64_t)v22);
  swift_release();
  return swift_release();
}

uint64_t FlowExtensionContext.cancel(reply:)(uint64_t a1, uint64_t a2)
{
  return FlowExtensionContext.cancel(reply:)(a1, a2, (uint64_t)"cancel(reply:)", 14, (uint64_t)&unk_1E684A4B0, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.cancel(reply:));
}

uint64_t FlowExtensionContext.reset(reply:)(uint64_t a1, uint64_t a2)
{
  return FlowExtensionContext.cancel(reply:)(a1, a2, (uint64_t)"reset(reply:)", 13, (uint64_t)&unk_1E684A4D8, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.reset(reply:));
}

uint64_t FlowExtensionContext.cancel(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v6) + 0xE0))(v11);
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v17 != -1)
    swift_once();
  v18 = static ConversationActor.shared;
  v19 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, 255, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v18;
  v20[3] = v19;
  v20[4] = v14;
  v20[5] = a1;
  v20[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, a6, (uint64_t)v20);
  swift_release();
  return swift_release();
}

uint64_t FlowExtensionContext.ensureReady(reply:)(uint64_t a1, uint64_t a2)
{
  return FlowExtensionContext.cancel(reply:)(a1, a2, (uint64_t)"ensureReady(reply:)", 19, (uint64_t)&unk_1E684A500, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.ensureReady(reply:));
}

uint64_t FlowExtensionContext.startTurn(turnData:bridge:reply:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0xE0))();
  RemoteConversationService.startTurn(turnData:bridge:reply:)(a1, a2, a3, a4);
  return swift_release();
}

uint64_t FlowExtensionContext.startTurnFromCache(executionRequestId:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD))
{
  return a4(0, 0);
}

uint64_t FlowExtensionContext.acceptInitialInput(inputIdentifier:speechData:reply:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0xE0))();
  RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:)(a1, a2, a3, a4);
  return swift_release();
}

uint64_t FlowExtensionContext.accept(inputData:speechData:reply:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;

  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v5) + 0xE0))(v12);
  if (one-time initialization token for executor != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v14, 1, 1, v17);
  outlined copy of Data._Representation(a1, a2);
  v18 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  v19 = a3;
  if (v18 != -1)
    swift_once();
  v20 = static ConversationActor.shared;
  v21 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, 255, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v20;
  v22[3] = v21;
  v22[4] = a1;
  v22[5] = a2;
  v22[6] = a4;
  v22[7] = a5;
  v22[8] = v15;
  v22[9] = v19;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.accept(inputData:speechData:reply:), (uint64_t)v22);
  swift_release();
  return swift_release();
}

uint64_t FlowExtensionContext.paraphrase(reply:)(uint64_t a1, uint64_t a2)
{
  return FlowExtensionContext.cancel(reply:)(a1, a2, (uint64_t)"paraphrase(reply:)", 18, (uint64_t)&unk_1E684A550, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.paraphrase(reply:));
}

uint64_t FlowExtensionContext.prepare(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlowExtensionContext.cancel(reply:)(a2, a3, (uint64_t)"prepare(bridge:reply:)", 22, (uint64_t)&unk_1E684A8D0, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.prepare(bridge:reply:));
}

uint64_t FlowExtensionContext.commit(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlowExtensionContext.cancel(reply:)(a2, a3, (uint64_t)"commit(bridge:reply:)", 21, (uint64_t)&unk_1E684A8A8, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.commit(bridge:reply:));
}

uint64_t FlowExtensionContext.isEmpty(reply:)(uint64_t a1, uint64_t a2)
{
  return FlowExtensionContext.cancel(reply:)(a1, a2, (uint64_t)"isEmpty(reply:)", 15, (uint64_t)&unk_1E684A578, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.isEmpty(reply:));
}

uint64_t FlowExtensionContext.isCorrectable(reply:)(uint64_t a1, uint64_t a2)
{
  return FlowExtensionContext.cancel(reply:)(a1, a2, (uint64_t)"isCorrectable(reply:)", 21, (uint64_t)&unk_1E684A5A0, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.isCorrectable(reply:));
}

uint64_t FlowExtensionContext.flexibleExecutionSupportOptions(reply:)(uint64_t a1, uint64_t a2)
{
  return FlowExtensionContext.cancel(reply:)(a1, a2, (uint64_t)"flexibleExecutionSupportOptions(reply:)", 39, (uint64_t)&unk_1E684A5C8, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:));
}

uint64_t @objc FlowExtensionContext.cancel(reply:)(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  void *v9;
  uint64_t v10;
  id v11;

  v9 = _Block_copy(aBlock);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  v11 = a1;
  a6(a5, v10);

  return swift_release();
}

uint64_t FlowExtensionContext.drainAsyncWork(reply:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0xE0))(v6);
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  v11 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v11 != -1)
    swift_once();
  v12 = static ConversationActor.shared;
  v13 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, 255, (uint64_t (*)(uint64_t))type metadata accessor for ConversationActor, (uint64_t)&protocol conformance descriptor for ConversationActor);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v12;
  v14[3] = v13;
  v14[4] = v9;
  v14[5] = a1;
  v14[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.drainAsyncWork(reply:), (uint64_t)v14);
  swift_release();
  return swift_release();
}

id FlowExtensionContext.__allocating_init(inputItems:contextUUID:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  NSArray v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  id v9;

  v3 = v2;
  if (a1)
  {
    v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v5.super.isa = 0;
  }
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  }
  v9 = objc_msgSend(objc_allocWithZone(v3), sel_initWithInputItems_contextUUID_, v5.super.isa, isa);

  return v9;
}

void FlowExtensionContext.init(inputItems:contextUUID:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id FlowExtensionContext.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlowExtensionContext();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t *NoopSiriKitEventSender.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1)
    swift_once();
  return &static NoopSiriKitEventSender.instance;
}

uint64_t static NoopSiriKitEventSender.instance.getter()
{
  return swift_initStaticObject();
}

uint64_t NoopSiriKitEventSender.init()()
{
  uint64_t v0;

  return v0;
}

void NoopSiriKitEventSender.send(_:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for executor != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "Dropping SiriKitEvent since we're running in an external process. rdar://83367714 (Support event bus from flows running in external processes)", v2, 2u);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

}

uint64_t NoopSiriKitEventSender.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t NoopSiriKitEventSender.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for SiriKitEventSending.send(_:) in conformance NoopSiriKitEventSender()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  if (one-time initialization token for executor != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B4BE6000, oslog, v1, "Dropping SiriKitEvent since we're running in an external process. rdar://83367714 (Support event bus from flows running in external processes)", v2, 2u);
    MEMORY[0x1B5E44758](v2, -1, -1);
  }

}

uint64_t protocol witness for SiriKitEventSending.sendAsync(_:) in conformance NoopSiriKitEventSender()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return SiriKitEventSending.sendAsync(_:)();
}

void specialized FlowExtensionContext.init(inputItems:listenerEndpoint:contextUUID:overrideFlowExtension:overrideSiriKitRuntime:overrideExtensionId:overrideIntentTopics:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  char *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  _BOOL4 v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  unint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSArray v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  Class isa;
  _BYTE *v53;
  objc_class *v54;
  id v55;
  _BYTE v56[4];
  int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  objc_super v78;

  v10 = v9;
  v72 = a7;
  v73 = a8;
  v70 = a4;
  v71 = a6;
  v69 = a5;
  v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v13 = MEMORY[0x1E0C80A78](v63);
  v74 = &v56[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = MEMORY[0x1E0C80A78](v13);
  v62 = &v56[-v16];
  MEMORY[0x1E0C80A78](v15);
  v75 = &v56[-v17];
  v18 = &v9[OBJC_IVAR___SKRFlowExtensionContext_overrideFlowExtension];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v66 = OBJC_IVAR___SKRFlowExtensionContext_overrideSiriKitRuntime;
  *(_QWORD *)&v9[OBJC_IVAR___SKRFlowExtensionContext_overrideSiriKitRuntime] = 0;
  v19 = &v9[OBJC_IVAR___SKRFlowExtensionContext_overrideExtensionId];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v67 = OBJC_IVAR___SKRFlowExtensionContext_overrideIntentTopics;
  *(_QWORD *)&v9[OBJC_IVAR___SKRFlowExtensionContext_overrideIntentTopics] = 0;
  *(_QWORD *)&v9[OBJC_IVAR___SKRFlowExtensionContext____lazy_storage___remoteConversationService] = 0;
  v20 = one-time initialization token for executor;
  v21 = v9;
  if (v20 != -1)
    swift_once();
  v65 = a9;
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
  outlined init with copy of UUID?(a3, (uint64_t)v75);
  v23 = a2;
  swift_bridgeObjectRetain_n();
  v24 = v23;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.debug.getter();
  v27 = v26;
  v64 = v25;
  v28 = os_log_type_enabled(v25, v26);
  v68 = v24;
  if (v28)
  {
    v29 = v24;
    v30 = swift_slowAlloc();
    v59 = swift_slowAlloc();
    v77 = v59;
    *(_DWORD *)v30 = 136315650;
    v60 = v21;
    v31 = swift_bridgeObjectRetain();
    v58 = MEMORY[0x1E0DEE9B8] + 8;
    v32 = MEMORY[0x1B5E434D4](v31);
    v61 = a3;
    v33 = v32;
    v57 = v27;
    v34 = (uint64_t)a2;
    v36 = v35;
    swift_bridgeObjectRelease();
    v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v36, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    v76 = v34;
    v37 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSXPCListenerEndpoint?);
    v38 = String.init<A>(describing:)();
    v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v21 = v60;
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2080;
    v40 = v75;
    outlined init with copy of UUID?((uint64_t)v75, (uint64_t)v62);
    v41 = String.init<A>(describing:)();
    v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a3 = v61;
    swift_bridgeObjectRelease();
    outlined destroy of UUID?((uint64_t)v40);
    v43 = v64;
    _os_log_impl(&dword_1B4BE6000, v64, (os_log_type_t)v57, "FlowExtensionContext inputItems: %s, listenerEndpoint: %s, contextUUID: %s", (uint8_t *)v30, 0x20u);
    v44 = v59;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v44, -1, -1);
    MEMORY[0x1B5E44758](v30, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    outlined destroy of UUID?((uint64_t)v75);

  }
  v45 = v69;
  *(_QWORD *)v18 = v70;
  *((_QWORD *)v18 + 1) = v45;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)&v10[v66] = v71;
  swift_retain();
  swift_release();
  v46 = v73;
  *(_QWORD *)v19 = v72;
  *((_QWORD *)v19 + 1) = v46;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v10[v67] = v65;

  swift_bridgeObjectRelease();
  v47.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v48 = v74;
  outlined init with copy of UUID?(a3, (uint64_t)v74);
  v49 = type metadata accessor for UUID();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49);
  isa = 0;
  if (v51 != 1)
  {
    v53 = v74;
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v50 + 8))(v53, v49);
  }
  v54 = (objc_class *)type metadata accessor for FlowExtensionContext();
  v78.receiver = v21;
  v78.super_class = v54;
  v55 = objc_msgSendSuper2(&v78, sel_initWithInputItems_listenerEndpoint_contextUUID_, v47.super.isa, v68, isa);

  if (v55)
    outlined destroy of UUID?(a3);
  else
    __break(1u);
}

uint64_t sub_1B4DE42EC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RemoteConversationService.warmup(refId:reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.warmup(refId:reply:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1B4DE43BC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t partial apply for closure #1 in RemoteConversationService.cancel(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.cancel(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in RemoteConversationService.reset(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.reset(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in RemoteConversationService.ensureReady(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.ensureReady(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B4DE4634()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in RemoteConversationService.paraphrase(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.paraphrase(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in RemoteConversationService.isEmpty(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.isEmpty(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in RemoteConversationService.isCorrectable(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.isCorrectable(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in RemoteConversationService.drainAsyncWork(reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.drainAsyncWork(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t type metadata accessor for FlowExtensionContext()
{
  return objc_opt_self();
}

uint64_t sub_1B4DE49CC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xE0))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4DE4A0C(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xE8);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t method lookup function for FlowExtensionContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FlowExtensionContext.__allocating_init(inputItems:listenerEndpoint:contextUUID:overrideFlowExtension:overrideSiriKitRuntime:overrideExtensionId:overrideIntentTopics:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of FlowExtensionContext.remoteConversationService.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of FlowExtensionContext.remoteConversationService.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of FlowExtensionContext.remoteConversationService.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of FlowExtensionContext.warmup(refId:reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of FlowExtensionContext.canHandle(inputData:rcId:reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of FlowExtensionContext.cancel(reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of FlowExtensionContext.reset(reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of FlowExtensionContext.ensureReady(reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of FlowExtensionContext.startTurn(turnData:bridge:reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of FlowExtensionContext.startTurnFromCache(executionRequestId:bridge:reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of FlowExtensionContext.acceptInitialInput(inputIdentifier:speechData:reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of FlowExtensionContext.accept(inputData:speechData:reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of FlowExtensionContext.paraphrase(reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of FlowExtensionContext.prepare(bridge:reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of FlowExtensionContext.commit(bridge:reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of FlowExtensionContext.isEmpty(reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of FlowExtensionContext.isCorrectable(reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of FlowExtensionContext.flexibleExecutionSupportOptions(reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of FlowExtensionContext.drainAsyncWork(reply:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t type metadata accessor for NoopSiriKitEventSender()
{
  return objc_opt_self();
}

uint64_t method lookup function for NoopSiriKitEventSender()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NoopSiriKitEventSender.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t sub_1B4DE4CB0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ()()
{
  uint64_t v0;

  return thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ()(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ConversationFlexibleExecutionSupportXPC) -> ()(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned FlowExtensionUserInputResultXPC) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool) -> ()(char a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool) -> ()(a1, *(_QWORD *)(v1 + 16));
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSError?) -> ()(uint64_t a1)
{
  uint64_t v1;

  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSError?) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ConversationCanHandleResult) -> ()(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ConversationCanHandleResult) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in RemoteConversationService.commit(bridge:reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.commit(bridge:reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in RemoteConversationService.prepare(bridge:reply:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in RemoteConversationService.prepare(bridge:reply:)(a1, v4, v5, v6, v7, v8);
}

id FlowExtensionContextHost.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id FlowExtensionContextHost.init()()
{
  void *v0;
  Class isa;
  id v2;

  isa = Array._bridgeToObjectiveC()().super.isa;
  v2 = objc_msgSend(v0, sel_initWithInputItems_listenerEndpoint_contextUUID_, isa, 0, 0);

  return v2;
}

id FlowExtensionContextHost.__allocating_init(inputItems:)()
{
  objc_class *v0;
  id v1;
  Class isa;
  id v3;

  v1 = objc_allocWithZone(v0);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithInputItems_, isa);

  return v3;
}

id FlowExtensionContextHost.init(inputItems:)()
{
  void *v0;
  Class isa;
  id v2;

  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithInputItems_listenerEndpoint_contextUUID_, isa, 0, 0);

  return v2;
}

id FlowExtensionContextHost.__allocating_init(inputItems:listenerEndpoint:contextUUID:)(uint64_t a1, void *a2, uint64_t a3)
{
  objc_class *v3;
  objc_class *v4;
  NSArray v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  id v11;

  v4 = v3;
  v7.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a3, 1, v8) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a3, v8);
  }
  v11 = objc_msgSend(objc_allocWithZone(v4), sel_initWithInputItems_listenerEndpoint_contextUUID_, v7.super.isa, a2, isa);

  return v11;
}

uint64_t FlowExtensionContextHost.init(inputItems:listenerEndpoint:contextUUID:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  specialized FlowExtensionContextHost.init(inputItems:listenerEndpoint:contextUUID:)(a1, (uint64_t)a2, a3);
  v5 = v4;

  return v5;
}

id static FlowExtensionContextHost._extensionAuxiliaryVendorProtocol()()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for remoteConversationXPCInterface, (id *)&static RemoteConversationXPCHelper.remoteConversationXPCInterface);
}

id static FlowExtensionContextHost._extensionAuxiliaryHostProtocol()()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for remoteConversationHostXPCInterface, (id *)&static RemoteConversationXPCHelper.remoteConversationHostXPCInterface);
}

id FlowExtensionContextHost.__allocating_init(inputItems:contextUUID:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  NSArray v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  id v9;

  v3 = v2;
  if (a1)
  {
    v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v5.super.isa = 0;
  }
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  }
  v9 = objc_msgSend(objc_allocWithZone(v3), sel_initWithInputItems_contextUUID_, v5.super.isa, isa);

  return v9;
}

void FlowExtensionContextHost.init(inputItems:contextUUID:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id FlowExtensionContextHost.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlowExtensionContextHost();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void specialized FlowExtensionContextHost.init(inputItems:listenerEndpoint:contextUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSArray v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  objc_class *v14;
  id v15;
  objc_super v16;

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  outlined init with copy of UUID?(a3, (uint64_t)v9);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
  }
  v14 = (objc_class *)type metadata accessor for FlowExtensionContextHost();
  v16.receiver = v4;
  v16.super_class = v14;
  v15 = objc_msgSendSuper2(&v16, sel_initWithInputItems_listenerEndpoint_contextUUID_, v10.super.isa, a2, isa);

  if (v15)
    outlined destroy of UUID?(a3);
  else
    __break(1u);
}

uint64_t type metadata accessor for FlowExtensionContextHost()
{
  return objc_opt_self();
}

uint64_t FlowExtensionConversationHandler.id.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t FlowExtensionConversationHandler.init(remoteConversationClient:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t FlowExtensionConversationHandler.warmup(refId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized FlowExtensionConversationHandler.warmup(refId:)
                                                         + async function pointer to specialized FlowExtensionConversationHandler.warmup(refId:));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v9(a1, a2, a3);
}

uint64_t FlowExtensionConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v10;
  *v10 = v6;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return RemoteConversationClient.startTurn(turnData:bridge:)(a1, a5, a6);
}

uint64_t FlowExtensionConversationHandler.findConversation(for:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v9;

  v5[2] = a1;
  v5[3] = a5;
  v9 = (_QWORD *)swift_task_alloc();
  v5[4] = v9;
  *v9 = v5;
  v9[1] = FlowExtensionConversationHandler.findConversation(for:rcId:);
  return RemoteConversationClient.canHandle(input:rcId:)(a2, a3, a4);
}

uint64_t FlowExtensionConversationHandler.findConversation(for:rcId:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 40) = a1;
  return swift_task_switch();
}

uint64_t FlowExtensionConversationHandler.findConversation(for:rcId:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 40);
  (*(void (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x78))(*(_QWORD *)(v0 + 24));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t FlowExtensionConversationHandler.affinityScore(for:)()
{
  return 2;
}

uint64_t protocol witness for ConversationHandler.id.getter in conformance FlowExtensionConversationHandler()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for ConversationHandler.warmup(refId:) in conformance FlowExtensionConversationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v6 = *v2;
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized FlowExtensionConversationHandler.warmup(refId:)
                                                         + async function pointer to specialized FlowExtensionConversationHandler.warmup(refId:));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v9(a1, a2, v6);
}

uint64_t protocol witness for ConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:) in conformance FlowExtensionConversationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v10;
  *v10 = v6;
  v10[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return RemoteConversationClient.startTurn(turnData:bridge:)(a1, a5, a6);
}

uint64_t protocol witness for ConversationHandler.findConversation(for:rcId:) in conformance FlowExtensionConversationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v9;
  _QWORD *v10;

  v9 = *v4;
  v5[2] = a1;
  v5[3] = v9;
  v10 = (_QWORD *)swift_task_alloc();
  v5[4] = v10;
  *v10 = v5;
  v10[1] = FlowExtensionConversationHandler.findConversation(for:rcId:);
  return RemoteConversationClient.canHandle(input:rcId:)(a2, a3, a4);
}

uint64_t protocol witness for ConversationHandler.affinityScore(for:) in conformance FlowExtensionConversationHandler()
{
  return 2;
}

uint64_t protocol witness for Identifiable.id.getter in conformance FlowExtensionConversationHandler@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t specialized FlowExtensionConversationHandler.warmup(refId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

unint64_t instantiation function for generic protocol witness table for FlowExtensionConversationHandler(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in FlowExtensionConversationHandler()
{
  return MEMORY[0x1E0DEA978];
}

uint64_t destroy for FlowExtensionConversationHandler()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for FlowExtensionConversationHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FlowExtensionConversationHandler(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for FlowExtensionConversationHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FlowExtensionConversationHandler()
{
  return &type metadata for FlowExtensionConversationHandler;
}

uint64_t sub_1B4DE5D60()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t FlowExtensionDiscoverer.findConversationHandler(bundleId:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v11;

  *(_QWORD *)(v6 + 16) = a1;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 24) = v11;
  *v11 = v6;
  v11[1] = FlowExtensionDiscoverer.findConversationHandler(bundleId:onConnectionInterrupted:);
  v11[25] = a5;
  v11[26] = v5;
  v11[23] = a3;
  v11[24] = a4;
  v11[22] = a2;
  return swift_task_switch();
}

uint64_t FlowExtensionDiscoverer.findConversationHandler(bundleId:onConnectionInterrupted:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t FlowExtensionDiscoverer.findConversationHandler(bundleId:onConnectionInterrupted:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD **)(v0 + 16);
  if (v1)
  {
    v4 = *(_QWORD *)(v1 + 112);
    v3 = *(_QWORD *)(v1 + 120);
    v2[3] = &type metadata for FlowExtensionConversationHandler;
    v2[4] = lazy protocol witness table accessor for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler();
    *v2 = v1;
    v2[1] = v4;
    v2[2] = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    v2[4] = 0;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t FlowExtensionDiscoverer.observer.getter()
{
  return swift_retain();
}

uint64_t FlowExtensionDiscoverer.__allocating_init(observer:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t FlowExtensionDiscoverer.init(observer:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t static FlowExtensionDiscoverer.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[47] = a3;
  v4[48] = v3;
  v4[45] = a1;
  v4[46] = a2;
  v5 = type metadata accessor for Logger();
  v4[49] = v5;
  v4[50] = *(_QWORD *)(v5 - 8);
  v4[51] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;

  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 48) = 0;
  v1 = (_QWORD *)IntentTopic.makeCacheKeyAndWildcardFallbacks()();
  *(_QWORD *)(v0 + 416) = v1;
  v2 = v1[2];
  *(_QWORD *)(v0 + 424) = v2;
  if (v2)
  {
    *(_QWORD *)(v0 + 432) = *(_QWORD *)(*(_QWORD *)(v0 + 384) + 16);
    *(_QWORD *)(v0 + 440) = 0;
    *(_QWORD *)(v0 + 448) = v1[4];
    *(_QWORD *)(v0 + 456) = v1[5];
    v3 = one-time initialization token for shared;
    swift_bridgeObjectRetain();
    if (v3 != -1)
      swift_once();
    *(_QWORD *)(v0 + 464) = static ConversationActor.shared;
    return swift_task_switch();
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
    if (*(_QWORD *)(v0 + 240))
    {
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 216), v0 + 176);
      if (one-time initialization token for executor != -1)
        swift_once();
      v6 = *(_QWORD *)(v0 + 400);
      v5 = *(_QWORD *)(v0 + 408);
      v7 = *(_QWORD *)(v0 + 392);
      v8 = *(_QWORD *)(v0 + 376);
      v22 = *(_QWORD *)(v0 + 368);
      v9 = __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v9, v7);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, v0 + 256);
      v10 = swift_allocObject();
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 256), v10 + 16);
      specialized Logger.debugF(_:_:_:_:)((uint64_t (*)(uint64_t))partial apply for implicit closure #1 in FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:));
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, v0 + 296);
      v11 = type metadata accessor for FlowExtensionConnection();
      swift_allocObject();
      swift_retain();
      v12 = FlowExtensionConnection.init(nsExtension:onConnectionInterrupted:)((_QWORD *)(v0 + 296), v22, v8);
      v13 = *(_QWORD *)(v0 + 200);
      v14 = *(_QWORD *)(v0 + 208);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v13);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
      v17 = v16;
      *(_QWORD *)(v0 + 160) = v11;
      *(_QWORD *)(v0 + 168) = &protocol witness table for FlowExtensionConnection;
      *(_QWORD *)(v0 + 136) = v12;
      type metadata accessor for RemoteConversationClient();
      v18 = (_QWORD *)swift_allocObject();
      swift_retain();
      swift_defaultActor_initialize();
      v18[21] = 0;
      v18[22] = 0;
      v18[14] = v15;
      v18[15] = v17;
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 136), (uint64_t)(v18 + 16));
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      __swift_destroy_boxed_opaque_existential_1(v0 + 176);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
      if (one-time initialization token for executor != -1)
        swift_once();
      __swift_project_value_buffer(*(_QWORD *)(v0 + 392), (uint64_t)static Logger.executor);
      v19 = Logger.logObject.getter();
      v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v21 = 0;
        _os_log_impl(&dword_1B4BE6000, v19, v20, "No extensions support input", v21, 2u);
        MEMORY[0x1B5E44758](v21, -1, -1);
      }

      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      v18 = 0;
    }
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v18);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;

  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v0 + 472) = v2;
  if (v2)
  {
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 480) = v3;
    *v3 = v0;
    v3[1] = FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:);
    return Task<>.value.getter();
  }
  else
  {
    v5 = (_OWORD *)(v0 + 96);
    swift_beginAccess();
    v6 = *(_QWORD *)(v1 + 64);
    if (v6)
    {
      if (*(_QWORD *)(v6 + 16))
      {
        v8 = *(_QWORD *)(v0 + 448);
        v7 = *(_QWORD *)(v0 + 456);
        swift_bridgeObjectRetain();
        v9 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
        if ((v10 & 1) != 0)
        {
          outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v6 + 56) + 40 * v9, v0 + 96);
        }
        else
        {
          *(_QWORD *)(v0 + 128) = 0;
          *v5 = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        *(_QWORD *)(v0 + 128) = 0;
        *v5 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      *(_QWORD *)(v0 + 128) = 0;
      *v5 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v1 = (_OWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 432);
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 64);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 16))
    {
      v5 = *(_QWORD *)(v0 + 448);
      v4 = *(_QWORD *)(v0 + 456);
      swift_bridgeObjectRetain();
      v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
      if ((v7 & 1) != 0)
      {
        outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v3 + 56) + 40 * v6, v0 + 96);
      }
      else
      {
        *(_QWORD *)(v0 + 128) = 0;
        *v1 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      *(_QWORD *)(v0 + 128) = 0;
      *v1 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    *(_QWORD *)(v0 + 128) = 0;
    *v1 = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
  }
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (*(_QWORD *)(v0 + 120))
  {
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 96), v0 + 56);
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 56), v0 + 16);
LABEL_5:
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
    if (*(_QWORD *)(v0 + 240))
    {
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 216), v0 + 176);
      if (one-time initialization token for executor != -1)
        swift_once();
      v4 = *(_QWORD *)(v0 + 400);
      v3 = *(_QWORD *)(v0 + 408);
      v5 = *(_QWORD *)(v0 + 392);
      v6 = *(_QWORD *)(v0 + 376);
      v24 = *(_QWORD *)(v0 + 368);
      v7 = __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v5);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, v0 + 256);
      v8 = swift_allocObject();
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 256), v8 + 16);
      specialized Logger.debugF(_:_:_:_:)((uint64_t (*)(uint64_t))partial apply for implicit closure #1 in FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:));
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, v0 + 296);
      v9 = type metadata accessor for FlowExtensionConnection();
      swift_allocObject();
      swift_retain();
      v10 = FlowExtensionConnection.init(nsExtension:onConnectionInterrupted:)((_QWORD *)(v0 + 296), v24, v6);
      v11 = *(_QWORD *)(v0 + 200);
      v12 = *(_QWORD *)(v0 + 208);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 176), v11);
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
      v15 = v14;
      *(_QWORD *)(v0 + 160) = v9;
      *(_QWORD *)(v0 + 168) = &protocol witness table for FlowExtensionConnection;
      *(_QWORD *)(v0 + 136) = v10;
      type metadata accessor for RemoteConversationClient();
      v16 = (_QWORD *)swift_allocObject();
      swift_retain();
      swift_defaultActor_initialize();
      v16[21] = 0;
      v16[22] = 0;
      v16[14] = v13;
      v16[15] = v15;
      outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 136), (uint64_t)(v16 + 16));
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      __swift_destroy_boxed_opaque_existential_1(v0 + 176);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
      if (one-time initialization token for executor != -1)
        swift_once();
      __swift_project_value_buffer(*(_QWORD *)(v0 + 392), (uint64_t)static Logger.executor);
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_1B4BE6000, v17, v18, "No extensions support input", v19, 2u);
        MEMORY[0x1B5E44758](v19, -1, -1);
      }

      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      v16 = 0;
    }
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v16);
  }
  v1 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 440) + 1;
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for NSExtensionProtocol?);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v21 = *(_QWORD *)(v0 + 440) + 1;
  *(_QWORD *)(v0 + 440) = v21;
  v22 = *(_QWORD *)(v0 + 416) + 16 * v21;
  *(_QWORD *)(v0 + 448) = *(_QWORD *)(v22 + 32);
  *(_QWORD *)(v0 + 456) = *(_QWORD *)(v22 + 40);
  v23 = one-time initialization token for shared;
  swift_bridgeObjectRetain();
  if (v23 != -1)
    swift_once();
  *(_QWORD *)(v0 + 464) = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t FlowExtensionObserver.findExtension(matchingTopicKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  if (one-time initialization token for shared != -1)
    swift_once();
  v4[9] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t FlowExtensionObserver.findExtension(matchingTopicKey:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v0 + 80) = v2;
  if (v2)
  {
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v3;
    *v3 = v0;
    v3[1] = FlowExtensionObserver.findExtension(matchingTopicKey:);
    return Task<>.value.getter();
  }
  else
  {
    swift_beginAccess();
    v5 = *(_QWORD *)(v1 + 64);
    if (v5)
    {
      if (*(_QWORD *)(v5 + 16))
      {
        v7 = *(_QWORD *)(v0 + 48);
        v6 = *(_QWORD *)(v0 + 56);
        swift_bridgeObjectRetain();
        v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
        v10 = v9;
        v11 = *(_QWORD *)(v0 + 40);
        if ((v10 & 1) != 0)
        {
          outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v5 + 56) + 40 * v8, v11);
        }
        else
        {
          *(_QWORD *)(v11 + 32) = 0;
          *(_OWORD *)v11 = 0u;
          *(_OWORD *)(v11 + 16) = 0u;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v13 = *(_QWORD *)(v0 + 40);
        *(_QWORD *)(v13 + 32) = 0;
        *(_OWORD *)v13 = 0u;
        *(_OWORD *)(v13 + 16) = 0u;
      }
      swift_endAccess();
    }
    else
    {
      v12 = *(_QWORD *)(v0 + 40);
      swift_endAccess();
      *(_QWORD *)(v12 + 32) = 0;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 64);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 64);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 16))
    {
      v4 = *(_QWORD *)(v0 + 48);
      v3 = *(_QWORD *)(v0 + 56);
      swift_bridgeObjectRetain();
      v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
      v7 = v6;
      v8 = *(_QWORD *)(v0 + 40);
      if ((v7 & 1) != 0)
      {
        outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v2 + 56) + 40 * v5, v8);
      }
      else
      {
        *(_QWORD *)(v8 + 32) = 0;
        *(_OWORD *)v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = *(_QWORD *)(v0 + 40);
      *(_QWORD *)(v10 + 32) = 0;
      *(_OWORD *)v10 = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
    }
    swift_endAccess();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 40);
    swift_endAccess();
    *(_QWORD *)(v9 + 32) = 0;
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t FlowExtensionDiscoverer.findFlowExtension(bundleId:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[25] = a4;
  v5[26] = v4;
  v5[23] = a2;
  v5[24] = a3;
  v5[22] = a1;
  return swift_task_switch();
}

uint64_t FlowExtensionDiscoverer.findFlowExtension(bundleId:onConnectionInterrupted:)()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  v0[27] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = FlowExtensionDiscoverer.findFlowExtension(bundleId:onConnectionInterrupted:);
  return FlowExtensionObserver.findExtension(withIdentifier:)((uint64_t)(v0 + 7), v0[22], v0[23]);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = (__int128 *)(v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    v3 = *(_QWORD *)(v0 + 192);
    v2 = *(_QWORD *)(v0 + 200);
    outlined init with take of ReferenceResolutionClientProtocol(v1, v0 + 16);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 16, v0 + 96);
    v4 = type metadata accessor for FlowExtensionConnection();
    swift_allocObject();
    swift_retain();
    v5 = FlowExtensionConnection.init(nsExtension:onConnectionInterrupted:)((_QWORD *)(v0 + 96), v3, v2);
    v6 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v6);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    v10 = v9;
    *(_QWORD *)(v0 + 136) = v5;
    *(_QWORD *)(v0 + 160) = v4;
    *(_QWORD *)(v0 + 168) = &protocol witness table for FlowExtensionConnection;
    type metadata accessor for RemoteConversationClient();
    v11 = (_QWORD *)swift_allocObject();
    swift_retain();
    swift_defaultActor_initialize();
    v11[21] = 0;
    v11[22] = 0;
    v11[14] = v8;
    v11[15] = v10;
    outlined init with take of ReferenceResolutionClientProtocol((__int128 *)(v0 + 136), (uint64_t)(v11 + 16));
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v1, &demangling cache variable for type metadata for NSExtensionProtocol?);
    v11 = 0;
  }
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v11);
}

uint64_t FlowExtensionObserver.findExtension(withIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  if (one-time initialization token for shared != -1)
    swift_once();
  v4[9] = static ConversationActor.shared;
  return swift_task_switch();
}

uint64_t FlowExtensionObserver.findExtension(withIdentifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v0 + 80) = v2;
  if (v2)
  {
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 88) = v3;
    *v3 = v0;
    v3[1] = FlowExtensionObserver.findExtension(withIdentifier:);
    return Task<>.value.getter();
  }
  else
  {
    swift_beginAccess();
    v5 = *(_QWORD *)(v1 + 56);
    if (v5)
    {
      if (*(_QWORD *)(v5 + 16))
      {
        v7 = *(_QWORD *)(v0 + 48);
        v6 = *(_QWORD *)(v0 + 56);
        swift_bridgeObjectRetain();
        v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
        v10 = v9;
        v11 = *(_QWORD *)(v0 + 40);
        if ((v10 & 1) != 0)
        {
          outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v5 + 56) + 40 * v8, v11);
        }
        else
        {
          *(_QWORD *)(v11 + 32) = 0;
          *(_OWORD *)v11 = 0u;
          *(_OWORD *)(v11 + 16) = 0u;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v13 = *(_QWORD *)(v0 + 40);
        *(_QWORD *)(v13 + 32) = 0;
        *(_OWORD *)v13 = 0u;
        *(_OWORD *)(v13 + 16) = 0u;
      }
      swift_endAccess();
    }
    else
    {
      v12 = *(_QWORD *)(v0 + 40);
      swift_endAccess();
      *(_QWORD *)(v12 + 32) = 0;
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 64);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 56);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 16))
    {
      v4 = *(_QWORD *)(v0 + 48);
      v3 = *(_QWORD *)(v0 + 56);
      swift_bridgeObjectRetain();
      v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
      v7 = v6;
      v8 = *(_QWORD *)(v0 + 40);
      if ((v7 & 1) != 0)
      {
        outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v2 + 56) + 40 * v5, v8);
      }
      else
      {
        *(_QWORD *)(v8 + 32) = 0;
        *(_OWORD *)v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v10 = *(_QWORD *)(v0 + 40);
      *(_QWORD *)(v10 + 32) = 0;
      *(_OWORD *)v10 = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
    }
    swift_endAccess();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 40);
    swift_endAccess();
    *(_QWORD *)(v9 + 32) = 0;
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t implicit closure #1 in FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:)(_QWORD *a1)
{
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(39);
  v2._object = (void *)0x80000001B4EFD4E0;
  v2._countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v2);
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t FlowExtensionDiscoverer.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t FlowExtensionDiscoverer.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t one-time initialization function for kSharedFlowExtensionObserver()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FlowExtensionObserver();
  v3 = swift_allocObject();
  v4 = type metadata accessor for TaskPriority();
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_QWORD *)(v3 + 64) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v2, 1, 1, v4);
  v5 = one-time initialization token for shared;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v6 = static ConversationActor.shared;
  v7 = lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v6;
  v8[3] = v7;
  v8[4] = v3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v2, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in variable initialization expression of kSharedFlowExtensionObserver, (uint64_t)v8);
  result = swift_release();
  kSharedFlowExtensionObserver = v3;
  return result;
}

uint64_t closure #1 in closure #1 in variable initialization expression of kSharedFlowExtensionObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in variable initialization expression of kSharedFlowExtensionObserver()
{
  uint64_t v0;

  FlowExtensionObserver.begin()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void FlowExtensionObserver.begin()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  NSObject *v17;
  os_signpost_type_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint8_t *v20;
  uint8_t *v21;
  os_signpost_id_t v22;
  uint8_t *v23;
  uint64_t v24;
  void *v25;
  Class isa;
  void *v27;
  id v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  __int128 v43;
  uint64_t v44;
  _OWORD v45[2];
  _QWORD aBlock[7];

  v1 = v0;
  v2 = *v0;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3);
  v5 = ((char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for OSSignpostID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v40 - v11;
  if (v1[6])
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    v42 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1B4BE6000, v42, v14, "FlowExtensionObserver.begin() called multiple times while still gathering initial extensions. Ignoring.", v15, 2u);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }

  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v42 = v5;
    v16 = type metadata accessor for OSSignposter();
    __swift_project_value_buffer(v16, (uint64_t)static Signposter.executor);
    static OSSignpostID.exclusive.getter();
    v17 = OSSignposter.logHandle.getter();
    v18 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v19 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      v19(v10, v12, v6);
      v20 = (uint8_t *)swift_slowAlloc();
      v41 = v2;
      v21 = v20;
      *(_WORD *)v20 = 0;
      v22 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v17, v18, v22, "LoadAllFlowExtensions", "", v21, 2u);
      v23 = v21;
      v2 = v41;
      MEMORY[0x1B5E44758](v23, -1, -1);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    else
    {

      v19 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    }
    v19(v10, v12, v6);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    v24 = OSSignpostIntervalState.init(id:isOpen:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    v25 = (void *)objc_opt_self();
    if (one-time initialization token for extensionPointAttributes != -1)
      swift_once();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    aBlock[4] = partial apply for closure #1 in FlowExtensionObserver.begin();
    aBlock[5] = v1;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [Any]?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_12;
    v27 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    v28 = objc_msgSend(v25, sel_beginMatchingExtensionsWithAttributes_completion_, isa, v27);
    _Block_release(v27);

    v29 = v42;
    if (v28)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v45, 0, sizeof(v45));
    }
    outlined init with take of Any?((uint64_t)v45, (uint64_t)aBlock);
    v30 = type metadata accessor for TaskPriority();
    (*(void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
    v31 = one-time initialization token for shared;
    swift_retain();
    swift_retain();
    if (v31 != -1)
      swift_once();
    v32 = static ConversationActor.shared;
    v33 = lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor();
    v34 = (_QWORD *)swift_allocObject();
    v34[2] = v32;
    v34[3] = v33;
    v34[4] = v24;
    v34[5] = v1;
    v34[6] = v2;
    swift_retain();
    v35 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v29, (uint64_t)&async function pointer to partial apply for closure #2 in FlowExtensionObserver.begin(), (uint64_t)v34);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)aBlock, (uint64_t)&v43, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v44)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)aBlock, (uint64_t *)&demangling cache variable for type metadata for Any?);
      swift_release();
      outlined init with take of Any(&v43, v45);
      outlined init with take of Any(v45, &v43);
      swift_beginAccess();
      outlined assign with take of Any?((uint64_t)&v43, (uint64_t)(v1 + 2));
      swift_endAccess();
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v43, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (one-time initialization token for executor != -1)
        swift_once();
      v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
      v37 = Logger.logObject.getter();
      v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v39 = 0;
        _os_log_impl(&dword_1B4BE6000, v37, v38, "Could not set up NSExtension observer, new extensions will not be discovered until assistantd is killed", v39, 2u);
        MEMORY[0x1B5E44758](v39, -1, -1);
      }
      swift_release();

      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)aBlock, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    v1[6] = v35;
    swift_release();
  }
}

unint64_t one-time initialization function for extensionPointAttributes()
{
  uint64_t inited;
  uint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3BA0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  v1 = MEMORY[0x1E0DEA968];
  AnyHashable.init<A>(_:)();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 96) = v1;
  *(_QWORD *)(inited + 72) = 0xD00000000000001DLL;
  *(_QWORD *)(inited + 80) = 0x80000001B4EF9500;
  AnyHashable.init<A>(_:)();
  *(_QWORD *)(inited + 168) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 144) = 1;
  result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static FlowExtensionObserver.extensionPointAttributes = result;
  return result;
}

uint64_t FlowExtensionObserver.__allocating_init(forceKnownExtensions:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = specialized static FlowExtensionObserver.reduceSeenExtensions(_:)(a1);
  swift_beginAccess();
  *(_QWORD *)(v2 + 56) = v3;
  swift_bridgeObjectRelease();
  v4 = specialized static FlowExtensionObserver.reduceSeenTopics(_:)(a1);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v2 + 64) = v4;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t FlowExtensionObserver.init(forceKnownExtensions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_QWORD *)(v1 + 64) = 0;
  v3 = specialized static FlowExtensionObserver.reduceSeenExtensions(_:)(a1);
  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = v3;
  swift_bridgeObjectRelease();
  v4 = specialized static FlowExtensionObserver.reduceSeenTopics(_:)(a1);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(_QWORD *)(v1 + 64) = v4;
  swift_bridgeObjectRelease();
  return v1;
}

void closure #1 in FlowExtensionObserver.begin()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && (v9 = specialized _arrayConditionalCast<A, B>(_:)(a1)) != 0)
  {
    v10 = v9;
    v11 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
    swift_retain();
    v12 = a2;
    if (one-time initialization token for shared != -1)
      swift_once();
    v13 = static ConversationActor.shared;
    v14 = lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor();
    v15 = (_QWORD *)swift_allocObject();
    v15[2] = v13;
    v15[3] = v14;
    v15[4] = a3;
    v15[5] = v10;
    v15[6] = a2;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in FlowExtensionObserver.begin(), (uint64_t)v15);
    swift_release();
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    v20 = Logger.logObject.getter();
    v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B4BE6000, v20, v17, "Error when matching new NSExtensions: Could not cast as [NSExtensionProtocol]? Assuming no results.", v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);
    }

  }
}

uint64_t closure #1 in closure #1 in FlowExtensionObserver.begin()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in FlowExtensionObserver.begin()()
{
  uint64_t v0;

  FlowExtensionObserver.foundExtensions(_:error:)(*(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void FlowExtensionObserver.foundExtensions(_:error:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[3];

  if (one-time initialization token for executor != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v8 = 134217984;
    v21[0] = *(_QWORD *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v6, v7, "FlowExtensionObserver: %ld extensions found", v8, 0xCu);
    MEMORY[0x1B5E44758](v8, -1, -1);

    if (a2)
      goto LABEL_5;
LABEL_8:
    v19 = specialized static FlowExtensionObserver.reduceSeenExtensions(_:)(a1);
    swift_beginAccess();
    *(_QWORD *)(v2 + 56) = v19;
    swift_bridgeObjectRelease();
    v20 = specialized static FlowExtensionObserver.reduceSeenTopics(_:)(a1);
    swift_beginAccess();
    *(_QWORD *)(v2 + 64) = v20;
    swift_bridgeObjectRelease();
    return;
  }

  swift_bridgeObjectRelease();
  if (!a2)
    goto LABEL_8;
LABEL_5:
  v9 = a2;
  v10 = a2;
  v11 = a2;
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v21[0] = v15;
    *(_DWORD *)v14 = 136315138;
    v16 = a2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v17 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v12, v13, "Error finding Flow Extensions: %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v15, -1, -1);
    MEMORY[0x1B5E44758](v14, -1, -1);

  }
  else
  {

  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [Any]?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v4)(uint64_t, void *);
  uint64_t v5;
  id v6;

  v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  else
    v5 = 0;
  swift_retain();
  v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in FlowExtensionObserver.begin()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 56) = a4;
  *(_QWORD *)(v5 + 64) = a5;
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_task_switch();
}

uint64_t closure #2 in FlowExtensionObserver.begin()()
{
  uint64_t v0;
  void **v1;
  void *v2;
  Class isa;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v1 = (void **)(v0 + 40);
  v2 = (void *)objc_opt_self();
  if (one-time initialization token for extensionPointAttributes != -1)
    swift_once();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *v1 = 0;
  v4 = objc_msgSend(v2, sel_extensionsWithMatchingAttributes_error_, isa, v0 + 40);

  v5 = *v1;
  if (v4)
  {
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v5;

    v8 = specialized _arrayConditionalCast<A, B>(_:)(v6);
    swift_bridgeObjectRelease();
    if (v8)
    {
      FlowExtensionObserver.foundExtensions(_:error:)(v8, 0);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_1B4BE6000, v21, v22, "Error initially finding NSExtensions: Could not cast as [NSExtensionProtocol]? Assuming no results.", v23, 2u);
        MEMORY[0x1B5E44758](v23, -1, -1);
      }

    }
  }
  else
  {
    v9 = v5;
    v10 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for executor != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    v12 = v10;
    v13 = v10;
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v25[0] = v17;
      *(_DWORD *)v16 = 136446210;
      swift_getErrorValue();
      v18 = Error.localizedDescription.getter();
      *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B4BE6000, v14, v15, "Error initially finding NSExtensions: %{public}s? Assuming no results.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v17, -1, -1);
      MEMORY[0x1B5E44758](v16, -1, -1);

    }
    else
    {

    }
  }
  $defer #1 () in closure #2 in FlowExtensionObserver.begin()(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t $defer #1 () in closure #2 in FlowExtensionObserver.begin()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  os_signpost_id_t v17;
  void (*v18)(_BYTE *, uint64_t);
  _BYTE v20[4];
  int v21;
  uint64_t v22;

  v22 = a2;
  v2 = type metadata accessor for OSSignpostError();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for OSSignpostID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v12 = &v20[-v11];
  if (one-time initialization token for executor != -1)
    swift_once();
  v13 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v13, (uint64_t)static Signposter.executor);
  v14 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  v21 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(_BYTE *, uint64_t))(v3 + 88))(v5, v2) == *MEMORY[0x1E0DF2190])
    {
      v15 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
      v15 = "";
    }
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v10, v12, v6);
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    v17 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B4BE6000, v14, (os_signpost_type_t)v21, v17, "LoadAllFlowExtensions", v15, v16, 2u);
    MEMORY[0x1B5E44758](v16, -1, -1);

    v18 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
    v18(v12, v6);
    v18(v10, v6);
  }
  else
  {

    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
  }
  *(_QWORD *)(v22 + 48) = 0;
  return swift_release();
}

Swift::Void __swiftcall FlowExtensionObserver.stop()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  v1 = v0 + 16;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, (uint64_t)&v3, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (*((_QWORD *)&v4 + 1))
  {
    outlined init with take of Any(&v3, &v5);
    v2 = (void *)objc_opt_self();
    __swift_project_boxed_opaque_existential_1(&v5, v6);
    objc_msgSend(v2, sel_endMatchingExtensions_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
    v3 = 0u;
    v4 = 0u;
    swift_beginAccess();
    outlined assign with take of Any?((uint64_t)&v3, v1);
    swift_endAccess();
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v3, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
}

uint64_t closure #1 in closure #1 in static FlowExtensionObserver.reduceSeenTopics(_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[40];
  uint64_t v32;

  v5 = IntentTopic.cacheKey.getter();
  v7 = v6;
  v8 = *a2;
  if (!*(_QWORD *)(*a2 + 16))
  {
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v7);
  if ((v10 & 1) == 0)
  {
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  outlined init with copy of ReferenceResolutionClientProtocol(*(_QWORD *)(v8 + 56) + 40 * v9, (uint64_t)&v28);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v29 + 1))
  {
LABEL_10:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v28, &demangling cache variable for type metadata for NSExtensionProtocol?);
    outlined init with copy of ReferenceResolutionClientProtocol(a3, (uint64_t)v31);
    return specialized Dictionary.subscript.setter((uint64_t)v31, v5, v7);
  }
  outlined init with take of ReferenceResolutionClientProtocol(&v28, (uint64_t)v31);
  if (one-time initialization token for executor != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v31, (uint64_t)&v28);
  outlined init with copy of ReferenceResolutionClientProtocol(a3, (uint64_t)v25);
  swift_bridgeObjectRetain();
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v24 = swift_slowAlloc();
    v32 = v24;
    *(_DWORD *)v14 = 136315650;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2080;
    v16 = *((_QWORD *)&v29 + 1);
    v15 = v30;
    __swift_project_boxed_opaque_existential_1(&v28, *((uint64_t *)&v29 + 1));
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    *(_WORD *)(v14 + 22) = 2080;
    v19 = v26;
    v20 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    _os_log_impl(&dword_1B4BE6000, v12, v13, "Multiple extensions support topic %s, using %s and ignoring %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v24, -1, -1);
    MEMORY[0x1B5E44758](v14, -1, -1);

  }
  else
  {

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    swift_bridgeObjectRelease_n();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
}

uint64_t FlowExtensionObserver.deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for Any?);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FlowExtensionObserver.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for Any?);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t NSExtension.identifierString.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t result;

  v1 = objc_msgSend(v0, sel_identifier);
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return v3;
  }
  else
  {
    result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000033, 0x80000001B4EFD340, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/FlowExtension/FlowExtensionDiscovery.swift", 130, 2, 289);
    __break(1u);
  }
  return result;
}

id static NSExtension.findExtension(identifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  id v7;
  id v8;
  id v10;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x1E0C80C00];
  swift_bridgeObjectRetain();
  v6 = (void *)MEMORY[0x1B5E432E8](a1, a2);
  swift_bridgeObjectRelease();
  v11[0] = 0;
  v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_extensionWithIdentifier_error_, v6, v11);

  v8 = v11[0];
  if (v7)
  {
    a3[3] = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSExtension);
    a3[4] = &protocol witness table for NSExtension;
    *a3 = v7;
    return v8;
  }
  else
  {
    v10 = v11[0];
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow();
  }
}

double NSExtension.extensionContextAsProtocol(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  id v12;
  double result;
  uint64_t v14;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  v12 = objc_msgSend(v3, sel__extensionContextForUUID_, isa);

  if (v12)
  {
    *(_QWORD *)(a2 + 24) = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSExtensionContext);
    *(_QWORD *)(a2 + 32) = &protocol witness table for NSExtensionContext;
    *(_QWORD *)a2 = v12;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

unint64_t NSExtension.stringIndexedAttributes.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = objc_msgSend(v0, sel_attributes);
  if (!v1
    || (v2 = v1,
        v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(),
        v2,
        v4 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v3),
        swift_bridgeObjectRelease(),
        !v4))
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    v6 = v0;
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v20 = v10;
      *(_DWORD *)v9 = 136315394;
      v11 = v6;
      v12 = objc_msgSend(v11, sel_description);
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v15 = v14;

      v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?.Type);
      v16 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v7, v8, "Extension %s has wrong type for attributes: %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v10, -1, -1);
      MEMORY[0x1B5E44758](v9, -1, -1);

    }
    else
    {

    }
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  }
  return v4;
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  int64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  __int128 v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  __int128 v24;
  _OWORD v25[2];
  _OWORD v26[2];
  __int128 v27;
  _OWORD v28[2];
  _OWORD v29[2];
  _OWORD v30[2];
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  _OWORD v34[2];
  uint64_t v35;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  }
  v23 = a1 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v10 = (v5 - 1) & v5;
      v11 = __clz(__rbit64(v5)) | (v7 << 6);
      v12 = v7;
    }
    else
    {
      v13 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_37;
      if (v13 >= v22)
      {
LABEL_33:
        outlined consume of [Int : @Sendable ()].Iterator._Variant();
        return (unint64_t)v2;
      }
      v14 = *(_QWORD *)(v23 + 8 * v13);
      v12 = v7 + 1;
      if (!v14)
      {
        v12 = v7 + 2;
        if (v7 + 2 >= v22)
          goto LABEL_33;
        v14 = *(_QWORD *)(v23 + 8 * v12);
        if (!v14)
        {
          v12 = v7 + 3;
          if (v7 + 3 >= v22)
            goto LABEL_33;
          v14 = *(_QWORD *)(v23 + 8 * v12);
          if (!v14)
          {
            v12 = v7 + 4;
            if (v7 + 4 >= v22)
              goto LABEL_33;
            v14 = *(_QWORD *)(v23 + 8 * v12);
            if (!v14)
            {
              v15 = v7 + 5;
              if (v7 + 5 >= v22)
                goto LABEL_33;
              v14 = *(_QWORD *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  v12 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_38;
                  if (v12 >= v22)
                    goto LABEL_33;
                  v14 = *(_QWORD *)(v23 + 8 * v12);
                  ++v15;
                  if (v14)
                    goto LABEL_26;
                }
              }
              v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      v10 = (v14 - 1) & v14;
      v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    outlined init with copy of AnyHashable(*(_QWORD *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    outlined init with copy of AnyHashable((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v30, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      swift_bridgeObjectRelease();
      outlined consume of [Int : @Sendable ()].Iterator._Variant();
      swift_release();
      return 0;
    }
    outlined init with copy of Any((uint64_t)v31 + 8, (uint64_t)v25);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v30, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v25, v26);
    v27 = v24;
    outlined init with take of Any(v26, v28);
    v16 = v27;
    outlined init with take of Any(v28, v29);
    outlined init with take of Any(v29, &v27);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v16, *((uint64_t *)&v16 + 1));
    v17 = result;
    if ((v18 & 1) != 0)
    {
      v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v8 = v16;
      v9 = (_OWORD *)(v2[7] + 32 * v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      result = (unint64_t)outlined init with take of Any(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    result = (unint64_t)outlined init with take of Any(&v27, (_OWORD *)(v2[7] + 32 * result));
    v19 = v2[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_36;
    v2[2] = v21;
LABEL_8:
    v7 = v12;
    v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t protocol witness for NSExtensionProtocol.identifierString.getter in conformance NSExtension()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t result;

  v1 = objc_msgSend(*v0, sel_identifier);
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return v3;
  }
  else
  {
    result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000033, 0x80000001B4EFD340, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/FlowExtension/FlowExtensionDiscovery.swift", 130, 2, 289);
    __break(1u);
  }
  return result;
}

unint64_t protocol witness for NSExtensionProtocol.stringIndexedAttributes.getter in conformance NSExtension()
{
  return NSExtension.stringIndexedAttributes.getter();
}

id protocol witness for NSExtensionProtocol.beginRequest(options:inputItems:) in conformance NSExtension(uint64_t a1, uint64_t a2)
{
  return @nonobjc NSExtension.beginRequest(options:inputItems:)(a1, a2);
}

id @nonobjc NSExtension.beginRequest(options:inputItems:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSArray v4;
  id v5;
  id v6;
  id v7;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x1E0C80C00];
  if (a2)
    v4.super.isa = Array._bridgeToObjectiveC()().super.isa;
  else
    v4.super.isa = 0;
  v9[0] = 0;
  v5 = objc_msgSend(v2, sel_beginExtensionRequestWithOptions_inputItems_error_, a1, v4.super.isa, v9);

  if (v5)
  {
    v6 = v9[0];
  }
  else
  {
    v7 = v9[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

double protocol witness for NSExtensionProtocol.extensionContextAsProtocol(for:) in conformance NSExtension@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return NSExtension.extensionContextAsProtocol(for:)(a1, a2);
}

id protocol witness for NSExtensionProtocol._kill(_:) in conformance NSExtension(uint64_t a1)
{
  id *v1;

  return objc_msgSend(*v1, sel__kill_, a1);
}

id protocol witness for NSExtensionContextProtocol._auxiliaryConnection.getter in conformance NSExtensionContext()
{
  id *v0;

  return objc_msgSend(*v0, sel__auxiliaryConnection);
}

uint64_t sub_1B4DE9B4C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:)()
{
  uint64_t v0;

  return implicit closure #1 in FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:)((_QWORD *)(v0 + 16));
}

uint64_t specialized static FlowExtensionObserver.reduceSeenExtensions(_:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25[2];
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSExtensionProtocol);
  v3 = (_QWORD *)Dictionary.init(minimumCapacity:)();
  if (!v2)
    return (uint64_t)v3;
  v4 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol(v4, (uint64_t)v26);
    v6 = v27;
    v7 = v28;
    __swift_project_boxed_opaque_existential_1(v26, v27);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    v10 = v9;
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v26, (uint64_t)v25);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
    v14 = v3[2];
    v15 = (v12 & 1) == 0;
    v16 = v14 + v15;
    if (__OFADD__(v14, v15))
      break;
    v17 = v12;
    if (v3[3] >= v16)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v12 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v17 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
      if ((v17 & 1) != (v19 & 1))
        goto LABEL_20;
      v13 = v18;
      if ((v17 & 1) != 0)
      {
LABEL_3:
        v5 = v3[7] + 40 * v13;
        __swift_destroy_boxed_opaque_existential_1(v5);
        outlined init with take of ReferenceResolutionClientProtocol(v25, v5);
        goto LABEL_4;
      }
    }
    v3[(v13 >> 6) + 8] |= 1 << v13;
    v20 = (uint64_t *)(v3[6] + 16 * v13);
    *v20 = v8;
    v20[1] = v10;
    outlined init with take of ReferenceResolutionClientProtocol(v25, v3[7] + 40 * v13);
    v21 = v3[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_19;
    v3[2] = v23;
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    v4 += 40;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static FlowExtensionObserver.reduceSeenTopics(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for IntentTopic();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSExtensionProtocol);
  result = Dictionary.init(minimumCapacity:)();
  v22 = result;
  v18 = v6;
  if (v6)
  {
    v16 = a1;
    v17 = a1 + 32;
    swift_bridgeObjectRetain();
    v8 = 0;
    do
    {
      outlined init with copy of ReferenceResolutionClientProtocol(v17 + 40 * v8, (uint64_t)v19);
      v9 = v20;
      v10 = v21;
      __swift_project_boxed_opaque_existential_1(v19, v20);
      (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
      v11 = static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v11 + 16);
      if (v12)
      {
        v13 = v11 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
        swift_bridgeObjectRetain();
        v14 = *(_QWORD *)(v3 + 72);
        v15 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
        do
        {
          v15(v5, v13, v2);
          closure #1 in closure #1 in static FlowExtensionObserver.reduceSeenTopics(_:)((uint64_t)v5, &v22, (uint64_t)v19);
          (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
          v13 += v14;
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      ++v8;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    }
    while (v8 != v18);
    swift_bridgeObjectRelease();
    return v22;
  }
  return result;
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for FlowExtensionDiscoverer()
{
  return objc_opt_self();
}

uint64_t method lookup function for FlowExtensionDiscoverer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FlowExtensionDiscoverer.__allocating_init(observer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for FlowExtensionObserver()
{
  return objc_opt_self();
}

uint64_t method lookup function for FlowExtensionObserver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FlowExtensionObserver.__allocating_init(forceKnownExtensions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of NSExtensionProtocol.identifierString.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NSExtensionProtocol.stringIndexedAttributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of NSExtensionProtocol.beginRequest(options:inputItems:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of NSExtensionProtocol.extensionContextAsProtocol(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of NSExtensionProtocol._kill(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of NSExtensionContextProtocol._auxiliaryConnection.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

unint64_t lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor;
  if (!lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor)
  {
    v1 = type metadata accessor for ConversationActor();
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for ConversationActor, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor);
  }
  return result;
}

uint64_t sub_1B4DEA0CC()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in variable initialization expression of kSharedFlowExtensionObserver(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in variable initialization expression of kSharedFlowExtensionObserver(a1, v4, v5, v6);
}

void partial apply for closure #1 in FlowExtensionObserver.begin()(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #1 in FlowExtensionObserver.begin()(a1, a2, v2);
}

uint64_t sub_1B4DEA16C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in FlowExtensionObserver.begin()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #2 in FlowExtensionObserver.begin()(a1, v4, v5, v6, v7);
}

uint64_t sub_1B4DEA220()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in FlowExtensionObserver.begin()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in FlowExtensionObserver.begin()(a1, v4, v5, v6, v7, v8);
}

id static FlowExtensionSubsystem.initForPlugInKit()()
{
  objc_msgSend((id)objc_opt_self(), sel__startListening);
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FlowExtensionSubsystem()), sel_init);
}

id FlowExtensionSubsystem.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t type metadata accessor for FlowExtensionSubsystem()
{
  return objc_opt_self();
}

id FlowExtensionSubsystem.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlowExtensionSubsystem();
  return objc_msgSendSuper2(&v2, sel_init);
}

id FlowExtensionSubsystem.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlowExtensionSubsystem();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t FlowPluginInfo.__allocating_init(pluginBundle:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  char v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, unint64_t, uint64_t);
  unsigned int v52;
  uint64_t v53;

  v3 = type metadata accessor for IntentTopic.IntentTopicType();
  v53 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v40 - v7;
  v9 = type metadata accessor for IntentTopic();
  v44 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v48 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v45 = (char *)&v40 - v15;
  v16 = type metadata accessor for HandcraftedPluginManifestEntry();
  v46 = *(_QWORD *)(v16 - 8);
  v47 = v16;
  v17 = MEMORY[0x1E0C80A78](v16);
  v43 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v42 = (char *)&v40 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v20 = dispatch thunk of FlowPluginBundle.supportedTopics.getter();
  v21 = *(_QWORD *)(v20 + 16);
  v49 = v1;
  if (v21)
  {
    v40 = v20;
    v41 = a1;
    v22 = v44;
    v23 = v20 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    v52 = *MEMORY[0x1E0D9B600];
    v24 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
    v50 = *(_QWORD *)(v44 + 72);
    v51 = v24;
    while (1)
    {
      v51(v11, v23, v9);
      IntentTopic.type.getter();
      v25 = v53;
      (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v6, v52, v3);
      lazy protocol witness table accessor for type IntentTopic.IntentTopicType and conformance IntentTopic.IntentTopicType();
      v26 = dispatch thunk of static Equatable.== infix(_:_:)();
      v27 = *(void (**)(char *, uint64_t))(v25 + 8);
      v27(v6, v3);
      v27(v8, v3);
      (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v9);
      if ((v26 & 1) != 0)
        break;
      v23 += v50;
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        v28 = 0;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    v28 = 1;
LABEL_8:
    a1 = v41;
  }
  else
  {
    swift_bridgeObjectRelease();
    v28 = 0;
  }
  v30 = v47;
  v29 = (uint64_t)v48;
  v31 = (uint64_t)v45;
  v32 = v46;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of FlowPluginBundle.bundlePath.getter();
  static HandcraftedPluginManifestEntry.fromPluginBundleIdOrPath(_:)();
  swift_bridgeObjectRelease();
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  if (v33(v31, 1, v30) == 1)
  {
    outlined destroy of HandcraftedPluginManifestEntry?(v31);
    v34 = 1;
  }
  else
  {
    v35 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v42, v31, v30);
    v34 = HandcraftedPluginManifestEntry.isPersonalDomain.getter();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v30);
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of FlowPluginBundle.bundlePath.getter();
  static HandcraftedPluginManifestEntry.fromPluginBundleIdOrPath(_:)();
  swift_bridgeObjectRelease();
  if (v33(v29, 1, v30) == 1)
  {
    outlined destroy of HandcraftedPluginManifestEntry?(v29);
    v36 = 0;
  }
  else
  {
    v37 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v43, v29, v30);
    v36 = HandcraftedPluginManifestEntry.sensitivityPolicy.getter();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v30);
  }
  v38 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(v49 + 104))(v28, v34 & 1, v36, 0);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v38;
}

unint64_t lazy protocol witness table accessor for type IntentTopic.IntentTopicType and conformance IntentTopic.IntentTopicType()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type IntentTopic.IntentTopicType and conformance IntentTopic.IntentTopicType;
  if (!lazy protocol witness table cache variable for type IntentTopic.IntentTopicType and conformance IntentTopic.IntentTopicType)
  {
    v1 = type metadata accessor for IntentTopic.IntentTopicType();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0D9B610], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntentTopic.IntentTopicType and conformance IntentTopic.IntentTopicType);
  }
  return result;
}

uint64_t outlined destroy of HandcraftedPluginManifestEntry?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static FlowPluginInfo.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t FlowPluginInfo.supportsOnDeviceNL.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_supportsOnDeviceNL);
}

uint64_t FlowPluginInfo.isPersonalRequest.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isPersonalRequest);
}

uint64_t FlowPluginInfo.sensitivityPolicy.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_sensitivityPolicy);
}

uint64_t FlowPluginInfo.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return FlowPluginInfo.init(coder:)(a1);
}

Swift::Void __swiftcall FlowPluginInfo.encode(with:)(NSCoder with)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;

  v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_supportsOnDeviceNL);
  v4 = (void *)MEMORY[0x1B5E432E8](0xD000000000000013, 0x80000001B4EFD620);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v3, v4);

  v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isPersonalRequest);
  v6 = (void *)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EFD640);
  -[objc_class encodeBool:forKey:](with.super.isa, sel_encodeBool_forKey_, v5, v6);

  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_sensitivityPolicy);
  v8 = (id)MEMORY[0x1B5E432E8](0xD000000000000011, 0x80000001B4EFD660);
  -[objc_class encodeInteger:forKey:](with.super.isa, sel_encodeInteger_forKey_, v7, v8);

}

id FlowPluginInfo.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void FlowPluginInfo.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id FlowPluginInfo.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlowPluginInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for FlowPluginInfo()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FlowPluginInfo.__allocating_init(supportsOnDeviceNL:isPersonalRequest:sensitivityPolicy:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v4 + 104))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of FlowPluginInfo.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of FlowPluginInfo.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t *GenericContextTransformer.sharedInstance.unsafeMutableAddressor()
{
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  return &static GenericContextTransformer.sharedInstance;
}

id one-time initialization function for sharedInstance()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GenericContextTransformer()), sel_init);
  static GenericContextTransformer.sharedInstance = (uint64_t)result;
  return result;
}

id static GenericContextTransformer.sharedInstance.getter()
{
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  return (id)static GenericContextTransformer.sharedInstance;
}

uint64_t GenericContextTransformer.getRedactedContext(for:metadata:privacyPolicy:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

id GenericContextTransformer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GenericContextTransformer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GenericContextTransformer()
{
  return objc_opt_self();
}

uint64_t method lookup function for GenericContextTransformer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GenericContextTransformer.getRedactedContext(for:metadata:privacyPolicy:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50))();
}

const char *HALFeatureFlags.domain.getter()
{
  return "Siri";
}

const char *HALFeatureFlags.feature.getter()
{
  return "cross_device_voice_follow_up";
}

uint64_t static HALFeatureFlags.== infix(_:_:)()
{
  return 1;
}

void HALFeatureFlags.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int HALFeatureFlags.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance HALFeatureFlags()
{
  return "cross_device_voice_follow_up";
}

uint64_t storeEnumTagSinglePayload for HALFeatureFlags(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4DEAEB8 + 4 * byte_1B4EEACE0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4DEAED8 + 4 * byte_1B4EEACE5[v4]))();
}

_BYTE *sub_1B4DEAEB8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4DEAED8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4DEAEE0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4DEAEE8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4DEAEF0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4DEAEF8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HALFeatureFlags()
{
  return &type metadata for HALFeatureFlags;
}

uint64_t one-time initialization function for phoneCallStateQueryTimeoutInMillis()
{
  uint64_t v0;

  v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static HALUtils.phoneCallStateQueryTimeoutInMillis);
  *(_QWORD *)__swift_project_value_buffer(v0, (uint64_t)static HALUtils.phoneCallStateQueryTimeoutInMillis) = 50;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

uint64_t HALUtils.phoneCallStateQueryTimeoutInMillis.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for phoneCallStateQueryTimeoutInMillis != -1)
    swift_once();
  v0 = type metadata accessor for DispatchTimeInterval();
  return __swift_project_value_buffer(v0, (uint64_t)static HALUtils.phoneCallStateQueryTimeoutInMillis);
}

uint64_t static HALUtils.phoneCallStateQueryTimeoutInMillis.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for phoneCallStateQueryTimeoutInMillis != -1)
    swift_once();
  v2 = type metadata accessor for DispatchTimeInterval();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static HALUtils.phoneCallStateQueryTimeoutInMillis);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

ValueMetadata *type metadata accessor for HALUtils()
{
  return &type metadata for HALUtils;
}

uint64_t sub_1B4DEB044()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for OSSignpostID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B4DEB0D8()
{
  return swift_deallocObject();
}

uint64_t sub_1B4DEB0E8()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t HangUpOverride.__allocating_init(topRankedParse:bridge:isSpeechRequest:isNlEmpty:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  HangUpOverride.init(topRankedParse:bridge:isSpeechRequest:isNlEmpty:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t HangUpOverride.overrideType.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

uint64_t (*HangUpOverride.overrideType.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t HangUpOverride.topRankedParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_topRankedParse, a1, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
}

uint64_t HangUpOverride.bridge.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t HangUpOverride.isSpeechRequest.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isSpeechRequest);
}

uint64_t HangUpOverride.isNlEmpty.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isNlEmpty);
}

uint64_t HangUpOverride.isBlushingPhantomEnabled.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isBlushingPhantomEnabled);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*HangUpOverride.isBlushingPhantomEnabled.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t HangUpOverride.isQuickStopCallBellEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isQuickStopCallBellEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t HangUpOverride.isQuickStopCallBellEnabled.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isQuickStopCallBellEnabled);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*HangUpOverride.isQuickStopCallBellEnabled.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t HangUpOverride.isCancelCallBellEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isCancelCallBellEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t HangUpOverride.isCancelCallBellEnabled.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isCancelCallBellEnabled);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*HangUpOverride.isCancelCallBellEnabled.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t HangUpOverride.isActiveDropInCall.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isActiveDropInCall);
  swift_beginAccess();
  return *v1;
}

uint64_t HangUpOverride.isActiveDropInCall.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isActiveDropInCall);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*HangUpOverride.isActiveDropInCall.modify())()
{
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t HangUpOverride.init(topRankedParse:bridge:isSpeechRequest:isNlEmpty:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  _BYTE v25[24];
  ValueMetadata *v26;
  unint64_t v27;

  v6 = v5;
  *(_BYTE *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isBlushingPhantomEnabled) = AFSupportsSiriInCall();
  v12 = (_QWORD *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_bridge);
  *v12 = a2;
  v12[1] = a3;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_topRankedParse, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  *(_BYTE *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isSpeechRequest) = a4;
  *(_BYTE *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isNlEmpty) = a5;
  v13 = one-time initialization token for forceEnabled;
  swift_unknownObjectRetain();
  if (v13 != -1)
    swift_once();
  v14 = swift_beginAccess();
  v15 = static SiriPlaybackControlFeature.forceEnabled;
  if (*(_QWORD *)(static SiriPlaybackControlFeature.forceEnabled + 16)
    && (v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14), (v17 & 1) != 0))
  {
    v18 = *(_BYTE *)(*(_QWORD *)(v15 + 56) + v16);
  }
  else
  {
    v26 = &type metadata for SiriPlaybackControlFeature;
    v27 = lazy protocol witness table accessor for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature();
    v18 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  *(_BYTE *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isQuickStopCallBellEnabled) = v18 & 1;
  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  v19 = swift_beginAccess();
  v20 = static SiriPhoneFeature.forceEnabled;
  if (*(_QWORD *)(static SiriPhoneFeature.forceEnabled + 16)
    && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19), (v22 & 1) != 0))
  {
    v23 = *(_BYTE *)(*(_QWORD *)(v20 + 56) + v21);
  }
  else
  {
    v26 = &type metadata for SiriPhoneFeature;
    v27 = lazy protocol witness table accessor for type SiriPhoneFeature and conformance SiriPhoneFeature();
    v23 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  swift_unknownObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  *(_BYTE *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isCancelCallBellEnabled) = v23 & 1;
  *(_BYTE *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isActiveDropInCall) = 0;
  return v6;
}

uint64_t HangUpOverride.isValidActivePhoneCallRequest()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  char *v26;
  uint64_t v27;
  char v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(char *, unint64_t, uint64_t);
  uint64_t v57;
  char v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  _OWORD v73[2];

  v1 = v0;
  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v67 = v2;
  v68 = v3;
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v69 = (char *)&v64 - v17;
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_topRankedParse, (uint64_t)v8, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  v18 = type metadata accessor for Siri_Nlu_External_UserParse();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v8, 1, v18) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
LABEL_7:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1B4BE6000, v23, v24, "[ExecutionOverride] Unable to retrieve UserDialogAct from parse. Cannot determine request type; presuming reques"
        "t is not valid active phone call request.",
        v25,
        2u);
      MEMORY[0x1B5E44758](v25, -1, -1);
    }

    return 0;
  }
  v20 = MEMORY[0x1B5E3FA6C]();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v18);
  if (*(_QWORD *)(v20 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, v20 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v12);
    v21 = 0;
  }
  else
  {
    v21 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v21, 1, v12);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    goto LABEL_7;
  v26 = v69;
  v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v69, v11, v12);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 224))(v27) & 1) == 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v26, v12);
    goto LABEL_19;
  }
  v28 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 248))();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v26, v12);
  if ((v28 & 1) == 0)
  {
LABEL_19:
    v30 = *(void (**)(char *, uint64_t))(v13 + 8);
    v30(v16, v12);
    goto LABEL_20;
  }
  v29 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
  v30 = *(void (**)(char *, uint64_t))(v13 + 8);
  v30(v16, v12);
  if ((v29 & 1) != 0)
  {
    if (one-time initialization token for executor == -1)
      goto LABEL_16;
    goto LABEL_74;
  }
LABEL_20:
  v35 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  v42 = v35;
  if (!(v35 >> 62))
  {
    if (*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_31;
LABEL_71:
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v39 = 0;
      _os_log_impl(&dword_1B4BE6000, v37, v38, "[ExecutionOverride] UserDialog was not of type UsoTask. Cannot determine request type; presuming request is not "
        "valid active phone call request.",
        v39,
        2u);
      MEMORY[0x1B5E44758](v39, -1, -1);
    }
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  v63 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v63)
    goto LABEL_71;
LABEL_31:
  if ((v42 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v42);
  }
  else
  {
    if (!*(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_74:
      swift_once();
LABEL_16:
      v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.executor);
      v32 = Logger.logObject.getter();
      v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v34 = 0;
        _os_log_impl(&dword_1B4BE6000, v32, v33, "[ExecutionOverride] [HangUpOverride]: userDialogAct:UserCancelled: Conditions met to end the call. Return .accept.", v34, 2u);
        MEMORY[0x1B5E44758](v34, -1, -1);
      }
LABEL_42:

LABEL_46:
      v30(v26, v12);
      return 1;
    }
    swift_retain();
  }
  v43 = swift_bridgeObjectRelease();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 200))(v43) & 1) != 0
    && ((*(uint64_t (**)(void))(*(_QWORD *)v1 + 248))() & 1) != 0
    && (specialized HangUpOverride.isQuickStopTask(task:)() & 1) != 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
    v32 = Logger.logObject.getter();
    v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v46 = 0;
      _os_log_impl(&dword_1B4BE6000, v32, v45, "[ExecutionOverride] [HangUpOverride]: Conditions met to quick stop dropIn call. Return .accept.", v46, 2u);
      MEMORY[0x1B5E44758](v46, -1, -1);
    }
    swift_release();
    goto LABEL_42;
  }
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (!v72)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v71, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.executor);
    v37 = Logger.logObject.getter();
    v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v49 = 0;
      _os_log_impl(&dword_1B4BE6000, v37, v48, "[ExecutionOverride] Unable to initialize UsoTask. Cannot determine request type; presuming request is not valid "
        "active phone call request.",
        v49,
        2u);
      MEMORY[0x1B5E44758](v49, -1, -1);
    }
    swift_release();
LABEL_25:

LABEL_26:
    v30(v26, v12);
    return 0;
  }
  outlined init with take of Any(&v71, v73);
  outlined init with copy of Any((uint64_t)v73, (uint64_t)&v71);
  type metadata accessor for UsoTask_hangup_common_PhoneCall();
  if (swift_dynamicCast())
  {
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
    goto LABEL_46;
  }
  outlined init with copy of Any((uint64_t)v73, (uint64_t)&v71);
  type metadata accessor for UsoTask_action_common_SocialConversation();
  if (!swift_dynamicCast())
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
    goto LABEL_26;
  }
  v50 = v70;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  swift_release();
  v66 = v50;
  if (!(_QWORD)v71
    || (v51 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)(), swift_release(), !v51))
  {
    swift_bridgeObjectRelease();
    v51 = MEMORY[0x1E0DEE9D8];
  }
  v52 = v69;
  v53 = *(_QWORD *)(v51 + 16);
  if (v53)
  {
    v64 = v51;
    v65 = v30;
    v54 = v51 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
    v55 = *(_QWORD *)(v68 + 72);
    v56 = *(void (**)(char *, unint64_t, uint64_t))(v68 + 16);
    swift_bridgeObjectRetain();
    v57 = v67;
    while (1)
    {
      v56(v5, v54, v57);
      v58 = closure #1 in HangUpOverride.isValidActivePhoneCallRequest()((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v5, v57);
      if ((v58 & 1) != 0)
        break;
      v54 += v55;
      if (!--v53)
      {
        swift_bridgeObjectRelease_n();
        v40 = 0;
        goto LABEL_64;
      }
    }
    swift_bridgeObjectRelease_n();
    v40 = 1;
LABEL_64:
    v52 = v69;
    v30 = v65;
  }
  else
  {
    swift_bridgeObjectRelease();
    v40 = 0;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v59 = type metadata accessor for Logger();
  __swift_project_value_buffer(v59, (uint64_t)static Logger.executor);
  v60 = Logger.logObject.getter();
  v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v62 = 67109120;
    LODWORD(v71) = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v60, v61, "[ExecutionOverride] [HangUpOverride] Received canned UsoTask, isVoiceTrigger = %{BOOL}d", v62, 8u);
    MEMORY[0x1B5E44758](v62, -1, -1);
  }
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  v30(v52, v12);
  return v40;
}

uint64_t closure #1 in HangUpOverride.isValidActivePhoneCallRequest()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  char v23;
  void (*v24)(_BYTE *, uint64_t);
  _BYTE *v25;
  _BYTE *v26;
  void (*v27)(_BYTE *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t (*v35)(_BYTE *, uint64_t, uint64_t);
  int v36;
  uint64_t v37;
  void (*v38)(_BYTE *, uint64_t);
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_BYTE *, uint64_t);
  uint64_t v47;
  _BYTE v48[12];
  int v49;
  void (*v50)(_BYTE *, uint64_t, uint64_t);
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;

  v61 = type metadata accessor for IdentifierNamespace();
  v57 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61);
  v52 = &v48[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (IdentifierNamespace?, IdentifierNamespace?));
  MEMORY[0x1E0C80A78](v56);
  v60 = &v48[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifierNamespace?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v53 = &v48[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = MEMORY[0x1E0C80A78](v5);
  v54 = &v48[-v8];
  MEMORY[0x1E0C80A78](v7);
  v55 = &v48[-v9];
  v10 = type metadata accessor for UsoIdentifier();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v58 = &v48[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v12);
  v15 = &v48[-v14];
  v16 = type metadata accessor for IdentifierAppBundle();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v20 = &v48[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v18);
  v22 = &v48[-v21];
  UsoIdentifier.appBundleSemantic.getter();
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v17 + 104))(v20, *MEMORY[0x1E0DA0F20], v16);
  v23 = MEMORY[0x1B5E40114](v22, v20);
  v24 = *(void (**)(_BYTE *, uint64_t))(v17 + 8);
  v24(v20, v16);
  v25 = v22;
  v26 = v15;
  v24(v25, v16);
  v27 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16);
  v59 = a1;
  v27(v15, a1, v10);
  if ((v23 & 1) == 0)
  {
    v38 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
    v38(v26, v10);
    v39 = v58;
LABEL_9:
    v27(v39, v59, v10);
    goto LABEL_10;
  }
  v50 = v27;
  v51 = v11;
  v28 = (uint64_t)v55;
  UsoIdentifier.namespaceSemantic.getter();
  v29 = v57;
  v30 = (uint64_t)v54;
  v31 = v61;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v57 + 104))(v54, *MEMORY[0x1E0DA0F48], v61);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, v31);
  v32 = (uint64_t)v26;
  v33 = v60;
  v34 = (uint64_t)&v60[*(int *)(v56 + 48)];
  outlined init with copy of ReferenceResolutionClientProtocol?(v28, (uint64_t)v60, &demangling cache variable for type metadata for IdentifierNamespace?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v30, v34, &demangling cache variable for type metadata for IdentifierNamespace?);
  v35 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48);
  v36 = v35(v33, 1, v31);
  v37 = v28;
  if (v36 != 1)
  {
    v56 = v32;
    v40 = v53;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v60, (uint64_t)v53, &demangling cache variable for type metadata for IdentifierNamespace?);
    if (v35((_BYTE *)v34, 1, v61) != 1)
    {
      v43 = v52;
      v44 = v34;
      v45 = v61;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v29 + 32))(v52, v44, v61);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type IdentifierNamespace and conformance IdentifierNamespace, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA0F78], MEMORY[0x1E0DA0F88]);
      v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      v46 = *(void (**)(_BYTE *, uint64_t))(v29 + 8);
      v46(v43, v45);
      outlined destroy of ReferenceResolutionClientProtocol?(v30, &demangling cache variable for type metadata for IdentifierNamespace?);
      outlined destroy of ReferenceResolutionClientProtocol?(v37, &demangling cache variable for type metadata for IdentifierNamespace?);
      v38 = *(void (**)(_BYTE *, uint64_t))(v51 + 8);
      v38((_BYTE *)v56, v10);
      v46(v40, v45);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v60, &demangling cache variable for type metadata for IdentifierNamespace?);
      v39 = v58;
      v50(v58, v59, v10);
      if ((v49 & 1) != 0)
        goto LABEL_13;
LABEL_10:
      v41 = 0;
      goto LABEL_11;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v30, &demangling cache variable for type metadata for IdentifierNamespace?);
    outlined destroy of ReferenceResolutionClientProtocol?(v28, &demangling cache variable for type metadata for IdentifierNamespace?);
    v38 = *(void (**)(_BYTE *, uint64_t))(v51 + 8);
    v38((_BYTE *)v56, v10);
    (*(void (**)(_BYTE *, uint64_t))(v29 + 8))(v40, v61);
    goto LABEL_8;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v30, &demangling cache variable for type metadata for IdentifierNamespace?);
  outlined destroy of ReferenceResolutionClientProtocol?(v28, &demangling cache variable for type metadata for IdentifierNamespace?);
  v38 = *(void (**)(_BYTE *, uint64_t))(v51 + 8);
  v38((_BYTE *)v32, v10);
  if (v35((_BYTE *)v34, 1, v61) != 1)
  {
LABEL_8:
    v39 = v58;
    v27 = v50;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v60, &demangling cache variable for type metadata for (IdentifierNamespace?, IdentifierNamespace?));
    goto LABEL_9;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v60, &demangling cache variable for type metadata for IdentifierNamespace?);
  v39 = v58;
  v50(v58, v59, v10);
LABEL_13:
  if (UsoIdentifier.value.getter() == 0x6563696F566C6164 && v47 == 0xEF72656767697254)
  {
    swift_bridgeObjectRelease();
    v41 = 1;
  }
  else
  {
    v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
LABEL_11:
  v38(v39, v10);
  return v41 & 1;
}

uint64_t HangUpOverride.isUserOnPhoneCall()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  *(_QWORD *)(v1 + 136) = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[ExecutionOverride] [HangUpOverride]: Checking if User on Phone call", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }

  v0[19] = static MessageBusActor.shared;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  v0[20] = v5;
  v0[21] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AFServiceDeviceContext]?);
  *v5 = v0;
  v5[1] = HangUpOverride.isUserOnPhoneCall();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

void HangUpOverride.isUserOnPhoneCall()()
{
  uint64_t v0;
  unint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  id v18;
  id v19;
  unint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint8_t *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;

  swift_release();
  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    *(_DWORD *)v4 = 136315138;
    v33 = v5;
    *(_QWORD *)(v0 + 120) = v1;
    swift_bridgeObjectRetain();
    v6 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[ExecutionOverride] [HangUpOverride]: fetched context: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v5, -1, -1);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v8 = (_OWORD *)(v0 + 16);
  if (!v1)
    goto LABEL_27;
  if (!(v1 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_7;
LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  v29 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v29)
    goto LABEL_26;
LABEL_7:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v9 = (id)MEMORY[0x1B5E43B94](0, v1);
LABEL_10:
    v10 = v9;
    swift_bridgeObjectRelease();
    v11 = objc_msgSend(v10, sel_serializedContextByKey);

    if (v11)
    {
      v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(_QWORD *)(v12 + 16) && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14), (v16 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v12 + 56) + 32 * v15, v0 + 16);
      }
      else
      {
        *v8 = 0u;
        *(_OWORD *)(v0 + 32) = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v0 + 40))
      {
        v17 = v0 + 48;
        outlined init with take of Any((_OWORD *)(v0 + 16), (_OWORD *)(v0 + 48));
        v18 = objc_allocWithZone(MEMORY[0x1E0CFE848]);
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 72));
        v19 = objc_msgSend(v18, sel_initWithSerializedBackingStore_, _bridgeAnythingToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        if ((objc_msgSend(v19, sel_callState) & 1) != 0)
          v20 = 1;
        else
          v20 = ((unint64_t)objc_msgSend(v19, sel_callState) >> 1) & 1;
        (*(void (**)(id))(**(_QWORD **)(v0 + 128) + 256))(objc_msgSend(v19, sel_isDropInCall));
        swift_retain();
        v21 = Logger.logObject.getter();
        v22 = static os_log_type_t.debug.getter();
        v23 = os_log_type_enabled(v21, v22);
        v24 = *(_QWORD *)(v0 + 128);
        if (v23)
        {
          v25 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v25 = 67109120;
          *(_DWORD *)(v0 + 176) = (*(uint64_t (**)(void))(*(_QWORD *)v24 + 248))() & 1;
          v17 = v0 + 48;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl(&dword_1B4BE6000, v21, v22, "[ExecutionOverride] [HangUpOverride]: phoneCall state retrieved and is user on drop in call? Ans: %{BOOL}d", v25, 8u);
          MEMORY[0x1B5E44758](v25, -1, -1);
        }
        else
        {
          swift_release();
        }

        v26 = Logger.logObject.getter();
        v27 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v28 = 67109120;
          *(_DWORD *)(v0 + 180) = v20;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1B4BE6000, v26, v27, "[ExecutionOverride] [HangUpOverride]: phoneCall state retrieved and is user on call? Ans: %{BOOL}d", v28, 8u);
          MEMORY[0x1B5E44758](v28, -1, -1);
        }

        __swift_destroy_boxed_opaque_existential_1(v17);
LABEL_31:
        (*(void (**)(unint64_t))(v0 + 8))(v20);
        return;
      }
LABEL_28:
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v32 = 0;
        _os_log_impl(&dword_1B4BE6000, v30, v31, "[ExecutionOverride] [HangUpOverride]: Failed to retrieve phone call state before running Hangup Rule.", v32, 2u);
        MEMORY[0x1B5E44758](v32, -1, -1);
      }

      v20 = 0;
      goto LABEL_31;
    }
LABEL_27:
    *v8 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    goto LABEL_28;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v9 = *(id *)(v1 + 32);
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t closure #1 in HangUpOverride.isUserOnPhoneCall()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t ObjectType;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<[AFServiceDeviceContext]?, Never>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_bridge + 8);
  ObjectType = swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3F50;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v9;
  v10 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v11 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  (*(void (**)(Swift::Int, _QWORD, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v7 + 96))(v10, 0, partial apply for closure #1 in closure #1 in HangUpOverride.isUserOnPhoneCall(), v12, ObjectType, v7);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in HangUpOverride.isUserOnPhoneCall()()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<[AFServiceDeviceContext]?, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t HangUpOverride.deinit()
{
  uint64_t v0;

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_topRankedParse, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  swift_unknownObjectRelease();
  return v0;
}

_QWORD *sub_1B4DED190@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)a1 + 152))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1B4DED1D0(char *a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;

  v2 = *a2;
  v4 = *a1;
  return (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 160))(&v4);
}

uint64_t sub_1B4DED20C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4DED240(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 184))(*a1);
}

uint64_t sub_1B4DED26C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 200))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4DED2A0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 208))(*a1);
}

uint64_t sub_1B4DED2CC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 224))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4DED300(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 232))(*a1);
}

uint64_t sub_1B4DED32C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B4DED360(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 256))(*a1);
}

uint64_t ObjC metadata update function for HangUpOverride()
{
  return type metadata accessor for HangUpOverride();
}

void type metadata completion function for HangUpOverride()
{
  unint64_t v0;

  type metadata accessor for Siri_Nlu_External_UserParse?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for HangUpOverride()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HangUpOverride.overrideType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of HangUpOverride.overrideType.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of HangUpOverride.overrideType.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of HangUpOverride.isBlushingPhantomEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of HangUpOverride.isBlushingPhantomEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of HangUpOverride.isBlushingPhantomEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of HangUpOverride.isQuickStopCallBellEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of HangUpOverride.isQuickStopCallBellEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of HangUpOverride.isQuickStopCallBellEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of HangUpOverride.isCancelCallBellEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of HangUpOverride.isCancelCallBellEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of HangUpOverride.isCancelCallBellEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of HangUpOverride.isActiveDropInCall.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of HangUpOverride.isActiveDropInCall.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of HangUpOverride.isActiveDropInCall.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of HangUpOverride.__allocating_init(topRankedParse:bridge:isSpeechRequest:isNlEmpty:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of HangUpOverride.evaluate()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 280) + *(_QWORD *)(*(_QWORD *)v1 + 280));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t specialized HangUpOverride.isQuickStopTask(task:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[2];

  static UsoTask_CodegenConverter.convert(task:)();
  if (v7)
  {
    outlined init with take of Any(&v6, v8);
    outlined init with take of Any(v8, &v6);
    type metadata accessor for UsoTask_stop_uso_NoEntity();
    v0 = swift_dynamicCast();
    if ((_DWORD)v0)
      swift_release();
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (one-time initialization token for executor != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1B4BE6000, v2, v3, "[ExecutionOverride] Unable to initialize UsoTask. Rejecting.", v4, 2u);
      MEMORY[0x1B5E44758](v4, -1, -1);
    }

    return 0;
  }
  return v0;
}

uint64_t partial apply for closure #1 in HangUpOverride.isUserOnPhoneCall()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in HangUpOverride.isUserOnPhoneCall()(a1, v1);
}

uint64_t sub_1B4DED6B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<[AFServiceDeviceContext]?, Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in HangUpOverride.isUserOnPhoneCall()()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<[AFServiceDeviceContext]?, Never>);
  return closure #1 in closure #1 in HangUpOverride.isUserOnPhoneCall()();
}

uint64_t HangUpRule.ruleType.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t HangUpRule.ruleType.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t (*HangUpRule.ruleType.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t HangUpRule.isUserOnActivePhoneCall.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t HangUpRule.isActiveCallFallbackAllowed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 18);
}

_BYTE *HangUpRule.__allocating_init(isUserOnActivePhoneCall:isActiveCallFallbackAllowed:)(char a1, char a2)
{
  _BYTE *result;

  result = (_BYTE *)swift_allocObject();
  result[16] = 0;
  result[17] = a1;
  result[18] = a2;
  return result;
}

_BYTE *HangUpRule.init(isUserOnActivePhoneCall:isActiveCallFallbackAllowed:)(char a1, char a2)
{
  _BYTE *v2;

  v2[16] = 0;
  v2[17] = a1;
  v2[18] = a2;
  return v2;
}

uint64_t HangUpRule.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_1B4DED86C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4DED89C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 112))(*a1);
}

uint64_t method lookup function for HangUpRule()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HangUpRule.ruleType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of HangUpRule.ruleType.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of HangUpRule.ruleType.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of HangUpRule.__allocating_init(isUserOnActivePhoneCall:isActiveCallFallbackAllowed:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of HangUpRule.evaluate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

SiriKitRuntime::HealthAffinityScorer __swiftcall HealthAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::HealthAffinityScorer result;

  v0 = (void *)0x80000001B4EF6D50;
  v1 = 0xD000000000000021;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t static HealthNLUtils.hasMeasurementUnits(from:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    result = MEMORY[0x1B5E408E8]();
    if (result)
    {
      v1 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
      if (v1)
      {
        v2 = specialized _ArrayProtocol.filter(_:)(v1, outlined read-only object #0 of static HealthNLUtils.hasMeasurementUnits(from:));
        swift_release();
        swift_bridgeObjectRelease();
        swift_arrayDestroy();
        v3 = *(_QWORD *)(v2 + 16);
        swift_bridgeObjectRelease();
        return v3 != 0;
      }
      else
      {
        swift_arrayDestroy();
        swift_release();
        return 0;
      }
    }
  }
  return result;
}

uint64_t HealthAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t HealthAffinityScorer.bundleIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*HealthAffinityScorer.bundleIdentifier.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HealthAffinityScorer.score(input:environment:)()
{
  char v0;

  if (!specialized HealthAffinityScorer.getUsoTask(input:)())
    return 1;
  v0 = specialized HealthAffinityScorer.isExplicitlySupported(usoTask:)();
  swift_release();
  if ((v0 & 1) != 0)
    return 3;
  else
    return 2;
}

unint64_t default argument 0 of HealthAffinityScorer.init(bundleIdentifier:)()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for AffinityScoring.score(input:environment:) in conformance HealthAffinityScorer()
{
  char v0;

  if (!specialized HealthAffinityScorer.getUsoTask(input:)())
    return 1;
  v0 = specialized HealthAffinityScorer.isExplicitlySupported(usoTask:)();
  swift_release();
  if ((v0 & 1) != 0)
    return 3;
  else
    return 2;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;

  v5 = type metadata accessor for UsoIdentifier();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v35 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v38 = (char *)&v29 - v9;
  result = MEMORY[0x1E0DEE9D8];
  v39 = MEMORY[0x1E0DEE9D8];
  v34 = *(_QWORD *)(a1 + 16);
  if (!v34)
    return result;
  v29 = v2;
  v11 = 0;
  v12 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v13 = *(_QWORD *)(v6 + 72);
  v36 = a2;
  v37 = v13;
  v31 = v12;
  v33 = a1 + v12;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v30 = a2 + 7;
  while (1)
  {
    v14 = v5;
    v32(v38, v33 + v37 * v11, v5);
    v15 = UsoIdentifier.namespace.getter();
    v17 = v16 ? v15 : 0;
    v18 = v16 ? v16 : 0xE000000000000000;
    v19 = a2[2];
    if (v19)
    {
      v20 = a2[4] == v17 && a2[5] == v18;
      if (v20 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_17:
        swift_bridgeObjectRelease();
        v21 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
        v5 = v14;
        v21(v35, v38, v14);
        v22 = v39;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v22 + 16) + 1, 1);
          v22 = v39;
        }
        v24 = *(_QWORD *)(v22 + 16);
        v23 = *(_QWORD *)(v22 + 24);
        if (v24 >= v23 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
          v22 = v39;
        }
        *(_QWORD *)(v22 + 16) = v24 + 1;
        v21((char *)(v22 + v31 + v24 * v37), v35, v14);
        v39 = v22;
        a2 = v36;
        goto LABEL_4;
      }
      a2 = v36;
      if (v19 != 1)
        break;
    }
LABEL_3:
    swift_bridgeObjectRelease();
    v5 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v38, v14);
LABEL_4:
    if (++v11 == v34)
      return v39;
  }
  v25 = v30;
  v26 = 1;
  while (1)
  {
    v27 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (*(v25 - 1) == v17 && *v25 == v18)
      goto LABEL_17;
    result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0)
      goto LABEL_17;
    v25 += 2;
    ++v26;
    v20 = v27 == v19;
    a2 = v36;
    if (v20)
      goto LABEL_3;
  }
  __break(1u);
  return result;
}

unint64_t specialized HealthAffinityScorer.getUsoTask(input:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;

  v0 = type metadata accessor for Parse();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for USOParse();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) == *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    v8 = specialized static AffinityScorerUtils.getTask(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (v8)
      return v8;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1B4BE6000, v10, v11, "#HealthAffinityScorer did not find any relevant usoParses, returning low affinity score.", v12, 2u);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }

  return 0;
}

uint64_t specialized static HealthNLUtils.extractHealthLog(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[32];
  _BYTE v5[24];
  uint64_t v6;
  _BYTE v7[32];

  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v7, (uint64_t)v5);
  if (v6)
  {
    outlined init with copy of Any?((uint64_t)v5, (uint64_t)v4);
    type metadata accessor for UsoTask_create_common_HealthLog();
    if (swift_dynamicCast())
      goto LABEL_11;
    type metadata accessor for UsoTask_requestLog_common_HealthLog();
    if (swift_dynamicCast())
    {
      v1 = swift_retain();
      MEMORY[0x1B5E40A08](&v3, v1);
LABEL_12:
      swift_release_n();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
      v0 = v3;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
      goto LABEL_13;
    }
    type metadata accessor for UsoTask_open_common_HealthLog();
    if (swift_dynamicCast()
      || (type metadata accessor for UsoTask_checkExistence_common_HealthLog(), swift_dynamicCast())
      || (type metadata accessor for UsoTask_delete_common_HealthLog(), swift_dynamicCast()))
    {
LABEL_11:
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      goto LABEL_12;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v0 = 0;
LABEL_13:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v0;
}

uint64_t specialized static HealthNLUtils.hasHealthDataType(from:)(_BOOL8 a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t result;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  _BOOL8 v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  uint64_t v36;
  unint64_t v37;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UsoIdentifier();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v30 - v10;
  if (a1)
  {
    swift_retain();
    v12 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    if (v12)
    {
      v34 = *(_QWORD *)(v12 + 16);
      if (v34)
      {
        v31 = v11;
        v32 = v4;
        v33 = a1;
        v37 = v12 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
        v13 = *(_QWORD *)(v6 + 72);
        v35 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
        v36 = v13;
        v30 = v12;
        swift_bridgeObjectRetain();
        v14 = 0;
        while (2)
        {
          v35(v9, v37 + v36 * v14, v5);
          v15 = UsoIdentifier.namespace.getter();
          if (v16)
            v17 = v15;
          else
            v17 = 0;
          if (v16)
            v18 = v16;
          else
            v18 = 0xE000000000000000;
          v19 = *(_QWORD *)"healthLogName" == v17 && *(_QWORD *)"gName" == v18;
          if (v19 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
          {
LABEL_27:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v4 = v32;
            (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v32, v9, v5);
            v25 = 0;
            v11 = v31;
          }
          else
          {
            v21 = "ogName";
            v22 = 1;
            do
            {
              v23 = v22 + 1;
              if (__OFADD__(v22, 1))
              {
                __break(1u);
                return result;
              }
              if (*((_QWORD *)v21 - 1) == v17 && *(_QWORD *)v21 == v18)
                goto LABEL_27;
              result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) != 0)
                goto LABEL_27;
              v21 += 16;
              ++v22;
            }
            while (v23 != 3);
            ++v14;
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
            if (v14 != v34)
              continue;
            swift_bridgeObjectRelease();
            v25 = 1;
            v4 = v32;
            v11 = v31;
          }
          break;
        }
      }
      else
      {
        v25 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v25, 1, v5);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
        v26 = UsoIdentifier.value.getter();
        v28 = v27;
        swift_release();
        swift_bridgeObjectRelease();
        v29 = HIBYTE(v28) & 0xF;
        if ((v28 & 0x2000000000000000) == 0)
          v29 = v26 & 0xFFFFFFFFFFFFLL;
        a1 = v29 != 0;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
        return a1;
      }
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for UsoIdentifier?);
    }
    else
    {
      swift_arrayDestroy();
      swift_release();
    }
    return 0;
  }
  return a1;
}

uint64_t specialized HealthAffinityScorer.isExplicitlySupported(usoTask:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  _QWORD v57[4];
  _QWORD v58[5];

  v0 = type metadata accessor for UsoIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v55 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v56 = (char *)&v43 - v4;
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v58[3])
  {
LABEL_81:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_82;
  }
  outlined init with copy of Any?((uint64_t)v58, (uint64_t)v57);
  type metadata accessor for UsoTask_open_common_HealthLog();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_create_common_HealthLog();
    if (!swift_dynamicCast())
    {
      type metadata accessor for UsoTask_delete_common_HealthLog();
      if (!swift_dynamicCast())
      {
        type metadata accessor for UsoTask_update_common_HealthLog();
        if (!swift_dynamicCast())
        {
          type metadata accessor for UsoTask_noVerb_common_HealthLog();
          if (!swift_dynamicCast())
          {
            type metadata accessor for UsoTask_requestLog_common_HealthLog();
            if (!swift_dynamicCast())
            {
              type metadata accessor for UsoTask_checkExistence_common_MedicationEvent();
              if (swift_dynamicCast())
                goto LABEL_76;
              type metadata accessor for UsoTask_create_common_MedicationEvent();
              if (swift_dynamicCast()
                || (type metadata accessor for UsoTask_snooze_common_MedicationEvent(), swift_dynamicCast())
                || (type metadata accessor for UsoTask_checkExistence_common_MedicationSchedule(),
                    swift_dynamicCast())
                || (type metadata accessor for UsoTask_delete_common_MedicationSchedule(),
                    swift_dynamicCast())
                || (type metadata accessor for UsoTask_update_common_MedicationSchedule(),
                    swift_dynamicCast())
                || (type metadata accessor for UsoTask_create_common_MedicationSchedule(),
                    swift_dynamicCast())
                || (type metadata accessor for UsoTask_summarise_common_MedicationSchedule(),
                    swift_dynamicCast())
                || (type metadata accessor for UsoTask_request_common_MedicationSchedule(),
                    swift_dynamicCast()))
              {
LABEL_76:
                swift_release();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
                outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for Any?);
                v7 = 1;
                return v7 & 1;
              }
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
              goto LABEL_81;
            }
          }
        }
      }
    }
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for Any?);
  v5 = specialized static HealthNLUtils.extractHealthLog(from:)();
  if (!v5)
  {
LABEL_82:
    v7 = 0;
    return v7 & 1;
  }
  v6 = v5;
  if ((specialized static HealthNLUtils.hasHealthDataType(from:)(v5) & 1) != 0)
  {
    swift_release();
    v7 = 1;
    return v7 & 1;
  }
  if (!MEMORY[0x1B5E40348]() || (v8 = MEMORY[0x1B5E40444](), swift_release(), !v8))
  {
    swift_release();
    goto LABEL_82;
  }
  if (v8 >> 62)
    goto LABEL_79;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_15:
  v10 = MEMORY[0x1E0DEE9D8];
  if (v9)
  {
    v11 = 0;
    v51 = v8 & 0xC000000000000001;
    v46 = v6;
    v47 = v8 + 32;
    v53 = (char *)MEMORY[0x1E0DEE9D8];
    v54 = v0;
    v45 = v8;
    v44 = v9;
    while (1)
    {
      if (v51)
      {
        v12 = MEMORY[0x1B5E43B94](v11, v8);
        v13 = __OFADD__(v11++, 1);
        if (v13)
        {
LABEL_78:
          __break(1u);
LABEL_79:
          swift_bridgeObjectRetain();
          v9 = _CocoaArrayWrapper.endIndex.getter();
          goto LABEL_15;
        }
      }
      else
      {
        v12 = swift_retain();
        v13 = __OFADD__(v11++, 1);
        if (v13)
          goto LABEL_78;
      }
      v14 = v12;
      v15 = dispatch thunk of CodeGenListEntry.entry.getter();
      v16 = v58[0];
      if (!v58[0])
        goto LABEL_54;
      v52 = v14;
      v17 = MEMORY[0x1B5E408E8](v15);
      if (!v17)
        break;
      v18 = v17;
      v49 = v16;
      v50 = v11;
      v19 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
      if (v19)
      {
        v20 = v19;
        v48 = v18;
        v57[0] = v10;
        v21 = v10;
        v22 = *(_QWORD *)(v19 + 16);
        if (v22)
        {
          v23 = 0;
          while (1)
          {
            if (v23 >= *(_QWORD *)(v20 + 16))
            {
              __break(1u);
              goto LABEL_78;
            }
            v24 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
            v8 = *(_QWORD *)(v1 + 72);
            (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v56, v20 + v24 + v8 * v23, v0);
            v25 = UsoIdentifier.namespace.getter();
            v27 = v26 ? v25 : 0;
            v28 = v26 ? v26 : 0xE000000000000000;
            if (v27 == 0x6D6572757361656DLL && v28 == 0xEF74696E55746E65
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
              || v27 == 0x6E5568746C616568 && v28 == 0xEA00000000007469
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
              || *(_QWORD *)"medicationUnit" == v27 && *(_QWORD *)"onUnit" == v28)
            {
              break;
            }
            v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v6 & 1) != 0)
              goto LABEL_43;
            (*(void (**)(char *, uint64_t))(v1 + 8))(v56, v0);
LABEL_48:
            if (v22 == ++v23)
            {
              v38 = v57[0];
              v8 = v45;
              v6 = v46;
              v9 = v44;
              v10 = MEMORY[0x1E0DEE9D8];
              goto LABEL_62;
            }
          }
          swift_bridgeObjectRelease();
LABEL_43:
          v29 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
          v29(v55, v56, v0);
          v30 = v57[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1);
            v30 = v57[0];
          }
          v32 = *(_QWORD *)(v30 + 16);
          v31 = *(_QWORD *)(v30 + 24);
          v6 = v32 + 1;
          if (v32 >= v31 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
            v30 = v57[0];
          }
          *(_QWORD *)(v30 + 16) = v6;
          v33 = v30 + v24 + v32 * v8;
          v0 = v54;
          v29((char *)v33, v55, v54);
          v57[0] = v30;
          goto LABEL_48;
        }
        v38 = v21;
        v10 = v21;
LABEL_62:
        swift_bridgeObjectRelease();
        swift_arrayDestroy();
        v40 = *(_QWORD *)(v38 + 16);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v34 = v40 != 0;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v11 = v50;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
LABEL_63:
          v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v53 + 2) + 1, 1, v53);
      }
      else
      {
        swift_arrayDestroy();
        swift_release();
        swift_release();
        swift_release();
        v39 = swift_isUniquelyReferenced_nonNull_native();
        v34 = 0;
        v11 = v50;
        if ((v39 & 1) == 0)
          goto LABEL_63;
      }
LABEL_55:
      v36 = *((_QWORD *)v53 + 2);
      v35 = *((_QWORD *)v53 + 3);
      if (v36 >= v35 >> 1)
        v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, v53);
      v37 = v53;
      *((_QWORD *)v53 + 2) = v36 + 1;
      v37[v36 + 32] = v34;
      if (v11 == v9)
        goto LABEL_66;
    }
    swift_release();
LABEL_54:
    swift_release();
    v34 = 0;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_63;
    goto LABEL_55;
  }
  v53 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_66:
  swift_bridgeObjectRelease_n();
  v7 = specialized Sequence<>.contains(_:)(1, (uint64_t)v53);
  swift_bridgeObjectRelease();
  swift_release();
  return v7 & 1;
}

ValueMetadata *type metadata accessor for HealthNLUtils()
{
  return &type metadata for HealthNLUtils;
}

ValueMetadata *type metadata accessor for HealthAffinityScorer()
{
  return &type metadata for HealthAffinityScorer;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v9 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      for (i = 4; ; ++i)
      {
        v4 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1B5E43B94](i - 4, a1);
          v5 = i - 3;
          if (__OFADD__(v4, 1))
            goto LABEL_15;
        }
        else
        {
          swift_retain();
          v5 = i - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
        }
        swift_getKeyPath();
        swift_retain();
        swift_getAtKeyPath();
        swift_release();
        v6 = swift_release_n();
        if (v8)
        {
          MEMORY[0x1B5E43498](v6);
          if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v5 == v2)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v9 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      for (i = 4; ; ++i)
      {
        v4 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1B5E43B94](i - 4, a1);
          v5 = i - 3;
          if (__OFADD__(v4, 1))
            goto LABEL_15;
        }
        else
        {
          swift_retain();
          v5 = i - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
        }
        swift_getKeyPath();
        swift_retain();
        swift_getAtKeyPath();
        swift_release();
        v6 = swift_release_n();
        if (v8)
        {
          MEMORY[0x1B5E43498](v6);
          if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v5 == v2)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

SiriKitRuntime::HomeAutomationAffinityScorer __swiftcall HomeAutomationAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::HomeAutomationAffinityScorer result;

  v0 = (void *)0x80000001B4EF6A50;
  v1 = 0xD00000000000002FLL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t HomeAutomationAffinityScorer.HomeAutomationNamespace.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4DEEF58
                                                                     + 4 * asc_1B4EEAEF0[a1]))(0xD000000000000018, 0x80000001B4EF3430);
}

uint64_t sub_1B4DEEF58()
{
  uint64_t v0;

  return v0 + 2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HomeAutomationAffinityScorer.HomeAutomationNamespace(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = HomeAutomationAffinityScorer.HomeAutomationNamespace.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == HomeAutomationAffinityScorer.HomeAutomationNamespace.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance HomeAutomationAffinityScorer.HomeAutomationNamespace()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  HomeAutomationAffinityScorer.HomeAutomationNamespace.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HomeAutomationAffinityScorer.HomeAutomationNamespace()
{
  unsigned __int8 *v0;

  HomeAutomationAffinityScorer.HomeAutomationNamespace.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HomeAutomationAffinityScorer.HomeAutomationNamespace()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  HomeAutomationAffinityScorer.HomeAutomationNamespace.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance HomeAutomationAffinityScorer.HomeAutomationNamespace@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized HomeAutomationAffinityScorer.HomeAutomationNamespace.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance HomeAutomationAffinityScorer.HomeAutomationNamespace@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = HomeAutomationAffinityScorer.HomeAutomationNamespace.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t one-time initialization function for kHAGeneralNamespaceMatches()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kHAGeneralNamespaceMatches);
  result = swift_arrayDestroy();
  static HomeAutomationAffinityScorer.kHAGeneralNamespaceMatches = v0;
  return result;
}

uint64_t *HomeAutomationAffinityScorer.kHAGeneralNamespaceMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kHAGeneralNamespaceMatches != -1)
    swift_once();
  return &static HomeAutomationAffinityScorer.kHAGeneralNamespaceMatches;
}

uint64_t static HomeAutomationAffinityScorer.kHAGeneralNamespaceMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kHAGeneralNamespaceMatches);
}

uint64_t one-time initialization function for kHAExactNamespaceMatches()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kHAExactNamespaceMatches);
  result = swift_arrayDestroy();
  static HomeAutomationAffinityScorer.kHAExactNamespaceMatches = v0;
  return result;
}

{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kHAExactNamespaceMatches);
  result = swift_arrayDestroy();
  static SystemCommandsAffinityScorer.kHAExactNamespaceMatches = v0;
  return result;
}

uint64_t *HomeAutomationAffinityScorer.kHAExactNamespaceMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kHAExactNamespaceMatches != -1)
    swift_once();
  return &static HomeAutomationAffinityScorer.kHAExactNamespaceMatches;
}

uint64_t static HomeAutomationAffinityScorer.kHAExactNamespaceMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kHAExactNamespaceMatches);
}

void *HomeAutomationAffinityScorer.kHAPlaceHintMatch.unsafeMutableAddressor()
{
  return &static HomeAutomationAffinityScorer.kHAPlaceHintMatch;
}

unint64_t static HomeAutomationAffinityScorer.kHAPlaceHintMatch.getter()
{
  return 0xD000000000000017;
}

uint64_t *HomeAutomationAffinityScorer.kAppBundleIdMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kAppBundleIdMatches != -1)
    swift_once();
  return &static HomeAutomationAffinityScorer.kAppBundleIdMatches;
}

uint64_t static HomeAutomationAffinityScorer.kAppBundleIdMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kAppBundleIdMatches);
}

void *HomeAutomationAffinityScorer.unspecifiedDevice.unsafeMutableAddressor()
{
  return &static HomeAutomationAffinityScorer.unspecifiedDevice;
}

unint64_t static HomeAutomationAffinityScorer.unspecifiedDevice.getter()
{
  return 0xD000000000000011;
}

uint64_t one-time initialization function for kSummariseSettingStrictValues()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kSummariseSettingStrictValues);
  result = swift_arrayDestroy();
  static HomeAutomationAffinityScorer.kSummariseSettingStrictValues = v0;
  return result;
}

uint64_t *HomeAutomationAffinityScorer.kSummariseSettingStrictValues.unsafeMutableAddressor()
{
  if (one-time initialization token for kSummariseSettingStrictValues != -1)
    swift_once();
  return &static HomeAutomationAffinityScorer.kSummariseSettingStrictValues;
}

uint64_t static HomeAutomationAffinityScorer.kSummariseSettingStrictValues.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kSummariseSettingStrictValues);
}

uint64_t one-time initialization function for kPauseOrResumeSettingStrictValues()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kPauseOrResumeSettingStrictValues);
  result = swift_arrayDestroy();
  static HomeAutomationAffinityScorer.kPauseOrResumeSettingStrictValues = v0;
  return result;
}

uint64_t *HomeAutomationAffinityScorer.kPauseOrResumeSettingStrictValues.unsafeMutableAddressor()
{
  if (one-time initialization token for kPauseOrResumeSettingStrictValues != -1)
    swift_once();
  return &static HomeAutomationAffinityScorer.kPauseOrResumeSettingStrictValues;
}

uint64_t static HomeAutomationAffinityScorer.kPauseOrResumeSettingStrictValues.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kPauseOrResumeSettingStrictValues);
}

uint64_t one-time initialization function for kHKEntityTypes()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kHKEntityTypes);
  result = swift_arrayDestroy();
  static HomeAutomationAffinityScorer.kHKEntityTypes = v0;
  return result;
}

{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kHKEntityTypes);
  result = swift_arrayDestroy();
  static SystemCommandsAffinityScorer.kHKEntityTypes = v0;
  return result;
}

uint64_t *HomeAutomationAffinityScorer.kHKEntityTypes.unsafeMutableAddressor()
{
  if (one-time initialization token for kHKEntityTypes != -1)
    swift_once();
  return &static HomeAutomationAffinityScorer.kHKEntityTypes;
}

uint64_t static HomeAutomationAffinityScorer.kHKEntityTypes.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kHKEntityTypes);
}

uint64_t one-time initialization function for kLockRelatedValues()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kLockRelatedValues);
  result = swift_arrayDestroy();
  static HomeAutomationAffinityScorer.kLockRelatedValues = v0;
  return result;
}

uint64_t *HomeAutomationAffinityScorer.kLockRelatedValues.unsafeMutableAddressor()
{
  if (one-time initialization token for kLockRelatedValues != -1)
    swift_once();
  return &static HomeAutomationAffinityScorer.kLockRelatedValues;
}

uint64_t static HomeAutomationAffinityScorer.kLockRelatedValues.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kLockRelatedValues);
}

uint64_t HomeAutomationAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.haSpanGeneralMatch.getter(char a1)
{
  return a1 & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.haSpanGeneralMatch.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.haSpanGeneralMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.haSpanExactMatch.getter(unint64_t a1)
{
  return (a1 >> 8) & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.haSpanExactMatch.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.haSpanExactMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.haSpanMatch.getter(unint64_t a1)
{
  return (a1 >> 16) & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.haSpanMatch.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.haSpanMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.homeKitEntityTypeExactMatch.getter(unint64_t a1)
{
  return (a1 >> 24) & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.homeKitEntityTypeExactMatch.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 3) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.homeKitEntityTypeExactMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.homeKitEntityTypeFuzzyMatch.getter(unint64_t a1)
{
  return HIDWORD(a1) & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.homeKitEntityTypeFuzzyMatch.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.homeKitEntityTypeFuzzyMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.appBundleIdMatch.getter(unint64_t a1)
{
  return (a1 >> 40) & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.appBundleIdMatch.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 5) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.appBundleIdMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.placeHintGeneralMatch.getter(unint64_t a1)
{
  return HIWORD(a1) & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.placeHintGeneralMatch.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 6) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.placeHintGeneralMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.visionOSExceptionWordMatch.getter(unint64_t a1)
{
  return HIBYTE(a1) & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.visionOSExceptionWordMatch.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 7) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.visionOSExceptionWordMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.iOSLockRequest.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.iOSLockRequest.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.iOSLockRequest.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

SiriKitRuntime::HomeAutomationAffinityScorer::HAMatchConditions __swiftcall HomeAutomationAffinityScorer.HAMatchConditions.init(haSpanGeneralMatch:haSpanExactMatch:haSpanMatch:homeKitEntityTypeExactMatch:homeKitEntityTypeFuzzyMatch:appBundleIdMatch:placeHintGeneralMatch:visionOSExceptionWordMatch:iOSLockRequest:)(Swift::Bool haSpanGeneralMatch, Swift::Bool haSpanExactMatch, Swift::Bool haSpanMatch, Swift::Bool homeKitEntityTypeExactMatch, Swift::Bool homeKitEntityTypeFuzzyMatch, Swift::Bool appBundleIdMatch, Swift::Bool placeHintGeneralMatch, Swift::Bool visionOSExceptionWordMatch, Swift::Bool iOSLockRequest)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Bool v20;
  SiriKitRuntime::HomeAutomationAffinityScorer::HAMatchConditions result;

  v9 = 256;
  if (!haSpanExactMatch)
    v9 = 0;
  v10 = v9 & 0xFFFFFFFFFFFFFFFELL | haSpanGeneralMatch;
  v11 = 0x10000;
  if (!haSpanMatch)
    v11 = 0;
  v12 = 0x1000000;
  if (!homeKitEntityTypeExactMatch)
    v12 = 0;
  v13 = v10 | v11 | v12;
  v14 = 0x100000000;
  if (!homeKitEntityTypeFuzzyMatch)
    v14 = 0;
  v15 = 0x10000000000;
  if (!appBundleIdMatch)
    v15 = 0;
  v16 = 0x1000000000000;
  if (!placeHintGeneralMatch)
    v16 = 0;
  v17 = v14 | v15;
  v18 = 0x100000000000000;
  if (!visionOSExceptionWordMatch)
    v18 = 0;
  v19 = v13 | v17 | v16 | v18;
  v20 = iOSLockRequest;
  result.haSpanGeneralMatch = v19;
  result.haSpanExactMatch = BYTE1(v19);
  result.haSpanMatch = BYTE2(v19);
  result.homeKitEntityTypeExactMatch = BYTE3(v19);
  result.homeKitEntityTypeFuzzyMatch = BYTE4(v19);
  result.appBundleIdMatch = BYTE5(v19);
  result.placeHintGeneralMatch = BYTE6(v19);
  result.visionOSExceptionWordMatch = HIBYTE(v19);
  result.iOSLockRequest = v20;
  return result;
}

const char *HomeAutomationAffinityScorer.visionOSExceptionWord.unsafeMutableAddressor()
{
  return "window";
}

uint64_t static HomeAutomationAffinityScorer.visionOSExceptionWord.getter()
{
  return 0x776F646E6977;
}

const char *HomeAutomationAffinityScorer.answerProductIdentifierNamespace.unsafeMutableAddressor()
{
  return "answerProduct";
}

uint64_t static HomeAutomationAffinityScorer.answerProductIdentifierNamespace.getter()
{
  return 0x7250726577736E61;
}

const char *HomeAutomationAffinityScorer.visionOSUnsupportedPropertyValue.unsafeMutableAddressor()
{
  return "vision_pro";
}

uint64_t static HomeAutomationAffinityScorer.visionOSUnsupportedPropertyValue.getter()
{
  return 0x705F6E6F69736976;
}

BOOL UsoEntitySpan.anyPropertiesKeyMatchAny(value:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v22[2];
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;

  v2 = type metadata accessor for SpanProperty();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = UsoEntitySpan.properties.getter();
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v23 = a1;
    v26 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    v8 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v22[1] = v6;
    v9 = v6 + v8;
    v10 = *(_QWORD *)(v3 + 72);
    v24 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v25 = v10;
    v11 = v3;
    do
    {
      v24(v5, v9, v2);
      v12 = SpanProperty.key.getter();
      v14 = v13;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v15 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v26;
      }
      v17 = *(_QWORD *)(v15 + 16);
      v16 = *(_QWORD *)(v15 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v15 = v26;
      }
      *(_QWORD *)(v15 + 16) = v17 + 1;
      v18 = v15 + 16 * v17;
      *(_QWORD *)(v18 + 32) = v12;
      *(_QWORD *)(v18 + 40) = v14;
      v9 += v25;
      --v7;
      v3 = v11;
    }
    while (v7);
    swift_bridgeObjectRelease();
    a1 = v23;
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x1E0DEE9D8];
  }
  v19 = specialized Set.init<A>(_:)(v15);
  swift_bridgeObjectRelease();
  v20 = specialized Set.isDisjoint(with:)(v19, a1);
  swift_bridgeObjectRelease();
  return (v20 & 1) == 0;
}

BOOL UsoEntitySpan.anyPropertiesValueMatchAny(value:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(char *, unint64_t, uint64_t);
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for SpanProperty();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = UsoEntitySpan.properties.getter();
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v20 = v6;
    v21 = a1;
    v8 = v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v23 = *(_QWORD *)(v3 + 72);
    v9 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v22 = v3;
    v9(v5, v8, v2);
    while (1)
    {
      v12 = SpanProperty.valueString.getter();
      v14 = v13;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      if (v14)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
        v16 = v10[2];
        v15 = v10[3];
        if (v16 >= v15 >> 1)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v10);
        v10[2] = v16 + 1;
        v11 = &v10[2 * v16];
        v11[4] = v12;
        v11[5] = v14;
        v3 = v22;
      }
      v8 += v23;
      if (!--v7)
        break;
      v9(v5, v8, v2);
    }
    swift_bridgeObjectRelease();
    a1 = v21;
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v17 = specialized Set.init<A>(_:)((uint64_t)v10);
  swift_bridgeObjectRelease();
  v18 = specialized Set.isDisjoint(with:)(v17, a1);
  swift_bridgeObjectRelease();
  return (v18 & 1) == 0;
}

uint64_t static SpanMatchAccuracy.from(matchInfo:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t matched;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  void (*v13)(char *, uint64_t);
  uint64_t result;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  matched = type metadata accessor for MatchInfo();
  v5 = *(_QWORD *)(matched - 8);
  MEMORY[0x1E0C80A78](matched);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MatchInfo.MatchSignals();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static MatchInfo.MatchSignals.partialMatch.getter();
  v12 = MatchInfo.hasMatchSignals(_:)();
  v13 = *(void (**)(char *, uint64_t))(v9 + 8);
  v13(v11, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, matched);
  if ((v12 & 1) != 0)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, matched);
    v15 = 1;
  }
  else
  {
    static MatchInfo.MatchSignals.approximateMatch.getter();
    v16 = MatchInfo.hasMatchSignals(_:)();
    v13(v11, v8);
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, matched);
    if ((v16 & 1) != 0)
    {
      v15 = 1;
    }
    else
    {
      static MatchInfo.MatchSignals.aliasMatch.getter();
      v17 = MatchInfo.hasMatchSignals(_:)();
      result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v8);
      if ((v17 & 1) != 0)
        v15 = 3;
      else
        v15 = 0;
    }
  }
  *a2 = v15;
  return result;
}

uint64_t SpanMatchAccuracy.rawValue.getter()
{
  unsigned __int8 *v0;

  return 4 - *v0;
}

uint64_t UsoEntitySpan.anyPropertiesKeyAndValueMatchAny(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a3;
  v5 = type metadata accessor for SpanProperty();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = UsoEntitySpan.properties.getter();
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v11 = *(unsigned __int8 *)(v6 + 80);
    v21 = v9;
    v12 = v9 + ((v11 + 32) & ~v11);
    v13 = *(_QWORD *)(v6 + 72);
    do
    {
      if (SpanProperty.key.getter() == a1 && v14 == a2)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v12, v5);
      }
      else
      {
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v12, v5);
        if ((v15 & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          goto LABEL_4;
        }
      }
      v16 = SpanProperty.valueString.getter();
      if (v17)
      {
        v18 = v17;
      }
      else
      {
        v16 = 0;
        v18 = 0xE000000000000000;
      }
      v19 = specialized Set.contains(_:)(v16, v18, v22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v19 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
LABEL_4:
      v12 += v13;
      --v10;
    }
    while (v10);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t closure #1 in HomeAutomationAffinityScorer.isOverrideScore(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t inited;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(char *, unint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  unint64_t v55;
  unint64_t v56;
  Swift::Int v57;
  uint64_t v58;
  Swift::Int *v59;
  Swift::Int v60;
  Swift::Int v61;
  char v62;
  _QWORD v63[2];
  __int128 v64;
  void (*v65)(char *, unint64_t, uint64_t);
  uint64_t v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  Swift::Int v86;
  uint64_t v87;

  v82 = a3;
  v72 = a2;
  v5 = type metadata accessor for SpanProperty();
  v6 = *(_QWORD *)(v5 - 8);
  v84 = v5;
  v85 = v6;
  MEMORY[0x1E0C80A78](v5);
  v83 = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for IdentifierNamespace();
  v74 = *(_QWORD *)(v8 - 8);
  v75 = v8;
  MEMORY[0x1E0C80A78](v8);
  v73 = (char *)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for UsoEntitySpan();
  v76 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80);
  v81 = (char *)v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for RRCandidate();
  v79 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77);
  v78 = (char *)v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for RREntity();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v63 - v17;
  RRCandidate.entity.getter();
  v19 = RREntity.appBundleId.getter();
  v21 = v20;
  v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v18, v12);
  if (v19 == 0xD00000000000001CLL && v21 == 0x80000001B4EFD900)
  {
    swift_bridgeObjectRelease();
    v24 = v78;
    v23 = v79;
    v25 = v77;
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v78, a1, v77);
LABEL_5:
    (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v25);
    return 1;
  }
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v24 = v78;
  v23 = v79;
  v25 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v78, a1, v77);
  if ((v26 & 1) != 0)
    goto LABEL_5;
  RRCandidate.entity.getter();
  RREntity.usoEntity.getter();
  v22(v16, v12);
  v29 = UsoEntity.attributes.getter();
  swift_release();
  if (!*(_QWORD *)(v29 + 16) || (v30 = specialized __RawDictionaryStorage.find<A>(_:)(v72, v82), (v31 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v78, v77);
    return 0;
  }
  v32 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v30);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  if ((v32 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v32);
    v33 = v78;
    goto LABEL_12;
  }
  v33 = v78;
  if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_12:
    swift_bridgeObjectRelease();
    v34 = dispatch thunk of UsoValue.getEntitySpans()();
    swift_release();
    v69 = *(_QWORD *)(v34 + 16);
    if (v69)
    {
      v68 = v34 + ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
      v67 = *MEMORY[0x1E0DA0F58];
      v66 = *(_QWORD *)(v76 + 72);
      v65 = *(void (**)(char *, unint64_t, uint64_t))(v76 + 16);
      v63[0] = v34;
      swift_bridgeObjectRetain();
      v35 = 0;
      v64 = xmmword_1B4EE3F50;
      v63[1] = v3;
      while (1)
      {
        v72 = v35;
        v65(v81, v68 + v66 * v35, v80);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v64;
        v37 = v73;
        v38 = v74;
        v39 = v75;
        (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v73, v67, v75);
        v40 = IdentifierNamespace.rawValue.getter();
        v42 = v41;
        (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v39);
        *(_QWORD *)(inited + 32) = v40;
        *(_QWORD *)(inited + 40) = v42;
        v43 = *(_QWORD *)(inited + 16) ? specialized Set.init(_nonEmptyArrayLiteral:)(inited) : MEMORY[0x1E0DEE9E8];
        swift_setDeallocating();
        swift_arrayDestroy();
        v44 = UsoEntitySpan.properties.getter();
        v45 = *(_QWORD *)(v44 + 16);
        if (v45)
        {
          v71 = v43;
          v86 = MEMORY[0x1E0DEE9D8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v45, 0);
          v46 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
          v70 = v44;
          v47 = v44 + v46;
          v82 = *(_QWORD *)(v85 + 72);
          v48 = *(void (**)(char *, unint64_t, uint64_t))(v85 + 16);
          do
          {
            v49 = v83;
            v50 = v84;
            v48(v83, v47, v84);
            v51 = SpanProperty.key.getter();
            v53 = v52;
            (*(void (**)(char *, uint64_t))(v85 + 8))(v49, v50);
            v54 = v86;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v54 + 16) + 1, 1);
              v54 = v86;
            }
            v56 = *(_QWORD *)(v54 + 16);
            v55 = *(_QWORD *)(v54 + 24);
            if (v56 >= v55 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
              v54 = v86;
            }
            *(_QWORD *)(v54 + 16) = v56 + 1;
            v57 = v54 + 16 * v56;
            *(_QWORD *)(v57 + 32) = v51;
            *(_QWORD *)(v57 + 40) = v53;
            v47 += v82;
            --v45;
          }
          while (v45);
          swift_bridgeObjectRelease();
          v23 = v79;
          v43 = v71;
        }
        else
        {
          swift_bridgeObjectRelease();
          v54 = MEMORY[0x1E0DEE9D8];
        }
        v87 = Set.init(minimumCapacity:)();
        v58 = *(_QWORD *)(v54 + 16);
        if (v58)
        {
          v59 = (Swift::Int *)(v54 + 40);
          do
          {
            v61 = *(v59 - 1);
            v60 = *v59;
            swift_bridgeObjectRetain();
            specialized Set._Variant.insert(_:)(&v86, v61, v60);
            swift_bridgeObjectRelease();
            v59 += 2;
            --v58;
          }
          while (v58);
        }
        swift_bridgeObjectRelease();
        v62 = specialized Set.isDisjoint(with:)(v87, v43);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v76 + 8))(v81, v80);
        if ((v62 & 1) == 0)
          break;
        v35 = v72 + 1;
        if (v72 + 1 == v69)
        {
          swift_bridgeObjectRelease_n();
          v27 = 0;
          goto LABEL_35;
        }
      }
      swift_bridgeObjectRelease_n();
      v27 = 1;
LABEL_35:
      v33 = v78;
    }
    else
    {
      swift_bridgeObjectRelease();
      v27 = 0;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v33, v77);
    return v27;
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall UsoEntitySpan.hasNLFuzzyMatch()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Bool v15;
  void (*v16)(char *, uint64_t);
  _QWORD v18[2];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PayloadAttachmentInfo.AttachmentType();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v18 - v11;
  UsoEntitySpan.payloadAttachmentInfo.getter();
  v13 = type metadata accessor for PayloadAttachmentInfo();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v2, 1, v13) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for PayloadAttachmentInfo?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  else
  {
    PayloadAttachmentInfo.attachmentType.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v2, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
      (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E0DA1030], v6);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1048], MEMORY[0x1E0DA1060]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      v15 = v18[1] == v18[0];
      v16 = *(void (**)(char *, uint64_t))(v7 + 8);
      v16(v10, v6);
      v16(v12, v6);
      return v15;
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  return 0;
}

Swift::Bool __swiftcall UsoEntitySpan.hasVocabFuzzyMatch()()
{
  uint64_t matched;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char v17;
  char v18;
  void (*v19)(char *, uint64_t);
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, uint64_t);
  char v22;
  uint64_t v24;
  uint64_t v25;

  matched = type metadata accessor for MatchInfo.MatchSignals();
  v1 = *(_QWORD *)(matched - 8);
  MEMORY[0x1E0C80A78](matched);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MatchInfo?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MatchInfo();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v24 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v24 - v15;
  UsoEntitySpan.matchInfo.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for MatchInfo?);
    v17 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v6, v7);
    static MatchInfo.MatchSignals.approximateMatch.getter();
    v18 = MatchInfo.hasMatchSignals(_:)();
    v19 = *(void (**)(char *, uint64_t))(v1 + 8);
    v25 = matched;
    v19(v3, matched);
    v20 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v20(v14, v16, v7);
    if ((v18 & 1) != 0)
    {
      v21 = *(void (**)(char *, uint64_t))(v8 + 8);
      v21(v14, v7);
      v20(v11, v16, v7);
    }
    else
    {
      static MatchInfo.MatchSignals.partialMatch.getter();
      v22 = MatchInfo.hasMatchSignals(_:)();
      v19(v3, v25);
      v21 = *(void (**)(char *, uint64_t))(v8 + 8);
      v21(v14, v7);
      v20(v11, v16, v7);
      if ((v22 & 1) == 0)
      {
        static MatchInfo.MatchSignals.aliasMatch.getter();
        v17 = MatchInfo.hasMatchSignals(_:)();
        v19(v3, v25);
        v21(v11, v7);
        v21(v16, v7);
        return v17 & 1;
      }
    }
    v21(v11, v7);
    v21(v16, v7);
    v17 = 1;
  }
  return v17 & 1;
}

Swift::Bool __swiftcall UsoEntitySpan.hasExactMatch()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  char v49;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t matched;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v0 = type metadata accessor for PayloadAttachmentInfo.AttachmentType();
  v67 = *(_QWORD *)(v0 - 8);
  v68 = v0;
  MEMORY[0x1E0C80A78](v0);
  v61 = (char *)&v56 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?));
  MEMORY[0x1E0C80A78](v66);
  v63 = (uint64_t)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  matched = type metadata accessor for MatchInfo.MatchSignals();
  v69 = *(_QWORD *)(matched - 8);
  MEMORY[0x1E0C80A78](matched);
  v64 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v56 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v56 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v56 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MatchInfo?);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for MatchInfo();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  UsoEntitySpan.matchInfo.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    v26 = &demangling cache variable for type metadata for MatchInfo?;
    v27 = (uint64_t)v21;
LABEL_3:
    outlined destroy of ReferenceResolutionClientProtocol?(v27, v26);
LABEL_12:
    v49 = 0;
    return v49 & 1;
  }
  v62 = v13;
  v59 = v18;
  v60 = v16;
  v57 = v10;
  v28 = v25;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v25, v21, v22);
  UsoEntitySpan.payloadAttachmentInfo.getter();
  v29 = type metadata accessor for PayloadAttachmentInfo();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48))(v6, 1, v29);
  v32 = v22;
  v58 = v23;
  if (v31 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for PayloadAttachmentInfo?);
    v34 = v67;
    v33 = v68;
    v35 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56))(v59, 1, 1, v68);
  }
  else
  {
    v35 = (uint64_t)v59;
    PayloadAttachmentInfo.attachmentType.getter();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v29);
    v34 = v67;
    v33 = v68;
  }
  v36 = v28;
  v37 = (uint64_t)v62;
  v39 = matched;
  v38 = v66;
  v40 = v64;
  static MatchInfo.MatchSignals.exactMatch.getter();
  v41 = MatchInfo.hasMatchSignals(_:)();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v40, v39);
  v42 = (uint64_t)v60;
  outlined init with copy of ReferenceResolutionClientProtocol?(v35, (uint64_t)v60, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  if ((v41 & 1) == 0)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v42, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    outlined destroy of ReferenceResolutionClientProtocol?(v35, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v32);
    goto LABEL_12;
  }
  v43 = v36;
  v56 = v32;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v34 + 104))(v37, *MEMORY[0x1E0DA1028], v33);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v33);
  v44 = *(int *)(v38 + 48);
  v45 = v63;
  v46 = v63 + v44;
  outlined init with copy of ReferenceResolutionClientProtocol?(v42, v63, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v37, v46, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  v47 = v37;
  v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  if (v48(v45, 1, v33) != 1)
  {
    v51 = (uint64_t)v57;
    outlined init with copy of ReferenceResolutionClientProtocol?(v45, (uint64_t)v57, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    v52 = v48(v46, 1, v33);
    v53 = v56;
    if (v52 != 1)
    {
      v54 = v61;
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v61, v46, v33);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1048], MEMORY[0x1E0DA1058]);
      v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      v55 = *(void (**)(char *, uint64_t))(v34 + 8);
      v55(v54, v33);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v62, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      outlined destroy of ReferenceResolutionClientProtocol?(v42, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      outlined destroy of ReferenceResolutionClientProtocol?(v35, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v43, v56);
      v55(v57, v33);
      outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      return v49 & 1;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v62, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    outlined destroy of ReferenceResolutionClientProtocol?(v42, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    outlined destroy of ReferenceResolutionClientProtocol?(v35, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v43, v53);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v51, v33);
    goto LABEL_16;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v47, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  outlined destroy of ReferenceResolutionClientProtocol?(v42, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  outlined destroy of ReferenceResolutionClientProtocol?(v35, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v56);
  if (v48(v46, 1, v33) != 1)
  {
LABEL_16:
    v26 = &demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?);
    v27 = v45;
    goto LABEL_3;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  v49 = 1;
  return v49 & 1;
}

Swift::Bool __swiftcall UsoEntitySpan.anyPropertiesKeyMatchAny(value:)(Swift::String value)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;

  object = value._object;
  countAndFlagsBits = value._countAndFlagsBits;
  v3 = type metadata accessor for SpanProperty();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = UsoEntitySpan.properties.getter();
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v24 = countAndFlagsBits;
    v25 = object;
    v28 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v9 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v23 = v7;
    v10 = v7 + v9;
    v11 = *(_QWORD *)(v4 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    v27 = v11;
    v12 = v4;
    do
    {
      v26(v6, v10, v3);
      v13 = SpanProperty.key.getter();
      v15 = v14;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v16 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v28;
      }
      v18 = *(_QWORD *)(v16 + 16);
      v17 = *(_QWORD *)(v16 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        v16 = v28;
      }
      *(_QWORD *)(v16 + 16) = v18 + 1;
      v19 = v16 + 16 * v18;
      *(_QWORD *)(v19 + 32) = v13;
      *(_QWORD *)(v19 + 40) = v15;
      v10 += v27;
      --v8;
      v4 = v12;
    }
    while (v8);
    swift_bridgeObjectRelease();
    countAndFlagsBits = v24;
    object = v25;
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = MEMORY[0x1E0DEE9D8];
  }
  v20 = specialized Set.init<A>(_:)(v16);
  swift_bridgeObjectRelease();
  v21 = specialized Set.contains(_:)(countAndFlagsBits, (uint64_t)object, v20);
  swift_bridgeObjectRelease();
  return v21 & 1;
}

uint64_t specialized Set.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  unint64_t i;
  uint64_t v28;
  _QWORD *v29;
  BOOL v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 1;
  if (v2 >= v3)
    v4 = a1;
  else
    v4 = a2;
  v31 = v4 + 56;
  if (v2 >= v3)
    v5 = a2;
  else
    v5 = a1;
  v6 = 1 << *(_BYTE *)(v4 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v4 + 56);
  v32 = (unint64_t)(v6 + 63) >> 6;
  v33 = v4;
  v9 = v5 + 56;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    while (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v11 << 6);
      if (*(_QWORD *)(v5 + 16))
        goto LABEL_29;
    }
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v14 >= v32)
      goto LABEL_44;
    v15 = *(_QWORD *)(v31 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v32)
        goto LABEL_44;
      v15 = *(_QWORD *)(v31 + 8 * v11);
      if (!v15)
        break;
    }
LABEL_28:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
    if (*(_QWORD *)(v5 + 16))
    {
LABEL_29:
      v17 = (uint64_t *)(*(_QWORD *)(v33 + 48) + 16 * v13);
      v19 = *v17;
      v18 = v17[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v20 = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v5 + 32);
      v22 = v20 & ~v21;
      if (((*(_QWORD *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
      {
        v23 = *(_QWORD *)(v5 + 48);
        v24 = (_QWORD *)(v23 + 16 * v22);
        v25 = *v24 == v19 && v24[1] == v18;
        if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_43:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          return 0;
        }
        v26 = ~v21;
        for (i = v22 + 1; ; i = v28 + 1)
        {
          v28 = i & v26;
          if (((*(_QWORD *)(v9 + (((i & v26) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v26)) & 1) == 0)
            break;
          v29 = (_QWORD *)(v23 + 16 * v28);
          v30 = *v29 == v19 && v29[1] == v18;
          if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_43;
        }
      }
      result = swift_bridgeObjectRelease();
    }
  }
  v16 = v14 + 2;
  if (v16 >= v32)
  {
LABEL_44:
    swift_release();
    swift_bridgeObjectRelease();
    return 1;
  }
  v15 = *(_QWORD *)(v31 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_28;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v32)
      goto LABEL_44;
    v15 = *(_QWORD *)(v31 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_28;
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t UsoEntitySpan.containsSubstring(in:substring:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  LOBYTE(a2) = specialized Sequence.contains(where:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  return a2 & 1;
}

Swift::Bool __swiftcall UsoEntitySpan.anyPropertiesValueContainAny(value:)(Swift::String value)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  object = value._object;
  countAndFlagsBits = value._countAndFlagsBits;
  v3 = type metadata accessor for SpanProperty();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = UsoEntitySpan.properties.getter();
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v23 = countAndFlagsBits;
    v24 = object;
    v9 = *(unsigned __int8 *)(v4 + 80);
    v22 = v7;
    v10 = v7 + ((v9 + 32) & ~v9);
    v26 = *(_QWORD *)(v4 + 72);
    v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v25 = v4;
    v11(v6, v10, v3);
    while (1)
    {
      v14 = SpanProperty.valueString.getter();
      v16 = v15;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      if (v16)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
        v18 = v12[2];
        v17 = v12[3];
        if (v18 >= v17 >> 1)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v12);
        v12[2] = v18 + 1;
        v13 = &v12[2 * v18];
        v13[4] = v14;
        v13[5] = v16;
        v4 = v25;
      }
      v10 += v26;
      if (!--v8)
        break;
      v11(v6, v10, v3);
    }
    swift_bridgeObjectRelease();
    countAndFlagsBits = v23;
    object = v24;
  }
  else
  {
    swift_bridgeObjectRelease();
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v19 = specialized Set.init<A>(_:)((uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v20 = specialized Sequence.contains(where:)(v19, countAndFlagsBits, (uint64_t)object);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v20 & 1;
}

Swift::Bool __swiftcall UsoEntitySpan.anyPropertiesMatch(key:value:)(Swift::String key, Swift::String value)
{
  uint64_t countAndFlagsBits;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  uint64_t v15;
  void *v16;
  char v17;
  _QWORD v19[2];
  uint64_t v20;
  void *object;

  object = value._object;
  countAndFlagsBits = value._countAndFlagsBits;
  v3 = key._object;
  v4 = key._countAndFlagsBits;
  v5 = type metadata accessor for SpanProperty();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = UsoEntitySpan.properties.getter();
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  v19[1] = v9;
  v20 = countAndFlagsBits;
  v11 = v9 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v12 = *(_QWORD *)(v6 + 72);
  while (1)
  {
    if (SpanProperty.key.getter() == v4 && v13 == v3)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v11, v5);
    }
    else
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v11, v5);
      if ((v14 & 1) == 0)
        goto LABEL_3;
    }
    v15 = SpanProperty.valueString.getter();
    if (!v16)
    {
LABEL_3:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      goto LABEL_4;
    }
    if (v15 == v20 && v16 == object)
      break;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
      goto LABEL_16;
LABEL_4:
    v11 += v12;
    if (!--v10)
      goto LABEL_14;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  return 1;
}

Swift::Bool __swiftcall UsoEntitySpan.isAttachmentFull()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  int v21;
  uint64_t *v22;
  char v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  char *v28;
  uint64_t v29;

  v0 = type metadata accessor for PayloadAttachmentInfo.AttachmentType();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v28 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?));
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v29 = (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v28 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v28 - v15;
  UsoEntitySpan.payloadAttachmentInfo.getter();
  v17 = type metadata accessor for PayloadAttachmentInfo();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v8, 1, v17) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for PayloadAttachmentInfo?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v16, 1, 1, v0);
  }
  else
  {
    PayloadAttachmentInfo.attachmentType.getter();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v17);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v14, *MEMORY[0x1E0DA1028], v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v14, 0, 1, v0);
  v19 = (uint64_t)&v5[*(int *)(v3 + 48)];
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t)v5, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v14, v19, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v20((uint64_t)v5, 1, v0) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    v21 = v20(v19, 1, v0);
    if (v21 == 1)
      v22 = &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?;
    else
      v22 = &demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?);
    if (v21 == 1)
      v23 = -1;
    else
      v23 = 0;
  }
  else
  {
    v24 = v29;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v5, v29, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    if (v20(v19, 1, v0) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v24, v0);
      v23 = 0;
      v22 = &demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?);
    }
    else
    {
      v25 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v28, v19, v0);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1048], MEMORY[0x1E0DA1058]);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      v26 = *(void (**)(char *, uint64_t))(v1 + 8);
      v26(v25, v0);
      v22 = &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      v26((char *)v24, v0);
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, v22);
  return v23 & 1;
}

uint64_t SpanMatchAccuracy.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4DF1DCC + 4 * byte_1B4EEAEFA[*v0]))(0x746365667265702ELL, 0xED0000686374614DLL);
}

uint64_t sub_1B4DF1DCC()
{
  return 0x6C6169747261702ELL;
}

unint64_t sub_1B4DF1DE0()
{
  return 0xD000000000000011;
}

uint64_t sub_1B4DF1DFC()
{
  return 0x614D7361696C612ELL;
}

BOOL static SpanMatchAccuracy.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return 4 - (unint64_t)*a1 < 4 - (unint64_t)*a2;
}

SiriKitRuntime::SpanMatchAccuracy_optional __swiftcall SpanMatchAccuracy.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if ((unint64_t)rawValue >= 5)
    v2 = 4;
  else
    v2 = 4 - rawValue;
  *v1 = v2;
  return (SiriKitRuntime::SpanMatchAccuracy_optional)rawValue;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SpanMatchAccuracy(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 == *a1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SpanMatchAccuracy()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(4 - v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SpanMatchAccuracy()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(4 - *v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpanMatchAccuracy()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(4 - v1);
  return Hasher._finalize()();
}

SiriKitRuntime::SpanMatchAccuracy_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SpanMatchAccuracy(Swift::Int *a1)
{
  return SpanMatchAccuracy.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SpanMatchAccuracy(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = 4 - *v1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpanMatchAccuracy()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4DF1F7C + 4 * byte_1B4EEAEFE[*v0]))(0x746365667265702ELL, 0xED0000686374614DLL);
}

uint64_t sub_1B4DF1F7C()
{
  return 0x6C6169747261702ELL;
}

unint64_t sub_1B4DF1F90()
{
  return 0xD000000000000011;
}

uint64_t sub_1B4DF1FAC()
{
  return 0x614D7361696C612ELL;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (Swift::Int *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for AppShortcutGeneralizedInvocation();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation and conformance AppShortcutGeneralizedInvocation, v10, MEMORY[0x1E0D9C498]);
  result = Set.init(minimumCapacity:)();
  v16 = result;
  if (v9)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v14(v6, v12, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v12 += v13;
      --v9;
    }
    while (v9);
    return v16;
  }
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 56);
  v26 = a1 + 56;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v27 = (unint64_t)(v9 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  while (v11)
  {
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v15 = v14 | (v13 << 6);
LABEL_5:
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v15);
    v17 = v16[1];
    v30 = *v16;
    v31 = v17;
    v28 = a2;
    v29 = v32;
    v18 = type metadata accessor for Locale();
    v19 = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v7, 1, 1, v18);
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol.range<A>(of:options:range:locale:)();
    v21 = v20;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Locale?);
    result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
      goto LABEL_24;
  }
  v22 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v22 >= v27)
    goto LABEL_23;
  v23 = *(_QWORD *)(v26 + 8 * v22);
  ++v13;
  if (v23)
    goto LABEL_22;
  v13 = v22 + 1;
  if (v22 + 1 >= v27)
    goto LABEL_23;
  v23 = *(_QWORD *)(v26 + 8 * v13);
  if (v23)
    goto LABEL_22;
  v13 = v22 + 2;
  if (v22 + 2 >= v27)
    goto LABEL_23;
  v23 = *(_QWORD *)(v26 + 8 * v13);
  if (v23)
    goto LABEL_22;
  v13 = v22 + 3;
  if (v22 + 3 >= v27)
    goto LABEL_23;
  v23 = *(_QWORD *)(v26 + 8 * v13);
  if (v23)
  {
LABEL_22:
    v11 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v13 << 6);
    goto LABEL_5;
  }
  v24 = v22 + 4;
  if (v24 >= v27)
  {
LABEL_23:
    v19 = 0;
LABEL_24:
    swift_release();
    return v19;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for LNSystemProtocol();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocol, MEMORY[0x1E0DEFCF8]);
  result = Set.init(minimumCapacity:)();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x1B5E43B94](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized HomeAutomationAffinityScorer.scorePauseOrResumeSetting(usoTask:usoEntitySpans:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t matched;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, const char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  void (*v50)(char *, uint64_t);
  char v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  char *v61;
  unint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  void (*v71)(char *, uint64_t);
  char *v72;
  void (*v73)(char *, uint64_t);
  char v74;
  char *v75;
  char v76;
  BOOL v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, unint64_t, uint64_t);
  char *v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  char *v100;
  char v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  Swift::Int v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  BOOL v111;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  uint8_t *v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  const char *v152;
  char *v153;
  void (*v154)(char *, const char *, uint64_t);
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD v159[3];
  uint64_t v160;

  v133 = a2;
  v135 = type metadata accessor for SpanProperty();
  v136 = *(_QWORD *)(v135 - 8);
  v2 = MEMORY[0x1E0C80A78](v135);
  v138 = (char *)&v129 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v129 - v4;
  matched = type metadata accessor for MatchInfo.MatchSignals();
  v150 = *(_QWORD *)(matched - 8);
  MEMORY[0x1E0C80A78](matched);
  v8 = (char *)&v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MatchInfo?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v129 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v148 = (char *)&v129 - v13;
  v147 = type metadata accessor for MatchInfo();
  v151 = *(_QWORD *)(v147 - 8);
  v14 = MEMORY[0x1E0C80A78](v147);
  v16 = (char *)&v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v145 = (char *)&v129 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v144 = (char *)&v129 - v20;
  MEMORY[0x1E0C80A78](v19);
  v155 = (unint64_t)&v129 - v21;
  v22 = type metadata accessor for UsoEntitySpan();
  v156 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v22);
  v131 = (char *)&v129 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v140 = (char *)&v129 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v141 = (char *)&v129 - v28;
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v129 - v29;
  static UsoTask_CodegenConverter.convert(task:)();
  if (v160)
  {
    type metadata accessor for UsoTask_pause_uso_NoEntity();
    if (swift_dynamicCast())
      v31 = v158;
    else
      v31 = 0;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v159, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v31 = 0;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  v137 = v5;
  if (!v160)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v159, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v36 = v133;
    v35 = (uint64_t)v148;
    if (v31)
    {
      v130 = 0;
      goto LABEL_16;
    }
    return 5;
  }
  type metadata accessor for UsoTask_resume_uso_NoEntity();
  v32 = swift_dynamicCast();
  v33 = v158;
  if (v32)
    v34 = v158;
  else
    v34 = 0;
  v35 = (uint64_t)v148;
  if (!v31)
  {
    v36 = v133;
    if (v34)
    {
      swift_retain();
      v130 = v33;
      goto LABEL_16;
    }
    return 5;
  }
  v130 = v34;
  v36 = v133;
LABEL_16:
  v139 = v16;
  v134 = v12;
  v149 = matched;
  v132 = v31;
  swift_retain();
  swift_release();
  v37 = *(_QWORD *)(v36 + 16);
  v38 = MEMORY[0x1E0DEE9D8];
  v157 = v22;
  v146 = v37;
  if (v37)
  {
    v39 = v36 + ((*(unsigned __int8 *)(v156 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80));
    v40 = *(void (**)(char *, const char *, uint64_t))(v156 + 72);
    v153 = *(char **)(v156 + 16);
    v154 = v40;
    swift_bridgeObjectRetain();
    v41 = (char *)MEMORY[0x1E0DEE9D8];
    v42 = v37;
    v143 = v8;
    v43 = v147;
    v44 = v151;
    v142 = v30;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v153)(v30, v39, v22);
      UsoEntitySpan.matchInfo.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v35, 1, v43) != 1)
        break;
      outlined destroy of ReferenceResolutionClientProtocol?(v35, &demangling cache variable for type metadata for MatchInfo?);
      (*(void (**)(char *, uint64_t))(v156 + 8))(v30, v22);
LABEL_19:
      v39 += (uint64_t)v154;
      if (!--v42)
      {
        v36 = v133;
        swift_bridgeObjectRelease();
        v38 = MEMORY[0x1E0DEE9D8];
        goto LABEL_36;
      }
    }
    v152 = v41;
    v45 = v155;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v44 + 32))(v155, v35, v43);
    static MatchInfo.MatchSignals.partialMatch.getter();
    v46 = MatchInfo.hasMatchSignals(_:)();
    v47 = v149;
    v48 = *(void (**)(char *, uint64_t))(v150 + 8);
    v48(v8, v149);
    v49 = v144;
    (*(void (**)(char *, unint64_t, uint64_t))(v44 + 16))(v144, v45, v43);
    if ((v46 & 1) != 0)
    {
      v50 = *(void (**)(char *, uint64_t))(v44 + 8);
      v50(v49, v43);
    }
    else
    {
      static MatchInfo.MatchSignals.approximateMatch.getter();
      v51 = MatchInfo.hasMatchSignals(_:)();
      v48(v8, v47);
      v50 = *(void (**)(char *, uint64_t))(v44 + 8);
      v50(v49, v43);
      if ((v51 & 1) == 0)
      {
        static MatchInfo.MatchSignals.aliasMatch.getter();
        v54 = v155;
        v55 = MatchInfo.hasMatchSignals(_:)();
        v48(v8, v47);
        v50((char *)v54, v43);
        v30 = v142;
        (*(void (**)(char *, uint64_t))(v156 + 8))(v142, v157);
        v41 = (char *)v152;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((v55 & 1) != 0)
          v53 = 1;
        else
          v53 = 4;
        v35 = (uint64_t)v148;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          goto LABEL_30;
        goto LABEL_33;
      }
    }
    v50((char *)v155, v43);
    v30 = v142;
    (*(void (**)(char *, uint64_t))(v156 + 8))(v142, v157);
    v41 = (char *)v152;
    v52 = swift_isUniquelyReferenced_nonNull_native();
    v53 = 3;
    v35 = (uint64_t)v148;
    if ((v52 & 1) != 0)
    {
      v53 = 3;
LABEL_30:
      v58 = *((_QWORD *)v41 + 2);
      v57 = *((_QWORD *)v41 + 3);
      v8 = v143;
      if (v58 >= v57 >> 1)
        v41 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v57 > 1), v58 + 1, 1, v41);
      *((_QWORD *)v41 + 2) = v58 + 1;
      *(_QWORD *)&v41[8 * v58 + 32] = v53;
      v22 = v157;
      v44 = v151;
      goto LABEL_19;
    }
LABEL_33:
    v41 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v41 + 2) + 1, 1, v41);
    goto LABEL_30;
  }
  v41 = (char *)MEMORY[0x1E0DEE9D8];
  v44 = v151;
LABEL_36:
  v153 = (char *)specialized Sequence<>.max()((uint64_t)v41);
  v60 = v59;
  swift_bridgeObjectRelease();
  v61 = v138;
  if ((v60 & 1) != 0)
  {
    swift_release();
    v83 = 5;
    goto LABEL_115;
  }
  v159[0] = v38;
  swift_bridgeObjectRetain();
  if (v146)
  {
    v62 = *(_QWORD *)(v156 + 72);
    v152 = (const char *)((*(unsigned __int8 *)(v156 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80));
    v63 = &v152[v36];
    v154 = *(void (**)(char *, const char *, uint64_t))(v156 + 16);
    v155 = v62;
    v64 = v149;
    v65 = (uint64_t)v134;
    v66 = v141;
    v67 = v146;
    v68 = v147;
    v154(v141, v63, v157);
    while (1)
    {
      UsoEntitySpan.matchInfo.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v65, 1, v68) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v65, &demangling cache variable for type metadata for MatchInfo?);
LABEL_40:
        (*(void (**)(char *, uint64_t))(v156 + 8))(v66, v157);
        goto LABEL_41;
      }
      v146 = v67;
      v69 = v145;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v145, v65, v68);
      static MatchInfo.MatchSignals.partialMatch.getter();
      v70 = MatchInfo.hasMatchSignals(_:)();
      v71 = *(void (**)(char *, uint64_t))(v150 + 8);
      v71(v8, v64);
      v72 = v139;
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v139, v69, v68);
      if ((v70 & 1) != 0)
        break;
      static MatchInfo.MatchSignals.approximateMatch.getter();
      v74 = MatchInfo.hasMatchSignals(_:)();
      v71(v8, v64);
      v73 = *(void (**)(char *, uint64_t))(v44 + 8);
      v73(v72, v68);
      if ((v74 & 1) != 0)
        goto LABEL_47;
      static MatchInfo.MatchSignals.aliasMatch.getter();
      v75 = v145;
      v76 = MatchInfo.hasMatchSignals(_:)();
      v71(v8, v64);
      v73(v75, v68);
      if ((v76 & 1) != 0)
        v77 = v153 == (char *)1;
      else
        v77 = v153 == (char *)4;
      v44 = v151;
      v66 = v141;
      v67 = v146;
      v64 = v149;
      if (!v77)
        goto LABEL_40;
LABEL_54:
      v78 = v157;
      v79 = *(void (**)(char *, char *, uint64_t))(v156 + 32);
      v79(v140, v66, v157);
      v80 = v159[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v80 + 16) + 1, 1);
        v80 = v159[0];
      }
      v82 = *(_QWORD *)(v80 + 16);
      v81 = *(_QWORD *)(v80 + 24);
      if (v82 >= v81 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v82 + 1, 1);
        v80 = v159[0];
      }
      *(_QWORD *)(v80 + 16) = v82 + 1;
      v79((char *)&v152[v80 + v82 * v155], v140, v78);
      v159[0] = v80;
      v64 = v149;
      v65 = (uint64_t)v134;
      v44 = v151;
LABEL_41:
      v63 += v155;
      if (!--v67)
      {
        v38 = v159[0];
        v61 = v138;
        v22 = v157;
        goto LABEL_61;
      }
      v154(v66, v63, v157);
    }
    v73 = *(void (**)(char *, uint64_t))(v44 + 8);
    v73(v72, v68);
LABEL_47:
    v73(v145, v68);
    v44 = v151;
    v66 = v141;
    v67 = v146;
    if (v153 != (char *)3)
      goto LABEL_40;
    goto LABEL_54;
  }
LABEL_61:
  swift_bridgeObjectRelease();
  v84 = *(_QWORD *)(v38 + 16);
  v85 = v137;
  v86 = v131;
  if (!v84)
  {
    swift_release();
    goto LABEL_107;
  }
  v87 = v38 + ((*(unsigned __int8 *)(v156 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80));
  v88 = *(char **)(v156 + 72);
  v89 = *(char **)(v156 + 16);
  swift_retain();
  v90 = 0;
  v91 = &unk_1EF0E1000;
  v152 = "homeAutomationAccessoryType";
  v151 = 0x80000001B4EF34F0;
  v149 = v38;
  v147 = v84;
  v146 = v87;
  v145 = v88;
  v144 = v89;
  while (1)
  {
    v150 = v90;
    ((void (*)(char *, unint64_t, uint64_t))v89)(v86, v87 + (_QWORD)v88 * v90, v22);
    if (v91[239] != -1)
      swift_once();
    v92 = static HomeAutomationAffinityScorer.kPauseOrResumeSettingStrictValues;
    v93 = UsoEntitySpan.properties.getter();
    v153 = *(char **)(v93 + 16);
    if (v153)
      break;
    swift_bridgeObjectRelease();
LABEL_99:
    v117 = v150 + 1;
    (*(void (**)(char *, uint64_t))(v156 + 8))(v86, v22);
    v90 = v117;
    v91 = (_QWORD *)&unk_1EF0E1000;
    if (v117 == v84)
    {
      swift_release_n();
LABEL_107:
      if (one-time initialization token for executor != -1)
        swift_once();
      v124 = type metadata accessor for Logger();
      __swift_project_value_buffer(v124, (uint64_t)static Logger.executor);
      v125 = Logger.logObject.getter();
      v126 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v125, v126))
      {
        v127 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v127 = 0;
        _os_log_impl(&dword_1B4BE6000, v125, v126, "HomeAutomationAffinityScorer - [Low] Pause/Resume spans have no HA entity.", v127, 2u);
        MEMORY[0x1B5E44758](v127, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
      }
      v83 = 1;
      goto LABEL_115;
    }
  }
  v155 = v93 + ((*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80));
  v94 = v92 + 56;
  v154 = *(void (**)(char *, const char *, uint64_t))(v136 + 72);
  v95 = *(void (**)(char *, unint64_t, uint64_t))(v136 + 16);
  v148 = (char *)v93;
  swift_bridgeObjectRetain();
  v96 = 0;
  v97 = v135;
  while (1)
  {
    v95(v85, v155 + (_QWORD)v154 * (_QWORD)v96, v97);
    if (SpanProperty.key.getter() == 0xD000000000000015 && v99 == v151)
    {
      swift_bridgeObjectRelease();
      v95(v61, (unint64_t)v85, v97);
    }
    else
    {
      v100 = v85;
      v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v95(v61, (unint64_t)v100, v97);
      if ((v101 & 1) == 0)
        goto LABEL_68;
    }
    v102 = SpanProperty.valueString.getter();
    v104 = v103 ? v102 : 0;
    v105 = v103 ? v103 : 0xE000000000000000;
    if (*(_QWORD *)(v92 + 16))
    {
      Hasher.init(_seed:)();
      String.hash(into:)();
      v106 = Hasher._finalize()();
      v107 = -1 << *(_BYTE *)(v92 + 32);
      v108 = v106 & ~v107;
      if (((*(_QWORD *)(v94 + ((v108 >> 3) & 0xFFFFFFFFFFFFF8)) >> v108) & 1) != 0)
      {
        v109 = *(_QWORD *)(v92 + 48);
        v110 = (_QWORD *)(v109 + 16 * v108);
        v111 = *v110 == v104 && v110[1] == v105;
        if (v111 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_101;
        v112 = ~v107;
        v113 = (v108 + 1) & ~v107;
        if (((*(_QWORD *)(v94 + ((v113 >> 3) & 0xFFFFFFFFFFFFF8)) >> v113) & 1) != 0)
          break;
      }
    }
LABEL_67:
    swift_bridgeObjectRelease();
    v97 = v135;
    v61 = v138;
LABEL_68:
    ++v96;
    v98 = *(void (**)(char *, uint64_t))(v136 + 8);
    v98(v61, v97);
    v85 = v137;
    v98(v137, v97);
    if (v96 == v153)
    {
      swift_bridgeObjectRelease_n();
      v22 = v157;
      v86 = v131;
      v84 = v147;
      v87 = v146;
      v88 = v145;
      v89 = v144;
      goto LABEL_99;
    }
  }
  v114 = (_QWORD *)(v109 + 16 * v113);
  if (*v114 != v104 || v114[1] != v105)
  {
    do
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
      v113 = (v113 + 1) & v112;
      if (((*(_QWORD *)(v94 + ((v113 >> 3) & 0xFFFFFFFFFFFFF8)) >> v113) & 1) == 0)
        goto LABEL_67;
      v115 = (_QWORD *)(v109 + 16 * v113);
    }
    while (*v115 != v104 || v115[1] != v105);
  }
LABEL_101:
  swift_bridgeObjectRelease();
  v118 = *(void (**)(char *, uint64_t))(v136 + 8);
  v119 = v135;
  v118(v138, v135);
  v118(v137, v119);
  swift_bridgeObjectRelease_n();
  (*(void (**)(char *, uint64_t))(v156 + 8))(v131, v157);
  swift_release_n();
  if (one-time initialization token for executor != -1)
    swift_once();
  v120 = type metadata accessor for Logger();
  __swift_project_value_buffer(v120, (uint64_t)static Logger.executor);
  v121 = Logger.logObject.getter();
  v122 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v121, v122))
  {
    v123 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v123 = 0;
    _os_log_impl(&dword_1B4BE6000, v121, v122, "HomeAutomationAffinityScorer - [High] Pause/Resume spans have HA entity.", v123, 2u);
    MEMORY[0x1B5E44758](v123, -1, -1);
    swift_release();

  }
  else
  {

    swift_release();
  }
  v83 = 3;
LABEL_115:
  swift_release();
  return v83;
}

BOOL specialized HomeAutomationAffinityScorer.hasGeneralNamespaceMatch(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, unint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int *v34;
  Swift::Int v35;
  Swift::Int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BOOL8 v48;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v2 = type metadata accessor for SpanProperty();
  v3 = *(_QWORD *)(v2 - 8);
  v66 = v2;
  v67 = v3;
  MEMORY[0x1E0C80A78](v2);
  v65 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UsoEntitySpan();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  v9 = MEMORY[0x1E0C80A78](v53);
  v52 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v54 = (uint64_t)&v50 - v12;
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v50 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  v55 = v6;
  v56 = v5;
  v61 = v15;
  if (v15)
  {
    v50 = a1;
    v51 = (char *)&v50 - v13;
    v59 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v16 = *(_QWORD *)(v6 + 72);
    v57 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v58 = v16;
    swift_bridgeObjectRetain();
    v17 = 0;
    v60 = v8;
    while (1)
    {
      v57(v8, v59 + v58 * v17, v5);
      if (one-time initialization token for kHAGeneralNamespaceMatches != -1)
        swift_once();
      v63 = v17;
      v64 = static HomeAutomationAffinityScorer.kHAGeneralNamespaceMatches;
      v18 = UsoEntitySpan.properties.getter();
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        v68 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
        v20 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
        v62 = v18;
        v21 = v18 + v20;
        v22 = *(_QWORD *)(v67 + 72);
        v23 = *(void (**)(char *, unint64_t, uint64_t))(v67 + 16);
        do
        {
          v24 = v65;
          v25 = v66;
          v23(v65, v21, v66);
          v26 = SpanProperty.key.getter();
          v28 = v27;
          (*(void (**)(char *, uint64_t))(v67 + 8))(v24, v25);
          v29 = v68;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1);
            v29 = v68;
          }
          v31 = *(_QWORD *)(v29 + 16);
          v30 = *(_QWORD *)(v29 + 24);
          if (v31 >= v30 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
            v29 = v68;
          }
          *(_QWORD *)(v29 + 16) = v31 + 1;
          v32 = v29 + 16 * v31;
          *(_QWORD *)(v32 + 32) = v26;
          *(_QWORD *)(v32 + 40) = v28;
          v21 += v22;
          --v19;
        }
        while (v19);
        swift_bridgeObjectRelease();
        v6 = v55;
        v5 = v56;
      }
      else
      {
        swift_bridgeObjectRelease();
        v29 = MEMORY[0x1E0DEE9D8];
      }
      v69 = Set.init(minimumCapacity:)();
      v33 = *(_QWORD *)(v29 + 16);
      if (v33)
      {
        v34 = (Swift::Int *)(v29 + 40);
        do
        {
          v35 = *(v34 - 1);
          v36 = *v34;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v68, v35, v36);
          swift_bridgeObjectRelease();
          v34 += 2;
          --v33;
        }
        while (v33);
      }
      swift_bridgeObjectRelease();
      v37 = specialized Set.isDisjoint(with:)(v69, v64);
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0)
        break;
      v17 = v63 + 1;
      v8 = v60;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v60, v5);
      if (v17 == v61)
      {
        swift_bridgeObjectRelease();
        v38 = 1;
        v14 = v51;
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease();
    v14 = v51;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v51, v60, v5);
    v38 = 0;
  }
  else
  {
    v38 = 1;
  }
LABEL_22:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v14, v38, 1, v5);
  if (one-time initialization token for executor != -1)
    swift_once();
  v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static Logger.executor);
  v40 = (uint64_t)v14;
  v41 = v54;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v14, v54, &demangling cache variable for type metadata for UsoEntitySpan?);
  v42 = Logger.logObject.getter();
  v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc();
    v45 = swift_slowAlloc();
    v68 = v45;
    *(_DWORD *)v44 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v41, v52, &demangling cache variable for type metadata for UsoEntitySpan?);
    v46 = String.init<A>(describing:)();
    v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v6 = v55;
    swift_bridgeObjectRelease();
    v5 = v56;
    outlined destroy of ReferenceResolutionClientProtocol?(v41, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B4BE6000, v42, v43, "HomeAutomationAffinityScorer - Found HomeAutomation GeneralSpan match: %s", v44, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v45, -1, -1);
    MEMORY[0x1B5E44758](v44, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v41, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  v48 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v14, 1, v5) != 1;
  outlined destroy of ReferenceResolutionClientProtocol?(v40, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v48;
}

uint64_t specialized HomeAutomationAffinityScorer.hasExactNamespaceMatch(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void (*v58)(char *, unint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Swift::Int *v69;
  Swift::Int v70;
  Swift::Int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void (*v79)(char *, unint64_t, uint64_t);
  _QWORD *v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  Swift::Int *v90;
  Swift::Int v91;
  Swift::Int v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  unsigned int (*v103)(uint64_t, uint64_t, uint64_t);
  char *v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  int64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void (*v112)(char *, unint64_t, uint64_t);
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  Swift::Int *v123;
  Swift::Int v124;
  Swift::Int v125;
  char v126;
  char *v127;
  char v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  void (*v142)(char *, unint64_t, uint64_t);
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  char v154;
  uint64_t v155;
  char v156;
  void (*v157)(char *, uint64_t);
  void (*v158)(char *, char *, uint64_t);
  char *v159;
  void (*v160)(char *, uint64_t);
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(char *, uint64_t);
  char *v170;
  BOOL v171;
  char v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  Swift::Int *v176;
  Swift::Int v177;
  Swift::Int v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  NSObject *v182;
  os_log_type_t v183;
  uint8_t *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint8_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  char *v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t matched;
  char *v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  void (*v214)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  Swift::Int v222;
  uint64_t v223;
  char *v224;
  Swift::Int v225;
  void (*v226)(char *, uint64_t, uint64_t);
  char *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;

  matched = type metadata accessor for MatchInfo.MatchSignals();
  v203 = *(_QWORD *)(matched - 8);
  MEMORY[0x1E0C80A78](matched);
  v202 = (char *)&v192 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MatchInfo?);
  MEMORY[0x1E0C80A78](v3);
  v206 = (char *)&v192 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MatchInfo();
  v216 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v199 = (char *)&v192 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v201 = (char *)&v192 - v9;
  MEMORY[0x1E0C80A78](v8);
  v200 = (char *)&v192 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo?);
  MEMORY[0x1E0C80A78](v11);
  v208 = (char *)&v192 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  MEMORY[0x1E0C80A78](v13);
  v207 = (char *)&v192 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = type metadata accessor for PayloadAttachmentInfo.AttachmentType();
  v212 = *(_QWORD *)(v213 - 8);
  v15 = MEMORY[0x1E0C80A78](v213);
  v198 = (char *)&v192 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v197 = (char *)&v192 - v17;
  v18 = type metadata accessor for SpanProperty();
  v19 = *(_QWORD *)(v18 - 8);
  v232 = v18;
  v233 = v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v230 = (char *)&v192 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v231 = (char *)&v192 - v22;
  v23 = type metadata accessor for UsoEntitySpan();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v217 = (char *)&v192 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v211 = (char *)&v192 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v205 = (char *)&v192 - v30;
  v31 = MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v192 - v32;
  v34 = MEMORY[0x1E0C80A78](v31);
  v36 = (char *)&v192 - v35;
  MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v192 - v37;
  v193 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  v39 = MEMORY[0x1E0C80A78](v193);
  v192 = (uint64_t)&v192 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x1E0C80A78](v39);
  v210 = (uint64_t)&v192 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v218 = (uint64_t)&v192 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v194 = (char *)&v192 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v196 = (char *)&v192 - v48;
  MEMORY[0x1E0C80A78](v47);
  v228 = (uint64_t)&v192 - v49;
  v50 = *(char **)(a1 + 16);
  v220 = v23;
  v223 = v24;
  v209 = v5;
  v227 = v33;
  v229 = v50;
  v195 = a1;
  if (!v50)
  {
LABEL_36:
    v96 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
    v96(v228, 1, 1, v23);
    if (!v229)
      goto LABEL_34;
    goto LABEL_37;
  }
  v215 = a1 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  v214 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 72);
  v226 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain();
  v51 = 0;
  v221 = v36;
  v222 = (Swift::Int)v38;
  while (1)
  {
    v224 = v51;
    v226(v38, v215 + (_QWORD)v214 * (_QWORD)v51, v23);
    v225 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of HomeAutomationAffinityScorer.hasExactNamespaceMatch(_:));
    swift_arrayDestroy();
    v53 = UsoEntitySpan.properties.getter();
    v54 = *(_QWORD *)(v53 + 16);
    if (v54)
    {
      v234 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54, 0);
      v55 = (*(unsigned __int8 *)(v233 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80);
      v219 = v53;
      v56 = v53 + v55;
      v57 = *(_QWORD *)(v233 + 72);
      v58 = *(void (**)(char *, unint64_t, uint64_t))(v233 + 16);
      do
      {
        v59 = v231;
        v60 = v232;
        v58(v231, v56, v232);
        v61 = SpanProperty.key.getter();
        v63 = v62;
        (*(void (**)(char *, uint64_t))(v233 + 8))(v59, v60);
        v64 = v234;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v64 + 16) + 1, 1);
          v64 = v234;
        }
        v66 = *(_QWORD *)(v64 + 16);
        v65 = *(_QWORD *)(v64 + 24);
        if (v66 >= v65 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v66 + 1, 1);
          v64 = v234;
        }
        *(_QWORD *)(v64 + 16) = v66 + 1;
        v67 = v64 + 16 * v66;
        *(_QWORD *)(v67 + 32) = v61;
        *(_QWORD *)(v67 + 40) = v63;
        v56 += v57;
        --v54;
      }
      while (v54);
      swift_bridgeObjectRelease();
      v23 = v220;
      v24 = v223;
    }
    else
    {
      swift_bridgeObjectRelease();
      v64 = MEMORY[0x1E0DEE9D8];
    }
    v235 = Set.init(minimumCapacity:)();
    v68 = *(_QWORD *)(v64 + 16);
    if (v68)
    {
      v69 = (Swift::Int *)(v64 + 40);
      do
      {
        v70 = *(v69 - 1);
        v71 = *v69;
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v234, v70, v71);
        swift_bridgeObjectRelease();
        v69 += 2;
        --v68;
      }
      while (v68);
    }
    swift_bridgeObjectRelease();
    v72 = specialized Set.isDisjoint(with:)(v235, v225);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v73 = (uint64_t)v221;
    v38 = (char *)v222;
    v226(v221, v222, v23);
    if ((v72 & 1) == 0)
      break;
    v52 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v52(v73, v23);
    v33 = v227;
LABEL_4:
    v51 = v224 + 1;
    v52((uint64_t)v38, v23);
    if (v51 == v229)
    {
      a1 = v195;
      swift_bridgeObjectRelease();
      v5 = v209;
      goto LABEL_36;
    }
  }
  v225 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #1 of HomeAutomationAffinityScorer.hasExactNamespaceMatch(_:));
  swift_arrayDestroy();
  v74 = UsoEntitySpan.properties.getter();
  v75 = *(_QWORD *)(v74 + 16);
  if (v75)
  {
    v76 = (*(unsigned __int8 *)(v233 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80);
    v219 = v74;
    v77 = v74 + v76;
    v78 = *(_QWORD *)(v233 + 72);
    v79 = *(void (**)(char *, unint64_t, uint64_t))(v233 + 16);
    v80 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v82 = v230;
      v83 = v232;
      v79(v230, v77, v232);
      v84 = SpanProperty.valueString.getter();
      v86 = v85;
      (*(void (**)(char *, uint64_t))(v233 + 8))(v82, v83);
      if (v86)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80[2] + 1, 1, v80);
        v88 = v80[2];
        v87 = v80[3];
        if (v88 >= v87 >> 1)
          v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v87 > 1), v88 + 1, 1, v80);
        v80[2] = v88 + 1;
        v81 = &v80[2 * v88];
        v81[4] = v84;
        v81[5] = v86;
      }
      v77 += v78;
      --v75;
    }
    while (v75);
    swift_bridgeObjectRelease();
    v23 = v220;
    v24 = v223;
  }
  else
  {
    swift_bridgeObjectRelease();
    v80 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v235 = Set.init(minimumCapacity:)();
  v89 = v80[2];
  v33 = v227;
  if (v89)
  {
    v90 = v80 + 5;
    do
    {
      v91 = *(v90 - 1);
      v92 = *v90;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v234, v91, v92);
      swift_bridgeObjectRelease();
      v90 += 2;
      --v89;
    }
    while (v89);
  }
  swift_bridgeObjectRelease();
  v93 = specialized Set.isDisjoint(with:)(v235, v225);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v52 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v52((uint64_t)v221, v23);
  v38 = (char *)v222;
  if ((v93 & 1) != 0)
    goto LABEL_4;
  a1 = v195;
  swift_bridgeObjectRelease();
  v94 = v228;
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v228, v38, v23);
  v95 = v94;
  v96 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
  v96(v95, 0, 1, v23);
  v5 = v209;
  if (!v229)
  {
LABEL_34:
    v97 = 1;
    v98 = (uint64_t)v196;
    goto LABEL_94;
  }
LABEL_37:
  v214 = v96;
  v225 = a1 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  LODWORD(v215) = *MEMORY[0x1E0DA1030];
  v224 = *(char **)(v24 + 72);
  v226 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain();
  v99 = 0;
  while (2)
  {
    v230 = v99;
    v226(v33, v225 + (_QWORD)v224 * (_QWORD)v99, v23);
    v102 = v218;
    outlined init with copy of ReferenceResolutionClientProtocol?(v228, v218, &demangling cache variable for type metadata for UsoEntitySpan?);
    v103 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    if (v103(v102, 1, v23) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v102, &demangling cache variable for type metadata for UsoEntitySpan?);
      goto LABEL_43;
    }
    v104 = v205;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v205, v102, v23);
    v105 = MEMORY[0x1B5E4000C](v104, v33);
    v101 = *(void (**)(char *, uint64_t))(v24 + 8);
    v101(v104, v23);
    if ((v105 & 1) != 0)
      goto LABEL_39;
LABEL_43:
    v106 = v210;
    outlined init with copy of ReferenceResolutionClientProtocol?(v228, v210, &demangling cache variable for type metadata for UsoEntitySpan?);
    if (v103(v106, 1, v23) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v106, &demangling cache variable for type metadata for UsoEntitySpan?);
      break;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v211, v106, v23);
    v222 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #2 of HomeAutomationAffinityScorer.hasExactNamespaceMatch(_:));
    swift_arrayDestroy();
    v107 = UsoEntitySpan.properties.getter();
    v108 = *(_QWORD *)(v107 + 16);
    if (v108)
    {
      v234 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v108, 0);
      v109 = (*(unsigned __int8 *)(v233 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80);
      v221 = (char *)v107;
      v110 = v107 + v109;
      v111 = *(_QWORD *)(v233 + 72);
      v112 = *(void (**)(char *, unint64_t, uint64_t))(v233 + 16);
      do
      {
        v113 = v231;
        v114 = v232;
        v112(v231, v110, v232);
        v115 = SpanProperty.key.getter();
        v117 = v116;
        (*(void (**)(char *, uint64_t))(v233 + 8))(v113, v114);
        v118 = v234;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v118 + 16) + 1, 1);
          v118 = v234;
        }
        v120 = *(_QWORD *)(v118 + 16);
        v119 = *(_QWORD *)(v118 + 24);
        if (v120 >= v119 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v119 > 1, v120 + 1, 1);
          v118 = v234;
        }
        *(_QWORD *)(v118 + 16) = v120 + 1;
        v121 = v118 + 16 * v120;
        *(_QWORD *)(v121 + 32) = v115;
        *(_QWORD *)(v121 + 40) = v117;
        v110 += v111;
        --v108;
      }
      while (v108);
      swift_bridgeObjectRelease();
      v23 = v220;
      v24 = v223;
    }
    else
    {
      swift_bridgeObjectRelease();
      v118 = MEMORY[0x1E0DEE9D8];
    }
    v235 = Set.init(minimumCapacity:)();
    v122 = *(_QWORD *)(v118 + 16);
    v33 = v227;
    if (v122)
    {
      v123 = (Swift::Int *)(v118 + 40);
      do
      {
        v124 = *(v123 - 1);
        v125 = *v123;
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v234, v124, v125);
        swift_bridgeObjectRelease();
        v123 += 2;
        --v122;
      }
      while (v122);
    }
    swift_bridgeObjectRelease();
    v126 = specialized Set.isDisjoint(with:)(v235, v222);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v126 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v211, v23);
      v5 = v209;
      break;
    }
    v127 = v211;
    v128 = UsoEntitySpan.indexesMatch(_:)();
    v101 = *(void (**)(char *, uint64_t))(v24 + 8);
    v101(v127, v23);
    v5 = v209;
    if ((v128 & 1) != 0)
    {
LABEL_39:
      v99 = v230 + 1;
      v101(v33, v23);
      if (v99 == v229)
      {
        swift_bridgeObjectRelease();
        v97 = 1;
        v98 = (uint64_t)v196;
        goto LABEL_93;
      }
      continue;
    }
    break;
  }
  v129 = v208;
  UsoEntitySpan.payloadAttachmentInfo.getter();
  v130 = (uint64_t)v129;
  v131 = type metadata accessor for PayloadAttachmentInfo();
  v132 = *(_QWORD *)(v131 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v130, &demangling cache variable for type metadata for PayloadAttachmentInfo?);
    v133 = (uint64_t)v207;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v212 + 56))(v207, 1, 1, v213);
    goto LABEL_63;
  }
  v133 = (uint64_t)v207;
  PayloadAttachmentInfo.attachmentType.getter();
  (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v130, v131);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v212 + 48))(v133, 1, v213) == 1)
  {
LABEL_63:
    outlined destroy of ReferenceResolutionClientProtocol?(v133, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    v134 = v217;
    v226(v217, (uint64_t)v33, v23);
    goto LABEL_64;
  }
  v162 = v212;
  v163 = v197;
  v164 = v133;
  v165 = v213;
  (*(void (**)(char *, uint64_t, uint64_t))(v212 + 32))(v197, v164, v213);
  v166 = v198;
  (*(void (**)(char *, _QWORD, uint64_t))(v162 + 104))(v198, v215, v165);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1048], MEMORY[0x1E0DA1060]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v167 = v234;
  v168 = v235;
  v169 = *(void (**)(char *, uint64_t))(v162 + 8);
  v169(v166, v165);
  v169(v163, v165);
  v170 = v217;
  v226(v217, (uint64_t)v33, v23);
  v171 = v167 == v168;
  v134 = v170;
  if (v171)
  {
LABEL_83:
    v101 = *(void (**)(char *, uint64_t))(v24 + 8);
    v101(v134, v23);
    goto LABEL_39;
  }
LABEL_64:
  v135 = (uint64_t)v206;
  UsoEntitySpan.matchInfo.getter();
  v136 = v216;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v216 + 48))(v135, 1, v5) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v135, &demangling cache variable for type metadata for MatchInfo?);
    v101 = *(void (**)(char *, uint64_t))(v24 + 8);
    v101(v134, v23);
    goto LABEL_66;
  }
  v152 = v200;
  (*(void (**)(char *, uint64_t, uint64_t))(v136 + 32))(v200, v135, v5);
  v153 = v202;
  static MatchInfo.MatchSignals.approximateMatch.getter();
  v154 = MatchInfo.hasMatchSignals(_:)();
  v155 = v216;
  v156 = v154;
  v157 = *(void (**)(char *, uint64_t))(v203 + 8);
  v157(v153, matched);
  v158 = *(void (**)(char *, char *, uint64_t))(v155 + 16);
  v159 = v201;
  v158(v201, v152, v5);
  if ((v156 & 1) != 0)
  {
    v160 = *(void (**)(char *, uint64_t))(v155 + 8);
    v160(v159, v5);
    v161 = v199;
    v158(v199, v152, v5);
    goto LABEL_82;
  }
  static MatchInfo.MatchSignals.partialMatch.getter();
  v172 = MatchInfo.hasMatchSignals(_:)();
  v173 = matched;
  v174 = v172;
  v157(v153, matched);
  v160 = *(void (**)(char *, uint64_t))(v155 + 8);
  v160(v159, v5);
  v161 = v199;
  v158(v199, v152, v5);
  if ((v174 & 1) != 0)
  {
LABEL_82:
    v33 = v227;
    v160(v161, v5);
    v160(v152, v5);
    v134 = v217;
    v24 = v223;
    goto LABEL_83;
  }
  static MatchInfo.MatchSignals.aliasMatch.getter();
  v179 = MatchInfo.hasMatchSignals(_:)();
  v157(v153, v173);
  v160(v161, v5);
  v160(v152, v5);
  v24 = v223;
  v101 = *(void (**)(char *, uint64_t))(v223 + 8);
  v101(v217, v23);
  v33 = v227;
  if ((v179 & 1) != 0)
    goto LABEL_39;
LABEL_66:
  if (one-time initialization token for kHAExactNamespaceMatches != -1)
    swift_once();
  v221 = (char *)static HomeAutomationAffinityScorer.kHAExactNamespaceMatches;
  v222 = (Swift::Int)v101;
  v137 = UsoEntitySpan.properties.getter();
  v138 = *(_QWORD *)(v137 + 16);
  if (v138)
  {
    v234 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v138, 0);
    v139 = (*(unsigned __int8 *)(v233 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80);
    v219 = v137;
    v140 = v137 + v139;
    v141 = *(_QWORD *)(v233 + 72);
    v142 = *(void (**)(char *, unint64_t, uint64_t))(v233 + 16);
    do
    {
      v143 = v231;
      v144 = v232;
      v142(v231, v140, v232);
      v145 = SpanProperty.key.getter();
      v147 = v146;
      (*(void (**)(char *, uint64_t))(v233 + 8))(v143, v144);
      v148 = v234;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v148 + 16) + 1, 1);
        v148 = v234;
      }
      v150 = *(_QWORD *)(v148 + 16);
      v149 = *(_QWORD *)(v148 + 24);
      if (v150 >= v149 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v149 > 1, v150 + 1, 1);
        v148 = v234;
      }
      *(_QWORD *)(v148 + 16) = v150 + 1;
      v151 = v148 + 16 * v150;
      *(_QWORD *)(v151 + 32) = v145;
      *(_QWORD *)(v151 + 40) = v147;
      v140 += v141;
      --v138;
    }
    while (v138);
    swift_bridgeObjectRelease();
    v23 = v220;
    v24 = v223;
  }
  else
  {
    swift_bridgeObjectRelease();
    v148 = MEMORY[0x1E0DEE9D8];
  }
  v235 = Set.init(minimumCapacity:)();
  v175 = *(_QWORD *)(v148 + 16);
  v33 = v227;
  if (v175)
  {
    v176 = (Swift::Int *)(v148 + 40);
    do
    {
      v177 = *(v176 - 1);
      v178 = *v176;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v234, v177, v178);
      swift_bridgeObjectRelease();
      v176 += 2;
      --v175;
    }
    while (v175);
  }
  swift_bridgeObjectRelease();
  v100 = specialized Set.isDisjoint(with:)(v235, (uint64_t)v221);
  swift_bridgeObjectRelease();
  v5 = v209;
  v101 = (void (*)(char *, uint64_t))v222;
  if ((v100 & 1) != 0)
    goto LABEL_39;
  swift_bridgeObjectRelease();
  v98 = (uint64_t)v196;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v196, v33, v23);
  v97 = 0;
LABEL_93:
  v96 = v214;
LABEL_94:
  v96(v98, v97, 1, v23);
  v180 = (uint64_t)v194;
  if (one-time initialization token for executor != -1)
    swift_once();
  v181 = type metadata accessor for Logger();
  __swift_project_value_buffer(v181, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(v98, v180, &demangling cache variable for type metadata for UsoEntitySpan?);
  v182 = Logger.logObject.getter();
  v183 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v182, v183))
  {
    v184 = (uint8_t *)swift_slowAlloc();
    v185 = swift_slowAlloc();
    v234 = v185;
    *(_DWORD *)v184 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v180, v192, &demangling cache variable for type metadata for UsoEntitySpan?);
    v186 = String.init<A>(describing:)();
    v235 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v186, v187, &v234);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v180, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B4BE6000, v182, v183, "HomeAutomationAffinityScorer - Found HomeAutomation ExactSpan %s", v184, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v185, -1, -1);
    v188 = v184;
    v98 = (uint64_t)v196;
    MEMORY[0x1B5E44758](v188, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v180, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  v171 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v98, 1, v23) == 1;
  v189 = v98;
  v190 = !v171;
  outlined destroy of ReferenceResolutionClientProtocol?(v189, &demangling cache variable for type metadata for UsoEntitySpan?);
  outlined destroy of ReferenceResolutionClientProtocol?(v228, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v190;
}

BOOL specialized HomeAutomationAffinityScorer.hasNamespaceMatch(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int *v34;
  Swift::Int v35;
  Swift::Int v36;
  char v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  Swift::Int *v52;
  Swift::Int v53;
  Swift::Int v54;
  char v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BOOL8 v66;
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t);
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v2 = type metadata accessor for SpanProperty();
  v3 = *(_QWORD *)(v2 - 8);
  v85 = v2;
  v86 = v3;
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UsoEntitySpan();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v83 = (char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v68 - v10;
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  v12 = MEMORY[0x1E0C80A78](v70);
  v69 = (uint64_t)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v68 - v15;
  MEMORY[0x1E0C80A78](v14);
  v71 = (char *)v68 - v17;
  v18 = *(_QWORD *)(a1 + 16);
  v76 = v7;
  v72 = v18;
  if (v18)
  {
    v74 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v73 = *(_QWORD *)(v7 + 72);
    v82 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v68[1] = a1;
    swift_bridgeObjectRetain();
    v19 = 0;
    v78 = v11;
    v79 = v6;
    v75 = v16;
    while (1)
    {
      v80 = v19;
      v82(v11, v74 + v73 * v19, v6);
      if (one-time initialization token for kHAGeneralNamespaceMatches != -1)
        swift_once();
      v81 = static HomeAutomationAffinityScorer.kHAGeneralNamespaceMatches;
      v20 = UsoEntitySpan.properties.getter();
      v21 = *(_QWORD *)(v20 + 16);
      if (v21)
      {
        v87 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
        v22 = *(unsigned __int8 *)(v86 + 80);
        v77 = v20;
        v23 = v20 + ((v22 + 32) & ~v22);
        v84 = *(_QWORD *)(v86 + 72);
        v24 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
        do
        {
          v25 = v85;
          v24(v5, v23, v85);
          v26 = SpanProperty.key.getter();
          v28 = v27;
          (*(void (**)(char *, uint64_t))(v86 + 8))(v5, v25);
          v29 = v87;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1);
            v29 = v87;
          }
          v31 = *(_QWORD *)(v29 + 16);
          v30 = *(_QWORD *)(v29 + 24);
          if (v31 >= v30 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
            v29 = v87;
          }
          *(_QWORD *)(v29 + 16) = v31 + 1;
          v32 = v29 + 16 * v31;
          *(_QWORD *)(v32 + 32) = v26;
          *(_QWORD *)(v32 + 40) = v28;
          v23 += v84;
          --v21;
        }
        while (v21);
        swift_bridgeObjectRelease();
        v11 = v78;
        v6 = v79;
      }
      else
      {
        swift_bridgeObjectRelease();
        v29 = MEMORY[0x1E0DEE9D8];
      }
      v88 = Set.init(minimumCapacity:)();
      v33 = *(_QWORD *)(v29 + 16);
      if (v33)
      {
        v34 = (Swift::Int *)(v29 + 40);
        do
        {
          v35 = *(v34 - 1);
          v36 = *v34;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v87, v35, v36);
          swift_bridgeObjectRelease();
          v34 += 2;
          --v33;
        }
        while (v33);
      }
      swift_bridgeObjectRelease();
      v37 = specialized Set.isDisjoint(with:)(v88, v81);
      swift_bridgeObjectRelease();
      v82(v83, (uint64_t)v11, v6);
      if ((v37 & 1) == 0)
        break;
      if (one-time initialization token for kHAExactNamespaceMatches != -1)
        swift_once();
      v81 = static HomeAutomationAffinityScorer.kHAExactNamespaceMatches;
      v38 = UsoEntitySpan.properties.getter();
      v39 = *(_QWORD *)(v38 + 16);
      if (v39)
      {
        v87 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39, 0);
        v40 = *(unsigned __int8 *)(v86 + 80);
        v77 = v38;
        v41 = v38 + ((v40 + 32) & ~v40);
        v84 = *(_QWORD *)(v86 + 72);
        v42 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
        do
        {
          v43 = v85;
          v42(v5, v41, v85);
          v44 = SpanProperty.key.getter();
          v46 = v45;
          (*(void (**)(char *, uint64_t))(v86 + 8))(v5, v43);
          v47 = v87;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v47 + 16) + 1, 1);
            v47 = v87;
          }
          v49 = *(_QWORD *)(v47 + 16);
          v48 = *(_QWORD *)(v47 + 24);
          if (v49 >= v48 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
            v47 = v87;
          }
          *(_QWORD *)(v47 + 16) = v49 + 1;
          v50 = v47 + 16 * v49;
          *(_QWORD *)(v50 + 32) = v44;
          *(_QWORD *)(v50 + 40) = v46;
          v41 += v84;
          --v39;
        }
        while (v39);
        swift_bridgeObjectRelease();
        v11 = v78;
        v6 = v79;
      }
      else
      {
        swift_bridgeObjectRelease();
        v47 = MEMORY[0x1E0DEE9D8];
      }
      v88 = Set.init(minimumCapacity:)();
      v51 = *(_QWORD *)(v47 + 16);
      if (v51)
      {
        v52 = (Swift::Int *)(v47 + 40);
        do
        {
          v53 = *(v52 - 1);
          v54 = *v52;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v87, v53, v54);
          swift_bridgeObjectRelease();
          v52 += 2;
          --v51;
        }
        while (v51);
      }
      swift_bridgeObjectRelease();
      v55 = specialized Set.isDisjoint(with:)(v88, v81);
      swift_bridgeObjectRelease();
      v7 = v76;
      v56 = *(void (**)(char *, uint64_t))(v76 + 8);
      v56(v83, v6);
      if ((v55 & 1) == 0)
        goto LABEL_36;
      v19 = v80 + 1;
      v56(v11, v6);
      v16 = v75;
      if (v19 == v72)
      {
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
    }
    v7 = v76;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v83, v6);
LABEL_36:
    swift_bridgeObjectRelease();
    v57 = (uint64_t)v71;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v71, v11, v6);
    v58 = 0;
    v16 = v75;
  }
  else
  {
LABEL_37:
    v58 = 1;
    v57 = (uint64_t)v71;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v57, v58, 1, v6);
  if (one-time initialization token for executor != -1)
    swift_once();
  v59 = type metadata accessor for Logger();
  __swift_project_value_buffer(v59, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(v57, (uint64_t)v16, &demangling cache variable for type metadata for UsoEntitySpan?);
  v60 = Logger.logObject.getter();
  v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc();
    v63 = swift_slowAlloc();
    v87 = v63;
    *(_DWORD *)v62 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v16, v69, &demangling cache variable for type metadata for UsoEntitySpan?);
    v64 = String.init<A>(describing:)();
    v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v7 = v76;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B4BE6000, v60, v61, "HomeAutomationAffinityScorer - Found HomeAutomation Span match: %s", v62, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v63, -1, -1);
    MEMORY[0x1B5E44758](v62, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  v66 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v57, 1, v6) != 1;
  outlined destroy of ReferenceResolutionClientProtocol?(v57, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v66;
}

uint64_t specialized HomeAutomationAffinityScorer.hasHKExactMatch(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(_QWORD, _QWORD, _QWORD);
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int *v51;
  Swift::Int v52;
  Swift::Int v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void (*v61)(char *, unint64_t, uint64_t);
  _QWORD *v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  Swift::Int *v72;
  Swift::Int v73;
  Swift::Int v74;
  char v75;
  void (*v76)(char *, uint64_t);
  Swift::Bool v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint8_t *v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v91[2];
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  unsigned int v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(_QWORD, _QWORD, _QWORD);
  char *v109;
  uint64_t v110;
  Swift::Int v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v2 = type metadata accessor for SpanProperty();
  v3 = *(_QWORD *)(v2 - 8);
  v115 = v2;
  v116 = v3;
  v4 = MEMORY[0x1E0C80A78](v2);
  v113 = (char *)v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v114 = (char *)v91 - v6;
  v105 = type metadata accessor for IdentifierNamespace();
  v104 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  v103 = (char *)v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UsoEntitySpan();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v112 = (char *)v91 - v14;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v91 - v15;
  v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  v17 = MEMORY[0x1E0C80A78](a1);
  v93 = (uint64_t)v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)v91 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)v91 - v23;
  v25 = *(_QWORD *)(v22 + 16);
  v106 = v9;
  v102 = v25;
  v95 = (char *)v91 - v23;
  if (v25)
  {
    v92 = v21;
    v101 = v22 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v100 = *MEMORY[0x1E0DA0F58];
    v99 = *(_QWORD *)(v9 + 72);
    v26 = *(void (**)(_QWORD, _QWORD, _QWORD))(v9 + 16);
    v91[1] = v22;
    swift_bridgeObjectRetain();
    v27 = 0;
    v98 = xmmword_1B4EE3F50;
    v97 = v8;
    v96 = v12;
    v108 = v26;
    v109 = v16;
    do
    {
      v110 = v27;
      v26(v16, v101 + v99 * v27, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v98;
      v29 = v104;
      v30 = v103;
      v31 = v105;
      (*(void (**)(char *, _QWORD, uint64_t))(v104 + 104))(v103, v100, v105);
      v32 = IdentifierNamespace.rawValue.getter();
      v34 = v33;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
      *(_QWORD *)(inited + 32) = v32;
      *(_QWORD *)(inited + 40) = v34;
      if (*(_QWORD *)(inited + 16))
        v111 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
      else
        v111 = MEMORY[0x1E0DEE9E8];
      swift_setDeallocating();
      swift_arrayDestroy();
      v35 = UsoEntitySpan.properties.getter();
      v36 = *(_QWORD *)(v35 + 16);
      if (v36)
      {
        v117 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
        v37 = (*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80);
        v107 = v35;
        v38 = v35 + v37;
        v39 = *(_QWORD *)(v116 + 72);
        v40 = *(void (**)(char *, unint64_t, uint64_t))(v116 + 16);
        do
        {
          v41 = v114;
          v42 = v115;
          v40(v114, v38, v115);
          v43 = SpanProperty.key.getter();
          v45 = v44;
          (*(void (**)(char *, uint64_t))(v116 + 8))(v41, v42);
          v46 = v117;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v46 + 16) + 1, 1);
            v46 = v117;
          }
          v48 = *(_QWORD *)(v46 + 16);
          v47 = *(_QWORD *)(v46 + 24);
          if (v48 >= v47 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
            v46 = v117;
          }
          *(_QWORD *)(v46 + 16) = v48 + 1;
          v49 = v46 + 16 * v48;
          *(_QWORD *)(v49 + 32) = v43;
          *(_QWORD *)(v49 + 40) = v45;
          v38 += v39;
          --v36;
        }
        while (v36);
        swift_bridgeObjectRelease();
        v8 = v97;
        v12 = v96;
      }
      else
      {
        swift_bridgeObjectRelease();
        v46 = MEMORY[0x1E0DEE9D8];
      }
      v118 = Set.init(minimumCapacity:)();
      v50 = *(_QWORD *)(v46 + 16);
      v16 = v109;
      if (v50)
      {
        v51 = (Swift::Int *)(v46 + 40);
        do
        {
          v52 = *(v51 - 1);
          v53 = *v51;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v117, v52, v53);
          swift_bridgeObjectRelease();
          v51 += 2;
          --v50;
        }
        while (v50);
      }
      swift_bridgeObjectRelease();
      v54 = specialized Set.isDisjoint(with:)(v118, v111);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v26 = v108;
      v108(v112, v16, v8);
      if ((v54 & 1) != 0)
      {
        v55 = 0;
        v9 = v106;
      }
      else
      {
        if (one-time initialization token for kHKEntityTypes != -1)
          swift_once();
        v56 = static HomeAutomationAffinityScorer.kHKEntityTypes;
        v57 = UsoEntitySpan.properties.getter();
        v58 = *(_QWORD *)(v57 + 16);
        if (v58)
        {
          v111 = v56;
          v59 = v57 + ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80));
          v60 = *(_QWORD *)(v116 + 72);
          v61 = *(void (**)(char *, unint64_t, uint64_t))(v116 + 16);
          v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          do
          {
            v64 = v113;
            v65 = v115;
            v61(v113, v59, v115);
            v66 = SpanProperty.valueString.getter();
            v68 = v67;
            (*(void (**)(char *, uint64_t))(v116 + 8))(v64, v65);
            if (v68)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
              v70 = v62[2];
              v69 = v62[3];
              if (v70 >= v69 >> 1)
                v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v69 > 1), v70 + 1, 1, v62);
              v62[2] = v70 + 1;
              v63 = &v62[2 * v70];
              v63[4] = v66;
              v63[5] = v68;
            }
            v59 += v60;
            --v58;
          }
          while (v58);
          swift_bridgeObjectRelease();
          v8 = v97;
          v12 = v96;
          v26 = v108;
          v56 = v111;
        }
        else
        {
          swift_bridgeObjectRelease();
          v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        v118 = Set.init(minimumCapacity:)();
        v71 = v62[2];
        if (v71)
        {
          v72 = v62 + 5;
          do
          {
            v73 = *(v72 - 1);
            v74 = *v72;
            swift_bridgeObjectRetain();
            specialized Set._Variant.insert(_:)(&v117, v73, v74);
            swift_bridgeObjectRelease();
            v72 += 2;
            --v71;
          }
          while (v71);
        }
        swift_bridgeObjectRelease();
        v75 = specialized Set.isDisjoint(with:)(v118, v56);
        swift_bridgeObjectRelease();
        v55 = v75 ^ 1;
        v9 = v106;
        v16 = v109;
      }
      v76 = *(void (**)(char *, uint64_t))(v9 + 8);
      v76(v112, v8);
      v26(v12, v16, v8);
      if ((v55 & 1) != 0)
      {
        v77 = UsoEntitySpan.hasExactMatch()();
        v76(v12, v8);
        if (v77)
        {
          swift_bridgeObjectRelease();
          v24 = v95;
          (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v95, v16, v8);
          v78 = 0;
          goto LABEL_44;
        }
      }
      else
      {
        v76(v12, v8);
      }
      v27 = v110 + 1;
      v76(v16, v8);
    }
    while (v27 != v102);
    swift_bridgeObjectRelease();
    v78 = 1;
    v24 = v95;
LABEL_44:
    v21 = v92;
  }
  else
  {
    v78 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v24, v78, 1, v8);
  if (one-time initialization token for executor != -1)
    swift_once();
  v79 = type metadata accessor for Logger();
  __swift_project_value_buffer(v79, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v24, (uint64_t)v21, &demangling cache variable for type metadata for UsoEntitySpan?);
  v80 = Logger.logObject.getter();
  v81 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v80, v81))
  {
    v82 = (uint8_t *)swift_slowAlloc();
    v83 = swift_slowAlloc();
    v117 = v83;
    *(_DWORD *)v82 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v21, v93, &demangling cache variable for type metadata for UsoEntitySpan?);
    v84 = String.init<A>(describing:)();
    v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, &v117);
    v9 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B4BE6000, v80, v81, "HomeAutomationAffinityScorer - Found HomeKitSpan with ExactMatch %s", v82, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v83, -1, -1);
    v86 = v82;
    v24 = v95;
    MEMORY[0x1B5E44758](v86, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  v87 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v24, 1, v8) == 1;
  v88 = (uint64_t)v24;
  v89 = !v87;
  outlined destroy of ReferenceResolutionClientProtocol?(v88, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v89;
}

BOOL specialized HomeAutomationAffinityScorer.hasHKFuzzyMatch(_:)(uint64_t a1)
{
  uint64_t matched;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t inited;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(char *, unint64_t, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  Swift::Int *v71;
  Swift::Int v72;
  Swift::Int v73;
  char v74;
  char v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void (*v84)(char *, unint64_t, uint64_t);
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  Swift::Int *v94;
  Swift::Int v95;
  Swift::Int v96;
  char v97;
  void (*v98)(char *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  char *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  char *v114;
  char *v115;
  char v116;
  uint64_t v117;
  char v118;
  void (*v119)(char *, uint64_t);
  uint64_t v120;
  void (*v121)(char *, char *, uint64_t);
  char v122;
  void (*v123)(char *, uint64_t);
  char *v124;
  char v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint8_t *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _BOOL8 v137;
  _QWORD v139[2];
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  void (*v175)(char *, uint64_t);
  char *v176;
  char *v177;
  void (*v178)(char *, uint64_t, uint64_t);
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;

  matched = type metadata accessor for MatchInfo.MatchSignals();
  v150 = *(_QWORD *)(matched - 8);
  MEMORY[0x1E0C80A78](matched);
  v4 = (char *)v139 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MatchInfo?);
  MEMORY[0x1E0C80A78](v5);
  v152 = (char *)v139 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for MatchInfo();
  v157 = *(_QWORD *)(v154 - 8);
  v7 = MEMORY[0x1E0C80A78](v154);
  v151 = (char *)v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v139 - v10;
  MEMORY[0x1E0C80A78](v9);
  v149 = (char *)v139 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  MEMORY[0x1E0C80A78](v16);
  v153 = (char *)v139 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for PayloadAttachmentInfo.AttachmentType();
  v155 = *(_QWORD *)(v156 - 8);
  v18 = MEMORY[0x1E0C80A78](v156);
  v145 = (char *)v139 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v144 = (char *)v139 - v20;
  v21 = type metadata accessor for SpanProperty();
  v22 = *(_QWORD *)(v21 - 8);
  v180 = v21;
  v181 = v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v173 = (char *)v139 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v179 = (char *)v139 - v25;
  v167 = type metadata accessor for IdentifierNamespace();
  v166 = *(_QWORD *)(v167 - 8);
  MEMORY[0x1E0C80A78](v167);
  v165 = (char *)v139 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for UsoEntitySpan();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)v139 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0C80A78](v29);
  v34 = (char *)v139 - v33;
  v35 = MEMORY[0x1E0C80A78](v32);
  v177 = (char *)v139 - v36;
  MEMORY[0x1E0C80A78](v35);
  v176 = (char *)v139 - v37;
  v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  v38 = MEMORY[0x1E0C80A78](v141);
  v140 = (uint64_t)v139 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x1E0C80A78](v38);
  v143 = (uint64_t)v139 - v41;
  MEMORY[0x1E0C80A78](v40);
  v43 = (char *)v139 - v42;
  v164 = *(_QWORD *)(a1 + 16);
  v146 = (char *)v139 - v42;
  if (!v164)
  {
    v126 = 1;
    goto LABEL_57;
  }
  v148 = matched;
  v161 = a1 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
  v160 = *MEMORY[0x1E0DA0F58];
  v142 = *MEMORY[0x1E0DA1030];
  v159 = *(_QWORD *)(v28 + 72);
  v168 = v28;
  v178 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v139[1] = a1;
  swift_bridgeObjectRetain();
  v44 = 0;
  v158 = xmmword_1B4EE3F50;
  v171 = v27;
  v147 = v4;
  v162 = v15;
  v170 = v31;
  v172 = v34;
  v45 = v176;
  v163 = v11;
  while (1)
  {
    v174 = v44;
    v178(v45, v161 + v159 * v44, v27);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v158;
    v47 = v166;
    v48 = v165;
    v49 = v167;
    (*(void (**)(char *, _QWORD, uint64_t))(v166 + 104))(v165, v160, v167);
    v50 = IdentifierNamespace.rawValue.getter();
    v52 = v51;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
    *(_QWORD *)(inited + 32) = v50;
    *(_QWORD *)(inited + 40) = v52;
    if (*(_QWORD *)(inited + 16))
      v175 = (void (*)(char *, uint64_t))specialized Set.init(_nonEmptyArrayLiteral:)(inited);
    else
      v175 = (void (*)(char *, uint64_t))MEMORY[0x1E0DEE9E8];
    v53 = v173;
    swift_setDeallocating();
    swift_arrayDestroy();
    v54 = UsoEntitySpan.properties.getter();
    v55 = *(_QWORD *)(v54 + 16);
    if (v55)
    {
      v182 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55, 0);
      v56 = (*(unsigned __int8 *)(v181 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v181 + 80);
      v169 = v54;
      v57 = v54 + v56;
      v58 = *(_QWORD *)(v181 + 72);
      v59 = *(void (**)(char *, unint64_t, uint64_t))(v181 + 16);
      do
      {
        v60 = v179;
        v61 = v180;
        v59(v179, v57, v180);
        v62 = SpanProperty.key.getter();
        v64 = v63;
        (*(void (**)(char *, uint64_t))(v181 + 8))(v60, v61);
        v65 = v182;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v65 + 16) + 1, 1);
          v65 = v182;
        }
        v67 = *(_QWORD *)(v65 + 16);
        v66 = *(_QWORD *)(v65 + 24);
        if (v67 >= v66 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
          v65 = v182;
        }
        *(_QWORD *)(v65 + 16) = v67 + 1;
        v68 = v65 + 16 * v67;
        *(_QWORD *)(v68 + 32) = v62;
        *(_QWORD *)(v68 + 40) = v64;
        v57 += v58;
        --v55;
      }
      while (v55);
      swift_bridgeObjectRelease();
      v27 = v171;
      v53 = v173;
    }
    else
    {
      swift_bridgeObjectRelease();
      v65 = MEMORY[0x1E0DEE9D8];
    }
    v183 = Set.init(minimumCapacity:)();
    v69 = *(_QWORD *)(v65 + 16);
    v70 = v172;
    if (v69)
    {
      v71 = (Swift::Int *)(v65 + 40);
      do
      {
        v72 = *(v71 - 1);
        v73 = *v71;
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v182, v72, v73);
        swift_bridgeObjectRelease();
        v71 += 2;
        --v69;
      }
      while (v69);
    }
    swift_bridgeObjectRelease();
    v74 = specialized Set.isDisjoint(with:)(v183, (uint64_t)v175);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v45 = v176;
    v178(v177, (uint64_t)v176, v27);
    if ((v74 & 1) != 0)
    {
      v75 = 0;
      v76 = v163;
      v77 = (uint64_t)v162;
      v78 = v170;
    }
    else
    {
      if (one-time initialization token for kHKEntityTypes != -1)
        swift_once();
      v175 = (void (*)(char *, uint64_t))static HomeAutomationAffinityScorer.kHKEntityTypes;
      v79 = UsoEntitySpan.properties.getter();
      v80 = *(_QWORD *)(v79 + 16);
      if (v80)
      {
        v81 = (*(unsigned __int8 *)(v181 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v181 + 80);
        v169 = v79;
        v82 = v79 + v81;
        v83 = *(_QWORD *)(v181 + 72);
        v84 = *(void (**)(char *, unint64_t, uint64_t))(v181 + 16);
        v85 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        do
        {
          v87 = v180;
          v84(v53, v82, v180);
          v88 = SpanProperty.valueString.getter();
          v90 = v89;
          (*(void (**)(char *, uint64_t))(v181 + 8))(v53, v87);
          if (v90)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85[2] + 1, 1, v85);
            v92 = v85[2];
            v91 = v85[3];
            if (v92 >= v91 >> 1)
              v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v91 > 1), v92 + 1, 1, v85);
            v85[2] = v92 + 1;
            v86 = &v85[2 * v92];
            v86[4] = v88;
            v86[5] = v90;
          }
          v82 += v83;
          --v80;
        }
        while (v80);
        swift_bridgeObjectRelease();
        v27 = v171;
        v70 = v172;
      }
      else
      {
        swift_bridgeObjectRelease();
        v85 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v183 = Set.init(minimumCapacity:)();
      v93 = v85[2];
      if (v93)
      {
        v94 = v85 + 5;
        do
        {
          v95 = *(v94 - 1);
          v96 = *v94;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v182, v95, v96);
          swift_bridgeObjectRelease();
          v94 += 2;
          --v93;
        }
        while (v93);
      }
      swift_bridgeObjectRelease();
      v97 = specialized Set.isDisjoint(with:)(v183, (uint64_t)v175);
      swift_bridgeObjectRelease();
      v75 = v97 ^ 1;
      v76 = v163;
      v77 = (uint64_t)v162;
      v78 = v170;
      v45 = v176;
    }
    v98 = *(void (**)(char *, uint64_t))(v168 + 8);
    v98(v177, v27);
    v178(v70, (uint64_t)v45, v27);
    if ((v75 & 1) == 0)
      goto LABEL_4;
    UsoEntitySpan.payloadAttachmentInfo.getter();
    v99 = type metadata accessor for PayloadAttachmentInfo();
    v100 = *(_QWORD *)(v99 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v77, 1, v99) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v77, &demangling cache variable for type metadata for PayloadAttachmentInfo?);
      v101 = (uint64_t)v153;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v155 + 56))(v153, 1, 1, v156);
LABEL_44:
      outlined destroy of ReferenceResolutionClientProtocol?(v101, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      v178(v78, (uint64_t)v70, v27);
      v102 = v154;
      goto LABEL_46;
    }
    v101 = (uint64_t)v153;
    PayloadAttachmentInfo.attachmentType.getter();
    (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v77, v99);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48))(v101, 1, v156) == 1)
      goto LABEL_44;
    v103 = v155;
    v104 = v144;
    v105 = v156;
    (*(void (**)(char *, uint64_t, uint64_t))(v155 + 32))(v144, v101, v156);
    v106 = v145;
    (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v145, v142, v105);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1048], MEMORY[0x1E0DA1060]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v107 = v182;
    v108 = v183;
    v109 = *(void (**)(char *, uint64_t))(v103 + 8);
    v109(v106, v105);
    v110 = v104;
    v78 = v170;
    v109(v110, v105);
    v178(v78, (uint64_t)v70, v27);
    v102 = v154;
    if (v107 == v108)
      goto LABEL_55;
LABEL_46:
    v111 = (uint64_t)v152;
    UsoEntitySpan.matchInfo.getter();
    v112 = v157;
    v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v157 + 48))(v111, 1, v102);
    v45 = v176;
    if (v113 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v111, &demangling cache variable for type metadata for MatchInfo?);
      v27 = v171;
      v98(v78, v171);
LABEL_4:
      v98(v70, v27);
      goto LABEL_5;
    }
    v175 = v98;
    v114 = v149;
    (*(void (**)(char *, uint64_t, uint64_t))(v112 + 32))(v149, v111, v102);
    v115 = v147;
    static MatchInfo.MatchSignals.approximateMatch.getter();
    v116 = MatchInfo.hasMatchSignals(_:)();
    v117 = v157;
    v118 = v116;
    v119 = *(void (**)(char *, uint64_t))(v150 + 8);
    v120 = v148;
    v119(v115, v148);
    v121 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
    v121(v76, v114, v102);
    if ((v118 & 1) != 0)
      break;
    static MatchInfo.MatchSignals.partialMatch.getter();
    v122 = MatchInfo.hasMatchSignals(_:)();
    v119(v115, v120);
    v123 = *(void (**)(char *, uint64_t))(v117 + 8);
    v123(v76, v102);
    v124 = v151;
    v121(v151, v114, v102);
    if ((v122 & 1) != 0)
      goto LABEL_54;
    static MatchInfo.MatchSignals.aliasMatch.getter();
    v125 = MatchInfo.hasMatchSignals(_:)();
    v119(v115, v120);
    v123(v124, v102);
    v123(v114, v102);
    v27 = v171;
    v98 = v175;
    v175(v170, v171);
    v98(v172, v27);
    v45 = v176;
    if ((v125 & 1) != 0)
      goto LABEL_56;
LABEL_5:
    v44 = v174 + 1;
    v98(v45, v27);
    if (v44 == v164)
    {
      swift_bridgeObjectRelease();
      v126 = 1;
      v28 = v168;
      v43 = v146;
      goto LABEL_57;
    }
  }
  v123 = *(void (**)(char *, uint64_t))(v117 + 8);
  v123(v76, v102);
  v124 = v151;
  v121(v151, v114, v102);
LABEL_54:
  v78 = v170;
  v123(v124, v102);
  v123(v114, v102);
  v70 = v172;
  v98 = v175;
LABEL_55:
  v27 = v171;
  v98(v78, v171);
  v98(v70, v27);
  v45 = v176;
LABEL_56:
  swift_bridgeObjectRelease();
  v28 = v168;
  v127 = v45;
  v43 = v146;
  (*(void (**)(char *, char *, uint64_t))(v168 + 32))(v146, v127, v27);
  v126 = 0;
LABEL_57:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v43, v126, 1, v27);
  if (one-time initialization token for executor != -1)
    swift_once();
  v128 = type metadata accessor for Logger();
  __swift_project_value_buffer(v128, (uint64_t)static Logger.executor);
  v129 = v143;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v43, v143, &demangling cache variable for type metadata for UsoEntitySpan?);
  v130 = Logger.logObject.getter();
  v131 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v130, v131))
  {
    v132 = (uint8_t *)swift_slowAlloc();
    v133 = swift_slowAlloc();
    v182 = v133;
    *(_DWORD *)v132 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v129, v140, &demangling cache variable for type metadata for UsoEntitySpan?);
    v134 = String.init<A>(describing:)();
    v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v135, &v182);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v129, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B4BE6000, v130, v131, "HomeAutomationAffinityScorer - Found HomeKitSpan with FuzzyMatch %s", v132, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v133, -1, -1);
    MEMORY[0x1B5E44758](v132, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v129, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  v136 = (uint64_t)v146;
  v137 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v146, 1, v27) != 1;
  outlined destroy of ReferenceResolutionClientProtocol?(v136, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v137;
}

BOOL specialized HomeAutomationAffinityScorer.hasPlaceHintMatch(_:)(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int *v30;
  Swift::Int v31;
  Swift::Int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint8_t *v43;
  _BOOL8 v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v61 = type metadata accessor for SpanProperty();
  v63 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61);
  v3 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UsoEntitySpan();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  v8 = MEMORY[0x1E0C80A78](v48);
  v47 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v49 = (char *)&v46 - v11;
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v46 - v12;
  v58 = *(_QWORD *)(a1 + 16);
  v50 = (char *)&v46 - v12;
  if (v58)
  {
    v55 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v14 = *(_QWORD *)(v5 + 72);
    v53 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v54 = v14;
    v46 = a1;
    swift_bridgeObjectRetain();
    v15 = 0;
    v51 = v4;
    v52 = 0x80000001B4EF5030;
    v56 = v7;
    v57 = v5;
    while (1)
    {
      v60 = v15;
      v53(v7, v55 + v54 * v15, v4);
      v16 = UsoEntitySpan.properties.getter();
      v17 = *(_QWORD *)(v16 + 16);
      if (v17)
      {
        v64 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
        v18 = *(unsigned __int8 *)(v63 + 80);
        v59 = v16;
        v19 = v16 + ((v18 + 32) & ~v18);
        v62 = *(_QWORD *)(v63 + 72);
        v20 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
        do
        {
          v21 = v61;
          v20(v3, v19, v61);
          v22 = SpanProperty.key.getter();
          v24 = v23;
          (*(void (**)(char *, uint64_t))(v63 + 8))(v3, v21);
          v25 = v64;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v25 + 16) + 1, 1);
            v25 = v64;
          }
          v27 = *(_QWORD *)(v25 + 16);
          v26 = *(_QWORD *)(v25 + 24);
          if (v27 >= v26 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
            v25 = v64;
          }
          *(_QWORD *)(v25 + 16) = v27 + 1;
          v28 = v25 + 16 * v27;
          *(_QWORD *)(v28 + 32) = v22;
          *(_QWORD *)(v28 + 40) = v24;
          v19 += v62;
          --v17;
        }
        while (v17);
        swift_bridgeObjectRelease();
        v4 = v51;
      }
      else
      {
        swift_bridgeObjectRelease();
        v25 = MEMORY[0x1E0DEE9D8];
      }
      v65 = Set.init(minimumCapacity:)();
      v29 = *(_QWORD *)(v25 + 16);
      if (v29)
      {
        v30 = (Swift::Int *)(v25 + 40);
        do
        {
          v31 = *(v30 - 1);
          v32 = *v30;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v64, v31, v32);
          swift_bridgeObjectRelease();
          v30 += 2;
          --v29;
        }
        while (v29);
      }
      swift_bridgeObjectRelease();
      v33 = specialized Set.contains(_:)(0xD000000000000017, v52, v65);
      swift_bridgeObjectRelease();
      if ((v33 & 1) != 0)
        break;
      v15 = v60 + 1;
      v7 = v56;
      v5 = v57;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v4);
      if (v15 == v58)
      {
        swift_bridgeObjectRelease();
        v34 = 1;
        v13 = v50;
        goto LABEL_20;
      }
    }
    swift_bridgeObjectRelease();
    v5 = v57;
    v13 = v50;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v50, v56, v4);
    v34 = 0;
  }
  else
  {
    v34 = 1;
  }
LABEL_20:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v13, v34, 1, v4);
  v35 = (uint64_t)v49;
  if (one-time initialization token for executor != -1)
    swift_once();
  v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v13, v35, &demangling cache variable for type metadata for UsoEntitySpan?);
  v37 = Logger.logObject.getter();
  v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc();
    v40 = swift_slowAlloc();
    v64 = v40;
    *(_DWORD *)v39 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v35, v47, &demangling cache variable for type metadata for UsoEntitySpan?);
    v41 = String.init<A>(describing:)();
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v35, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B4BE6000, v37, v38, "HomeAutomationAffinityScorer - Found HomeAutomation PlaceHint: %s", v39, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v40, -1, -1);
    v43 = v39;
    v13 = v50;
    MEMORY[0x1B5E44758](v43, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v35, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  v44 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) != 1;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v44;
}

uint64_t specialized HomeAutomationAffinityScorer.isiOSLockRequest(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  Swift::Int *v27;
  Swift::Int v28;
  Swift::Int v29;
  char v30;
  char v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;

  v2 = type metadata accessor for SpanProperty();
  v3 = *(_QWORD *)(v2 - 8);
  v48 = v2;
  v49 = v3;
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UsoEntitySpan();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = *(_QWORD *)(a1 + 16);
  if (v44)
  {
    v43 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v10 = *(_QWORD *)(v7 + 72);
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v42 = v10;
    v37 = a1;
    swift_bridgeObjectRetain();
    v11 = 0;
    v39 = v7;
    v40 = v6;
    v38 = v9;
    do
    {
      v47 = v11;
      v41(v9, v43 + v42 * v11, v6);
      if (one-time initialization token for kLockRelatedValues != -1)
        swift_once();
      v46 = static HomeAutomationAffinityScorer.kLockRelatedValues;
      v12 = UsoEntitySpan.properties.getter();
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        v14 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
        v45 = v12;
        v15 = v12 + v14;
        v16 = *(_QWORD *)(v49 + 72);
        v17 = *(void (**)(char *, unint64_t, uint64_t))(v49 + 16);
        v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        do
        {
          v20 = v48;
          v17(v5, v15, v48);
          v21 = SpanProperty.valueString.getter();
          v23 = v22;
          (*(void (**)(char *, uint64_t))(v49 + 8))(v5, v20);
          if (v23)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
            v25 = v18[2];
            v24 = v18[3];
            if (v25 >= v24 >> 1)
              v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v18);
            v18[2] = v25 + 1;
            v19 = &v18[2 * v25];
            v19[4] = v21;
            v19[5] = v23;
          }
          v15 += v16;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease();
        v7 = v39;
        v6 = v40;
        v9 = v38;
      }
      else
      {
        swift_bridgeObjectRelease();
        v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      v51 = Set.init(minimumCapacity:)();
      v26 = v18[2];
      if (v26)
      {
        v27 = v18 + 5;
        do
        {
          v28 = *(v27 - 1);
          v29 = *v27;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v50, v28, v29);
          swift_bridgeObjectRelease();
          v27 += 2;
          --v26;
        }
        while (v26);
      }
      swift_bridgeObjectRelease();
      v30 = specialized Set.isDisjoint(with:)(v51, v46);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v30 & 1) == 0)
        break;
      v11 = v47 + 1;
    }
    while (v47 + 1 != v44);
    v31 = v30 ^ 1;
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = 0;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v35 = 67109120;
    LODWORD(v50) = v31 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v33, v34, "HomeAutomationAffinityScorer - haMatchConditions.isiOSLockRequest %{BOOL}d ", v35, 8u);
    MEMORY[0x1B5E44758](v35, -1, -1);
  }

  return v31 & 1;
}

uint64_t specialized HomeAutomationAffinityScorer.scoreSummariseSetting(usoTask:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int *v47;
  Swift::Int v48;
  Swift::Int v49;
  char v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v56;
  int v57;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(_QWORD, _QWORD, _QWORD);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::Int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  BOOL v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  BOOL v88;
  uint64_t inited;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char v97;
  uint64_t v98;
  int64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void (*v103)(char *, unint64_t, uint64_t);
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  Swift::Int *v119;
  Swift::Int v120;
  Swift::Int v121;
  Swift::Int v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  BOOL v127;
  uint64_t v128;
  _QWORD *v129;
  BOOL v130;
  char isUniquelyReferenced_nonNull_native;
  char v132;
  void (*v133)(char *, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(char *, uint64_t, uint64_t);
  _QWORD *v140;
  char *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  Swift::Int *v155;
  Swift::Int v156;
  Swift::Int v157;
  Swift::Int v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  BOOL v163;
  uint64_t v164;
  _QWORD *v165;
  BOOL v166;
  char v167;
  char v168;
  void (*v169)(char *, uint64_t);
  unint64_t v170;
  _QWORD *v171;
  BOOL v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  os_log_type_t v176;
  uint8_t *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  NSObject *v182;
  os_log_type_t v183;
  uint8_t *v184;
  _QWORD v185[2];
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  char *v197;
  char *v198;
  char *v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  void (*v205)(char *, unint64_t, uint64_t);
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  void (*v214)(_QWORD, _QWORD, _QWORD);
  uint64_t v215;
  Swift::Int v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220[4];
  uint64_t v221;

  *(_QWORD *)&v196 = a2;
  v2 = type metadata accessor for IdentifierNamespace();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v198 = (char *)v185 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = type metadata accessor for IdentifierAppBundle();
  v210 = *(_QWORD *)(v211 - 8);
  MEMORY[0x1E0C80A78](v211);
  v209 = (char *)v185 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SpanProperty();
  v7 = *(_QWORD *)(v6 - 8);
  v218 = v6;
  v219 = v7;
  v8 = MEMORY[0x1E0C80A78](v6);
  v197 = (char *)v185 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v217 = (char *)v185 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  MEMORY[0x1E0C80A78](v11);
  v199 = (char *)v185 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UsoEntitySpan();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)v185 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v213 = (char *)v185 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)v185 - v21;
  v23 = MEMORY[0x1E0C80A78](v20);
  v25 = (char *)v185 - v24;
  MEMORY[0x1E0C80A78](v23);
  v200 = (char *)v185 - v26;
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v220[3])
  {
    v52 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    v53 = v220;
LABEL_23:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v53, v52);
    return 5;
  }
  type metadata accessor for UsoTask_summarise_common_Setting();
  if ((swift_dynamicCast() & 1) == 0)
    return 5;
  v195 = v3;
  v27 = v221;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  swift_release();
  if (!v220[0]
    || (v28 = dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)(), swift_release(), !v28))
  {
LABEL_24:
    swift_release();
    return 5;
  }
  v193 = v27;
  v29 = *(_QWORD *)(v28 + 16);
  v203 = v13;
  v202 = v14;
  v201 = v17;
  v212 = v22;
  v208 = v29;
  if (v29)
  {
    v194 = v2;
    v207 = v28 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v206 = *(_QWORD *)(v14 + 72);
    v205 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    v192 = v28;
    swift_bridgeObjectRetain();
    v30 = 0;
    v204 = v25;
    while (1)
    {
      v215 = v30;
      v205(v25, v207 + v206 * v30, v13);
      v216 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of HomeAutomationAffinityScorer.scoreSummariseSetting(usoTask:_:));
      swift_arrayDestroy();
      v31 = UsoEntitySpan.properties.getter();
      v32 = *(_QWORD *)(v31 + 16);
      if (v32)
      {
        v220[0] = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0);
        v33 = (*(unsigned __int8 *)(v219 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v219 + 80);
        v214 = (void (*)(_QWORD, _QWORD, _QWORD))v31;
        v34 = v31 + v33;
        v35 = *(_QWORD *)(v219 + 72);
        v36 = *(void (**)(char *, unint64_t, uint64_t))(v219 + 16);
        do
        {
          v37 = v217;
          v38 = v218;
          v36(v217, v34, v218);
          v39 = SpanProperty.key.getter();
          v41 = v40;
          (*(void (**)(char *, uint64_t))(v219 + 8))(v37, v38);
          v42 = v220[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v42 + 16) + 1, 1);
            v42 = v220[0];
          }
          v44 = *(_QWORD *)(v42 + 16);
          v43 = *(_QWORD *)(v42 + 24);
          if (v44 >= v43 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
            v42 = v220[0];
          }
          *(_QWORD *)(v42 + 16) = v44 + 1;
          v45 = v42 + 16 * v44;
          *(_QWORD *)(v45 + 32) = v39;
          *(_QWORD *)(v45 + 40) = v41;
          v34 += v35;
          --v32;
        }
        while (v32);
        swift_bridgeObjectRelease();
        v13 = v203;
        v14 = v202;
        v17 = v201;
        v22 = v212;
      }
      else
      {
        swift_bridgeObjectRelease();
        v42 = MEMORY[0x1E0DEE9D8];
      }
      v221 = Set.init(minimumCapacity:)();
      v46 = *(_QWORD *)(v42 + 16);
      if (v46)
      {
        v47 = (Swift::Int *)(v42 + 40);
        do
        {
          v48 = *(v47 - 1);
          v49 = *v47;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(v220, v48, v49);
          swift_bridgeObjectRelease();
          v47 += 2;
          --v46;
        }
        while (v46);
      }
      swift_bridgeObjectRelease();
      v50 = specialized Set.isDisjoint(with:)(v221, v216);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v50 & 1) == 0)
        break;
      v30 = v215 + 1;
      v25 = v204;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v204, v13);
      if (v30 == v208)
      {
        swift_bridgeObjectRelease();
        v51 = 1;
        v2 = v194;
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRelease();
    v56 = (uint64_t *)v199;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v199, v204, v13);
    v51 = 0;
    v2 = v194;
  }
  else
  {
    v51 = 1;
LABEL_28:
    v56 = (uint64_t *)v199;
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v56, v51, 1, v13);
  swift_bridgeObjectRelease();
  v57 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v56, 1, v13);
  v58 = v200;
  if (v57 == 1)
  {
    swift_release();
    v52 = &demangling cache variable for type metadata for UsoEntitySpan?;
    v53 = v56;
    goto LABEL_23;
  }
  (*(void (**)(char *, uint64_t *, uint64_t))(v14 + 32))(v200, v56, v13);
  if (one-time initialization token for kSummariseSettingStrictValues != -1)
    swift_once();
  if (!UsoEntitySpan.anyPropertiesValueMatchAny(value:)(static HomeAutomationAffinityScorer.kSummariseSettingStrictValues))
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v58, v13);
    goto LABEL_24;
  }
  if ((~(_QWORD)v196 & 0x1000000010000) == 0)
  {
    if (one-time initialization token for executor == -1)
      goto LABEL_37;
    goto LABEL_161;
  }
  v63 = swift_retain();
  v64 = MEMORY[0x1B5E403C0](v63);
  swift_release();
  if (!v64)
  {
LABEL_164:
    if (one-time initialization token for executor != -1)
      swift_once();
    v181 = type metadata accessor for Logger();
    __swift_project_value_buffer(v181, (uint64_t)static Logger.executor);
    v182 = Logger.logObject.getter();
    v183 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v182, v183))
    {
      v184 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v184 = 0;
      _os_log_impl(&dword_1B4BE6000, v182, v183, "HomeAutomationAffinityScorer - [Low] Summarise setting with no mentioned HA specific user entities", v184, 2u);
      MEMORY[0x1B5E44758](v184, -1, -1);
    }
    swift_release();

    (*(void (**)(char *, uint64_t))(v14 + 8))(v200, v13);
    return 1;
  }
  v194 = v2;
  v65 = specialized Sequence.compactMap<A>(_:)(v64);
  v185[1] = 0;
  v66 = v65;
  swift_bridgeObjectRelease();
  v187 = v66;
  if (!(v66 >> 62))
  {
    v67 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v67)
      goto LABEL_45;
    goto LABEL_163;
  }
  swift_bridgeObjectRetain();
  v66 = v187;
  v67 = _CocoaArrayWrapper.endIndex.getter();
  if (!v67)
  {
LABEL_163:
    swift_bridgeObjectRelease_n();
    goto LABEL_164;
  }
LABEL_45:
  v68 = 0;
  v189 = v66 & 0xC000000000000001;
  v186 = v66 + 32;
  LODWORD(v199) = *MEMORY[0x1E0DA0F58];
  v196 = xmmword_1B4EE3F50;
  v188 = v67;
  while (1)
  {
    if (v189)
    {
      v69 = MEMORY[0x1B5E43B94](v68, v66);
    }
    else
    {
      v69 = *(_QWORD *)(v186 + 8 * v68);
      swift_retain();
    }
    v192 = v68 + 1;
    if (__OFADD__(v68, 1))
    {
      __break(1u);
LABEL_161:
      swift_once();
LABEL_37:
      v59 = type metadata accessor for Logger();
      __swift_project_value_buffer(v59, (uint64_t)static Logger.executor);
      v60 = Logger.logObject.getter();
      v61 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v62 = 0;
        _os_log_impl(&dword_1B4BE6000, v60, v61, "HomeAutomationAffinityScorer - [High] USO entity spans satisfy condition:\n(GeneralNamespaceMatches || ExactNameSpaceMatch) && PlaceHintGeneralMatches", v62, 2u);
        MEMORY[0x1B5E44758](v62, -1, -1);
      }
      swift_release();

      (*(void (**)(char *, uint64_t))(v14 + 8))(v200, v13);
      return 3;
    }
    v70 = dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)();
    if (!v70)
      v70 = MEMORY[0x1E0DEE9D8];
    v208 = *(_QWORD *)(v70 + 16);
    if (v208)
      break;
    swift_release();
    swift_bridgeObjectRelease();
LABEL_47:
    v68 = v192;
    if (v192 == v188)
      goto LABEL_163;
  }
  v191 = v69;
  v207 = v70 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v190 = v70;
  swift_bridgeObjectRetain();
  v71 = 0;
  v206 = *(_QWORD *)(v14 + 72);
  v72 = *(void (**)(_QWORD, _QWORD, _QWORD))(v14 + 16);
  v214 = v72;
  while (1)
  {
    v215 = v71;
    v72(v22, v207 + v206 * v71, v13);
    if (one-time initialization token for kAppBundleIdMatches != -1)
      swift_once();
    v73 = static HomeAutomationAffinityScorer.kAppBundleIdMatches;
    v74 = v209;
    UsoEntitySpan.appBundleSemantic.getter();
    v75 = IdentifierAppBundle.rawValue.getter();
    v77 = v76;
    (*(void (**)(char *, uint64_t))(v210 + 8))(v74, v211);
    if (!*(_QWORD *)(v73 + 16))
      goto LABEL_76;
    Hasher.init(_seed:)();
    String.hash(into:)();
    v78 = Hasher._finalize()();
    v79 = -1 << *(_BYTE *)(v73 + 32);
    v80 = v78 & ~v79;
    v81 = v73 + 56;
    if (((*(_QWORD *)(v73 + 56 + ((v80 >> 3) & 0xFFFFFFFFFFFFF8)) >> v80) & 1) == 0)
      goto LABEL_75;
    v82 = *(_QWORD *)(v73 + 48);
    v83 = (_QWORD *)(v82 + 16 * v80);
    v84 = *v83 == v75 && v83[1] == v77;
    if (!v84 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v85 = ~v79;
      v86 = (v80 + 1) & ~v79;
      if (((*(_QWORD *)(v81 + ((v86 >> 3) & 0xFFFFFFFFFFFFF8)) >> v86) & 1) == 0)
      {
LABEL_75:
        v22 = v212;
LABEL_76:
        swift_bridgeObjectRelease();
        v96 = v213;
        v72 = v214;
        v214(v213, v22, v13);
        v97 = 0;
        goto LABEL_109;
      }
      v87 = (_QWORD *)(v82 + 16 * v86);
      v88 = *v87 == v75 && v87[1] == v77;
      if (!v88 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v170 = (v86 + 1) & v85;
        v22 = v212;
        if (((*(_QWORD *)(v81 + ((v170 >> 3) & 0xFFFFFFFFFFFFF8)) >> v170) & 1) == 0)
          goto LABEL_76;
        while (1)
        {
          v171 = (_QWORD *)(v82 + 16 * v170);
          v172 = *v171 == v75 && v171[1] == v77;
          if (v172 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          v170 = (v170 + 1) & v85;
          if (((*(_QWORD *)(v81 + ((v170 >> 3) & 0xFFFFFFFFFFFFF8)) >> v170) & 1) == 0)
            goto LABEL_76;
        }
      }
    }
    swift_bridgeObjectRelease();
    v214(v213, v212, v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v196;
    v90 = v195;
    v91 = v198;
    v92 = v194;
    (*(void (**)(char *, _QWORD, uint64_t))(v195 + 104))(v198, v199, v194);
    v93 = IdentifierNamespace.rawValue.getter();
    v95 = v94;
    (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v92);
    *(_QWORD *)(inited + 32) = v93;
    *(_QWORD *)(inited + 40) = v95;
    if (*(_QWORD *)(inited + 16))
      v205 = (void (*)(char *, unint64_t, uint64_t))specialized Set.init(_nonEmptyArrayLiteral:)(inited);
    else
      v205 = (void (*)(char *, unint64_t, uint64_t))MEMORY[0x1E0DEE9E8];
    swift_setDeallocating();
    swift_arrayDestroy();
    v98 = UsoEntitySpan.properties.getter();
    v99 = *(_QWORD *)(v98 + 16);
    if (v99)
    {
      v220[0] = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v99, 0);
      v100 = (*(unsigned __int8 *)(v219 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v219 + 80);
      v216 = v98;
      v101 = v98 + v100;
      v102 = *(_QWORD *)(v219 + 72);
      v103 = *(void (**)(char *, unint64_t, uint64_t))(v219 + 16);
      do
      {
        v104 = v217;
        v105 = v218;
        v103(v217, v101, v218);
        v106 = SpanProperty.key.getter();
        v108 = v107;
        (*(void (**)(char *, uint64_t))(v219 + 8))(v104, v105);
        v109 = v220[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v109 + 16) + 1, 1);
          v109 = v220[0];
        }
        v111 = *(_QWORD *)(v109 + 16);
        v110 = *(_QWORD *)(v109 + 24);
        if (v111 >= v110 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v110 > 1, v111 + 1, 1);
          v109 = v220[0];
        }
        *(_QWORD *)(v109 + 16) = v111 + 1;
        v112 = v109 + 16 * v111;
        *(_QWORD *)(v112 + 32) = v106;
        *(_QWORD *)(v112 + 40) = v108;
        v101 += v102;
        --v99;
      }
      while (v99);
      swift_bridgeObjectRelease();
      v13 = v203;
      v113 = v202;
    }
    else
    {
      v113 = v14;
      swift_bridgeObjectRelease();
      v109 = MEMORY[0x1E0DEE9D8];
    }
    v114 = Set.init(minimumCapacity:)();
    v115 = v114;
    if (*(_QWORD *)(v109 + 16))
    {
      v116 = *(_QWORD *)(v109 + 16);
      v117 = 0;
      v216 = v109 + 32;
      v118 = v114 + 56;
      while (1)
      {
        v119 = (Swift::Int *)(v216 + 16 * v117);
        v121 = *v119;
        v120 = v119[1];
        ++v117;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v122 = Hasher._finalize()();
        v123 = -1 << *(_BYTE *)(v115 + 32);
        v124 = v122 & ~v123;
        if (((*(_QWORD *)(v118 + ((v124 >> 3) & 0xFFFFFFFFFFFFF8)) >> v124) & 1) == 0)
          goto LABEL_104;
        v125 = *(_QWORD *)(v115 + 48);
        v126 = (_QWORD *)(v125 + 16 * v124);
        v127 = *v126 == v121 && v126[1] == v120;
        if (v127 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_89:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v117 == v116)
            goto LABEL_106;
        }
        else
        {
          v128 = ~v123;
          while (1)
          {
            v124 = (v124 + 1) & v128;
            if (((*(_QWORD *)(v118 + ((v124 >> 3) & 0xFFFFFFFFFFFFF8)) >> v124) & 1) == 0)
              break;
            v129 = (_QWORD *)(v125 + 16 * v124);
            v130 = *v129 == v121 && v129[1] == v120;
            if (v130 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_89;
          }
LABEL_104:
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v220[0] = v115;
          swift_bridgeObjectRetain();
          specialized _NativeSet.insertNew(_:at:isUnique:)(v121, v120, v124, isUniquelyReferenced_nonNull_native);
          v115 = v220[0];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v117 == v116)
          {
LABEL_106:
            swift_bridgeObjectRelease();
            v13 = v203;
            v14 = v202;
            goto LABEL_108;
          }
          v118 = v115 + 56;
        }
      }
    }
    swift_bridgeObjectRelease();
    v14 = v113;
LABEL_108:
    v132 = specialized Set.isDisjoint(with:)(v115, (uint64_t)v205);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v97 = v132 ^ 1;
    v17 = v201;
    v96 = v213;
    v22 = v212;
    v72 = v214;
LABEL_109:
    v133 = *(void (**)(char *, uint64_t))(v14 + 8);
    v133(v96, v13);
    v72(v17, v22, v13);
    if ((v97 & 1) != 0)
      break;
    v133(v17, v13);
    v133(v22, v13);
LABEL_57:
    v71 = v215 + 1;
    if (v215 + 1 == v208)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      v66 = v187;
      goto LABEL_47;
    }
  }
  if (one-time initialization token for kHKEntityTypes != -1)
    swift_once();
  v205 = (void (*)(char *, unint64_t, uint64_t))v133;
  v204 = (char *)static HomeAutomationAffinityScorer.kHKEntityTypes;
  v134 = UsoEntitySpan.properties.getter();
  v135 = *(_QWORD *)(v134 + 16);
  if (v135)
  {
    v136 = *(unsigned __int8 *)(v219 + 80);
    v216 = v134;
    v137 = v134 + ((v136 + 32) & ~v136);
    v138 = *(_QWORD *)(v219 + 72);
    v139 = *(void (**)(char *, uint64_t, uint64_t))(v219 + 16);
    v140 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v141 = v197;
    do
    {
      v143 = v218;
      v139(v141, v137, v218);
      v144 = SpanProperty.valueString.getter();
      v146 = v145;
      (*(void (**)(char *, uint64_t))(v219 + 8))(v141, v143);
      if (v146)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v140 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v140[2] + 1, 1, v140);
        v148 = v140[2];
        v147 = v140[3];
        if (v148 >= v147 >> 1)
          v140 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v147 > 1), v148 + 1, 1, v140);
        v140[2] = v148 + 1;
        v142 = &v140[2 * v148];
        v142[4] = v144;
        v142[5] = v146;
      }
      v137 += v138;
      --v135;
    }
    while (v135);
    swift_bridgeObjectRelease();
    v13 = v203;
    v149 = v202;
    v17 = v201;
  }
  else
  {
    v149 = v14;
    swift_bridgeObjectRelease();
    v140 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v150 = Set.init(minimumCapacity:)();
  v151 = v150;
  if (v140[2])
  {
    v152 = v140[2];
    v153 = 0;
    v216 = (Swift::Int)(v140 + 4);
    v154 = v150 + 56;
    while (1)
    {
      v155 = (Swift::Int *)(v216 + 16 * v153);
      v157 = *v155;
      v156 = v155[1];
      ++v153;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v158 = Hasher._finalize()();
      v159 = -1 << *(_BYTE *)(v151 + 32);
      v160 = v158 & ~v159;
      if (((*(_QWORD *)(v154 + ((v160 >> 3) & 0xFFFFFFFFFFFFF8)) >> v160) & 1) == 0)
        goto LABEL_140;
      v161 = *(_QWORD *)(v151 + 48);
      v162 = (_QWORD *)(v161 + 16 * v160);
      v163 = *v162 == v157 && v162[1] == v156;
      if (v163 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_125:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v153 == v152)
          goto LABEL_142;
      }
      else
      {
        v164 = ~v159;
        while (1)
        {
          v160 = (v160 + 1) & v164;
          if (((*(_QWORD *)(v154 + ((v160 >> 3) & 0xFFFFFFFFFFFFF8)) >> v160) & 1) == 0)
            break;
          v165 = (_QWORD *)(v161 + 16 * v160);
          v166 = *v165 == v157 && v165[1] == v156;
          if (v166 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_125;
        }
LABEL_140:
        swift_bridgeObjectRelease();
        v167 = swift_isUniquelyReferenced_nonNull_native();
        v220[0] = v151;
        swift_bridgeObjectRetain();
        specialized _NativeSet.insertNew(_:at:isUnique:)(v157, v156, v160, v167);
        v151 = v220[0];
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v153 == v152)
        {
LABEL_142:
          swift_bridgeObjectRelease();
          v13 = v203;
          v14 = v202;
          v17 = v201;
          goto LABEL_144;
        }
        v154 = v151 + 56;
      }
    }
  }
  swift_bridgeObjectRelease();
  v14 = v149;
LABEL_144:
  v168 = specialized Set.isDisjoint(with:)(v151, (uint64_t)v204);
  swift_bridgeObjectRelease();
  v169 = (void (*)(char *, uint64_t))v205;
  ((void (*)(char *, uint64_t))v205)(v17, v13);
  v22 = v212;
  v169(v212, v13);
  v72 = v214;
  if ((v168 & 1) != 0)
    goto LABEL_57;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for executor != -1)
    swift_once();
  v173 = type metadata accessor for Logger();
  __swift_project_value_buffer(v173, (uint64_t)static Logger.executor);
  v174 = v191;
  swift_retain_n();
  v175 = Logger.logObject.getter();
  v176 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v175, v176))
  {
    v177 = (uint8_t *)swift_slowAlloc();
    v178 = swift_slowAlloc();
    v220[0] = v178;
    *(_DWORD *)v177 = 136315138;
    v221 = v174;
    type metadata accessor for UsoEntity_common_UserEntity();
    swift_retain();
    v179 = String.init<A>(describing:)();
    v221 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v179, v180, v220);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v175, v176, "HomeAutomationAffinityScorer - [High] Summarise setting with salient HA entity %s", v177, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v178, -1, -1);
    MEMORY[0x1B5E44758](v177, -1, -1);
    swift_release();
    swift_release();

    ((void (*)(char *, uint64_t))v205)(v200, v13);
    return 3;
  }
  swift_release();
  v54 = 3;
  swift_release_n();

  v169(v200, v13);
  return v54;
}

uint64_t specialized HomeAutomationAffinityScorer.isOverrideScore(_:_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  _QWORD v48[2];
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RRCandidate();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)v48 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v48 - v14;
  if ((a2 & 0x100000000000000) != 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v31 = 67109120;
      LODWORD(v51) = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B4BE6000, v29, v30, "HomeAutomationAffinityScorer - usoEntitySpansConditions.visionOSExceptionWordMatch is %{BOOL}d", v31, 8u);
      MEMORY[0x1B5E44758](v31, -1, -1);
    }

    return 0;
  }
  if ((a2 & 0x10000) != 0)
  {
    if ((a2 & 0x1000000) != 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.executor);
      v35 = Logger.logObject.getter();
      v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v37 = 0;
        _os_log_impl(&dword_1B4BE6000, v35, v36, "HomeAutomationAffinityScorer - [Override] USO entity spans satisfy condition:\n(GeneralNamespaceMatches || ExactNameSpaceMatch) && HomeKitEntityType.ExactMatch", v37, 2u);
        MEMORY[0x1B5E44758](v37, -1, -1);
      }

      return 1;
    }
    v16 = UsoTask.arguments.getter();
    if (*(_QWORD *)(v16 + 16))
    {
      v17 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
      if ((v18 & 1) != 0)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v19 >> 62)
        {
          swift_bridgeObjectRetain();
          v47 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v47)
          {
LABEL_8:
            if ((v19 & 0xC000000000000001) != 0)
            {
              MEMORY[0x1B5E43B94](0, v19);
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRelease();
              if (!v20)
              {
                __break(1u);
LABEL_41:
                swift_once();
LABEL_34:
                v38 = type metadata accessor for Logger();
                __swift_project_value_buffer(v38, (uint64_t)static Logger.executor);
                (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v15, v6);
                v39 = Logger.logObject.getter();
                v40 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v39, v40))
                {
                  v41 = (uint8_t *)swift_slowAlloc();
                  v42 = swift_slowAlloc();
                  v51 = v42;
                  *(_DWORD *)v41 = 136315138;
                  v49 = v41 + 4;
                  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3D70], MEMORY[0x1E0DA3D80]);
                  v43 = dispatch thunk of CustomStringConvertible.description.getter();
                  v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v51);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  v45 = *(void (**)(char *, uint64_t))(v7 + 8);
                  v45(v10, v6);
                  _os_log_impl(&dword_1B4BE6000, v39, v40, "HomeAutomationAffinityScorer - [Override] USO entity spans satisfy condition:\n(GeneralNamespaceMatches || ExactNameSpaceMatch) && HasSRRMatch %s", v41, 0xCu);
                  v32 = 1;
                  swift_arrayDestroy();
                  MEMORY[0x1B5E44758](v42, -1, -1);
                  MEMORY[0x1B5E44758](v41, -1, -1);

                  v45(v15, v6);
                  return v32;
                }

                v46 = *(void (**)(char *, uint64_t))(v7 + 8);
                v46(v10, v6);
                v46(v15, v6);
                return 1;
              }
            }
            SiriEnvironment.salientEntitiesProvider.getter();
            v21 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
            swift_release();
            v22 = *(_QWORD *)(v21 + 16);
            if (v22)
            {
              v23 = v21 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
              v24 = *(uint8_t **)(v7 + 72);
              v25 = v21;
              v26 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
              v48[1] = v25;
              v49 = v24;
              swift_bridgeObjectRetain();
              while (1)
              {
                v26(v13, v23, v6);
                if ((closure #1 in HomeAutomationAffinityScorer.isOverrideScore(_:_:_:)((uint64_t)v13, 1701667182, 0xE400000000000000) & 1) != 0)break;
                (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
                v23 += (unint64_t)v49;
                if (!--v22)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_15;
                }
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v5, v13, v6);
              v27 = 0;
            }
            else
            {
LABEL_15:
              v27 = 1;
            }
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v27, 1, v6);
            swift_bridgeObjectRelease();
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
            {
              outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for RRCandidate?);
              return 0;
            }
            (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v5, v6);
            if (one-time initialization token for executor == -1)
              goto LABEL_34;
            goto LABEL_41;
          }
        }
        else if (*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_8;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t specialized HomeAutomationAffinityScorer.isHighScore(_:_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v3 = ~(_DWORD)a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RRCandidate();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v48 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v48 - v15;
  if ((v3 & 0x101) != 0)
  {
    if ((~a2 & 0x1000000010000) == 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v18, v19))
        goto LABEL_26;
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      v21 = "HomeAutomationAffinityScorer - [High] USO entity spans satisfy condition:\n"
            "(GeneralNamespaceMatches || ExactNameSpaceMatch) && PlaceHintGeneralMatches";
      goto LABEL_25;
    }
    if ((a2 & 0x1000000) != 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v18, v19))
        goto LABEL_26;
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      v21 = "HomeAutomationAffinityScorer - [High] USO entity spans satisfy condition:\nHomeKitEntityType.ExactMatch";
      goto LABEL_25;
    }
    v23 = UsoTask.arguments.getter();
    if (*(_QWORD *)(v23 + 16))
    {
      v24 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
      if ((v25 & 1) != 0)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v26 >> 62)
        {
          swift_bridgeObjectRetain();
          v47 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v47)
          {
LABEL_16:
            if ((v26 & 0xC000000000000001) != 0)
            {
              v3 = MEMORY[0x1B5E43B94](0, v26);
            }
            else
            {
              if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_49;
              }
              v3 = *(_QWORD *)(v26 + 32);
              swift_retain();
            }
            swift_bridgeObjectRelease();
            v27 = *(_QWORD *)(dispatch thunk of UsoValue.getEntitySpans()() + 16);
            swift_bridgeObjectRelease();
            if (v27)
            {
              swift_release();
              return 0;
            }
            SiriEnvironment.salientEntitiesProvider.getter();
            v31 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
            swift_release();
            v32 = *(_QWORD *)(v31 + 16);
            if (v32)
            {
              v49 = v3;
              v33 = v31 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
              v50 = *(_QWORD *)(v8 + 72);
              v34 = v31;
              v35 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
              v48 = v34;
              swift_bridgeObjectRetain();
              while (1)
              {
                v35(v14, v33, v7);
                if ((closure #1 in HomeAutomationAffinityScorer.isOverrideScore(_:_:_:)((uint64_t)v14, 0x73656D616ELL, 0xE500000000000000) & 1) != 0)break;
                (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
                v33 += v50;
                if (!--v32)
                {
                  swift_bridgeObjectRelease();
                  v36 = 1;
                  goto LABEL_38;
                }
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v6, v14, v7);
              v36 = 0;
LABEL_38:
              v3 = v49;
            }
            else
            {
              v36 = 1;
            }
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v36, 1, v7);
            swift_bridgeObjectRelease();
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
            {
              swift_release();
              outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for RRCandidate?);
              return 0;
            }
            (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v6, v7);
            if (one-time initialization token for executor == -1)
            {
LABEL_42:
              v37 = type metadata accessor for Logger();
              __swift_project_value_buffer(v37, (uint64_t)static Logger.executor);
              (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v16, v7);
              v38 = Logger.logObject.getter();
              v39 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v38, v39))
              {
                v40 = swift_slowAlloc();
                v49 = v3;
                v41 = (uint8_t *)v40;
                v50 = swift_slowAlloc();
                v52 = v50;
                *(_DWORD *)v41 = 136315138;
                lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3D70], MEMORY[0x1E0DA3D80]);
                v42 = dispatch thunk of CustomStringConvertible.description.getter();
                v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v52);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                v44 = *(void (**)(char *, uint64_t))(v8 + 8);
                v44(v11, v7);
                _os_log_impl(&dword_1B4BE6000, v38, v39, "HomeAutomationAffinityScorer - [High] Found salient HA entity %s", v41, 0xCu);
                v29 = 1;
                v45 = v50;
                swift_arrayDestroy();
                MEMORY[0x1B5E44758](v45, -1, -1);
                MEMORY[0x1B5E44758](v41, -1, -1);

                swift_release();
                v44(v16, v7);
                return v29;
              }

              swift_release();
              v46 = *(void (**)(char *, uint64_t))(v8 + 8);
              v46(v11, v7);
              v46(v16, v7);
              return 1;
            }
LABEL_49:
            swift_once();
            goto LABEL_42;
          }
        }
        else if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_16;
        }
      }
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v18, v19))
    goto LABEL_26;
  v20 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v20 = 0;
  v21 = "HomeAutomationAffinityScorer - [High] USO entity spans satisfy condition:\n"
        "GeneralNamespaceMatches && ExactNameSpaceMatch";
LABEL_25:
  _os_log_impl(&dword_1B4BE6000, v18, v19, v21, v20, 2u);
  MEMORY[0x1B5E44758](v20, -1, -1);
LABEL_26:

  return 1;
}

uint64_t specialized HomeAutomationAffinityScorer.isDefaultScore(_:_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  const char *v6;
  char v8;
  uint64_t v9;
  _BYTE v10[24];
  uint64_t v11;

  if ((a2 & 0x10100010000) != 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v3, v4))
      goto LABEL_7;
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    v6 = "HomeAutomationAffinityScorer - [Default] USO entity spans satisfy condition:\n"
         "GeneralNamespaceMatches || ExactNameSpaceMatch || HomeKitEntityType.FuzzyMatch || appBundleIdMatch";
LABEL_6:
    _os_log_impl(&dword_1B4BE6000, v3, v4, v6, v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
LABEL_7:

    return 1;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  if (v11)
  {
    type metadata accessor for UsoTask_disable_common_Setting();
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_release();
      SiriEnvironment.currentDevice.getter();
      v8 = dispatch thunk of CurrentDevice.isAppleTV.getter();
      swift_release();
      if ((v8 & 1) != 0)
      {
        if (one-time initialization token for executor != -1)
          swift_once();
        v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
        v3 = Logger.logObject.getter();
        v4 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v3, v4))
          goto LABEL_7;
        v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v5 = 0;
        v6 = "HomeAutomationAffinityScorer - [Default] Turn off on AppleTV case";
        goto LABEL_6;
      }
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return 0;
}

unint64_t specialized HomeAutomationAffinityScorer.HomeAutomationNamespace.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of HomeAutomationAffinityScorer.HomeAutomationNamespace.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type HomeAutomationAffinityScorer.HomeAutomationNamespace and conformance HomeAutomationAffinityScorer.HomeAutomationNamespace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type HomeAutomationAffinityScorer.HomeAutomationNamespace and conformance HomeAutomationAffinityScorer.HomeAutomationNamespace;
  if (!lazy protocol witness table cache variable for type HomeAutomationAffinityScorer.HomeAutomationNamespace and conformance HomeAutomationAffinityScorer.HomeAutomationNamespace)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for HomeAutomationAffinityScorer.HomeAutomationNamespace, &type metadata for HomeAutomationAffinityScorer.HomeAutomationNamespace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HomeAutomationAffinityScorer.HomeAutomationNamespace and conformance HomeAutomationAffinityScorer.HomeAutomationNamespace);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpanMatchAccuracy and conformance SpanMatchAccuracy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SpanMatchAccuracy and conformance SpanMatchAccuracy;
  if (!lazy protocol witness table cache variable for type SpanMatchAccuracy and conformance SpanMatchAccuracy)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for SpanMatchAccuracy, &type metadata for SpanMatchAccuracy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpanMatchAccuracy and conformance SpanMatchAccuracy);
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeAutomationAffinityScorer()
{
  return &type metadata for HomeAutomationAffinityScorer;
}

uint64_t storeEnumTagSinglePayload for HomeAutomationAffinityScorer.HomeAutomationNamespace(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1B4DFA2E4 + 4 * byte_1B4EEAF07[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1B4DFA318 + 4 * byte_1B4EEAF02[v4]))();
}

uint64_t sub_1B4DFA318(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DFA320(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4DFA328);
  return result;
}

uint64_t sub_1B4DFA334(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4DFA33CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1B4DFA340(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DFA348(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HomeAutomationAffinityScorer.HomeAutomationNamespace()
{
  return &type metadata for HomeAutomationAffinityScorer.HomeAutomationNamespace;
}

uint64_t __swift_memcpy9_1(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for HomeAutomationAffinityScorer.HAMatchConditions(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[9])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HomeAutomationAffinityScorer.HAMatchConditions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeAutomationAffinityScorer.HAMatchConditions()
{
  return &type metadata for HomeAutomationAffinityScorer.HAMatchConditions;
}

uint64_t storeEnumTagSinglePayload for SpanMatchAccuracy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B4DFA46C + 4 * byte_1B4EEAF11[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B4DFA4A0 + 4 * byte_1B4EEAF0C[v4]))();
}

uint64_t sub_1B4DFA4A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DFA4A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4DFA4B0);
  return result;
}

uint64_t sub_1B4DFA4BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4DFA4C4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B4DFA4C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DFA4D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SpanMatchAccuracy()
{
  return &type metadata for SpanMatchAccuracy;
}

uint64_t IdentifiedUser.init(userSpecificInfo:sharedUserInfo:settings:person:)@<X0>(char *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void *v35;
  id v36;
  id v38;
  id v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  unint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  id v56;
  char *v57;
  void *v58;
  char *v59;
  unsigned int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  id v66;
  char *v67;
  id v68;
  id v69;
  void *v70;
  id v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  void *v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  char *v92;
  char *v93;
  void *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;

  v10 = type metadata accessor for IdentifiedUser.Classification();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1E0C80A78](v13);
  v93 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Locale.HourCycle?);
  MEMORY[0x1E0C80A78](v15);
  v92 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Locale.Language.Components();
  MEMORY[0x1E0C80A78](v17);
  v96 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.Region?);
  MEMORY[0x1E0C80A78](v19);
  v95 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.Script?);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Locale.Components();
  v100 = *(_QWORD *)(v27 - 8);
  v101 = v27;
  v28 = MEMORY[0x1E0C80A78](v27);
  v97 = (char *)&v80 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v98 = (char *)&v80 - v30;
  v31 = type metadata accessor for IdentifiedUser();
  MEMORY[0x1E0C80A78](v31);
  v34 = (char *)&v80 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = a1;
  v94 = a2;
  if (!a1)
  {
    if (!a2 && !a3 && !a4)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(a5, 1, 1, v31);
    v91 = v32;
    IdentifiedUser.init()();
LABEL_9:
    v38 = a4;
    IdentifiedUser.person.setter();
    if (!a1)
      goto LABEL_12;
    goto LABEL_10;
  }
  v91 = v32;
  IdentifiedUser.init()();
  v35 = *(void **)&a1[OBJC_IVAR___SKEUserSpecificInfo_meCard];
  if (!v35)
    goto LABEL_9;
  v36 = v35;
  IdentifiedUser.person.setter();
LABEL_10:
  if (*(_QWORD *)&a1[OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage + 8])
  {
    v84 = *(_QWORD *)&a1[OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage + 8];
    v85 = v12;
    v83 = *(_QWORD *)&a1[OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage];
    swift_bridgeObjectRetain();
    goto LABEL_16;
  }
LABEL_12:
  v85 = v12;
  if (a3)
  {
    v39 = objc_msgSend(a3, sel_preferredLanguage);
    v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v84 = v40;
    swift_bridgeObjectRelease();

    if (!a1)
      goto LABEL_18;
  }
  else
  {
    swift_bridgeObjectRelease();
    v83 = 28261;
    v84 = 0xE200000000000000;
    if (!a1)
      goto LABEL_18;
  }
LABEL_16:
  v41 = *(_QWORD *)&a1[OBJC_IVAR___SKEUserSpecificInfo_countryCode + 8];
  if (v41)
  {
    v86 = v34;
    v87 = a3;
    v89 = v31;
    v90 = a4;
    v88 = a5;
    v81 = *(_QWORD *)&a1[OBJC_IVAR___SKEUserSpecificInfo_countryCode];
    v82 = v41;
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }
LABEL_18:
  v87 = a3;
  v88 = a5;
  v89 = v31;
  v90 = a4;
  v86 = v34;
  if (a3)
  {
    v42 = objc_msgSend(a3, sel_countryCode);
    v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v82 = v43;
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    v82 = 0xE200000000000000;
    v81 = 21333;
  }
LABEL_21:
  v44 = type metadata accessor for Locale.LanguageCode();
  v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56);
  v46 = v26;
  v45(v26, 1, 1, v44);
  v47 = type metadata accessor for Locale.Script();
  v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56);
  v48(v23, 1, 1, v47);
  v49 = type metadata accessor for Locale.Region();
  v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56);
  v51 = v95;
  v50(v95, 1, 1, v49);
  v52 = v98;
  Locale.Components.init(languageCode:script:languageRegion:)();
  Locale.LanguageCode.init(_:)();
  v45(v46, 0, 1, v44);
  v48(v23, 1, 1, v47);
  Locale.Region.init(_:)();
  v50(v51, 0, 1, v49);
  Locale.Language.Components.init(languageCode:script:region:)();
  Locale.Components.languageComponents.setter();
  v53 = v99;
  if (!v99)
  {
    v56 = v87;
    v61 = v88;
    v57 = v93;
    v58 = v94;
    v59 = v86;
    if (!v87)
      goto LABEL_28;
    v54 = v52;
    v55 = v88;
    if ((objc_msgSend(v87, sel_twentyFourHourTimeDisplay) & 1) != 0)
      goto LABEL_23;
LABEL_26:
    v60 = (unsigned int *)MEMORY[0x1E0CB0DF8];
    goto LABEL_27;
  }
  v54 = v52;
  v56 = v87;
  v55 = v88;
  v57 = v93;
  v58 = v94;
  v59 = v86;
  if (v99[OBJC_IVAR___SKEUserSpecificInfo_twentyFourHourTimeDisplay] != 1)
    goto LABEL_26;
LABEL_23:
  v60 = (unsigned int *)MEMORY[0x1E0CB0E08];
LABEL_27:
  v62 = *v60;
  v63 = type metadata accessor for Locale.HourCycle();
  v64 = v92;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 104))(v92, v62, v63);
  type metadata accessor for Locale.HourCycle();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v64, 0, 1, v63);
  Locale.Components.hourCycle.setter();
  v61 = v55;
  v52 = v54;
  v53 = v99;
LABEL_28:
  (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v97, v52, v101);
  Locale.init(components:)();
  v65 = type metadata accessor for Locale();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v57, 0, 1, v65);
  IdentifiedUser.locale.setter();
  if (v53 && *(_QWORD *)&v53[OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit + 8])
  {
    swift_bridgeObjectRetain();
    IdentifiedUser.preferredTemperatureUnitName.setter();
    goto LABEL_35;
  }
  if (v56)
  {
    v66 = objc_msgSend(v56, sel_temperatureUnit);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
  }
  IdentifiedUser.preferredTemperatureUnitName.setter();
  if (v53)
  {
LABEL_35:
    v67 = v53;
    v103 = 0;
    IdentifiedUser.voiceIDScore.setter();
    if (v67[OBJC_IVAR___SKEUserSpecificInfo_userAttribute] != 1)
      _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    IdentifiedUser.belongsToHome.setter();
    IdentifiedUser.wasSpeechProfileUsedByASR.setter();
    v102 = v67[OBJC_IVAR___SKEUserSpecificInfo_lowScoreThreshold + 4];
    IdentifiedUser.lowConfidenceThreshold.setter();
    swift_bridgeObjectRetain();
    IdentifiedUser.sharedUserId.setter();
    __asm { BR              X10 }
  }
  if (v58)
  {
    v68 = v58;
    v69 = objc_msgSend(v68, sel_iCloudAltDSID);
    if (v69)
    {
      v70 = v69;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    IdentifiedUser.iCloudAltDSID.setter();
    v71 = objc_msgSend(v68, sel_homeUserId);
    if (v71)
    {
      v72 = v71;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    IdentifiedUser.homeUserID.setter();
    IdentifiedUser.sharedUserId.getter();
    v74 = v73;
    swift_bridgeObjectRelease();
    if (!v74)
    {
      v75 = objc_msgSend(v68, sel_sharedUserId);
      if (v75)
      {
        v76 = v75;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

      }
      IdentifiedUser.sharedUserId.setter();
    }
    v77 = v68;
    IdentifiedUser.sharedUserInfo.setter();

    v52 = v98;
  }

  (*(void (**)(char *, uint64_t))(v100 + 8))(v52, v101);
  v78 = v91;
  v79 = v89;
  (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(v61, v59, v89);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v78 + 56))(v61, 0, 1, v79);
}

SiriKitRuntime::InformationAffinityScorer __swiftcall InformationAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::InformationAffinityScorer result;

  v0 = (void *)0x80000001B4EF6A80;
  v1 = 0xD000000000000024;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

void *InformationAffinityScorer.pommesConfidenceThreshold.unsafeMutableAddressor()
{
  return &static InformationAffinityScorer.pommesConfidenceThreshold;
}

double static InformationAffinityScorer.pommesConfidenceThreshold.getter()
{
  return 0.5;
}

uint64_t InformationAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for InformationAffinityScorer()
{
  return &type metadata for InformationAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type PommesSearchReason and conformance PommesSearchReason()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PommesSearchReason and conformance PommesSearchReason;
  if (!lazy protocol witness table cache variable for type PommesSearchReason and conformance PommesSearchReason)
  {
    v1 = type metadata accessor for PommesSearchReason();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0D98940], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesSearchReason and conformance PommesSearchReason);
  }
  return result;
}

uint64_t InputValueFetcher.__allocating_init(plist:)(uint64_t a1)
{
  swift_allocObject();
  return InputValueFetcher.init(plist:)(a1);
}

uint64_t InputValueFetcher.fetcherType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t InputValueFetcher.argument.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *InputValueFetcher.__allocating_init(type:argument:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  return InputValueFetcher.init(type:argument:)(a1, a2, a3);
}

_QWORD *InputValueFetcher.init(type:argument:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  int v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v28;

  v6 = (_QWORD *)v5;
  *(_BYTE *)(v5 + 16) = a1;
  if (a3)
  {
    v8 = a1;
    if (((1 << a1) & 0x83) != 0)
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for executor != -1)
        swift_once();
      v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc();
        v13 = swift_slowAlloc();
        v28 = v13;
        *(_DWORD *)v12 = 136315138;
        v14 = 0xE800000000000000;
        v15 = 0x657079546B736174;
        switch(v8)
        {
          case 0:
            break;
          case 1:
            v14 = 0xE600000000000000;
            v15 = 0x726573726170;
            break;
          case 2:
            v14 = 0xE500000000000000;
            v15 = 0x6261636F76;
            break;
          case 3:
            v15 = 0x63617073656D616ELL;
            goto LABEL_26;
          case 4:
            v14 = 0xE700000000000000;
            v26 = 0x756C6176736ELL;
            goto LABEL_28;
          case 5:
            v14 = 0xE600000000000000;
            v15 = 0x797469746E65;
            break;
          case 6:
            v15 = 0x636E657265666572;
LABEL_26:
            v14 = 0xE900000000000065;
            break;
          case 7:
            v14 = 0xE700000000000000;
            v26 = 0x707954616475;
LABEL_28:
            v15 = v26 & 0xFFFFFFFFFFFFLL | 0x65000000000000;
            break;
          default:
            goto LABEL_11;
        }
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v10, v11, "input value fetcher %s given bogus argument", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v13, -1, -1);
        MEMORY[0x1B5E44758](v12, -1, -1);
      }
LABEL_30:

      type metadata accessor for InputValueFetcher();
      swift_deallocPartialClassInstance();
      return 0;
    }
LABEL_11:
    v6[3] = a2;
    v6[4] = a3;
  }
  else
  {
    if (!v4 & v3 || ((1 << a1) & 0x83) == 0)
    {
      if (one-time initialization token for executor != -1)
        swift_once();
      v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
      v10 = Logger.logObject.getter();
      v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v24))
      {
        v25 = (_DWORD *)swift_slowAlloc();
        v28 = swift_slowAlloc();
        *v25 = 136315138;
        __asm { BR              X10 }
      }
      goto LABEL_30;
    }
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
  }
  if (one-time initialization token for executor != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  swift_retain_n();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v28 = v20;
    *(_DWORD *)v19 = 136315138;
    v21 = (*(uint64_t (**)(void))(*v6 + 112))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v17, v18, "%s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v19, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return v6;
}

uint64_t InputValueType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B4DFB668 + 4 * byte_1B4EEB1FF[a1]))(0x657079546B736174, 0xE800000000000000);
}

uint64_t sub_1B4DFB668()
{
  return 0x726573726170;
}

uint64_t sub_1B4DFB67C()
{
  return 0x6261636F76;
}

uint64_t sub_1B4DFB690()
{
  return 0x63617073656D616ELL;
}

uint64_t sub_1B4DFB6EC()
{
  return 0x65707954616475;
}

unint64_t sub_1B4DFB704()
{
  return 0xD000000000000019;
}

uint64_t InputValueType.takesArgument.getter(unsigned __int8 a1)
{
  return (a1 > 7u) | (0x7Cu >> a1) & 1;
}

uint64_t InputValueFetcher.init(plist:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  _DWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[4];
  Swift::String v41;

  v2 = v1;
  outlined init with copy of Any(a1, (uint64_t)v40);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_28;
  v40[0] = v38;
  v40[1] = v39;
  v4 = lazy protocol witness table accessor for type String and conformance String();
  v5 = (_QWORD *)MEMORY[0x1B5E43A44](58, 0xE100000000000000, 1, 1, MEMORY[0x1E0DEA968], v4);
  swift_bridgeObjectRelease();
  if (!v5[2])
    goto LABEL_4;
  v6 = v5[4];
  v7 = v5[5];
  v8 = v5[6];
  v9 = v5[7];
  swift_bridgeObjectRetain();
  v10 = MEMORY[0x1B5E4339C](v6, v7, v8, v9);
  v12 = v11;
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = v10;
  v41._object = v12;
  v13 = specialized InputValueType.init(rawValue:)(v41);
  if (v13 == 9)
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_bridgeObjectRelease();
LABEL_29:
    type metadata accessor for InputValueFetcher();
    swift_deallocPartialClassInstance();
    return 0;
  }
  *(_BYTE *)(v2 + 16) = v13;
  if (v13 > 7u || ((1 << v13) & 0x83) == 0)
  {
    if (v5[2] == 2)
    {
      v20 = v5[8];
      v21 = v5[9];
      v22 = v5[10];
      v23 = v5[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v24 = MEMORY[0x1B5E4339C](v20, v21, v22, v23);
      v26 = v25;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v2 + 24) = v24;
      *(_QWORD *)(v2 + 32) = v26;
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.executor);
    swift_retain_n();
    v17 = Logger.logObject.getter();
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v35))
    {
      v36 = (_DWORD *)swift_slowAlloc();
      v40[0] = swift_slowAlloc();
      *v36 = 136315138;
      __asm { BR              X10 }
    }
    goto LABEL_27;
  }
  v15 = v5[2];
  swift_bridgeObjectRelease();
  if (v15 != 1)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    swift_retain_n();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (_DWORD *)swift_slowAlloc();
      v40[0] = swift_slowAlloc();
      *v19 = 136315138;
      __asm { BR              X10 }
    }
LABEL_27:
    swift_release_n();

LABEL_28:
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_29;
  }
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
LABEL_17:
  if (one-time initialization token for executor != -1)
    swift_once();
  v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
  swift_retain_n();
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v40[0] = v31;
    *(_DWORD *)v30 = 136315138;
    v32 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 112))();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v28, v29, "%s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v31, -1, -1);
    MEMORY[0x1B5E44758](v30, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  __swift_destroy_boxed_opaque_existential_1(a1);
  return v2;
}

uint64_t InputValueFetcher.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  _StringGuts.grow(_:)(47);
  v0._object = (void *)0x80000001B4EFD920;
  v0._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x656D75677261202CLL;
  v1._object = (void *)0xEB000000003D746ELL;
  String.append(_:)(v1);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v2._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t InputValueFetcher.fetchValue(input:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
  v3 = specialized logAction<A>(label:_:)(v1, v2, (void (*)(_QWORD *__return_ptr, _QWORD))partial apply for closure #1 in InputValueFetcher.fetchValue(input:));
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t InputValueFetcher.internalFetchValue(input:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void (*v57)(void);
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  void *v69;
  char *v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  _BOOL4 v83;
  char *v84;
  uint8_t *v85;
  void (*v86)(char *, uint64_t, uint64_t);
  char *v87;
  void (*v88)(char *, char *, uint64_t);
  char *v89;
  char *v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125[5];

  v98 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  MEMORY[0x1E0C80A78](v98);
  v97[1] = (char *)v97 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for Siri_Nlu_External_Parser();
  v99 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101);
  v100 = (char *)v97 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v111 = *(_QWORD *)(v2 - 8);
  v112 = v2;
  MEMORY[0x1E0C80A78](v2);
  v110 = (char *)v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v105 = (char *)v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v104 = (char *)v97 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v103 = (char *)v97 - v10;
  MEMORY[0x1E0C80A78](v9);
  v118 = (char *)v97 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1E0C80A78](v12);
  v117 = (char *)v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v14);
  v109 = (char *)v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for USOParse();
  v115 = *(_QWORD *)(v16 - 8);
  v116 = v16;
  MEMORY[0x1E0C80A78](v16);
  v114 = (char *)v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Parse();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (_QWORD *)((char *)v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v23 = *(_QWORD *)(v22 - 8);
  v123 = v22;
  v124 = v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v113 = (char *)v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x1E0C80A78](v24);
  v108 = (char *)v97 - v27;
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)v97 - v29;
  v31 = MEMORY[0x1E0C80A78](v28);
  v107 = (char *)v97 - v32;
  v33 = MEMORY[0x1E0C80A78](v31);
  v106 = (char *)v97 - v34;
  MEMORY[0x1E0C80A78](v33);
  v119 = (char *)v97 - v35;
  v36 = type metadata accessor for Siri_Nlu_External_UserParse();
  v37 = *(_QWORD *)(v36 - 8);
  v38 = MEMORY[0x1E0C80A78](v36);
  v40 = (char *)v97 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x1E0C80A78](v38);
  v43 = (char *)v97 - v42;
  MEMORY[0x1E0C80A78](v41);
  v121 = (char *)v97 - v44;
  Input.parse.getter();
  v45 = (*(uint64_t (**)(_QWORD *, uint64_t))(v19 + 88))(v21, v18);
  if (v45 == *MEMORY[0x1E0D9C5E8])
  {
    (*(void (**)(_QWORD *, uint64_t))(v19 + 96))(v21, v18);
    v21 = (_QWORD *)*v21;
    v46 = (uint64_t)v117;
    static ConversionUtils.toUserParse(from:)();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v46, 1, v36) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v46, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
      if (one-time initialization token for executor != -1)
        swift_once();
      v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.executor);
      v48 = Logger.logObject.getter();
      v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v50 = 0;
        _os_log_impl(&dword_1B4BE6000, v48, v49, "Could not convert to UserDialogAct", v50, 2u);
        MEMORY[0x1B5E44758](v50, -1, -1);
      }

      swift_unknownObjectRelease();
      return 0;
    }
    v62 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v40, v46, v36);
    v63 = (*(uint64_t (**)(char *, char *, uint64_t))(v37 + 16))(v121, v40, v36);
    v64 = MEMORY[0x1B5E3FA6C](v63);
    if (*(_QWORD *)(v64 + 16))
    {
      v65 = v123;
      v66 = v124;
      v67 = v113;
      (*(void (**)(char *, unint64_t, uint64_t))(v124 + 16))(v113, v64 + ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80)), v123);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v62);
      (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v119, v67, v65);
      v97[0] = 0;
      v68 = 0;
      v69 = v122;
      v70 = v118;
      goto LABEL_32;
    }
    __break(1u);
    goto LABEL_45;
  }
  v102 = v36;
  if (v45 != *MEMORY[0x1E0D9C678])
  {
    v123 = v19;
    v124 = v18;
    v36 = v120;
    if (one-time initialization token for executor == -1)
    {
LABEL_18:
      v71 = type metadata accessor for Logger();
      __swift_project_value_buffer(v71, (uint64_t)static Logger.executor);
      swift_retain_n();
      v72 = Logger.logObject.getter();
      v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        v74 = (uint8_t *)swift_slowAlloc();
        v75 = swift_slowAlloc();
        v125[0] = v75;
        *(_DWORD *)v74 = 136315138;
        v76 = (*(uint64_t (**)(void))(*(_QWORD *)v36 + 112))();
        v125[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v72, v73, "%s: given non-USO parse, returning nil", v74, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v75, -1, -1);
        MEMORY[0x1B5E44758](v74, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      (*(void (**)(_QWORD *, uint64_t))(v123 + 8))(v21, v124);
      return 0;
    }
LABEL_45:
    swift_once();
    goto LABEL_18;
  }
  (*(void (**)(_QWORD *, uint64_t))(v19 + 96))(v21, v18);
  (*(void (**)(char *, _QWORD *, uint64_t))(v115 + 32))(v114, v21, v116);
  USOParse.userParse.getter();
  v97[0] = USOParse.appBundleId.getter();
  v117 = v51;
  v52 = USOParse.userParse.getter();
  v53 = MEMORY[0x1B5E3FA6C](v52);
  v113 = *(char **)(v37 + 8);
  ((void (*)(char *, uint64_t))v113)(v43, v102);
  v54 = *(_QWORD *)(v53 + 16);
  if (!v54)
  {
    v59 = v123;
    v61 = v124;
    v60 = (uint64_t)v109;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56))(v109, 1, 1, v123);
    goto LABEL_24;
  }
  v55 = v53 + ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80));
  v56 = *(_QWORD *)(v124 + 72);
  v57 = *(void (**)(void))(v124 + 16);
  swift_bridgeObjectRetain();
  v58 = v55;
  v59 = v123;
  do
  {
    ((void (*)(char *, unint64_t, uint64_t))v57)(v30, v58, v59);
    if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v88 = *(void (**)(char *, char *, uint64_t))(v124 + 32);
      v89 = v107;
      v88(v107, v30, v59);
      (*(void (**)(char *, uint64_t))(v115 + 8))(v114, v116);
      swift_bridgeObjectRelease();
      v90 = v106;
      v88(v106, v89, v59);
      v88(v119, v90, v59);
      v69 = v122;
      v62 = v102;
      v70 = v118;
      goto LABEL_31;
    }
    (*(void (**)(char *, uint64_t))(v124 + 8))(v30, v59);
    v58 += v56;
    --v54;
  }
  while (v54);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v53 + 16))
  {
    __break(1u);
    JUMPOUT(0x1B4DFD690);
  }
  v60 = (uint64_t)v109;
  v57();
  v61 = v124;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v124 + 56))(v60, 0, 1, v59);
LABEL_24:
  v69 = v122;
  v62 = v102;
  v70 = v118;
  v79 = v119;
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v60, 1, v59) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v60, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for executor == -1)
      goto LABEL_26;
    goto LABEL_50;
  }
  (*(void (**)(char *, uint64_t))(v115 + 8))(v114, v116);
  v86 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 32);
  v87 = v108;
  v86(v108, v60, v59);
  v86(v79, (uint64_t)v87, v59);
LABEL_31:
  v68 = v117;
LABEL_32:
  v91 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  if (v69)
  {

    goto LABEL_40;
  }
  v92 = v91;
  if (v91 >> 62)
  {
    swift_bridgeObjectRetain();
    v96 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v96)
      goto LABEL_39;
  }
  else if (!*(_QWORD *)((v91 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_39:
    swift_bridgeObjectRelease();
LABEL_40:
    if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
    {
      v117 = v68;
      v93 = v110;
      Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
      Siri_Nlu_External_UserStatedTask.task.getter();
      (*(void (**)(char *, uint64_t))(v111 + 8))(v93, v112);
      v94 = type metadata accessor for Siri_Nlu_External_UsoGraph();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 56))(v70, 0, 1, v94);
    }
    else
    {
      v95 = type metadata accessor for Siri_Nlu_External_UsoGraph();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v70, 1, 1, v95);
    }
    __asm { BR              X10 }
  }
  if ((v92 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v92);
    goto LABEL_39;
  }
  if (*(_QWORD *)((v92 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_39;
  }
  __break(1u);
LABEL_50:
  swift_once();
LABEL_26:
  v80 = type metadata accessor for Logger();
  __swift_project_value_buffer(v80, (uint64_t)static Logger.executor);
  v81 = Logger.logObject.getter();
  v82 = static os_log_type_t.error.getter();
  v83 = os_log_type_enabled(v81, v82);
  v84 = v121;
  if (v83)
  {
    v85 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v85 = 0;
    _os_log_impl(&dword_1B4BE6000, v81, v82, "Could not extract UserDialogAct from USO parse", v85, 2u);
    MEMORY[0x1B5E44758](v85, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v115 + 8))(v114, v116);
  ((void (*)(char *, uint64_t))v113)(v84, v62);
  return 0;
}

uint64_t InputValueFetcher.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t InputValueFetcher.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AffinityValueFetcher.fetchValue(input:) in conformance InputValueFetcher()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InputValueFetcher()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InputValueType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = InputValueType.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == InputValueType.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InputValueType()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  InputValueType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InputValueType()
{
  unsigned __int8 *v0;

  InputValueType.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InputValueType()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  InputValueType.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance InputValueType@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized InputValueType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InputValueType@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = InputValueType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t type metadata accessor for InputValueFetcher()
{
  return objc_opt_self();
}

unint64_t specialized InputValueType.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of InputValueType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

uint64_t partial apply for closure #1 in InputValueFetcher.fetchValue(input:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = InputValueFetcher.internalFetchValue(input:)();
  if (!v1)
  {
    *a1 = result;
    a1[1] = v4;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InputValueType and conformance InputValueType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InputValueType and conformance InputValueType;
  if (!lazy protocol witness table cache variable for type InputValueType and conformance InputValueType)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for InputValueType, &type metadata for InputValueType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputValueType and conformance InputValueType);
  }
  return result;
}

uint64_t method lookup function for InputValueFetcher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InputValueFetcher.__allocating_init(type:argument:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of InputValueFetcher.__allocating_init(plist:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of InputValueFetcher.debugDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of InputValueFetcher.fetchValue(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t storeEnumTagSinglePayload for InputValueType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1B4DFDADC + 4 * byte_1B4EEB21F[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1B4DFDB10 + 4 * byte_1B4EEB21A[v4]))();
}

uint64_t sub_1B4DFDB10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DFDB18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4DFDB20);
  return result;
}

uint64_t sub_1B4DFDB2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4DFDB34);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1B4DFDB38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4DFDB40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InputValueType()
{
  return &type metadata for InputValueType;
}

uint64_t outlined init with copy of Siri_Nlu_External_UsoGraph?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

const char *InsightRequestSummaryKey.bridgeName.unsafeMutableAddressor()
{
  return "bridgeName";
}

void *InsightRequestSummaryKey.messageDescription.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.messageDescription;
}

const char *InsightRequestSummaryKey.requestId.unsafeMutableAddressor()
{
  return "requestId";
}

void *InsightRequestSummaryKey.resultCandidateId.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.resultCandidateId;
}

void *InsightRequestSummaryKey.serverFallbackContextId.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.serverFallbackContextId;
}

void *InsightRequestSummaryKey.serverFallbackReason.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.serverFallbackReason;
}

const char *InsightRequestSummaryKey.errorCode.unsafeMutableAddressor()
{
  return "errorCode";
}

void *InsightRequestSummaryKey.pommesFallbackResponseError.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.pommesFallbackResponseError;
}

void *InsightRequestSummaryKey.pommesFallbackResponseNil.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.pommesFallbackResponseNil;
}

const char *InsightRequestSummaryKey.assistantId.unsafeMutableAddressor()
{
  return "assistantId";
}

const char *InsightRequestSummaryKey.sessionId.unsafeMutableAddressor()
{
  return "sessionId";
}

const char *InsightRequestSummaryKey.trpId.unsafeMutableAddressor()
{
  return "trpId";
}

const char *InsightRequestSummaryKey.failureReason.unsafeMutableAddressor()
{
  return "failureReason";
}

const char *InsightRequestSummaryKey.commandName.unsafeMutableAddressor()
{
  return "commandName";
}

const char *InsightRequestSummaryKey.commandAceId.unsafeMutableAddressor()
{
  return "commandAceId";
}

const char *InsightRequestSummaryKey.tcuId.unsafeMutableAddressor()
{
  return "tcuId";
}

uint64_t InsightRequestSummaryLogger.log.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t InsightRequestSummaryLogger.log.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*InsightRequestSummaryLogger.log.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InsightRequestSummaryLogger.init()()
{
  type metadata accessor for OS_os_log();
  OS_os_log.init(subsystem:category:)();
  return Logger.init(_:)();
}

uint64_t InsightRequestSummaryLogger.emitError(_:)(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for InsightRequestSummaryLogger();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v2, v7);
  outlined init with copy of InsightRequestSummaryLogger(v2, (uint64_t)v6);
  swift_retain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v21 = v7;
    v13 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v23 = v20;
    *(_DWORD *)v13 = 136315138;
    v19[1] = v13 + 4;
    swift_retain();
    v14 = specialized InsightRequestSummaryLogger.constructLogJsonString(_:)((uint64_t)v6, a1);
    v16 = v15;
    swift_release();
    v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of InsightRequestSummaryLogger((uint64_t)v6);
    swift_release();
    _os_log_impl(&dword_1B4BE6000, v11, v12, "%s", v13, 0xCu);
    v17 = v20;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v17, -1, -1);
    MEMORY[0x1B5E44758](v13, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v21);
  }
  else
  {
    swift_release();
    outlined destroy of InsightRequestSummaryLogger((uint64_t)v6);

    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t InsightRequestSummaryKey.rawValue.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t static InsightRequestSummaryKey.assistantId.getter()
{
  return 0x6E61747369737361;
}

uint64_t static InsightRequestSummaryKey.bridgeName.getter()
{
  return 0x614E656764697262;
}

uint64_t static InsightRequestSummaryKey.commandAceId.getter()
{
  return 0x41646E616D6D6F63;
}

uint64_t static InsightRequestSummaryKey.commandName.getter()
{
  return 0x4E646E616D6D6F63;
}

void *InsightRequestSummaryKey.dismissUIForMitigation.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.dismissUIForMitigation;
}

unint64_t static InsightRequestSummaryKey.dismissUIForMitigation.getter()
{
  return 0xD000000000000016;
}

uint64_t static InsightRequestSummaryKey.errorCode.getter()
{
  return 0x646F43726F727265;
}

uint64_t static InsightRequestSummaryKey.failureReason.getter()
{
  return 0x526572756C696166;
}

unint64_t static InsightRequestSummaryKey.messageDescription.getter()
{
  return 0xD000000000000012;
}

const char *InsightRequestSummaryKey.mitigatedByURS.unsafeMutableAddressor()
{
  return "mitigatedByURS";
}

uint64_t static InsightRequestSummaryKey.mitigatedByURS.getter()
{
  return 0x657461676974696DLL;
}

const char *InsightRequestSummaryKey.postSucceeded.unsafeMutableAddressor()
{
  return "postSucceeded";
}

uint64_t static InsightRequestSummaryKey.postSucceeded.getter()
{
  return 0x6363755374736F70;
}

void *InsightRequestSummaryKey.preExecutionDecision.unsafeMutableAddressor()
{
  return &static InsightRequestSummaryKey.preExecutionDecision;
}

unint64_t static InsightRequestSummaryKey.preExecutionDecision.getter()
{
  return 0xD000000000000014;
}

unint64_t static InsightRequestSummaryKey.pommesFallbackResponseError.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static InsightRequestSummaryKey.pommesFallbackResponseNil.getter()
{
  return 0xD000000000000019;
}

uint64_t static InsightRequestSummaryKey.requestId.getter()
{
  return 0x4974736575716572;
}

unint64_t static InsightRequestSummaryKey.resultCandidateId.getter()
{
  return 0xD000000000000011;
}

const char *InsightRequestSummaryKey.returnCode.unsafeMutableAddressor()
{
  return "returnCode";
}

uint64_t static InsightRequestSummaryKey.returnCode.getter()
{
  return 0x6F436E7275746572;
}

unint64_t static InsightRequestSummaryKey.serverFallbackReason.getter()
{
  return 0xD000000000000014;
}

unint64_t static InsightRequestSummaryKey.serverFallbackContextId.getter()
{
  return 0xD000000000000017;
}

uint64_t static InsightRequestSummaryKey.sessionId.getter()
{
  return 0x496E6F6973736573;
}

uint64_t static InsightRequestSummaryKey.tcuId.getter()
{
  return 0x6449756374;
}

uint64_t static InsightRequestSummaryKey.trpId.getter()
{
  return 0x6449707274;
}

const char *InsightRequestSummaryKey.utterance.unsafeMutableAddressor()
{
  return "utterance";
}

uint64_t static InsightRequestSummaryKey.utterance.getter()
{
  return 0x636E617265747475;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance InsightRequestSummaryKey@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance InsightRequestSummaryKey@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  int v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t inited;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  Swift::String v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::String v50;
  Swift::String v51;
  os_log_t v52;
  uint64_t v53;
  uint64_t v55;
  int v56;
  uint8_t *v57;
  os_log_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;

  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, (os_log_type_t)v15))
  {
    v56 = v15;
    v58 = v14;
    v59 = v13;
    v60 = v11;
    v61 = v10;
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v55 = v17;
    v57 = v16;
    *(_DWORD *)v16 = 136315138;
    v65 = 123;
    v66 = 0xE100000000000000;
    v67 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B4EE6D00;
    *(_QWORD *)(inited + 32) = 0x614E656764697262;
    *(_QWORD *)(inited + 40) = 0xEA0000000000656DLL;
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = 0x80000001B4EF8FF0;
    *(_QWORD *)(inited + 64) = 0xD000000000000012;
    *(_QWORD *)(inited + 72) = 0x80000001B4EF9010;
    *(_QWORD *)(inited + 80) = 0xD000000000000013;
    *(_QWORD *)(inited + 88) = 0x80000001B4EF53F0;
    *(_QWORD *)(inited + 96) = 0x4974736575716572;
    *(_QWORD *)(inited + 104) = 0xE900000000000064;
    *(_QWORD *)(inited + 112) = a2;
    *(_QWORD *)(inited + 120) = a3;
    *(_QWORD *)(inited + 128) = 0xD000000000000016;
    *(_QWORD *)(inited + 136) = 0x80000001B4EFD980;
    v63 = 0;
    v64 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    String.append(_:)(v19);
    if ((a4 & 1) != 0)
      v20 = 1702195828;
    else
      v20 = 0x65736C6166;
    if ((a4 & 1) != 0)
      v21 = 0xE400000000000000;
    else
      v21 = 0xE500000000000000;
    v22 = v21;
    String.append(_:)(*(Swift::String *)&v20);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.append(_:)(v23);
    v24 = v64;
    *(_QWORD *)(inited + 144) = v63;
    *(_QWORD *)(inited + 152) = v24;
    strcpy((char *)(inited + 160), "mitigatedByURS");
    *(_BYTE *)(inited + 175) = -18;
    v63 = 0;
    v64 = 0xE000000000000000;
    v25._countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    String.append(_:)(v25);
    if ((a5 & 1) != 0)
      v26 = 1702195828;
    else
      v26 = 0x65736C6166;
    if ((a5 & 1) != 0)
      v27 = 0xE400000000000000;
    else
      v27 = 0xE500000000000000;
    v28 = v27;
    String.append(_:)(*(Swift::String *)&v26);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    String.append(_:)(v29);
    v30 = v64;
    *(_QWORD *)(inited + 176) = v63;
    *(_QWORD *)(inited + 184) = v30;
    v62 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 5, 0);
    v31 = 0;
    v32 = v62;
    do
    {
      v33 = *(_QWORD *)(inited + v31 + 32);
      v34 = *(void **)(inited + v31 + 40);
      v36 = *(_QWORD *)(inited + v31 + 48);
      v35 = *(void **)(inited + v31 + 56);
      v63 = 34;
      v64 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37._countAndFlagsBits = v33;
      v37._object = v34;
      String.append(_:)(v37);
      v38._countAndFlagsBits = 2243106;
      v38._object = (void *)0xE300000000000000;
      String.append(_:)(v38);
      v39._countAndFlagsBits = v36;
      v39._object = v35;
      String.append(_:)(v39);
      v40._countAndFlagsBits = 34;
      v40._object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v41 = v63;
      v42 = v64;
      v62 = v32;
      v44 = *(_QWORD *)(v32 + 16);
      v43 = *(_QWORD *)(v32 + 24);
      if (v44 >= v43 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
        v32 = v62;
      }
      *(_QWORD *)(v32 + 16) = v44 + 1;
      v45 = v32 + 16 * v44;
      *(_QWORD *)(v45 + 32) = v41;
      *(_QWORD *)(v45 + 40) = v42;
      v31 += 32;
    }
    while (v31 != 160);
    swift_bridgeObjectRelease();
    v46 = v57;
    v63 = v32;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v47 = BidirectionalCollection<>.joined(separator:)();
    v49 = v48;
    swift_release();
    v50._countAndFlagsBits = v47;
    v50._object = v49;
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51._countAndFlagsBits = 125;
    v51._object = (void *)0xE100000000000000;
    String.append(_:)(v51);
    v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v52 = v58;
    _os_log_impl(&dword_1B4BE6000, v58, (os_log_type_t)v56, "%s", v46, 0xCu);
    v53 = v55;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v53, -1, -1);
    MEMORY[0x1B5E44758](v46, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v59, v61);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  int v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t inited;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v45;
  int v46;
  uint8_t *v47;
  os_log_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;

  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, (os_log_type_t)v13))
  {
    v46 = v13;
    v48 = v12;
    v49 = v11;
    v50 = v9;
    v51 = v8;
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v45 = v15;
    v47 = v14;
    *(_DWORD *)v14 = 136315138;
    v55 = 123;
    v56 = 0xE100000000000000;
    v57 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B4EEA7F0;
    *(_QWORD *)(inited + 32) = 0x614E656764697262;
    *(_QWORD *)(inited + 40) = 0xEA0000000000656DLL;
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = 0x80000001B4EF8FF0;
    *(_QWORD *)(inited + 64) = 0xD000000000000012;
    *(_QWORD *)(inited + 72) = 0x80000001B4EF9010;
    *(_QWORD *)(inited + 80) = 0xD000000000000017;
    *(_QWORD *)(inited + 88) = 0x80000001B4EF5440;
    *(_QWORD *)(inited + 96) = 0xD000000000000014;
    *(_QWORD *)(inited + 104) = 0x80000001B4EFD9A0;
    v53 = 0;
    v54 = 0xE000000000000000;
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = PreExecutionDecision.rawValue.getter(a2);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    String.append(_:)(v19);
    v20 = v54;
    *(_QWORD *)(inited + 112) = v53;
    *(_QWORD *)(inited + 120) = v20;
    *(_QWORD *)(inited + 128) = 0x4974736575716572;
    *(_QWORD *)(inited + 136) = 0xE900000000000064;
    *(_QWORD *)(inited + 144) = a3;
    *(_QWORD *)(inited + 152) = a4;
    v52 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
    v21 = 0;
    v22 = v52;
    do
    {
      v23 = *(_QWORD *)(inited + v21 + 32);
      v24 = *(void **)(inited + v21 + 40);
      v26 = *(_QWORD *)(inited + v21 + 48);
      v25 = *(void **)(inited + v21 + 56);
      v53 = 34;
      v54 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27._countAndFlagsBits = v23;
      v27._object = v24;
      String.append(_:)(v27);
      v28._countAndFlagsBits = 2243106;
      v28._object = (void *)0xE300000000000000;
      String.append(_:)(v28);
      v29._countAndFlagsBits = v26;
      v29._object = v25;
      String.append(_:)(v29);
      v30._countAndFlagsBits = 34;
      v30._object = (void *)0xE100000000000000;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = v53;
      v32 = v54;
      v52 = v22;
      v34 = *(_QWORD *)(v22 + 16);
      v33 = *(_QWORD *)(v22 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        v22 = v52;
      }
      *(_QWORD *)(v22 + 16) = v34 + 1;
      v35 = v22 + 16 * v34;
      *(_QWORD *)(v35 + 32) = v31;
      *(_QWORD *)(v35 + 40) = v32;
      v21 += 32;
    }
    while (v21 != 128);
    swift_bridgeObjectRelease();
    v36 = v47;
    v53 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v37 = BidirectionalCollection<>.joined(separator:)();
    v39 = v38;
    swift_release();
    v40._countAndFlagsBits = v37;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = 125;
    v41._object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v42 = v48;
    _os_log_impl(&dword_1B4BE6000, v48, (os_log_type_t)v46, "%s", v36, 0xCu);
    v43 = v45;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v43, -1, -1);
    MEMORY[0x1B5E44758](v36, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v49, v51);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, Swift::String *a2, Swift::String *a3)
{
  return specialized InsightRequestSummaryLogger.emitDebug(_:)(a1, a2, a3, 0xD00000000000001CLL, 0x80000001B4EF5460, 0x6449707274, 0xE500000000000000);
}

{
  return specialized InsightRequestSummaryLogger.emitDebug(_:)(a1, a2, a3, 0xD00000000000001DLL, 0x80000001B4EF53D0, 0xD000000000000011, 0x80000001B4EF49F0);
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  int v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t inited;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  Swift::String v51;
  Swift::String v52;
  os_log_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint8_t *v58;
  os_log_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;

  v63 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for Logger();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, (os_log_type_t)v12))
  {
    v57 = v12;
    v59 = v11;
    v60 = v10;
    v61 = v8;
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v56 = v14;
    v58 = v13;
    *(_DWORD *)v13 = 136315138;
    v67 = 123;
    v68 = 0xE100000000000000;
    v69 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B4EEB360;
    *(_QWORD *)(inited + 32) = 0x614E656764697262;
    *(_QWORD *)(inited + 40) = 0xEA0000000000656DLL;
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = 0x80000001B4EF8FF0;
    *(_QWORD *)(inited + 64) = 0xD000000000000012;
    *(_QWORD *)(inited + 72) = 0x80000001B4EF9010;
    *(_QWORD *)(inited + 80) = 0xD000000000000027;
    *(_QWORD *)(inited + 88) = 0x80000001B4EF5520;
    *(_QWORD *)(inited + 96) = 0xD00000000000001BLL;
    *(_QWORD *)(inited + 104) = 0x80000001B4EFD9C0;
    v65 = 0;
    v66 = 0xE000000000000000;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    String.append(_:)(v16);
    PommesResultCandidateMessage.error.getter();
    v17._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    String.append(_:)(v18);
    v19 = v66;
    *(_QWORD *)(inited + 112) = v65;
    *(_QWORD *)(inited + 120) = v19;
    *(_QWORD *)(inited + 128) = 0xD000000000000019;
    *(_QWORD *)(inited + 136) = 0x80000001B4EFD9E0;
    v20 = (void *)PommesResultCandidateMessage.pommesResponse.getter();
    v62 = v7;
    if (v20)
    {

      v21 = 0xE500000000000000;
      v22 = 0x65736C6146;
    }
    else
    {
      v21 = 0xE400000000000000;
      v22 = 1702195796;
    }
    v24 = v63;
    *(_QWORD *)(inited + 144) = v22;
    *(_QWORD *)(inited + 152) = v21;
    *(_QWORD *)(inited + 160) = 0x6E61747369737361;
    *(_QWORD *)(inited + 168) = 0xEB00000000644974;
    v25 = a3[13];
    *(_QWORD *)(inited + 176) = a3[12];
    *(_QWORD *)(inited + 184) = v25;
    *(_QWORD *)(inited + 192) = 0x496E6F6973736573;
    *(_QWORD *)(inited + 200) = 0xE900000000000064;
    v65 = 0;
    v66 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    String.append(_:)(v26);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    String.append(_:)(v28);
    v29 = v66;
    *(_QWORD *)(inited + 208) = v65;
    *(_QWORD *)(inited + 216) = v29;
    *(_QWORD *)(inited + 224) = 0x4974736575716572;
    *(_QWORD *)(inited + 232) = 0xE900000000000064;
    v30 = a3[9];
    *(_QWORD *)(inited + 240) = a3[8];
    *(_QWORD *)(inited + 248) = v30;
    *(_QWORD *)(inited + 256) = 0xD000000000000011;
    *(_QWORD *)(inited + 264) = 0x80000001B4EF49F0;
    v31 = *(_QWORD *)(v24 + 24);
    *(_QWORD *)(inited + 272) = *(_QWORD *)(v24 + 16);
    *(_QWORD *)(inited + 280) = v31;
    v64 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0);
    v32 = 0;
    v33 = v64;
    do
    {
      v34 = *(_QWORD *)(inited + v32 + 32);
      v35 = *(void **)(inited + v32 + 40);
      v37 = *(_QWORD *)(inited + v32 + 48);
      v36 = *(void **)(inited + v32 + 56);
      v65 = 34;
      v66 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38._countAndFlagsBits = v34;
      v38._object = v35;
      String.append(_:)(v38);
      v39._countAndFlagsBits = 2243106;
      v39._object = (void *)0xE300000000000000;
      String.append(_:)(v39);
      v40._countAndFlagsBits = v37;
      v40._object = v36;
      String.append(_:)(v40);
      v41._countAndFlagsBits = 34;
      v41._object = (void *)0xE100000000000000;
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v42 = v65;
      v43 = v66;
      v64 = v33;
      v45 = *(_QWORD *)(v33 + 16);
      v44 = *(_QWORD *)(v33 + 24);
      if (v45 >= v44 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
        v33 = v64;
      }
      *(_QWORD *)(v33 + 16) = v45 + 1;
      v46 = v33 + 16 * v45;
      *(_QWORD *)(v46 + 32) = v42;
      *(_QWORD *)(v46 + 40) = v43;
      v32 += 32;
    }
    while (v32 != 256);
    swift_bridgeObjectRelease();
    v47 = v58;
    v65 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v48 = BidirectionalCollection<>.joined(separator:)();
    v50 = v49;
    swift_release();
    v51._countAndFlagsBits = v48;
    v51._object = v50;
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52._countAndFlagsBits = 125;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v53 = v59;
    _os_log_impl(&dword_1B4BE6000, v59, (os_log_type_t)v57, "%s", v47, 0xCu);
    v54 = v56;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v54, -1, -1);
    MEMORY[0x1B5E44758](v47, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v60, v62);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  int v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t inited;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v45;
  int v46;
  uint8_t *v47;
  os_log_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;

  v8 = type metadata accessor for Logger();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, (os_log_type_t)v13))
  {
    v46 = v13;
    v48 = v12;
    v49 = v11;
    v50 = v9;
    v51 = v8;
    v14 = (uint8_t *)swift_slowAlloc();
    v15 = swift_slowAlloc();
    v45 = v15;
    v47 = v14;
    *(_DWORD *)v14 = 136315138;
    v55 = 123;
    v56 = 0xE100000000000000;
    v57 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    inited = swift_initStackObject();
    *(_QWORD *)(inited + 32) = 0x614E656764697262;
    *(_QWORD *)(inited + 40) = 0xEA0000000000656DLL;
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = 0x80000001B4EF8FF0;
    *(_QWORD *)(inited + 64) = 0xD000000000000012;
    *(_QWORD *)(inited + 72) = 0x80000001B4EF9010;
    *(_OWORD *)(inited + 16) = xmmword_1B4EEA7F0;
    *(_QWORD *)(inited + 80) = 0xD000000000000017;
    *(_QWORD *)(inited + 88) = 0x80000001B4EF54D0;
    *(_QWORD *)(inited + 96) = 0x4974736575716572;
    *(_QWORD *)(inited + 104) = 0xE900000000000064;
    *(_QWORD *)(inited + 112) = a2;
    *(_QWORD *)(inited + 120) = a3;
    *(_QWORD *)(inited + 128) = 0x646F43726F727265;
    *(_QWORD *)(inited + 136) = 0xE900000000000065;
    v53 = 0;
    v54 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    String.append(_:)(v17);
    LODWORD(v52) = a4;
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    String.append(_:)(v19);
    v20 = v54;
    *(_QWORD *)(inited + 144) = v53;
    *(_QWORD *)(inited + 152) = v20;
    v52 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
    v21 = 0;
    v22 = v52;
    do
    {
      v23 = *(_QWORD *)(inited + v21 + 32);
      v24 = *(void **)(inited + v21 + 40);
      v26 = *(_QWORD *)(inited + v21 + 48);
      v25 = *(void **)(inited + v21 + 56);
      v53 = 34;
      v54 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27._countAndFlagsBits = v23;
      v27._object = v24;
      String.append(_:)(v27);
      v28._countAndFlagsBits = 2243106;
      v28._object = (void *)0xE300000000000000;
      String.append(_:)(v28);
      v29._countAndFlagsBits = v26;
      v29._object = v25;
      String.append(_:)(v29);
      v30._countAndFlagsBits = 34;
      v30._object = (void *)0xE100000000000000;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = v53;
      v32 = v54;
      v52 = v22;
      v34 = *(_QWORD *)(v22 + 16);
      v33 = *(_QWORD *)(v22 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        v22 = v52;
      }
      *(_QWORD *)(v22 + 16) = v34 + 1;
      v35 = v22 + 16 * v34;
      *(_QWORD *)(v35 + 32) = v31;
      *(_QWORD *)(v35 + 40) = v32;
      v21 += 32;
    }
    while (v21 != 128);
    swift_bridgeObjectRelease();
    v36 = v47;
    v53 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v37 = BidirectionalCollection<>.joined(separator:)();
    v39 = v38;
    swift_release();
    v40._countAndFlagsBits = v37;
    v40._object = v39;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = 125;
    v41._object = (void *)0xE100000000000000;
    String.append(_:)(v41);
    v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v42 = v48;
    _os_log_impl(&dword_1B4BE6000, v48, (os_log_type_t)v46, "%s", v36, 0xCu);
    v43 = v45;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v43, -1, -1);
    MEMORY[0x1B5E44758](v36, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v49, v51);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, Swift::String *a2, uint64_t a3)
{
  return specialized InsightRequestSummaryLogger.emitDebug(_:)(a1, a2, a3, 0xD00000000000001FLL, 0x80000001B4EF55A0);
}

{
  return specialized InsightRequestSummaryLogger.emitDebug(_:)(a1, a2, a3, 0xD000000000000019, 0x80000001B4EF5550);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  int v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t inited;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  Swift::String v23;
  Swift::String v24;
  unint64_t v25;
  Swift::String v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v34;
  Swift::String v35;
  unint64_t v36;
  Swift::String v37;
  id v38;
  void *v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  os_log_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint8_t *v69;
  os_log_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;

  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, (os_log_type_t)v11))
  {
    v68 = v11;
    v70 = v10;
    v71 = v9;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v67 = v13;
    v69 = v12;
    *(_DWORD *)v12 = 136315138;
    v77 = 123;
    v78 = 0xE100000000000000;
    v79 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B4EEB360;
    *(_QWORD *)(inited + 32) = 0x614E656764697262;
    *(_QWORD *)(inited + 40) = 0xEA0000000000656DLL;
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = 0x80000001B4EF8FF0;
    *(_QWORD *)(inited + 64) = 0xD000000000000012;
    *(_QWORD *)(inited + 72) = 0x80000001B4EF9010;
    *(_QWORD *)(inited + 80) = 0xD000000000000027;
    *(_QWORD *)(inited + 88) = 0x80000001B4EF5570;
    strcpy((char *)(inited + 96), "failureReason");
    *(_WORD *)(inited + 110) = -4864;
    *(_QWORD *)(inited + 112) = 0xD000000000000052;
    *(_QWORD *)(inited + 120) = 0x80000001B4EFDA40;
    *(_QWORD *)(inited + 128) = 0x6E61747369737361;
    *(_QWORD *)(inited + 136) = 0xEB00000000644974;
    v15 = (void *)0xE000000000000000;
    v75 = 0;
    v76 = 0xE000000000000000;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    String.append(_:)(v16);
    String.append(_:)(a2[6]);
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    String.append(_:)(v17);
    v18 = v76;
    *(_QWORD *)(inited + 144) = v75;
    *(_QWORD *)(inited + 152) = v18;
    *(_QWORD *)(inited + 160) = 0x496E6F6973736573;
    *(_QWORD *)(inited + 168) = 0xE900000000000064;
    v75 = 0;
    v76 = 0xE000000000000000;
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    String.append(_:)(v19);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    String.append(_:)(v21);
    v22 = v76;
    *(_QWORD *)(inited + 176) = v75;
    *(_QWORD *)(inited + 184) = v22;
    *(_QWORD *)(inited + 192) = 0x4974736575716572;
    *(_QWORD *)(inited + 200) = 0xE900000000000064;
    v75 = 0;
    v76 = 0xE000000000000000;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.append(_:)(v23);
    String.append(_:)(a2[4]);
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    String.append(_:)(v24);
    v25 = v76;
    *(_QWORD *)(inited + 208) = v75;
    *(_QWORD *)(inited + 216) = v25;
    *(_QWORD *)(inited + 224) = 0x4E646E616D6D6F63;
    *(_QWORD *)(inited + 232) = 0xEB00000000656D61;
    v75 = 0;
    v76 = 0xE000000000000000;
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    String.append(_:)(v26);
    v27 = *(void **)(a3 + OBJC_IVAR___SKRExecutionOutput_command);
    if (v27
      && (v28 = objc_msgSend(*(id *)(a3 + OBJC_IVAR___SKRExecutionOutput_command), sel_encodedClassName)) != 0)
    {
      v29 = v28;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v32 = v31;

    }
    else
    {
      v30 = 0;
      v32 = (void *)0xE000000000000000;
    }
    v34._countAndFlagsBits = v30;
    v34._object = v32;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 0;
    v35._object = (void *)0xE000000000000000;
    String.append(_:)(v35);
    v36 = v76;
    *(_QWORD *)(inited + 240) = v75;
    *(_QWORD *)(inited + 248) = v36;
    strcpy((char *)(inited + 256), "commandAceId");
    *(_BYTE *)(inited + 269) = 0;
    *(_WORD *)(inited + 270) = -5120;
    v75 = 0;
    v76 = 0xE000000000000000;
    v37._countAndFlagsBits = 0;
    v37._object = (void *)0xE000000000000000;
    String.append(_:)(v37);
    v72 = v7;
    v73 = v6;
    if (v27)
    {
      v38 = objc_msgSend(v27, sel_aceId);
      if (v38)
      {
        v39 = v38;
        v27 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        v15 = v40;

      }
      else
      {
        v27 = 0;
      }
    }
    v41._countAndFlagsBits = (uint64_t)v27;
    v41._object = v15;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._countAndFlagsBits = 0;
    v42._object = (void *)0xE000000000000000;
    String.append(_:)(v42);
    v43 = v76;
    *(_QWORD *)(inited + 272) = v75;
    *(_QWORD *)(inited + 280) = v43;
    v74 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0);
    v44 = 0;
    v45 = v74;
    do
    {
      v46 = *(_QWORD *)(inited + v44 + 32);
      v47 = *(void **)(inited + v44 + 40);
      v49 = *(_QWORD *)(inited + v44 + 48);
      v48 = *(void **)(inited + v44 + 56);
      v75 = 34;
      v76 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50._countAndFlagsBits = v46;
      v50._object = v47;
      String.append(_:)(v50);
      v51._countAndFlagsBits = 2243106;
      v51._object = (void *)0xE300000000000000;
      String.append(_:)(v51);
      v52._countAndFlagsBits = v49;
      v52._object = v48;
      String.append(_:)(v52);
      v53._countAndFlagsBits = 34;
      v53._object = (void *)0xE100000000000000;
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v54 = v75;
      v55 = v76;
      v74 = v45;
      v57 = *(_QWORD *)(v45 + 16);
      v56 = *(_QWORD *)(v45 + 24);
      if (v57 >= v56 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
        v45 = v74;
      }
      *(_QWORD *)(v45 + 16) = v57 + 1;
      v58 = v45 + 16 * v57;
      *(_QWORD *)(v58 + 32) = v54;
      *(_QWORD *)(v58 + 40) = v55;
      v44 += 32;
    }
    while (v44 != 256);
    swift_bridgeObjectRelease();
    v59 = v69;
    v75 = v45;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v60 = BidirectionalCollection<>.joined(separator:)();
    v62 = v61;
    swift_release();
    v63._countAndFlagsBits = v60;
    v63._object = v62;
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    v64._countAndFlagsBits = 125;
    v64._object = (void *)0xE100000000000000;
    String.append(_:)(v64);
    v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v65 = v70;
    _os_log_impl(&dword_1B4BE6000, v70, (os_log_type_t)v68, "%s", v59, 0xCu);
    v66 = v67;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v66, -1, -1);
    MEMORY[0x1B5E44758](v59, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v71, v73);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

{
  return specialized InsightRequestSummaryLogger.emitDebug(_:)(a1, a2, a3, 0xD00000000000001ELL, 0x80000001B4EF55F0);
}

{
  return specialized InsightRequestSummaryLogger.emitDebug(_:)(a1, a2, a3, 0xD000000000000021, 0x80000001B4EF55C0);
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  int v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  Swift::String v41;
  Swift::String v42;
  os_log_t v43;
  uint64_t v44;
  uint64_t v46;
  int v47;
  uint8_t *v48;
  os_log_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;

  v6 = type metadata accessor for Logger();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, (os_log_type_t)v11))
  {
    v47 = v11;
    v49 = v10;
    v50 = v9;
    v51 = v7;
    v52 = v6;
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v46 = v13;
    v48 = v12;
    *(_DWORD *)v12 = 136315138;
    v56 = 123;
    v57 = 0xE100000000000000;
    v58 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B4EE4F30;
    *(_QWORD *)(inited + 32) = 0x614E656764697262;
    *(_QWORD *)(inited + 40) = 0xEA0000000000656DLL;
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = 0x80000001B4EF8FF0;
    *(_QWORD *)(inited + 64) = 0xD000000000000012;
    *(_QWORD *)(inited + 72) = 0x80000001B4EF9010;
    *(_QWORD *)(inited + 80) = 0xD000000000000020;
    *(_QWORD *)(inited + 88) = 0x80000001B4EF54F0;
    *(_QWORD *)(inited + 96) = 0x6E61747369737361;
    *(_QWORD *)(inited + 104) = 0xEB00000000644974;
    v15 = a2[13];
    *(_QWORD *)(inited + 112) = a2[12];
    *(_QWORD *)(inited + 120) = v15;
    *(_QWORD *)(inited + 128) = 0x496E6F6973736573;
    *(_QWORD *)(inited + 136) = 0xE900000000000064;
    v54 = 0;
    v55 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    String.append(_:)(v16);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    String.append(_:)(v18);
    v19 = v55;
    *(_QWORD *)(inited + 144) = v54;
    *(_QWORD *)(inited + 152) = v19;
    *(_QWORD *)(inited + 160) = 0x4974736575716572;
    *(_QWORD *)(inited + 168) = 0xE900000000000064;
    v20 = a2[9];
    *(_QWORD *)(inited + 176) = a2[8];
    *(_QWORD *)(inited + 184) = v20;
    *(_QWORD *)(inited + 192) = 0xD000000000000011;
    *(_QWORD *)(inited + 200) = 0x80000001B4EF49F0;
    v21 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(inited + 208) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(inited + 216) = v21;
    v53 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 6, 0);
    v22 = 0;
    v23 = v53;
    do
    {
      v24 = *(_QWORD *)(inited + v22 + 32);
      v25 = *(void **)(inited + v22 + 40);
      v27 = *(_QWORD *)(inited + v22 + 48);
      v26 = *(void **)(inited + v22 + 56);
      v54 = 34;
      v55 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28._countAndFlagsBits = v24;
      v28._object = v25;
      String.append(_:)(v28);
      v29._countAndFlagsBits = 2243106;
      v29._object = (void *)0xE300000000000000;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v27;
      v30._object = v26;
      String.append(_:)(v30);
      v31._countAndFlagsBits = 34;
      v31._object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v32 = v54;
      v33 = v55;
      v53 = v23;
      v35 = *(_QWORD *)(v23 + 16);
      v34 = *(_QWORD *)(v23 + 24);
      if (v35 >= v34 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
        v23 = v53;
      }
      *(_QWORD *)(v23 + 16) = v35 + 1;
      v36 = v23 + 16 * v35;
      *(_QWORD *)(v36 + 32) = v32;
      *(_QWORD *)(v36 + 40) = v33;
      v22 += 32;
    }
    while (v22 != 192);
    swift_bridgeObjectRelease();
    v37 = v48;
    v54 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v38 = BidirectionalCollection<>.joined(separator:)();
    v40 = v39;
    swift_release();
    v41._countAndFlagsBits = v38;
    v41._object = v40;
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v42._countAndFlagsBits = 125;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v43 = v49;
    _os_log_impl(&dword_1B4BE6000, v49, (os_log_type_t)v47, "%s", v37, 0xCu);
    v44 = v46;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v44, -1, -1);
    MEMORY[0x1B5E44758](v37, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v50, v52);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, Swift::String *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  int v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t inited;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  unint64_t v26;
  Swift::String v27;
  Swift::String v28;
  unint64_t v29;
  Swift::String v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v38;
  Swift::String v39;
  unint64_t v40;
  Swift::String v41;
  id v42;
  void *v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  Swift::String v67;
  Swift::String v68;
  os_log_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint8_t *v73;
  os_log_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;

  v10 = type metadata accessor for Logger();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, (os_log_type_t)v15))
  {
    v72 = v15;
    v74 = v14;
    v75 = v13;
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v71 = v17;
    v73 = v16;
    *(_DWORD *)v16 = 136315138;
    v81 = 123;
    v82 = 0xE100000000000000;
    v83 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B4EE6910;
    *(_QWORD *)(inited + 32) = 0x614E656764697262;
    *(_QWORD *)(inited + 40) = 0xEA0000000000656DLL;
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = 0x80000001B4EF8FF0;
    *(_QWORD *)(inited + 64) = 0xD000000000000012;
    *(_QWORD *)(inited + 72) = 0x80000001B4EF9010;
    *(_QWORD *)(inited + 80) = a4;
    *(_QWORD *)(inited + 88) = a5;
    *(_QWORD *)(inited + 96) = 0x6E61747369737361;
    *(_QWORD *)(inited + 104) = 0xEB00000000644974;
    v19 = (void *)0xE000000000000000;
    v79 = 0;
    v80 = 0xE000000000000000;
    v20._countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    String.append(_:)(v20);
    String.append(_:)(a2[6]);
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    String.append(_:)(v21);
    v22 = v80;
    *(_QWORD *)(inited + 112) = v79;
    *(_QWORD *)(inited + 120) = v22;
    *(_QWORD *)(inited + 128) = 0x496E6F6973736573;
    *(_QWORD *)(inited + 136) = 0xE900000000000064;
    v79 = 0;
    v80 = 0xE000000000000000;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.append(_:)(v23);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    String.append(_:)(v25);
    v26 = v80;
    *(_QWORD *)(inited + 144) = v79;
    *(_QWORD *)(inited + 152) = v26;
    *(_QWORD *)(inited + 160) = 0x4974736575716572;
    *(_QWORD *)(inited + 168) = 0xE900000000000064;
    v79 = 0;
    v80 = 0xE000000000000000;
    v27._countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    String.append(_:)(v27);
    String.append(_:)(a2[5]);
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    String.append(_:)(v28);
    v29 = v80;
    *(_QWORD *)(inited + 176) = v79;
    *(_QWORD *)(inited + 184) = v29;
    *(_QWORD *)(inited + 192) = 0x4E646E616D6D6F63;
    *(_QWORD *)(inited + 200) = 0xEB00000000656D61;
    v79 = 0;
    v80 = 0xE000000000000000;
    v30._countAndFlagsBits = 0;
    v30._object = (void *)0xE000000000000000;
    String.append(_:)(v30);
    v31 = *(void **)(a3 + OBJC_IVAR___SKRExecutionOutput_command);
    if (v31
      && (v32 = objc_msgSend(*(id *)(a3 + OBJC_IVAR___SKRExecutionOutput_command), sel_encodedClassName)) != 0)
    {
      v33 = v32;
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v36 = v35;

    }
    else
    {
      v34 = 0;
      v36 = (void *)0xE000000000000000;
    }
    v38._countAndFlagsBits = v34;
    v38._object = v36;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    String.append(_:)(v39);
    v40 = v80;
    *(_QWORD *)(inited + 208) = v79;
    *(_QWORD *)(inited + 216) = v40;
    strcpy((char *)(inited + 224), "commandAceId");
    *(_BYTE *)(inited + 237) = 0;
    *(_WORD *)(inited + 238) = -5120;
    v79 = 0;
    v80 = 0xE000000000000000;
    v41._countAndFlagsBits = 0;
    v41._object = (void *)0xE000000000000000;
    String.append(_:)(v41);
    v76 = v11;
    v77 = v10;
    if (v31)
    {
      v42 = objc_msgSend(v31, sel_aceId);
      if (v42)
      {
        v43 = v42;
        v31 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        v19 = v44;

      }
      else
      {
        v31 = 0;
      }
    }
    v45._countAndFlagsBits = (uint64_t)v31;
    v45._object = v19;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._countAndFlagsBits = 0;
    v46._object = (void *)0xE000000000000000;
    String.append(_:)(v46);
    v47 = v80;
    *(_QWORD *)(inited + 240) = v79;
    *(_QWORD *)(inited + 248) = v47;
    v78 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7, 0);
    v48 = 0;
    v49 = v78;
    do
    {
      v50 = *(_QWORD *)(inited + v48 + 32);
      v51 = *(void **)(inited + v48 + 40);
      v53 = *(_QWORD *)(inited + v48 + 48);
      v52 = *(void **)(inited + v48 + 56);
      v79 = 34;
      v80 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v54._countAndFlagsBits = v50;
      v54._object = v51;
      String.append(_:)(v54);
      v55._countAndFlagsBits = 2243106;
      v55._object = (void *)0xE300000000000000;
      String.append(_:)(v55);
      v56._countAndFlagsBits = v53;
      v56._object = v52;
      String.append(_:)(v56);
      v57._countAndFlagsBits = 34;
      v57._object = (void *)0xE100000000000000;
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v58 = v79;
      v59 = v80;
      v78 = v49;
      v61 = *(_QWORD *)(v49 + 16);
      v60 = *(_QWORD *)(v49 + 24);
      if (v61 >= v60 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
        v49 = v78;
      }
      *(_QWORD *)(v49 + 16) = v61 + 1;
      v62 = v49 + 16 * v61;
      *(_QWORD *)(v62 + 32) = v58;
      *(_QWORD *)(v62 + 40) = v59;
      v48 += 32;
    }
    while (v48 != 224);
    swift_bridgeObjectRelease();
    v63 = v73;
    v79 = v49;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v64 = BidirectionalCollection<>.joined(separator:)();
    v66 = v65;
    swift_release();
    v67._countAndFlagsBits = v64;
    v67._object = v66;
    String.append(_:)(v67);
    swift_bridgeObjectRelease();
    v68._countAndFlagsBits = 125;
    v68._object = (void *)0xE100000000000000;
    String.append(_:)(v68);
    v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v69 = v74;
    _os_log_impl(&dword_1B4BE6000, v74, (os_log_type_t)v72, "%s", v63, 0xCu);
    v70 = v71;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v70, -1, -1);
    MEMORY[0x1B5E44758](v63, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v75, v77);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, Swift::String *a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t inited;
  _QWORD *v20;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  Swift::String v31;
  Swift::String v32;
  void *v33;
  Swift::String v34;
  unint64_t v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  unint64_t v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  os_log_t v65;
  uint64_t v66;
  void *v68;
  uint64_t v69;
  int v70;
  uint8_t *v71;
  os_log_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;

  v76 = a4;
  v11 = type metadata accessor for Logger();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, (os_log_type_t)v16))
  {
    v70 = v16;
    v72 = v15;
    v73 = v14;
    v74 = v12;
    v75 = v11;
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v69 = v18;
    v71 = v17;
    *(_DWORD *)v17 = 136315138;
    v80 = 123;
    v81 = 0xE100000000000000;
    v82 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    inited = swift_initStackObject();
    v68 = a6;
    v20 = (_QWORD *)inited;
    *(_OWORD *)(inited + 16) = xmmword_1B4EEB360;
    *(_QWORD *)(inited + 32) = 0x614E656764697262;
    *(_QWORD *)(inited + 40) = 0xEA0000000000656DLL;
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = 0x80000001B4EF8FF0;
    *(_QWORD *)(inited + 64) = 0xD000000000000012;
    *(_QWORD *)(inited + 72) = 0x80000001B4EF9010;
    *(_QWORD *)(inited + 80) = 0xD000000000000022;
    *(_QWORD *)(inited + 88) = 0x80000001B4EF5410;
    *(_QWORD *)(inited + 96) = 0x6E61747369737361;
    *(_QWORD *)(inited + 104) = 0xEB00000000644974;
    v78 = 0;
    v79 = 0xE000000000000000;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    String.append(_:)(v21);
    String.append(_:)(a2[6]);
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    String.append(_:)(v22);
    v23 = v79;
    v20[14] = v78;
    v20[15] = v23;
    v20[16] = 0x496E6F6973736573;
    v20[17] = 0xE900000000000064;
    v78 = 0;
    v79 = 0xE000000000000000;
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    String.append(_:)(v24);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    String.append(_:)(v26);
    v27 = v79;
    v20[18] = v78;
    v20[19] = v27;
    v20[20] = 0x4974736575716572;
    v20[21] = 0xE900000000000064;
    v78 = 0;
    v79 = 0xE000000000000000;
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    String.append(_:)(v28);
    String.append(_:)(a2[4]);
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    String.append(_:)(v29);
    v30 = v79;
    v20[22] = v78;
    v20[23] = v30;
    v20[24] = 0xD000000000000011;
    v20[25] = 0x80000001B4EF49F0;
    v78 = 0;
    v79 = 0xE000000000000000;
    v31._countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    String.append(_:)(v31);
    v32._countAndFlagsBits = a3;
    v33 = v76;
    v32._object = v76;
    String.append(_:)(v32);
    v34._countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    String.append(_:)(v34);
    v35 = v79;
    v20[26] = v78;
    v20[27] = v35;
    v20[28] = 0x6449707274;
    v20[29] = 0xE500000000000000;
    v78 = 0;
    v79 = 0xE000000000000000;
    v36._countAndFlagsBits = 0;
    v36._object = (void *)0xE000000000000000;
    String.append(_:)(v36);
    v37._countAndFlagsBits = a3;
    v37._object = v33;
    String.append(_:)(v37);
    v38._countAndFlagsBits = 0;
    v38._object = (void *)0xE000000000000000;
    String.append(_:)(v38);
    v39 = v79;
    v20[30] = v78;
    v20[31] = v39;
    v20[32] = 0x6449756374;
    v20[33] = 0xE500000000000000;
    v78 = 0;
    v79 = 0xE000000000000000;
    v40._countAndFlagsBits = 0;
    v40._object = (void *)0xE000000000000000;
    String.append(_:)(v40);
    v41._countAndFlagsBits = a5;
    v41._object = v68;
    String.append(_:)(v41);
    v42._countAndFlagsBits = 0;
    v42._object = (void *)0xE000000000000000;
    String.append(_:)(v42);
    v43 = v79;
    v20[34] = v78;
    v20[35] = v43;
    v77 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 8, 0);
    v44 = 0;
    v45 = v77;
    do
    {
      v46 = v20[v44 + 4];
      v47 = (void *)v20[v44 + 5];
      v49 = v20[v44 + 6];
      v48 = (void *)v20[v44 + 7];
      v78 = 34;
      v79 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50._countAndFlagsBits = v46;
      v50._object = v47;
      String.append(_:)(v50);
      v51._countAndFlagsBits = 2243106;
      v51._object = (void *)0xE300000000000000;
      String.append(_:)(v51);
      v52._countAndFlagsBits = v49;
      v52._object = v48;
      String.append(_:)(v52);
      v53._countAndFlagsBits = 34;
      v53._object = (void *)0xE100000000000000;
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v54 = v78;
      v55 = v79;
      v77 = v45;
      v57 = *(_QWORD *)(v45 + 16);
      v56 = *(_QWORD *)(v45 + 24);
      if (v57 >= v56 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
        v45 = v77;
      }
      *(_QWORD *)(v45 + 16) = v57 + 1;
      v58 = v45 + 16 * v57;
      *(_QWORD *)(v58 + 32) = v54;
      *(_QWORD *)(v58 + 40) = v55;
      v44 += 4;
    }
    while (v44 != 32);
    swift_bridgeObjectRelease();
    v59 = v71;
    v78 = v45;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v60 = BidirectionalCollection<>.joined(separator:)();
    v62 = v61;
    swift_release();
    v63._countAndFlagsBits = v60;
    v63._object = v62;
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    v64._countAndFlagsBits = 125;
    v64._object = (void *)0xE100000000000000;
    String.append(_:)(v64);
    v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v65 = v72;
    _os_log_impl(&dword_1B4BE6000, v72, (os_log_type_t)v70, "%s", v59, 0xCu);
    v66 = v69;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v66, -1, -1);
    MEMORY[0x1B5E44758](v59, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v73, v75);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t specialized InsightRequestSummaryLogger.emitDebug(_:)(uint64_t a1, Swift::String *a2, Swift::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  int v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t inited;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  Swift::String v54;
  Swift::String v55;
  os_log_t v56;
  uint64_t v57;
  uint64_t v59;
  int v60;
  uint8_t *v61;
  os_log_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;

  v66 = a6;
  v67 = a7;
  v12 = type metadata accessor for Logger();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    v60 = v17;
    v62 = v16;
    v63 = v15;
    v64 = v13;
    v65 = v12;
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v59 = v19;
    v61 = v18;
    *(_DWORD *)v18 = 136315138;
    v71 = 123;
    v72 = 0xE100000000000000;
    v73 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B4EE4F30;
    *(_QWORD *)(inited + 32) = 0x614E656764697262;
    *(_QWORD *)(inited + 40) = 0xEA0000000000656DLL;
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = 0x80000001B4EF8FF0;
    *(_QWORD *)(inited + 64) = 0xD000000000000012;
    *(_QWORD *)(inited + 72) = 0x80000001B4EF9010;
    *(_QWORD *)(inited + 80) = a4;
    *(_QWORD *)(inited + 88) = a5;
    *(_QWORD *)(inited + 96) = 0x6E61747369737361;
    *(_QWORD *)(inited + 104) = 0xEB00000000644974;
    v69 = 0;
    v70 = 0xE000000000000000;
    v21._countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    String.append(_:)(v21);
    String.append(_:)(a2[6]);
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    String.append(_:)(v22);
    v23 = v70;
    *(_QWORD *)(inited + 112) = v69;
    *(_QWORD *)(inited + 120) = v23;
    *(_QWORD *)(inited + 128) = 0x496E6F6973736573;
    *(_QWORD *)(inited + 136) = 0xE900000000000064;
    v69 = 0;
    v70 = 0xE000000000000000;
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    String.append(_:)(v24);
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    String.append(_:)(v26);
    v27 = v70;
    *(_QWORD *)(inited + 144) = v69;
    *(_QWORD *)(inited + 152) = v27;
    *(_QWORD *)(inited + 160) = 0x4974736575716572;
    *(_QWORD *)(inited + 168) = 0xE900000000000064;
    v69 = 0;
    v70 = 0xE000000000000000;
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    String.append(_:)(v28);
    String.append(_:)(a2[4]);
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    String.append(_:)(v29);
    v30 = v70;
    *(_QWORD *)(inited + 176) = v69;
    *(_QWORD *)(inited + 184) = v30;
    v31 = v67;
    *(_QWORD *)(inited + 192) = v66;
    *(_QWORD *)(inited + 200) = v31;
    v69 = 0;
    v70 = 0xE000000000000000;
    v32._countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    String.append(_:)(v32);
    String.append(_:)(a3[1]);
    v33._countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    String.append(_:)(v33);
    v34 = v70;
    *(_QWORD *)(inited + 208) = v69;
    *(_QWORD *)(inited + 216) = v34;
    v68 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 6, 0);
    v35 = 0;
    v36 = v68;
    do
    {
      v37 = *(_QWORD *)(inited + v35 + 32);
      v38 = *(void **)(inited + v35 + 40);
      v40 = *(_QWORD *)(inited + v35 + 48);
      v39 = *(void **)(inited + v35 + 56);
      v69 = 34;
      v70 = 0xE100000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v41._countAndFlagsBits = v37;
      v41._object = v38;
      String.append(_:)(v41);
      v42._countAndFlagsBits = 2243106;
      v42._object = (void *)0xE300000000000000;
      String.append(_:)(v42);
      v43._countAndFlagsBits = v40;
      v43._object = v39;
      String.append(_:)(v43);
      v44._countAndFlagsBits = 34;
      v44._object = (void *)0xE100000000000000;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v45 = v69;
      v46 = v70;
      v68 = v36;
      v48 = *(_QWORD *)(v36 + 16);
      v47 = *(_QWORD *)(v36 + 24);
      if (v48 >= v47 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
        v36 = v68;
      }
      *(_QWORD *)(v36 + 16) = v48 + 1;
      v49 = v36 + 16 * v48;
      *(_QWORD *)(v49 + 32) = v45;
      *(_QWORD *)(v49 + 40) = v46;
      v35 += 32;
    }
    while (v35 != 192);
    swift_bridgeObjectRelease();
    v50 = v61;
    v69 = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    v51 = BidirectionalCollection<>.joined(separator:)();
    v53 = v52;
    swift_release();
    v54._countAndFlagsBits = v51;
    v54._object = v53;
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    v55._countAndFlagsBits = 125;
    v55._object = (void *)0xE100000000000000;
    String.append(_:)(v55);
    v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v56 = v62;
    _os_log_impl(&dword_1B4BE6000, v62, (os_log_type_t)v60, "%s", v50, 0xCu);
    v57 = v59;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v57, -1, -1);
    MEMORY[0x1B5E44758](v50, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v63, v65);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
}

uint64_t specialized InsightRequestSummaryLogger.constructLogJsonString(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  int64_t v3;
  void **v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v22;

  v2 = a2();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v22 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    v4 = (void **)(v2 + 56);
    do
    {
      v5 = (uint64_t)*(v4 - 3);
      v6 = *(v4 - 2);
      v7 = (uint64_t)*(v4 - 1);
      v8 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9._countAndFlagsBits = v5;
      v9._object = v6;
      String.append(_:)(v9);
      v10._countAndFlagsBits = 2243106;
      v10._object = (void *)0xE300000000000000;
      String.append(_:)(v10);
      v11._countAndFlagsBits = v7;
      v11._object = v8;
      String.append(_:)(v11);
      v12._countAndFlagsBits = 34;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(v22 + 16);
      v13 = *(_QWORD *)(v22 + 24);
      if (v14 >= v13 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
      v4 += 4;
      *(_QWORD *)(v22 + 16) = v14 + 1;
      v15 = v22 + 16 * v14;
      *(_QWORD *)(v15 + 32) = 34;
      *(_QWORD *)(v15 + 40) = 0xE100000000000000;
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v16 = BidirectionalCollection<>.joined(separator:)();
  v18 = v17;
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 125;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  return 123;
}

uint64_t initializeBufferWithCopyOfBuffer for InsightRequestSummaryLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t assignWithCopy for InsightRequestSummaryLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for InsightRequestSummaryLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for InsightRequestSummaryLogger(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for InsightRequestSummaryLogger()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4E01834(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for InsightRequestSummaryLogger()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4E0187C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for InsightRequestSummaryLogger()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for InsightRequestSummaryKey()
{
  return &type metadata for InsightRequestSummaryKey;
}

uint64_t InstrumentationUtil.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t InstrumentationUtil.powerLogger()()
{
  return 0;
}

id InstrumentationUtil.convertUUIDStringToSISchemaUUID(uuidStr:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  Class isa;
  uint64_t v11;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    outlined destroy of UUID?((uint64_t)v2);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    v8 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v7 = objc_msgSend(v8, sel_initWithNSUUID_, isa);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v7;
}

id InstrumentationUtil.buildWrapperEventMessage(_:logResourceUtilization:)(uint64_t a1, uint64_t a2, char a3)
{
  return specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(a1, a2, 0, 0, a3);
}

uint64_t InstrumentationUtil.init()()
{
  uint64_t v0;

  return v0;
}

Swift::UInt64 __swiftcall InstrumentationUtil.roundOffToTwoSignificantFigures(_:)(Swift::UInt64 a1)
{
  Swift::UInt64 v1;
  double v2;
  double v3;
  Swift::UInt64 result;
  double v5;
  double v6;

  v1 = a1;
  v2 = (double)a1;
  v3 = ceil(log10((double)a1));
  if (v3 <= 2.0)
    return v1;
  v5 = __exp10(v3 + -2.0);
  v6 = v5 * rint(v2 / v5);
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v6 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v6 < 1.84467441e19)
    return (unint64_t)v6;
LABEL_9:
  __break(1u);
  return result;
}

uint64_t InstrumentationUtil.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t InstrumentationUtil.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

NSObject *specialized InstrumentationUtil.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  NSObject *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  Class isa;
  id v13;
  id v14;
  Class v15;
  id v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;

  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A480]), sel_init);
  if (!v5)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    v6 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v18))
    {
      v19 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v39 = v20;
      *(_DWORD *)v19 = 136315394;
      v21 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      v23 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v6, v18, "Failed to create RequestLink event for source component: %s and target component: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v20, -1, -1);
      MEMORY[0x1B5E44758](v19, -1, -1);
    }
    goto LABEL_18;
  }
  v6 = v5;
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A490]), sel_init);
  if (!v7)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v39 = v29;
      *(_DWORD *)v28 = 136315138;
      v30 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v26, v27, "Failed to create source link event for source component: %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v29, -1, -1);
      MEMORY[0x1B5E44758](v28, -1, -1);
    }
LABEL_17:

LABEL_18:
    return 0;
  }
  v8 = v7;
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A490]), sel_init);
  if (!v9)
  {
    if (one-time initialization token for conversationBridge != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
    v26 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v26, v33))
    {

      return 0;
    }
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v39 = v35;
    *(_DWORD *)v34 = 136315138;
    v36 = SISchemaComponentName.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v26, v33, "Failed to create target link event for target component: %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v35, -1, -1);
    MEMORY[0x1B5E44758](v34, -1, -1);

    goto LABEL_17;
  }
  v10 = v9;
  objc_msgSend(v8, sel_setComponent_, a1);
  v11 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v11, sel_initWithNSUUID_, isa);

  objc_msgSend(v8, sel_setUuid_, v13);
  objc_msgSend(v10, sel_setComponent_, a3);
  v14 = objc_allocWithZone(MEMORY[0x1E0D9A4F8]);
  v15 = UUID._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v14, sel_initWithNSUUID_, v15);

  objc_msgSend(v10, sel_setUuid_, v16);
  -[NSObject setSource:](v6, sel_setSource_, v8);
  -[NSObject setTarget:](v6, sel_setTarget_, v10);

  return v6;
}

uint64_t type metadata accessor for InstrumentationUtil()
{
  return objc_opt_self();
}

uint64_t method lookup function for InstrumentationUtil()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InstrumentationUtil.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

_QWORD *InstrumentedStack.__allocating_init(initialFlowAgent:)(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  v2 = (_QWORD *)swift_allocObject();
  v2[5] = MEMORY[0x1E0DEE9E0];
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>);
    v3 = (_QWORD *)swift_allocObject();
    swift_weakInit();
    swift_weakInit();
    v3[6] = 0;
    v3[2] = a1;
    swift_beginAccess();
    swift_weakAssign();
    v3[4] = MEMORY[0x1E0DEE9D8];
    swift_weakAssign();
    v3[6] = 0;
    swift_retain();
    swift_retain();
    swift_release();
    specialized OrderedForest._push(_:)((uint64_t)v3);
    v4 = v3[2];
    type metadata accessor for InstrumentedStack.TrackedFlowAgent(0);
    swift_allocObject();
    v5 = swift_retain();
    v6 = InstrumentedStack.TrackedFlowAgent.init(agent:parent:)(v5, 0);
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = v2[5];
    v2[5] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v6, v4, isUniquelyReferenced_nonNull_native);
    v2[5] = v9;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
    swift_release();
    swift_release();
  }
  return v2;
}

_QWORD *InstrumentedStack.init(initialFlowAgent:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t *, _QWORD);
  uint64_t v5;

  v2 = MEMORY[0x1E0DEE9E0];
  v1[4] = 0;
  v1[5] = v2;
  v1[2] = 0;
  v1[3] = 0;
  if (a1)
  {
    v5 = a1;
    v3 = *(void (**)(uint64_t *, _QWORD))(*v1 + 208);
    swift_retain();
    v3(&v5, 0);
    swift_release();
    swift_release();
    swift_release();
  }
  return v1;
}

_QWORD *InstrumentedStack.TrackedFlowAgent.init(agent:parent:)(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD v39[2];
  uint64_t v40;
  char *v41;
  uint64_t v42;

  v3 = v2;
  v6 = type metadata accessor for OSSignpostID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B4EE3F50;
  swift_retain();
  v11 = ObjectIdentifier.hashValue.getter();
  v12 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v10 + 56) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v10 + 64) = v12;
  *(_QWORD *)(v10 + 32) = v11;
  v13 = 0xE300000000000000;
  v14 = String.init(format:_:)();
  v16 = v15;
  swift_release();
  v3[2] = v14;
  v3[3] = v16;
  if (a2)
  {
    v17 = a2[2];
    v13 = a2[3];
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = 7104878;
  }
  v3[4] = v17;
  v3[5] = v13;
  swift_retain();
  v18 = AnyFlow.description.getter();
  v20 = v19;
  swift_release();
  v3[6] = v18;
  v3[7] = v20;
  if (a2)
  {
    v22 = a2[8];
    v21 = __OFADD__(v22, 1);
    v23 = v22 + 1;
    if (!v21)
      goto LABEL_6;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v23 = 0;
  if (v21)
    goto LABEL_10;
LABEL_6:
  v3[8] = v23;
  if (one-time initialization token for executor != -1)
LABEL_11:
    swift_once();
  v24 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))((uint64_t)v3+ OBJC_IVAR____TtCC14SiriKitRuntime17InstrumentedStackP33_D2D0045FA6DDADCCE44653D1D402214316TrackedFlowAgent_signpostId, v9, v6);
  v39[1] = static os_signpost_type_t.begin.getter();
  v40 = static Log.executor;
  v41 = (char *)v3
      + OBJC_IVAR____TtCC14SiriKitRuntime17InstrumentedStackP33_D2D0045FA6DDADCCE44653D1D402214316TrackedFlowAgent_signpostId;
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1B4EE6D00;
  v26 = v3[6];
  v27 = v3[7];
  v28 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v25 + 56) = MEMORY[0x1E0DEA968];
  v29 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v25 + 32) = v26;
  *(_QWORD *)(v25 + 40) = v27;
  v30 = v3[8];
  v31 = MEMORY[0x1E0DEB418];
  *(_QWORD *)(v25 + 96) = MEMORY[0x1E0DEB418];
  v32 = MEMORY[0x1E0DEB490];
  *(_QWORD *)(v25 + 64) = v29;
  *(_QWORD *)(v25 + 72) = v30;
  v33 = v3[2];
  v34 = v3[3];
  *(_QWORD *)(v25 + 136) = v28;
  *(_QWORD *)(v25 + 144) = v29;
  *(_QWORD *)(v25 + 104) = v32;
  *(_QWORD *)(v25 + 112) = v33;
  *(_QWORD *)(v25 + 120) = v34;
  v35 = v3[4];
  v36 = v3[5];
  *(_QWORD *)(v25 + 176) = v28;
  *(_QWORD *)(v25 + 184) = v29;
  *(_QWORD *)(v25 + 152) = v35;
  *(_QWORD *)(v25 + 160) = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v37 = String.hashValue.getter();
  *(_QWORD *)(v25 + 216) = v31;
  *(_QWORD *)(v25 + 224) = v32;
  *(_QWORD *)(v25 + 192) = v37;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v3;
}

uint64_t InstrumentedStack.TrackedFlowAgent.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  static os_signpost_type_t.end.getter();
  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = v0
     + OBJC_IVAR____TtCC14SiriKitRuntime17InstrumentedStackP33_D2D0045FA6DDADCCE44653D1D402214316TrackedFlowAgent_signpostId;
  os_signpost(_:dso:log:name:signpostID:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall InstrumentedStack.clear()()
{
  _QWORD *v0;

  swift_beginAccess();
  v0[5] = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  v0[2] = 0;
  swift_release();
  v0[3] = 0;
  swift_release();
  swift_beginAccess();
  v0[4] = 0;
}

_QWORD *InstrumentedStack.push(value:parentNode:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;

  v3 = v2;
  v4 = (_QWORD *)a2;
  v5 = specialized OrderedForest.push(value:parentNode:)(a1, a2);
  if (v4)
  {
    v6 = v4[2];
    swift_beginAccess();
    v7 = *(_QWORD *)(v2 + 40);
    if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v9 & 1) != 0))
    {
      v4 = *(_QWORD **)(*(_QWORD *)(v7 + 56) + 8 * v8);
      swift_retain();
    }
    else
    {
      v4 = 0;
    }
  }
  v10 = v5[2];
  type metadata accessor for InstrumentedStack.TrackedFlowAgent(0);
  swift_allocObject();
  swift_retain();
  v11 = swift_retain();
  v12 = InstrumentedStack.TrackedFlowAgent.init(agent:parent:)(v11, v4);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v15 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 40) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, v10, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 40) = v15;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  return v5;
}

_QWORD *specialized OrderedForest.push(value:parentNode:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>);
  v4 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  swift_weakInit();
  v4[6] = 0;
  v4[2] = a1;
  swift_beginAccess();
  swift_weakAssign();
  v4[4] = MEMORY[0x1E0DEE9D8];
  swift_weakAssign();
  v4[6] = 0;
  swift_retain();
  swift_release();
  if (a2)
  {
    swift_beginAccess();
    swift_retain();
    v5 = swift_retain();
    MEMORY[0x1B5E43498](v5);
    if (*(_QWORD *)((*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    swift_release();
  }
  specialized OrderedForest._push(_:)((uint64_t)v4);
  return v4;
}

uint64_t InstrumentedStack.replan(node:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t result;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;

  v2 = v1;
  v3 = specialized OrderedForest.replan(node:)(a1);
  v4 = (*(uint64_t (**)(_QWORD *))(*v3 + 152))(v3);
  v5 = (_QWORD *)v4;
  v95 = v3;
  if (v4 >> 62)
    goto LABEL_101;
  v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v7 = (unint64_t)v5;
  if (!v6)
  {
LABEL_102:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v95;
  }
LABEL_3:
  v8 = 0;
  v9 = (uint64_t *)(v2 + 40);
  v10 = v7 & 0xC000000000000001;
  v82 = (_QWORD *)(v7 + 32);
  v85 = v6;
  v86 = (_QWORD *)v7;
  v84 = v7 & 0xC000000000000001;
  while (v10)
  {
    result = MEMORY[0x1B5E43B94](v8, v7);
    v99 = (_QWORD *)result;
    v12 = __OFADD__(v8, 1);
    v5 = (_QWORD *)((char *)v8 + 1);
    if (v12)
      goto LABEL_103;
LABEL_9:
    v94 = v5;
    v13 = (*(uint64_t (**)(void))(*v99 + 152))();
    v14 = v13;
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      v16 = _CocoaArrayWrapper.endIndex.getter();
      if (!v16)
        goto LABEL_90;
LABEL_11:
      v17 = 0;
      v18 = v14 & 0xC000000000000001;
      v83 = v14 + 32;
      v88 = v16;
      v89 = v14;
      v87 = v14 & 0xC000000000000001;
      while (2)
      {
        if (v18)
        {
          v19 = v17;
          result = MEMORY[0x1B5E43B94](v17, v14);
          v100 = (_QWORD *)result;
          v12 = __OFADD__(v19, 1);
          v20 = v19 + 1;
          if (v12)
            goto LABEL_104;
        }
        else
        {
          v100 = *(_QWORD **)(v83 + 8 * v17);
          v21 = v17;
          result = swift_retain();
          v12 = __OFADD__(v21, 1);
          v20 = v21 + 1;
          if (v12)
            goto LABEL_104;
        }
        v96 = v20;
        v22 = (*(uint64_t (**)(void))(*v100 + 152))();
        v23 = v22;
        if (!(v22 >> 62))
        {
          v24 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          v25 = v24;
          if (v24)
            break;
          goto LABEL_83;
        }
        swift_bridgeObjectRetain();
        v25 = _CocoaArrayWrapper.endIndex.getter();
        if (!v25)
        {
LABEL_83:
          swift_bridgeObjectRelease_n();
          v71 = v100[2];
          swift_beginAccess();
          v72 = specialized __RawDictionaryStorage.find<A>(_:)(v71);
          if ((v73 & 1) != 0)
          {
            v74 = v72;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v5 = (_QWORD *)*v9;
            v116 = (_QWORD *)*v9;
            *v9 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              specialized _NativeDictionary.copy()();
              v5 = v116;
            }
            specialized _NativeDictionary._delete(at:)(v74, (uint64_t)v5);
            *v9 = (uint64_t)v5;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          swift_release();
          v14 = v89;
          v17 = v96;
          v18 = v87;
          if (v96 == v88)
            goto LABEL_90;
          continue;
        }
        break;
      }
      v26 = 0;
      v27 = v23 & 0xC000000000000001;
      v90 = v23 + 32;
      v91 = v23 & 0xC000000000000001;
      v92 = v25;
      v93 = v23;
      while (2)
      {
        if (v27)
        {
          v28 = v26;
          v103 = (_QWORD *)MEMORY[0x1B5E43B94](v26, v23);
          v12 = __OFADD__(v28, 1);
          v29 = v28 + 1;
          if (v12)
            goto LABEL_100;
        }
        else
        {
          v103 = *(_QWORD **)(v90 + 8 * v26);
          v30 = v26;
          swift_retain();
          v12 = __OFADD__(v30, 1);
          v29 = v30 + 1;
          if (v12)
            goto LABEL_100;
        }
        v97 = v29;
        v31 = (*(uint64_t (**)(void))(*v103 + 152))();
        v32 = v31;
        if (!(v31 >> 62))
        {
          v33 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          v34 = v33;
          if (v33)
            break;
          goto LABEL_76;
        }
        swift_bridgeObjectRetain();
        v34 = _CocoaArrayWrapper.endIndex.getter();
        if (!v34)
        {
LABEL_76:
          swift_bridgeObjectRelease_n();
          v66 = v103[2];
          swift_beginAccess();
          v67 = specialized __RawDictionaryStorage.find<A>(_:)(v66);
          if ((v68 & 1) != 0)
          {
            v69 = v67;
            v70 = swift_isUniquelyReferenced_nonNull_native();
            v5 = (_QWORD *)*v9;
            v115 = (_QWORD *)*v9;
            *v9 = 0x8000000000000000;
            if (!v70)
            {
              specialized _NativeDictionary.copy()();
              v5 = v115;
            }
            specialized _NativeDictionary._delete(at:)(v69, (uint64_t)v5);
            *v9 = (uint64_t)v5;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          swift_release();
          v23 = v93;
          v26 = v97;
          v27 = v91;
          if (v97 == v92)
            goto LABEL_83;
          continue;
        }
        break;
      }
      v35 = 0;
      v104 = v32 & 0xC000000000000001;
      v98 = v32 + 32;
      v101 = v34;
      v102 = v32;
      while (2)
      {
        if (v104)
        {
          v36 = v35;
          v106 = (_QWORD *)MEMORY[0x1B5E43B94](v35, v32);
          v12 = __OFADD__(v36, 1);
          v37 = v36 + 1;
          if (v12)
            goto LABEL_99;
        }
        else
        {
          v106 = *(_QWORD **)(v98 + 8 * v35);
          v38 = v35;
          swift_retain();
          v12 = __OFADD__(v38, 1);
          v37 = v38 + 1;
          if (v12)
            goto LABEL_99;
        }
        v105 = v37;
        v39 = (*(uint64_t (**)(void))(*v106 + 152))();
        v107 = v39;
        if (!(v39 >> 62))
        {
          v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v40)
            break;
          goto LABEL_72;
        }
        swift_bridgeObjectRetain();
        v40 = _CocoaArrayWrapper.endIndex.getter();
        if (!v40)
        {
LABEL_72:
          swift_bridgeObjectRelease_n();
          v61 = v106[2];
          swift_beginAccess();
          v62 = specialized __RawDictionaryStorage.find<A>(_:)(v61);
          if ((v63 & 1) != 0)
          {
            v64 = v62;
            v65 = swift_isUniquelyReferenced_nonNull_native();
            v5 = (_QWORD *)*v9;
            v114 = (_QWORD *)*v9;
            *v9 = 0x8000000000000000;
            if (!v65)
            {
              specialized _NativeDictionary.copy()();
              v5 = v114;
            }
            specialized _NativeDictionary._delete(at:)(v64, (uint64_t)v5);
            *v9 = (uint64_t)v5;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          swift_release();
          v32 = v102;
          v35 = v105;
          if (v105 == v101)
            goto LABEL_76;
          continue;
        }
        break;
      }
      v41 = 0;
      v108 = v40;
      while (2)
      {
        if ((v107 & 0xC000000000000001) != 0)
        {
          v5 = (_QWORD *)MEMORY[0x1B5E43B94](v41, v107);
          v12 = __OFADD__(v41++, 1);
          if (v12)
            goto LABEL_98;
        }
        else
        {
          v5 = *(_QWORD **)(v107 + 32 + 8 * v41);
          swift_retain();
          v12 = __OFADD__(v41++, 1);
          if (v12)
            goto LABEL_98;
        }
        v42 = (*(uint64_t (**)(void))(*v5 + 152))();
        v110 = v42;
        v109 = v5;
        if (!(v42 >> 62))
        {
          v43 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v43)
            break;
          goto LABEL_68;
        }
        swift_bridgeObjectRetain();
        v43 = _CocoaArrayWrapper.endIndex.getter();
        if (!v43)
        {
LABEL_68:
          swift_bridgeObjectRelease_n();
          v56 = v109[2];
          swift_beginAccess();
          v57 = specialized __RawDictionaryStorage.find<A>(_:)(v56);
          if ((v58 & 1) != 0)
          {
            v59 = v57;
            v60 = swift_isUniquelyReferenced_nonNull_native();
            v5 = (_QWORD *)*v9;
            v113 = (_QWORD *)*v9;
            *v9 = 0x8000000000000000;
            if (!v60)
            {
              specialized _NativeDictionary.copy()();
              v5 = v113;
            }
            specialized _NativeDictionary._delete(at:)(v59, (uint64_t)v5);
            *v9 = (uint64_t)v5;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          swift_release();
          if (v41 == v108)
            goto LABEL_72;
          continue;
        }
        break;
      }
      v44 = 0;
      v111 = v43;
      while (2)
      {
        if ((v110 & 0xC000000000000001) != 0)
        {
          v45 = (_QWORD *)MEMORY[0x1B5E43B94](v44, v110);
          v12 = __OFADD__(v44++, 1);
          if (v12)
            goto LABEL_96;
        }
        else
        {
          v45 = *(_QWORD **)(v110 + 32 + 8 * v44);
          swift_retain();
          v12 = __OFADD__(v44++, 1);
          if (v12)
          {
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            swift_bridgeObjectRetain();
            v6 = _CocoaArrayWrapper.endIndex.getter();
            v7 = (unint64_t)v5;
            if (!v6)
              goto LABEL_102;
            goto LABEL_3;
          }
        }
        v46 = (*(uint64_t (**)(void))(*v45 + 152))();
        v47 = v46;
        if (v46 >> 62)
        {
          swift_bridgeObjectRetain();
          v48 = _CocoaArrayWrapper.endIndex.getter();
          if (v48)
          {
LABEL_57:
            if (v48 < 1)
              goto LABEL_97;
            for (i = 0; i != v48; ++i)
            {
              if ((v47 & 0xC000000000000001) != 0)
              {
                v5 = (_QWORD *)MEMORY[0x1B5E43B94](i, v47);
              }
              else
              {
                v5 = *(_QWORD **)(v47 + 8 * i + 32);
                swift_retain();
              }
              InstrumentedStack.removeTrackedFlow(for:)(v5);
              swift_release();
            }
          }
        }
        else
        {
          v48 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v48)
            goto LABEL_57;
        }
        swift_bridgeObjectRelease_n();
        v50 = v45[2];
        swift_beginAccess();
        v51 = specialized __RawDictionaryStorage.find<A>(_:)(v50);
        if ((v52 & 1) != 0)
        {
          v53 = v51;
          v54 = swift_isUniquelyReferenced_nonNull_native();
          v55 = *v9;
          v112 = *v9;
          *v9 = 0x8000000000000000;
          if (!v54)
          {
            specialized _NativeDictionary.copy()();
            v55 = v112;
          }
          specialized _NativeDictionary._delete(at:)(v53, v55);
          *v9 = v55;
          swift_bridgeObjectRelease();
        }
        swift_endAccess();
        swift_release();
        swift_release();
        if (v44 == v111)
          goto LABEL_68;
        continue;
      }
    }
    v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v16 = v15;
    if (v15)
      goto LABEL_11;
LABEL_90:
    swift_bridgeObjectRelease_n();
    v76 = v99[2];
    swift_beginAccess();
    v77 = specialized __RawDictionaryStorage.find<A>(_:)(v76);
    if ((v78 & 1) != 0)
    {
      v79 = v77;
      v80 = swift_isUniquelyReferenced_nonNull_native();
      v81 = *v9;
      v117 = *v9;
      *v9 = 0x8000000000000000;
      if (!v80)
      {
        specialized _NativeDictionary.copy()();
        v81 = v117;
      }
      specialized _NativeDictionary._delete(at:)(v79, v81);
      *v9 = v81;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    swift_release();
    swift_release();
    v7 = (unint64_t)v86;
    v8 = v94;
    v10 = v84;
    if (v94 == (_QWORD *)v85)
      goto LABEL_102;
  }
  v99 = (_QWORD *)v82[(_QWORD)v8];
  result = swift_retain();
  v12 = __OFADD__(v8, 1);
  v5 = (_QWORD *)((char *)v8 + 1);
  if (!v12)
    goto LABEL_9;
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

_QWORD *specialized OrderedForest.replan(node:)(_QWORD *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1[2];
  v3 = *(void (**)(uint64_t))(*a1 + 128);
  v4 = swift_retain();
  v3(v4);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>);
  v5 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  swift_weakInit();
  v5[6] = 0;
  v5[2] = v2;
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  v6 = MEMORY[0x1E0DEE9D8];
  v5[4] = MEMORY[0x1E0DEE9D8];
  swift_weakAssign();
  v5[6] = 0;
  swift_release();
  v7 = specialized OrderedForest._recursiveRemove(_:)((uint64_t)a1);
  v8 = (*(uint64_t (**)(unint64_t))(*a1 + 152))(v7);
  swift_beginAccess();
  v5[4] = v8;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  a1[4] = v6;
  swift_bridgeObjectRelease();
  v9 = specialized OrderedForest._push(_:)((uint64_t)a1);
  v10 = ((uint64_t (*)(uint64_t))v3)(v9);
  if (v10)
  {
    v11 = v10;
    v12 = *(uint64_t (**)(void))(*(_QWORD *)v10 + 152);
    v13 = v12();
    if (v13 >> 62)
      v14 = _CocoaArrayWrapper.endIndex.getter();
    else
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    v15 = swift_bridgeObjectRelease();
    if (v14)
    {
      v16 = ((uint64_t (*)(uint64_t))v12)(v15);
      swift_retain();
      v17 = specialized _ArrayProtocol.filter(_:)(v16, (uint64_t)a1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_beginAccess();
      *(_QWORD *)(v11 + 32) = v17;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v18 = swift_retain();
      MEMORY[0x1B5E43498](v18);
      if (*(_QWORD *)((*(_QWORD *)(v11 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v11 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                          + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
    swift_release();
  }
  return v5;
}

uint64_t InstrumentedStack.remove(node:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = specialized OrderedForest.remove(node:)(a1);
  v2 = (_QWORD *)swift_retain();
  InstrumentedStack.removeTrackedFlow(for:)(v2);
  return v1;
}

uint64_t InstrumentedStack.removeTrackedFlow(for:)(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;

  v2 = (*(uint64_t (**)(void))(*a1 + 152))();
  v3 = v2;
  if (!(v2 >> 62))
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v4)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease_n();
    v8 = a1[2];
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(v8);
    swift_endAccess();
    return swift_release();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v4 = result;
  if (!result)
    goto LABEL_10;
LABEL_3:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x1B5E43B94](i, v3);
      }
      else
      {
        v7 = *(_QWORD *)(v3 + 8 * i + 32);
        swift_retain();
      }
      InstrumentedStack.removeTrackedFlow(for:)(v7);
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void InstrumentedStack.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void InstrumentedStack.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t InstrumentedStack.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t InstrumentedStack.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t InstrumentedStack.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

_QWORD *vtable thunk for OrderedForest.push(value:parentNode:) dispatching to InstrumentedStack.push(value:parentNode:)(uint64_t *a1, uint64_t a2)
{
  return InstrumentedStack.push(value:parentNode:)(*a1, a2);
}

uint64_t specialized OrderedForest._push(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v3 = v1[3];
  if (v1[2] && v3)
  {
    swift_weakAssign();
    *(_QWORD *)(v3 + 48) = a1;
    swift_retain();
    swift_release();
    v1[3] = a1;
  }
  else
  {
    v1[3] = a1;
    swift_retain();
    swift_release();
    v1[2] = a1;
  }
  swift_retain();
  swift_release();
  result = swift_beginAccess();
  v5 = v1[4];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    v1[4] = v7;
  return result;
}

uint64_t type metadata accessor for InstrumentedStack.TrackedFlowAgent(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for InstrumentedStack.TrackedFlowAgent);
}

uint64_t specialized OrderedForest._remove(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t Strong;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v3 = v1[2];
  v4 = v1[3];
  if (v3)
    v5 = v3 == a1;
  else
    v5 = 0;
  if (v5)
  {
    if (v4)
      v8 = v4 == a1;
    else
      v8 = 0;
    if (v8)
    {
      v1[2] = 0;
      swift_release();
      v1[3] = 0;
    }
    else
    {
      v1[2] = *(_QWORD *)(a1 + 48);
      swift_retain();
    }
    goto LABEL_23;
  }
  Strong = swift_weakLoadStrong();
  if (v4)
    v7 = v4 == a1;
  else
    v7 = 0;
  if (v7)
  {
    if (Strong)
    {
      *(_QWORD *)(Strong + 48) = 0;
      swift_retain();
      swift_release();
      swift_release();
    }
    else
    {
      swift_retain();
    }
    v9 = swift_weakLoadStrong();
    swift_release();
    v1[3] = v9;
    goto LABEL_23;
  }
  if (Strong)
  {
    *(_QWORD *)(Strong + 48) = *(_QWORD *)(a1 + 48);
    swift_retain();
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(a1 + 48))
  {
    swift_weakLoadStrong();
    swift_weakAssign();
LABEL_23:
    swift_release();
  }
  swift_weakAssign();
  *(_QWORD *)(a1 + 48) = 0;
  swift_release();
  result = swift_beginAccess();
  v11 = v1[4];
  v12 = __OFSUB__(v11, 1);
  v13 = v11 - 1;
  if (v12)
    __break(1u);
  else
    v1[4] = v13;
  return result;
}

unint64_t specialized OrderedForest._recursiveRemove(_:)(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;

  result = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 152))();
  v3 = result;
  if (!(result >> 62))
  {
    v4 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    specialized OrderedForest._remove(_:)(a1);
    return a1;
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  v4 = result;
  if (!result)
    goto LABEL_10;
LABEL_3:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v6 = MEMORY[0x1B5E43B94](i, v3);
      }
      else
      {
        v6 = *(_QWORD *)(v3 + 8 * i + 32);
        swift_retain();
      }
      specialized OrderedForest._recursiveRemove(_:)(v6);
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t specialized OrderedForest.remove(node:)(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = specialized OrderedForest._recursiveRemove(_:)(a1);
  v3 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 128))(v2);
  if (v3)
  {
    v4 = v3;
    v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 152);
    v6 = v5(v3);
    if (v6 >> 62)
      v7 = _CocoaArrayWrapper.endIndex.getter();
    else
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v8 = swift_bridgeObjectRelease();
    if (v7)
    {
      v9 = v5(v8);
      swift_retain();
      v10 = specialized _ArrayProtocol.filter(_:)(v9, a1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_beginAccess();
      *(_QWORD *)(v4 + 32) = v10;
      swift_release();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_weakAssign();
    }
    else
    {
      swift_release();
    }
  }
  return a1;
}

uint64_t type metadata accessor for InstrumentedStack(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for InstrumentedStack);
}

uint64_t type metadata completion function for InstrumentedStack()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for InstrumentedStack()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InstrumentedStack.__allocating_init(initialFlowAgent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t ObjC metadata update function for InstrumentedStack.TrackedFlowAgent()
{
  return type metadata accessor for InstrumentedStack.TrackedFlowAgent(0);
}

uint64_t type metadata completion function for InstrumentedStack.TrackedFlowAgent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t IntelligenceFlowFeatureFlag.isEnabled.getter()
{
  char v0;
  _BYTE v2[24];
  ValueMetadata *v3;
  unint64_t v4;

  v3 = &type metadata for IntelligenceFlowFeatureFlag;
  v4 = lazy protocol witness table accessor for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag();
  v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return v0 & 1;
}

const char *IntelligenceFlowFeatureFlag.domain.getter()
{
  return "IntelligenceFlow";
}

const char *IntelligenceFlowFeatureFlag.feature.getter()
{
  return "IntelligenceFlow";
}

uint64_t static IntelligenceFlowFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void IntelligenceFlowFeatureFlag.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int IntelligenceFlowFeatureFlag.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance IntelligenceFlowFeatureFlag()
{
  return "IntelligenceFlow";
}

uint64_t storeEnumTagSinglePayload for IntelligenceFlowFeatureFlag(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4E04070 + 4 * byte_1B4EEB5A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4E04090 + 4 * byte_1B4EEB5A5[v4]))();
}

_BYTE *sub_1B4E04070(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4E04090(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4E04098(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4E040A0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4E040A8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4E040B0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IntelligenceFlowFeatureFlag()
{
  return &type metadata for IntelligenceFlowFeatureFlag;
}

uint64_t IntentLoggingEventSink.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t *IntentLoggingEventSink.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1)
    swift_once();
  return &static IntentLoggingEventSink.instance;
}

uint64_t static IntentLoggingEventSink.instance.getter()
{
  return swift_initStaticObject();
}

uint64_t one-time initialization function for intentStore()
{
  uint64_t v0;

  v0 = type metadata accessor for IntentEventStore();
  __swift_allocate_value_buffer(v0, static IntentLoggingEventSink.intentStore);
  __swift_project_value_buffer(v0, (uint64_t)static IntentLoggingEventSink.intentStore);
  return IntentEventStore.init()();
}

void IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void **v4;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37[4];

  v9 = *v4;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10);
  if (a1)
  {
    v35 = v9;
    v13 = a1;
    objc_msgSend(v13, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for INIntent();
    if (swift_dynamicCast())
    {
      v33 = a3;
      v34 = a4;
      v14 = (void *)v36;
      v15 = objc_msgSend(v13, sel_intentId);
      if (v15)
      {
        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v18 = v17;

        v15 = (id)v16;
      }
      else
      {
        v18 = 0;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v10);
      v30 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      v31 = swift_allocObject();
      *(_QWORD *)(v31 + 16) = v14;
      (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v31 + v30, (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
      *(_QWORD *)(v31 + ((v12 + v30 + 7) & 0xFFFFFFFFFFFFFFF8)) = v35;
      v32 = v14;
      specialized IntentLoggingEventSink.safeHandle(intentId:context:intentIdClosure:)((uint64_t)v15, v18, v33, v34, (void (*)(void))partial apply for closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:));
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for instrumentation != -1)
        swift_once();
      v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)static Logger.instrumentation);
      v23 = v13;
      v24 = Logger.logObject.getter();
      v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc();
        v27 = swift_slowAlloc();
        v37[0] = v27;
        *(_DWORD *)v26 = 136315138;
        v28 = INIntent.debugDescriptionLite.getter();
        v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v24, v25, "Unexpected failure when cloning intent: %s", v26, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v27, -1, -1);
        MEMORY[0x1B5E44758](v26, -1, -1);

      }
      else
      {

      }
    }
  }
  else
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.instrumentation);
    v35 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1B4BE6000, v35, v20, "Intent is nil, not sending handleIntentStarted event.", v21, 2u);
      MEMORY[0x1B5E44758](v21, -1, -1);
    }

  }
}

void IntentLoggingEventSink.handleConfirmationOffered(intent:parameterName:multicardinalValueIndex:itemToConfirm:now:context:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  NSObject **v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  NSObject *v39;
  _OWORD v40[2];

  v38 = a5;
  v36 = a2;
  v37 = a4;
  v39 = *v9;
  v15 = type metadata accessor for Date();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x1E0C80A78](v15);
  if (a1)
  {
    v33 = a3;
    v34 = a9;
    v35 = a8;
    v18 = a1;
    v19 = objc_msgSend(v18, sel_intentId);
    if (v19)
    {
      v20 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v23 = v22;

    }
    else
    {
      v21 = 0;
      v23 = 0;
    }
    outlined init with copy of Any(a6, (uint64_t)v40);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a7, v15);
    v27 = (*(unsigned __int8 *)(v16 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v28 = swift_allocObject();
    outlined init with take of Any(v40, (_OWORD *)(v28 + 16));
    v29 = v33;
    *(_QWORD *)(v28 + 48) = v36;
    *(_QWORD *)(v28 + 56) = v29;
    v30 = v37;
    *(_QWORD *)(v28 + 64) = v18;
    *(_QWORD *)(v28 + 72) = v30;
    *(_BYTE *)(v28 + 80) = v38 & 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v28 + v27, (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
    *(_QWORD *)(v28 + ((v17 + v27 + 7) & 0xFFFFFFFFFFFFFFF8)) = v39;
    v31 = v18;
    swift_bridgeObjectRetain();
    specialized IntentLoggingEventSink.safeHandle(intentId:context:intentIdClosure:)(v21, v23, v35, v34, (void (*)(void))partial apply for closure #1 in IntentLoggingEventSink.handleConfirmationOffered(intent:parameterName:multicardinalValueIndex:itemToConfirm:now:context:));
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.instrumentation);
    v39 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_1B4BE6000, v39, v25, "Intent is nil, not sending handleConfirmationOffered event.", v26, 2u);
      MEMORY[0x1B5E44758](v26, -1, -1);
    }

  }
}

void IntentLoggingEventSink.handleConfirmationResult(intent:parameterName:multicardinalIndexValue:confirmationState:now:context:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t *v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  void (*v28)(char *, uint64_t, uint64_t);
  Class v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  id v34;
  uint64_t v35;
  char *v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Class isa;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  NSObject *v53;

  v47 = a6;
  v49 = a4;
  v50 = a3;
  v51 = a9;
  v15 = *v9;
  v53 = type metadata accessor for Date();
  isa = v53[-1].isa;
  v16 = *((_QWORD *)isa + 8);
  MEMORY[0x1E0C80A78](v53);
  v52 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SiriKitConfirmationState();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = MEMORY[0x1E0C80A78](v17);
  if (a1)
  {
    v42 = a7;
    v21 = v20;
    v41 = a1;
    v22 = objc_msgSend(v41, sel_intentId);
    v45 = v15;
    v46 = a8;
    v44 = a5;
    v43 = a2;
    if (v22)
    {
      v23 = v22;
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v40 = v24;

    }
    else
    {
      v39 = 0;
      v40 = 0;
    }
    v28 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    v38 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    v28(v38, v47, v21);
    v29 = isa;
    (*((void (**)(char *, uint64_t, NSObject *))isa + 2))(v52, v42, v53);
    v30 = (*(unsigned __int8 *)(v18 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
    v31 = (v19 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v32 = (*((unsigned __int8 *)v29 + 80) + v31 + 9) & ~(unint64_t)*((unsigned __int8 *)v29 + 80);
    v33 = (char *)swift_allocObject();
    v34 = v41;
    v35 = v43;
    *((_QWORD *)v33 + 2) = v41;
    *((_QWORD *)v33 + 3) = v35;
    *((_QWORD *)v33 + 4) = v50;
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v33[v30], v38, v21);
    v36 = &v33[v31];
    *(_QWORD *)v36 = v49;
    v36[8] = v44 & 1;
    (*((void (**)(char *, char *, NSObject *))v29 + 4))(&v33[v32], v52, v53);
    *(_QWORD *)&v33[(v16 + v32 + 7) & 0xFFFFFFFFFFFFFFF8] = v45;
    v37 = v34;
    swift_bridgeObjectRetain();
    specialized IntentLoggingEventSink.safeHandle(intentId:context:intentIdClosure:)(v39, v40, v46, v51, (void (*)(void))partial apply for closure #1 in IntentLoggingEventSink.handleConfirmationResult(intent:parameterName:multicardinalIndexValue:confirmationState:now:context:));
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.instrumentation);
    v53 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1B4BE6000, v53, v26, "Intent is nil, not sending handleConfirmationResult event.", v27, 2u);
      MEMORY[0x1B5E44758](v27, -1, -1);
    }

  }
}

void IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  id v57;
  uint64_t v58[4];

  v51 = a6;
  v52 = a3;
  v55 = a4;
  v50 = a2;
  v9 = *v6;
  v10 = type metadata accessor for Date();
  v53 = *(_QWORD *)(v10 - 8);
  v54 = v10;
  v11 = *(_QWORD *)(v53 + 64);
  MEMORY[0x1E0C80A78](v10);
  v56 = ((char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v48 = v9;
    v49 = a5;
    v20 = a1;
    objc_msgSend(v20, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for INIntent();
    if (swift_dynamicCast())
    {
      v46 = v57;
      v21 = objc_msgSend(v57, sel_intentId);
      v47 = v20;
      if (v21)
      {
        v22 = v21;
        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v45 = v23;

      }
      else
      {
        v44 = 0;
        v45 = 0;
      }
      outlined init with copy of ReferenceResolutionClientProtocol?(v50, (uint64_t)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for LaunchAppBehavior?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v51, (uint64_t)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      v35 = v53;
      v36 = v54;
      (*(void (**)(NSObject *, uint64_t, uint64_t))(v53 + 16))(v56, v52, v54);
      v37 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
      v38 = (v18 + *(unsigned __int8 *)(v13 + 80) + v37) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      v39 = (v14 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
      v40 = (*(unsigned __int8 *)(v35 + 80) + v39 + 8) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
      v41 = swift_allocObject();
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v19, v41 + v37, &demangling cache variable for type metadata for LaunchAppBehavior?);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v15, v41 + v38, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      v42 = v47;
      *(_QWORD *)(v41 + v39) = v47;
      (*(void (**)(unint64_t, NSObject *, uint64_t))(v35 + 32))(v41 + v40, v56, v36);
      *(_QWORD *)(v41 + ((v11 + v40 + 7) & 0xFFFFFFFFFFFFFFF8)) = v48;
      v43 = v42;
      specialized IntentLoggingEventSink.safeHandle(intentId:context:intentIdClosure:)(v44, v45, v55, v49, (void (*)(void))partial apply for closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:));
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for instrumentation != -1)
        swift_once();
      v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.instrumentation);
      v28 = v20;
      v29 = Logger.logObject.getter();
      v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc();
        v32 = swift_slowAlloc();
        v58[0] = v32;
        *(_DWORD *)v31 = 136315138;
        v33 = INIntent.debugDescriptionLite.getter();
        v57 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v58);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v29, v30, "Unexpected failure when cloning intent: %s", v31, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v32, -1, -1);
        MEMORY[0x1B5E44758](v31, -1, -1);

      }
      else
      {

      }
    }
  }
  else
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.instrumentation);
    v56 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_1B4BE6000, v56, v25, "Intent is nil, not sending handleIntentResult event.", v26, 2u);
      MEMORY[0x1B5E44758](v26, -1, -1);
    }

  }
}

uint64_t closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = a2;
  v25 = a5;
  v23 = a1;
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.background.getter();
  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 0, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
  v15 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v16 = (v9 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (char *)swift_allocObject();
  *((_QWORD *)v17 + 2) = 0;
  *((_QWORD *)v17 + 3) = 0;
  *((_QWORD *)v17 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v17[v15], v10, v7);
  v18 = &v17[v16];
  v19 = v24;
  *(_QWORD *)v18 = v23;
  *((_QWORD *)v18 + 1) = v19;
  *(_QWORD *)&v17[(v16 + 23) & 0xFFFFFFFFFFFFFFF8] = v25;
  v20 = a3;
  swift_bridgeObjectRetain();
  _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:), (uint64_t)v17);
  swift_release();
  return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
}

uint64_t closure #1 in closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v8 = type metadata accessor for Date();
  v7[6] = v8;
  v7[7] = *(_QWORD *)(v8 - 8);
  v7[8] = swift_task_alloc();
  v7[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:)()
{
  uint64_t v0;
  void *v1;
  void (*v2)(_QWORD, _QWORD, _QWORD);
  id v3;
  uint64_t v5;

  v1 = *(void **)(v0 + 16);
  v2 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 16);
  v2(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 48));
  type metadata accessor for IntentStart();
  swift_allocObject();
  v3 = v1;
  IntentStart.init(intent:timestamp:)();
  v2(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 48));
  type metadata accessor for IntentEvent();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  IntentEvent.init(intentId:intentStart:createdAt:)();
  if (one-time initialization token for intentStore != -1)
    swift_once();
  v5 = type metadata accessor for IntentEventStore();
  __swift_project_value_buffer(v5, (uint64_t)static IntentLoggingEventSink.intentStore);
  IntentEventStore.log(event:)();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v8 = type metadata accessor for TaskPriority();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v12 = v11;
  swift_unknownObjectRelease();
  if (v12 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v10;
    v14[3] = v12;
  }
  return swift_task_create();
}

uint64_t closure #1 in IntentLoggingEventSink.handleDisambiguationOffered(intent:parameterName:multicardinalValueIndex:disambiguationItems:now:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _QWORD v21[4];
  int v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a6;
  v21[2] = a2;
  v21[3] = a3;
  v21[1] = a1;
  v22 = a7 & 1;
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v21[0] = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v21 - v14;
  swift_bridgeObjectRetain();
  v16 = objc_msgSend(a5, sel__className);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v17(v15, a9, v10);
  type metadata accessor for DisambiguationOffer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v18 = v24;
  result = DisambiguationOffer.init(parameterName:intentType:multicardinalIndexValue:disambiguationItems:timestamp:)();
  if (!v18)
  {
    v17((char *)v21[0], a9, v10);
    type metadata accessor for IntentEvent();
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    IntentEvent.init(intentId:disambiguationOffer:createdAt:)();
    if (one-time initialization token for intentStore != -1)
      swift_once();
    v20 = type metadata accessor for IntentEventStore();
    __swift_project_value_buffer(v20, (uint64_t)static IntentLoggingEventSink.intentStore);
    IntentEventStore.log(event:)();
    swift_release();
    return swift_release();
  }
  return result;
}

void closure #1 in IntentLoggingEventSink.handleDisambiguationResult(intent:parameterName:multicardinalIndexValue:sirikitConfirmationState:now:context:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  id v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37[5];
  _OWORD v38[2];
  uint64_t v39;

  v32 = a7;
  v33 = a6;
  v31[1] = a1;
  v31[2] = a2;
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v31[0] = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v31 - v16;
  v18 = objc_msgSend(a3, sel__dictionaryRepresentation);
  v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v34 = a4;
  *(_QWORD *)&v35 = a4;
  *((_QWORD *)&v35 + 1) = a5;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v19 + 16) && (v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37), (v21 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v19 + 56) + 32 * v20, (uint64_t)&v35);
  }
  else
  {
    v35 = 0u;
    v36 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v37);
  if (*((_QWORD *)&v36 + 1))
  {
    outlined init with take of Any(&v35, v38);
    swift_bridgeObjectRetain();
    v22 = objc_msgSend(a3, sel__className);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    outlined init with copy of Any((uint64_t)v38, (uint64_t)v37);
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v23(v17, a8, v12);
    type metadata accessor for DisambiguationResult();
    swift_allocObject();
    v24 = v39;
    DisambiguationResult.init(parameterName:intentType:multicardinalIndexValue:resolvedValue:timestamp:)();
    if (!v24)
    {
      v23((char *)v31[0], a8, v12);
      type metadata accessor for IntentEvent();
      swift_allocObject();
      swift_bridgeObjectRetain();
      swift_retain();
      IntentEvent.init(intentId:disambiguationResult:createdAt:)();
      if (one-time initialization token for intentStore != -1)
        swift_once();
      v30 = type metadata accessor for IntentEventStore();
      __swift_project_value_buffer(v30, (uint64_t)static IntentLoggingEventSink.intentStore);
      IntentEventStore.log(event:)();
      swift_release();
      swift_release();
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v35, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v37[0] = v29;
      *(_DWORD *)v28 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v38[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, a5, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v26, v27, "Intent has no value for %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v29, -1, -1);
      MEMORY[0x1B5E44758](v28, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a7;
  v36 = a6;
  v37 = a5;
  v34 = a3;
  v35 = a4;
  v38 = a1;
  v39 = a2;
  v42 = type metadata accessor for Date();
  v41 = *(_QWORD *)(v42 - 8);
  v7 = *(_QWORD *)(v41 + 64);
  MEMORY[0x1E0C80A78](v42);
  v33 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v32 = (uint64_t)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.background.getter();
  v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 0, 1, v18);
  outlined init with copy of ReferenceResolutionClientProtocol?(v34, (uint64_t)v14, &demangling cache variable for type metadata for LaunchAppBehavior?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v35, (uint64_t)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v19 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))((char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v36, v42);
  v20 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v21 = (v13 + *(unsigned __int8 *)(v9 + 80) + v20) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v22 = (v10 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (*(unsigned __int8 *)(v19 + 80) + v22 + 8) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v24 = (v7 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = 0;
  *(_QWORD *)(v25 + 24) = 0;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v14, v25 + v20, &demangling cache variable for type metadata for LaunchAppBehavior?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v32, v25 + v21, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v26 = v37;
  *(_QWORD *)(v25 + v22) = v37;
  (*(void (**)(unint64_t, char *, uint64_t))(v41 + 32))(v25 + v23, v33, v42);
  v27 = (_QWORD *)(v25 + v24);
  v28 = v39;
  *v27 = v38;
  v27[1] = v28;
  *(_QWORD *)(v25 + ((v24 + 23) & 0xFFFFFFFFFFFFFFF8)) = v40;
  v29 = v26;
  swift_bridgeObjectRetain();
  _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5((uint64_t)v17, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:), v25);
  swift_release();
  return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
}

uint64_t closure #1 in closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v8[6] = a8;
  v8[7] = v14;
  v8[4] = a6;
  v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  v9 = type metadata accessor for Date();
  v8[8] = v9;
  v8[9] = *(_QWORD *)(v9 - 8);
  v8[10] = swift_task_alloc();
  v8[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v8[12] = swift_task_alloc();
  v10 = type metadata accessor for SiriKitReliabilityCodes();
  v8[13] = v10;
  v8[14] = *(_QWORD *)(v10 - 8);
  v8[15] = swift_task_alloc();
  v8[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?);
  v8[17] = swift_task_alloc();
  v11 = type metadata accessor for LaunchAppBehavior();
  v8[18] = v11;
  v8[19] = *(_QWORD *)(v11 - 8);
  v8[20] = swift_task_alloc();
  v8[21] = swift_task_alloc();
  v12 = type metadata accessor for IntentResultType();
  v8[22] = v12;
  v8[23] = *(_QWORD *)(v12 - 8);
  v8[24] = swift_task_alloc();
  v8[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  id *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  int v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  id v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, _QWORD, uint64_t);
  uint64_t v49;
  unsigned int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 136);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 16), v3, &demangling cache variable for type metadata for LaunchAppBehavior?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 112);
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 24);
    outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 136), &demangling cache variable for type metadata for LaunchAppBehavior?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v7, v6, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
    {
      v8 = *(_QWORD *)(v0 + 200);
      v9 = *(_QWORD *)(v0 + 176);
      v10 = *(_QWORD *)(v0 + 184);
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 96), &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      v11 = *MEMORY[0x1E0D9A6E8];
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 104);
LABEL_6:
      v21 = v8;
      v22 = v9;
LABEL_15:
      v12(v21, v11, v22);
      goto LABEL_16;
    }
    v23 = *(_QWORD *)(v0 + 120);
    v24 = *(_QWORD *)(v0 + 128);
    v25 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
    v27(v24, *(_QWORD *)(v0 + 96), v25);
    v27(v23, v24, v25);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 88))(v23, v25);
    if (v28 == *MEMORY[0x1E0D9B2D8])
    {
      v21 = *(_QWORD *)(v0 + 200);
      v22 = *(_QWORD *)(v0 + 176);
      v29 = *(_QWORD *)(v0 + 184);
      v30 = (unsigned int *)MEMORY[0x1E0D9A6D0];
LABEL_14:
      v11 = *v30;
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 104);
      goto LABEL_15;
    }
    if (v28 == *MEMORY[0x1E0D9B2C8])
    {
LABEL_13:
      v21 = *(_QWORD *)(v0 + 200);
      v22 = *(_QWORD *)(v0 + 176);
      v29 = *(_QWORD *)(v0 + 184);
      v30 = (unsigned int *)MEMORY[0x1E0D9A6D8];
      goto LABEL_14;
    }
    if (v28 == *MEMORY[0x1E0D9B320])
    {
      v21 = *(_QWORD *)(v0 + 200);
      v22 = *(_QWORD *)(v0 + 176);
      v29 = *(_QWORD *)(v0 + 184);
      v30 = (unsigned int *)MEMORY[0x1E0D9A6C8];
      goto LABEL_14;
    }
    v47 = *(_QWORD *)(v0 + 176);
    v48 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 184) + 104);
    v49 = *(_QWORD *)(v0 + 200);
    if (v28 == *MEMORY[0x1E0D9B310])
    {
      v50 = (unsigned int *)MEMORY[0x1E0D9A6E0];
      goto LABEL_26;
    }
    v52 = *(_QWORD *)(v0 + 112);
    v51 = *(_QWORD *)(v0 + 120);
    v53 = *(_QWORD *)(v0 + 104);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 160);
    v14 = *(_QWORD *)(v0 + 168);
    v15 = *(_QWORD *)(v0 + 144);
    v16 = *(_QWORD *)(v0 + 152);
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
    v17(v14, *(_QWORD *)(v0 + 136), v15);
    v17(v13, v14, v15);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 88))(v13, v15);
    if (v18 == *MEMORY[0x1E0D9BCA8])
    {
      v8 = *(_QWORD *)(v0 + 200);
      v9 = *(_QWORD *)(v0 + 176);
      v19 = *(_QWORD *)(v0 + 184);
      v20 = *(id **)(v0 + 160);
      (*(void (**)(id *, _QWORD))(*(_QWORD *)(v0 + 152) + 96))(v20, *(_QWORD *)(v0 + 144));

      v11 = *MEMORY[0x1E0D9A6D0];
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 104);
      goto LABEL_6;
    }
    if (v18 == *MEMORY[0x1E0D9BCA0])
      goto LABEL_13;
    if (v18 == *MEMORY[0x1E0D9BC98])
    {
      v21 = *(_QWORD *)(v0 + 200);
      v22 = *(_QWORD *)(v0 + 176);
      v29 = *(_QWORD *)(v0 + 184);
      v30 = (unsigned int *)MEMORY[0x1E0D9A6E0];
      goto LABEL_14;
    }
    v47 = *(_QWORD *)(v0 + 176);
    v48 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 184) + 104);
    v49 = *(_QWORD *)(v0 + 200);
    if (v18 == *MEMORY[0x1E0D9BC90])
    {
      v50 = (unsigned int *)MEMORY[0x1E0D9A6C8];
LABEL_26:
      v48(v49, *v50, v47);
      goto LABEL_16;
    }
    v52 = *(_QWORD *)(v0 + 152);
    v51 = *(_QWORD *)(v0 + 160);
    v53 = *(_QWORD *)(v0 + 144);
  }
  v48(v49, *MEMORY[0x1E0D9A6E8], v47);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
LABEL_16:
  v31 = *(_QWORD *)(v0 + 192);
  v32 = *(_QWORD *)(v0 + 200);
  v33 = *(_QWORD *)(v0 + 176);
  v34 = *(_QWORD *)(v0 + 184);
  v35 = *(_QWORD *)(v0 + 88);
  v36 = *(_QWORD *)(v0 + 72);
  v54 = *(_QWORD *)(v0 + 64);
  v37 = *(void **)(v0 + 32);
  v38 = *(_QWORD *)(v0 + 40);
  v39 = objc_msgSend(v37, sel__className);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v31, v32, v33);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
  v40(v35, v38, v54);
  type metadata accessor for IntentResult();
  swift_allocObject();
  v41 = v37;
  IntentResult.init(intentType:type:intent:timestamp:)();
  v40(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 64));
  type metadata accessor for IntentEvent();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  IntentEvent.init(intentId:intentResult:createdAt:)();
  if (one-time initialization token for intentStore != -1)
    swift_once();
  v43 = *(_QWORD *)(v0 + 200);
  v44 = *(_QWORD *)(v0 + 176);
  v45 = *(_QWORD *)(v0 + 184);
  v46 = type metadata accessor for IntentEventStore();
  __swift_project_value_buffer(v46, (uint64_t)static IntentLoggingEventSink.intentStore);
  IntentEventStore.log(event:)();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v44);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in IntentLoggingEventSink.handleConfirmationOffered(intent:parameterName:multicardinalValueIndex:itemToConfirm:now:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[4];
  _BYTE v44[40];
  uint64_t v45;

  v40 = a7;
  v38 = a4;
  v39 = a5;
  v34 = a1;
  v37 = a8 & 1;
  v42 = type metadata accessor for Date();
  v35 = *(_QWORD *)(v42 - 8);
  v12 = MEMORY[0x1E0C80A78](v42);
  v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v36 = (char *)v31 - v15;
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.instrumentation);
  outlined init with copy of Any(a3, (uint64_t)v44);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v33 = a2;
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v32 = a3;
    v21 = v20;
    v45 = v20;
    *(_DWORD *)v19 = 136315138;
    v31[0] = v19 + 4;
    outlined init with copy of Any((uint64_t)v44, (uint64_t)v43);
    v31[1] = MEMORY[0x1E0DEE9B8] + 8;
    v22 = String.init<A>(describing:)();
    v43[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    _os_log_impl(&dword_1B4BE6000, v17, v18, "Confirmation offered resolvedValue: %s", v19, 0xCu);
    swift_arrayDestroy();
    v24 = v21;
    a3 = v32;
    MEMORY[0x1B5E44758](v24, -1, -1);
    MEMORY[0x1B5E44758](v19, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  }

  swift_bridgeObjectRetain();
  v25 = objc_msgSend(a6, sel__className);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  outlined init with copy of Any(a3, (uint64_t)v44);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
  v27 = v42;
  v26(v36, a9, v42);
  type metadata accessor for ConfirmationOffer();
  swift_allocObject();
  v28 = v41;
  result = ConfirmationOffer.init(parameterName:intentType:multicardinalIndexValue:item:timestamp:)();
  if (!v28)
  {
    v26(v14, a9, v27);
    type metadata accessor for IntentEvent();
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    IntentEvent.init(intentId:confirmationOffer:createdAt:)();
    if (one-time initialization token for intentStore != -1)
      swift_once();
    v30 = type metadata accessor for IntentEventStore();
    __swift_project_value_buffer(v30, (uint64_t)static IntentLoggingEventSink.intentStore);
    IntentEventStore.log(event:)();
    swift_release();
    return swift_release();
  }
  return result;
}

void closure #1 in IntentLoggingEventSink.handleConfirmationResult(intent:parameterName:multicardinalIndexValue:confirmationState:now:context:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  int v29;
  int v30;
  id v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  int v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, _QWORD, uint64_t);
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69[5];
  _OWORD v70[2];
  uint64_t v71;

  v64 = a8;
  v62 = a7;
  v65 = a6;
  v59 = a1;
  v60 = a2;
  v55 = type metadata accessor for ConfirmationResolution();
  v57 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55);
  v56 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for Date();
  v61 = *(_QWORD *)(v63 - 8);
  v13 = MEMORY[0x1E0C80A78](v63);
  v58 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v53 - v16;
  MEMORY[0x1E0C80A78](v15);
  v54 = (char *)&v53 - v18;
  v19 = type metadata accessor for SiriKitConfirmationState();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend(a3, sel__dictionaryRepresentation);
  v24 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v66 = a4;
  *(_QWORD *)&v67 = a4;
  *((_QWORD *)&v67 + 1) = a5;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v24 + 16) && (v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v69), (v26 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v24 + 56) + 32 * v25, (uint64_t)&v67);
  }
  else
  {
    v67 = 0u;
    v68 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v69);
  if (*((_QWORD *)&v68 + 1))
  {
    v27 = v17;
    v28 = a9;
    v29 = v64 & 1;
    outlined init with take of Any(&v67, v70);
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v65, v19);
    v30 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v22, v19);
    if (v30 == *MEMORY[0x1E0D9B370])
    {
      swift_bridgeObjectRetain();
      v31 = objc_msgSend(a3, sel__className);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v56, *MEMORY[0x1E0D9A9A8], v55);
      v32 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
      v33 = v63;
      v32(v27, a9, v63);
      type metadata accessor for ConfirmationResult();
      swift_allocObject();
    }
    else
    {
      v39 = v30;
      v64 = v29;
      v65 = a9;
      if (v30 == *MEMORY[0x1E0D9B378])
      {
        swift_bridgeObjectRetain();
        v40 = objc_msgSend(a3, sel__className);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        outlined init with copy of Any((uint64_t)v70, (uint64_t)v69);
        v32 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
        v28 = v65;
        v33 = v63;
        v32(v54, v65, v63);
        type metadata accessor for ConfirmationResult();
        swift_allocObject();
        v41 = v71;
        ConfirmationResult.init(parameterName:intentType:multicardinalIndexValue:confirmedValue:timestamp:)();
        v42 = v41;
        if (v41)
        {
LABEL_25:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
          return;
        }
LABEL_20:
        v32(v58, v28, v33);
        type metadata accessor for IntentEvent();
        swift_allocObject();
        swift_bridgeObjectRetain();
        swift_retain();
        IntentEvent.init(intentId:confirmationResult:createdAt:)();
        if (!v42)
        {
          if (one-time initialization token for intentStore != -1)
            swift_once();
          v48 = type metadata accessor for IntentEventStore();
          __swift_project_value_buffer(v48, (uint64_t)static IntentLoggingEventSink.intentStore);
          IntentEventStore.log(event:)();
          swift_release();
        }
        swift_release();
        goto LABEL_25;
      }
      v43 = *MEMORY[0x1E0D9B368];
      swift_bridgeObjectRetain();
      v44 = objc_msgSend(a3, sel__className);
      v54 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      v46 = v45;

      v47 = *(void (**)(char *, _QWORD, uint64_t))(v57 + 104);
      if (v39 != v43)
      {
        v47(v56, *MEMORY[0x1E0D9A998], v55);
        v57 = v46;
        v49 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
        v28 = v65;
        v50 = v63;
        v49(v27, v65, v63);
        type metadata accessor for ConfirmationResult();
        swift_allocObject();
        ConfirmationResult.init(parameterName:intentType:multicardinalIndexValue:resolution:timestamp:)();
        v51 = *(void (**)(char *, uint64_t))(v20 + 8);
        v32 = v49;
        v52 = v22;
        v33 = v50;
        v51(v52, v19);
        goto LABEL_19;
      }
      v47(v56, *MEMORY[0x1E0D9A9A0], v55);
      v32 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
      v28 = v65;
      v33 = v63;
      v32(v27, v65, v63);
      type metadata accessor for ConfirmationResult();
      swift_allocObject();
    }
    ConfirmationResult.init(parameterName:intentType:multicardinalIndexValue:resolution:timestamp:)();
LABEL_19:
    v42 = v71;
    goto LABEL_20;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v67, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain_n();
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    v38 = swift_slowAlloc();
    v69[0] = v38;
    *(_DWORD *)v37 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v70[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, a5, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v35, v36, "Intent has no value for %s", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v38, -1, -1);
    MEMORY[0x1B5E44758](v37, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t IntentLoggingEventSink.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t IntentLoggingEventSink.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t IntentLoggingEventSink.init()()
{
  uint64_t v0;

  return v0;
}

void specialized IntentLoggingEventSink.safeHandle(intentId:context:intentIdClosure:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void))
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;

  if (a2)
  {
    a5();
  }
  else
  {
    if (one-time initialization token for instrumentation != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v12 = v11;
      *(_DWORD *)v10 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v8, v9, "IntentLoggingEventSink ignoring %s event with missing intent Id", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v11, -1, -1);
      MEMORY[0x1B5E44758](v10, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t type metadata accessor for IntentLoggingEventSink()
{
  return objc_opt_self();
}

uint64_t method lookup function for IntentLoggingEventSink()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IntentLoggingEventSink.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

unint64_t lazy protocol witness table accessor for type ActivityType and conformance ActivityType()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ActivityType and conformance ActivityType;
  if (!lazy protocol witness table cache variable for type ActivityType and conformance ActivityType)
  {
    v1 = type metadata accessor for ActivityType();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0D9B700], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActivityType and conformance ActivityType);
  }
  return result;
}

uint64_t sub_1B4E075B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in IntentLoggingEventSink.handleDisambiguationResult(intent:parameterName:multicardinalIndexValue:sirikitConfirmationState:now:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(_QWORD *)(type metadata accessor for Date() - 8);
  closure #1 in IntentLoggingEventSink.handleDisambiguationResult(intent:parameterName:multicardinalIndexValue:sirikitConfirmationState:now:context:)(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), v2 + ((*(unsigned __int8 *)(v5 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
}

uint64_t sub_1B4E076C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IntentLoggingEventSink.handleDisambiguationOffered(intent:parameterName:multicardinalValueIndex:disambiguationItems:now:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(_QWORD *)(type metadata accessor for Date() - 8);
  return closure #1 in IntentLoggingEventSink.handleDisambiguationOffered(intent:parameterName:multicardinalValueIndex:disambiguationItems:now:context:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48), *(_QWORD *)(v2 + 56), v2 + ((*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
}

unint64_t type metadata accessor for INIntent()
{
  unint64_t result;

  result = lazy cache variable for type metadata for INIntent;
  if (!lazy cache variable for type metadata for INIntent)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INIntent);
  }
  return result;
}

uint64_t sub_1B4E07814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(a1, a2, *(void **)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1B4E07904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1B4E07A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IntentLoggingEventSink.handleConfirmationOffered(intent:parameterName:multicardinalValueIndex:itemToConfirm:now:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(_QWORD *)(type metadata accessor for Date() - 8);
  return closure #1 in IntentLoggingEventSink.handleConfirmationOffered(intent:parameterName:multicardinalValueIndex:itemToConfirm:now:context:)(a1, a2, v2 + 16, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(void **)(v2 + 64), *(_QWORD *)(v2 + 72), *(_BYTE *)(v2 + 80), v2 + ((*(unsigned __int8 *)(v5 + 80) + 81) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
}

uint64_t sub_1B4E07B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for SiriKitConfirmationState();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

void partial apply for closure #1 in IntentLoggingEventSink.handleConfirmationResult(intent:parameterName:multicardinalIndexValue:confirmationState:now:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for SiriKitConfirmationState() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(type metadata accessor for Date() - 8);
  closure #1 in IntentLoggingEventSink.handleConfirmationResult(intent:parameterName:multicardinalIndexValue:confirmationState:now:context:)(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), v2 + v6, *(_QWORD *)(v2 + v7), *(unsigned __int8 *)(v2 + v7 + 8), v2 + ((v7 + *(unsigned __int8 *)(v8 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)));
}

uint64_t sub_1B4E07D2C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?)
                 - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v17 = *(_QWORD *)(v4 + 64);
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = v0 + v2;
  v10 = type metadata accessor for LaunchAppBehavior();
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v12 = type metadata accessor for SiriKitReliabilityCodes();
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v0 + v5, 1, v12))
    (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v0 + v5, v12);
  v14 = (v17 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + v8 + 8) & ~v8;

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v15, v6);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?)
                 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?)
                 - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v12 = (v10 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  return closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(a1, a2, v2 + v6, v2 + v9, *(void **)(v2 + v10), v2 + v12, *(_QWORD *)(v2 + ((*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1B4E07F7C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?)
                 - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v17 = *(_QWORD *)(v4 + 64);
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  swift_unknownObjectRelease();
  v9 = v0 + v2;
  v10 = type metadata accessor for LaunchAppBehavior();
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v12 = type metadata accessor for SiriKitReliabilityCodes();
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v0 + v5, 1, v12))
    (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v0 + v5, v12);
  v14 = (v17 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + v8 + 8) & ~v8;

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v15, v6);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?)
                 - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v10 = (v8 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v1 + 16);
  v12 = *(_QWORD *)(v1 + 24);
  v13 = *(_QWORD *)(v1 + v8);
  v14 = v1 + v10;
  v15 = *(_QWORD *)(v1 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8));
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(a1, v11, v12, v1 + v4, v1 + v7, v13, v14, v15);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v8 = type metadata accessor for TaskPriority();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a4;
  v10[3] = a2;
  v10[4] = a3;
  return swift_task_create();
}

_QWORD *InterruptibleTaskManager.__allocating_init(name:)(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[4] = MEMORY[0x1E0DEE9E0];
  result[5] = 0;
  result[2] = a1;
  result[3] = a2;
  return result;
}

BOOL InterruptibleTaskManager.hasActiveTasks.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(*(_QWORD *)(v0 + 32) + 16) != 0;
}

Swift::Void __swiftcall InterruptibleTaskManager.invalidate()()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;

  v1 = (uint64_t *)(v0 + 32);
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 32);
  v3 = v2 + 64;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(v2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return;
    }
    if (v13 >= v7)
      goto LABEL_23;
    v14 = *(_QWORD *)(v3 + 8 * v13);
    ++v8;
    if (!v14)
    {
      v8 = v13 + 1;
      if (v13 + 1 >= v7)
        goto LABEL_23;
      v14 = *(_QWORD *)(v3 + 8 * v8);
      if (!v14)
      {
        v8 = v13 + 2;
        if (v13 + 2 >= v7)
          goto LABEL_23;
        v14 = *(_QWORD *)(v3 + 8 * v8);
        if (!v14)
        {
          v8 = v13 + 3;
          if (v13 + 3 >= v7)
            goto LABEL_23;
          v14 = *(_QWORD *)(v3 + 8 * v8);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v8 << 6);
LABEL_5:
    v11 = *(void (**)(uint64_t))(*(_QWORD *)(v2 + 56) + 16 * v10);
    v12 = swift_retain();
    v11(v12);
    swift_release();
  }
  v15 = v13 + 4;
  if (v15 < v7)
  {
    v14 = *(_QWORD *)(v3 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v8 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_27;
        if (v8 >= v7)
          goto LABEL_23;
        v14 = *(_QWORD *)(v3 + 8 * v8);
        ++v15;
        if (v14)
          goto LABEL_22;
      }
    }
    v8 = v15;
    goto LABEL_22;
  }
LABEL_23:
  swift_release();
  swift_beginAccess();
  if (*(_QWORD *)(*v1 + 16))
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v17 = *v1;
    *v1 = 0x8000000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<UInt, ()>);
    _NativeDictionary.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
    *v1 = v17;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
}

_QWORD *InterruptibleTaskManager.init(name:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2[4] = MEMORY[0x1E0DEE9E0];
  v2[5] = 0;
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

uint64_t closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[10] = a7;
  v8[11] = a8;
  v8[8] = a5;
  v8[9] = a6;
  v8[6] = a1;
  v8[7] = a4;
  v10 = type metadata accessor for CancellationError();
  v8[12] = v10;
  v8[13] = *(_QWORD *)(v10 - 8);
  v8[14] = swift_task_alloc();
  v8[15] = swift_task_alloc();
  v8[16] = *(_QWORD *)(a8 - 8);
  v8[17] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v8[18] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in InterruptibleTaskManager.perform<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[7];
  v4 = v0[8];
  v5 = (_QWORD *)swift_allocObject();
  v0[19] = v5;
  v5[2] = v3;
  v5[3] = v4;
  v5[4] = v2;
  v5[5] = v1;
  swift_retain();
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  v0[20] = v6;
  *v6 = v0;
  v6[1] = closure #1 in InterruptibleTaskManager.perform<A>(_:);
  return withCancellableContinuation<A>(body:)(v0[17], (uint64_t)partial apply for closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v5, v0[11]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 48);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v3);
  type metadata accessor for InterruptibleTaskResult(0, v3, v5, v6);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 168);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 40) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 168);
  if ((v3 & 1) != 0)
  {
    v6 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 120);
    v7 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 88);
    v10 = *(uint64_t **)(v0 + 48);

    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v11(v5, v6, v7);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF05E0], MEMORY[0x1E0DF05E8]);
    v12 = swift_allocError();
    v11(v13, v5, v7);
    *v10 = v12;
    type metadata accessor for InterruptibleTaskResult(0, v9, v14, v15);
    swift_storeEnumTagMultiPayload();

  }
  else
  {
    v16 = *(_QWORD *)(v0 + 88);
    v17 = *(_QWORD **)(v0 + 48);

    *v17 = v4;
    type metadata accessor for InterruptibleTaskResult(0, v16, v18, v19);
    swift_storeEnumTagMultiPayload();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B4E08A30()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in InterruptibleTaskManager.perform<A>(_:)(a1, v4, v5, v7, v8, v9, v10, v6);
}

uint64_t closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a2;
  v14[5] = a3;
  v14[6] = a1;
  v14[7] = a4;
  v14[8] = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v14);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[6] = a4;
  v9 = *(_QWORD *)(*(_QWORD *)a6 + 80);
  v8[11] = v9;
  v8[12] = *(_QWORD *)(v9 - 8);
  v8[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 112) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 56);
    v5 = swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13 = v6;
    *(_DWORD *)v5 = 136315394;
    v8 = *(_QWORD *)(v4 + 16);
    v7 = *(_QWORD *)(v4 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v5 + 12) = 2048;
    *(_QWORD *)(v0 + 40) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v2, v3, "%s: task %lu begin", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v6, -1, -1);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }
  else
  {
    swift_release();
  }

  v12 = (uint64_t (*)(_QWORD))(**(int **)(v0 + 72) + *(_QWORD *)(v0 + 72));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v9;
  *v9 = v0;
  v9[1] = closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:);
  return v12(*(_QWORD *)(v0 + 104));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  ManagedContinuation.resume(returning:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_retain();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 48);
    v7 = *(_QWORD *)(v0 + 56);
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v13 = v9;
    *(_DWORD *)v8 = 136315394;
    v10 = *(_QWORD *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 24);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v8 + 12) = 2048;
    *(_QWORD *)(v0 + 24) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B4BE6000, v4, v5, "%s: task %lu succeeded", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v9, -1, -1);
    MEMORY[0x1B5E44758](v8, -1, -1);
  }
  else
  {
    swift_release();
  }

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String *v4;
  id v5;

  v1 = *(void **)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(Swift::String **)(v0 + 48);
  swift_retain();
  v5 = v1;
  specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/InterruptibleTaskManager.swift", 45, 2, (uint64_t)"perform(_:)", 11, 2, v2, v4, v3, v1);

  swift_release();
  ManagedContinuation.resume(throwing:)(v1);

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (one-time initialization token for executor != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  swift_retain();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v18 = a3;
    v9 = a2;
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v19 = v11;
    *(_DWORD *)v10 = 136315138;
    v13 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    a2 = v9;
    a3 = v18;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v7, v8, "%s: task cancelled", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v11, -1, -1);
    MEMORY[0x1B5E44758](v10, -1, -1);

  }
  else
  {

    swift_release();
  }
  v16 = type metadata accessor for InterruptibleTaskResult(0, a3, v14, v15);
  return MEMORY[0x1B5E436B4](a2, v16, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
}

uint64_t sub_1B4E09314()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in InterruptibleTaskManager.perform<A>(_:)()
{
  uint64_t *v0;

  return closure #2 in InterruptibleTaskManager.perform<A>(_:)(v0[3], v0[4], v0[2]);
}

uint64_t InterruptibleTaskManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t method lookup function for InterruptibleTaskManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of InterruptibleTaskManager.__allocating_init(name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata completion function for InterruptibleTaskResult()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

id *initializeBufferWithCopyOfBuffer for InterruptibleTaskResult(id *a1, id *a2, uint64_t a3)
{
  id *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = (char *)*a2;
    *v3 = *a2;
    v3 = (id *)&v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 3)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 2)
    {
      v13 = *a2;
      v14 = *a2;
      *v3 = v13;
      *((_BYTE *)v3 + v5) = 2;
    }
    else if (v9 == 1)
    {
      v11 = *a2;
      v12 = *a2;
      *v3 = v11;
      *((_BYTE *)v3 + v5) = 1;
    }
    else
    {
      (*(void (**)(id *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 0;
    }
  }
  return v3;
}

id *assignWithCopy for InterruptibleTaskResult(id *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  id v13;
  char v14;
  void *v15;
  id v16;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 2 || v8 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 3)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      v15 = *a2;
      v16 = v15;
      *a1 = v15;
      v14 = 2;
    }
    else if (v10 == 1)
    {
      v12 = *a2;
      v13 = v12;
      *a1 = v12;
      v14 = 1;
    }
    else
    {
      (*(void (**)(id *, void **, uint64_t))(v6 + 16))(a1, a2, v5);
      v14 = 0;
    }
    *((_BYTE *)a1 + v7) = v14;
  }
  return a1;
}

_QWORD *initializeWithTake for InterruptibleTaskResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    *a1 = *a2;
    v8 = 2;
  }
  else if (v6 == 1)
  {
    *a1 = *a2;
    v8 = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 0;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

id *assignWithTake for InterruptibleTaskResult(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 2 || v8 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 3)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      *a1 = *a2;
      v12 = 2;
    }
    else if (v10 == 1)
    {
      *a1 = *a2;
      v12 = 1;
    }
    else
    {
      (*(void (**)(id *, id *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 0;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for InterruptibleTaskResult(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B4E09A58 + 4 * byte_1B4EEB6C8[(v4 - 1)]))();
}

void storeEnumTagSinglePayload for InterruptibleTaskResult(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t getEnumTag for InterruptibleTaskResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 3u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B4E09C94 + 4 * byte_1B4EEB6D6[v3]))();
}

void destructiveInjectEnumTag for InterruptibleTaskResult(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 8uLL)
    v4 = 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 2)
  {
    v5 = a2 - 3;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_1B4E09DA4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu))(a1, v4);
}

uint64_t sub_1B4E09E48()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1B4E09E80()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t InvocationStateImpl.aceId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvocationStateImpl.aceId.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*InvocationStateImpl.aceId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.refId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvocationStateImpl.refId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*InvocationStateImpl.refId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.inputOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 24);
  v4 = type metadata accessor for InputOrigin();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t InvocationStateImpl.inputOrigin.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 24);
  v4 = type metadata accessor for InputOrigin();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*InvocationStateImpl.inputOrigin.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.interactionType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 28);
  v4 = type metadata accessor for InteractionType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t InvocationStateImpl.interactionType.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 28);
  v4 = type metadata accessor for InteractionType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*InvocationStateImpl.interactionType.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.audioSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for InvocationStateImpl();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 32), a1, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
}

uint64_t InvocationStateImpl.audioSource.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for InvocationStateImpl();
  return outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v1 + *(int *)(v3 + 32), (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
}

uint64_t (*InvocationStateImpl.audioSource.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.audioDestination.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for InvocationStateImpl();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 36), a1, &demangling cache variable for type metadata for AudioDestination?);
}

uint64_t InvocationStateImpl.audioDestination.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for InvocationStateImpl();
  return outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v1 + *(int *)(v3 + 36), &demangling cache variable for type metadata for AudioDestination?);
}

uint64_t (*InvocationStateImpl.audioDestination.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.responseMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 40);
  v4 = type metadata accessor for ResponseMode();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t InvocationStateImpl.responseMode.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 40);
  v4 = type metadata accessor for ResponseMode();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*InvocationStateImpl.responseMode.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.multiUserState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 44);
  return outlined init with copy of MultiUserState(v3, a1);
}

uint64_t InvocationStateImpl.multiUserState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 44);
  return outlined assign with take of MultiUserState(a1, v3);
}

uint64_t (*InvocationStateImpl.multiUserState.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.sessionHandOffContinuityID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvocationStateImpl.sessionHandOffContinuityID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for InvocationStateImpl() + 48));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*InvocationStateImpl.sessionHandOffContinuityID.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isEyesFree.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 52));
}

uint64_t InvocationStateImpl.isEyesFree.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for InvocationStateImpl();
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isEyesFree.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isVoiceTriggerEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 56));
}

uint64_t InvocationStateImpl.isVoiceTriggerEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for InvocationStateImpl();
  *(_BYTE *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isVoiceTriggerEnabled.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isTextToSpeechEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 60));
}

uint64_t InvocationStateImpl.isTextToSpeechEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for InvocationStateImpl();
  *(_BYTE *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isTextToSpeechEnabled.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isRecognizeMyVoiceEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 64));
}

uint64_t InvocationStateImpl.isRecognizeMyVoiceEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for InvocationStateImpl();
  *(_BYTE *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isRecognizeMyVoiceEnabled.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isDirectAction.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 68));
}

uint64_t InvocationStateImpl.isDirectAction.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for InvocationStateImpl();
  *(_BYTE *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isDirectAction.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.siriLocale.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 72);
  v4 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t InvocationStateImpl.siriLocale.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 72);
  v4 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*InvocationStateImpl.siriLocale.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.siriVoiceGender.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 76);
  v4 = type metadata accessor for SiriVoiceGender();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t InvocationStateImpl.siriVoiceGender.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 76);
  v4 = type metadata accessor for SiriVoiceGender();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*InvocationStateImpl.siriVoiceGender.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

void *InvocationStateImpl.remoteContext.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 80));
  v2 = v1;
  return v1;
}

void InvocationStateImpl.remoteContext.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for InvocationStateImpl() + 80);

  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*InvocationStateImpl.remoteContext.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.executionRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 84));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvocationStateImpl.executionRequestId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for InvocationStateImpl() + 84));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*InvocationStateImpl.executionRequestId.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.interactionId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 88));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvocationStateImpl.interactionId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for InvocationStateImpl() + 88));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*InvocationStateImpl.interactionId.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.preferencesLanguageCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 92));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvocationStateImpl.preferencesLanguageCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for InvocationStateImpl() + 92));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*InvocationStateImpl.preferencesLanguageCode.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.personalDomainsAuthenticationMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for InvocationStateImpl();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 96), a1, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
}

uint64_t InvocationStateImpl.personalDomainsAuthenticationMode.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for InvocationStateImpl();
  return outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v1 + *(int *)(v3 + 96), &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
}

uint64_t (*InvocationStateImpl.personalDomainsAuthenticationMode.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.bargeInContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for InvocationStateImpl();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 100), a1, (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
}

uint64_t InvocationStateImpl.bargeInContext.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for InvocationStateImpl();
  return outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v1 + *(int *)(v3 + 100), (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
}

uint64_t (*InvocationStateImpl.bargeInContext.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.restrictions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 104);
  v4 = type metadata accessor for Restrictions();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t InvocationStateImpl.restrictions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for InvocationStateImpl() + 104);
  v4 = type metadata accessor for Restrictions();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*InvocationStateImpl.restrictions.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.originatingHome.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for InvocationStateImpl();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 108), a1, &demangling cache variable for type metadata for HomeInfo?);
}

uint64_t InvocationStateImpl.originatingHome.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for InvocationStateImpl();
  return outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v1 + *(int *)(v3 + 108), &demangling cache variable for type metadata for HomeInfo?);
}

uint64_t (*InvocationStateImpl.originatingHome.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.currentDeviceAssistantId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 112));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t InvocationStateImpl.currentDeviceAssistantId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for InvocationStateImpl() + 112));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*InvocationStateImpl.currentDeviceAssistantId.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.voiceTriggerEventInfo.getter()
{
  type metadata accessor for InvocationStateImpl();
  return swift_bridgeObjectRetain();
}

uint64_t InvocationStateImpl.voiceTriggerEventInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for InvocationStateImpl() + 116);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.voiceTriggerEventInfo.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.voiceAudioSessionId.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 120));
}

uint64_t InvocationStateImpl.voiceAudioSessionId.setter(int a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for InvocationStateImpl();
  *(_DWORD *)(v1 + *(int *)(result + 120)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.voiceAudioSessionId.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isSystemApertureEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 124));
}

uint64_t InvocationStateImpl.isSystemApertureEnabled.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for InvocationStateImpl();
  *(_BYTE *)(v1 + *(int *)(result + 124)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isSystemApertureEnabled.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isLiveActivitiesSupported.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 128));
}

uint64_t InvocationStateImpl.isLiveActivitiesSupported.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for InvocationStateImpl();
  *(_BYTE *)(v1 + *(int *)(result + 128)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isLiveActivitiesSupported.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.isInAmbient.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for InvocationStateImpl() + 132));
}

uint64_t InvocationStateImpl.isInAmbient.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for InvocationStateImpl();
  *(_BYTE *)(v1 + *(int *)(result + 132)) = a1;
  return result;
}

uint64_t (*InvocationStateImpl.isInAmbient.modify())(_QWORD)
{
  type metadata accessor for InvocationStateImpl();
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t InvocationStateImpl.deviceRestrictions.getter()
{
  type metadata accessor for InvocationStateImpl();
  return Restrictions.deviceRestrictions.getter();
}

uint64_t InvocationStateImpl.init(proxiedRequestContext:restrictions:executionRequestId:originatingHome:audioSource:audioDestination:responseMode:currentDeviceAssistantId:voiceTriggerEventInfo:voiceAudioSessionId:isRMVEnabled:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, int a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16, unsigned __int8 a17)
{
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  id v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t result;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  uint8_t *v96;
  int v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v105 = a2;
  v106 = a5;
  v97 = a14;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  MEMORY[0x1E0C80A78](v24);
  v104 = (char *)&v87 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = (int *)type metadata accessor for InvocationStateImpl();
  v27 = (uint64_t)a9 + v26[8];
  v28 = type metadata accessor for AudioSource();
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v89 = v27;
  v29(v27, 1, 1, v28);
  v30 = (uint64_t)a9 + v26[9];
  v31 = type metadata accessor for AudioDestination();
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v88 = v30;
  v32(v30, 1, 1, v31);
  v33 = (_QWORD *)((char *)a9 + v26[12]);
  *v33 = 0;
  v33[1] = 0;
  v98 = v26[20];
  *(_QWORD *)((char *)a9 + v98) = 0;
  v34 = (_QWORD *)((char *)a9 + v26[23]);
  *v34 = 0;
  v34[1] = 0;
  v99 = v34;
  v35 = (uint64_t)a9 + v26[24];
  v36 = type metadata accessor for PersonalDomainsAuthenticationMode();
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
  v101 = v35;
  v37(v35, 1, 1, v36);
  v38 = (uint64_t)a9 + v26[25];
  v39 = type metadata accessor for BargeInContext();
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56);
  v100 = v38;
  v40(v38, 1, 1, v39);
  v41 = (uint64_t)a9 + v26[27];
  v42 = type metadata accessor for HomeInfo();
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56);
  v103 = v41;
  v43(v41, 1, 1, v42);
  v102 = v26[29];
  *(_QWORD *)((char *)a9 + v102) = 0;
  v44 = *(_QWORD *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceId + 8];
  *a9 = *(_QWORD *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceId];
  a9[1] = v44;
  v45 = *(_QWORD *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId + 8];
  v108 = a7;
  v109 = a6;
  v107 = a8;
  v110 = a3;
  v87 = a4;
  if (v45)
  {
    a9[2] = *(_QWORD *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId];
    a9[3] = v45;
    swift_bridgeObjectRetain();
  }
  else
  {
    v46 = one-time initialization token for executor;
    swift_bridgeObjectRetain();
    if (v46 != -1)
      swift_once();
    v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc();
      v51 = swift_slowAlloc();
      v112 = v51;
      *(_DWORD *)v50 = 136315138;
      v96 = v50 + 4;
      swift_bridgeObjectRetain();
      v111 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, a4, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B4BE6000, v48, v49, "[InvocationState] RSKE has a nil refId? Setting refId to executionRequestId=%s", v50, 0xCu);
      swift_arrayDestroy();
      v52 = v51;
      a6 = v109;
      a8 = v107;
      MEMORY[0x1B5E44758](v52, -1, -1);
      v53 = v50;
      a7 = v108;
      MEMORY[0x1B5E44758](v53, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    a9[2] = v110;
    a9[3] = a4;
    swift_bridgeObjectRetain();
  }
  v95 = a16;
  LODWORD(v96) = a17;
  v93 = a13;
  v94 = a15;
  v91 = a11;
  v92 = a12;
  v90 = a10;
  v54 = &a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_inputOrigin];
  v55 = (char *)a9 + v26[6];
  v56 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v55, v54, v56);
  v57 = &a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionType];
  v58 = (char *)a9 + v26[7];
  v59 = type metadata accessor for InteractionType();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v58, v57, v59);
  swift_bridgeObjectRetain();
  outlined assign with copy of ReferenceResolutionClientProtocol?(a6, v89, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  outlined assign with copy of ReferenceResolutionClientProtocol?(a7, v88, &demangling cache variable for type metadata for AudioDestination?);
  v60 = (char *)a9 + v26[10];
  v61 = type metadata accessor for ResponseMode();
  v89 = *(_QWORD *)(v61 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v60, a8, v61);
  ProxiedRequestContext.multiUserState.getter((uint64_t)a9 + v26[11]);
  v62 = *(_QWORD *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_sessionHandoffContinuityId + 8];
  *v33 = *(_QWORD *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_sessionHandoffContinuityId];
  v33[1] = v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a9 + v26[13]) = a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isEyesFree];
  *((_BYTE *)a9 + v26[14]) = a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isVoiceTriggerEnabled];
  *((_BYTE *)a9 + v26[15]) = a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isTextToSpeechEnabled];
  *((_BYTE *)a9 + v26[16]) = v97 & 1;
  *((_BYTE *)a9 + v26[17]) = a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_isDirectAction];
  type metadata accessor for DeviceEnvironmentHelper();
  MEMORY[0x1B5E3F604]();
  swift_release();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.siriLocale.getter();
  v63 = swift_release();
  MEMORY[0x1B5E3F604](v63);
  swift_release();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.siriVoiceGender.getter();
  swift_release();
  v64 = *(void **)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution];
  v65 = *(void **)((char *)a9 + v98);
  *(_QWORD *)((char *)a9 + v98) = v64;
  v66 = v64;

  v67 = (_QWORD *)((char *)a9 + v26[21]);
  v68 = v87;
  *v67 = v110;
  v67[1] = v68;
  v69 = *(_QWORD *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionId + 8];
  v70 = (_QWORD *)((char *)a9 + v26[22]);
  *v70 = *(_QWORD *)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_interactionId];
  v70[1] = v69;
  v71 = swift_bridgeObjectRetain();
  MEMORY[0x1B5E3F604](v71);
  swift_release();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  v72 = dispatch thunk of CurrentDevice.preferencesLanguageCode.getter();
  v74 = v73;
  swift_release();
  v75 = v99;
  swift_bridgeObjectRelease();
  *v75 = v72;
  v75[1] = v74;
  if (v64)
  {
    v76 = objc_msgSend(v66, sel_personalDomainAuthenticationMode);
    if (v76)
    {
      v77 = v76;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
  }
  v79 = v107;
  v78 = v108;
  v80 = (uint64_t)v104;
  PersonalDomainsAuthenticationMode.init(aceValue:)();
  (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v79, v61);
  outlined destroy of ReferenceResolutionClientProtocol?(v78, &demangling cache variable for type metadata for AudioDestination?);
  outlined destroy of ReferenceResolutionClientProtocol?(v109, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v80, v101, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  outlined assign with copy of ReferenceResolutionClientProtocol?((uint64_t)&a1[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_bargeInContext], v100, (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);

  v81 = (char *)a9 + v26[26];
  v82 = type metadata accessor for Restrictions();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v81, v105, v82);
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v106, v103, &demangling cache variable for type metadata for HomeInfo?);
  v83 = (_QWORD *)((char *)a9 + v26[28]);
  v84 = v91;
  *v83 = v90;
  v83[1] = v84;
  v85 = v102;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a9 + v85) = v92;
  *(_DWORD *)((char *)a9 + v26[30]) = v93;
  *((_BYTE *)a9 + v26[31]) = v94 & 1;
  *((_BYTE *)a9 + v26[32]) = v95 & 1;
  *((_BYTE *)a9 + v26[33]) = v96 & 1;
  return result;
}

uint64_t AFHomeInfo.asInternalHomeInfo.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v13 - v6;
  HomeInfo.init()();
  v8 = objc_msgSend(v1, sel_homeIdentifier);
  if (v8)
  {
    v9 = v8;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    v10 = type metadata accessor for UUID();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 0, 1, v10);
  }
  else
  {
    v10 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
  }
  outlined init with take of UUID?((uint64_t)v5, (uint64_t)v7);
  type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v10);
  }
  return HomeInfo.homeIdentifier.setter();
}

uint64_t outlined assign with take of MultiUserState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MultiUserState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for InvocationState.refId.getter in conformance InvocationStateImpl()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for InvocationState.inputOrigin.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for InputOrigin();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for InvocationState.interactionType.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for InteractionType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for InvocationState.audioSource.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v2 + *(int *)(a1 + 32), a2, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
}

uint64_t protocol witness for InvocationState.audioDestination.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v2 + *(int *)(a1 + 36), a2, &demangling cache variable for type metadata for AudioDestination?);
}

uint64_t protocol witness for InvocationState.responseMode.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for ResponseMode();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for InvocationState.multiUserState.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of MultiUserState(v2 + *(int *)(a1 + 44), a2);
}

uint64_t protocol witness for InvocationState.sessionHandOffContinuityID.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 48));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for InvocationState.isEyesFree.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 52));
}

uint64_t protocol witness for InvocationState.isVoiceTriggerEnabled.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 56));
}

uint64_t protocol witness for InvocationState.isTextToSpeechEnabled.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 60));
}

uint64_t protocol witness for InvocationState.isRecognizeMyVoiceEnabled.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 64));
}

uint64_t protocol witness for InvocationState.isDirectAction.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 68));
}

uint64_t protocol witness for InvocationState.siriLocale.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 72);
  v5 = type metadata accessor for Locale();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for InvocationState.siriVoiceGender.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 76);
  v5 = type metadata accessor for SiriVoiceGender();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

void *protocol witness for InvocationState.remoteContext.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + *(int *)(a1 + 80));
  v3 = v2;
  return v2;
}

uint64_t protocol witness for InvocationState.executionRequestId.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 84));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for InvocationState.interactionId.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 88));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for InvocationState.preferencesLanguageCode.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 92));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for InvocationState.personalDomainsAuthenticationMode.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v2 + *(int *)(a1 + 96), a2, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
}

uint64_t protocol witness for InvocationState.bargeInContext.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v2 + *(int *)(a1 + 100), a2, (uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
}

uint64_t protocol witness for InvocationState.deviceRestrictions.getter in conformance InvocationStateImpl()
{
  return Restrictions.deviceRestrictions.getter();
}

uint64_t protocol witness for InvocationState.restrictions.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 104);
  v5 = type metadata accessor for Restrictions();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for InvocationState.originatingHome.getter in conformance InvocationStateImpl@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return outlined init with copy of ReferenceResolutionClientProtocol?(v2 + *(int *)(a1 + 108), a2, &demangling cache variable for type metadata for HomeInfo?);
}

uint64_t protocol witness for InvocationState.currentDeviceAssistantId.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 112));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for InvocationState.voiceTriggerEventInfo.getter in conformance InvocationStateImpl()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for InvocationState.voiceAudioSessionId.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned int *)(v1 + *(int *)(a1 + 120));
}

uint64_t protocol witness for InvocationState.isSystemApertureEnabled.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 124));
}

uint64_t protocol witness for InvocationState.isLiveActivitiesSupported.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 128));
}

uint64_t protocol witness for InvocationState.isInAmbient.getter in conformance InvocationStateImpl(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 132));
}

uint64_t dispatch thunk of InvocationState.refId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of InvocationState.aceId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of InvocationState.inputOrigin.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of InvocationState.interactionType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of InvocationState.audioSource.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of InvocationState.audioDestination.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of InvocationState.responseMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of InvocationState.multiUserState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of InvocationState.sessionHandOffContinuityID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of InvocationState.isEyesFree.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of InvocationState.isVoiceTriggerEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of InvocationState.isTextToSpeechEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of InvocationState.isRecognizeMyVoiceEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of InvocationState.isDirectAction.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of InvocationState.siriLocale.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of InvocationState.siriVoiceGender.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of InvocationState.remoteContext.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of InvocationState.executionRequestId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of InvocationState.interactionId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of InvocationState.preferencesLanguageCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of InvocationState.personalDomainsAuthenticationMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of InvocationState.bargeInContext.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of InvocationState.deviceRestrictions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of InvocationState.restrictions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of InvocationState.originatingHome.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of InvocationState.currentDeviceAssistantId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of InvocationState.voiceTriggerEventInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of InvocationState.voiceAudioSessionId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 224))();
}

uint64_t dispatch thunk of InvocationState.isSystemApertureEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of InvocationState.isLiveActivitiesSupported.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t dispatch thunk of InvocationState.isInAmbient.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 248))();
}

_QWORD *initializeBufferWithCopyOfBuffer for InvocationStateImpl(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int (*v101)(char *, uint64_t, uint64_t);
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for InputOrigin();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for InteractionType();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = a3[8];
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for AudioSource();
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v25 = a3[9];
    v26 = (char *)v4 + v25;
    v27 = (char *)a2 + v25;
    v28 = type metadata accessor for AudioDestination();
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    v31 = a3[10];
    v32 = (char *)v4 + v31;
    v33 = (char *)a2 + v31;
    v34 = type metadata accessor for ResponseMode();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v32, v33, v34);
    v35 = a3[11];
    v36 = (char *)v4 + v35;
    v37 = (char *)a2 + v35;
    v38 = type metadata accessor for MultiUserContext();
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      v40 = type metadata accessor for MultiUserState();
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    v41 = a3[12];
    v42 = a3[13];
    v43 = (_QWORD *)((char *)v4 + v41);
    v44 = (_QWORD *)((char *)a2 + v41);
    v45 = v44[1];
    *v43 = *v44;
    v43[1] = v45;
    *((_BYTE *)v4 + v42) = *((_BYTE *)a2 + v42);
    v46 = a3[15];
    *((_BYTE *)v4 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    *((_BYTE *)v4 + v46) = *((_BYTE *)a2 + v46);
    v47 = a3[17];
    *((_BYTE *)v4 + a3[16]) = *((_BYTE *)a2 + a3[16]);
    *((_BYTE *)v4 + v47) = *((_BYTE *)a2 + v47);
    v48 = a3[18];
    v49 = (char *)v4 + v48;
    v50 = (char *)a2 + v48;
    v51 = type metadata accessor for Locale();
    v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
    swift_bridgeObjectRetain();
    v52(v49, v50, v51);
    v53 = a3[19];
    v54 = (char *)v4 + v53;
    v55 = (char *)a2 + v53;
    v56 = type metadata accessor for SiriVoiceGender();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v54, v55, v56);
    v57 = a3[20];
    v58 = a3[21];
    v59 = *(void **)((char *)a2 + v57);
    *(_QWORD *)((char *)v4 + v57) = v59;
    v60 = (_QWORD *)((char *)v4 + v58);
    v61 = (_QWORD *)((char *)a2 + v58);
    v62 = v61[1];
    *v60 = *v61;
    v60[1] = v62;
    v63 = a3[22];
    v64 = a3[23];
    v65 = (_QWORD *)((char *)v4 + v63);
    v66 = (_QWORD *)((char *)a2 + v63);
    v67 = v66[1];
    *v65 = *v66;
    v65[1] = v67;
    v68 = (_QWORD *)((char *)v4 + v64);
    v69 = (_QWORD *)((char *)a2 + v64);
    v70 = v69[1];
    *v68 = *v69;
    v68[1] = v70;
    v71 = a3[24];
    __dst = (char *)v4 + v71;
    v72 = (char *)a2 + v71;
    v73 = type metadata accessor for PersonalDomainsAuthenticationMode();
    v74 = *(_QWORD *)(v73 - 8);
    v101 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
    v75 = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v101(v72, 1, v73))
    {
      v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
      memcpy(__dst, v72, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 16))(__dst, v72, v73);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(__dst, 0, 1, v73);
    }
    v77 = a3[25];
    v78 = (char *)v4 + v77;
    v79 = (char *)a2 + v77;
    v80 = type metadata accessor for BargeInContext();
    v81 = *(_QWORD *)(v80 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
    {
      v82 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
      memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v78, v79, v80);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
    }
    v83 = a3[26];
    v84 = (char *)v4 + v83;
    v85 = (char *)a2 + v83;
    v86 = type metadata accessor for Restrictions();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 16))(v84, v85, v86);
    v87 = a3[27];
    v88 = (char *)v4 + v87;
    v89 = (char *)a2 + v87;
    v90 = type metadata accessor for HomeInfo();
    v91 = *(_QWORD *)(v90 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
    {
      v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
      memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v88, v89, v90);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
    }
    v93 = a3[28];
    v94 = a3[29];
    v95 = (_QWORD *)((char *)v4 + v93);
    v96 = (_QWORD *)((char *)a2 + v93);
    v97 = v96[1];
    *v95 = *v96;
    v95[1] = v97;
    *(_QWORD *)((char *)v4 + v94) = *(_QWORD *)((char *)a2 + v94);
    v98 = a3[31];
    *(_DWORD *)((char *)v4 + a3[30]) = *(_DWORD *)((char *)a2 + a3[30]);
    *((_BYTE *)v4 + v98) = *((_BYTE *)a2 + v98);
    v99 = a3[33];
    *((_BYTE *)v4 + a3[32]) = *((_BYTE *)a2 + a3[32]);
    *((_BYTE *)v4 + v99) = *((_BYTE *)a2 + v99);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

_QWORD *assignWithCopy for InvocationStateImpl(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  id v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(char *, uint64_t, uint64_t);
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(char *, uint64_t, uint64_t);
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(char *, uint64_t, uint64_t);
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[7];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for InteractionType();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[8];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for AudioSource();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_7:
  v23 = a3[9];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = type metadata accessor for AudioDestination();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
LABEL_12:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v24, v25, v26);
LABEL_13:
  v32 = a3[10];
  v33 = (char *)a1 + v32;
  v34 = (char *)a2 + v32;
  v35 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v33, v34, v35);
  v36 = a3[11];
  v37 = (char *)a1 + v36;
  v38 = (char *)a2 + v36;
  v39 = type metadata accessor for MultiUserContext();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  v42 = v41(v37, 1, v39);
  v43 = v41(v38, 1, v39);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v37, v39);
LABEL_18:
    v44 = type metadata accessor for MultiUserState();
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v37, v38, v39);
LABEL_19:
  v45 = a3[12];
  v46 = (_QWORD *)((char *)a1 + v45);
  v47 = (_QWORD *)((char *)a2 + v45);
  *v46 = *v47;
  v46[1] = v47[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  v48 = a3[18];
  v49 = (char *)a1 + v48;
  v50 = (char *)a2 + v48;
  v51 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 24))(v49, v50, v51);
  v52 = a3[19];
  v53 = (char *)a1 + v52;
  v54 = (char *)a2 + v52;
  v55 = type metadata accessor for SiriVoiceGender();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 24))(v53, v54, v55);
  v56 = a3[20];
  v57 = *(void **)((char *)a1 + v56);
  v58 = *(void **)((char *)a2 + v56);
  *(_QWORD *)((char *)a1 + v56) = v58;
  v59 = v58;

  v60 = a3[21];
  v61 = (_QWORD *)((char *)a1 + v60);
  v62 = (_QWORD *)((char *)a2 + v60);
  *v61 = *v62;
  v61[1] = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v63 = a3[22];
  v64 = (_QWORD *)((char *)a1 + v63);
  v65 = (_QWORD *)((char *)a2 + v63);
  *v64 = *v65;
  v64[1] = v65[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v66 = a3[23];
  v67 = (_QWORD *)((char *)a1 + v66);
  v68 = (_QWORD *)((char *)a2 + v66);
  *v67 = *v68;
  v67[1] = v68[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v69 = a3[24];
  v70 = (char *)a1 + v69;
  v71 = (char *)a2 + v69;
  v72 = type metadata accessor for PersonalDomainsAuthenticationMode();
  v73 = *(_QWORD *)(v72 - 8);
  v74 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 48);
  v75 = v74(v70, 1, v72);
  v76 = v74(v71, 1, v72);
  if (v75)
  {
    if (!v76)
    {
      (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v70, v71, v72);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v73 + 8))(v70, v72);
LABEL_24:
    v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v73 + 24))(v70, v71, v72);
LABEL_25:
  v78 = a3[25];
  v79 = (char *)a1 + v78;
  v80 = (char *)a2 + v78;
  v81 = type metadata accessor for BargeInContext();
  v82 = *(_QWORD *)(v81 - 8);
  v83 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 48);
  v84 = v83(v79, 1, v81);
  v85 = v83(v80, 1, v81);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v79, v80, v81);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v82 + 8))(v79, v81);
LABEL_30:
    v86 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v82 + 24))(v79, v80, v81);
LABEL_31:
  v87 = a3[26];
  v88 = (char *)a1 + v87;
  v89 = (char *)a2 + v87;
  v90 = type metadata accessor for Restrictions();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 24))(v88, v89, v90);
  v91 = a3[27];
  v92 = (char *)a1 + v91;
  v93 = (char *)a2 + v91;
  v94 = type metadata accessor for HomeInfo();
  v95 = *(_QWORD *)(v94 - 8);
  v96 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v95 + 48);
  v97 = v96(v92, 1, v94);
  v98 = v96(v93, 1, v94);
  if (!v97)
  {
    if (!v98)
    {
      (*(void (**)(char *, char *, uint64_t))(v95 + 24))(v92, v93, v94);
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v95 + 8))(v92, v94);
    goto LABEL_36;
  }
  if (v98)
  {
LABEL_36:
    v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v92, v93, v94);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
LABEL_37:
  v100 = a3[28];
  v101 = (_QWORD *)((char *)a1 + v100);
  v102 = (_QWORD *)((char *)a2 + v100);
  *v101 = *v102;
  v101[1] = v102[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[29]) = *(_QWORD *)((char *)a2 + a3[29]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)((char *)a1 + a3[30]) = *(_DWORD *)((char *)a2 + a3[30]);
  *((_BYTE *)a1 + a3[31]) = *((_BYTE *)a2 + a3[31]);
  *((_BYTE *)a1 + a3[32]) = *((_BYTE *)a2 + a3[32]);
  *((_BYTE *)a1 + a3[33]) = *((_BYTE *)a2 + a3[33]);
  return a1;
}

_OWORD *initializeWithTake for InvocationStateImpl(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for InteractionType();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[8];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for AudioSource();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = a3[9];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for AudioDestination();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v27 = a3[10];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  v31 = a3[11];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = type metadata accessor for MultiUserContext();
  v35 = *(_QWORD *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    v36 = type metadata accessor for MultiUserState();
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  v37 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *((_BYTE *)a1 + v37) = *((_BYTE *)a2 + v37);
  v38 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *((_BYTE *)a1 + v38) = *((_BYTE *)a2 + v38);
  v39 = a3[17];
  *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
  *((_BYTE *)a1 + v39) = *((_BYTE *)a2 + v39);
  v40 = a3[18];
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  v43 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
  v44 = a3[19];
  v45 = (char *)a1 + v44;
  v46 = (char *)a2 + v44;
  v47 = type metadata accessor for SiriVoiceGender();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v45, v46, v47);
  v48 = a3[21];
  *(_QWORD *)((char *)a1 + a3[20]) = *(_QWORD *)((char *)a2 + a3[20]);
  *(_OWORD *)((char *)a1 + v48) = *(_OWORD *)((char *)a2 + v48);
  v49 = a3[23];
  *(_OWORD *)((char *)a1 + a3[22]) = *(_OWORD *)((char *)a2 + a3[22]);
  *(_OWORD *)((char *)a1 + v49) = *(_OWORD *)((char *)a2 + v49);
  v50 = a3[24];
  v51 = (char *)a1 + v50;
  v52 = (char *)a2 + v50;
  v53 = type metadata accessor for PersonalDomainsAuthenticationMode();
  v54 = *(_QWORD *)(v53 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v51, v52, v53);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  v56 = a3[25];
  v57 = (char *)a1 + v56;
  v58 = (char *)a2 + v56;
  v59 = type metadata accessor for BargeInContext();
  v60 = *(_QWORD *)(v59 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
  {
    v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v57, v58, v59);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
  }
  v62 = a3[26];
  v63 = (char *)a1 + v62;
  v64 = (char *)a2 + v62;
  v65 = type metadata accessor for Restrictions();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v63, v64, v65);
  v66 = a3[27];
  v67 = (char *)a1 + v66;
  v68 = (char *)a2 + v66;
  v69 = type metadata accessor for HomeInfo();
  v70 = *(_QWORD *)(v69 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
  {
    v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, v68, v69);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
  }
  v72 = a3[29];
  *(_OWORD *)((char *)a1 + a3[28]) = *(_OWORD *)((char *)a2 + a3[28]);
  *(_QWORD *)((char *)a1 + v72) = *(_QWORD *)((char *)a2 + v72);
  v73 = a3[31];
  *(_DWORD *)((char *)a1 + a3[30]) = *(_DWORD *)((char *)a2 + a3[30]);
  *((_BYTE *)a1 + v73) = *((_BYTE *)a2 + v73);
  v74 = a3[33];
  *((_BYTE *)a1 + a3[32]) = *((_BYTE *)a2 + a3[32]);
  *((_BYTE *)a1 + v74) = *((_BYTE *)a2 + v74);
  return a1;
}

_QWORD *assignWithTake for InvocationStateImpl(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(char *, uint64_t, uint64_t);
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(char *, uint64_t, uint64_t);
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(char *, uint64_t, uint64_t);
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for InteractionType();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[8];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for AudioSource();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_7:
  v25 = a3[9];
  v26 = (char *)a1 + v25;
  v27 = (char *)a2 + v25;
  v28 = type metadata accessor for AudioDestination();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
LABEL_12:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v26, v27, v28);
LABEL_13:
  v34 = a3[10];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
  v38 = a3[11];
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = type metadata accessor for MultiUserContext();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, v41);
  v45 = v43(v40, 1, v41);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v40, v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
LABEL_18:
    v46 = type metadata accessor for MultiUserState();
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 40))(v39, v40, v41);
LABEL_19:
  v47 = a3[12];
  v48 = (_QWORD *)((char *)a1 + v47);
  v49 = (_QWORD *)((char *)a2 + v47);
  v51 = *v49;
  v50 = v49[1];
  *v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  v52 = a3[14];
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  *((_BYTE *)a1 + v52) = *((_BYTE *)a2 + v52);
  v53 = a3[16];
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  *((_BYTE *)a1 + v53) = *((_BYTE *)a2 + v53);
  v54 = a3[18];
  *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  v55 = (char *)a1 + v54;
  v56 = (char *)a2 + v54;
  v57 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 40))(v55, v56, v57);
  v58 = a3[19];
  v59 = (char *)a1 + v58;
  v60 = (char *)a2 + v58;
  v61 = type metadata accessor for SiriVoiceGender();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 40))(v59, v60, v61);
  v62 = a3[20];
  v63 = *(void **)((char *)a1 + v62);
  *(_QWORD *)((char *)a1 + v62) = *(_QWORD *)((char *)a2 + v62);

  v64 = a3[21];
  v65 = (_QWORD *)((char *)a1 + v64);
  v66 = (_QWORD *)((char *)a2 + v64);
  v68 = *v66;
  v67 = v66[1];
  *v65 = v68;
  v65[1] = v67;
  swift_bridgeObjectRelease();
  v69 = a3[22];
  v70 = (_QWORD *)((char *)a1 + v69);
  v71 = (_QWORD *)((char *)a2 + v69);
  v73 = *v71;
  v72 = v71[1];
  *v70 = v73;
  v70[1] = v72;
  swift_bridgeObjectRelease();
  v74 = a3[23];
  v75 = (_QWORD *)((char *)a1 + v74);
  v76 = (_QWORD *)((char *)a2 + v74);
  v78 = *v76;
  v77 = v76[1];
  *v75 = v78;
  v75[1] = v77;
  swift_bridgeObjectRelease();
  v79 = a3[24];
  v80 = (char *)a1 + v79;
  v81 = (char *)a2 + v79;
  v82 = type metadata accessor for PersonalDomainsAuthenticationMode();
  v83 = *(_QWORD *)(v82 - 8);
  v84 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48);
  v85 = v84(v80, 1, v82);
  v86 = v84(v81, 1, v82);
  if (v85)
  {
    if (!v86)
    {
      (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v80, v81, v82);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v86)
  {
    (*(void (**)(char *, uint64_t))(v83 + 8))(v80, v82);
LABEL_24:
    v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v83 + 40))(v80, v81, v82);
LABEL_25:
  v88 = a3[25];
  v89 = (char *)a1 + v88;
  v90 = (char *)a2 + v88;
  v91 = type metadata accessor for BargeInContext();
  v92 = *(_QWORD *)(v91 - 8);
  v93 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48);
  v94 = v93(v89, 1, v91);
  v95 = v93(v90, 1, v91);
  if (v94)
  {
    if (!v95)
    {
      (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v89, v90, v91);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v95)
  {
    (*(void (**)(char *, uint64_t))(v92 + 8))(v89, v91);
LABEL_30:
    v96 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(char *, char *, uint64_t))(v92 + 40))(v89, v90, v91);
LABEL_31:
  v97 = a3[26];
  v98 = (char *)a1 + v97;
  v99 = (char *)a2 + v97;
  v100 = type metadata accessor for Restrictions();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 40))(v98, v99, v100);
  v101 = a3[27];
  v102 = (char *)a1 + v101;
  v103 = (char *)a2 + v101;
  v104 = type metadata accessor for HomeInfo();
  v105 = *(_QWORD *)(v104 - 8);
  v106 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v105 + 48);
  v107 = v106(v102, 1, v104);
  v108 = v106(v103, 1, v104);
  if (!v107)
  {
    if (!v108)
    {
      (*(void (**)(char *, char *, uint64_t))(v105 + 40))(v102, v103, v104);
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v105 + 8))(v102, v104);
    goto LABEL_36;
  }
  if (v108)
  {
LABEL_36:
    v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v102, v103, v104);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
LABEL_37:
  v110 = a3[28];
  v111 = (_QWORD *)((char *)a1 + v110);
  v112 = (_QWORD *)((char *)a2 + v110);
  v114 = *v112;
  v113 = v112[1];
  *v111 = v114;
  v111[1] = v113;
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[29]) = *(_QWORD *)((char *)a2 + a3[29]);
  swift_bridgeObjectRelease();
  v115 = a3[31];
  *(_DWORD *)((char *)a1 + a3[30]) = *(_DWORD *)((char *)a2 + a3[30]);
  *((_BYTE *)a1 + v115) = *((_BYTE *)a2 + v115);
  v116 = a3[33];
  *((_BYTE *)a1 + a3[32]) = *((_BYTE *)a2 + a3[32]);
  *((_BYTE *)a1 + v116) = *((_BYTE *)a2 + v116);
  return a1;
}

uint64_t getEnumTagSinglePayload for InvocationStateImpl()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4E0D9BC(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for InputOrigin();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = type metadata accessor for InteractionType();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[8];
        }
        else
        {
          v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
          {
            v10 = v14;
            v11 = a3[9];
          }
          else
          {
            v15 = type metadata accessor for ResponseMode();
            v9 = *(_QWORD *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
            {
              v10 = v15;
              v11 = a3[10];
            }
            else
            {
              v16 = type metadata accessor for MultiUserState();
              v9 = *(_QWORD *)(v16 - 8);
              if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
              {
                v10 = v16;
                v11 = a3[11];
              }
              else
              {
                v17 = type metadata accessor for Locale();
                v9 = *(_QWORD *)(v17 - 8);
                if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
                {
                  v10 = v17;
                  v11 = a3[18];
                }
                else
                {
                  v18 = type metadata accessor for SiriVoiceGender();
                  v9 = *(_QWORD *)(v18 - 8);
                  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
                  {
                    v10 = v18;
                    v11 = a3[19];
                  }
                  else
                  {
                    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
                    v9 = *(_QWORD *)(v19 - 8);
                    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
                    {
                      v10 = v19;
                      v11 = a3[24];
                    }
                    else
                    {
                      v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
                      v9 = *(_QWORD *)(v20 - 8);
                      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
                      {
                        v10 = v20;
                        v11 = a3[25];
                      }
                      else
                      {
                        v21 = type metadata accessor for Restrictions();
                        v9 = *(_QWORD *)(v21 - 8);
                        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
                        {
                          v10 = v21;
                          v11 = a3[26];
                        }
                        else
                        {
                          v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
                          v9 = *(_QWORD *)(v10 - 8);
                          v11 = a3[27];
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for InvocationStateImpl()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1B4E0DBE4(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for InputOrigin();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = type metadata accessor for InteractionType();
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[8];
        }
        else
        {
          v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
          v9 = *(_QWORD *)(v14 - 8);
          if (*(_DWORD *)(v9 + 84) == a3)
          {
            v10 = v14;
            v11 = a4[9];
          }
          else
          {
            v15 = type metadata accessor for ResponseMode();
            v9 = *(_QWORD *)(v15 - 8);
            if (*(_DWORD *)(v9 + 84) == a3)
            {
              v10 = v15;
              v11 = a4[10];
            }
            else
            {
              v16 = type metadata accessor for MultiUserState();
              v9 = *(_QWORD *)(v16 - 8);
              if (*(_DWORD *)(v9 + 84) == a3)
              {
                v10 = v16;
                v11 = a4[11];
              }
              else
              {
                v17 = type metadata accessor for Locale();
                v9 = *(_QWORD *)(v17 - 8);
                if (*(_DWORD *)(v9 + 84) == a3)
                {
                  v10 = v17;
                  v11 = a4[18];
                }
                else
                {
                  v18 = type metadata accessor for SiriVoiceGender();
                  v9 = *(_QWORD *)(v18 - 8);
                  if (*(_DWORD *)(v9 + 84) == a3)
                  {
                    v10 = v18;
                    v11 = a4[19];
                  }
                  else
                  {
                    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
                    v9 = *(_QWORD *)(v19 - 8);
                    if (*(_DWORD *)(v9 + 84) == a3)
                    {
                      v10 = v19;
                      v11 = a4[24];
                    }
                    else
                    {
                      v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BargeInContext?);
                      v9 = *(_QWORD *)(v20 - 8);
                      if (*(_DWORD *)(v9 + 84) == a3)
                      {
                        v10 = v20;
                        v11 = a4[25];
                      }
                      else
                      {
                        v21 = type metadata accessor for Restrictions();
                        v9 = *(_QWORD *)(v21 - 8);
                        if (*(_DWORD *)(v9 + 84) == a3)
                        {
                          v10 = v21;
                          v11 = a4[26];
                        }
                        else
                        {
                          v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
                          v9 = *(_QWORD *)(v10 - 8);
                          v11 = a4[27];
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void type metadata completion function for InvocationStateImpl()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  type metadata accessor for InputOrigin();
  if (v0 <= 0x3F)
  {
    type metadata accessor for InteractionType();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Input?(319, (unint64_t *)&lazy cache variable for type metadata for AudioSource?, (void (*)(uint64_t))MEMORY[0x1E0DA7B88]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Input?(319, &lazy cache variable for type metadata for AudioDestination?, (void (*)(uint64_t))MEMORY[0x1E0DA8070]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for ResponseMode();
          if (v4 <= 0x3F)
          {
            type metadata accessor for MultiUserState();
            if (v5 <= 0x3F)
            {
              type metadata accessor for Locale();
              if (v6 <= 0x3F)
              {
                type metadata accessor for SiriVoiceGender();
                if (v7 <= 0x3F)
                {
                  type metadata accessor for Input?(319, &lazy cache variable for type metadata for PersonalDomainsAuthenticationMode?, (void (*)(uint64_t))MEMORY[0x1E0DA8220]);
                  if (v8 <= 0x3F)
                  {
                    type metadata accessor for Input?(319, &lazy cache variable for type metadata for BargeInContext?, (void (*)(uint64_t))MEMORY[0x1E0DA7F90]);
                    if (v9 <= 0x3F)
                    {
                      type metadata accessor for Restrictions();
                      if (v10 <= 0x3F)
                      {
                        type metadata accessor for Input?(319, &lazy cache variable for type metadata for HomeInfo?, (void (*)(uint64_t))MEMORY[0x1E0DA8258]);
                        if (v11 <= 0x3F)
                          swift_initStructMetadata();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t JetsamHelper.defaultTimeout.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for defaultTimeout != -1)
    swift_once();
  v0 = type metadata accessor for DispatchTimeInterval();
  return __swift_project_value_buffer(v0, (uint64_t)static JetsamHelper.defaultTimeout);
}

_QWORD *JetsamHelper.__allocating_init(name:queue:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;

  v8 = (_QWORD *)swift_allocObject();
  v9 = (_QWORD *)((char *)v8 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  *v9 = 0;
  v9[1] = 0;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = dispatch_semaphore_create(1);
  v8[5] = a3;
  v10 = (char *)v8 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout;
  v11 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a4, v11);
  return v8;
}

Swift::Void __swiftcall JetsamHelper.ensureJetsamTransaction()()
{
  uint64_t v0;

  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.ensureJetsamTransaction()(v0);
  OS_dispatch_semaphore.signal()();
}

Swift::Bool __swiftcall JetsamHelper.releaseJetsamTransaction()()
{
  uint64_t v0;
  Swift::Bool v2;

  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.releaseJetsamTransaction()(v0, &v2);
  OS_dispatch_semaphore.signal()();
  return v2;
}

uint64_t one-time initialization function for defaultTimeout()
{
  uint64_t v0;

  v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static JetsamHelper.defaultTimeout);
  *(_QWORD *)__swift_project_value_buffer(v0, (uint64_t)static JetsamHelper.defaultTimeout) = 180;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

{
  uint64_t v0;

  v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static SiriAceLocationProvider.defaultTimeout);
  *(_QWORD *)__swift_project_value_buffer(v0, (uint64_t)static SiriAceLocationProvider.defaultTimeout) = 50;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

uint64_t static JetsamHelper.defaultTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultTimeout != -1)
    swift_once();
  v2 = type metadata accessor for DispatchTimeInterval();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static JetsamHelper.defaultTimeout);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

_QWORD *JetsamHelper.init(name:queue:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  char *v8;
  uint64_t v9;

  v7 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  *v7 = 0;
  v7[1] = 0;
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = dispatch_semaphore_create(1);
  v4[5] = a3;
  v8 = (char *)v4 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout;
  v9 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8, a4, v9);
  return v4;
}

void closure #1 in closure #1 in JetsamHelper.ensureJetsamTransaction()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];

  v0 = type metadata accessor for DispatchTimeInterval();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v5 = Strong;
    OS_dispatch_semaphore.wait()();
    closure #1 in JetsamHelper.releaseJetsamTransaction()(v5, (BOOL *)v18);
    OS_dispatch_semaphore.signal()();
    if (one-time initialization token for executor != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    swift_retain_n();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v16 = swift_slowAlloc();
      v18[0] = v16;
      *(_DWORD *)v9 = 136315394;
      v10 = *(_QWORD *)(v5 + 16);
      v11 = *(_QWORD *)(v5 + 24);
      swift_bridgeObjectRetain();
      v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout, v0);
      v12 = String.init<A>(describing:)();
      v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v7, v8, "os_transaction(%s) released after %s", (uint8_t *)v9, 0x16u);
      v14 = v16;
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v14, -1, -1);
      MEMORY[0x1B5E44758](v9, -1, -1);
      swift_release();

    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t JetsamHelper.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout;
  v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined consume of (transaction: OS_os_transaction?, timer: OS_dispatch_source_timer)?(*(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction), *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction + 8));
  return v0;
}

uint64_t JetsamHelper.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();

  v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout;
  v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined consume of (transaction: OS_os_transaction?, timer: OS_dispatch_source_timer)?(*(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction), *(_QWORD *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction + 8));
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for JetsamHelper()
{
  return type metadata accessor for JetsamHelper();
}

uint64_t type metadata accessor for JetsamHelper()
{
  uint64_t result;

  result = type metadata singleton initialization cache for JetsamHelper;
  if (!type metadata singleton initialization cache for JetsamHelper)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for JetsamHelper()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for JetsamHelper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of JetsamHelper.__allocating_init(name:queue:timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1B4E0E768()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in JetsamHelper.ensureJetsamTransaction()()
{
  closure #1 in closure #1 in JetsamHelper.ensureJetsamTransaction()();
}

uint64_t static LaunchAppMetricsLogger.logAnalytics(launchApp:)(void *a1)
{
  return specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(a1, (uint64_t (*))specialized static LaunchAppMetricsLogger.getSparseCommand(command:));
}

{
  return specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(a1, (uint64_t (*))specialized static LaunchAppMetricsLogger.getSparseCommand(command:));
}

id specialized static LaunchAppMetricsLogger.getSparseCommand(command:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v12;

  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v6 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D88148]), sel_init);
  v8 = objc_msgSend(a1, sel_appId);
  if (v8)
  {
    v9 = v8;
    v10 = v7;
    objc_msgSend(v10, sel_setAppId_, v9);

  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v19;

  v2 = type metadata accessor for OSSignpostID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v6 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D87F88]), sel_init);
  v8 = objc_msgSend(a1, sel_appId);
  if (v8)
  {
    v9 = v8;
    v10 = v7;
    objc_msgSend(v10, sel_setAppId_, v9);

  }
  v11 = objc_msgSend(a1, sel_launchId);
  if (v11)
  {
    v12 = v11;
    objc_msgSend(v7, sel_setLaunchId_, v11);

  }
  v13 = objc_msgSend(a1, sel_applicationClientIdentifier);
  if (v13)
  {
    v14 = v13;
    objc_msgSend(v7, sel_setApplicationClientIdentifier_, v13);

  }
  v15 = objc_msgSend(a1, sel_callbacks);
  if (v15)
  {
    v16 = v15;
    v17 = v7;
    objc_msgSend(v17, sel_setCallbacks_, v16);

  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

uint64_t specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(void *a1)
{
  return specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(a1, (uint64_t (*))specialized static LaunchAppMetricsLogger.getSparseCommand(command:));
}

{
  return specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(a1, (uint64_t (*))specialized static LaunchAppMetricsLogger.getSparseCommand(command:));
}

uint64_t specialized static LaunchAppMetricsLogger.logAnalytics(launchApp:)(void *a1, uint64_t (*a2)(NSObject *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  void *v18;
  id v19;
  id v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _OWORD v29[2];
  __int128 v30;
  unint64_t v31;
  unint64_t v32;

  v4 = type metadata accessor for OSSignpostID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1)
    swift_once();
  v8 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for instrumentation != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.instrumentation);
  v10 = a1;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v27 = v4;
    v13 = (uint8_t *)swift_slowAlloc();
    v25 = (_QWORD *)swift_slowAlloc();
    v26 = v5;
    *(_DWORD *)v13 = 138412290;
    *(_QWORD *)&v30 = v10;
    v14 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v15 = v25;
    *v25 = v10;

    v4 = v27;
    _os_log_impl(&dword_1B4BE6000, v11, v12, "Logging LaunchApp to AFAnalytics: %@", v13, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v16 = v15;
    v5 = v26;
    MEMORY[0x1B5E44758](v16, -1, -1);
    MEMORY[0x1B5E44758](v13, -1, -1);
  }
  else
  {

    v11 = v10;
  }

  v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v32 = v17;
  v18 = (void *)a2(v10);
  v19 = objc_msgSend(v18, sel_dictionary);
  if (v19)
  {
    v20 = v19;
    v31 = type metadata accessor for NSMutableDictionary();
    *(_QWORD *)&v30 = v20;
    outlined init with take of Any(&v30, v29);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = v17;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, 0x6C46746E65696C43, 0xEE0077656956776FLL, isUniquelyReferenced_nonNull_native);
    v22 = v28;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0x6C46746E65696C43, 0xEE0077656956776FLL, &v30);
    outlined destroy of Any?((uint64_t)&v30);
    v22 = v32;
  }
  specialized static Log.logAFAnalytics(eventType:eventContext:)(3700, v22);

  swift_bridgeObjectRelease();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

ValueMetadata *type metadata accessor for LaunchAppMetricsLogger()
{
  return &type metadata for LaunchAppMetricsLogger;
}

unint64_t type metadata accessor for NSMutableDictionary()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSMutableDictionary;
  if (!lazy cache variable for type metadata for NSMutableDictionary)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
  }
  return result;
}

uint64_t one-time initialization function for kLogger()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, kLogger);
  v1 = __swift_project_value_buffer(v0, (uint64_t)kLogger);
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, kLogger);
  v1 = __swift_project_value_buffer(v0, (uint64_t)kLogger);
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, kLogger);
  v1 = __swift_project_value_buffer(v0, (uint64_t)kLogger);
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, kLogger);
  v1 = __swift_project_value_buffer(v0, (uint64_t)kLogger);
  if (one-time initialization token for executor != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t LinkActionFilter.compatibleLinkActions(parseMetadata:expansionContext:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = a2[3];
  v4 = a2[4];
  v5 = __swift_project_boxed_opaque_existential_1(a2, v3);
  return specialized LinkActionFilter.compatibleLinkActions(parseMetadata:expansionContext:)(a1, (uint64_t)v5, v3, v4);
}

uint64_t closure #2 in LinkActionFilter.compatibleLinkActions(parseMetadata:expansionContext:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  char v19;
  _OWORD v22[2];
  __int128 v23;
  uint64_t v24;
  unint64_t v25;

  v6 = *a1;
  v5 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v19 = *((_BYTE *)a1 + 32);
  v9 = *((_BYTE *)a1 + 33);
  v10 = *((_BYTE *)a1 + 34);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE4F40;
  *(_QWORD *)(inited + 32) = 0xD000000000000011;
  *(_QWORD *)(inited + 40) = 0x80000001B4EFDE40;
  v12 = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 48) = v9;
  *(_QWORD *)(inited + 72) = v12;
  *(_QWORD *)(inited + 80) = 0xD000000000000014;
  v13 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(inited + 88) = 0x80000001B4EF7CA0;
  *(_QWORD *)(inited + 96) = v6;
  *(_QWORD *)(inited + 104) = v5;
  *(_QWORD *)(inited + 120) = v13;
  *(_QWORD *)(inited + 128) = 0x6E65657263536E6FLL;
  *(_QWORD *)(inited + 136) = 0xE800000000000000;
  *(_QWORD *)(inited + 168) = v12;
  *(_BYTE *)(inited + 144) = v10;
  swift_bridgeObjectRetain();
  v14 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  if (v8)
  {
    v24 = v13;
    *(_QWORD *)&v23 = v7;
    *((_QWORD *)&v23 + 1) = v8;
    outlined init with take of Any(&v23, v22);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v14;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, 0x69746E456B6E696CLL, 0xEE00657079547974, isUniquelyReferenced_nonNull_native);
    v14 = v25;
    swift_bridgeObjectRelease();
  }
  v24 = v12;
  LOBYTE(v23) = v19;
  outlined init with take of Any(&v23, v22);
  v16 = swift_isUniquelyReferenced_nonNull_native();
  v25 = v14;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, 0xD000000000000016, 0x80000001B4EFDE60, v16);
  v17 = v25;
  swift_bridgeObjectRelease();
  *a4 = a2;
  a4[1] = a3;
  a4[2] = v17;
  return swift_bridgeObjectRetain();
}

uint64_t specialized LinkActionFilter.compatibleLinkActions(parseMetadata:expansionContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  uint8_t *v20;
  _QWORD *v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  BOOL v32;
  uint8_t *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint8_t *v37;
  NSObject *v38;
  os_log_type_t v39;
  BOOL v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  _QWORD *v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  NSObject *v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  Swift::Int v83;
  uint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  BOOL v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  NSObject *v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  int64_t v104;
  uint64_t v105;
  void **v106;
  unint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  Swift::String v111;
  Swift::String v112;
  Swift::String v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  int64_t v123;
  uint64_t v124;
  void **v125;
  unint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  Swift::String v130;
  Swift::String v131;
  Swift::String v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  os_log_t v139;
  uint64_t v140;
  _QWORD *v141;
  NSObject *v142;
  NSObject *v143;
  NSObject *v144;
  os_log_type_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  os_log_t v154;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  NSObject *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  int v175;
  os_log_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  os_log_t v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;

  v5 = a1;
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v156 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = v8;
  v9 = *(void (**)(void))(v8 + 16);
  v158 = v7;
  v159 = v10;
  v9();
  v11 = *(void **)v5;
  if (*(_QWORD *)v5)
  {
    v12 = one-time initialization token for kLogger;
    v13 = v11;
    if (v12 != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    v15 = __swift_project_value_buffer(v14, (uint64_t)kLogger);
    v16 = v13;
    v166 = v15;
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.debug.getter();
    v19 = os_log_type_enabled(v17, v18);
    v164 = v5;
    v163 = v16;
    if (v19)
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v20 = 138412290;
      v177 = (uint64_t)v16;
      v22 = v16;
      v5 = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v21 = v11;

      _os_log_impl(&dword_1B4BE6000, v17, v18, "[LinkParseExpansion] Evaluating compatible Link actions for %@", v20, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v21, -1, -1);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }
    else
    {

      v17 = v16;
    }

    if ((*(_BYTE *)(v5 + 32) & 1) != 0)
    {
      v34 = Logger.logObject.getter();
      v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v36 = 0;
        _os_log_impl(&dword_1B4BE6000, v34, v35, "[LinkParseExpansion] Detected noEntity parse, using entities directly from SRR entity pool.", v36, 2u);
        MEMORY[0x1B5E44758](v36, -1, -1);
      }

      v185 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(v159, a4);
    }
    else
    {
      v28 = *(_QWORD *)(v5 + 16);
      v29 = *(_QWORD *)(v28 + 16);
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.debug.getter();
      v32 = os_log_type_enabled(v30, v31);
      if (v29)
      {
        if (v32)
        {
          v33 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v33 = 0;
          _os_log_impl(&dword_1B4BE6000, v30, v31, "[LinkParseExpansion] Detected parse with explicitly mentioned entity type.", v33, 2u);
          MEMORY[0x1B5E44758](v33, -1, -1);
        }

        v185 = v28;
      }
      else
      {
        if (v32)
        {
          v37 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v37 = 0;
          _os_log_impl(&dword_1B4BE6000, v30, v31, "[LinkParseExpansion] Detected parse without explicitly mentioned entity type.", v37, 2u);
          MEMORY[0x1B5E44758](v37, -1, -1);
        }

        v185 = *(_QWORD *)(v5 + 8);
      }
      swift_bridgeObjectRetain();
    }
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.debug.getter();
    v40 = os_log_type_enabled(v38, v39);
    v41 = MEMORY[0x1E0DEE9B8];
    if (v40)
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      v177 = v43;
      *(_DWORD *)v42 = 136315138;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
      v44 = Dictionary.description.getter();
      v46 = v45;
      swift_bridgeObjectRelease();
      v47 = v44;
      v41 = MEMORY[0x1E0DEE9B8];
      v180 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v46, &v177);
      v5 = v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v38, v39, "[LinkParseExpansion] Considering salient entities types: %s", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v43, -1, -1);
      MEMORY[0x1B5E44758](v42, -1, -1);
    }

    v48 = v163;
    v49 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v183 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v184 = MEMORY[0x1E0DEE9D8];
    (*(void (**)(uint64_t, uint64_t))(a4 + 24))(v159, a4);
    v50 = dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    swift_retain();
    v168 = v50;
    dispatch thunk of _AnyIteratorBoxBase.next()();
    v52 = v178;
    if (v178)
    {
      v53 = 0;
      v54 = v177;
      v55 = v179;
      *(_QWORD *)&v51 = 136315650;
      v162 = v51;
      v161 = v41 + 8;
      while (1)
      {
        v58 = *(_QWORD *)(v5 + 24);
        if (*(_QWORD *)(v58 + 16) && (specialized Set.contains(_:)(v54, v52, v58) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          v64 = v183;
          v65 = v52;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64[2] + 1, 1, v64);
          v67 = v64[2];
          v66 = v64[3];
          if (v67 >= v66 >> 1)
            v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v66 > 1), v67 + 1, 1, v64);
          v64[2] = v67 + 1;
          v68 = &v64[2 * v67];
          v68[4] = v54;
          v68[5] = v65;
          v183 = v64;
          goto LABEL_30;
        }
        swift_beginAccess();
        v59 = v185;
        v60 = *(_QWORD *)(v185 + 16);
        v169 = v53;
        if (v60)
        {
          swift_bridgeObjectRetain();
          v61 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v52);
          if ((v62 & 1) != 0)
          {
            v63 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v61);
            swift_bridgeObjectRetain();
          }
          else
          {
            v63 = 0;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          v63 = 0;
        }
        swift_endAccess();
        v186 = v49;
        v187 = v49;
        v69 = *(_QWORD *)(v55 + 16);
        v170 = v54;
        if (!v69)
          goto LABEL_80;
        v70 = v48;
        v71 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v70);
        if ((v72 & 1) == 0)
        {

LABEL_80:
          swift_bridgeObjectRelease();
          goto LABEL_81;
        }
        v73 = *(_QWORD *)(*(_QWORD *)(v55 + 56) + 8 * v71);
        swift_bridgeObjectRetain();

        swift_bridgeObjectRelease();
        v173 = *(_QWORD *)(v73 + 16);
        if (!v173)
          goto LABEL_80;
        v167 = v52;
        v172 = v73 + 32;
        v171 = v63 + 56;
        v160 = v73;
        swift_bridgeObjectRetain();
        v74 = v49;
        v75 = 0;
        v174 = v74;
        do
        {
          v77 = v172 + 40 * v75;
          v78 = *(_QWORD *)v77;
          v79 = *(_QWORD *)(v77 + 8);
          v80 = *(_QWORD *)(v77 + 16);
          v81 = *(_QWORD *)(v77 + 24);
          v82 = *(_BYTE *)(v77 + 32);
          v175 = *(unsigned __int8 *)(v77 + 33);
          LODWORD(v176) = *(unsigned __int8 *)(v77 + 34);
          if (v63 && v81)
          {
            if (*(_QWORD *)(v63 + 16))
            {
              Hasher.init(_seed:)();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              String.hash(into:)();
              v83 = Hasher._finalize()();
              v84 = -1 << *(_BYTE *)(v63 + 32);
              v85 = v83 & ~v84;
              if (((*(_QWORD *)(v171 + ((v85 >> 3) & 0xFFFFFFFFFFFFF8)) >> v85) & 1) != 0)
              {
                v86 = (_QWORD *)(*(_QWORD *)(v63 + 48) + 16 * v85);
                if (*v86 == v80 && v81 == v86[1])
                  goto LABEL_75;
                v165 = *(_QWORD *)(v63 + 48);
                if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  goto LABEL_75;
                v88 = ~v84;
                v89 = (v85 + 1) & v88;
                if (((*(_QWORD *)(v171 + ((v89 >> 3) & 0xFFFFFFFFFFFFF8)) >> v89) & 1) != 0)
                {
                  while (1)
                  {
                    v90 = (_QWORD *)(v165 + 16 * v89);
                    v91 = *v90 == v80 && v81 == v90[1];
                    if (v91 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      break;
                    v89 = (v89 + 1) & v88;
                    if (((*(_QWORD *)(v171 + ((v89 >> 3) & 0xFFFFFFFFFFFFF8)) >> v89) & 1) == 0)
                      goto LABEL_66;
                  }
LABEL_75:
                  swift_beginAccess();
                  v97 = v187;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v97[2] + 1, 1, v97);
                  v99 = v97[2];
                  v98 = v97[3];
                  if (v99 >= v98 >> 1)
                    v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v98 > 1), v99 + 1, 1, v97);
                  v97[2] = v99 + 1;
                  v76 = &v97[5 * v99];
                  v76[4] = v78;
                  v76[5] = v79;
                  v76[6] = v80;
                  v76[7] = v81;
                  *((_BYTE *)v76 + 64) = v82;
                  *((_BYTE *)v76 + 65) = v175;
                  *((_BYTE *)v76 + 66) = (_BYTE)v176;
                  v187 = v97;
                  goto LABEL_49;
                }
              }
LABEL_66:
              if ((v82 & 1) == 0)
                goto LABEL_75;
            }
            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if ((v82 & 1) == 0)
                goto LABEL_75;
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((v82 & 1) == 0)
              goto LABEL_75;
          }
          swift_beginAccess();
          v92 = v186;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v174 = v92;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v174 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v174[2] + 1, 1, v174);
          v94 = v174[2];
          v93 = v174[3];
          if (v94 >= v93 >> 1)
            v174 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v93 > 1), v94 + 1, 1, v174);
          v95 = v174;
          v174[2] = v94 + 1;
          v96 = &v95[5 * v94];
          v96[4] = v78;
          v96[5] = v79;
          v96[6] = v80;
          v96[7] = v81;
          *((_BYTE *)v96 + 64) = v82;
          *((_BYTE *)v96 + 65) = v175;
          *((_BYTE *)v96 + 66) = (_BYTE)v176;
          v186 = v95;
LABEL_49:
          swift_endAccess();
          ++v75;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        while (v75 != v173);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v5 = v164;
        v48 = v163;
        v49 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v52 = v167;
LABEL_81:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain_n();
        v100 = Logger.logObject.getter();
        v101 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v100, (os_log_type_t)v101))
        {
          v175 = v101;
          v176 = v100;
          v102 = swift_slowAlloc();
          v173 = swift_slowAlloc();
          v182 = (os_log_t)v173;
          *(_DWORD *)v102 = v162;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v102 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v170, v52, (uint64_t *)&v182);
          v167 = v52;
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v102 + 12) = 2080;
          swift_beginAccess();
          v103 = v187;
          v104 = v187[2];
          if (v104)
          {
            v181 = (uint64_t)v49;
            swift_bridgeObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v104, 0);
            v105 = v181;
            v106 = (void **)(v103 + 7);
            do
            {
              v108 = (uint64_t)*(v106 - 3);
              v107 = (unint64_t)*(v106 - 2);
              v109 = *v106;
              if (*v106)
              {
                v110 = (uint64_t)*(v106 - 1);
                v177 = (uint64_t)*(v106 - 3);
                v178 = v107;
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain_n();
                v111._countAndFlagsBits = 60;
                v111._object = (void *)0xE100000000000000;
                String.append(_:)(v111);
                v112._countAndFlagsBits = v110;
                v112._object = v109;
                String.append(_:)(v112);
                v113._countAndFlagsBits = 62;
                v113._object = (void *)0xE100000000000000;
                String.append(_:)(v113);
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                v108 = v177;
                v107 = v178;
              }
              else
              {
                swift_bridgeObjectRetain();
              }
              v181 = v105;
              v115 = *(_QWORD *)(v105 + 16);
              v114 = *(_QWORD *)(v105 + 24);
              if (v115 >= v114 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v114 > 1, v115 + 1, 1);
                v105 = v181;
              }
              v106 += 5;
              *(_QWORD *)(v105 + 16) = v115 + 1;
              v116 = v105 + 16 * v115;
              *(_QWORD *)(v116 + 32) = v108;
              *(_QWORD *)(v116 + 40) = v107;
              --v104;
            }
            while (v104);
            swift_bridgeObjectRelease();
            v49 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          }
          else
          {
            v105 = (uint64_t)v49;
          }
          v177 = v105;
          v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
          v118 = lazy protocol witness table accessor for type [String] and conformance [A]();
          v119 = BidirectionalCollection<>.joined(separator:)();
          v121 = v120;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v102 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v121, (uint64_t *)&v182);
          swift_bridgeObjectRelease();
          *(_WORD *)(v102 + 22) = 2080;
          swift_beginAccess();
          v122 = v186;
          v123 = v186[2];
          v174 = v186;
          if (v123)
          {
            v171 = v118;
            v172 = v117;
            v181 = (uint64_t)v49;
            swift_bridgeObjectRetain();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v123, 0);
            v124 = v181;
            v125 = (void **)(v122 + 7);
            do
            {
              v127 = (uint64_t)*(v125 - 3);
              v126 = (unint64_t)*(v125 - 2);
              v128 = *v125;
              if (*v125)
              {
                v129 = (uint64_t)*(v125 - 1);
                v177 = (uint64_t)*(v125 - 3);
                v178 = v126;
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain_n();
                v130._countAndFlagsBits = 60;
                v130._object = (void *)0xE100000000000000;
                String.append(_:)(v130);
                v131._countAndFlagsBits = v129;
                v131._object = v128;
                String.append(_:)(v131);
                v132._countAndFlagsBits = 62;
                v132._object = (void *)0xE100000000000000;
                String.append(_:)(v132);
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                v127 = v177;
                v126 = v178;
              }
              else
              {
                swift_bridgeObjectRetain();
              }
              v181 = v124;
              v134 = *(_QWORD *)(v124 + 16);
              v133 = *(_QWORD *)(v124 + 24);
              if (v134 >= v133 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v133 > 1, v134 + 1, 1);
                v124 = v181;
              }
              v125 += 5;
              *(_QWORD *)(v124 + 16) = v134 + 1;
              v135 = v124 + 16 * v134;
              *(_QWORD *)(v135 + 32) = v127;
              *(_QWORD *)(v135 + 40) = v126;
              --v123;
            }
            while (v123);
            swift_bridgeObjectRelease();
            v49 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          }
          else
          {
            v124 = (uint64_t)v49;
          }
          v177 = v124;
          v136 = BidirectionalCollection<>.joined(separator:)();
          v138 = v137;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v102 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v138, (uint64_t *)&v182);
          swift_bridgeObjectRelease();
          v139 = v176;
          _os_log_impl(&dword_1B4BE6000, v176, (os_log_type_t)v175, "[LinkParseExpansion] %s Compatible actions: [%s] Incompatible actions: [%s]", (uint8_t *)v102, 0x20u);
          v140 = v173;
          swift_arrayDestroy();
          MEMORY[0x1B5E44758](v140, -1, -1);
          MEMORY[0x1B5E44758](v102, -1, -1);

          v5 = v164;
          v48 = v163;
          v53 = v169;
          v52 = v167;
        }
        else
        {

          swift_bridgeObjectRelease_n();
          v53 = v169;
        }
        swift_bridgeObjectRetain();
        v56 = swift_bridgeObjectRetain();
        v57 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime18LinkActionMetadataVG_SS11appBundleId_SDySSypG8userDatats5NeverOTg504_s14de9Runtime16gh72FilterV010compatibleD7Actions13parseMetadata16expansionContextSaySS11appkL76_SDySSypG8userDatatGAA0d5ParseJ0V_AA0dL9Providing_ptFSSAG_AhItAA0deJ0VXEfU0_SSTf1cn_nTf4ng_n(v56, v170, v52);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        specialized Array.append<A>(contentsOf:)(v57);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_30:
        dispatch thunk of _AnyIteratorBoxBase.next()();
        v54 = v177;
        v52 = v178;
        v55 = v179;
        if (!v178)
        {
          v49 = v183;
          break;
        }
      }
    }
    swift_release_n();
    if (v49[2])
    {
      v141 = *(_QWORD **)(v5 + 8);
      v186 = *(_QWORD **)(v5 + 16);
      v187 = v141;
      v142 = v48;
      outlined retain of [String : Set<String>]((uint64_t)&v187);
      outlined retain of [String : Set<String>]((uint64_t)&v186);
      swift_bridgeObjectRetain();
      v143 = v142;
      outlined retain of [String : Set<String>]((uint64_t)&v187);
      outlined retain of [String : Set<String>]((uint64_t)&v186);
      swift_bridgeObjectRetain();
      v144 = Logger.logObject.getter();
      v145 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v144, v145))
      {
        v146 = swift_slowAlloc();
        v176 = (os_log_t)swift_slowAlloc();
        v182 = v176;
        *(_DWORD *)v146 = 136315394;
        swift_beginAccess();
        v147 = swift_bridgeObjectRetain();
        v148 = MEMORY[0x1B5E434D4](v147, MEMORY[0x1E0DEA968]);
        v150 = v149;
        swift_bridgeObjectRelease();
        v181 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v148, v150, (uint64_t *)&v182);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v146 + 12) = 2080;
        swift_bridgeObjectRetain();
        v151 = Set.description.getter();
        v153 = v152;
        swift_bridgeObjectRelease();
        v181 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v153, (uint64_t *)&v182);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        outlined release of [String : Set<String>]((uint64_t)&v187);
        outlined release of [String : Set<String>]((uint64_t)&v186);

        swift_bridgeObjectRelease();
        outlined release of [String : Set<String>]((uint64_t)&v187);
        outlined release of [String : Set<String>]((uint64_t)&v186);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, v144, v145, "[LinkParseExpansion] Skipped %s as the parse explicitly refers to %s", (uint8_t *)v146, 0x16u);
        v154 = v176;
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v154, -1, -1);
        MEMORY[0x1B5E44758](v146, -1, -1);
        swift_bridgeObjectRelease();

      }
      else
      {

        outlined release of [String : Set<String>]((uint64_t)&v187);
        outlined release of [String : Set<String>]((uint64_t)&v186);

        swift_bridgeObjectRelease();
        outlined release of [String : Set<String>]((uint64_t)&v187);
        outlined release of [String : Set<String>]((uint64_t)&v186);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();

    }
    swift_bridgeObjectRelease();
    v27 = v184;
  }
  else
  {
    if (one-time initialization token for kLogger != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)kLogger);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_1B4BE6000, v24, v25, "[LinkParseExpansion] Skipping parse expansion as could not find systemProtocol from parse.", v26, 2u);
      MEMORY[0x1B5E44758](v26, -1, -1);
    }

    v27 = MEMORY[0x1E0DEE9D8];
  }
  (*(void (**)(char *, uint64_t))(v157 + 8))(v158, v159);
  return v27;
}

ValueMetadata *type metadata accessor for LinkActionFilter()
{
  return &type metadata for LinkActionFilter;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay32SiriReferenceResolutionDataModel11RRCandidateVG_SSs5NeverOTg504_s14d133KitRuntime27LinkExpansionContextBuilderC40extractOnScreenBundleIDsFromRRCandidates33_96F732C182F07CCE7D79D4AD573D548BLLyShySSGSay0A28efg7Model11I60VGFSSAIcfu_33_90a86b9d715d44caa755a7dc6dc8aa3bAISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = type metadata accessor for RREntity();
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v18[1] = v1;
    v21 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v8 = *(_QWORD *)(type metadata accessor for RRCandidate() - 8);
    v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    do
    {
      RRCandidate.entity.getter();
      v11 = RREntity.id.getter();
      v13 = v12;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v20);
      v7 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v21;
      }
      v15 = *(_QWORD *)(v7 + 16);
      v14 = *(_QWORD *)(v7 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
        v7 = v21;
      }
      *(_QWORD *)(v7 + 16) = v15 + 1;
      v16 = v7 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v11;
      *(_QWORD *)(v16 + 40) = v13;
      v9 += v10;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVySSSDySo16LNSystemProtocolCSay14SiriKitRuntime18LinkActionMetadataVGG_G_SSs5NeverOTg504_s14gh9Runtime20J59ExpansionContextV07SessionF0C16debugDescriptionSSvgS2SXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t *v12;
  Swift::String v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (!v1)
    return v2;
  v28 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v28;
  result = specialized _NativeDictionary.startIndex.getter(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v22 = v1;
  v23 = v5;
  v24 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v25 = v7;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v26 = *v12;
    v27 = v12[1];
    swift_bridgeObjectRetain_n();
    v13._countAndFlagsBits = 0x5D2E2E2E5B203ALL;
    v13._object = (void *)0xE700000000000000;
    String.append(_:)(v13);
    result = swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(v28 + 16);
    v14 = *(_QWORD *)(v28 + 24);
    if (v15 >= v14 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
    *(_QWORD *)(v28 + 16) = v15 + 1;
    v16 = v28 + 16 * v15;
    *(_QWORD *)(v16 + 32) = v26;
    *(_QWORD *)(v16 + 40) = v27;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v17 = *(_QWORD *)(v24 + 8 * v11);
    if ((v17 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v23;
    if (*(_DWORD *)(a1 + 36) != v23)
      goto LABEL_27;
    v18 = v17 & (-2 << (v6 & 0x3F));
    if (v18)
    {
      v9 = __clz(__rbit64(v18)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v22;
    }
    else
    {
      v19 = v11 + 1;
      v20 = (unint64_t)(v9 + 63) >> 6;
      v10 = v22;
      if (v11 + 1 < v20)
      {
        v21 = *(_QWORD *)(v24 + 8 * v19);
        if (v21)
        {
LABEL_20:
          v9 = __clz(__rbit64(v21)) + (v19 << 6);
        }
        else
        {
          while (v20 - 2 != v11)
          {
            v21 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v21)
            {
              v19 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v25 + 1;
    v6 = v9;
    if (v25 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo12LNViewActionCG_SSs5NeverOTg5059_s14SiriKitRuntime27LinkExpansionContextBuilderC26fetchViewe82Identifiers33_96F732C182F07CCE7D79D4AD573D548BLL3forShySSGSS_tYaFAGyYaKXEfU_SSSo06D56J0Ccfu_33_3bab3ebd54a35cd855c23bddc349bd1fAISSTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v3 = MEMORY[0x1E0DEE9D8];
    if (!v2)
      return v3;
    v15 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v15;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x1B5E43B94](v5, a1);
      else
        v6 = *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      v8 = objc_msgSend(v6, sel_actionIdentifier);
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;

      v13 = *(_QWORD *)(v15 + 16);
      v12 = *(_QWORD *)(v15 + 24);
      if (v13 >= v12 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      ++v5;
      *(_QWORD *)(v15 + 16) = v13 + 1;
      v14 = v15 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = v11;
      if (v2 == v5)
        return v3;
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall LinkExpansionContextBuilder.newSessionStarted()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = one-time initialization token for shared;
  swift_retain();
  if (v5 != -1)
    swift_once();
  swift_beginAccess();
  v6 = static MessageBusActor.shared;
  v7 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v6;
  v8[3] = v7;
  v8[4] = v0;
  swift_retain();
  *(_QWORD *)(v0 + 104) = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime20LinkExpansionContextV07SessionI0C_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in LinkExpansionContextBuilder.newSessionStarted(), (uint64_t)v8);
  swift_release();
}

Swift::Void __swiftcall LinkExpansionContextBuilder.newTurnStarted()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = v0;
  if (one-time initialization token for kLogger != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)kLogger);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B4BE6000, v3, v4, "[LinkExpansionContext] New turn started", v5, 2u);
    MEMORY[0x1B5E44758](v5, -1, -1);
  }

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = 0;
  swift_release();
}

uint64_t LinkExpansionContextBuilder.build(rrCandidates:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[9] = a1;
  v2[10] = v1;
  v3 = type metadata accessor for OSSignpostID();
  v2[11] = v3;
  v2[12] = *(_QWORD *)(v3 - 8);
  v2[13] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v2[14] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t LinkExpansionContextBuilder.build(rrCandidates:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (one-time initialization token for executor != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 80);
  v2 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v3 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v0 + 120) = v3;
  if (v3)
  {
    swift_retain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v4;
    type metadata accessor for LinkExpansionContext.SessionContext();
    *v4 = v0;
    v4[1] = LinkExpansionContextBuilder.build(rrCandidates:);
    return Task<>.value.getter();
  }
  else
  {
    swift_release();
    if (one-time initialization token for kLogger != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)kLogger);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1B4BE6000, v7, v8, "[LinkExpansionContext] Trying to build LinkExpansionContext before newSessionStarted was called! Returning empty context.", v9, 2u);
      MEMORY[0x1B5E44758](v9, -1, -1);
    }

    if (one-time initialization token for emptyContext != -1)
      swift_once();
    v11 = static LinkExpansionContext.emptyContext;
    v10 = unk_1EF0F3470;
    v13 = *(_QWORD *)(v0 + 96);
    v12 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 88);
    swift_retain();
    swift_retain();
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
  }
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 136) = *(_QWORD *)(v0 + 64);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_retain();
    swift_release();
    v3 = *(_QWORD *)(v0 + 136);
    v5 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 104);
    v6 = *(_QWORD *)(v0 + 88);
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v3, v2);
  }
  else
  {
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v8;
    *v8 = v0;
    v8[1] = LinkExpansionContextBuilder.build(rrCandidates:);
    return LinkExpansionContextBuilder.collectTurnContext(rrCandidates:)(*(_QWORD *)(v0 + 72));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 80);
  swift_release();
  *(_QWORD *)(v2 + 16) = v1;
  v3 = *(_QWORD *)(v0 + 152);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 88);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v3);
}

uint64_t *LinkExpansionContext.emptyContext.unsafeMutableAddressor()
{
  if (one-time initialization token for emptyContext != -1)
    swift_once();
  return &static LinkExpansionContext.emptyContext;
}

uint64_t RRCandidate.isOnScreen.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  int v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(void);
  uint64_t v58;
  char *v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t result;
  uint64_t v70;
  char v71;
  char *v72;
  char v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  void (*v97)(char *, char *, uint64_t);
  char *v98;
  char *v99;
  unint64_t v100;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v85 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for RRMetadata();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v85 - v8;
  v94 = type metadata accessor for RRDataSourceMetadataValue();
  v10 = *(_QWORD *)(v94 - 8);
  v11 = MEMORY[0x1E0C80A78](v94);
  v86 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v87 = (char *)&v85 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v99 = (char *)&v85 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v92 = (char *)&v85 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v91 = (char *)&v85 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v88 = (char *)&v85 - v22;
  MEMORY[0x1E0C80A78](v21);
  v89 = (char *)&v85 - v23;
  v24 = type metadata accessor for RREntity();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v85 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  RRCandidate.entity.getter();
  v28 = RREntity.metadata.getter();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  v29 = *(_QWORD *)(v28 + 16);
  v93 = v10;
  if (v29)
  {
    v30 = v28;
    v31 = v28 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v32 = *(char **)(v4 + 72);
    v97 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v98 = v32;
    v96 = *MEMORY[0x1E0DA3D48];
    v85 = v30;
    swift_bridgeObjectRetain();
    v100 = MEMORY[0x1E0DEE9D8];
    v33 = v94;
    v90 = v9;
    do
    {
      v34 = v97;
      v97(v9, (char *)v31, v3);
      v34(v7, v9, v3);
      v35 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v7, v3);
      if (v35 == v96)
      {
        (*(void (**)(char *, uint64_t))(v4 + 96))(v7, v3);
        v36 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
        v95 = v29;
        v37 = v9;
        v38 = v3;
        v39 = v4;
        v40 = v10;
        v41 = v7;
        v42 = v92;
        v36(v92, v41, v33);
        v43 = v42;
        v7 = v41;
        v10 = v40;
        v4 = v39;
        v3 = v38;
        v9 = v37;
        v29 = v95;
        v36(v2, v43, v33);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v2, 0, 1, v33);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
      }
      else
      {
        v44 = *(void (**)(char *, uint64_t))(v4 + 8);
        v44(v7, v3);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v2, 1, 1, v33);
        v44(v9, v3);
      }
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v2, 1, v33) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
      }
      else
      {
        v45 = v4;
        v46 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
        v47 = v91;
        v46(v91, v2, v33);
        v46(v99, v47, v33);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v48 = v100;
        else
          v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v100 + 16) + 1, 1, v100);
        v50 = *(_QWORD *)(v48 + 16);
        v49 = *(_QWORD *)(v48 + 24);
        if (v50 >= v49 >> 1)
          v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1, v48);
        *(_QWORD *)(v48 + 16) = v50 + 1;
        v51 = v93;
        v33 = v94;
        v52 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
        v100 = v48;
        v46((char *)(v48 + v52 + *(_QWORD *)(v93 + 72) * v50), v99, v94);
        v10 = v51;
        v4 = v45;
        v9 = v90;
      }
      v31 += (unint64_t)v98;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease_n();
    v53 = v100;
  }
  else
  {
    swift_bridgeObjectRelease();
    v53 = MEMORY[0x1E0DEE9D8];
    v33 = v94;
  }
  v54 = *(char **)(v10 + 104);
  v55 = v89;
  ((void (*)(char *, _QWORD, uint64_t))v54)(v89, *MEMORY[0x1E0DA3DC0], v33);
  v56 = *(_QWORD *)(v53 + 16);
  v100 = v53;
  if (!v56)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v55, v33);
LABEL_29:
    v74 = 0;
LABEL_45:
    swift_bridgeObjectRelease();
    return v74;
  }
  v97 = (void (*)(char *, char *, uint64_t))((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  v57 = *(void (**)(void))(v10 + 16);
  v98 = (char *)v97 + v53;
  v99 = v54;
  v58 = v10;
  v59 = v88;
  v60 = v53;
  v57();
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3DC8], MEMORY[0x1E0DA3DD8]);
  swift_bridgeObjectRetain();
  v61 = dispatch thunk of static Equatable.== infix(_:_:)();
  v62 = v58;
  v63 = *(void (**)(char *, uint64_t))(v58 + 8);
  v63(v59, v33);
  if ((v61 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_31:
    v75 = v86;
    v63(v89, v33);
    v76 = v87;
    ((void (*)(char *, _QWORD, uint64_t))v99)(v87, *MEMORY[0x1E0DA3DB8], v33);
    v77 = *(_QWORD *)(v60 + 16);
    if (v77)
    {
      ((void (*)(char *, char *, uint64_t))v57)(v75, v98, v33);
      swift_bridgeObjectRetain();
      v78 = dispatch thunk of static Equatable.== infix(_:_:)();
      v63(v75, v33);
      if ((v78 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v74 = 0;
LABEL_44:
        v63(v76, v33);
        goto LABEL_45;
      }
      if (v77 != 1)
      {
        v79 = v94;
        v99 = *(char **)(v93 + 72);
        v80 = (char *)v97 + (_QWORD)v99 + v100;
        v81 = 1;
        v82 = v86;
        while (1)
        {
          result = ((uint64_t (*)(char *, char *, uint64_t))v57)(v82, v80, v79);
          v83 = v81 + 1;
          if (__OFADD__(v81, 1))
            goto LABEL_47;
          v84 = dispatch thunk of static Equatable.== infix(_:_:)();
          v63(v82, v79);
          if ((v84 & 1) != 0)
            break;
          ++v81;
          v80 = &v99[(_QWORD)v80];
          if (v83 == v77)
          {
            swift_bridgeObjectRelease();
            v74 = 1;
LABEL_43:
            v33 = v94;
            v76 = v87;
            goto LABEL_44;
          }
        }
        swift_bridgeObjectRelease();
        v74 = 0;
        goto LABEL_43;
      }
      swift_bridgeObjectRelease();
    }
    v74 = 1;
    goto LABEL_44;
  }
  if (v56 == 1)
  {
    swift_bridgeObjectRelease();
LABEL_28:
    v63(v89, v33);
    goto LABEL_29;
  }
  v64 = *(_QWORD *)(v62 + 72);
  v65 = (char *)v97 + v100 + v64;
  v66 = 1;
  v67 = v94;
  while (1)
  {
    v68 = v88;
    result = ((uint64_t (*)(char *, char *, uint64_t))v57)(v88, v65, v67);
    v70 = v66 + 1;
    if (__OFADD__(v66, 1))
      break;
    v71 = dispatch thunk of static Equatable.== infix(_:_:)();
    v72 = v68;
    v73 = v71;
    v63(v72, v67);
    if ((v73 & 1) != 0)
    {
      v60 = v100;
      swift_bridgeObjectRelease();
      v33 = v94;
      goto LABEL_31;
    }
    ++v66;
    v65 += v64;
    if (v70 == v56)
    {
      swift_bridgeObjectRelease();
      v33 = v94;
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t RRCandidate.isCommonApp.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  char v8;
  uint64_t v10;

  v0 = type metadata accessor for RREntity();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  RRCandidate.entity.getter();
  RREntity.usoEntity.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v4 = UsoTask.verbString.getter();
  v6 = v5;
  swift_release();
  if (one-time initialization token for kUsoCommonAppEntityName != -1)
    swift_once();
  if (v4 == kUsoCommonAppEntityName._countAndFlagsBits && v6 == kUsoCommonAppEntityName._object)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

_QWORD *LinkExpansionContextBuilder.__allocating_init(metadataProvider:viewActionsProvider:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v4 = (_QWORD *)swift_allocObject();
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = __swift_mutable_project_boxed_opaque_existential_1(a2, v11);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  v17 = specialized LinkExpansionContextBuilder.init(metadataProvider:viewActionsProvider:)((uint64_t)v9, (uint64_t)v15, v4, v5, v11, v6, v12);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v17;
}

uint64_t LinkActionMetadata.logDescription.getter()
{
  __int128 *v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  char v11;
  _BYTE v12[16];
  uint64_t v13;
  void *v14;

  v10 = v0[1];
  v11 = *((_BYTE *)v0 + 32);
  outlined init with take of String?((uint64_t)&v10, (uint64_t)v12);
  outlined init with take of String?((uint64_t)v12, (uint64_t)&v13);
  v1 = v14;
  if (v14)
  {
    v2 = v13;
    v9 = *v0;
    v8 = v9;
    outlined retain of String((uint64_t)&v9);
    v3._countAndFlagsBits = 60;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
    v4._countAndFlagsBits = v2;
    v4._object = v1;
    String.append(_:)(v4);
    v5._countAndFlagsBits = 62;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    return v8;
  }
  else
  {
    v6 = *(_QWORD *)v0;
    swift_bridgeObjectRetain();
  }
  return v6;
}

uint64_t one-time initialization function for kUsoCommonAppEntityName()
{
  uint64_t result;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  result = MEMORY[0x1B5E400F0](0xD000000000000012, 0x80000001B4EFE140);
  if (v3)
  {
    v4 = v1;
    v5 = v2;
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v5 = (void *)0xEA00000000007070;
    v4 = 0x415F6E6F6D6D6F63;
  }
  kUsoCommonAppEntityName._countAndFlagsBits = v4;
  kUsoCommonAppEntityName._object = v5;
  return result;
}

uint64_t LinkActionMetadata.linkActionId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LinkActionMetadata.entityTypeMetadata.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LinkActionMetadata.defaultAction.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t LinkActionMetadata.onScreen.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t LinkActionMetadata.onScreen.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 34) = result;
  return result;
}

uint64_t (*LinkActionMetadata.onScreen.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

void __swiftcall LinkActionMetadata.init(linkActionId:entityTypeMetadata:defaultAction:onScreen:)(SiriKitRuntime::LinkActionMetadata *__return_ptr retstr, Swift::String linkActionId, SiriKitRuntime::EntityTypeMetadata entityTypeMetadata, Swift::Bool defaultAction, Swift::Bool onScreen)
{
  retstr->linkActionId = linkActionId;
  retstr->entityTypeMetadata = entityTypeMetadata;
  retstr->defaultAction = defaultAction;
  retstr->onScreen = onScreen;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LinkActionMetadata(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_DWORD *)((char *)v6 + 15) = *(_DWORD *)((char *)a1 + 31);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_DWORD *)((char *)v8 + 15) = *(_DWORD *)((char *)a2 + 31);
  return specialized static LinkActionMetadata.== infix(_:_:)((uint64_t)&v5, (uint64_t)&v7) & 1;
}

uint64_t *LinkExpansionContext.SessionContext.emptySessionContext.unsafeMutableAddressor()
{
  if (one-time initialization token for emptySessionContext != -1)
    swift_once();
  return &static LinkExpansionContext.SessionContext.emptySessionContext;
}

uint64_t *LinkExpansionContext.TurnContext.emptyTurnContext.unsafeMutableAddressor()
{
  if (one-time initialization token for emptyTurnContext != -1)
    swift_once();
  return &static LinkExpansionContext.TurnContext.emptyTurnContext;
}

uint64_t static LinkExpansionContext.emptyContext.getter()
{
  uint64_t v0;

  if (one-time initialization token for emptyContext != -1)
    swift_once();
  v0 = static LinkExpansionContext.emptyContext;
  swift_retain();
  swift_retain();
  return v0;
}

uint64_t LinkExpansionContext.SessionContext.__allocating_init(linkActionMetadata:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t LinkExpansionContext.SessionContext.init(linkActionMetadata:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t one-time initialization function for emptySessionContext()
{
  uint64_t result;

  type metadata accessor for LinkExpansionContext.SessionContext();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x1E0DEE9E0];
  static LinkExpansionContext.SessionContext.emptySessionContext = result;
  return result;
}

uint64_t static LinkExpansionContext.SessionContext.emptySessionContext.getter()
{
  return default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(&one-time initialization token for emptySessionContext);
}

unint64_t LinkExpansionContext.SessionContext.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;

  v0 = swift_bridgeObjectRetain();
  v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD4KeysVySSSDySo16LNSystemProtocolCSay14SiriKitRuntime18LinkActionMetadataVGG_G_SSs5NeverOTg504_s14gh9Runtime20J59ExpansionContextV07SessionF0C16debugDescriptionSSvgS2SXEfU_Tf1cn_n(v0);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = MEMORY[0x1B5E434D4](v1, MEMORY[0x1E0DEA968]);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD000000000000027;
}

uint64_t LinkExpansionContext.SessionContext.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LinkExpansionContext.SessionContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkExpansionContext.SessionContext()
{
  return LinkExpansionContext.SessionContext.debugDescription.getter();
}

uint64_t LinkExpansionContext.TurnContext.onScreenActions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinkExpansionContext.TurnContext.onScreenAppBundleIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinkExpansionContext.TurnContext.onScreenEntityTypes.getter()
{
  return swift_bridgeObjectRetain();
}

_QWORD *LinkExpansionContext.TurnContext.__allocating_init(onScreenActions:onScreenAppBundleIds:onScreenEntityTypes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

_QWORD *LinkExpansionContext.TurnContext.init(onScreenActions:onScreenAppBundleIds:onScreenEntityTypes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

_QWORD *one-time initialization function for emptyTurnContext()
{
  _QWORD *result;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for LinkExpansionContext.TurnContext();
  result = (_QWORD *)swift_allocObject();
  v1 = MEMORY[0x1E0DEE9E0];
  v2 = MEMORY[0x1E0DEE9E8];
  result[2] = MEMORY[0x1E0DEE9E0];
  result[3] = v2;
  result[4] = v1;
  static LinkExpansionContext.TurnContext.emptyTurnContext = (uint64_t)result;
  return result;
}

uint64_t static LinkExpansionContext.TurnContext.emptyTurnContext.getter()
{
  return default argument 5 of SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(&one-time initialization token for emptyTurnContext);
}

uint64_t LinkExpansionContext.TurnContext.debugDescription.getter()
{
  Swift::String v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;

  _StringGuts.grow(_:)(58);
  v0._countAndFlagsBits = 0xD000000000000022;
  v0._object = (void *)0x80000001B4EFDED0;
  String.append(_:)(v0);
  swift_bridgeObjectRetain();
  v1 = Set.description.getter();
  v3 = v2;
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000001B4EFDF00;
  v5._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
  v6 = Dictionary.description.getter();
  v8 = v7;
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t LinkExpansionContext.TurnContext.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LinkExpansionContext.TurnContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkExpansionContext.TurnContext()
{
  return LinkExpansionContext.TurnContext.debugDescription.getter();
}

uint64_t LinkExpansionContext.LinkActionMetadataView.next()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v23;

  v1 = v0;
  v2 = 0;
  v3 = 0;
  v4 = v0[2];
  v5 = v0[3];
  if (v5 >= *(_QWORD *)(v4 + 16))
    return v2;
  if (v5 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  v6 = v4 + 16 * v5;
  v2 = *(_QWORD *)(v6 + 32);
  v3 = *(_QWORD *)(v6 + 40);
  v7 = *(_QWORD *)(v0[1] + 16);
  v8 = *(_QWORD *)(v7 + 16);
  swift_bridgeObjectRetain();
  if (!v8)
  {
LABEL_9:
    if (one-time initialization token for kLogger == -1)
    {
LABEL_10:
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)kLogger);
      swift_bridgeObjectRetain();
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc();
        v21 = swift_slowAlloc();
        v23 = v21;
        *(_DWORD *)v20 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v3, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B4BE6000, v18, v19, "Could not find action metadata for %s in sessionContext! The sessionContext must have been mutated. Ending iteration of action metadata early.", v20, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v21, -1, -1);
        MEMORY[0x1B5E44758](v20, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return 0;
    }
LABEL_18:
    swift_once();
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v3);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(*v1 + 16);
  v13 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13 && (v14 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v3), (v15 & 1) != 0))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v14);
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = MEMORY[0x1E0DEE9E8];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized _NativeDictionary.mapValues<A>(_:)(v11, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v1[3] = v5 + 1;
  return v2;
}

__n128 protocol witness for Sequence.makeIterator() in conformance LinkExpansionContext.LinkActionMetadataView@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  unint64_t v3;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  v3 = v1[1].n128_u64[1];
  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = v3;
  return result;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance LinkExpansionContext.LinkActionMetadataView()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance LinkExpansionContext.LinkActionMetadataView()
{
  uint64_t v0;

  v0 = specialized _copySequenceToContiguousArray<A>(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance LinkExpansionContext.LinkActionMetadataView(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2], v3[3]);
}

_QWORD *specialized Sequence._copyContents(initializing:)(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v7 = result;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  if (!a2)
  {
    v8 = 0;
    goto LABEL_11;
  }
  v8 = a3;
  if (!a3)
  {
LABEL_11:
    *v7 = a4;
    v7[1] = a5;
    v7[2] = a6;
    v7[3] = a7;
    return (_QWORD *)v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    v9 = a2;
    v10 = LinkExpansionContext.LinkActionMetadataView.next()();
    v13 = 0;
    if (v11)
    {
      while (1)
      {
        *v9 = v10;
        v9[1] = v11;
        v9[2] = v12;
        if (v8 - 1 == v13)
          break;
        v10 = LinkExpansionContext.LinkActionMetadataView.next()();
        v9 += 3;
        ++v13;
        if (!v11)
          goto LABEL_7;
      }
      a4 = v14;
      a5 = v15;
    }
    else
    {
LABEL_7:
      a4 = v14;
      a5 = v15;
      v8 = v13;
    }
    a6 = v16;
    a7 = v17;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance LinkExpansionContext.LinkActionMetadataView()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t protocol witness for IteratorProtocol.next() in conformance LinkExpansionContext.LinkActionMetadataView@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = LinkExpansionContext.LinkActionMetadataView.next()();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t LinkExpansionContext.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(55);
  v0._countAndFlagsBits = 0xD000000000000021;
  v0._object = (void *)0x80000001B4EFDF20;
  String.append(_:)(v0);
  type metadata accessor for LinkExpansionContext.TurnContext();
  swift_retain();
  v1._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x80000001B4EFDF50;
  v2._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v2);
  type metadata accessor for LinkExpansionContext.SessionContext();
  swift_retain();
  v3._countAndFlagsBits = String.init<A>(reflecting:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t LinkExpansionContext.salientAppBundleIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinkExpansionContext.onScreenEntityTypes.getter()
{
  return swift_bridgeObjectRetain();
}

_QWORD *LinkExpansionContext.actionMetadata.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;

  swift_retain();
  swift_retain();
  v4 = swift_bridgeObjectRetain();
  v5 = specialized _copyCollectionToContiguousArray<A>(_:)(v4);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SequenceBox<LinkExpansionContext.LinkActionMetadataView>);
  result = (_QWORD *)swift_allocObject();
  result[2] = a2;
  result[3] = a1;
  result[4] = v5;
  result[5] = 0;
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkExpansionContext()
{
  return LinkExpansionContext.debugDescription.getter();
}

uint64_t protocol witness for LinkContextProviding.salientAppBundleIds.getter in conformance LinkExpansionContext()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for LinkContextProviding.onScreenEntityTypes.getter in conformance LinkExpansionContext()
{
  return swift_bridgeObjectRetain();
}

_QWORD *protocol witness for LinkContextProviding.actionMetadata.getter in conformance LinkExpansionContext()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  v1 = *v0;
  v2 = v0[1];
  swift_retain();
  swift_retain();
  v3 = swift_bridgeObjectRetain();
  v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SequenceBox<LinkExpansionContext.LinkActionMetadataView>);
  result = (_QWORD *)swift_allocObject();
  result[2] = v2;
  result[3] = v1;
  result[4] = v4;
  result[5] = 0;
  return result;
}

uint64_t one-time initialization function for appsDenyList()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for appsDenyList);
  swift_arrayDestroy();
  v1 = specialized Set.union<A>(_:)((uint64_t)&outlined read-only object #1 of one-time initialization function for appsDenyList, v0);
  result = swift_arrayDestroy();
  static LinkExpansionContextBuilder.appsDenyList = v1;
  return result;
}

uint64_t *LinkExpansionContextBuilder.appsDenyList.unsafeMutableAddressor()
{
  if (one-time initialization token for appsDenyList != -1)
    swift_once();
  return &static LinkExpansionContextBuilder.appsDenyList;
}

uint64_t static LinkExpansionContextBuilder.appsDenyList.getter()
{
  if (one-time initialization token for appsDenyList != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t LinkExpansionContextBuilder.linkExpansionTurnContext.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t LinkExpansionContextBuilder.linkExpansionTurnContext.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*LinkExpansionContextBuilder.linkExpansionTurnContext.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t LinkExpansionContextBuilder.metadataProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 24, a1);
}

uint64_t LinkExpansionContextBuilder.viewActionsProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 64, a1);
}

_QWORD *LinkExpansionContextBuilder.init(metadataProvider:viewActionsProvider:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v3 = v2;
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = __swift_mutable_project_boxed_opaque_existential_1(a1, v6);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = __swift_mutable_project_boxed_opaque_existential_1(a2, v12);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v17 + 16))(v16);
  v18 = specialized LinkExpansionContextBuilder.init(metadataProvider:viewActionsProvider:)((uint64_t)v10, (uint64_t)v16, v3, v6, v12, v7, v13);
  __swift_destroy_boxed_opaque_existential_1(a2);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v18;
}

uint64_t closure #1 in LinkExpansionContextBuilder.newSessionStarted()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[7] = a1;
  v4[8] = a4;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[9] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in LinkExpansionContextBuilder.newSessionStarted()()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t);

  if (one-time initialization token for kLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[10] = __swift_project_value_buffer(v1, (uint64_t)kLogger);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[LinkExpansionContext] Collecting SessionContext", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = (_QWORD *)v0[8];

  v6 = v5 + 3;
  v7 = v5[6];
  v8 = v5[7];
  __swift_project_boxed_opaque_existential_1(v6, v7);
  v11 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v8 + 8) + *(_QWORD *)(v8 + 8));
  v9 = (_QWORD *)swift_task_alloc();
  v0[11] = v9;
  *v9 = v0;
  v9[1] = closure #1 in LinkExpansionContextBuilder.newSessionStarted();
  return v11(v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release();
  v2 = specialized LinkExpansionContextBuilder.extractActionMetadata(allLinkActionsMetadata:)(v1);
  swift_bridgeObjectRelease();
  type metadata accessor for LinkExpansionContext.SessionContext();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  swift_retain_n();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    *(_DWORD *)v6 = 136315138;
    v11 = v7;
    *(_QWORD *)(v0 + 40) = v3;
    swift_retain();
    v8 = String.init<A>(reflecting:)();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v4, v5, "[LinkExpansionContext] SessionContext: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v7, -1, -1);
    MEMORY[0x1B5E44758](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  **(_QWORD **)(v0 + 56) = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in LinkExpansionContextBuilder.newSessionStarted()(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1B4E13330()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LinkExpansionContextBuilder.newSessionStarted()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in LinkExpansionContextBuilder.newSessionStarted()(a1, v4, v5, v6);
}

uint64_t LinkExpansionContextBuilder.collectTurnContext(rrCandidates:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[7] = a1;
  v2[8] = v1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v2[9] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t LinkExpansionContextBuilder.collectTurnContext(rrCandidates:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (one-time initialization token for kLogger != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[10] = __swift_project_value_buffer(v1, (uint64_t)kLogger);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B4BE6000, v2, v3, "[LinkExpansionContext] Collecting TurnContext", v4, 2u);
    MEMORY[0x1B5E44758](v4, -1, -1);
  }
  v5 = v0[7];

  v6 = specialized LinkExpansionContextBuilder.extractOnScreenBundleIDsFromRRCandidates(_:)(v5);
  v0[11] = v6;
  v7 = (_QWORD *)swift_task_alloc();
  v0[12] = v7;
  *v7 = v0;
  v7[1] = LinkExpansionContextBuilder.collectTurnContext(rrCandidates:);
  return LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v1 = v0;
  v3 = v0 + 56;
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v3 + 32);
  swift_release();
  v6 = specialized LinkExpansionContextBuilder.extractOnScreenEntityTypesFromRRCandidates(_:)(v2);
  type metadata accessor for LinkExpansionContext.TurnContext();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v4;
  v7[3] = v5;
  v7[4] = v6;
  swift_retain_n();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    *(_DWORD *)v10 = 136315138;
    v15 = v11;
    *(_QWORD *)(v1 + 40) = v7;
    swift_retain();
    v12 = String.init<A>(reflecting:)();
    *(_QWORD *)(v1 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B4BE6000, v8, v9, "[LinkExpansionContext] TurnContext: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v11, -1, -1);
    MEMORY[0x1B5E44758](v10, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  return (*(uint64_t (**)(_QWORD *))(v1 + 8))(v7);
}

uint64_t LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[6] = a1;
  v2[7] = v1;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v2[8] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 56);
  v2 = v1[6];
  v3 = v1[7];
  __swift_project_boxed_opaque_existential_1(v1 + 3, v2);
  v6 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(v3 + 24) + *(_QWORD *)(v3 + 24));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v4;
  *v4 = v0;
  v4[1] = LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
  return v6(v2, v3);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[6];
  v2 = v0[7];
  v3 = specialized Set.init<A>(_:)(v0[10]);
  swift_bridgeObjectRelease();
  v4 = specialized _NativeSet.intersection(_:)(v1, v3);
  v0[11] = v4;
  v0[5] = MEMORY[0x1E0DEE9E0];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Set<String>));
  v0[12] = static MessageBusActor.shared;
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
  v5 = (_QWORD *)swift_task_alloc();
  v0[13] = v5;
  v5[2] = v4;
  v5[3] = v2;
  v5[4] = v0 + 5;
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  v0[14] = v6;
  *v6 = v0;
  v6[1] = LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
  return withTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  swift_task_dealloc();
  swift_release();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 40));
}

uint64_t RRCandidate.isAppEntityType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  void (*v7)(char *, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v0 = type metadata accessor for RREntity();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v23 - v5;
  RRCandidate.entity.getter();
  RREntity.usoEntity.getter();
  v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v6, v0);
  v8 = UsoTask.verbString.getter();
  v10 = v9;
  swift_release();
  RRCandidate.entity.getter();
  RREntity.usoEntity.getter();
  v7(v4, v0);
  v11 = UsoEntity.attributes.getter();
  swift_release();
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_10;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
  if ((v13 & 1) == 0)
    goto LABEL_10;
  v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  if (!(v14 >> 62))
  {
    if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  v22 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v22)
    goto LABEL_10;
LABEL_5:
  if ((v14 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v14);
LABEL_8:
    swift_bridgeObjectRelease();
    v16 = dispatch thunk of UsoValue.getAsEntity()();
    swift_release();
    if (v16)
    {
      v17 = UsoTask.verbString.getter();
      v19 = v18;
      swift_release();
LABEL_12:
      if (v8 == 0xD000000000000010 && v10 == 0x80000001B4EFDF70)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_21;
        }
      }
      if (v19)
      {
        if (v17 == 0xD000000000000014 && v19 == 0x80000001B4EFDF90)
        {
          swift_bridgeObjectRelease();
          v21 = 1;
        }
        else
        {
          v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
        }
        return v21 & 1;
      }
LABEL_21:
      v21 = 0;
      return v21 & 1;
    }
LABEL_11:
    v17 = 0;
    v19 = 0;
    goto LABEL_12;
  }
  if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[18] = a4;
  v5[19] = a5;
  v5[16] = a2;
  v5[17] = a3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<(String, Set<String>)>.Iterator);
  v5[22] = v6;
  v5[23] = *(_QWORD *)(v6 - 8);
  v5[24] = swift_task_alloc();
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v5[25] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v1 + 56);
  v31 = v1 + 56;
  v33 = v1;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & v2;
  v32 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v34 = v7;
      v35 = (v5 - 1) & v5;
      v9 = __clz(__rbit64(v5)) | (v7 << 6);
      goto LABEL_21;
    }
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v10 >= v32)
      goto LABEL_29;
    v11 = *(_QWORD *)(v31 + 8 * v10);
    v12 = v7 + 1;
    if (!v11)
    {
      v12 = v7 + 2;
      if (v7 + 2 >= v32)
        goto LABEL_29;
      v11 = *(_QWORD *)(v31 + 8 * v12);
      if (!v11)
      {
        v12 = v7 + 3;
        if (v7 + 3 >= v32)
          goto LABEL_29;
        v11 = *(_QWORD *)(v31 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_20:
    v34 = v12;
    v35 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_21:
    v15 = *(_QWORD *)(v0 + 160);
    v14 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 144);
    v17 = (uint64_t *)(*(_QWORD *)(v33 + 48) + 16 * v9);
    v18 = *v17;
    v19 = v17[1];
    v20 = type metadata accessor for TaskPriority();
    v21 = *(_QWORD *)(v20 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v14, 1, 1, v20);
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = 0;
    v22[3] = 0;
    v22[4] = v18;
    v22[5] = v19;
    v22[6] = v16;
    outlined init with copy of TaskPriority?(v14, v15);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v15, 1, v20);
    swift_bridgeObjectRetain();
    swift_retain();
    v23 = *(_QWORD *)(v0 + 160);
    if ((_DWORD)v15 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(_QWORD *)(v0 + 160), (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v20);
    }
    v7 = v34;
    if (v22[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v24 = dispatch thunk of Actor.unownedExecutor.getter();
      v26 = v25;
      swift_unknownObjectRelease();
    }
    else
    {
      v24 = 0;
      v26 = 0;
    }
    v27 = **(_QWORD **)(v0 + 128);
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
    *(_QWORD *)(v28 + 24) = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Set<String>));
    v29 = v26 | v24;
    if (v26 | v24)
    {
      v29 = v0 + 16;
      *(_QWORD *)(v0 + 16) = 0;
      *(_QWORD *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = v24;
      *(_QWORD *)(v0 + 40) = v26;
    }
    v8 = *(_QWORD *)(v0 + 168);
    *(_QWORD *)(v0 + 72) = 1;
    *(_QWORD *)(v0 + 80) = v29;
    *(_QWORD *)(v0 + 88) = v27;
    swift_task_create();
    swift_release();
    result = outlined destroy of ReferenceResolutionClientProtocol?(v8, (uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
    v5 = v35;
  }
  v13 = v7 + 4;
  if (v7 + 4 >= v32)
  {
LABEL_29:
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Set<String>));
    TaskGroup.makeAsyncIterator()();
    *(_QWORD *)(v0 + 208) = static MessageBusActor.shared;
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
    swift_retain();
    v30 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v30;
    *v30 = v0;
    v30[1] = closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
    return TaskGroup.Iterator.next(isolation:)();
  }
  v11 = *(_QWORD *)(v31 + 8 * v13);
  if (v11)
  {
    v12 = v7 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v32)
      goto LABEL_29;
    v11 = *(_QWORD *)(v31 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_20;
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t result;
  char v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  if (!v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(uint64_t **)(v0 + 152);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = *v4;
  *(_QWORD *)(v0 + 120) = *v4;
  *v4 = 0x8000000000000000;
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v1);
  v9 = *(_QWORD *)(v6 + 16);
  v10 = (v7 & 1) == 0;
  result = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
  }
  else
  {
    v12 = v7;
    if (*(_QWORD *)(v6 + 24) >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        result = (uint64_t)specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v2, v1);
      if ((v12 & 1) != (v13 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      v8 = result;
    }
    v14 = *(_QWORD **)(v0 + 120);
    if ((v12 & 1) != 0)
    {
      v15 = v14[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v15 + 8 * v8) = v3;
LABEL_14:
      **(_QWORD **)(v0 + 152) = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 208) = static MessageBusActor.shared;
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (uint64_t (*)(uint64_t))type metadata accessor for MessageBusActor, (uint64_t)&protocol conformance descriptor for MessageBusActor);
      swift_retain();
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 216) = v20;
      *v20 = v0;
      v20[1] = closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
      return TaskGroup.Iterator.next(isolation:)();
    }
    v14[(v8 >> 6) + 8] |= 1 << v8;
    v16 = (uint64_t *)(v14[6] + 16 * v8);
    *v16 = v2;
    v16[1] = v1;
    *(_QWORD *)(v14[7] + 8 * v8) = v3;
    v17 = v14[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (!v18)
    {
      v14[2] = v19;
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
  }
  __break(1u);
  return result;
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, _QWORD, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[9];
  v2 = v1[3];
  v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  v6 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))(**(int **)(v3 + 8) + *(_QWORD *)(v3 + 8));
  v4 = (_QWORD *)swift_task_alloc();
  v0[13] = v4;
  *v4 = v0;
  v4[1] = closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
  return v6(v0[10], v0[11], v2, v3);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20[2];

  v1 = *(_QWORD *)(v0 + 112);
  swift_release();
  v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo12LNViewActionCG_SSs5NeverOTg5059_s14SiriKitRuntime27LinkExpansionContextBuilderC26fetchViewe82Identifiers33_96F732C182F07CCE7D79D4AD573D548BLL3forShySSGSS_tYaFAGyYaKXEfU_SSSo06D56J0Ccfu_33_3bab3ebd54a35cd855c23bddc349bd1fAISSTf3nnnpk_nTf1cn_n(v1);
  v3 = specialized Set.init<A>(_:)(v2);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v3 + 16);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v4 == v5)
      goto LABEL_3;
  }
  else if (v4 == *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if (one-time initialization token for kLogger != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)kLogger);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 88);
  if (v9)
  {
    v11 = *(_QWORD *)(v0 + 80);
    v12 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v20[0] = v19;
    *(_DWORD *)v12 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2080;
    v13 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for LNViewAction);
    v14 = swift_bridgeObjectRetain();
    v15 = MEMORY[0x1B5E434D4](v14, v13);
    v17 = v16;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v7, v8, "Multiple viewActions for a given action identifier on screen for '%s'\nDisambiguting to a viewAction instance is not supported, the action will be routed to any instance matching the action identifier.\nViewActions: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v19, -1, -1);
    MEMORY[0x1B5E44758](v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

LABEL_11:
  **(_QWORD **)(v0 + 64) = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a1;
  v6[6] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[7];
  v2 = (_QWORD *)v0[5];
  *v2 = v0[6];
  v2[1] = v1;
  v3 = one-time initialization token for shared;
  swift_bridgeObjectRetain();
  if (v3 != -1)
    swift_once();
  swift_beginAccess();
  v0[9] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[7];
  v2 = v0[6];
  v3 = v0[8] + 64;
  v4 = (_QWORD *)swift_task_alloc();
  v0[10] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v5 = (_QWORD *)swift_task_alloc();
  v0[11] = v5;
  *v5 = v0;
  v5[1] = closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:);
  return specialized LinkExpansionContextBuilder.loggingExceptions<A>(messagePrefix:_:)(0xD00000000000001CLL, 0x80000001B4EFE160, (int *)&async function pointer to partial apply for closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:));
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  if (!v1)
    v1 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(*(_QWORD *)(v0 + 40) + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 96) = a1;
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[10] = a3;
  v4[11] = a4;
  v4[8] = a1;
  v4[9] = a2;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v4[12] = static MessageBusActor.shared;
  swift_retain();
  return swift_task_switch();
}

uint64_t closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t LinkExpansionContextBuilder.deinit()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_release();
  return v0;
}

uint64_t LinkExpansionContextBuilder.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LinkExpansionContext.SessionContext()
{
  return objc_opt_self();
}

_QWORD *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *result;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t i;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  Swift::Int *v35;
  Swift::Int v36;
  Swift::Int v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  Swift::Int v59;
  uint64_t v60;

  v2 = type metadata accessor for RREntity();
  v57 = *(_QWORD *)(v2 - 8);
  v58 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
  result = (_QWORD *)static _DictionaryStorage.copy(original:)();
  v6 = 0;
  v49 = result;
  v50 = a1;
  v9 = *(_QWORD *)(a1 + 64);
  v8 = a1 + 64;
  v7 = v9;
  v10 = 1 << *(_BYTE *)(v8 - 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v7;
  v46 = v8;
  v47 = (unint64_t)(v10 + 63) >> 6;
  v48 = result + 8;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v12));
  v14 = (v12 - 1) & v12;
  for (i = v13 | (v6 << 6); ; i = __clz(__rbit64(v17)) + (v6 << 6))
  {
    v51 = v14;
    v52 = v6;
    v19 = *(_QWORD *)(v50 + 56);
    v20 = (uint64_t *)(*(_QWORD *)(v50 + 48) + 16 * i);
    v21 = v20[1];
    v54 = *v20;
    v55 = v21;
    v56 = i;
    v22 = *(_QWORD *)(v19 + 8 * i);
    v23 = *(_QWORD *)(v22 + 16);
    v53 = v22;
    if (v23)
    {
      v24 = *(_QWORD *)(type metadata accessor for RRCandidate() - 8);
      v25 = v22 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
      v26 = *(_QWORD *)(v24 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        RRCandidate.entity.getter();
        v29 = RREntity.dataType.getter();
        v31 = v30;
        (*(void (**)(char *, uint64_t))(v57 + 8))(v4, v58);
        if (v31)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
          v33 = v27[2];
          v32 = v27[3];
          if (v33 >= v32 >> 1)
            v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v27);
          v27[2] = v33 + 1;
          v28 = &v27[2 * v33];
          v28[4] = v29;
          v28[5] = v31;
        }
        v25 += v26;
        --v23;
      }
      while (v23);
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    v34 = v27[2];
    v60 = Set.init(minimumCapacity:)();
    if (v34)
    {
      v35 = v27 + 5;
      do
      {
        v36 = *(v35 - 1);
        v37 = *v35;
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v59, v36, v37);
        swift_bridgeObjectRelease();
        v35 += 2;
        --v34;
      }
      while (v34);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v38 = v60;
    v39 = v56;
    result = v49;
    *(_QWORD *)((char *)v48 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v56;
    v40 = (_QWORD *)(result[6] + 16 * v39);
    v41 = v55;
    *v40 = v54;
    v40[1] = v41;
    *(_QWORD *)(result[7] + 8 * v39) = v38;
    v42 = result[2];
    v43 = __OFADD__(v42, 1);
    v44 = v42 + 1;
    if (v43)
    {
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    result[2] = v44;
    v12 = v51;
    v6 = v52;
    if (v51)
      goto LABEL_4;
LABEL_5:
    v16 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_37;
    if (v16 >= v47)
      return result;
    v17 = *(_QWORD *)(v46 + 8 * v16);
    ++v6;
    if (!v17)
    {
      v6 = v16 + 1;
      if (v16 + 1 >= v47)
        return result;
      v17 = *(_QWORD *)(v46 + 8 * v6);
      if (!v17)
      {
        v6 = v16 + 2;
        if (v16 + 2 >= v47)
          return result;
        v17 = *(_QWORD *)(v46 + 8 * v6);
        if (!v17)
          break;
      }
    }
LABEL_18:
    v14 = (v17 - 1) & v17;
  }
  v18 = v16 + 3;
  if (v18 >= v47)
    return result;
  v17 = *(_QWORD *)(v46 + 8 * v18);
  if (v17)
  {
    v6 = v18;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v6 >= v47)
      return result;
    v17 = *(_QWORD *)(v46 + 8 * v6);
    ++v18;
    if (v17)
      goto LABEL_18;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  result = LinkExpansionContext.LinkActionMetadataView.next()();
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v4 = result;
    v5 = v1;
    v6 = v2;
    v7 = 0;
    v8 = (uint64_t *)(MEMORY[0x1E0DEE9D8] + 32);
    while (1)
    {
      if (!v7)
      {
        v9 = v3[3];
        if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_26;
        v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
        if (v10 <= 1)
          v11 = 1;
        else
          v11 = v10;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [LNSystemProtocol : [LinkActionMetadata]])>);
        v12 = (_QWORD *)swift_allocObject();
        v13 = (uint64_t)(_swift_stdlib_malloc_size(v12) - 32) / 24;
        v12[2] = v11;
        v12[3] = 2 * v13;
        v14 = (unint64_t)(v12 + 4);
        v15 = v3[3] >> 1;
        if (v3[2])
        {
          if (v12 != v3 || v14 >= (unint64_t)&v3[3 * v15 + 4])
            memmove(v12 + 4, v3 + 4, 24 * v15);
          v3[2] = 0;
        }
        v8 = (uint64_t *)(v14 + 24 * v15);
        v7 = (v13 & 0x7FFFFFFFFFFFFFFFLL) - v15;
        result = swift_release();
        v3 = v12;
      }
      v17 = __OFSUB__(v7--, 1);
      if (v17)
        break;
      *v8 = v4;
      v8[1] = v5;
      v8[2] = v6;
      v8 += 3;
      result = LinkExpansionContext.LinkActionMetadataView.next()();
      v4 = result;
      v5 = v18;
      v6 = v19;
      if (!v18)
        goto LABEL_21;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v7 = 0;
LABEL_21:
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_release();
  v20 = v3[3];
  if (v20 < 2)
    return (uint64_t)v3;
  v21 = v20 >> 1;
  v17 = __OFSUB__(v21, v7);
  v22 = v21 - v7;
  if (!v17)
  {
    v3[2] = v22;
    return (uint64_t)v3;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    v7 = specialized closure #1 in _NativeSet.intersection(_:)((uint64_t)v10 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v5, a2, v3);
    swift_release();
  }
  else
  {
    v8 = (void *)swift_slowAlloc();
    bzero(v8, v6);
    v7 = specialized closure #1 in _NativeSet.intersection(_:)((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x1B5E44758](v8, -1, -1);
  }
  return v7;
}

uint64_t specialized closure #1 in _NativeSet.intersection(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  _QWORD *v31;
  BOOL v32;
  BOOL v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  uint64_t v53;
  _QWORD *v54;
  BOOL v55;
  unint64_t *v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;

  v4 = a4;
  v5 = a3;
  v57 = (unint64_t *)result;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v6 = 0;
    v58 = a4 + 56;
    v7 = 1 << *(_BYTE *)(a4 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(a4 + 56);
    v59 = (unint64_t)(v7 + 63) >> 6;
    v61 = 0;
    v10 = a3 + 56;
    while (1)
    {
      while (1)
      {
        if (v9)
        {
          v11 = __clz(__rbit64(v9));
          v9 &= v9 - 1;
          v62 = v6;
          v12 = v11 | (v6 << 6);
        }
        else
        {
          v13 = v6 + 1;
          if (__OFADD__(v6, 1))
          {
            __break(1u);
            goto LABEL_81;
          }
          if (v13 >= v59)
            goto LABEL_79;
          v14 = *(_QWORD *)(v58 + 8 * v13);
          v15 = v6 + 1;
          if (!v14)
          {
            v15 = v6 + 2;
            if (v6 + 2 >= v59)
              goto LABEL_79;
            v14 = *(_QWORD *)(v58 + 8 * v15);
            if (!v14)
            {
              v15 = v6 + 3;
              if (v6 + 3 >= v59)
                goto LABEL_79;
              v14 = *(_QWORD *)(v58 + 8 * v15);
              if (!v14)
              {
                v16 = v6 + 4;
                if (v6 + 4 >= v59)
                  goto LABEL_79;
                v14 = *(_QWORD *)(v58 + 8 * v16);
                if (!v14)
                {
                  while (1)
                  {
                    v15 = v16 + 1;
                    if (__OFADD__(v16, 1))
                      goto LABEL_83;
                    if (v15 >= v59)
                      goto LABEL_79;
                    v14 = *(_QWORD *)(v58 + 8 * v15);
                    ++v16;
                    if (v14)
                      goto LABEL_22;
                  }
                }
                v15 = v6 + 4;
              }
            }
          }
LABEL_22:
          v9 = (v14 - 1) & v14;
          v62 = v15;
          v12 = __clz(__rbit64(v14)) + (v15 << 6);
        }
        v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
        v19 = *v17;
        v18 = v17[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v20 = Hasher._finalize()();
        v21 = -1 << *(_BYTE *)(v5 + 32);
        v22 = v20 & ~v21;
        v23 = v22 >> 6;
        v24 = 1 << v22;
        if (((1 << v22) & *(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
          break;
LABEL_6:
        result = swift_bridgeObjectRelease();
        v6 = v62;
        v5 = a3;
        v4 = a4;
      }
      v25 = *(_QWORD *)(a3 + 48);
      v26 = (_QWORD *)(v25 + 16 * v22);
      v27 = *v26 == v19 && v26[1] == v18;
      if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v28 = ~v21;
        for (i = v22 + 1; ; i = v30 + 1)
        {
          v30 = i & v28;
          if (((*(_QWORD *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0)
            break;
          v31 = (_QWORD *)(v25 + 16 * v30);
          v32 = *v31 == v19 && v31[1] == v18;
          if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            result = swift_bridgeObjectRelease();
            v23 = v30 >> 6;
            v24 = 1 << v30;
            goto LABEL_38;
          }
        }
        goto LABEL_6;
      }
      result = swift_bridgeObjectRelease();
LABEL_38:
      v6 = v62;
      v5 = a3;
      v57[v23] |= v24;
      v33 = __OFADD__(v61++, 1);
      v4 = a4;
      if (v33)
        goto LABEL_82;
    }
  }
  v34 = 0;
  v60 = a3 + 56;
  v61 = 0;
  v35 = 1 << *(_BYTE *)(a3 + 32);
  if (v35 < 64)
    v36 = ~(-1 << v35);
  else
    v36 = -1;
  v37 = v36 & *(_QWORD *)(a3 + 56);
  v63 = (unint64_t)(v35 + 63) >> 6;
  v38 = a4 + 56;
  while (1)
  {
    if (v37)
    {
      v39 = __clz(__rbit64(v37));
      v37 &= v37 - 1;
      v40 = v39 | (v34 << 6);
      goto LABEL_63;
    }
    v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    if (v41 >= v63)
      goto LABEL_79;
    v42 = *(_QWORD *)(v60 + 8 * v41);
    ++v34;
    if (!v42)
    {
      v34 = v41 + 1;
      if (v41 + 1 >= v63)
        goto LABEL_79;
      v42 = *(_QWORD *)(v60 + 8 * v34);
      if (!v42)
      {
        v34 = v41 + 2;
        if (v41 + 2 >= v63)
          goto LABEL_79;
        v42 = *(_QWORD *)(v60 + 8 * v34);
        if (!v42)
          break;
      }
    }
LABEL_62:
    v37 = (v42 - 1) & v42;
    v40 = __clz(__rbit64(v42)) + (v34 << 6);
LABEL_63:
    v44 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v40);
    v46 = *v44;
    v45 = v44[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v47 = Hasher._finalize()();
    v48 = -1 << *(_BYTE *)(v4 + 32);
    v49 = v47 & ~v48;
    if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
      goto LABEL_46;
    v50 = *(_QWORD *)(a4 + 48);
    v51 = (_QWORD *)(v50 + 16 * v49);
    v52 = *v51 == v46 && v51[1] == v45;
    if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_76:
      result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      v33 = __OFADD__(v61++, 1);
      v5 = a3;
      v4 = a4;
      if (v33)
      {
        __break(1u);
LABEL_79:
        swift_retain();
        return specialized _NativeSet.extractSubset(using:count:)(v57, a2, v61, v5);
      }
    }
    else
    {
      v53 = ~v48;
      while (1)
      {
        v49 = (v49 + 1) & v53;
        if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
          break;
        v54 = (_QWORD *)(v50 + 16 * v49);
        v55 = *v54 == v46 && v54[1] == v45;
        if (v55 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_76;
      }
LABEL_46:
      result = swift_bridgeObjectRelease();
      v5 = a3;
      v4 = a4;
    }
  }
  v43 = v41 + 3;
  if (v43 >= v63)
    goto LABEL_79;
  v42 = *(_QWORD *)(v60 + 8 * v43);
  if (v42)
  {
    v34 = v43;
    goto LABEL_62;
  }
  while (1)
  {
    v34 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v34 >= v63)
      goto LABEL_79;
    v42 = *(_QWORD *)(v60 + 8 * v34);
    ++v43;
    if (v42)
      goto LABEL_62;
  }
LABEL_84:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x1E0DEE9E8];
LABEL_36:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
  result = static _SetStorage.allocate(capacity:)();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

_QWORD *specialized LinkExpansionContextBuilder.init(metadataProvider:viewActionsProvider:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v14;

  a3[6] = a4;
  a3[7] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3 + 3);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  a3[11] = a5;
  a3[12] = a7;
  v14 = __swift_allocate_boxed_opaque_existential_1(a3 + 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v14, a2, a5);
  a3[2] = 0;
  a3[13] = 0;
  return a3;
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSS_ShySSGt_TG5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 40) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 48) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSS_ShySSGt_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSS_ShySSGt_TG5TQ0_()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 40);
  v5 = *v0;
  swift_task_dealloc();
  v3 = *(_OWORD *)(v1 + 24);
  *(_QWORD *)v2 = *(_QWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 8) = v3;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t specialized static LinkActionMetadata.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  char v12;

  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v6 = 0;
    if ((v5 & 1) == 0)
      return v6 & 1;
  }
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(unsigned __int8 *)(a1 + 32);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(unsigned __int8 *)(a2 + 32);
  if (!v7)
  {
    if (!v9)
      goto LABEL_15;
LABEL_17:
    v6 = 0;
    return v6 & 1;
  }
  if (!v9)
    goto LABEL_17;
  v11 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && v7 == v9;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v12 & 1) != 0))
  {
LABEL_15:
    if (((v8 ^ v10) & 1) == 0 && ((*(unsigned __int8 *)(a1 + 33) ^ *(unsigned __int8 *)(a2 + 33)) & 1) == 0)
    {
      v6 = ((*(_BYTE *)(a1 + 34) & 1) == 0) ^ *(_BYTE *)(a2 + 34);
      return v6 & 1;
    }
    goto LABEL_17;
  }
  return v6 & 1;
}

uint64_t type metadata accessor for LinkExpansionContext.TurnContext()
{
  return objc_opt_self();
}

uint64_t destroy for LinkActionMetadata()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LinkActionMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LinkActionMetadata(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

__n128 __swift_memcpy35_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for LinkActionMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkActionMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 35))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkActionMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 34) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 35) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 35) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkActionMetadata()
{
  return &type metadata for LinkActionMetadata;
}

uint64_t dispatch thunk of LinkContextProviding.salientAppBundleIds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of LinkContextProviding.onScreenEntityTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of LinkContextProviding.actionMetadata.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t destroy for LinkExpansionContext()
{
  swift_release();
  return swift_release();
}

_QWORD *initializeBufferWithCopyOfBuffer for LinkExpansionContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for LinkExpansionContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for LinkExpansionContext(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for LinkExpansionContext()
{
  return &type metadata for LinkExpansionContext;
}

uint64_t method lookup function for LinkExpansionContext.SessionContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LinkExpansionContext.SessionContext.__allocating_init(linkActionMetadata:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for LinkExpansionContext.TurnContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LinkExpansionContext.TurnContext.__allocating_init(onScreenActions:onScreenAppBundleIds:onScreenEntityTypes:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for LinkExpansionContextBuilder()
{
  return objc_opt_self();
}

uint64_t method lookup function for LinkExpansionContextBuilder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LinkExpansionContextBuilder.__allocating_init(metadataProvider:viewActionsProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t destroy for LinkExpansionContext.LinkActionMetadataView()
{
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for LinkExpansionContext.LinkActionMetadataView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for LinkExpansionContext.LinkActionMetadataView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for LinkExpansionContext.LinkActionMetadataView(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkExpansionContext.LinkActionMetadataView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkExpansionContext.LinkActionMetadataView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for LinkExpansionContext.LinkActionMetadataView()
{
  return &unk_1E684BB28;
}

unint64_t lazy protocol witness table accessor for type LinkExpansionContext.LinkActionMetadataView and conformance LinkExpansionContext.LinkActionMetadataView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkExpansionContext.LinkActionMetadataView and conformance LinkExpansionContext.LinkActionMetadataView;
  if (!lazy protocol witness table cache variable for type LinkExpansionContext.LinkActionMetadataView and conformance LinkExpansionContext.LinkActionMetadataView)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for LinkExpansionContext.LinkActionMetadataView, &unk_1E684BB28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkExpansionContext.LinkActionMetadataView and conformance LinkExpansionContext.LinkActionMetadataView);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime18LinkActionMetadataVG_AHs5NeverOTg504_s14de9Runtime20g21ExpansionContextV0D18hI108View33_96F732C182F07CCE7D79D4AD573D548BLLV4nextSS_SDySo16LNSystemProtocolCSayAA0dgH0VGGtSgyFA2LXEfU_A2KXEfU_ShySSGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v26 = *(_QWORD *)(a1 + 16);
    v33 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v6 = v26;
    v7 = 0;
    v3 = v33;
    v27 = a1 + 32;
    v28 = a2;
    v29 = a2 + 56;
    while (1)
    {
      v8 = (uint64_t *)(v27 + 40 * v7);
      v9 = *v8;
      v10 = v8[1];
      v11 = v8[3];
      v32 = v8[2];
      v30 = *((_BYTE *)v8 + 33);
      v31 = *((_BYTE *)v8 + 32);
      if (*(_QWORD *)(a2 + 16))
        break;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18 = 0;
LABEL_22:
      v23 = *(_QWORD *)(v33 + 16);
      v22 = *(_QWORD *)(v33 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v6 = v26;
      }
      ++v7;
      *(_QWORD *)(v33 + 16) = v23 + 1;
      v24 = v33 + 40 * v23;
      *(_QWORD *)(v24 + 32) = v9;
      *(_QWORD *)(v24 + 40) = v10;
      *(_QWORD *)(v24 + 48) = v32;
      *(_QWORD *)(v24 + 56) = v11;
      *(_BYTE *)(v24 + 64) = v31;
      *(_BYTE *)(v24 + 65) = v30;
      *(_BYTE *)(v24 + 66) = v18;
      a2 = v28;
      if (v7 == v6)
        return v3;
    }
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    v12 = Hasher._finalize()();
    v13 = -1 << *(_BYTE *)(a2 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v29 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      v15 = *(_QWORD *)(a2 + 48);
      v16 = (_QWORD *)(v15 + 16 * v14);
      v17 = *v16 == v9 && v16[1] == v10;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_10:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v18 = 1;
LABEL_21:
        v6 = v26;
        goto LABEL_22;
      }
      v19 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v19;
        if (((*(_QWORD *)(v29 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * v14);
        v21 = *v20 == v9 && v20[1] == v10;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v18 = 0;
    goto LABEL_21;
  }
  return v3;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LNSystemProtocol, [LinkActionMetadata]>);
  result = static _DictionaryStorage.copy(original:)();
  v4 = 0;
  v23 = a1;
  v24 = (_QWORD *)result;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v21 = (unint64_t)(v8 + 63) >> 6;
  v22 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * i);
    v17 = *(id *)(*(_QWORD *)(v23 + 48) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime18LinkActionMetadataVG_AHs5NeverOTg504_s14de9Runtime20g21ExpansionContextV0D18hI108View33_96F732C182F07CCE7D79D4AD573D548BLLV4nextSS_SDySo16LNSystemProtocolCSayAA0dgH0VGGtSgyFA2LXEfU_A2KXEfU_ShySSGTf1cn_nTf4ng_n(v16, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v22 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = (uint64_t)v24;
    *(_QWORD *)(v24[6] + 8 * i) = v17;
    *(_QWORD *)(v24[7] + 8 * i) = v18;
    v19 = v24[2];
    v13 = __OFADD__(v19, 1);
    v20 = v19 + 1;
    if (v13)
    {
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v24[2] = v20;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v13 = __OFADD__(v4++, 1);
    if (v13)
      goto LABEL_25;
    if (v4 >= v21)
      return result;
    v14 = *(_QWORD *)(v6 + 8 * v4);
    if (!v14)
      break;
LABEL_15:
    v10 = (v14 - 1) & v14;
  }
  v15 = v4 + 1;
  if (v4 + 1 >= v21)
    return result;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v15 = v4 + 2;
  if (v4 + 2 >= v21)
    return result;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_14;
  v15 = v4 + 3;
  if (v4 + 3 >= v21)
    return result;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_14:
    v4 = v15;
    goto LABEL_15;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v21)
      return result;
    v14 = *(_QWORD *)(v6 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_15;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized LinkExpansionContextBuilder.extractOnScreenBundleIDsFromRRCandidates(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void (*v61)(char *, uint64_t);
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void (*v67)(char *, unint64_t, uint64_t);
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  void (*v81)(char *, uint64_t);
  void (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  void (*v91)(char *, _QWORD, uint64_t);
  void (*v92)(char *, unint64_t, uint64_t);
  uint64_t v93;
  char *v94;
  char v95;
  void (*v96)(char *, uint64_t);
  char *v97;
  char *v98;
  char v99;
  char *v100;
  char *v101;
  char *v102;
  unint64_t v103;
  void (*v104)(char *, _QWORD, uint64_t);
  char v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  char v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t result;
  uint64_t v121;
  char v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  void (*v127)(char *, uint64_t);
  char *v128;
  char v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  unsigned int v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  unsigned int v139;
  void (*v140)(char *, _QWORD, uint64_t);
  char *v141;
  char *v142;
  unint64_t v143;
  char *v144;
  char *v145;
  void (*v146)(char *, uint64_t);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(char *, unint64_t, uint64_t);
  char *v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  void (*v161)(char *, char *, uint64_t);
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  int v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v133 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RRMetadata();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v174 = (char *)&v133 - v10;
  v11 = type metadata accessor for RRDataSourceMetadataValue();
  v173 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v138 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v144 = (char *)&v133 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v170 = (char *)&v133 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v165 = (char *)&v133 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v164 = (char *)&v133 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v145 = (char *)&v133 - v23;
  MEMORY[0x1E0C80A78](v22);
  v156 = (char *)&v133 - v24;
  v158 = type metadata accessor for RREntity();
  v151 = *(_QWORD *)(v158 - 8);
  v25 = MEMORY[0x1E0C80A78](v158);
  v142 = (char *)&v133 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v141 = (char *)&v133 - v28;
  MEMORY[0x1E0C80A78](v27);
  v150 = (char *)&v133 - v29;
  v163 = type metadata accessor for RRCandidate();
  v30 = *(_QWORD *)(v163 - 8);
  v31 = MEMORY[0x1E0C80A78](v163);
  v134 = (char *)&v133 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v133 - v34;
  v36 = MEMORY[0x1E0C80A78](v33);
  v162 = (char *)&v133 - v37;
  MEMORY[0x1E0C80A78](v36);
  v159 = (char *)&v133 - v38;
  v39 = MEMORY[0x1E0DEE9D8];
  v175 = MEMORY[0x1E0DEE9D8];
  v40 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v149 = v40;
  if (!v40)
  {
LABEL_67:
    swift_bridgeObjectRelease();
    v131 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay32SiriReferenceResolutionDataModel11RRCandidateVG_SSs5NeverOTg504_s14d133KitRuntime27LinkExpansionContextBuilderC40extractOnScreenBundleIDsFromRRCandidates33_96F732C182F07CCE7D79D4AD573D548BLLyShySSGSay0A28efg7Model11I60VGFSSAIcfu_33_90a86b9d715d44caa755a7dc6dc8aa3bAISSTf3nnnpk_nTf1cn_n(v39);
    swift_release();
    v132 = specialized Set.init<A>(_:)(v131);
    swift_bridgeObjectRelease();
    return v132;
  }
  v41 = 0;
  v133 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v148 = a1 + v133;
  v153 = *(_QWORD *)(v30 + 72);
  v152 = v30;
  v42 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
  v169 = *MEMORY[0x1E0DA3D48];
  v139 = *MEMORY[0x1E0DA3DC0];
  v135 = *MEMORY[0x1E0DA3DB8];
  v167 = v4;
  v171 = v9;
  v43 = v163;
  v44 = v159;
  v147 = a1;
  v168 = v6;
  v166 = v5;
  v157 = v35;
  v161 = v42;
  while (1)
  {
    v160 = v41;
    v45 = v42;
    v42(v44, (char *)(v148 + v153 * v41), v43);
    if (one-time initialization token for appsDenyList != -1)
      swift_once();
    v46 = static LinkExpansionContextBuilder.appsDenyList;
    v47 = v150;
    RRCandidate.entity.getter();
    v48 = RREntity.id.getter();
    v50 = v49;
    v51 = *(void (**)(char *, uint64_t))(v151 + 8);
    v52 = v158;
    v51(v47, v158);
    LOBYTE(v48) = specialized Set.contains(_:)(v48, v50, v46);
    swift_bridgeObjectRelease();
    v45(v162, v44, v163);
    if ((v48 & 1) != 0)
    {
      v53 = 0;
      v54 = v168;
      v43 = v163;
      v55 = v152;
      v56 = v157;
    }
    else
    {
      v57 = v141;
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      v51(v57, v52);
      v58 = UsoTask.verbString.getter();
      v60 = v59;
      swift_release();
      if (one-time initialization token for kUsoCommonAppEntityName != -1)
        swift_once();
      v54 = v168;
      if (v58 == kUsoCommonAppEntityName._countAndFlagsBits && v60 == kUsoCommonAppEntityName._object)
        v53 = 1;
      else
        v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v56 = v157;
      swift_bridgeObjectRelease();
      v43 = v163;
      v55 = v152;
    }
    v61 = *(void (**)(char *, uint64_t))(v55 + 8);
    v61(v162, v43);
    v44 = v159;
    v161(v56, v159, v43);
    if ((v53 & 1) == 0)
      goto LABEL_50;
    v62 = v142;
    RRCandidate.entity.getter();
    v63 = v56;
    v64 = RREntity.metadata.getter();
    v51(v62, v158);
    v65 = *(_QWORD *)(v64 + 16);
    v146 = v61;
    if (v65)
    {
      v66 = v64 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80));
      v155 = (void (*)(char *, unint64_t, uint64_t))v64;
      swift_bridgeObjectRetain();
      v172 = *(_QWORD *)(v54 + 72);
      v67 = *(void (**)(char *, unint64_t, uint64_t))(v54 + 16);
      v68 = MEMORY[0x1E0DEE9D8];
      v69 = v166;
      v70 = (uint64_t)v167;
      do
      {
        v71 = v174;
        v67(v174, v66, v69);
        v67(v9, (unint64_t)v71, v69);
        v72 = (*(uint64_t (**)(char *, uint64_t))(v54 + 88))(v9, v69);
        if (v72 == v169)
        {
          (*(void (**)(char *, uint64_t))(v54 + 96))(v9, v69);
          v73 = v9;
          v74 = v173;
          v75 = *(void (**)(char *, char *, uint64_t))(v173 + 32);
          v76 = v70;
          v77 = v165;
          v75(v165, v73, v11);
          v78 = v76;
          v79 = v77;
          v70 = v76;
          v69 = v166;
          v75((char *)v78, v79, v11);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56))(v70, 0, 1, v11);
          (*(void (**)(char *, uint64_t))(v54 + 8))(v174, v69);
        }
        else
        {
          v80 = v9;
          v81 = *(void (**)(char *, uint64_t))(v54 + 8);
          v81(v80, v69);
          v74 = v173;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v173 + 56))(v70, 1, 1, v11);
          v81(v174, v69);
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v70, 1, v11) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v70, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
        }
        else
        {
          v82 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 32);
          v83 = v70;
          v84 = v164;
          v82(v164, v83, v11);
          v82(v170, (uint64_t)v84, v11);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v68 + 16) + 1, 1, v68);
          v86 = *(_QWORD *)(v68 + 16);
          v85 = *(_QWORD *)(v68 + 24);
          if (v86 >= v85 >> 1)
            v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v85 > 1, v86 + 1, 1, v68);
          *(_QWORD *)(v68 + 16) = v86 + 1;
          v82((char *)(v68+ ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80))+ *(_QWORD *)(v173 + 72) * v86), (uint64_t)v170, v11);
          v70 = (uint64_t)v167;
          v54 = v168;
        }
        v9 = v171;
        v66 += v172;
        --v65;
      }
      while (v65);
      swift_bridgeObjectRelease_n();
      v87 = v173;
      v88 = v145;
      v89 = v156;
      v90 = v157;
    }
    else
    {
      v90 = v63;
      swift_bridgeObjectRelease();
      v68 = MEMORY[0x1E0DEE9D8];
      v88 = v145;
      v89 = v156;
      v87 = v173;
    }
    v91 = *(void (**)(char *, _QWORD, uint64_t))(v87 + 104);
    v91(v89, v139, v11);
    v172 = *(_QWORD *)(v68 + 16);
    if (!v172)
    {
      v97 = v89;
      v96 = *(void (**)(char *, uint64_t))(v87 + 8);
      goto LABEL_35;
    }
    v140 = v91;
    v136 = (*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
    v92 = *(void (**)(char *, unint64_t, uint64_t))(v87 + 16);
    v143 = v68 + v136;
    v155 = v92;
    ((void (*)(char *))v92)(v88);
    v93 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3DC8], MEMORY[0x1E0DA3DD8]);
    swift_bridgeObjectRetain();
    v94 = v88;
    v154 = v93;
    v95 = dispatch thunk of static Equatable.== infix(_:_:)();
    v96 = *(void (**)(char *, uint64_t))(v87 + 8);
    v96(v94, v11);
    if ((v95 & 1) != 0)
      goto LABEL_39;
    if (v172 == 1)
    {
      swift_bridgeObjectRelease();
      v97 = v156;
LABEL_35:
      v43 = v163;
      v61 = v146;
      goto LABEL_36;
    }
    v137 = *(_QWORD *)(v173 + 72);
    v98 = v145;
    v155(v145, v143 + v137, v11);
    v99 = dispatch thunk of static Equatable.== infix(_:_:)();
    v96(v98, v11);
    if ((v99 & 1) != 0)
    {
LABEL_39:
      swift_bridgeObjectRelease();
      v100 = v138;
      v101 = v156;
      v102 = v167;
      v103 = v143;
      v104 = v140;
LABEL_40:
      v96(v101, v11);
      v104(v144, v135, v11);
      v155(v100, v103, v11);
      swift_bridgeObjectRetain();
      v105 = dispatch thunk of static Equatable.== infix(_:_:)();
      v106 = v96;
      v96(v100, v11);
      if ((v105 & 1) == 0)
      {
        if (v172 == 1)
          goto LABEL_42;
        v143 = *(_QWORD *)(v173 + 72);
        v114 = v138;
        v155(v138, v103 + v143, v11);
        v115 = dispatch thunk of static Equatable.== infix(_:_:)();
        v96(v114, v11);
        if ((v115 & 1) == 0)
        {
          if (v172 != 2)
          {
            v116 = v68 + v136 + 2 * v143;
            v117 = 2;
            do
            {
              v118 = v102;
              v119 = v138;
              result = ((uint64_t (*)(char *, unint64_t, uint64_t))v155)(v138, v116, v11);
              v121 = v117 + 1;
              if (__OFADD__(v117, 1))
                goto LABEL_69;
              v122 = dispatch thunk of static Equatable.== infix(_:_:)();
              v106(v119, v11);
              if ((v122 & 1) != 0)
                goto LABEL_48;
              v102 = v118;
              ++v117;
              v116 += v143;
            }
            while (v121 != v172);
          }
LABEL_42:
          swift_bridgeObjectRelease();
          v106(v144, v11);
          swift_bridgeObjectRelease();
          v107 = v163;
          v146(v90, v163);
          v108 = *(void (**)(char *, char *, uint64_t))(v152 + 32);
          v108(v134, v159, v107);
          v109 = v175;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v109 + 16) + 1, 1);
            v109 = v175;
          }
          v9 = v171;
          v111 = *(_QWORD *)(v109 + 16);
          v110 = *(_QWORD *)(v109 + 24);
          if (v111 >= v110 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v110 > 1, v111 + 1, 1);
            v109 = v175;
          }
          *(_QWORD *)(v109 + 16) = v111 + 1;
          v112 = v109 + v133 + v111 * v153;
          v113 = v163;
          v108((char *)v112, v134, v163);
          v175 = v109;
          v43 = v113;
          v44 = v159;
          goto LABEL_51;
        }
      }
LABEL_48:
      swift_bridgeObjectRelease();
      v106(v144, v11);
      v9 = v171;
      v43 = v163;
      v61 = v146;
      v56 = v90;
      goto LABEL_49;
    }
    v61 = v146;
    v104 = v140;
    if (v172 != 2)
      break;
    swift_bridgeObjectRelease();
    v9 = v171;
    v97 = v156;
    v43 = v163;
LABEL_36:
    v56 = v90;
LABEL_37:
    v96(v97, v11);
LABEL_49:
    swift_bridgeObjectRelease();
    v44 = v159;
LABEL_50:
    v61(v56, v43);
    v61(v44, v43);
LABEL_51:
    v42 = v161;
    v41 = v160 + 1;
    if (v160 + 1 == v149)
    {
      v39 = v175;
      goto LABEL_67;
    }
  }
  v123 = v68 + v136 + 2 * v137;
  v124 = 2;
  while (1)
  {
    v125 = v145;
    result = ((uint64_t (*)(char *, unint64_t, uint64_t))v155)(v145, v123, v11);
    v126 = v124 + 1;
    if (__OFADD__(v124, 1))
      break;
    v127 = v96;
    v128 = v125;
    v129 = dispatch thunk of static Equatable.== infix(_:_:)();
    v130 = v128;
    v96 = v127;
    v127(v130, v11);
    if ((v129 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v102 = v167;
      v100 = v138;
      v101 = v156;
      v90 = v157;
      v103 = v143;
      goto LABEL_40;
    }
    ++v124;
    v123 += v137;
    if (v126 == v172)
    {
      swift_bridgeObjectRelease();
      v9 = v171;
      v97 = v156;
      v43 = v163;
      v56 = v157;
      goto LABEL_37;
    }
  }
  __break(1u);
LABEL_69:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.init<A>(grouping:by:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  unint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;

  v2 = type metadata accessor for RREntity();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v52 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for RRCandidate();
  v5 = MEMORY[0x1E0C80A78](v54);
  v51 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v53 = (char *)&v41 - v8;
  v9 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v55 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    return (uint64_t)v9;
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v7 + 72);
  v48 = v12;
  v49 = v7;
  v43 = v11 | 7;
  v44 = v14 + v12;
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v42 = xmmword_1B4EE3F50;
  v45 = v3;
  v46 = v2;
  v47 = v14;
  v50(v53, v13, v54);
  while (1)
  {
    v17 = v52;
    RRCandidate.entity.getter();
    v18 = RREntity.appBundleId.getter();
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v17, v2);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20);
    v23 = v9[2];
    v24 = (v21 & 1) == 0;
    v25 = v23 + v24;
    if (__OFADD__(v23, v24))
      break;
    v26 = v21;
    if (v9[3] < v25)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, 1);
      v9 = v55;
      v27 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20);
      if ((v26 & 1) != (v28 & 1))
        goto LABEL_20;
      v22 = v27;
    }
    if ((v26 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v29 = v9[7];
      v30 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
      v30(v51, v53, v54);
      v31 = *(_QWORD *)(v29 + 8 * v22);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v29 + 8 * v22) = v31;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v31 + 16) + 1, 1, v31);
        *(_QWORD *)(v29 + 8 * v22) = v31;
      }
      v34 = *(_QWORD *)(v31 + 16);
      v33 = *(_QWORD *)(v31 + 24);
      if (v34 >= v33 >> 1)
      {
        v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v31);
        *(_QWORD *)(v29 + 8 * v22) = v31;
      }
      *(_QWORD *)(v31 + 16) = v34 + 1;
      v15 = v31 + v48;
      v2 = v46;
      v16 = v47;
      v30((char *)(v15 + v34 * v47), v51, v54);
      v3 = v45;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>);
      v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = v42;
      (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v35 + v48, v53, v54);
      v9[(v22 >> 6) + 8] |= 1 << v22;
      v36 = (uint64_t *)(v9[6] + 16 * v22);
      *v36 = v18;
      v36[1] = v20;
      *(_QWORD *)(v9[7] + 8 * v22) = v35;
      v37 = v9[2];
      v38 = __OFADD__(v37, 1);
      v39 = v37 + 1;
      if (v38)
        goto LABEL_19;
      v9[2] = v39;
      v16 = v47;
    }
    v13 += v16;
    if (!--v10)
      return (uint64_t)v9;
    v50(v53, v13, v54);
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  unint64_t v17;
  _QWORD *rawValue;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  unint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  _QWORD *v63;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = MEMORY[0x1E0C80A78](v2);
  v58 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v62 = (char *)&v51 - v6;
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v51 - v7;
  v10 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v63 = (_QWORD *)MEMORY[0x1E0DEE9E0];
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return (uint64_t)v10;
  v12 = *(unsigned __int8 *)(v8 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = (char *)(a1 + v13);
  v15 = *(_QWORD *)(v8 + 72);
  v57 = v13;
  v53 = v12 | 7;
  v54 = v15 + v13;
  v16 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v60 = v8;
  v61 = v16;
  v52 = xmmword_1B4EE3F50;
  v59 = (char *)&v51 - v7;
  v55 = v2;
  v56 = v15;
  v16(v9, (char *)(a1 + v13), v2);
  while (1)
  {
    if (one-time initialization token for kBundleAliasToFullyQualifiedBundleId != -1)
      swift_once();
    rawValue = kBundleAliasToFullyQualifiedBundleId._rawValue;
    v19 = UsoIdentifier.appBundleId.getter();
    if (rawValue[2] && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20), (v22 & 1) != 0))
    {
      v23 = (uint64_t *)(rawValue[7] + 16 * v21);
      v24 = v9;
      v26 = *v23;
      v25 = v23[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v27 = v62;
      v28 = v24;
      v15 = v56;
      v61(v62, v28, v2);
      if (v25)
        goto LABEL_14;
    }
    else
    {
      swift_bridgeObjectRelease();
      v61(v62, v9, v2);
    }
    v29 = UsoIdentifier.appBundleId.getter();
    v27 = v62;
    v26 = v29;
    v25 = v30;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v60 + 8))(v27, v2);
    v32 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
    v33 = v10[2];
    v34 = (v31 & 1) == 0;
    v35 = v33 + v34;
    if (__OFADD__(v33, v34))
      break;
    v36 = v31;
    if (v10[3] < v35)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, 1);
      v10 = v63;
      v37 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
      if ((v36 & 1) != (v38 & 1))
        goto LABEL_28;
      v32 = v37;
    }
    if ((v36 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v39 = v10[7];
      v40 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
      v40(v58, v59, v2);
      v41 = *(_QWORD *)(v39 + 8 * v32);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v39 + 8 * v32) = v41;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v41 + 16) + 1, 1, v41);
        *(_QWORD *)(v39 + 8 * v32) = v41;
      }
      v44 = *(_QWORD *)(v41 + 16);
      v43 = *(_QWORD *)(v41 + 24);
      if (v44 >= v43 >> 1)
      {
        v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, v41);
        *(_QWORD *)(v39 + 8 * v32) = v41;
      }
      *(_QWORD *)(v41 + 16) = v44 + 1;
      v15 = v56;
      v17 = v41 + v57 + v44 * v56;
      v2 = v55;
      v40((char *)v17, v58, v55);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>);
      v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = v52;
      (*(void (**)(uint64_t, char *, uint64_t))(v60 + 32))(v45 + v57, v59, v2);
      v10[(v32 >> 6) + 8] |= 1 << v32;
      v46 = (uint64_t *)(v10[6] + 16 * v32);
      *v46 = v26;
      v46[1] = v25;
      *(_QWORD *)(v10[7] + 8 * v32) = v45;
      v47 = v10[2];
      v48 = __OFADD__(v47, 1);
      v49 = v47 + 1;
      if (v48)
        goto LABEL_27;
      v10[2] = v49;
    }
    v14 += v15;
    --v11;
    v9 = v59;
    if (!v11)
      return (uint64_t)v10;
    v61(v59, v14, v2);
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized LinkExpansionContextBuilder.extractOnScreenEntityTypesFromRRCandidates(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD, _QWORD, _QWORD);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(void);
  uint64_t v54;
  void (*v55)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v56)(char *, uint64_t);
  char *v57;
  void (*v58)(char *, uint64_t, uint64_t, uint64_t);
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  void (*v69)(char *, _QWORD, uint64_t);
  uint64_t v70;
  unint64_t v71;
  void (*v72)(_QWORD);
  uint64_t v73;
  char v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  char *v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char *v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t result;
  uint64_t v93;
  char v94;
  char *v95;
  char v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD v110[2];
  unint64_t v111;
  char *v112;
  unsigned int v113;
  char *v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t, uint64_t);
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  void (*v136)(_QWORD, _QWORD, _QWORD);
  int v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v110 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for RRMetadata();
  v5 = *(_QWORD *)(v139 - 8);
  v6 = MEMORY[0x1E0C80A78](v139);
  v8 = (char *)v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v144 = (char *)v110 - v9;
  v10 = type metadata accessor for RRDataSourceMetadataValue();
  v145 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v114 = (char *)v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v127 = (char *)v110 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v140 = (char *)v110 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v135 = (char *)v110 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v134 = (char *)v110 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v128 = (char *)v110 - v22;
  MEMORY[0x1E0C80A78](v21);
  v133 = (char *)v110 - v23;
  v122 = type metadata accessor for RREntity();
  v121 = *(_QWORD *)(v122 - 8);
  MEMORY[0x1E0C80A78](v122);
  v120 = (char *)v110 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for RRCandidate();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = MEMORY[0x1E0C80A78](v25);
  v112 = (char *)v110 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v119 = (char *)v110 - v30;
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)v110 - v31;
  v33 = MEMORY[0x1E0DEE9D8];
  v146 = MEMORY[0x1E0DEE9D8];
  v34 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v118 = v34;
  if (!v34)
  {
LABEL_56:
    swift_bridgeObjectRelease();
    v108 = specialized Dictionary.init<A>(grouping:by:)(v33);
    swift_release();
    v109 = specialized _NativeDictionary.mapValues<A>(_:)(v108);
    swift_bridgeObjectRelease();
    return (uint64_t)v109;
  }
  v35 = 0;
  v36 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  v125 = *(_QWORD *)(v26 + 72);
  v110[1] = a1;
  v111 = v36;
  v117 = a1 + v36;
  v131 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v137 = *MEMORY[0x1E0DA3D48];
  v116 = *MEMORY[0x1E0DA3DC0];
  v113 = *MEMORY[0x1E0DA3DB8];
  v138 = v4;
  v141 = v8;
  v142 = v5;
  v123 = v25;
  v115 = v26;
  v124 = v32;
  while (1)
  {
    v130 = v35;
    v131(v32, v117 + v125 * v35, v25);
    v37 = v120;
    RRCandidate.entity.getter();
    v38 = RREntity.metadata.getter();
    (*(void (**)(char *, uint64_t))(v121 + 8))(v37, v122);
    v39 = *(_QWORD *)(v38 + 16);
    if (v39)
    {
      v40 = v142;
      v41 = v38 + ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80));
      v132 = v38;
      swift_bridgeObjectRetain();
      v42 = *(_QWORD *)(v40 + 72);
      v43 = *(void (**)(_QWORD, _QWORD, _QWORD))(v40 + 16);
      v143 = MEMORY[0x1E0DEE9D8];
      v136 = v43;
      do
      {
        v44 = v10;
        v46 = v144;
        v45 = v145;
        v47 = v139;
        v43(v144, v41, v139);
        v43(v8, v46, v47);
        v48 = v142;
        v49 = (*(uint64_t (**)(char *, uint64_t))(v142 + 88))(v8, v47);
        if (v49 == v137)
        {
          (*(void (**)(char *, uint64_t))(v48 + 96))(v8, v47);
          v50 = v8;
          v51 = v42;
          v52 = v45;
          v53 = *(void (**)(void))(v45 + 32);
          ((void (*)(char *, char *, uint64_t))v53)(v135, v50, v44);
          v54 = (uint64_t)v138;
          v53();
          v55 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56);
          v42 = v51;
          v55(v54, 0, 1, v44);
          v56 = *(void (**)(char *, uint64_t))(v48 + 8);
          v43 = v136;
          v10 = v44;
        }
        else
        {
          v57 = v8;
          v56 = *(void (**)(char *, uint64_t))(v48 + 8);
          v56(v57, v47);
          v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
          v54 = (uint64_t)v138;
          v10 = v44;
          v58(v138, 1, 1, v44);
        }
        v56(v144, v47);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v145 + 48))(v54, 1, v10) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v54, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
        }
        else
        {
          v59 = *(void (**)(char *, uint64_t, uint64_t))(v145 + 32);
          v60 = v54;
          v61 = v134;
          v59(v134, v60, v10);
          v59(v140, (uint64_t)v61, v10);
          v62 = v143;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v62 + 16) + 1, 1, v62);
          v64 = *(_QWORD *)(v62 + 16);
          v63 = *(_QWORD *)(v62 + 24);
          v143 = v62;
          if (v64 >= v63 >> 1)
            v143 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1, v143);
          v65 = v143;
          *(_QWORD *)(v143 + 16) = v64 + 1;
          v59((char *)(v65+ ((*(unsigned __int8 *)(v145 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80))+ *(_QWORD *)(v145 + 72) * v64), (uint64_t)v140, v10);
        }
        v41 += v42;
        --v39;
        v8 = v141;
      }
      while (v39);
      swift_bridgeObjectRelease_n();
      v66 = v128;
      v67 = v133;
      v68 = v143;
    }
    else
    {
      swift_bridgeObjectRelease();
      v68 = MEMORY[0x1E0DEE9D8];
      v66 = v128;
      v67 = v133;
    }
    v69 = *(void (**)(char *, _QWORD, uint64_t))(v145 + 104);
    v69(v67, v116, v10);
    v129 = *(_QWORD *)(v68 + 16);
    v143 = v68;
    if (!v129)
    {
      v75 = *(void (**)(char *, uint64_t))(v145 + 8);
      goto LABEL_34;
    }
    v70 = v145;
    v71 = (*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
    v72 = *(void (**)(_QWORD))(v145 + 16);
    v126 = v68 + v71;
    v136 = (void (*)(_QWORD, _QWORD, _QWORD))v72;
    v72(v66);
    v73 = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3DC8], MEMORY[0x1E0DA3DD8]);
    swift_bridgeObjectRetain();
    v132 = v73;
    v74 = dispatch thunk of static Equatable.== infix(_:_:)();
    v75 = *(void (**)(char *, uint64_t))(v70 + 8);
    v75(v66, v10);
    if ((v74 & 1) == 0)
      break;
    swift_bridgeObjectRelease();
    v76 = v114;
    v77 = v133;
LABEL_21:
    v78 = v126;
LABEL_22:
    v75(v77, v10);
    v69(v127, v113, v10);
    v136(v76, v78, v10);
    swift_bridgeObjectRetain();
    v79 = dispatch thunk of static Equatable.== infix(_:_:)();
    v75(v76, v10);
    v80 = v129;
    if ((v79 & 1) != 0)
      goto LABEL_25;
    if (v129 != 1)
    {
      v81 = *(_QWORD *)(v145 + 72);
      v82 = v114;
      v136(v114, v78 + v81, v10);
      v83 = dispatch thunk of static Equatable.== infix(_:_:)();
      v75(v82, v10);
      if ((v83 & 1) != 0)
      {
LABEL_25:
        swift_bridgeObjectRelease();
        v75(v127, v10);
        v8 = v141;
        v25 = v123;
        goto LABEL_35;
      }
      if (v80 != 2)
      {
        v89 = v143 + v71 + 2 * v81;
        v90 = 2;
        do
        {
          v91 = v114;
          result = ((uint64_t (*)(char *, uint64_t, uint64_t))v136)(v114, v89, v10);
          v93 = v90 + 1;
          if (__OFADD__(v90, 1))
            goto LABEL_58;
          v94 = dispatch thunk of static Equatable.== infix(_:_:)();
          v75(v91, v10);
          if ((v94 & 1) != 0)
            goto LABEL_25;
          ++v90;
          v89 += v81;
        }
        while (v93 != v80);
      }
    }
    swift_bridgeObjectRelease();
    v75(v127, v10);
    swift_bridgeObjectRelease();
    v95 = v119;
    v32 = v124;
    v25 = v123;
    v131(v119, (uint64_t)v124, v123);
    v96 = RRCandidate.isAppEntityType.getter();
    v97 = v115;
    v88 = *(void (**)(char *, uint64_t))(v115 + 8);
    v88(v95, v25);
    v8 = v141;
    if ((v96 & 1) != 0)
    {
      v98 = *(void (**)(char *, char *, uint64_t))(v97 + 32);
      v98(v112, v32, v25);
      v99 = v146;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v99 + 16) + 1, 1);
        v99 = v146;
      }
      v101 = *(_QWORD *)(v99 + 16);
      v100 = *(_QWORD *)(v99 + 24);
      if (v101 >= v100 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v100 > 1, v101 + 1, 1);
        v99 = v146;
      }
      *(_QWORD *)(v99 + 16) = v101 + 1;
      v102 = v99 + v111 + v101 * v125;
      v25 = v123;
      v98((char *)v102, v112, v123);
      v146 = v99;
      v32 = v124;
      goto LABEL_37;
    }
LABEL_36:
    v88(v32, v25);
LABEL_37:
    v35 = v130 + 1;
    if (v130 + 1 == v118)
    {
      v33 = v146;
      goto LABEL_56;
    }
  }
  v84 = v129;
  if (v129 == 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  v78 = v126;
  v85 = *(_QWORD *)(v145 + 72);
  v136(v66, v126 + v85, v10);
  v86 = dispatch thunk of static Equatable.== infix(_:_:)();
  v75(v66, v10);
  if ((v86 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v76 = v114;
    v77 = v133;
    goto LABEL_22;
  }
  if (v84 == 2)
  {
    swift_bridgeObjectRelease();
    v8 = v141;
LABEL_33:
    v67 = v133;
LABEL_34:
    v25 = v123;
    v75(v67, v10);
LABEL_35:
    swift_bridgeObjectRelease();
    v87 = v119;
    v32 = v124;
    v131(v119, (uint64_t)v124, v25);
    v88 = *(void (**)(char *, uint64_t))(v115 + 8);
    v88(v87, v25);
    goto LABEL_36;
  }
  v110[0] = v71;
  v103 = v85;
  v104 = v143 + v71 + 2 * v85;
  v105 = 2;
  while (1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v136)(v66, v104, v10);
    v106 = v105 + 1;
    if (__OFADD__(v105, 1))
      break;
    v107 = dispatch thunk of static Equatable.== infix(_:_:)();
    v75(v66, v10);
    if ((v107 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v76 = v114;
      v77 = v133;
      v71 = v110[0];
      goto LABEL_21;
    }
    ++v105;
    v104 += v103;
    v66 = v128;
    v67 = v133;
    if (v106 == v84)
    {
      swift_bridgeObjectRelease();
      v8 = v141;
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(a1, a2, v6, v7, v8);
}

uint64_t sub_1B4E186AC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  *(_OWORD *)(v5 + 56) = v6;
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = v4;
  return swift_task_switch();
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B4E1879C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSS_ShySSGt_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSS_ShySSGt_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSS_ShySSGt_TG5Tu))(a1, v4);
}

uint64_t partial apply for closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in LinkExpansionContextBuilder.fetchViewActionIdentifiers(for:)(a1, v4, v5, v6);
}

uint64_t specialized LinkExpansionContextBuilder.getAssociatedEntityTypeMetadata(actionMetadata:)(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v2 = objc_msgSend(a1, sel_typeSpecificMetadata);
  if (!v2)
  {
    v25 = 0u;
    v26 = 0u;
    goto LABEL_11;
  }
  v3 = v2;
  type metadata accessor for LNActionTypeSpecificMetadataKey(0);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type LNActionTypeSpecificMetadataKey and conformance LNActionTypeSpecificMetadataKey, (uint64_t (*)(uint64_t))type metadata accessor for LNActionTypeSpecificMetadataKey, (uint64_t)&protocol conformance descriptor for LNActionTypeSpecificMetadataKey);
  v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v4 + 16))
  {
    v25 = 0u;
    v26 = 0u;
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v5 = (id)*MEMORY[0x1E0D43978];
  v6 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v7 & 1) == 0)
  {
    v25 = 0u;
    v26 = 0u;

    goto LABEL_10;
  }
  outlined init with copy of Any(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)&v25);

  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v26 + 1))
  {
LABEL_11:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v25, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_12;
  }
  if ((swift_dynamicCast() & 1) != 0)
    return v24;
LABEL_12:
  v9 = objc_msgSend(a1, sel_parameters);
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for LNActionParameterMetadata);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62)
    goto LABEL_26;
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v11)
  {
    v12 = 4;
    while (1)
    {
      v13 = (v10 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1B5E43B94](v12 - 4, v10)
          : *(id *)(v10 + 8 * v12);
      v14 = v13;
      v15 = v12 - 3;
      if (__OFADD__(v12 - 4, 1))
        break;
      v16 = objc_msgSend(v13, sel_valueType);
      objc_opt_self();
      v17 = (void *)swift_dynamicCastObjCClass();
      if (v17)
      {
        v18 = objc_msgSend(v17, sel_memberValueType);

        v16 = v18;
      }
      objc_opt_self();
      v19 = swift_dynamicCastObjCClass();
      if (v19)
      {
        v20 = (void *)v19;
        v21 = v16;
        swift_bridgeObjectRelease();
        v22 = objc_msgSend(v20, sel_typeName);
        v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        return v8;
      }

      ++v12;
      if (v15 == v11)
        goto LABEL_27;
    }
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_27:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized LinkExpansionContextBuilder.extractActionMetadata(allLinkActionsMetadata:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  char **v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  char v35;
  char v36;
  id v37;
  unint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  void *v54;
  id v55;
  unint64_t v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  id v63;
  char v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  _BOOL8 v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  char v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  BOOL v77;
  id v78;
  uint64_t v79;
  _QWORD *v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  id v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  NSObject *v91;
  unint64_t v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t result;
  uint64_t v102;
  int64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  int64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int64_t v117;
  id v118;
  char v119;
  uint64_t v120;
  char v121;
  unint64_t v122;
  BOOL v123;
  uint64_t v124;
  unint64_t v125;
  void (*v126)(_QWORD *@<X8>);
  void *v127;
  uint64_t v128;
  int64_t v129;
  uint64_t v130[2];

  v108 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v102 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  if (v2 < 64)
    v3 = ~(-1 << v2);
  else
    v3 = -1;
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v103 = (unint64_t)(v2 + 63) >> 6;
  v104 = a1;
  swift_bridgeObjectRetain();
  v126 = 0;
  v5 = 0;
  v6 = &selRef_reason;
  while (1)
  {
    if (v4)
    {
      v106 = (v4 - 1) & v4;
      v107 = v5;
      v8 = __clz(__rbit64(v4)) | (v5 << 6);
    }
    else
    {
      v9 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_115;
      if (v9 >= v103)
        goto LABEL_110;
      v10 = *(_QWORD *)(v102 + 8 * v9);
      v11 = v5 + 1;
      if (!v10)
      {
        v11 = v5 + 2;
        if (v5 + 2 >= v103)
          goto LABEL_110;
        v10 = *(_QWORD *)(v102 + 8 * v11);
        if (!v10)
        {
          v11 = v5 + 3;
          if (v5 + 3 >= v103)
            goto LABEL_110;
          v10 = *(_QWORD *)(v102 + 8 * v11);
          if (!v10)
          {
            v12 = v5 + 4;
            if (v5 + 4 >= v103)
              goto LABEL_110;
            v10 = *(_QWORD *)(v102 + 8 * v12);
            if (!v10)
            {
              while (1)
              {
                v11 = v12 + 1;
                if (__OFADD__(v12, 1))
                  goto LABEL_116;
                if (v11 >= v103)
                  goto LABEL_110;
                v10 = *(_QWORD *)(v102 + 8 * v11);
                ++v12;
                if (v10)
                  goto LABEL_21;
              }
            }
            v11 = v5 + 4;
          }
        }
      }
LABEL_21:
      v106 = (v10 - 1) & v10;
      v107 = v11;
      v8 = __clz(__rbit64(v10)) + (v11 << 6);
    }
    v13 = (uint64_t *)(*(_QWORD *)(v104 + 48) + 16 * v8);
    v14 = v13[1];
    v109 = *v13;
    v15 = *(void **)(*(_QWORD *)(v104 + 56) + 8 * v8);
    swift_bridgeObjectRetain();
    v16 = v15;
    v122 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v17 = objc_msgSend(v16, sel_systemProtocolDefaults);
    v18 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
    lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject();
    v114 = v18;
    v115 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v105 = v16;
    v19 = objc_msgSend(v16, sel_actions);
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for LNActionMetadata);
    v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    v21 = 0;
    v110 = v20 + 64;
    v112 = v14;
    v113 = v20;
    v22 = 1 << *(_BYTE *)(v20 + 32);
    if (v22 < 64)
      v23 = ~(-1 << v22);
    else
      v23 = -1;
    v24 = v23 & *(_QWORD *)(v20 + 64);
    v111 = (unint64_t)(v22 + 63) >> 6;
LABEL_28:
    if (v24)
    {
      v116 = (v24 - 1) & v24;
      v117 = v21;
      v25 = __clz(__rbit64(v24)) | (v21 << 6);
      goto LABEL_44;
    }
    v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    if (v26 < v111)
    {
      v27 = *(_QWORD *)(v110 + 8 * v26);
      v28 = v21 + 1;
      if (v27)
        goto LABEL_43;
      v28 = v21 + 2;
      if (v21 + 2 < v111)
      {
        v27 = *(_QWORD *)(v110 + 8 * v28);
        if (v27)
          goto LABEL_43;
        v28 = v21 + 3;
        if (v21 + 3 < v111)
        {
          v27 = *(_QWORD *)(v110 + 8 * v28);
          if (v27)
            goto LABEL_43;
          v29 = v21 + 4;
          if (v21 + 4 < v111)
            break;
        }
      }
    }
LABEL_5:
    swift_bridgeObjectRelease();
    swift_release();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v130[0] = v108;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v122, v109, v14, isUniquelyReferenced_nonNull_native);
    v108 = v130[0];

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v106;
    v5 = v107;
  }
  v27 = *(_QWORD *)(v110 + 8 * v29);
  if (!v27)
  {
    while (1)
    {
      v28 = v29 + 1;
      if (__OFADD__(v29, 1))
        goto LABEL_114;
      if (v28 >= v111)
        goto LABEL_5;
      v27 = *(_QWORD *)(v110 + 8 * v28);
      ++v29;
      if (v27)
        goto LABEL_43;
    }
  }
  v28 = v21 + 4;
LABEL_43:
  v116 = (v27 - 1) & v27;
  v117 = v28;
  v25 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_44:
  v30 = (uint64_t *)(*(_QWORD *)(v113 + 48) + 16 * v25);
  v31 = v30[1];
  v124 = *v30;
  v32 = *(void **)(*(_QWORD *)(v113 + 56) + 8 * v25);
  swift_bridgeObjectRetain();
  v33 = v32;
  v120 = specialized LinkExpansionContextBuilder.getAssociatedEntityTypeMetadata(actionMetadata:)(v33);
  v128 = v34;
  v36 = v35;
  v118 = v33;
  v37 = objc_msgSend(v33, sel_systemProtocolMetadata);
  type metadata accessor for LNSystemProtocolIdentifier(0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LNSystemProtocolMetadata);
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
  v38 = v31;
  v39 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v40 = 0;
  v41 = v39 + 64;
  v42 = 1 << *(_BYTE *)(v39 + 32);
  if (v42 < 64)
    v43 = ~(-1 << v42);
  else
    v43 = -1;
  v44 = v43 & *(_QWORD *)(v39 + 64);
  v129 = (unint64_t)(v42 + 63) >> 6;
  v119 = v36 & 1;
  v125 = v38;
  if (v44)
  {
LABEL_48:
    v45 = __clz(__rbit64(v44));
    v44 &= v44 - 1;
    v46 = v45 | (v40 << 6);
    goto LABEL_49;
  }
  while (1)
  {
    v51 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v51 >= v129)
      goto LABEL_99;
    v52 = *(_QWORD *)(v41 + 8 * v51);
    ++v40;
    if (!v52)
    {
      v40 = v51 + 1;
      if (v51 + 1 >= v129)
        goto LABEL_99;
      v52 = *(_QWORD *)(v41 + 8 * v40);
      if (!v52)
      {
        v40 = v51 + 2;
        if (v51 + 2 >= v129)
          goto LABEL_99;
        v52 = *(_QWORD *)(v41 + 8 * v40);
        if (!v52)
        {
          v40 = v51 + 3;
          if (v51 + 3 >= v129)
            goto LABEL_99;
          v52 = *(_QWORD *)(v41 + 8 * v40);
          if (!v52)
          {
            v40 = v51 + 4;
            if (v51 + 4 >= v129)
              goto LABEL_99;
            v52 = *(_QWORD *)(v41 + 8 * v40);
            if (!v52)
            {
              v53 = v51 + 5;
              if (v53 >= v129)
              {
LABEL_99:
                swift_bridgeObjectRelease();
                swift_release();
                v85 = objc_msgSend(v118, sel_systemProtocols);
                v86 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                if (v86 >> 62)
                {
                  swift_bridgeObjectRetain();
                  v87 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v87 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFF8) + 0x10);
                }
                v14 = v112;
                swift_bridgeObjectRelease();
                if (v87 == 1)
                {
                  swift_bridgeObjectRelease();

                }
                else
                {
                  if (one-time initialization token for kLogger != -1)
                    swift_once();
                  v88 = type metadata accessor for Logger();
                  __swift_project_value_buffer(v88, (uint64_t)kLogger);
                  swift_bridgeObjectRetain_n();
                  v89 = v118;
                  swift_bridgeObjectRetain();
                  v90 = v89;
                  v91 = Logger.logObject.getter();
                  v92 = v38;
                  v93 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v91, v93))
                  {
                    v94 = swift_slowAlloc();
                    v95 = swift_slowAlloc();
                    v130[0] = v95;
                    *(_DWORD *)v94 = 136315650;
                    swift_bridgeObjectRetain();
                    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v112, v130);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    *(_WORD *)(v94 + 12) = 2080;
                    swift_bridgeObjectRetain();
                    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v92, v130);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease_n();
                    *(_WORD *)(v94 + 22) = 2080;
                    v96 = objc_msgSend(v90, sel_systemProtocols);
                    v97 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                    v98 = MEMORY[0x1B5E434D4](v97, v114);
                    v100 = v99;
                    swift_bridgeObjectRelease();
                    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v100, v130);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();

                    v6 = &selRef_reason;
                    swift_bridgeObjectRelease();
                    _os_log_impl(&dword_1B4BE6000, v91, v93, "[LinkExpansionContext] Expected exactly one systemProtocol for %s:%s, got %s", (uint8_t *)v94, 0x20u);
                    swift_arrayDestroy();
                    MEMORY[0x1B5E44758](v95, -1, -1);
                    MEMORY[0x1B5E44758](v94, -1, -1);

                  }
                  else
                  {

                    swift_bridgeObjectRelease_n();
                    swift_bridgeObjectRelease_n();

                  }
                }
                v24 = v116;
                v21 = v117;
                goto LABEL_28;
              }
              v52 = *(_QWORD *)(v41 + 8 * v53);
              if (!v52)
              {
                while (1)
                {
                  v40 = v53 + 1;
                  if (__OFADD__(v53, 1))
                    goto LABEL_112;
                  if (v40 >= v129)
                    goto LABEL_99;
                  v52 = *(_QWORD *)(v41 + 8 * v40);
                  ++v53;
                  if (v52)
                    goto LABEL_75;
                }
              }
              v40 = v53;
            }
          }
        }
      }
    }
LABEL_75:
    v44 = (v52 - 1) & v52;
    v46 = __clz(__rbit64(v52)) + (v40 << 6);
LABEL_49:
    v47 = *(void **)(*(_QWORD *)(v39 + 48) + 8 * v46);
    v48 = (void *)objc_opt_self();
    v49 = v47;
    v50 = objc_msgSend(v48, v6[276], v49);
    if (v50)
    {
      v54 = v50;
      if (*(_QWORD *)(v115 + 16))
      {
        v55 = v50;
        v56 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v55);
        if ((v57 & 1) == 0)
        {

          v121 = 0;
          v62 = (uint64_t)v126;
          goto LABEL_80;
        }
        v58 = (uint64_t *)(*(_QWORD *)(v115 + 56) + 16 * v56);
        v60 = *v58;
        v59 = v58[1];
        swift_bridgeObjectRetain();

        if (v60 == v124 && v59 == v125)
        {
          swift_bridgeObjectRelease();
          v121 = 1;
        }
        else
        {
          v121 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v121 = 0;
      }
      v62 = (uint64_t)v126;
LABEL_80:
      swift_bridgeObjectRetain();
      v63 = v54;
      swift_bridgeObjectRetain();
      _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v62);
      v64 = swift_isUniquelyReferenced_nonNull_native();
      v130[0] = v122;
      v66 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v63);
      v67 = *(_QWORD *)(v122 + 16);
      v68 = (v65 & 1) == 0;
      v69 = v67 + v68;
      if (__OFADD__(v67, v68))
        goto LABEL_109;
      v70 = v65;
      v127 = v63;
      if (*(_QWORD *)(v122 + 24) >= v69)
      {
        if ((v64 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v69, v64);
        v71 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v63);
        if ((v70 & 1) != (v72 & 1))
          goto LABEL_117;
        v66 = v71;
      }
      v73 = (_QWORD *)v130[0];
      swift_bridgeObjectRelease();
      if ((v70 & 1) != 0)
      {
        swift_bridgeObjectRetain();
      }
      else
      {
        v73[(v66 >> 6) + 8] |= 1 << v66;
        *(_QWORD *)(v73[6] + 8 * v66) = v63;
        *(_QWORD *)(v73[7] + 8 * v66) = MEMORY[0x1E0DEE9D8];
        v74 = v73[2];
        v75 = v73;
        v76 = v74 + 1;
        v77 = __OFADD__(v74, 1);
        v123 = v77;
        swift_bridgeObjectRetain();
        if (v123)
        {
          __break(1u);
LABEL_112:
          __break(1u);
          goto LABEL_113;
        }
        v75[2] = v76;
        v78 = v63;
        v73 = v75;
      }
      v79 = v73[7];
      v122 = (unint64_t)v73;
      swift_bridgeObjectRelease();
      v80 = *(_QWORD **)(v79 + 8 * v66);
      v81 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v79 + 8 * v66) = v80;
      if ((v81 & 1) == 0)
      {
        v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v80[2] + 1, 1, v80);
        *(_QWORD *)(v79 + 8 * v66) = v80;
      }
      v83 = v80[2];
      v82 = v80[3];
      if (v83 >= v82 >> 1)
      {
        v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v82 > 1), v83 + 1, 1, v80);
        *(_QWORD *)(v79 + 8 * v66) = v80;
      }
      v6 = &selRef_reason;
      v80[2] = v83 + 1;
      v84 = &v80[5 * v83];
      v38 = v125;
      v84[4] = v124;
      v84[5] = v125;
      v84[6] = v120;
      v84[7] = v128;
      *((_BYTE *)v84 + 64) = v119;
      *((_BYTE *)v84 + 65) = v121 & 1;
      *((_BYTE *)v84 + 66) = 0;

      v126 = specialized thunk for @callee_guaranteed () -> (@owned [String]);
      if (v44)
        goto LABEL_48;
    }
    else
    {

      if (v44)
        goto LABEL_48;
    }
  }
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  swift_release();
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v126);
  return v108;
}

uint64_t specialized LinkExpansionContextBuilder.loggingExceptions<A>(messagePrefix:_:)(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD *);

  v3[12] = a1;
  v3[13] = a2;
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  v3[14] = static MessageBusActor.shared;
  v7 = (uint64_t (*)(_QWORD *))((char *)a3 + *a3);
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  v3[15] = v5;
  *v5 = v3;
  v5[1] = specialized LinkExpansionContextBuilder.loggingExceptions<A>(messagePrefix:_:);
  return v7(v3 + 8);
}

uint64_t specialized LinkExpansionContextBuilder.loggingExceptions<A>(messagePrefix:_:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 64));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  swift_release();
  if (one-time initialization token for kLogger != -1)
    swift_once();
  v1 = *(void **)(v0 + 128);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)kLogger);
  swift_bridgeObjectRetain();
  v3 = v1;
  swift_bridgeObjectRetain();
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 104);
  if (v7)
  {
    v10 = *(_QWORD *)(v0 + 96);
    v11 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v16 = v15;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 2080;
    swift_getErrorValue();
    v12 = Error.localizedDescription.getter();
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v5, v6, "[LinkExpansionContext] %s : %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v15, -1, -1);
    MEMORY[0x1B5E44758](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

unint64_t lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject;
  if (!lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject)
  {
    v1 = type metadata accessor for OS_dispatch_queue(255, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject);
  }
  return result;
}

uint64_t LinkMetadataProvider.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
  return v0;
}

uint64_t static LinkMetadataProvider.Errors.== infix(_:_:)()
{
  return 1;
}

void LinkMetadataProvider.Errors.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int LinkMetadataProvider.Errors.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

id LinkMetadataProvider.wrappedProvider.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t LinkMetadataProvider.actionMetadata()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_retain();
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *(_QWORD *)v1 = v0;
  *(_QWORD *)(v1 + 8) = LinkMetadataProvider.actionMetadata();
  *(_QWORD *)(v1 + 80) = *(_QWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 64) = xmmword_1B4EEBC80;
  return swift_task_switch();
}

uint64_t LinkMetadataProvider.actionMetadata()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 32) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t LinkMetadataProvider.conditionallyEnabledActionMetadata()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_retain();
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *(_QWORD *)v1 = v0;
  *(_QWORD *)(v1 + 8) = LinkMetadataProvider.conditionallyEnabledActionMetadata();
  *(_QWORD *)(v1 + 120) = *(_QWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 104) = xmmword_1B4EEBC80;
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x1E0DEE9E0]);
}

uint64_t LinkMetadataProvider.conditionallyEnabledActionMetadata()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 32) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t LinkMetadataProvider.bundles()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_retain();
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  *(_QWORD *)v1 = v0;
  *(_QWORD *)(v1 + 8) = LinkMetadataProvider.bundles();
  *(_QWORD *)(v1 + 80) = *(_QWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 64) = xmmword_1B4EEBC80;
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x1E0DEE9D8]);
}

uint64_t LinkMetadataProvider.bundles()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 32) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t LinkMetadataProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LinkMetadataProvider.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t LinkMetadataProvider.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
  return v0;
}

uint64_t protocol witness for LinkMetadataProviding.actionMetadata() in conformance LinkMetadataProvider()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch();
}

uint64_t protocol witness for LinkMetadataProviding.conditionallyEnabledActionMetadata() in conformance LinkMetadataProvider()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch();
}

uint64_t protocol witness for LinkMetadataProviding.bundles() in conformance LinkMetadataProvider()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch();
}

uint64_t specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[14] = a2;
  v3[15] = a3;
  v3[13] = a1;
  return swift_task_switch();
}

{
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  return swift_task_switch();
}

{
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  return swift_task_switch();
}

uint64_t specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  unint64_t inited;
  Class isa;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  _QWORD *v27;
  uint64_t v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(v0 + 80) = 0;
  v1 = (_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 104);
  lazy protocol witness table accessor for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors();
  v3 = (void *)swift_allocError();
  swift_beginAccess();
  if (*(_QWORD *)(v0 + 80) >= v2)
  {
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(void **)(*(_QWORD *)(v0 + 120) + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EEBC90;
  *(_QWORD *)(inited + 32) = objc_msgSend((id)objc_opt_self(), sel_conditionallyEnabledProtocol);
  v28[0] = inited;
  specialized Array._endMutation()();
  specialized Set.init<A>(_:)(inited);
  swift_bridgeObjectRelease();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject();
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 88) = 0;
  v7 = objc_msgSend(v4, sel_actionsConformingToSystemProtocols_logicalType_bundleIdentifier_error_, isa, 2, 0, v0 + 88);

  v8 = *(void **)(v0 + 88);
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : LNActionMetadata]);
    v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v8;

    swift_release();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
  }
  v12 = v8;
  v13 = (void *)_convertNSErrorToError(_:)();
  *(_QWORD *)(v0 + 128) = v13;

  swift_willThrow();
  if (one-time initialization token for executor != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
  v15 = v13;
  v16 = v13;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = *(_QWORD *)(v0 + 104);
    v20 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    v28[0] = v21;
    *(_DWORD *)v20 = 134218498;
    *(_QWORD *)(v20 + 4) = *(_QWORD *)(v0 + 80);
    *(_WORD *)(v20 + 12) = 2048;
    *(_QWORD *)(v20 + 14) = v19;
    *(_WORD *)(v20 + 22) = 2080;
    *(_QWORD *)(v0 + 96) = v13;
    v22 = v13;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v23 = String.init<A>(describing:)();
    *(_QWORD *)(v20 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v28);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v17, v18, "[LinkMetadataProvider] Attempt %ld of %ld - %s", (uint8_t *)v20, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v21, -1, -1);
    MEMORY[0x1B5E44758](v20, -1, -1);

  }
  else
  {

  }
  if (__OFADD__(*v1, 1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  v25 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 80) = *v1 + 1;
  if (!is_mul_ok(v25, 0xF4240uLL))
    goto LABEL_14;
  v26 = v13;
  v27 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v27;
  *v27 = v0;
  v27[1] = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
  return static Task<>.sleep(nanoseconds:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  unint64_t inited;
  Class isa;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  _QWORD *v27;
  uint64_t v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(v0 + 104);

  v2 = (_QWORD *)(v0 + 80);
  if (*(_QWORD *)(v0 + 80) >= v1)
  {
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(void **)(v0 + 128);
  v4 = *(void **)(*(_QWORD *)(v0 + 120) + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EEBC90;
  *(_QWORD *)(inited + 32) = objc_msgSend((id)objc_opt_self(), sel_conditionallyEnabledProtocol);
  v28[0] = inited;
  specialized Array._endMutation()();
  specialized Set.init<A>(_:)(inited);
  swift_bridgeObjectRelease();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject();
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 88) = 0;
  v7 = objc_msgSend(v4, sel_actionsConformingToSystemProtocols_logicalType_bundleIdentifier_error_, isa, 2, 0, v0 + 88);

  v8 = *(void **)(v0 + 88);
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : LNActionMetadata]);
    v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v8;

    swift_release();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
  }
  v12 = v8;
  v13 = (void *)_convertNSErrorToError(_:)();
  *(_QWORD *)(v0 + 128) = v13;

  swift_willThrow();
  if (one-time initialization token for executor != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
  v15 = v13;
  v16 = v13;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = *(_QWORD *)(v0 + 104);
    v20 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    v28[0] = v21;
    *(_DWORD *)v20 = 134218498;
    *(_QWORD *)(v20 + 4) = *(_QWORD *)(v0 + 80);
    *(_WORD *)(v20 + 12) = 2048;
    *(_QWORD *)(v20 + 14) = v19;
    *(_WORD *)(v20 + 22) = 2080;
    *(_QWORD *)(v0 + 96) = v13;
    v22 = v13;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v23 = String.init<A>(describing:)();
    *(_QWORD *)(v20 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v28);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v17, v18, "[LinkMetadataProvider] Attempt %ld of %ld - %s", (uint8_t *)v20, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v21, -1, -1);
    MEMORY[0x1B5E44758](v20, -1, -1);

  }
  else
  {

  }
  if (__OFADD__(*v2, 1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  v25 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 80) = *v2 + 1;
  if (!is_mul_ok(v25, 0xF4240uLL))
    goto LABEL_14;
  v26 = v13;
  v27 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v27;
  *v27 = v0;
  v27[1] = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
  return static Task<>.sleep(nanoseconds:)();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 128);

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  _QWORD *v26;
  uint64_t v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(v0 + 40) = 0;
  v1 = (_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 64);
  lazy protocol witness table accessor for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors();
  v3 = (void *)swift_allocError();
  swift_beginAccess();
  if (*(_QWORD *)(v0 + 40) >= v2)
  {
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(void **)(*(_QWORD *)(v0 + 80) + 16);
  *(_QWORD *)(v0 + 48) = 0;
  v5 = objc_msgSend(v4, sel_bundlesWithError_, v0 + 48);
  v6 = *(void **)(v0 + 48);
  if (v5)
  {
    v7 = v5;
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v6;

    swift_release();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
  }
  v11 = v6;
  v12 = (void *)_convertNSErrorToError(_:)();
  *(_QWORD *)(v0 + 88) = v12;

  swift_willThrow();
  if (one-time initialization token for executor != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
  v14 = v12;
  v15 = v12;
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = *(_QWORD *)(v0 + 64);
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v27[0] = v20;
    *(_DWORD *)v19 = 134218498;
    *(_QWORD *)(v19 + 4) = *(_QWORD *)(v0 + 40);
    *(_WORD *)(v19 + 12) = 2048;
    *(_QWORD *)(v19 + 14) = v18;
    *(_WORD *)(v19 + 22) = 2080;
    *(_QWORD *)(v0 + 56) = v12;
    v21 = v12;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v22 = String.init<A>(describing:)();
    *(_QWORD *)(v19 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v27);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v16, v17, "[LinkMetadataProvider] Attempt %ld of %ld - %s", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v19, -1, -1);

  }
  else
  {

  }
  if (__OFADD__(*v1, 1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  v24 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 40) = *v1 + 1;
  if (!is_mul_ok(v24, 0xF4240uLL))
    goto LABEL_14;
  v25 = v12;
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v26;
  *v26 = v0;
  v26[1] = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
  return static Task<>.sleep(nanoseconds:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  _QWORD *v26;
  uint64_t v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(v0 + 64);

  v2 = (_QWORD *)(v0 + 40);
  if (*(_QWORD *)(v0 + 40) >= v1)
  {
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(void **)(*(_QWORD *)(v0 + 80) + 16);
  *(_QWORD *)(v0 + 48) = 0;
  v4 = *(void **)(v0 + 88);
  v5 = objc_msgSend(v3, sel_bundlesWithError_, v0 + 48);
  v6 = *(void **)(v0 + 48);
  if (v5)
  {
    v7 = v5;
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v6;

    swift_release();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
  }
  v11 = v6;
  v12 = (void *)_convertNSErrorToError(_:)();
  *(_QWORD *)(v0 + 88) = v12;

  swift_willThrow();
  if (one-time initialization token for executor != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
  v14 = v12;
  v15 = v12;
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = *(_QWORD *)(v0 + 64);
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v27[0] = v20;
    *(_DWORD *)v19 = 134218498;
    *(_QWORD *)(v19 + 4) = *(_QWORD *)(v0 + 40);
    *(_WORD *)(v19 + 12) = 2048;
    *(_QWORD *)(v19 + 14) = v18;
    *(_WORD *)(v19 + 22) = 2080;
    *(_QWORD *)(v0 + 56) = v12;
    v21 = v12;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v22 = String.init<A>(describing:)();
    *(_QWORD *)(v19 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v27);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v16, v17, "[LinkMetadataProvider] Attempt %ld of %ld - %s", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v19, -1, -1);

  }
  else
  {

  }
  if (__OFADD__(*v2, 1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  v24 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 40) = *v2 + 1;
  if (!is_mul_ok(v24, 0xF4240uLL))
    goto LABEL_14;
  v25 = v12;
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v26;
  *v26 = v0;
  v26[1] = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
  return static Task<>.sleep(nanoseconds:)();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  _QWORD *v26;
  uint64_t v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(v0 + 40) = 0;
  v1 = (_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 64);
  lazy protocol witness table accessor for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors();
  v3 = (void *)swift_allocError();
  swift_beginAccess();
  if (*(_QWORD *)(v0 + 40) >= v2)
  {
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(void **)(*(_QWORD *)(v0 + 80) + 16);
  *(_QWORD *)(v0 + 48) = 0;
  v5 = objc_msgSend(v4, sel_actionsAndSystemProtocolDefaultsForBundleIdentifier_error_, 0, v0 + 48);
  v6 = *(void **)(v0 + 48);
  if (v5)
  {
    v7 = v5;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for LNBundleActionsMetadata);
    v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v6;

    swift_release();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
  }
  v11 = v6;
  v12 = (void *)_convertNSErrorToError(_:)();
  *(_QWORD *)(v0 + 88) = v12;

  swift_willThrow();
  if (one-time initialization token for executor != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
  v14 = v12;
  v15 = v12;
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = *(_QWORD *)(v0 + 64);
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v27[0] = v20;
    *(_DWORD *)v19 = 134218498;
    *(_QWORD *)(v19 + 4) = *(_QWORD *)(v0 + 40);
    *(_WORD *)(v19 + 12) = 2048;
    *(_QWORD *)(v19 + 14) = v18;
    *(_WORD *)(v19 + 22) = 2080;
    *(_QWORD *)(v0 + 56) = v12;
    v21 = v12;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v22 = String.init<A>(describing:)();
    *(_QWORD *)(v19 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v27);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v16, v17, "[LinkMetadataProvider] Attempt %ld of %ld - %s", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v19, -1, -1);

  }
  else
  {

  }
  if (__OFADD__(*v1, 1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  v24 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 40) = *v1 + 1;
  if (!is_mul_ok(v24, 0xF4240uLL))
    goto LABEL_14;
  v25 = v12;
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v26;
  *v26 = v0;
  v26[1] = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
  return static Task<>.sleep(nanoseconds:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  _QWORD *v26;
  uint64_t v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(v0 + 64);

  v2 = (_QWORD *)(v0 + 40);
  if (*(_QWORD *)(v0 + 40) >= v1)
  {
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(void **)(*(_QWORD *)(v0 + 80) + 16);
  *(_QWORD *)(v0 + 48) = 0;
  v4 = *(void **)(v0 + 88);
  v5 = objc_msgSend(v3, sel_actionsAndSystemProtocolDefaultsForBundleIdentifier_error_, 0, v0 + 48);
  v6 = *(void **)(v0 + 48);
  if (v5)
  {
    v7 = v5;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for LNBundleActionsMetadata);
    v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v6;

    swift_release();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
  }
  v11 = v6;
  v12 = (void *)_convertNSErrorToError(_:)();
  *(_QWORD *)(v0 + 88) = v12;

  swift_willThrow();
  if (one-time initialization token for executor != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
  v14 = v12;
  v15 = v12;
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = *(_QWORD *)(v0 + 64);
    v19 = swift_slowAlloc();
    v20 = swift_slowAlloc();
    v27[0] = v20;
    *(_DWORD *)v19 = 134218498;
    *(_QWORD *)(v19 + 4) = *(_QWORD *)(v0 + 40);
    *(_WORD *)(v19 + 12) = 2048;
    *(_QWORD *)(v19 + 14) = v18;
    *(_WORD *)(v19 + 22) = 2080;
    *(_QWORD *)(v0 + 56) = v12;
    v21 = v12;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v22 = String.init<A>(describing:)();
    *(_QWORD *)(v19 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v27);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B4BE6000, v16, v17, "[LinkMetadataProvider] Attempt %ld of %ld - %s", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v20, -1, -1);
    MEMORY[0x1B5E44758](v19, -1, -1);

  }
  else
  {

  }
  if (__OFADD__(*v2, 1))
  {
    __break(1u);
LABEL_14:
    __break(1u);
  }
  v24 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 40) = *v2 + 1;
  if (!is_mul_ok(v24, 0xF4240uLL))
    goto LABEL_14;
  v25 = v12;
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v26;
  *v26 = v0;
  v26[1] = specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:);
  return static Task<>.sleep(nanoseconds:)();
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 88);

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  return specialized LinkMetadataProvider.retry<A>(maximumAttempts:backoffMilliseconds:_:)();
}

unint64_t lazy protocol witness table accessor for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors;
  if (!lazy protocol witness table cache variable for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for LinkMetadataProvider.Errors, &type metadata for LinkMetadataProvider.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors;
  if (!lazy protocol witness table cache variable for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for LinkMetadataProvider.Errors, &type metadata for LinkMetadataProvider.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkMetadataProvider.Errors and conformance LinkMetadataProvider.Errors);
  }
  return result;
}

uint64_t dispatch thunk of LinkMetadataProviding.actionMetadata()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 8) + *(_QWORD *)(a2 + 8));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v7(a1, a2);
}

uint64_t dispatch thunk of LinkMetadataProviding.conditionallyEnabledActionMetadata()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 16) + *(_QWORD *)(a2 + 16));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v7(a1, a2);
}

uint64_t dispatch thunk of LinkMetadataProviding.bundles()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(a2 + 24) + *(_QWORD *)(a2 + 24));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v7(a1, a2);
}

uint64_t type metadata accessor for LinkMetadataProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for LinkMetadataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LinkMetadataProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t storeEnumTagSinglePayload for LinkMetadataProvider.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B4E1BFC8 + 4 * byte_1B4EEBCA0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B4E1BFE8 + 4 * byte_1B4EEBCA5[v4]))();
}

_BYTE *sub_1B4E1BFC8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B4E1BFE8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4E1BFF0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4E1BFF8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B4E1C000(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B4E1C008(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LinkMetadataProvider.Errors()
{
  return &type metadata for LinkMetadataProvider.Errors;
}

Swift::String *kLinkEntityTypeUserDataKey.unsafeMutableAddressor()
{
  return &kLinkEntityTypeUserDataKey;
}

Swift::String *kDefaultLinkActionUserDataKey.unsafeMutableAddressor()
{
  return &kDefaultLinkActionUserDataKey;
}

Swift::String *kOnScreenLinkActionUserDataKey.unsafeMutableAddressor()
{
  return &kOnScreenLinkActionUserDataKey;
}

Swift::String *kLinkEntityTypeRequirementUserDataKey.unsafeMutableAddressor()
{
  return &kLinkEntityTypeRequirementUserDataKey;
}

uint64_t static EntityTypeMetadata.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  char v8;
  char v9;

  if (!a2)
  {
    if (!a5)
    {
LABEL_9:
      v9 = a3 ^ a6 ^ 1;
      return v9 & 1;
    }
LABEL_8:
    v9 = 0;
    return v9 & 1;
  }
  if (!a5)
    goto LABEL_8;
  if (a1 == a4 && a2 == a5)
    goto LABEL_9;
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v9 = 0;
  if ((v8 & 1) != 0)
    goto LABEL_9;
  return v9 & 1;
}

SiriKitRuntime::EntityTypeMetadata __swiftcall EntityTypeMetadata.init(entityTypeName:entityTypeRequired:)(Swift::String_optional entityTypeName, Swift::Bool entityTypeRequired)
{
  Swift::Bool v2;
  SiriKitRuntime::EntityTypeMetadata result;

  v2 = entityTypeRequired;
  result.entityTypeName = entityTypeName;
  result.entityTypeRequired = v2;
  return result;
}

Swift::String *kLinkUserParseUserDataKey.unsafeMutableAddressor()
{
  return &kLinkUserParseUserDataKey;
}

uint64_t EntityTypeMetadata.entityTypeName.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t EntityTypeMetadata.entityTypeRequired.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EntityTypeMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  char v8;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (!v3)
  {
    if (!v5)
      return v4 ^ v6 ^ 1u;
    return 0;
  }
  if (!v5)
    return 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v3 == v5)
    return v4 ^ v6 ^ 1u;
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v8 & 1) != 0)
    return v4 ^ v6 ^ 1u;
  return result;
}

uint64_t LinkParseExpansion.linkExpansionContext.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  swift_retain();
  return v1;
}

uint64_t one-time initialization function for allowListedParsers()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(unint64_t, _QWORD, uint64_t);
  uint64_t v7;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_Parser.ParserIdentifier>);
  v0 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B4EE3BA0;
  v5 = v4 + v3;
  v6 = *(void (**)(unint64_t, _QWORD, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x1E0D9F118], v0);
  v6(v5 + v2, *MEMORY[0x1E0D9F138], v0);
  v7 = specialized Set.init(_nonEmptyArrayLiteral:)(v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  result = swift_deallocClassInstance();
  static LinkParseExpansion.allowListedParsers = v7;
  return result;
}

uint64_t *LinkParseExpansion.allowListedParsers.unsafeMutableAddressor()
{
  if (one-time initialization token for allowListedParsers != -1)
    swift_once();
  return &static LinkParseExpansion.allowListedParsers;
}

uint64_t static LinkParseExpansion.allowListedParsers.getter()
{
  if (one-time initialization token for allowListedParsers != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t LinkParseExpansion.__allocating_init(linkExpansionContext:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t LinkParseExpansion.init(linkExpansionContext:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t LinkParseExpansion.expand(parses:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, unint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67[2];

  v3 = v2;
  v5 = *v2;
  v62 = a2;
  v63 = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USOParse?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for USOParse();
  v60 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v65 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v58 = (char *)&v53 - v12;
  v13 = type metadata accessor for Parse();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for kLogger != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  v18 = __swift_project_value_buffer(v17, (uint64_t)kLogger);
  swift_retain_n();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  v21 = os_log_type_enabled(v19, v20);
  v59 = v9;
  v55 = v18;
  v56 = (uint64_t)v3;
  v64 = v16;
  if (v21)
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v67[0] = swift_slowAlloc();
    v61 = (void (*)(char *, unint64_t, uint64_t))a1;
    v23 = v67[0];
    *(_DWORD *)v22 = 136315138;
    v54 = v22 + 4;
    v24 = LinkExpansionContext.debugDescription.getter();
    v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v67);
    v9 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v19, v20, "[LinkParseExpansion] Expanding LINK parses from context %s", v22, 0xCu);
    swift_arrayDestroy();
    v26 = v23;
    a1 = (uint64_t)v61;
    MEMORY[0x1B5E44758](v26, -1, -1);
    MEMORY[0x1B5E44758](v22, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  swift_bridgeObjectRetain();
  v27 = swift_bridgeObjectRetain();
  v28 = specialized Sequence.compactMap<A>(_:)(v27, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v28 + 16);
  v30 = v60;
  if (v29)
  {
    v31 = v28;
    v32 = v28 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v33 = *(_QWORD *)(v14 + 72);
    v61 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    v62 = v33;
    v54 = (uint8_t *)v31;
    swift_bridgeObjectRetain();
    v34 = MEMORY[0x1E0DEE9D8];
    v57 = v14;
    do
    {
      v35 = (uint64_t)v64;
      v61(v64, v32, v13);
      closure #1 in LinkParseExpansion.expand(parses:)(v35, v8);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v35, v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v8, 1, v9) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for USOParse?);
      }
      else
      {
        v36 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
        v37 = v58;
        v36(v58, v8, v9);
        v36(v65, v37, v9);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v34 + 16) + 1, 1, v34);
        v39 = *(_QWORD *)(v34 + 16);
        v38 = *(_QWORD *)(v34 + 24);
        if (v39 >= v38 >> 1)
          v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, v34);
        *(_QWORD *)(v34 + 16) = v39 + 1;
        v9 = v59;
        v40 = v34
            + ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))
            + *(_QWORD *)(v60 + 72) * v39;
        v30 = v60;
        v36((char *)v40, v65, v59);
        v14 = v57;
      }
      v32 += v62;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    v34 = MEMORY[0x1E0DEE9D8];
  }
  v41 = v56;
  swift_retain();
  v42 = specialized Sequence.flatMap<A>(_:)(v34, v41);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain_n();
  v43 = Logger.logObject.getter();
  v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc();
    v46 = swift_slowAlloc();
    v67[0] = v46;
    *(_DWORD *)v45 = 136315138;
    v47 = type metadata accessor for ParseUserDataAttachment();
    v48 = swift_bridgeObjectRetain();
    v49 = MEMORY[0x1B5E434D4](v48, v47);
    v51 = v50;
    swift_bridgeObjectRelease();
    v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v43, v44, "[LinkParseExpansion] Returning expanded parses: %s", v45, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v46, -1, -1);
    MEMORY[0x1B5E44758](v45, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v42;
}

uint64_t closure #1 in LinkParseExpansion.expand(parses:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  int v20;
  char *v21;
  uint64_t v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(char *, uint64_t);
  void (*v37)(char *, uint64_t);
  _QWORD v38[3];
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a2;
  v42 = a1;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v2 = MEMORY[0x1E0C80A78](v39);
  v38[2] = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v38 - v4;
  v6 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v40 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for USOParse();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v41 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v38 - v13;
  v15 = type metadata accessor for Parse();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v42, v15);
  if ((*(unsigned int (**)(char *, uint64_t))(v16 + 88))(v18, v15) != *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v43, 1, 1, v9);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
  v19 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v19(v14, v18, v9);
  USOParse.parserIdentifier.getter();
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  v42 = v9;
  v21 = v14;
  if (v20 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  }
  else
  {
    v23 = (uint64_t)v40;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v40, v5, v6);
    if (one-time initialization token for allowListedParsers != -1)
      swift_once();
    v24 = specialized Set.contains(_:)(v23, static LinkParseExpansion.allowListedParsers);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v23, v6);
    if ((v24 & 1) != 0)
    {
      v26 = v42;
      v25 = v43;
      v19(v43, v21, v42);
      return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v25, 0, 1, v26);
    }
  }
  v27 = v42;
  if (one-time initialization token for kLogger != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)kLogger);
  v29 = v41;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v41, v21, v27);
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    v33 = swift_slowAlloc();
    v45 = v33;
    v40 = v21;
    *(_DWORD *)v32 = 136315138;
    v38[1] = v32 + 4;
    USOParse.parserIdentifier.getter();
    v27 = v42;
    v34 = String.init<A>(describing:)();
    v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v36 = *(void (**)(char *, uint64_t))(v10 + 8);
    v36(v29, v27);
    _os_log_impl(&dword_1B4BE6000, v30, v31, "[LinkParseExpansion] Skipping link parse expansion for parse from %s", v32, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v33, -1, -1);
    MEMORY[0x1B5E44758](v32, -1, -1);

    v36(v40, v27);
  }
  else
  {

    v37 = *(void (**)(char *, uint64_t))(v10 + 8);
    v37(v29, v27);
    v37(v21, v27);
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v43, 1, 1, v27);
}

uint64_t closure #2 in LinkParseExpansion.expand(parses:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  os_log_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  os_log_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[2];
  char v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  id v60;

  v47 = a2;
  v48 = a3;
  v4 = type metadata accessor for USOParse();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v44 - v9;
  if (one-time initialization token for kLogger != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  v12 = __swift_project_value_buffer(v11, (uint64_t)kLogger);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, a1, v4);
  v50 = v12;
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  v16 = os_log_type_enabled(v14, v15);
  v49 = a1;
  if (v16)
  {
    v17 = swift_slowAlloc();
    v45 = v14;
    v18 = (uint8_t *)v17;
    v46 = swift_slowAlloc();
    *(_QWORD *)&v54 = v46;
    *(_DWORD *)v18 = 136315138;
    v13(v8, (uint64_t)v10, v4);
    v19 = String.init<A>(reflecting:)();
    *(_QWORD *)&v51[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    v21 = v45;
    _os_log_impl(&dword_1B4BE6000, v45, v15, "[LinkParseExpansion] Expanding parse %s", v18, 0xCu);
    v22 = v46;
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v22, -1, -1);
    MEMORY[0x1B5E44758](v18, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);

  }
  specialized LinkUsoParser.extractParseInformation(usoParse:)((uint64_t)&v54);
  outlined init with take of LNSystemProtocol?((uint64_t)&v54, (uint64_t)&v60);
  v58 = v55;
  v59[0] = *((_QWORD *)&v54 + 1);
  v57 = *((_QWORD *)&v55 + 1);
  outlined retain of RequestConjunctionInfo?(&v60);
  outlined retain of [String : Set<String>]((uint64_t)v59);
  outlined retain of [String : Set<String>]((uint64_t)&v58);
  outlined retain of [String : Set<String>]((uint64_t)&v57);
  outlined retain of RequestConjunctionInfo?(&v60);
  outlined retain of [String : Set<String>]((uint64_t)v59);
  outlined retain of [String : Set<String>]((uint64_t)&v58);
  outlined retain of [String : Set<String>]((uint64_t)&v57);
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    v53 = v26;
    *(_DWORD *)v25 = 136315138;
    v51[0] = v54;
    v51[1] = v55;
    v52 = v56;
    outlined retain of RequestConjunctionInfo?(&v60);
    outlined retain of [String : Set<String>]((uint64_t)v59);
    outlined retain of [String : Set<String>]((uint64_t)&v58);
    outlined retain of [String : Set<String>]((uint64_t)&v57);
    v27 = String.init<A>(reflecting:)();
    *(_QWORD *)&v51[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of RequestConjunctionInfo?(&v60);
    outlined release of [String : Set<String>]((uint64_t)v59);
    outlined release of [String : Set<String>]((uint64_t)&v58);
    outlined release of [String : Set<String>]((uint64_t)&v57);
    outlined release of RequestConjunctionInfo?(&v60);
    outlined release of [String : Set<String>]((uint64_t)v59);
    outlined release of [String : Set<String>]((uint64_t)&v58);
    outlined release of [String : Set<String>]((uint64_t)&v57);
    _os_log_impl(&dword_1B4BE6000, v23, v24, "[LinkParseExpansion] Extracted parse metadata %s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v26, -1, -1);
    MEMORY[0x1B5E44758](v25, -1, -1);
  }
  else
  {
    outlined release of RequestConjunctionInfo?(&v60);
    outlined release of [String : Set<String>]((uint64_t)v59);
    outlined release of [String : Set<String>]((uint64_t)&v58);
    outlined release of [String : Set<String>]((uint64_t)&v57);
    outlined release of RequestConjunctionInfo?(&v60);
    outlined release of [String : Set<String>]((uint64_t)v59);
    outlined release of [String : Set<String>]((uint64_t)&v58);
    outlined release of [String : Set<String>]((uint64_t)&v57);
  }

  v29 = *(_QWORD *)(v47 + 16);
  v30 = *(_QWORD *)(v47 + 24);
  swift_retain();
  swift_retain();
  v31 = specialized LinkActionFilter.compatibleLinkActions(parseMetadata:expansionContext:)((void **)&v54, v29, v30);
  swift_release();
  swift_release();
  swift_bridgeObjectRetain_n();
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    *(_QWORD *)&v51[0] = v35;
    *(_DWORD *)v34 = 136315138;
    swift_bridgeObjectRetain();
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (appBundleId: String, userData: [String : Any]));
    v37 = MEMORY[0x1B5E434D4](v31, v36);
    v39 = v38;
    swift_bridgeObjectRelease();
    v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, (uint64_t *)v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v32, v33, "[LinkParseExpansion] Compatible Link Actions %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v35, -1, -1);
    MEMORY[0x1B5E44758](v34, -1, -1);

  }
  else
  {

    v40 = swift_bridgeObjectRelease_n();
  }
  MEMORY[0x1E0C80A78](v40);
  *(&v44 - 2) = v41;
  v42 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS11appBundleId_SDySSypG8userDatatG_14SiriKitRuntime09ParseUserH10AttachmentVs5NeverOTg5((void (*)(_QWORD *))partial apply for closure #1 in closure #2 in LinkParseExpansion.expand(parses:), (uint64_t)(&v44 - 4), v31);
  outlined release of RequestConjunctionInfo?(&v60);
  outlined release of [String : Set<String>]((uint64_t)v59);
  outlined release of [String : Set<String>]((uint64_t)&v58);
  outlined release of [String : Set<String>]((uint64_t)&v57);
  result = swift_bridgeObjectRelease();
  *v48 = v42;
  return result;
}

uint64_t closure #1 in closure #2 in LinkParseExpansion.expand(parses:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a2;
  v3 = type metadata accessor for Siri_Nlu_External_Parser();
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Siri_Nlu_External_UserParse();
  v23 = *(_QWORD *)(v25 - 8);
  v9 = MEMORY[0x1E0C80A78](v25);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = type metadata accessor for Parse();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[1];
  v26 = *a1;
  v24 = v16;
  v17 = a1[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  USOParse.userParse.getter();
  USOParse.userParse.getter();
  Siri_Nlu_External_UserParse.parser.getter();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v25);
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v28);
  v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v8, 0, 1, v18);
  USOParse.init(userParse:parserIdentifier:appBundleId:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0D9C678], v12);
  v19 = type metadata accessor for ParseUserDataAttachment();
  v20 = v29;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v29 + *(int *)(v19 + 20), v15, v12);
  UUID.init()();
  *(_QWORD *)(v20 + *(int *)(v19 + 24)) = v17;
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t LinkParseExpansion.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t LinkParseExpansion.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime18LinkActionMetadataVG_SS11appBundleId_SDySSypG8userDatats5NeverOTg504_s14de9Runtime16gh72FilterV010compatibleD7Actions13parseMetadata16expansionContextSaySS11appkL76_SDySSypG8userDatatGAA0d5ParseJ0V_AA0dL9Providing_ptFSSAG_AhItAA0deJ0VXEfU0_SSTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24[4];
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v30 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v30;
    v10 = (char *)(a1 + 66);
    while (1)
    {
      v11 = *(_QWORD *)(v10 - 26);
      v12 = *(_QWORD *)(v10 - 18);
      v13 = *(_QWORD *)(v10 - 10);
      v14 = *(v10 - 2);
      v15 = *(v10 - 1);
      v16 = *v10;
      v24[0] = *(_QWORD *)(v10 - 34);
      v24[1] = v11;
      v24[2] = v12;
      v24[3] = v13;
      v25 = v14;
      v26 = v15;
      v27 = v16;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      closure #2 in LinkActionFilter.compatibleLinkActions(parseMetadata:expansionContext:)(v24, a2, a3, &v28);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = v28;
      v18 = v29;
      v30 = v6;
      v20 = *(_QWORD *)(v6 + 16);
      v19 = *(_QWORD *)(v6 + 24);
      if (v20 >= v19 >> 1)
      {
        v23 = v29;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        v18 = v23;
        v6 = v30;
      }
      v10 += 40;
      *(_QWORD *)(v6 + 16) = v20 + 1;
      v21 = v6 + 24 * v20;
      *(_QWORD *)(v21 + 32) = v17;
      *(_OWORD *)(v21 + 40) = v18;
      if (!--v5)
        return v6;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t specialized LinkActionFilter.compatibleLinkActions(parseMetadata:expansionContext:)(void **a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void **v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD *v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _QWORD *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  BOOL v30;
  uint8_t *v31;
  uint8_t *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *inited;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  id v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t i;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  Swift::Int v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  BOOL v85;
  unint64_t v86;
  _QWORD *v87;
  BOOL v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  uint64_t v106;
  void **v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  Swift::String v112;
  Swift::String v113;
  Swift::String v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  int64_t v122;
  uint64_t v123;
  void **v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  Swift::String v129;
  Swift::String v130;
  Swift::String v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  void *v139;
  id v140;
  id v141;
  NSObject *v142;
  os_log_type_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  id v153;
  void **v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  char v164;
  os_log_type_t v165;
  char log;
  NSObject *loga;
  os_log_t logb;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD v178[2];

  v5 = *a1;
  if (!*a1)
  {
    v20 = one-time initialization token for kLogger;
    swift_retain();
    swift_retain();
    if (v20 != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)kLogger);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1B4BE6000, v22, v23, "[LinkParseExpansion] Skipping parse expansion as could not find systemProtocol from parse.", v24, 2u);
      MEMORY[0x1B5E44758](v24, -1, -1);
    }

    swift_release();
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  v6 = a1;
  v7 = one-time initialization token for kLogger;
  swift_retain();
  swift_retain();
  v8 = v5;
  if (v7 != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)kLogger);
  v10 = v8;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  v152 = a2;
  v154 = v6;
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v13 = 138412290;
    v169 = (uint64_t)v10;
    v15 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v14 = v5;

    _os_log_impl(&dword_1B4BE6000, v11, v12, "[LinkParseExpansion] Evaluating compatible Link actions for %@", v13, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v14, -1, -1);
    MEMORY[0x1B5E44758](v13, -1, -1);

    if (((_BYTE)v6[4] & 1) != 0)
    {
LABEL_6:
      v16 = Logger.logObject.getter();
      v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v18 = 0;
        _os_log_impl(&dword_1B4BE6000, v16, v17, "[LinkParseExpansion] Detected noEntity parse, using entities directly from SRR entity pool.", v18, 2u);
        MEMORY[0x1B5E44758](v18, -1, -1);
      }

      v19 = *(_QWORD **)(a3 + 32);
      goto LABEL_22;
    }
  }
  else
  {

    if (((_BYTE)v6[4] & 1) != 0)
      goto LABEL_6;
  }
  v26 = v6[2];
  v27 = v26[2];
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.debug.getter();
  v30 = os_log_type_enabled(v28, v29);
  if (v27)
  {
    if (v30)
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1B4BE6000, v28, v29, "[LinkParseExpansion] Detected parse with explicitly mentioned entity type.", v31, 2u);
      MEMORY[0x1B5E44758](v31, -1, -1);
    }

    v176 = v26;
    goto LABEL_23;
  }
  if (v30)
  {
    v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v32 = 0;
    _os_log_impl(&dword_1B4BE6000, v28, v29, "[LinkParseExpansion] Detected parse without explicitly mentioned entity type.", v32, 2u);
    MEMORY[0x1B5E44758](v32, -1, -1);
  }

  v19 = v6[1];
LABEL_22:
  v176 = v19;
LABEL_23:
  swift_bridgeObjectRetain();
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    v36 = swift_slowAlloc();
    v169 = v36;
    *(_DWORD *)v35 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    v37 = Dictionary.description.getter();
    v39 = v38;
    swift_bridgeObjectRelease();
    v171 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v169);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v33, v34, "[LinkParseExpansion] Considering salient entities types: %s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v36, -1, -1);
    MEMORY[0x1B5E44758](v35, -1, -1);
  }

  v40 = MEMORY[0x1E0DEE9D8];
  v174 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v175 = MEMORY[0x1E0DEE9D8];
  swift_retain();
  swift_retain();
  v41 = swift_bridgeObjectRetain();
  v42 = specialized _copyCollectionToContiguousArray<A>(_:)(v41);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SequenceBox<LinkExpansionContext.LinkActionMetadataView>);
  inited = (_QWORD *)swift_initStackObject();
  inited[2] = a3;
  inited[3] = v152;
  inited[4] = v42;
  inited[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _IteratorBox<LinkExpansionContext.LinkActionMetadataView>);
  v44 = (_QWORD *)swift_initStackObject();
  v44[2] = a3;
  v44[3] = v152;
  v44[4] = v42;
  v44[5] = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_retain();
  v45 = LinkExpansionContext.LinkActionMetadataView.next()();
  if (v46)
  {
    v48 = v45;
    v49 = v46;
    v50 = v47;
    v51 = 0;
    v153 = v10;
    while (1)
    {
      v56 = (uint64_t)v6[3];
      if (*(_QWORD *)(v56 + 16) && (specialized Set.contains(_:)(v48, v49, v56) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v61 = v174;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61[2] + 1, 1, v61);
        v63 = v61[2];
        v62 = v61[3];
        if (v63 >= v62 >> 1)
          v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v62 > 1), v63 + 1, 1, v61);
        v61[2] = v63 + 1;
        v64 = &v61[2 * v63];
        v64[4] = v48;
        v64[5] = v49;
        v174 = v61;
        goto LABEL_29;
      }
      swift_beginAccess();
      v57 = v176;
      v156 = v51;
      v159 = v49;
      if (v176[2])
      {
        swift_bridgeObjectRetain();
        v58 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v49);
        if ((v59 & 1) != 0)
        {
          v60 = *(_QWORD *)(v57[7] + 8 * v58);
          swift_bridgeObjectRetain();
        }
        else
        {
          v60 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v60 = 0;
      }
      swift_endAccess();
      v177 = (_QWORD *)v40;
      v178[0] = v40;
      v157 = v48;
      if (!*(_QWORD *)(v50 + 16))
        goto LABEL_95;
      v65 = v10;
      v66 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v65);
      if ((v67 & 1) == 0)
      {

LABEL_95:
        swift_bridgeObjectRelease();
        goto LABEL_96;
      }
      v68 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * v66);
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      v161 = *(_QWORD *)(v68 + 16);
      if (!v161)
        goto LABEL_95;
      v160 = v68 + 32;
      v158 = v60 + 56;
      swift_bridgeObjectRetain();
      for (i = 0; i != v161; ++i)
      {
        v71 = (uint64_t *)(v160 + 40 * i);
        v72 = *v71;
        v73 = v71[1];
        v74 = v71[2];
        v75 = v71[3];
        v76 = *((_BYTE *)v71 + 32);
        v164 = *((_BYTE *)v71 + 33);
        log = *((_BYTE *)v71 + 34);
        if (v60 && v75)
        {
          if (*(_QWORD *)(v60 + 16))
          {
            Hasher.init(_seed:)();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            v77 = Hasher._finalize()();
            v78 = -1 << *(_BYTE *)(v60 + 32);
            v79 = v77 & ~v78;
            if (((*(_QWORD *)(v158 + ((v79 >> 3) & 0xFFFFFFFFFFFFF8)) >> v79) & 1) != 0)
            {
              v80 = (_QWORD *)(*(_QWORD *)(v60 + 48) + 16 * v79);
              if (*v80 == v74 && v75 == v80[1])
                goto LABEL_88;
              v155 = *(_QWORD *)(v60 + 48);
              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                goto LABEL_88;
              v82 = ~v78;
              v83 = (v79 + 1) & v82;
              if (((*(_QWORD *)(v158 + ((v83 >> 3) & 0xFFFFFFFFFFFFF8)) >> v83) & 1) != 0)
              {
                v84 = (_QWORD *)(v155 + 16 * v83);
                v85 = *v84 == v74 && v75 == v84[1];
                if (v85 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  goto LABEL_88;
                v86 = (v83 + 1) & v82;
                if (((*(_QWORD *)(v158 + ((v86 >> 3) & 0xFFFFFFFFFFFFF8)) >> v86) & 1) != 0)
                {
                  v87 = (_QWORD *)(v155 + 16 * v86);
                  v88 = *v87 == v74 && v75 == v87[1];
                  if (v88 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    goto LABEL_88;
                  v89 = (v86 + 1) & v82;
                  if (((*(_QWORD *)(v158 + ((v89 >> 3) & 0xFFFFFFFFFFFFF8)) >> v89) & 1) != 0)
                  {
                    v90 = (_QWORD *)(v155 + 16 * v89);
                    if (*v90 != v74 || v75 != v90[1])
                    {
                      do
                      {
                        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                          break;
                        v89 = (v89 + 1) & v82;
                        if (((*(_QWORD *)(v158 + ((v89 >> 3) & 0xFFFFFFFFFFFFF8)) >> v89) & 1) == 0)
                          goto LABEL_92;
                        v91 = (_QWORD *)(v155 + 16 * v89);
                      }
                      while (*v91 != v74 || v75 != v91[1]);
                    }
LABEL_88:
                    swift_beginAccess();
                    v97 = (_QWORD *)v178[0];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v97[2] + 1, 1, v97);
                    v99 = v97[2];
                    v98 = v97[3];
                    if (v99 >= v98 >> 1)
                      v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v98 > 1), v99 + 1, 1, v97);
                    v97[2] = v99 + 1;
                    v70 = &v97[5 * v99];
                    v70[4] = v72;
                    v70[5] = v73;
                    v70[6] = v74;
                    v70[7] = v75;
                    *((_BYTE *)v70 + 64) = v76;
                    *((_BYTE *)v70 + 65) = v164;
                    *((_BYTE *)v70 + 66) = log;
                    v178[0] = v97;
                    goto LABEL_48;
                  }
                }
              }
            }
LABEL_92:
            if ((v76 & 1) == 0)
              goto LABEL_88;
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((v76 & 1) == 0)
              goto LABEL_88;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((v76 & 1) == 0)
            goto LABEL_88;
        }
        swift_beginAccess();
        v93 = v177;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v163 = v93;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v163 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v93[2] + 1, 1, v93);
        v95 = v163[2];
        v94 = v163[3];
        if (v95 >= v94 >> 1)
          v163 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v94 > 1), v95 + 1, 1, v163);
        v163[2] = v95 + 1;
        v96 = &v163[5 * v95];
        v96[4] = v72;
        v96[5] = v73;
        v96[6] = v74;
        v96[7] = v75;
        *((_BYTE *)v96 + 64) = v76;
        *((_BYTE *)v96 + 65) = v164;
        *((_BYTE *)v96 + 66) = log;
        v177 = v163;
LABEL_48:
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = v153;
      v6 = v154;
      v40 = MEMORY[0x1E0DEE9D8];
LABEL_96:
      swift_bridgeObjectRelease();
      v100 = v159;
      swift_bridgeObjectRetain_n();
      v101 = Logger.logObject.getter();
      v102 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v101, v102))
      {
        v165 = v102;
        loga = v101;
        v103 = swift_slowAlloc();
        v162 = swift_slowAlloc();
        v173 = v162;
        *(_DWORD *)v103 = 136315650;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v103 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v157, v159, &v173);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v103 + 12) = 2080;
        swift_beginAccess();
        v104 = v178[0];
        v105 = *(_QWORD *)(v178[0] + 16);
        if (v105)
        {
          v172 = v40;
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v105, 0);
          v106 = v172;
          v107 = (void **)(v104 + 56);
          do
          {
            v109 = (uint64_t)*(v107 - 3);
            v108 = (uint64_t)*(v107 - 2);
            v110 = *v107;
            if (*v107)
            {
              v111 = (uint64_t)*(v107 - 1);
              v169 = (uint64_t)*(v107 - 3);
              v170 = v108;
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              v112._countAndFlagsBits = 60;
              v112._object = (void *)0xE100000000000000;
              String.append(_:)(v112);
              v113._countAndFlagsBits = v111;
              v113._object = v110;
              String.append(_:)(v113);
              v114._countAndFlagsBits = 62;
              v114._object = (void *)0xE100000000000000;
              String.append(_:)(v114);
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              v109 = v169;
              v108 = v170;
            }
            else
            {
              swift_bridgeObjectRetain();
            }
            v172 = v106;
            v116 = *(_QWORD *)(v106 + 16);
            v115 = *(_QWORD *)(v106 + 24);
            if (v116 >= v115 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v115 > 1, v116 + 1, 1);
              v106 = v172;
            }
            v107 += 5;
            *(_QWORD *)(v106 + 16) = v116 + 1;
            v117 = v106 + 16 * v116;
            *(_QWORD *)(v117 + 32) = v109;
            *(_QWORD *)(v117 + 40) = v108;
            --v105;
          }
          while (v105);
          swift_bridgeObjectRelease();
          v40 = MEMORY[0x1E0DEE9D8];
        }
        else
        {
          v106 = v40;
        }
        v169 = v106;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        v118 = BidirectionalCollection<>.joined(separator:)();
        v120 = v119;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v103 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v120, &v173);
        swift_bridgeObjectRelease();
        *(_WORD *)(v103 + 22) = 2080;
        swift_beginAccess();
        v121 = v177;
        v122 = v177[2];
        if (v122)
        {
          v172 = v40;
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v122, 0);
          v123 = v172;
          v124 = (void **)(v121 + 7);
          do
          {
            v125 = (uint64_t)*(v124 - 3);
            v126 = (uint64_t)*(v124 - 2);
            v127 = *v124;
            if (*v124)
            {
              v128 = (uint64_t)*(v124 - 1);
              v169 = (uint64_t)*(v124 - 3);
              v170 = v126;
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              v129._countAndFlagsBits = 60;
              v129._object = (void *)0xE100000000000000;
              String.append(_:)(v129);
              v130._countAndFlagsBits = v128;
              v130._object = v127;
              String.append(_:)(v130);
              v131._countAndFlagsBits = 62;
              v131._object = (void *)0xE100000000000000;
              String.append(_:)(v131);
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              v125 = v169;
              v126 = v170;
            }
            else
            {
              swift_bridgeObjectRetain();
            }
            v172 = v123;
            v133 = *(_QWORD *)(v123 + 16);
            v132 = *(_QWORD *)(v123 + 24);
            if (v133 >= v132 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v132 > 1, v133 + 1, 1);
              v123 = v172;
            }
            v124 += 5;
            *(_QWORD *)(v123 + 16) = v133 + 1;
            v134 = v123 + 16 * v133;
            *(_QWORD *)(v134 + 32) = v125;
            *(_QWORD *)(v134 + 40) = v126;
            --v122;
          }
          while (v122);
          swift_bridgeObjectRelease();
          v40 = MEMORY[0x1E0DEE9D8];
          v135 = v162;
        }
        else
        {
          v123 = v40;
          v135 = v162;
        }
        v169 = v123;
        v136 = BidirectionalCollection<>.joined(separator:)();
        v138 = v137;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v103 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v138, &v173);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B4BE6000, loga, v165, "[LinkParseExpansion] %s Compatible actions: [%s] Incompatible actions: [%s]", (uint8_t *)v103, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1B5E44758](v135, -1, -1);
        MEMORY[0x1B5E44758](v103, -1, -1);

        v10 = v153;
        v6 = v154;
        v51 = v156;
        v100 = v159;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        v51 = v156;
      }
      swift_bridgeObjectRetain();
      v52 = swift_bridgeObjectRetain();
      v53 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime18LinkActionMetadataVG_SS11appBundleId_SDySSypG8userDatats5NeverOTg504_s14de9Runtime16gh72FilterV010compatibleD7Actions13parseMetadata16expansionContextSaySS11appkL76_SDySSypG8userDatatGAA0d5ParseJ0V_AA0dL9Providing_ptFSSAG_AhItAA0deJ0VXEfU0_SSTf1cn_nTf4ng_n(v52, v157, v100);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      specialized Array.append<A>(contentsOf:)(v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_29:
      v48 = LinkExpansionContext.LinkActionMetadataView.next()();
      v49 = v54;
      v50 = v55;
      if (!v54)
      {
        v40 = (uint64_t)v174;
        break;
      }
    }
  }
  swift_release();
  swift_setDeallocating();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v40 + 16))
  {
    v139 = v6[1];
    v177 = v6[2];
    v178[0] = v139;
    v140 = v10;
    outlined retain of [String : Set<String>]((uint64_t)v178);
    outlined retain of [String : Set<String>]((uint64_t)&v177);
    swift_bridgeObjectRetain();
    v141 = v140;
    outlined retain of [String : Set<String>]((uint64_t)v178);
    outlined retain of [String : Set<String>]((uint64_t)&v177);
    swift_bridgeObjectRetain();
    v142 = Logger.logObject.getter();
    v143 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v142, v143))
    {
      v144 = swift_slowAlloc();
      logb = (os_log_t)swift_slowAlloc();
      v173 = (uint64_t)logb;
      *(_DWORD *)v144 = 136315394;
      swift_beginAccess();
      v145 = swift_bridgeObjectRetain();
      v146 = MEMORY[0x1B5E434D4](v145, MEMORY[0x1E0DEA968]);
      v148 = v147;
      swift_bridgeObjectRelease();
      v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v146, v148, &v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v144 + 12) = 2080;
      swift_bridgeObjectRetain();
      v149 = Set.description.getter();
      v151 = v150;
      swift_bridgeObjectRelease();
      v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v151, &v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      outlined release of [String : Set<String>]((uint64_t)v178);
      outlined release of [String : Set<String>]((uint64_t)&v177);

      swift_bridgeObjectRelease();
      outlined release of [String : Set<String>]((uint64_t)v178);
      outlined release of [String : Set<String>]((uint64_t)&v177);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B4BE6000, v142, v143, "[LinkParseExpansion] Skipped %s as the parse explicitly refers to %s", (uint8_t *)v144, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](logb, -1, -1);
      MEMORY[0x1B5E44758](v144, -1, -1);
      swift_bridgeObjectRelease();

    }
    else
    {

      outlined release of [String : Set<String>]((uint64_t)v178);
      outlined release of [String : Set<String>]((uint64_t)&v177);

      swift_bridgeObjectRelease();
      outlined release of [String : Set<String>]((uint64_t)v178);
      outlined release of [String : Set<String>]((uint64_t)&v177);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();

  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v175;
}

uint64_t specialized Sequence.flatMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  char isUniquelyReferenced_nonNull_native;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(type metadata accessor for USOParse() - 8);
  v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v7 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain();
  v8 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    closure #2 in LinkParseExpansion.expand(parses:)(v6, a2, &v32);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    v9 = v32;
    v10 = *(_QWORD *)(v32 + 16);
    v11 = *(_QWORD *)(v8 + 16);
    v12 = v11 + v10;
    if (__OFADD__(v11, v10))
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v12 <= *(_QWORD *)(v8 + 24) >> 1)
    {
      if (*(_QWORD *)(v9 + 16))
        goto LABEL_15;
    }
    else
    {
      if (v11 <= v12)
        v14 = v11 + v10;
      else
        v14 = v11;
      v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v8);
      if (*(_QWORD *)(v9 + 16))
      {
LABEL_15:
        v15 = *(_QWORD *)(v8 + 16);
        v16 = (*(_QWORD *)(v8 + 24) >> 1) - v15;
        v17 = type metadata accessor for ParseUserDataAttachment();
        if (v16 < v10)
          goto LABEL_30;
        v18 = *(_QWORD *)(v17 - 8);
        v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
        v20 = *(_QWORD *)(v18 + 72);
        v21 = v8 + v19 + v20 * v15;
        v22 = v9 + v19;
        v23 = v20 * v10;
        v24 = v21 + v23;
        v25 = v22 + v23;
        if (v22 < v24 && v21 < v25)
          goto LABEL_32;
        swift_arrayInitWithCopy();
        if (v10)
        {
          v27 = *(_QWORD *)(v8 + 16);
          v28 = __OFADD__(v27, v10);
          v29 = v27 + v10;
          if (v28)
            goto LABEL_31;
          *(_QWORD *)(v8 + 16) = v29;
        }
        goto LABEL_4;
      }
    }
    if (v10)
      goto LABEL_29;
LABEL_4:
    swift_bridgeObjectRelease();
    v6 += v7;
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      return v8;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  swift_release();
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for EntityTypeMetadata(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EntityTypeMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityTypeMetadata()
{
  return &type metadata for EntityTypeMetadata;
}

uint64_t type metadata accessor for LinkParseExpansion()
{
  return objc_opt_self();
}

uint64_t method lookup function for LinkParseExpansion()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LinkParseExpansion.__allocating_init(linkExpansionContext:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of LinkParseExpansion.expand(parses:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t outlined init with take of LNSystemProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LNSystemProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #2 in LinkParseExpansion.expand(parses:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #2 in LinkParseExpansion.expand(parses:)(a1, a2);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology13UsoIdentifierVG_SSs5NeverOTg504_s14d16KitRuntime13Linkf79ParserV29appBundleIdsFromMentionedApps7usoTaskShySSG0A8Ontology0eN0C_tFSSAG0E10G54Vcfu_33_6552710fe21eac3bc6e61b74c3fc727bAKSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *rawValue;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v25 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    if (one-time initialization token for kBundleAliasToFullyQualifiedBundleId != -1)
      swift_once();
    v23 = *(_QWORD *)(v3 + 72);
    v24 = v2;
    while (1)
    {
      rawValue = kBundleAliasToFullyQualifiedBundleId._rawValue;
      v10 = UsoIdentifier.value.getter();
      if (!rawValue[2])
        break;
      v12 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
      if ((v13 & 1) == 0)
        break;
      v14 = (uint64_t *)(rawValue[7] + 16 * v12);
      v15 = *v14;
      v16 = v14[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
      if (!v16)
        goto LABEL_10;
LABEL_11:
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v7 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v25;
      }
      v19 = *(_QWORD *)(v7 + 16);
      v18 = *(_QWORD *)(v7 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v7 = v25;
      }
      *(_QWORD *)(v7 + 16) = v19 + 1;
      v20 = v7 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v15;
      *(_QWORD *)(v20 + 40) = v16;
      v2 = v24;
      v8 += v23;
      if (!--v6)
        return v7;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
LABEL_10:
    v15 = UsoIdentifier.value.getter();
    v16 = v17;
    goto LABEL_11;
  }
  return v7;
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::Int *v11;
  Swift::Int v12;
  Swift::Int v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  Swift::Int v17;
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (Swift::Int *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

double LinkUsoParser.extractParseInformation(usoParse:)@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  char v5;

  specialized LinkUsoParser.extractParseInformation(usoParse:)((uint64_t)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = v5;
  return result;
}

void *one-time initialization function for kBundleAliasToFullyQualifiedBundleId()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE4F40;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v1;
  *(_QWORD *)(inited + 48) = 0xD000000000000013;
  *(_QWORD *)(inited + 56) = 0x80000001B4EFE370;
  *(_QWORD *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 72) = v2;
  *(_QWORD *)(inited + 80) = 0xD000000000000013;
  *(_QWORD *)(inited + 88) = 0x80000001B4EFE390;
  *(_QWORD *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 104) = v3;
  *(_QWORD *)(inited + 112) = 0xD000000000000019;
  *(_QWORD *)(inited + 120) = 0x80000001B4EFE3B0;
  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  kBundleAliasToFullyQualifiedBundleId._rawValue = result;
  return result;
}

id LinkParseMetadata.systemProtocol.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

uint64_t LinkParseMetadata.entityTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinkParseMetadata.mentionedEntityTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinkParseMetadata.mentionedAppBundleIds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LinkParseMetadata.noReferenceVerb.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t LinkParseMetadata.debugDescription.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;

  v16 = 0;
  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(128);
  v1._countAndFlagsBits = 0xD000000000000022;
  v1._object = (void *)0x80000001B4EFE240;
  String.append(_:)(v1);
  outlined init with take of LNSystemProtocol?(v0, (uint64_t)&v18);
  outlined init with take of LNSystemProtocol?((uint64_t)&v18, (uint64_t)&v15);
  outlined retain of RequestConjunctionInfo?(&v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LNSystemProtocol?);
  v2._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x797469746E65202CLL;
  v3._object = (void *)0xEF203A7365707954;
  String.append(_:)(v3);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
  v4._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0xD000000000000018;
  v5._object = (void *)0x80000001B4EFE270;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0xD000000000000019;
  v7._object = (void *)0x80000001B4EFE290;
  String.append(_:)(v7);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._object = (void *)0x80000001B4EFE2B0;
  v9._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v9);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    v10 = 1702195828;
  else
    v10 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    v11 = 0xE400000000000000;
  else
    v11 = 0xE500000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v16;
}

uint64_t LinkParseMetadata.init(systemProtocol:entityTypes:mentionedEntityTypes:mentionedAppBundleIds:noReferenceVerb:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5;
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance LinkParseMetadata()
{
  return LinkParseMetadata.debugDescription.getter();
}

uint64_t LinkUsoParser.extractParseInformation(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v4 = specialized LinkUsoParser.getSystemProtocol(usoTask:)(a1);
  specialized LinkUsoParser.extractIdentifiers(task:)();
  if (UsoTask.baseEntityAsString.getter() == 0x535F6E6F6D6D6F63 && v5 == 0xEE00676E69747465)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;
  v9 = swift_bridgeObjectRetain();
  v10 = specialized _ArrayProtocol.filter(_:)(v9, v6, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = specialized Dictionary.init<A>(grouping:by:)(v10);
  swift_bridgeObjectRelease();
  v12 = specialized _NativeDictionary.mapValues<A>(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13 = specialized LinkUsoParser.extractMentionedEntityTypes(usoTask:)(a1);
  v14 = specialized LinkUsoParser.appBundleIdsFromMentionedApps(usoTask:)();
  result = specialized LinkUsoParser.extractNoReferenceVerb(task:)();
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 24) = v14;
  *(_BYTE *)(a2 + 32) = result & 1;
  return result;
}

uint64_t UsoIdentifier.appBundleIdAsFullyQualifiedBundleId.getter()
{
  return UsoIdentifier.appBundleIdAsFullyQualifiedBundleId.getter(MEMORY[0x1E0DA05E0]);
}

uint64_t closure #1 in LinkUsoParser.appBundleIdsFromMentionedApps(usoTask:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  void (*v15)(char *, uint64_t, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v37;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v37 - v7;
  v9 = UsoIdentifier.appBundleId.getter();
  v11 = v10;
  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v15(v8, a1, v2);
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v15(v8, a1, v2);
    if ((v14 & 1) == 0)
    {
      v16 = *(void (**)(char *, uint64_t))(v3 + 8);
      v16(v8, v2);
LABEL_15:
      v23 = 0;
      goto LABEL_18;
    }
  }
  v17 = UsoIdentifier.namespace.getter();
  v19 = v18;
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v19)
  {
    v16 = *(void (**)(char *, uint64_t))(v3 + 8);
    v16(v8, v2);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (v17 == v20 && v19 == v21)
    v23 = 1;
  else
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v8, v2);
  swift_bridgeObjectRelease();
LABEL_18:
  v24 = UsoIdentifier.appBundleId.getter();
  v26 = v25;
  if (v24 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v26 == v27)
  {
    swift_bridgeObjectRelease_n();
    v15(v6, a1, v2);
  }
  else
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v15(v6, a1, v2);
    if ((v29 & 1) == 0)
    {
      v16(v6, v2);
LABEL_30:
      v35 = 0;
      return (v23 | v35) & 1;
    }
  }
  v30 = UsoIdentifier.namespace.getter();
  v32 = v31;
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v32)
  {
    v16(v6, v2);
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  if (v30 == v33 && v32 == v34)
    v35 = 1;
  else
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v16(v6, v2);
  swift_bridgeObjectRelease();
  return (v23 | v35) & 1;
}

uint64_t UsoIdentifier.valueAsFullyQualifiedAppBundleId.getter()
{
  return UsoIdentifier.appBundleIdAsFullyQualifiedBundleId.getter(MEMORY[0x1E0DA0678]);
}

uint64_t UsoIdentifier.appBundleIdAsFullyQualifiedBundleId.getter(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *rawValue;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = v1;
  v4 = type metadata accessor for UsoIdentifier();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for kBundleAliasToFullyQualifiedBundleId != -1)
    swift_once();
  rawValue = kBundleAliasToFullyQualifiedBundleId._rawValue;
  v9 = a1();
  if (!rawValue[2] || (v11 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v10), (v12 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v1, v4);
LABEL_8:
    v14 = ((uint64_t (*)(uint64_t))a1)(v16);
    goto LABEL_9;
  }
  v13 = (uint64_t *)(rawValue[7] + 16 * v11);
  v14 = *v13;
  v15 = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v3, v4);
  if (!v15)
    goto LABEL_8;
LABEL_9:
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

unint64_t one-time initialization function for verbMap()
{
  uint64_t inited;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  _QWORD *v30;
  uint64_t v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  id v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  _QWORD *v39;
  uint64_t v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;
  _QWORD *v45;
  uint64_t v46;
  id v47;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  _QWORD *v51;
  uint64_t v52;
  id v53;
  _QWORD *v54;
  uint64_t v55;
  id v56;
  _QWORD *v57;
  uint64_t v58;
  id v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (_:))>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EEBE90;
  v1 = (void *)objc_opt_self();
  v2 = objc_msgSend(v1, sel_changeBinarySettingSystemProtocol);
  v3 = swift_allocObject();
  strcpy((char *)(v3 + 16), "common_Setting");
  *(_BYTE *)(v3 + 31) = -18;
  *(_QWORD *)(v3 + 32) = v2;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v4 + 24) = v3;
  *(_QWORD *)(inited + 32) = 0x656C6261736964;
  *(_QWORD *)(inited + 40) = 0xE700000000000000;
  *(_QWORD *)(inited + 48) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?);
  *(_QWORD *)(inited + 56) = v4;
  v5 = objc_msgSend(v1, sel_changeBinarySettingSystemProtocol);
  v6 = swift_allocObject();
  strcpy((char *)(v6 + 16), "common_Setting");
  *(_BYTE *)(v6 + 31) = -18;
  *(_QWORD *)(v6 + 32) = v5;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(inited + 64) = 0x656C62616E65;
  *(_QWORD *)(inited + 72) = 0xE600000000000000;
  *(_QWORD *)(inited + 80) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 88) = v7;
  v8 = objc_msgSend(v1, sel_changeBinarySettingSystemProtocol);
  v9 = swift_allocObject();
  strcpy((char *)(v9 + 16), "common_Setting");
  *(_BYTE *)(v9 + 31) = -18;
  *(_QWORD *)(v9 + 32) = v8;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v10 + 24) = v9;
  *(_QWORD *)(inited + 96) = 0x656C67676F74;
  *(_QWORD *)(inited + 104) = 0xE600000000000000;
  *(_QWORD *)(inited + 112) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 120) = v10;
  *(_QWORD *)(inited + 128) = 0x7473756A6461;
  *(_QWORD *)(inited + 136) = 0xE600000000000000;
  *(_QWORD *)(inited + 144) = specialized thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?);
  *(_QWORD *)(inited + 152) = 0;
  v11 = objc_msgSend(v1, sel_closeEntityProtocol);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0xD000000000000010;
  v12[3] = 0x80000001B4EFDF70;
  v12[4] = v11;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v13 + 24) = v12;
  *(_QWORD *)(inited + 160) = 0x65736F6C63;
  *(_QWORD *)(inited + 168) = 0xE500000000000000;
  *(_QWORD *)(inited + 176) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 184) = v13;
  v14 = objc_msgSend(v1, sel_copyEntityProtocol);
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = 0xD000000000000010;
  v15[3] = 0x80000001B4EFDF70;
  v15[4] = v14;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v16 + 24) = v15;
  *(_QWORD *)(inited + 192) = 2037411683;
  *(_QWORD *)(inited + 200) = 0xE400000000000000;
  *(_QWORD *)(inited + 208) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 216) = v16;
  v17 = objc_msgSend(v1, sel_createEntitySystemProtocol);
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = 0xD000000000000010;
  v18[3] = 0x80000001B4EFDF70;
  v18[4] = v17;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v19 + 24) = v18;
  *(_QWORD *)(inited + 224) = 0x657461657263;
  *(_QWORD *)(inited + 232) = 0xE600000000000000;
  *(_QWORD *)(inited + 240) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 248) = v19;
  v20 = objc_msgSend(v1, sel_cutSystemProtocol);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = 0xD000000000000010;
  v21[3] = 0x80000001B4EFDF70;
  v21[4] = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v22 + 24) = v21;
  *(_QWORD *)(inited + 256) = 7632227;
  *(_QWORD *)(inited + 264) = 0xE300000000000000;
  *(_QWORD *)(inited + 272) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 280) = v22;
  v23 = objc_msgSend(v1, sel_deleteEntitySystemProtocol);
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = 0xD000000000000010;
  v24[3] = 0x80000001B4EFDF70;
  v24[4] = v23;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v25 + 24) = v24;
  *(_QWORD *)(inited + 288) = 0x6574656C6564;
  *(_QWORD *)(inited + 296) = 0xE600000000000000;
  *(_QWORD *)(inited + 304) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 312) = v25;
  v26 = objc_msgSend(v1, sel_enterMarkupProtocol);
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = 0xD000000000000010;
  v27[3] = 0x80000001B4EFDF70;
  v27[4] = v26;
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v28 + 24) = v27;
  *(_QWORD *)(inited + 320) = 0x72614D7265746E65;
  *(_QWORD *)(inited + 328) = 0xEB0000000070756BLL;
  *(_QWORD *)(inited + 336) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 344) = v28;
  v29 = objc_msgSend(v1, sel_exitMarkupProtocol);
  v30 = (_QWORD *)swift_allocObject();
  v30[2] = 0xD000000000000010;
  v30[3] = 0x80000001B4EFDF70;
  v30[4] = v29;
  v31 = swift_allocObject();
  *(_QWORD *)(v31 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v31 + 24) = v30;
  *(_QWORD *)(inited + 352) = 0x6B72614D74697865;
  *(_QWORD *)(inited + 360) = 0xEA00000000007075;
  *(_QWORD *)(inited + 368) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 376) = v31;
  v32 = objc_msgSend(v1, sel_favoriteEntityProtocol);
  v33 = (_QWORD *)swift_allocObject();
  v33[2] = 0xD000000000000010;
  v33[3] = 0x80000001B4EFDF70;
  v33[4] = v32;
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v34 + 24) = v33;
  *(_QWORD *)(inited + 384) = 1701538156;
  *(_QWORD *)(inited + 392) = 0xE400000000000000;
  *(_QWORD *)(inited + 400) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 408) = v34;
  v35 = objc_msgSend(v1, sel_openEntitySystemProtocol);
  v36 = (_QWORD *)swift_allocObject();
  v36[2] = 0xD000000000000010;
  v36[3] = 0x80000001B4EFDF70;
  v36[4] = v35;
  v37 = swift_allocObject();
  *(_QWORD *)(v37 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v37 + 24) = v36;
  *(_QWORD *)(inited + 416) = 1852141679;
  *(_QWORD *)(inited + 424) = 0xE400000000000000;
  *(_QWORD *)(inited + 432) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 440) = v37;
  v38 = objc_msgSend(v1, sel_pasteSystemProtocol);
  v39 = (_QWORD *)swift_allocObject();
  v39[2] = 0xD000000000000010;
  v39[3] = 0x80000001B4EFDF70;
  v39[4] = v38;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v40 + 24) = v39;
  *(_QWORD *)(inited + 448) = 0x6574736170;
  *(_QWORD *)(inited + 456) = 0xE500000000000000;
  *(_QWORD *)(inited + 464) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 472) = v40;
  v41 = objc_msgSend(v1, sel_previewEntityProtocol);
  v42 = (_QWORD *)swift_allocObject();
  v42[2] = 0xD000000000000010;
  v42[3] = 0x80000001B4EFDF70;
  v42[4] = v41;
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v43 + 24) = v42;
  *(_QWORD *)(inited + 480) = 0x77656976657270;
  *(_QWORD *)(inited + 488) = 0xE700000000000000;
  *(_QWORD *)(inited + 496) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 504) = v43;
  v44 = objc_msgSend(v1, sel_navigateSequentiallyProtocol);
  v45 = (_QWORD *)swift_allocObject();
  v45[2] = 0xD000000000000010;
  v45[3] = 0x80000001B4EFDF70;
  v45[4] = v44;
  v46 = swift_allocObject();
  *(_QWORD *)(v46 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v46 + 24) = v45;
  strcpy((char *)(inited + 512), "skipBackward");
  *(_BYTE *)(inited + 525) = 0;
  *(_WORD *)(inited + 526) = -5120;
  *(_QWORD *)(inited + 528) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 536) = v46;
  v47 = objc_msgSend(v1, sel_navigateSequentiallyProtocol);
  v48 = (_QWORD *)swift_allocObject();
  v48[2] = 0xD000000000000010;
  v48[3] = 0x80000001B4EFDF70;
  v48[4] = v47;
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v49 + 24) = v48;
  *(_QWORD *)(inited + 544) = 0x77726F4670696B73;
  *(_QWORD *)(inited + 552) = 0xEB00000000647261;
  *(_QWORD *)(inited + 560) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 568) = v49;
  v50 = objc_msgSend(v1, sel_searchSystemProtocol);
  v51 = (_QWORD *)swift_allocObject();
  v51[2] = 0xD000000000000010;
  v51[3] = 0x80000001B4EFDF70;
  v51[4] = v50;
  v52 = swift_allocObject();
  *(_QWORD *)(v52 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v52 + 24) = v51;
  *(_QWORD *)(inited + 576) = 0x736972616D6D7573;
  *(_QWORD *)(inited + 584) = 0xE900000000000065;
  *(_QWORD *)(inited + 592) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 600) = v52;
  v53 = objc_msgSend(v1, sel_favoriteEntityProtocol);
  v54 = (_QWORD *)swift_allocObject();
  v54[2] = 0xD000000000000010;
  v54[3] = 0x80000001B4EFDF70;
  v54[4] = v53;
  v55 = swift_allocObject();
  *(_QWORD *)(v55 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v55 + 24) = v54;
  *(_QWORD *)(inited + 608) = 0x656B696C6E75;
  *(_QWORD *)(inited + 616) = 0xE600000000000000;
  *(_QWORD *)(inited + 624) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 632) = v55;
  v56 = objc_msgSend(v1, sel_undoSystemProtocol);
  v57 = (_QWORD *)swift_allocObject();
  v57[2] = 0xD000000000000010;
  v57[3] = 0x80000001B4EFE2D0;
  v57[4] = v56;
  v58 = swift_allocObject();
  *(_QWORD *)(v58 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v58 + 24) = v57;
  *(_QWORD *)(inited + 640) = 1868852853;
  *(_QWORD *)(inited + 648) = 0xE400000000000000;
  *(_QWORD *)(inited + 656) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 664) = v58;
  v59 = objc_msgSend(v1, sel_undoSystemProtocol);
  v60 = (_QWORD *)swift_allocObject();
  v60[2] = 0xD000000000000010;
  v60[3] = 0x80000001B4EFE2D0;
  v60[4] = v59;
  v61 = swift_allocObject();
  *(_QWORD *)(v61 + 16) = closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)partial apply;
  *(_QWORD *)(v61 + 24) = v60;
  *(_QWORD *)(inited + 672) = 1868850546;
  *(_QWORD *)(inited + 680) = 0xE400000000000000;
  *(_QWORD *)(inited + 688) = thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)partial apply;
  *(_QWORD *)(inited + 696) = v61;
  result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static LinkUsoParser.verbMap = result;
  return result;
}

void *(*static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)(uint64_t a1, uint64_t a2, void *a3))(uint64_t a1)
{
  _QWORD *v6;
  id v7;

  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v7 = a3;
  return partial apply for closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:);
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = specialized static LinkUsoParser.adjustmentTaskProtocolExtractor(usoTask:)();
  *a1 = result;
  return result;
}

uint64_t *LinkUsoParser.verbMap.unsafeMutableAddressor()
{
  if (one-time initialization token for verbMap != -1)
    swift_once();
  return &static LinkUsoParser.verbMap;
}

uint64_t static LinkUsoParser.verbMap.getter()
{
  if (one-time initialization token for verbMap != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

void *closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v12;

  v8 = UsoTask.baseEntityAsString.getter();
  v9 = v7;
  if (v8 == a2 && v7 == a3
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v8 == 0x6E456F4E5F6F7375 && v9 == 0xEC00000079746974)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0)
      return 0;
  }
  v10 = a4;
  return a4;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  char v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t result;
  uint64_t v55;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8)
    goto LABEL_23;
  v10 = v7;
  v11 = v8;
  v55 = v9;
  v12 = (_QWORD *)*a5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v18 = v13;
  if (v12[3] >= v17)
  {
    if ((a4 & 1) != 0)
    {
      v21 = (_QWORD *)*a5;
      if ((v13 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v21 = (_QWORD *)*a5;
      if ((v18 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v21[(v14 >> 6) + 8] |= 1 << v14;
    v26 = (uint64_t *)(v21[6] + 16 * v14);
    *v26 = v10;
    v26[1] = v11;
    *(_QWORD *)(v21[7] + 8 * v14) = v55;
    v27 = v21[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v21[2] = v29;
LABEL_13:
    v30 = specialized LazyMapSequence.Iterator.next()();
    if (v31)
    {
      v33 = v30;
      v34 = v31;
      v35 = v32;
      do
      {
        v42 = (_QWORD *)*a5;
        v43 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34);
        v45 = v42[2];
        v46 = (v44 & 1) == 0;
        v28 = __OFADD__(v45, v46);
        v47 = v45 + v46;
        if (v28)
          goto LABEL_24;
        v48 = v44;
        if (v42[3] < v47)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, 1);
          v43 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v34);
          if ((v48 & 1) != (v49 & 1))
            goto LABEL_26;
        }
        v50 = (_QWORD *)*a5;
        if ((v48 & 1) != 0)
        {
          v36 = 8 * v43;
          v37 = *(_QWORD *)(v50[7] + 8 * v43);
          swift_bridgeObjectRetain();
          v38 = specialized Set.union<A>(_:)(v35, v37);
          swift_bridgeObjectRelease();
          v39 = v50[7];
          swift_bridgeObjectRelease();
          *(_QWORD *)(v39 + v36) = v38;
        }
        else
        {
          v50[(v43 >> 6) + 8] |= 1 << v43;
          v51 = (uint64_t *)(v50[6] + 16 * v43);
          *v51 = v33;
          v51[1] = v34;
          *(_QWORD *)(v50[7] + 8 * v43) = v35;
          v52 = v50[2];
          v28 = __OFADD__(v52, 1);
          v53 = v52 + 1;
          if (v28)
            goto LABEL_25;
          v50[2] = v53;
        }
        v33 = specialized LazyMapSequence.Iterator.next()();
        v34 = v40;
        v35 = v41;
      }
      while (v40);
    }
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [Int : @Sendable ()].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1);
  v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
  if ((v18 & 1) == (v20 & 1))
  {
    v14 = v19;
    v21 = (_QWORD *)*a5;
    if ((v18 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v22 = 8 * v14;
    v23 = *(_QWORD *)(v21[7] + 8 * v14);
    swift_bridgeObjectRetain();
    v24 = specialized Set.union<A>(_:)(v55, v23);
    swift_bridgeObjectRelease();
    v25 = v21[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v25 + v22) = v24;
    goto LABEL_13;
  }
LABEL_26:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;

  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized LazyMapSequence.Iterator.next()();
  if (!v8)
    goto LABEL_24;
  v11 = v7;
  v12 = v8;
  v13 = v9;
  v14 = v10;
  v15 = (_QWORD *)*a5;
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v21 = v16;
  if (v15[3] >= v20)
  {
    if ((a4 & 1) != 0)
    {
      v24 = (_QWORD *)*a5;
      if ((v16 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v24 = (_QWORD *)*a5;
      if ((v21 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v24[(v17 >> 6) + 8] |= 1 << v17;
    v26 = (uint64_t *)(v24[6] + 16 * v17);
    *v26 = v11;
    v26[1] = v12;
    v27 = (_QWORD *)(v24[7] + 16 * v17);
    *v27 = v13;
    v27[1] = v14;
    v28 = v24[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v24[2] = v30;
LABEL_13:
    v31 = specialized LazyMapSequence.Iterator.next()();
    if (v32)
    {
      v35 = v31;
      v36 = v32;
      v37 = v33;
      v38 = v34;
      do
      {
        v43 = (_QWORD *)*a5;
        v45 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
        v46 = v43[2];
        v47 = (v44 & 1) == 0;
        v48 = v46 + v47;
        if (__OFADD__(v46, v47))
          goto LABEL_25;
        v49 = v44;
        if (v43[3] < v48)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v48, 1);
          v50 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
          if ((v49 & 1) != (v51 & 1))
            goto LABEL_27;
          v45 = v50;
        }
        v52 = (_QWORD *)*a5;
        if ((v49 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v39 = (_QWORD *)(v52[7] + 16 * v45);
          swift_bridgeObjectRelease();
          *v39 = v37;
          v39[1] = v38;
        }
        else
        {
          v52[(v45 >> 6) + 8] |= 1 << v45;
          v53 = (uint64_t *)(v52[6] + 16 * v45);
          *v53 = v35;
          v53[1] = v36;
          v54 = (_QWORD *)(v52[7] + 16 * v45);
          *v54 = v37;
          v54[1] = v38;
          v55 = v52[2];
          v29 = __OFADD__(v55, 1);
          v56 = v55 + 1;
          if (v29)
            goto LABEL_26;
          v52[2] = v56;
        }
        v35 = specialized LazyMapSequence.Iterator.next()();
        v36 = v40;
        v37 = v41;
        v38 = v42;
      }
      while (v40);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [Int : @Sendable ()].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, a4 & 1);
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
  if ((v21 & 1) == (v23 & 1))
  {
    v17 = v22;
    v24 = (_QWORD *)*a5;
    if ((v21 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    swift_bridgeObjectRelease();
    v25 = (_QWORD *)(v24[7] + 16 * v17);
    swift_bridgeObjectRelease();
    *v25 = v13;
    v25[1] = v14;
    goto LABEL_13;
  }
LABEL_27:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  Swift::Int *v33;
  Swift::Int v34;
  Swift::Int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  uint64_t v52;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
  result = static _DictionaryStorage.copy(original:)();
  v3 = (_QWORD *)result;
  v4 = 0;
  v45 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v42 = v6;
  v43 = (unint64_t)(v8 + 63) >> 6;
  v44 = result + 64;
  v11 = MEMORY[0x1E0DEE9D8];
  v41 = (_QWORD *)result;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v12 | (v4 << 6); ; i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v45 + 48) + 16 * i);
    v18 = v17[1];
    v50 = *v17;
    v19 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * i);
    v20 = *(_QWORD *)(v19 + 16);
    if (v20)
    {
      v48 = i;
      v49 = v10;
      v46 = v4;
      v51 = v11;
      v47 = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
      v21 = v51;
      v22 = *(_QWORD *)(type metadata accessor for UsoIdentifier() - 8);
      v23 = v19 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
      v24 = *(_QWORD *)(v22 + 72);
      do
      {
        v25 = UsoIdentifier.value.getter();
        v27 = v26;
        v51 = v21;
        v29 = *(_QWORD *)(v21 + 16);
        v28 = *(_QWORD *)(v21 + 24);
        v30 = v29 + 1;
        if (v29 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          v21 = v51;
        }
        *(_QWORD *)(v21 + 16) = v30;
        v31 = v21 + 16 * v29;
        *(_QWORD *)(v31 + 32) = v25;
        *(_QWORD *)(v31 + 40) = v27;
        v23 += v24;
        --v20;
      }
      while (v20);
      v52 = Set.init(minimumCapacity:)();
      v3 = v41;
      v11 = MEMORY[0x1E0DEE9D8];
      v4 = v46;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v30 = *(_QWORD *)(v11 + 16);
      v32 = Set.init(minimumCapacity:)();
      v52 = v32;
      if (!v30)
      {
        v36 = v32;
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      v47 = v18;
      v48 = i;
      v49 = v10;
      v21 = v11;
    }
    v33 = (Swift::Int *)(v21 + 40);
    do
    {
      v35 = *(v33 - 1);
      v34 = *v33;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v51, v35, v34);
      swift_bridgeObjectRelease();
      v33 += 2;
      --v30;
    }
    while (v30);
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v36 = v52;
    i = v48;
    v10 = v49;
    v18 = v47;
LABEL_30:
    *(_QWORD *)(v44 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v37 = (_QWORD *)(v3[6] + 16 * i);
    *v37 = v50;
    v37[1] = v18;
    *(_QWORD *)(v3[7] + 8 * i) = v36;
    v38 = v3[2];
    v39 = __OFADD__(v38, 1);
    v40 = v38 + 1;
    if (v39)
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v3[2] = v40;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v14 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_36;
    if (v14 >= v43)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v42 + 8 * v14);
    ++v4;
    if (!v15)
    {
      v4 = v14 + 1;
      if (v14 + 1 >= v43)
        return (uint64_t)v3;
      v15 = *(_QWORD *)(v42 + 8 * v4);
      if (!v15)
      {
        v4 = v14 + 2;
        if (v14 + 2 >= v43)
          return (uint64_t)v3;
        v15 = *(_QWORD *)(v42 + 8 * v4);
        if (!v15)
          break;
      }
    }
LABEL_18:
    v10 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v43)
    return (uint64_t)v3;
  v15 = *(_QWORD *)(v42 + 8 * v16);
  if (v15)
  {
    v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v4 >= v43)
      return (uint64_t)v3;
    v15 = *(_QWORD *)(v42 + 8 * v4);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;

  v28 = a3;
  v6 = type metadata accessor for UsoIdentifier();
  v7 = MEMORY[0x1E0C80A78](v6);
  v29 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v24 - v10;
  result = MEMORY[0x1E0DEE9D8];
  v31 = MEMORY[0x1E0DEE9D8];
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v24[1] = v3;
    v25 = v9;
    v14 = *(_QWORD *)(v9 + 72);
    v26 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v27 = a2;
    v15 = a1 + v26;
    v30 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    v16 = v9;
    v30(v11, a1 + v26, v6);
    while (1)
    {
      v17 = UsoIdentifier.namespace.getter();
      if (!v18)
        break;
      if (v17 == a2 && v18 == v28)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v19 & 1) == 0)
          break;
      }
      v20 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
      v20(v29, v11, v6);
      v21 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1);
        v21 = v31;
      }
      v23 = *(_QWORD *)(v21 + 16);
      v22 = *(_QWORD *)(v21 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        v21 = v31;
      }
      *(_QWORD *)(v21 + 16) = v23 + 1;
      v20((char *)(v21 + v26 + v23 * v14), v29, v6);
      v31 = v21;
      a2 = v27;
      v16 = v25;
LABEL_4:
      v15 += v14;
      if (!--v13)
        return v31;
      v30(v11, v15, v6);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v6);
    goto LABEL_4;
  }
  return result;
}

uint64_t specialized LinkUsoParser.isCancelTask(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;

  v0 = type metadata accessor for Siri_Nlu_External_UserParse();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = USOParse.userParse.getter();
  v8 = MEMORY[0x1B5E3FA6C](v7);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v11 = *(_QWORD *)(v10 - 8);
  if (v9)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v6, v8 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), v10);
    v12 = 0;
  }
  else
  {
    v12 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6, v12, 1, v10);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v6);
    v13 = 0;
  }
  else
  {
    v13 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v6, v10);
  }
  return v13 & 1;
}

unint64_t specialized LinkUsoParser.getTask(_:)()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  unint64_t v16;
  _BYTE v17[16];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v0);
  v2 = &v17[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for Siri_Nlu_External_UserParse();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = USOParse.userParse.getter();
  v12 = MEMORY[0x1B5E3FA6C](v11);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  if (*(_QWORD *)(v12 + 16))
  {
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v8 + 16))(v2, v12 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v7);
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v2, v13, 1, v7);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v2, 1, v7) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v2);
    return 0;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v10, v2, v7);
  result = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  v16 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v14)
      goto LABEL_11;
  }
  else
  {
    v14 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v14)
    {
LABEL_11:
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
      return v14;
    }
  }
  if ((v16 & 0xC000000000000001) != 0)
  {
    v14 = MEMORY[0x1B5E43B94](0, v16);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(_QWORD *)(v16 + 32);
    swift_retain();
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t specialized LinkUsoParser.getSystemProtocol(usoTask:)(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  void (*v8)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = UsoTask.verbString.getter();
  v4 = v3;
  if (one-time initialization token for verbMap != -1)
    swift_once();
  v5 = static LinkUsoParser.verbMap;
  if (*(_QWORD *)(static LinkUsoParser.verbMap + 16))
  {
    swift_bridgeObjectRetain();
    v6 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v4);
    if ((v7 & 1) != 0)
    {
      v8 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(*(_QWORD *)(v5 + 56) + 16 * v6);
      swift_retain();
      swift_bridgeObjectRelease();
      v17 = a1;
      v8(&v16, &v17);
      swift_release();
      v9 = v16;
      if (v16)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  if (one-time initialization token for kLogger != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)kLogger);
  swift_bridgeObjectRetain();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v17 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain();
    v16 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v4, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B4BE6000, v11, v12, "[LinkParseExpansion] Could not find systemProtocol for verb %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v14, -1, -1);
    MEMORY[0x1B5E44758](v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 0;
}

uint64_t specialized LinkUsoParser.extractIdentifiers(task:)()
{
  uint64_t inited;
  uint64_t v1;
  unint64_t v2;
  char v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UsoValue?>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B4EE3BA0;
  v1 = UsoTask.arguments.getter();
  if (!*(_QWORD *)(v1 + 16)
    || (v2 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065), (v3 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 32) = 0;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_5;
LABEL_10:
    v5 = 0;
    goto LABEL_11;
  }
  if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_10;
LABEL_5:
  if ((v4 & 0xC000000000000001) != 0)
    goto LABEL_144;
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = swift_retain();
    goto LABEL_11;
  }
  __break(1u);
  do
  {
    v11 = MEMORY[0x1B5E43B94](0, v4);
LABEL_22:
    while (1)
    {
      *(_QWORD *)(inited + 40) = v11;
      swift_bridgeObjectRelease();
      while (1)
      {
        v64 = inited;
        v4 = (unint64_t)&v64;
        specialized Array._endMutation()();
        v13 = v64;
        v14 = MEMORY[0x1E0DEE9D8];
        v64 = MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(v13 + 32))
        {
          v15 = swift_retain();
          MEMORY[0x1B5E43498](v15);
          if (*(_QWORD *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          v4 = (unint64_t)&v64;
          specialized Array._endMutation()();
        }
        if (*(_QWORD *)(v13 + 40))
        {
          v16 = swift_retain();
          MEMORY[0x1B5E43498](v16);
          if (*(_QWORD *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          v4 = (unint64_t)&v64;
          specialized Array._endMutation()();
        }
        inited = v64;
        swift_bridgeObjectRelease();
        v64 = v14;
        if ((unint64_t)inited >> 62)
          goto LABEL_135;
        v17 = *(_QWORD *)((inited & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v17)
        {
LABEL_139:
          swift_bridgeObjectRelease();
          return MEMORY[0x1E0DEE9D8];
        }
        while (2)
        {
          if (v17 >= 1)
          {
            v18 = 0;
            v19 = MEMORY[0x1E0DEE9D8];
LABEL_38:
            if ((inited & 0xC000000000000001) != 0)
              MEMORY[0x1B5E43B94](v18, inited);
            else
              swift_retain();
            v20 = dispatch thunk of UsoValue.getUsoIdentifiers()();
            specialized Array.append<A>(contentsOf:)(v20);
            if (!dispatch thunk of UsoValue.getAsEntity()())
              goto LABEL_36;
            v21 = UsoEntity.usoIdentifiers.getter();
            specialized Array.append<A>(contentsOf:)(v21);
            v22 = UsoEntity.attributes.getter();
            if (!*(_QWORD *)(v22 + 16))
              goto LABEL_50;
            v23 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000);
            if ((v24 & 1) == 0)
              goto LABEL_50;
            v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if (v25 >> 62)
            {
              swift_bridgeObjectRetain();
              v57 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v57)
                goto LABEL_50;
LABEL_46:
              if ((v25 & 0xC000000000000001) != 0)
              {
                MEMORY[0x1B5E43B94](0, v25);
              }
              else
              {
                if (!*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
LABEL_132:
                  __break(1u);
LABEL_133:
                  __break(1u);
LABEL_134:
                  __break(1u);
LABEL_135:
                  if (inited < 0)
                    v4 = inited;
                  else
                    v4 = inited & 0xFFFFFFFFFFFFFF8;
                  swift_bridgeObjectRetain();
                  v17 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (!v17)
                    goto LABEL_139;
                  continue;
                }
                swift_retain();
              }
              swift_bridgeObjectRelease();
              v26 = dispatch thunk of UsoValue.getUsoIdentifiers()();
              swift_release();
            }
            else
            {
              if (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_46;
LABEL_50:
              swift_bridgeObjectRelease();
              v26 = v19;
            }
            specialized Array.append<A>(contentsOf:)(v26);
            v27 = UsoEntity.attributes.getter();
            if (!*(_QWORD *)(v27 + 16))
              goto LABEL_59;
            v28 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000001B4EFE3F0);
            if ((v29 & 1) == 0)
              goto LABEL_59;
            v30 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v28);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if (v30 >> 62)
            {
              swift_bridgeObjectRetain();
              v58 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v58)
                goto LABEL_59;
LABEL_55:
              if ((v30 & 0xC000000000000001) != 0)
              {
                MEMORY[0x1B5E43B94](0, v30);
              }
              else
              {
                if (!*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_132;
                swift_retain();
              }
              swift_bridgeObjectRelease();
              v31 = dispatch thunk of UsoValue.getUsoIdentifiers()();
              swift_release();
            }
            else
            {
              if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_55;
LABEL_59:
              swift_bridgeObjectRelease();
              v31 = v19;
            }
            specialized Array.append<A>(contentsOf:)(v31);
            v32 = UsoEntity.attributes.getter();
            if (!*(_QWORD *)(v32 + 16))
              goto LABEL_76;
            v33 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
            if ((v34 & 1) == 0)
              goto LABEL_76;
            v35 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v33);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if (!(v35 >> 62))
            {
              if (*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_64;
LABEL_76:
              swift_bridgeObjectRelease();
LABEL_77:
              v43 = UsoEntity.attributes.getter();
              if (*(_QWORD *)(v43 + 16))
              {
                v44 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000001B4EFE3D0);
                if ((v45 & 1) != 0)
                {
                  v46 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v44);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  if (v46 >> 62)
                  {
                    swift_bridgeObjectRetain();
                    v60 = _CocoaArrayWrapper.endIndex.getter();
                    swift_bridgeObjectRelease();
                    if (!v60)
                    {
LABEL_116:
                      swift_release();
                      swift_release();
                      swift_bridgeObjectRelease();
                      goto LABEL_37;
                    }
                  }
                  else if (!*(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10))
                  {
                    goto LABEL_116;
                  }
                  if ((v46 & 0xC000000000000001) != 0)
                  {
                    MEMORY[0x1B5E43B94](0, v46);
                  }
                  else
                  {
                    if (!*(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10))
                      goto LABEL_134;
                    swift_retain();
                  }
                  swift_bridgeObjectRelease();
                  v47 = dispatch thunk of UsoValue.getAsEntity()();
                  swift_release();
                  if (v47)
                  {
                    v48 = UsoEntity.usoIdentifiers.getter();
                    specialized Array.append<A>(contentsOf:)(v48);
                    v49 = UsoEntity.attributes.getter();
                    if (!*(_QWORD *)(v49 + 16))
                      goto LABEL_105;
                    v50 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000);
                    if ((v51 & 1) == 0)
                      goto LABEL_105;
                    v4 = *(_QWORD *)(*(_QWORD *)(v49 + 56) + 8 * v50);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    if (v4 >> 62)
                    {
                      swift_bridgeObjectRetain();
                      v62 = _CocoaArrayWrapper.endIndex.getter();
                      swift_bridgeObjectRelease();
                      if (!v62)
                        goto LABEL_105;
LABEL_89:
                      if ((v4 & 0xC000000000000001) != 0)
                      {
                        MEMORY[0x1B5E43B94](0, v4);
                      }
                      else
                      {
                        if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
                          goto LABEL_142;
                        swift_retain();
                      }
                      swift_bridgeObjectRelease();
                      dispatch thunk of UsoValue.getUsoIdentifiers()();
                      swift_release();
                    }
                    else
                    {
                      if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
                        goto LABEL_89;
LABEL_105:
                      swift_bridgeObjectRelease();
                    }
                    v56 = swift_bridgeObjectRetain();
                    specialized Array.append<A>(contentsOf:)(v56);
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_release();
                  }
                  else
                  {
                    swift_release();
                  }
                  swift_release();
                  v19 = MEMORY[0x1E0DEE9D8];
                  goto LABEL_37;
                }
              }
              swift_release();
              swift_bridgeObjectRelease();
LABEL_36:
              swift_release();
LABEL_37:
              if (v17 == ++v18)
              {
                swift_bridgeObjectRelease();
                return v64;
              }
              goto LABEL_38;
            }
            swift_bridgeObjectRetain();
            v59 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v59)
              goto LABEL_76;
LABEL_64:
            if ((v35 & 0xC000000000000001) != 0)
            {
              MEMORY[0x1B5E43B94](0, v35);
            }
            else
            {
              if (!*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_133;
              swift_retain();
            }
            swift_bridgeObjectRelease();
            v36 = dispatch thunk of UsoValue.getAsEntity()();
            swift_release();
            if (!v36)
              goto LABEL_77;
            v37 = UsoEntity.usoIdentifiers.getter();
            specialized Array.append<A>(contentsOf:)(v37);
            v38 = UsoEntity.attributes.getter();
            if (*(_QWORD *)(v38 + 16)
              && (v39 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000),
                  (v40 & 1) != 0))
            {
              v4 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v39);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              if (v4 >> 62)
              {
                swift_bridgeObjectRetain();
                v61 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                v41 = MEMORY[0x1E0DEE9D8];
                if (!v61)
                  goto LABEL_122;
LABEL_72:
                if ((v4 & 0xC000000000000001) != 0)
                {
                  MEMORY[0x1B5E43B94](0, v4);
                }
                else
                {
                  if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
                    goto LABEL_141;
                  swift_retain();
                }
                swift_bridgeObjectRelease();
                v42 = dispatch thunk of UsoValue.getUsoIdentifiers()();
                swift_release();
              }
              else
              {
                v41 = MEMORY[0x1E0DEE9D8];
                if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_72;
LABEL_122:
                swift_bridgeObjectRelease();
                v42 = v41;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              v42 = MEMORY[0x1E0DEE9D8];
            }
            specialized Array.append<A>(contentsOf:)(v42);
            v52 = UsoEntity.attributes.getter();
            if (!*(_QWORD *)(v52 + 16))
              goto LABEL_103;
            v53 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000001B4EFE3F0);
            if ((v54 & 1) == 0)
              goto LABEL_103;
            v4 = *(_QWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if (v4 >> 62)
            {
              swift_bridgeObjectRetain();
              v63 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v63)
                goto LABEL_103;
LABEL_99:
              if ((v4 & 0xC000000000000001) != 0)
              {
                MEMORY[0x1B5E43B94](0, v4);
              }
              else
              {
                if (!*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_143;
                swift_retain();
              }
              swift_bridgeObjectRelease();
              dispatch thunk of UsoValue.getUsoIdentifiers()();
              swift_release();
            }
            else
            {
              if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_99;
LABEL_103:
              swift_bridgeObjectRelease();
            }
            v55 = swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v55);
            swift_bridgeObjectRelease();
            swift_release();
            v19 = MEMORY[0x1E0DEE9D8];
            goto LABEL_77;
          }
          break;
        }
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        v5 = MEMORY[0x1B5E43B94](0, v4);
LABEL_11:
        *(_QWORD *)(inited + 32) = v5;
        swift_bridgeObjectRelease();
LABEL_12:
        v7 = UsoTask.arguments.getter();
        if (*(_QWORD *)(v7 + 16))
        {
          v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x746567726174, 0xE600000000000000);
          if ((v9 & 1) != 0)
            break;
        }
        swift_bridgeObjectRelease();
        *(_QWORD *)(inited + 40) = 0;
      }
      v4 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
      swift_bridgeObjectRetain();
      result = swift_bridgeObjectRelease();
      if (v4 >> 62)
        break;
      if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_16;
LABEL_21:
      v11 = 0;
    }
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v12)
      goto LABEL_21;
LABEL_16:
    ;
  }
  while ((v4 & 0xC000000000000001) != 0);
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = swift_retain();
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t specialized LinkUsoParser.getEntityTypes(usoTask:identifiers:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (UsoTask.baseEntityAsString.getter() == 0x535F6E6F6D6D6F63 && v0 == 0xEE00676E69747465)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = swift_bridgeObjectRetain();
  v5 = specialized _ArrayProtocol.filter(_:)(v4, v1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = specialized Dictionary.init<A>(grouping:by:)(v5);
  swift_bridgeObjectRelease();
  v7 = specialized _NativeDictionary.mapValues<A>(_:)(v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized LinkUsoParser.extractMentionedEntityTypes(usoTask:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t result;
  char v26;
  unint64_t v27;
  _UNKNOWN **v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  void (*v48)(char *, char *, uint64_t);
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  void (*v62)(unint64_t, char *, uint64_t);
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;

  v2 = type metadata accessor for UsoIdentifier();
  v75 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v73 = (char *)v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v74 = (char *)v67 - v6;
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (unint64_t)v67 - v8;
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v67 - v10;
  v12 = UsoTask.baseEntityAsString.getter();
  v14 = v13;
  if (v12 == 0x535F6E6F6D6D6F63 && v13 == 0xEE00676E69747465)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    a1 = UsoTask.arguments.getter();
    if (!*(_QWORD *)(a1 + 16))
      goto LABEL_22;
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
    if ((v17 & 1) == 0)
      goto LABEL_22;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (!(v14 >> 62))
    {
      if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_22;
LABEL_9:
      if ((v14 & 0xC000000000000001) == 0)
      {
        if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_113;
        }
        swift_retain();
LABEL_12:
        swift_bridgeObjectRelease();
        a1 = dispatch thunk of UsoValue.getAsEntity()();
        swift_release();
        if (!a1)
          return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
        v18 = UsoEntity.attributes.getter();
        if (!*(_QWORD *)(v18 + 16))
          goto LABEL_114;
        v19 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000);
        if ((v20 & 1) == 0)
          goto LABEL_114;
        v14 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v19);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (!(v14 >> 62))
        {
          if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_17:
            if ((v14 & 0xC000000000000001) != 0)
              goto LABEL_116;
            if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_118;
            }
            v21 = v2;
            v2 = *(_QWORD *)(v14 + 32);
            swift_retain();
            goto LABEL_20;
          }
          goto LABEL_114;
        }
LABEL_113:
        swift_bridgeObjectRetain();
        v66 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v66)
          goto LABEL_17;
LABEL_114:
        swift_release();
LABEL_22:
        swift_bridgeObjectRelease();
        return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      }
LABEL_111:
      MEMORY[0x1B5E43B94](0, v14);
      goto LABEL_12;
    }
LABEL_108:
    swift_bridgeObjectRetain();
    a1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!a1)
      goto LABEL_22;
    goto LABEL_9;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
    goto LABEL_5;
  v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v26 = 0;
  v27 = 0;
  v69 = 0;
  v72 = *MEMORY[0x1E0DA2C68];
  v28 = &off_1E683D000;
  while (1)
  {
    v29 = v26;
    if (v27 >= (unint64_t)v28[455])
    {
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
      goto LABEL_108;
    }
    v30 = (char *)&outlined read-only object #0 of LinkUsoParser.extractMentionedEntityTypes(usoTask:) + 16 * v27;
    v32 = *((_QWORD *)v30 + 4);
    v31 = *((_QWORD *)v30 + 5);
    swift_bridgeObjectRetain();
    v14 = a1;
    v11 = (char *)UsoTask.arguments.getter();
    if (!*((_QWORD *)v11 + 2)
      || (v14 = (unint64_t)v11, v33 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31), (v34 & 1) == 0))
    {
      swift_bridgeObjectRelease();
LABEL_26:
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    v14 = *(_QWORD *)(*((_QWORD *)v11 + 7) + 8 * v33);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      v11 = (char *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v11)
        goto LABEL_26;
    }
    else if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_26;
    }
    if ((v14 & 0xC000000000000001) != 0)
    {
      v11 = (char *)MEMORY[0x1B5E43B94](0, v14);
    }
    else
    {
      if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_105;
      v11 = *(char **)(v14 + 32);
      swift_retain();
    }
    swift_bridgeObjectRelease();
    v14 = (unint64_t)v11;
    v35 = dispatch thunk of UsoValue.getAsEntity()();
    swift_release();
    if (!v35)
      goto LABEL_27;
    v14 = v35;
    v11 = (char *)UsoEntity.attributes.getter();
    if (*((_QWORD *)v11 + 2))
    {
      v14 = (unint64_t)v11;
      v36 = specialized __RawDictionaryStorage.find<A>(_:)(1701869940, 0xE400000000000000);
      if ((v37 & 1) != 0)
        break;
    }
LABEL_70:
    swift_release();
    swift_bridgeObjectRelease();
LABEL_27:
    v26 = 1;
    v27 = 1;
    if ((v29 & 1) != 0)
    {
      swift_arrayDestroy();
      return v9;
    }
  }
  v14 = *(_QWORD *)(*((_QWORD *)v11 + 7) + 8 * v36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = (char *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v11)
      goto LABEL_70;
  }
  else if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_70;
  }
  if ((v14 & 0xC000000000000001) != 0)
  {
    v11 = (char *)MEMORY[0x1B5E43B94](0, v14);
  }
  else
  {
    if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_111;
    }
    v11 = *(char **)(v14 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  v14 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v14)
  {
    swift_release();
    goto LABEL_27;
  }
  v11 = (char *)UsoEntity.attributes.getter();
  if (!*((_QWORD *)v11 + 2)
    || (v67[1] = v14,
        v14 = (unint64_t)v11,
        v38 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000),
        (v39 & 1) == 0))
  {
    swift_release();
    goto LABEL_70;
  }
  v14 = *(_QWORD *)(*((_QWORD *)v11 + 7) + 8 * v38);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!(v14 >> 62))
  {
    if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_49;
    goto LABEL_82;
  }
  swift_bridgeObjectRetain();
  v11 = (char *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v11)
  {
LABEL_82:
    swift_release();
    goto LABEL_70;
  }
LABEL_49:
  if ((v14 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      swift_retain();
      goto LABEL_52;
    }
    __break(1u);
LABEL_116:
    v21 = v2;
    v2 = MEMORY[0x1B5E43B94](0, v14);
LABEL_20:
    swift_bridgeObjectRelease();
    v22 = dispatch thunk of UsoValue.getUsoIdentifiers()();
    swift_release();
    v14 = MEMORY[0x1E0DEE9D8];
    v76 = MEMORY[0x1E0DEE9D8];
    v74 = *(char **)(v22 + 16);
    if (!v74)
    {
LABEL_103:
      swift_bridgeObjectRelease();
      v65 = specialized Dictionary.init<A>(grouping:by:)(v14);
      swift_release();
      v9 = specialized _NativeDictionary.mapValues<A>(_:)(v65);
      swift_release();
      swift_bridgeObjectRelease();
      return v9;
    }
    v71 = a1;
    v23 = 0;
    v24 = (char *)*MEMORY[0x1E0DA2C78];
    v72 = v22;
    v73 = v24;
    while (2)
    {
      if (v23 >= *(_QWORD *)(v22 + 16))
        goto LABEL_107;
      v55 = (*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
      v2 = *(_QWORD *)(v75 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v75 + 16))(v11, v22 + v55 + v2 * v23, v21);
      v56 = UsoIdentifier.namespace.getter();
      v58 = v57;
      v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v60;
      if (v58)
      {
        if (v56 == v59 && v58 == v60)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_96;
        }
        v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v61 & 1) != 0)
        {
LABEL_96:
          v62 = *(void (**)(unint64_t, char *, uint64_t))(v75 + 32);
          v62(v9, v11, v21);
          v14 = v76;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
            v14 = v76;
          }
          v64 = *(_QWORD *)(v14 + 16);
          v63 = *(_QWORD *)(v14 + 24);
          if (v64 >= v63 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
            v14 = v76;
          }
          *(_QWORD *)(v14 + 16) = v64 + 1;
          v62(v14 + v55 + v64 * v2, (char *)v9, v21);
          v76 = v14;
          v22 = v72;
LABEL_89:
          if (v74 == (char *)++v23)
          {
            v14 = v76;
            goto LABEL_103;
          }
          continue;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      break;
    }
    (*(void (**)(char *, uint64_t))(v75 + 8))(v11, v21);
    goto LABEL_89;
  }
  MEMORY[0x1B5E43B94](0, v14);
LABEL_52:
  v67[0] = v9;
  swift_bridgeObjectRelease();
  v40 = dispatch thunk of UsoValue.getUsoIdentifiers()();
  swift_release();
  v14 = MEMORY[0x1E0DEE9D8];
  v76 = MEMORY[0x1E0DEE9D8];
  v71 = *(_QWORD *)(v40 + 16);
  if (!v71)
    goto LABEL_73;
  v9 = 0;
  v68 = v2;
  v70 = v40;
  while (2)
  {
    if (v9 >= *(_QWORD *)(v40 + 16))
      goto LABEL_106;
    v11 = (char *)((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80));
    v41 = *(_QWORD *)(v75 + 72);
    (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v74, &v11[v40 + v41 * v9], v2);
    v42 = UsoIdentifier.namespace.getter();
    v44 = v43;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v46;
    if (!v44)
    {
      swift_bridgeObjectRelease();
LABEL_55:
      (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v2);
      goto LABEL_56;
    }
    if (v42 == v45 && v44 == v46)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_63;
    }
    v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v47 & 1) == 0)
      goto LABEL_55;
LABEL_63:
    v48 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
    v48(v73, v74, v2);
    v14 = v76;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1);
      v14 = v76;
    }
    v50 = *(_QWORD *)(v14 + 16);
    v49 = *(_QWORD *)(v14 + 24);
    if (v50 >= v49 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
      v14 = v76;
    }
    *(_QWORD *)(v14 + 16) = v50 + 1;
    v51 = &v11[v14 + v50 * v41];
    v2 = v68;
    v48(v51, v73, v68);
    v76 = v14;
LABEL_56:
    ++v9;
    v40 = v70;
    if (v71 != v9)
      continue;
    break;
  }
  v14 = v76;
LABEL_73:
  swift_bridgeObjectRelease();
  v52 = v69;
  v11 = (char *)specialized Dictionary.init<A>(grouping:by:)(v14);
  swift_release();
  v14 = specialized _NativeDictionary.mapValues<A>(_:)((uint64_t)v11);
  swift_bridgeObjectRelease();
  v53 = v67[0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v76 = v53;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v14, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v76);
  v69 = v52;
  if (!v52)
  {
    v9 = v76;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v28 = &off_1E683D000;
    goto LABEL_27;
  }
LABEL_118:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t specialized LinkUsoParser.appBundleIdsFromMentionedApps(usoTask:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;

  v0 = type metadata accessor for UsoIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v45 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v44 = (char *)&v42 - v4;
  v5 = 0;
  v6 = MEMORY[0x1E0DEE9D8];
  v47 = MEMORY[0x1E0DEE9D8];
  v43 = 0x80000001B4EFE3D0;
  v7 = 0;
  do
  {
    v8 = v5;
    v9 = (char *)&outlined read-only object #0 of LinkUsoParser.appBundleIdsFromMentionedApps(usoTask:) + 16 * v7;
    v11 = *((_QWORD *)v9 + 4);
    v10 = *((_QWORD *)v9 + 5);
    swift_bridgeObjectRetain();
    v12 = UsoTask.arguments.getter();
    if (!*(_QWORD *)(v12 + 16) || (v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10), (v14 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v15 >> 62)
    {
      swift_bridgeObjectRetain();
      v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v25)
        goto LABEL_27;
    }
    else if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_27;
    }
    if ((v15 & 0xC000000000000001) != 0)
    {
      MEMORY[0x1B5E43B94](0, v15);
    }
    else
    {
      if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_58;
      swift_retain();
    }
    swift_bridgeObjectRelease();
    v16 = dispatch thunk of UsoValue.getAsEntity()();
    swift_release();
    if (v16)
    {
      v17 = UsoEntity.attributes.getter();
      if (!*(_QWORD *)(v17 + 16))
        goto LABEL_31;
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, v43);
      if ((v19 & 1) == 0)
        goto LABEL_31;
      v15 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        v26 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v26)
          goto LABEL_31;
      }
      else if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_31;
      }
      if ((v15 & 0xC000000000000001) != 0)
      {
        MEMORY[0x1B5E43B94](0, v15);
      }
      else
      {
        if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_59;
        swift_retain();
      }
      swift_bridgeObjectRelease();
      v20 = dispatch thunk of UsoValue.getAsEntity()();
      swift_release();
      if (v20)
      {
        v15 = UsoEntity.attributes.getter();
        if (!*(_QWORD *)(v15 + 16)
          || (v21 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000), (v22 & 1) == 0))
        {
          swift_release();
          goto LABEL_31;
        }
        v23 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v21);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v23 >> 62)
        {
          swift_bridgeObjectRetain();
          v15 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v15)
          {
LABEL_40:
            swift_release();
LABEL_31:
            swift_release();
LABEL_27:
            swift_bridgeObjectRelease();
            goto LABEL_28;
          }
        }
        else if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_40;
        }
        if ((v23 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1B5E43B94](0, v23);
        }
        else
        {
          if (!*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_60;
          swift_retain();
        }
        swift_bridgeObjectRelease();
        v24 = dispatch thunk of UsoValue.getUsoIdentifiers()();
        swift_release();
        specialized Array.append<A>(contentsOf:)(v24);
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
      }
    }
LABEL_28:
    v5 = 1;
    v7 = 1;
  }
  while ((v8 & 1) == 0);
  swift_arrayDestroy();
  v27 = v47;
  v46 = v6;
  v28 = *(_QWORD *)(v47 + 16);
  swift_bridgeObjectRetain();
  if (v28)
  {
    v29 = 0;
    v42 = v28;
    v43 = v0;
    v15 = (unint64_t)v44;
    while (v29 < *(_QWORD *)(v27 + 16))
    {
      v30 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
      v31 = *(_QWORD *)(v1 + 72);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1 + 16))(v15, v27 + v30 + v31 * v29, v0);
      if ((closure #1 in LinkUsoParser.appBundleIdsFromMentionedApps(usoTask:)(v15) & 1) != 0)
      {
        v32 = v1;
        v33 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 32);
        v33(v45, v15, v0);
        v34 = v46;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v34 + 16) + 1, 1);
          v34 = v46;
        }
        v36 = *(_QWORD *)(v34 + 16);
        v35 = *(_QWORD *)(v34 + 24);
        if (v36 >= v35 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
          v34 = v46;
        }
        *(_QWORD *)(v34 + 16) = v36 + 1;
        v37 = v34 + v30 + v36 * v31;
        v0 = v43;
        v33((char *)v37, (unint64_t)v45, v43);
        v46 = v34;
        v1 = v32;
        v15 = (unint64_t)v44;
        v28 = v42;
      }
      else
      {
        (*(void (**)(unint64_t, uint64_t))(v1 + 8))(v15, v0);
      }
      if (v28 == ++v29)
      {
        v38 = v46;
        goto LABEL_56;
      }
    }
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    (*(void (**)(unint64_t, uint64_t))(v1 + 8))(v15, v0);
    swift_bridgeObjectRelease();
    result = swift_release();
    __break(1u);
    return result;
  }
  v38 = v6;
LABEL_56:
  swift_bridgeObjectRelease();
  v39 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology13UsoIdentifierVG_SSs5NeverOTg504_s14d16KitRuntime13Linkf79ParserV29appBundleIdsFromMentionedApps7usoTaskShySSG0A8Ontology0eN0C_tFSSAG0E10G54Vcfu_33_6552710fe21eac3bc6e61b74c3fc727bAKSSTf3nnnpk_nTf1cn_n(v38);
  swift_bridgeObjectRelease();
  swift_release();
  v40 = specialized Set.init<A>(_:)(v39);
  swift_bridgeObjectRelease();
  return v40;
}

uint64_t specialized LinkUsoParser.extractNoReferenceVerb(task:)()
{
  uint64_t v0;
  char v1;
  char v2;
  char v3;

  if (UsoTask.baseEntityAsString.getter() == 0x6E456F4E5F6F7375 && v0 == 0xEC00000079746974)
  {
    swift_bridgeObjectRelease();
    v1 = 1;
  }
  else
  {
    v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(UsoTask.arguments.getter() + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
    v3 = v2;
    swift_bridgeObjectRelease();
    v1 &= v3 ^ 1;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v1 & 1;
}

unint64_t specialized LinkUsoParser.extractParseInformation(usoParse:)@<X0>(uint64_t a1@<X8>)
{
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((specialized LinkUsoParser.isCancelTask(_:)() & 1) != 0)
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_cancelProtocol);
    v3 = MEMORY[0x1E0DEE9D8];
    v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    result = specialized Dictionary.init(dictionaryLiteral:)(v3);
    v6 = result;
LABEL_8:
    v11 = 0;
    v12 = MEMORY[0x1E0DEE9E8];
    goto LABEL_11;
  }
  v7 = specialized LinkUsoParser.getTask(_:)();
  if (!v7)
  {
    v10 = MEMORY[0x1E0DEE9D8];
    v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    result = specialized Dictionary.init(dictionaryLiteral:)(v10);
    v6 = result;
    v2 = 0;
    goto LABEL_8;
  }
  v8 = v7;
  v2 = (id)specialized LinkUsoParser.getSystemProtocol(usoTask:)(v7);
  specialized LinkUsoParser.extractIdentifiers(task:)();
  if (UsoTask.baseEntityAsString.getter() == 0x535F6E6F6D6D6F63 && v9 == 0xEE00676E69747465)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;
  v16 = swift_bridgeObjectRetain();
  v17 = specialized _ArrayProtocol.filter(_:)(v16, v13, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = specialized Dictionary.init<A>(grouping:by:)(v17);
  swift_bridgeObjectRelease();
  v4 = specialized _NativeDictionary.mapValues<A>(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = specialized LinkUsoParser.extractMentionedEntityTypes(usoTask:)(v8);
  v12 = specialized LinkUsoParser.appBundleIdsFromMentionedApps(usoTask:)();
  v11 = specialized LinkUsoParser.extractNoReferenceVerb(task:)();
  result = swift_release();
LABEL_11:
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 32) = v11 & 1;
  return result;
}

void *partial apply for closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static LinkUsoParser.protocolExtractor(expectedEntity:systemProtocol:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int *v3;
  Swift::Int v4;
  Swift::Int v5;
  Swift::Int v7;
  uint64_t v8;

  v8 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = (Swift::Int *)(a1 + 40);
    do
    {
      v4 = *(v3 - 1);
      v5 = *v3;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v4, v5);
      swift_bridgeObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return a2;
}

uint64_t specialized static LinkUsoParser.adjustmentTaskProtocolExtractor(usoTask:)()
{
  unint64_t v0;
  unint64_t v1;
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  char v15;
  uint64_t v16;

  v0 = UsoTask.arguments.getter();
  if (!*(_QWORD *)(v0 + 16))
    goto LABEL_43;
  v1 = specialized __RawDictionaryStorage.find<A>(_:)(0x656D7473756A6461, 0xEE0065707954746ELL);
  if ((v2 & 1) == 0)
    goto LABEL_43;
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8 * v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v0 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v0)
      goto LABEL_43;
  }
  else if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_43;
  }
  if ((v3 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v3);
  }
  else
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_41;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  v4 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v4)
    return 0;
  swift_retain();
  v5 = UsoEntity.attributes.getter();
  swift_release();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_42;
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(0x5664656E69666564, 0xEC00000065756C61);
  if ((v7 & 1) == 0)
    goto LABEL_42;
  v0 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  if (!(v0 >> 62))
  {
    if (*(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  swift_bridgeObjectRetain();
  v16 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v16)
  {
LABEL_42:
    swift_release();
LABEL_43:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_13:
  if ((v0 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1B5E43B94](0, v0);
    goto LABEL_16;
  }
  if (*(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_16:
    swift_bridgeObjectRelease();
    v9 = dispatch thunk of UsoValue.getAsEntity()();
    swift_release();
    if (v9)
    {
      v10 = UsoTask.verbString.getter();
      v12 = v11;
      swift_release();
      if (v10 == 0xD00000000000001ALL && v12 == 0x80000001B4EFE2F0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v13 = objc_msgSend((id)objc_opt_self(), sel_moveSpatialProtocol);
LABEL_21:
        v14 = v13;
        swift_release();
        return (uint64_t)v14;
      }
      if (v10 == 0xD00000000000001CLL && v12 == 0x80000001B4EFE310
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v13 = objc_msgSend((id)objc_opt_self(), sel_scrollProtocol);
        goto LABEL_21;
      }
      if (v10 == 0xD00000000000001ALL && v12 == 0x80000001B4EFE330
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v13 = objc_msgSend((id)objc_opt_self(), sel_zoomProtocol);
        goto LABEL_21;
      }
      if (v10 == 0xD00000000000001CLL && v12 == 0x80000001B4EFE350)
      {
        swift_bridgeObjectRelease();
LABEL_37:
        v13 = objc_msgSend((id)objc_opt_self(), sel_resizeProtocol);
        goto LABEL_21;
      }
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v15 & 1) != 0)
        goto LABEL_37;
    }
    swift_release();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t destroy for LinkParseMetadata(id *a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LinkParseMetadata(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LinkParseMetadata(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for LinkParseMetadata(uint64_t a1, uint64_t a2)
{

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkParseMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkParseMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkParseMetadata()
{
  return &type metadata for LinkParseMetadata;
}

ValueMetadata *type metadata accessor for LinkUsoParser()
{
  return &type metadata for LinkUsoParser;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed UsoTask) -> (@owned LNSystemProtocol?)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1B4E2475C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_5()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t LinkViewActionProvider.viewActions(bundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized LinkViewActionProvider.viewActions(bundleIdentifier:)
                                                + async function pointer to specialized LinkViewActionProvider.viewActions(bundleIdentifier:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AceServiceInvokerAsync.submitToRemote<A>(_:_:setRefId:) in conformance AceServiceInvokerImpl;
  return v7(a1, a2);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [LNViewAction](uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    type metadata accessor for LNViewAction();
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    return swift_continuation_throwingResume();
  }
}

uint64_t protocol witness for LinkViewActionProviding.viewActions(bundleIdentifier:) in conformance LinkViewActionProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized LinkViewActionProvider.viewActions(bundleIdentifier:)
                                                + async function pointer to specialized LinkViewActionProvider.viewActions(bundleIdentifier:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AceServiceInvokerAsync.submit<A>(_:setRefId:) in conformance AceServiceInvokerImpl;
  return v7(a1, a2);
}

uint64_t specialized LinkViewActionProvider.viewActions(bundleIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_task_switch();
}

uint64_t specialized LinkViewActionProvider.viewActions(bundleIdentifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = objc_allocWithZone(MEMORY[0x1E0D44170]);
  swift_bridgeObjectRetain();
  v4 = (void *)MEMORY[0x1B5E432E8](v1, v2);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithBundleIdentifier_, v4);
  *(_QWORD *)(v0 + 144) = v5;

  if (!v5)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(v0 + 56) = v0 + 120;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = specialized LinkViewActionProvider.viewActions(bundleIdentifier:);
  v6 = swift_continuation_init();
  *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
  v7 = (_QWORD *)(v0 + 80);
  v7[1] = 0x40000000;
  v7[2] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [LNViewAction];
  v7[3] = &block_descriptor_15;
  v7[4] = v6;
  objc_msgSend(v5, sel_fetchViewActionsWithCompletionHandler_, v7);
  return swift_continuation_await();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 152) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t dispatch thunk of LinkViewActionProviding.viewActions(bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a4 + 8) + *(_QWORD *)(a4 + 8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = dispatch thunk of CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:);
  return v11(a1, a2, a3, a4);
}

ValueMetadata *type metadata accessor for LinkViewActionProvider()
{
  return &type metadata for LinkViewActionProvider;
}

unint64_t type metadata accessor for LNViewAction()
{
  unint64_t result;

  result = lazy cache variable for type metadata for LNViewAction;
  if (!lazy cache variable for type metadata for LNViewAction)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNViewAction);
  }
  return result;
}

uint64_t *MeCardService.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1)
    swift_once();
  return &static MeCardService.instance;
}

void one-time initialization function for instance()
{
  uint64_t v0;
  id v1;

  type metadata accessor for MeCardService();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_clearCachedMeCard, *MEMORY[0x1E0C96878], 0);

  static MeCardService.instance = v0;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v0 = type metadata accessor for TaskPriority();
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(), sel_siriExecutionStream);
  v4 = objc_msgSend(v3, sel_source);

  static TaskPriority.background.getter();
  type metadata accessor for SiriKitBiomeDonator();
  v5 = swift_allocObject();
  v6 = v4;
  v7 = specialized SiriKitBiomeDonator.init(_:backgroundTaskPriority:)((uint64_t)v6, (uint64_t)v2, v5);

  static SiriKitBiomeDonator.instance = v7;
}

uint64_t static MeCardService.instance.getter()
{
  if (one-time initialization token for instance != -1)
    swift_once();
  return swift_retain();
}

uint64_t one-time initialization function for meCardKeys()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = v17;
  v25 = v16;
  v26 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray.reserveCapacity(_:)();
  swift_bridgeObjectRetain();
  MEMORY[0x1B5E432E8](v0, v2);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_bridgeObjectRetain();
  MEMORY[0x1B5E432E8](v3, v5);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_bridgeObjectRetain();
  MEMORY[0x1B5E432E8](v19, v7);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_bridgeObjectRetain();
  MEMORY[0x1B5E432E8](v20, v9);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_bridgeObjectRetain();
  MEMORY[0x1B5E432E8](v21, v11);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_bridgeObjectRetain();
  MEMORY[0x1B5E432E8](v22, v13);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_bridgeObjectRetain();
  MEMORY[0x1B5E432E8](v23, v15);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  swift_bridgeObjectRetain();
  MEMORY[0x1B5E432E8](v25, v24);
  swift_bridgeObjectRelease();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  result = swift_arrayDestroy();
  static MeCardService.meCardKeys = v26;
  return result;
}

id MeCardService.contactSource.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    v2 = *(id *)(v0 + 24);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C97298]), sel_init);
    v4 = *(void **)(v0 + 24);
    *(_QWORD *)(v0 + 24) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

id MeCardService.fetchMeCard()()
{
  id v0;
  Class isa;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  id v7[2];

  v7[1] = *(id *)MEMORY[0x1E0C80C00];
  v0 = MeCardService.contactSource.getter();
  if (one-time initialization token for meCardKeys != -1)
    swift_once();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNKeyDescriptor);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v7[0] = 0;
  v2 = objc_msgSend(v0, sel__crossPlatformUnifiedMeContactWithKeysToFetch_error_, isa, v7);

  if (v2)
  {
    v3 = v7[0];
    return v2;
  }
  else
  {
    v5 = v7[0];
    v4 = _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return (id)v4;
}

CNContact_optional __swiftcall MeCardService.fetchMeCard(allowCached:)(Swift::Bool allowCached)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  Swift::Bool v9;
  id v10;
  char v11;
  char v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  uint64_t v21;
  CNContact_optional result;

  v3 = type metadata accessor for OSSignpostID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(id *)(v1 + 16);
  if (v7 && allowCached)
  {
    v8 = v7;
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v10 = (id)static Log.executor;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    v7 = MeCardService.fetchMeCard()();
    v12 = v11;
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    if ((v12 & 1) != 0)
    {
      v15 = v7;
      static os_log_type_t.error.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1B4EE3F50;
      swift_getErrorValue();
      v17 = Error.localizedDescription.getter();
      v19 = v18;
      *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v16 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v16 + 32) = v17;
      *(_QWORD *)(v16 + 40) = v19;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<SABaseCommand?, Error>(v7);
      outlined consume of Result<SABaseCommand?, Error>(v7);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v7 = 0;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v13 = *(void **)(v1 + 16);
      *(_QWORD *)(v1 + 16) = v7;
      v14 = v7;

    }
  }
  v20 = (objc_class *)v7;
  result.value.super.isa = v20;
  result.is_nil = v9;
  return result;
}

uint64_t MeCardService.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MeCardService.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MeCardService()
{
  return objc_opt_self();
}

uint64_t method lookup function for MeCardService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MeCardService.fetchMeCard(allowCached:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of MeCardFetching.fetchMeCard(allowCached:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

SiriKitRuntime::MessagesAffinityScorer __swiftcall MessagesAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::MessagesAffinityScorer result;

  v0 = (void *)0x80000001B4EF6AB0;
  v1 = 0xD000000000000031;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t MessagesAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for MessagesAffinityScorer()
{
  return &type metadata for MessagesAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_MessageMode.DefinedValues and conformance UsoEntity_common_MessageMode.DefinedValues()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UsoEntity_common_MessageMode.DefinedValues and conformance UsoEntity_common_MessageMode.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_MessageMode.DefinedValues and conformance UsoEntity_common_MessageMode.DefinedValues)
  {
    v1 = type metadata accessor for UsoEntity_common_MessageMode.DefinedValues();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DA1848], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MessageMode.DefinedValues and conformance UsoEntity_common_MessageMode.DefinedValues);
  }
  return result;
}

uint64_t MetricsEventInformation.flowTask.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsEventInformation.flowTask.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MetricsEventInformation.flowTask.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t MetricsEventInformation.requestEventJson.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsEventInformation.requestEventJson.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*MetricsEventInformation.requestEventJson.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t MetricsEventInformation.interactionId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsEventInformation.interactionId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*MetricsEventInformation.interactionId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t MetricsEventInformation.resultCandidateId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsEventInformation.resultCandidateId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*MetricsEventInformation.resultCandidateId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t MetricsEventInformation.appBundleId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MetricsEventInformation.appBundleId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*MetricsEventInformation.appBundleId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

void __swiftcall MetricsEventInformation.init(flowTask:requestEventJson:interactionId:resultCandidateId:appBundleId:)(SiriKitRuntime::MetricsEventInformation *__return_ptr retstr, Swift::String flowTask, Swift::String requestEventJson, Swift::String interactionId, Swift::String resultCandidateId, Swift::String appBundleId)
{
  retstr->flowTask = flowTask;
  retstr->requestEventJson = requestEventJson;
  retstr->interactionId = interactionId;
  retstr->resultCandidateId = resultCandidateId;
  retstr->appBundleId = appBundleId;
}

uint64_t destroy for MetricsEventInformation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MetricsEventInformation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MetricsEventInformation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for MetricsEventInformation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsEventInformation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsEventInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsEventInformation()
{
  return &type metadata for MetricsEventInformation;
}

uint64_t MitigationDismissalHelper.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  MitigationDismissalHelper.init()();
  return v0;
}

_QWORD *MitigationDismissalHelper.init()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  _OWORD v21[2];

  v1 = (_QWORD *)v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v2);
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v8);
  *(_OWORD *)(v0 + 16) = xmmword_1B4EEC030;
  *(_QWORD *)(v0 + 32) = 0xD00000000000001FLL;
  *(_QWORD *)(v0 + 40) = 0x80000001B4EFE4C0;
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF8D8], v4);
  *(_QWORD *)&v21[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v3, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(_QWORD *)(v0 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v9 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v10 = (void *)MEMORY[0x1B5E432E8](0xD000000000000013, 0x80000001B4EF7830);
  v11 = objc_msgSend(v9, sel_initWithSuiteName_, v10);

  if (!v11)
    v11 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v12 = v1[4];
  v13 = v1[5];
  swift_bridgeObjectRetain();
  v14 = (void *)MEMORY[0x1B5E432E8](v12, v13);
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v11, sel_objectForKey_, v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v16 = v1[4];
    v17 = v1[5];
    swift_bridgeObjectRetain();
    v18 = (void *)MEMORY[0x1B5E432E8](v16, v17);
    swift_bridgeObjectRelease();
    v19 = objc_msgSend(v11, sel_integerForKey_, v18);

    v1[3] = v19;
  }
  else
  {
    memset(v21, 0, sizeof(v21));

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return v1;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t MitigationDismissalHelper.shouldDismissUI(_:_:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  char v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  char v27;
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  char *v31;

  v4 = type metadata accessor for InputOrigin();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v31 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InputOrigin?, InputOrigin?));
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v30 - v15;
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v30 - v17;
  if (PreExecutionDecision.rawValue.getter(a1) == 0x747065636361 && v19 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    outlined init with copy of InputOrigin?(a2, (uint64_t)v18);
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    outlined init with copy of InputOrigin?(a2, (uint64_t)v18);
    if ((v20 & 1) == 0)
    {
      v24 = &demangling cache variable for type metadata for InputOrigin?;
      v25 = (uint64_t)v18;
      goto LABEL_12;
    }
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v16, *MEMORY[0x1E0D9E7D0], v4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  v21 = (uint64_t)&v9[*(int *)(v7 + 48)];
  outlined init with copy of InputOrigin?((uint64_t)v18, (uint64_t)v9);
  outlined init with copy of InputOrigin?((uint64_t)v16, v21);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v22((uint64_t)v9, 1, v4) != 1)
  {
    outlined init with copy of InputOrigin?((uint64_t)v9, (uint64_t)v13);
    if (v22(v21, 1, v4) != 1)
    {
      v26 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v31, v21, v4);
      lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E7E0], MEMORY[0x1E0D9E7F0]);
      v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      v28 = *(void (**)(char *, uint64_t))(v5 + 8);
      v28(v26, v4);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for InputOrigin?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, &demangling cache variable for type metadata for InputOrigin?);
      v28(v13, v4);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for InputOrigin?);
      v23 = v27 ^ 1;
      return v23 & 1;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for InputOrigin?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, &demangling cache variable for type metadata for InputOrigin?);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
    goto LABEL_10;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for InputOrigin?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, &demangling cache variable for type metadata for InputOrigin?);
  if (v22(v21, 1, v4) != 1)
  {
LABEL_10:
    v24 = &demangling cache variable for type metadata for (InputOrigin?, InputOrigin?);
    v25 = (uint64_t)v9;
LABEL_12:
    outlined destroy of ReferenceResolutionClientProtocol?(v25, v24);
    v23 = 1;
    return v23 & 1;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for InputOrigin?);
  v23 = 0;
  return v23 & 1;
}

uint64_t MitigationDismissalHelper.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return v0;
}

uint64_t MitigationDismissalHelper.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t outlined init with copy of InputOrigin?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for MitigationDismissalHelper()
{
  return objc_opt_self();
}

uint64_t method lookup function for MitigationDismissalHelper()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MitigationDismissalHelper.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of MitigationDismissalHelper.shouldDismissUI(_:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of MitigationDismissalHelper.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: ContextUpdater));
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v9)
      return swift_release();
    v19 = *(_QWORD *)(v5 + 8 * v18);
    ++v11;
    if (!v19)
    {
      v11 = v18 + 1;
      if (v18 + 1 >= v9)
        return swift_release();
      v19 = *(_QWORD *)(v5 + 8 * v11);
      if (!v19)
      {
        v11 = v18 + 2;
        if (v18 + 2 >= v9)
          return swift_release();
        v19 = *(_QWORD *)(v5 + 8 * v11);
        if (!v19)
        {
          v11 = v18 + 3;
          if (v18 + 3 >= v9)
            return swift_release();
          v19 = *(_QWORD *)(v5 + 8 * v11);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v19 - 1) & v19;
    v13 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_5:
    v14 = *(_QWORD *)(a1 + 48);
    v15 = type metadata accessor for UserID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v4, v14 + *(_QWORD *)(*(_QWORD *)(v15 - 8) + 72) * v13, v15);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
    *(_QWORD *)&v4[*(int *)(v2 + 48)] = v16;
    v17 = *(void (**)(void))(*(_QWORD *)v16 + 480);
    swift_retain();
    v17();
    result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for (key: UserID, value: ContextUpdater));
  }
  v20 = v18 + 4;
  if (v20 >= v9)
    return swift_release();
  v19 = *(_QWORD *)(v5 + 8 * v20);
  if (v19)
  {
    v11 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v9)
      return swift_release();
    v19 = *(_QWORD *)(v5 + 8 * v11);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t MultiUserContextUpdater.__allocating_init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  ObjectType = swift_getObjectType();
  v17 = *(_QWORD *)(a11 + 24);
  v18 = *(_QWORD *)(a11 + 32);
  v19 = __swift_mutable_project_boxed_opaque_existential_1(a11, v17);
  v20 = specialized MultiUserContextUpdater.__allocating_init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, v19, a12, a13, v13, v17, ObjectType, v18);
  __swift_destroy_boxed_opaque_existential_1(a11);
  return v20;
}

uint64_t MultiUserContextUpdater.sessionState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 16, a1);
}

uint64_t MultiUserContextUpdater.rraasClient.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 56, a1);
}

uint64_t MultiUserContextUpdater.correctionsPlatformClient.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 96, a1);
}

uint64_t MultiUserContextUpdater.serviceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t MultiUserContextUpdater.assistantId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 144);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultiUserContextUpdater.requestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultiUserContextUpdater.rootRequestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultiUserContextUpdater.contextDonator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 192, a1);
}

uint64_t MultiUserContextUpdater.instrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t MultiUserContextUpdater.userIdSet.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MultiUserContextUpdater.knownUserIdSet.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MultiUserContextUpdater.userIdToContextUpdater.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 256) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MultiUserContextUpdater.sharedContextUpdater.modify())()
{
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t MultiUserContextUpdater.init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  __int128 *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v26 = a2;
  v30 = a7;
  v31 = a8;
  v28 = a5;
  v29 = a6;
  v27 = a3;
  v24 = a12;
  ObjectType = swift_getObjectType();
  v16 = *(_QWORD *)(a11 + 24);
  v17 = *(_QWORD *)(a11 + 32);
  v18 = __swift_mutable_project_boxed_opaque_existential_1(a11, v16);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v21 + 16))(v20);
  v22 = specialized MultiUserContextUpdater.init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(a1, v26, v27, a4, v28, v29, v30, v31, a9, a10, (uint64_t)v20, v24, a13, v25, v16, ObjectType, v17);
  __swift_destroy_boxed_opaque_existential_1(a11);
  return v22;
}

id Dictionary<>.toNSError()(uint64_t a1)
{
  id v1;
  void *v2;
  Class isa;
  id v4;

  if (!*(_QWORD *)(a1 + 16))
    return 0;
  specialized _dictionaryUpCast<A, B, C, D>(_:)(a1);
  v1 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
  v2 = (void *)MEMORY[0x1B5E432E8](0x55747865746E6F43, 0xEE00726574616470);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v1, sel_initWithDomain_code_userInfo_, v2, -1, isa);

  return v4;
}

uint64_t specialized MultiUserContextUpdater.init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t *boxed_opaque_existential_1;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a15;
  v29 = a17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v27);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a15 - 8) + 32))(boxed_opaque_existential_1, a11, a15);
  *(_QWORD *)(a14 + 256) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  *(_QWORD *)(a14 + 264) = 0;
  outlined init with take of ReferenceResolutionClientProtocol(a1, a14 + 16);
  outlined init with take of ReferenceResolutionClientProtocol(a2, a14 + 56);
  outlined init with take of ReferenceResolutionClientProtocol(a3, a14 + 96);
  *(_QWORD *)(a14 + 136) = a4;
  *(_QWORD *)(a14 + 144) = a5;
  *(_QWORD *)(a14 + 152) = a6;
  *(_QWORD *)(a14 + 160) = a7;
  *(_QWORD *)(a14 + 168) = a8;
  *(_QWORD *)(a14 + 176) = a9;
  *(_QWORD *)(a14 + 184) = a10;
  outlined init with take of ReferenceResolutionClientProtocol(&v27, a14 + 192);
  *(_OWORD *)(a14 + 232) = a12;
  *(_QWORD *)(a14 + 248) = a13;
  return a14;
}

uint64_t specialized MultiUserContextUpdater.__allocating_init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v22;
  __int128 *v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a7;
  v30 = a8;
  v27 = a5;
  v28 = a6;
  v25 = a3;
  v26 = a4;
  v23 = a1;
  v24 = a2;
  v22 = a12;
  v17 = *(_QWORD *)(a15 - 8);
  MEMORY[0x1E0C80A78](a1);
  v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for MultiUserContextUpdater();
  v20 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a11, a15);
  return specialized MultiUserContextUpdater.init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, (uint64_t)v19, v22, a13, v20, a15, a16, a17);
}

uint64_t sub_1B4E26EDC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 184))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E26F0C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 192);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B4E26F3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 208))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E26F6C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 216);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t method lookup function for MultiUserContextUpdater()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MultiUserContextUpdater.userIdToContextUpdater.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.userIdToContextUpdater.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.userIdToContextUpdater.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.sharedContextUpdater.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.sharedContextUpdater.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.sharedContextUpdater.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.__allocating_init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.applyContextUpdate(_:metadata:scope:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.applyServerContextUpdateCandidate(_:metadata:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.updateServerContext()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.applyResponseText(_:scope:userId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.close()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.dispatch(forScope:currentUserId:applyContextTo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of MultiUserContextUpdater.makeContextUpdater(userId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t SIRINLUTask.toNluTask()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, _QWORD, uint64_t, uint64_t);
  _BYTE v24[48];
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = objc_msgSend((id)objc_opt_self(), sel_convertFromTask_, v1);
  v8 = v7;
  if (v7 && (v9 = -[NSObject data](v7, sel_data)) != 0)
  {
    v10 = v9;
    v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    v14 = type metadata accessor for Siri_Nlu_External_Task();
    v26 = v11;
    v27 = v13;
    v25 = 0;
    memset(&v24[16], 0, 32);
    outlined copy of Data._Representation(v11, v13);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task();
    Message.init<A>(contiguousBytes:extensions:partial:options:)();
    outlined consume of Data._Representation(v11, v13);
    v21 = *(_QWORD *)(v14 - 8);
    v22 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56);
    v22((uint64_t)v6, 0, 1, v14);

    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v21 + 32))(a1, v6, v14);
    return v22(a1, 0, 1, v14);
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1B4BE6000, v16, v17, "Proto NL Task has no data.", v18, 2u);
      MEMORY[0x1B5E44758](v18, -1, -1);
      v19 = v8;
    }
    else
    {
      v19 = v16;
      v16 = v8;
    }

    v20 = type metadata accessor for Siri_Nlu_External_Task();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 1, 1, v20);
  }
}

id Siri_Nlu_External_Task.toLegacyTask()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  id v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  Class isa;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  double v16;
  double v17;

  type metadata accessor for Siri_Nlu_External_Task();
  lazy protocol witness table accessor for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task();
  v6 = Message.serializedData(partial:)();
  v8 = v7;
  v9 = objc_allocWithZone(MEMORY[0x1E0D9F998]);
  outlined copy of Data._Representation(v6, v8);
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v6, v8);
  v11 = objc_msgSend(v9, sel_initWithData_, isa);

  if (!v11)
  {
    outlined consume of Data._Representation(v6, v8);
LABEL_2:
    if (one-time initialization token for executor != -1)
      swift_once();
    v0 = type metadata accessor for Logger();
    __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
    v1 = Logger.logObject.getter();
    v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v1, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1B4BE6000, v1, v2, "Failed to convert proto-backed Siri_Nlu_External_Task to legacy NLTask", v3, 2u);
      MEMORY[0x1B5E44758](v3, -1, -1);
    }

    return 0;
  }
  v12 = (void *)objc_opt_self();
  v13 = objc_msgSend(v11, sel_task);
  v14 = objc_msgSend(v12, sel_convertUsoGraph_, v13);

  if (!v14)
  {
    outlined consume of Data._Representation(v6, v8);

    goto LABEL_2;
  }
  result = objc_msgSend(v11, sel_score);
  if (result)
  {
    v15 = result;
    objc_msgSend(result, sel_value);
    v17 = v16;

    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA2D78]), sel_initWithTask_score_, v14, v17);
    outlined consume of Data._Representation(v6, v8);

    return v4;
  }
  __break(1u);
  return result;
}

id Array<A>.toLegacyTasks()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id result;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  Class isa;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  double v24;
  double v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = type metadata accessor for Siri_Nlu_External_Task();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (id)MEMORY[0x1E0DEE9D8];
  v32 = MEMORY[0x1E0DEE9D8];
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v30 = *(_QWORD *)(v3 + 72);
    v31 = v9;
    v28 = a1;
    swift_bridgeObjectRetain();
    v29 = v3;
    while (1)
    {
      v31(v5, v8, v2);
      lazy protocol witness table accessor for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task();
      v14 = Message.serializedData(partial:)();
      v16 = v15;
      v17 = objc_allocWithZone(MEMORY[0x1E0D9F998]);
      outlined copy of Data._Representation(v14, v16);
      isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v14, v16);
      v19 = objc_msgSend(v17, sel_initWithData_, isa);

      if (!v19)
        break;
      v20 = (void *)objc_opt_self();
      v21 = objc_msgSend(v19, sel_task);
      v22 = objc_msgSend(v20, sel_convertUsoGraph_, v21);

      if (!v22)
      {
        outlined consume of Data._Representation(v14, v16);

        v3 = v29;
        goto LABEL_6;
      }
      result = objc_msgSend(v19, sel_score);
      if (!result)
      {
        __break(1u);
        return result;
      }
      v23 = result;
      objc_msgSend(result, sel_value);
      v25 = v24;

      v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DA2D78]), sel_initWithTask_score_, v22, v25);
      outlined consume of Data._Representation(v14, v16);

      v27 = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v5, v2);
      if (v26)
      {
        MEMORY[0x1B5E43498](v27);
        if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v3 = v29;
LABEL_4:
      v8 += v30;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        return (id)v32;
      }
    }
    outlined consume of Data._Representation(v14, v16);
LABEL_6:
    if (one-time initialization token for executor != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1B4BE6000, v11, v12, "Failed to convert proto-backed Siri_Nlu_External_Task to legacy NLTask", v13, 2u);
      MEMORY[0x1B5E44758](v13, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    goto LABEL_4;
  }
  return result;
}

uint64_t Array<A>.toNluTasks()(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint8_t *v33;
  NSObject *v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  unint64_t v37;
  unint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  id v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v2);
  v43 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v40 - v8;
  v10 = type metadata accessor for Siri_Nlu_External_Task();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v49 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v44 = (char *)&v40 - v14;
  if (!(a1 >> 62))
  {
    v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v15)
      goto LABEL_3;
LABEL_27:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v15 = result;
  if (!result)
    goto LABEL_27;
LABEL_3:
  if (v15 >= 1)
  {
    v42 = v7;
    v47 = a1 & 0xC000000000000001;
    v46 = (id)objc_opt_self();
    v17 = 0;
    v18 = MEMORY[0x1E0DEE9D8];
    v45 = a1;
    v41 = v9;
    v48 = v15;
    do
    {
      v50 = v18;
      if (v47)
        v19 = (id)MEMORY[0x1B5E43B94](v17, a1);
      else
        v19 = *(id *)(a1 + 8 * v17 + 32);
      v20 = v19;
      v21 = objc_msgSend(v46, sel_convertFromTask_, v19);
      v22 = v21;
      if (v21 && (v23 = -[NSObject data](v21, sel_data)) != 0)
      {
        v24 = v23;
        v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        v27 = v26;

        v54 = v25;
        v55 = v27;
        v53 = 0;
        v51 = 0u;
        v52 = 0u;
        outlined copy of Data._Representation(v25, v27);
        BinaryDecodingOptions.init()();
        lazy protocol witness table accessor for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task();
        v28 = v42;
        Message.init<A>(contiguousBytes:extensions:partial:options:)();
        outlined consume of Data._Representation(v25, v27);
        v39 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56);
        v39(v28, 0, 1, v10);

        v9 = v41;
        (*(void (**)(void))(v11 + 32))();
        v39(v9, 0, 1, v10);
        a1 = v45;
      }
      else
      {
        if (one-time initialization token for executor != -1)
          swift_once();
        v29 = type metadata accessor for Logger();
        __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
        v30 = Logger.logObject.getter();
        v31 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v32 = 0;
          _os_log_impl(&dword_1B4BE6000, v30, v31, "Proto NL Task has no data.", v32, 2u);
          v33 = v32;
          a1 = v45;
          MEMORY[0x1B5E44758](v33, -1, -1);
          v34 = v22;
        }
        else
        {
          v34 = v30;
          v30 = v22;
        }

        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
      }
      v18 = v50;

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
      {
        outlined destroy of Siri_Nlu_External_Task?((uint64_t)v9);
      }
      else
      {
        v35 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        v36 = v44;
        v35(v44, v9, v10);
        v35(v49, v36, v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
        v38 = *(_QWORD *)(v18 + 16);
        v37 = *(_QWORD *)(v18 + 24);
        if (v38 >= v37 >> 1)
          v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1, v18);
        *(_QWORD *)(v18 + 16) = v38 + 1;
        v35((char *)(v18+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v38), v49, v10);
      }
      ++v17;
    }
    while (v48 != v17);
    swift_bridgeObjectRelease();
    return v18;
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of Siri_Nlu_External_Task?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Sequence<>.isContainsAppShortcutParse.getter()
{
  return Sequence.contains(where:)() & 1;
}

_QWORD *Siri_Nlu_External_UserParse.generalizedAppShortcuts.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  _QWORD v63[4];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, unint64_t, uint64_t);
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[5];

  v0 = type metadata accessor for UsoIdentifier.NluComponent();
  v76 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v72 = (char *)v63 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v73 = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v75 = (uint64_t)v63 - v9;
  MEMORY[0x1E0C80A78](v8);
  v74 = (uint64_t)v63 - v10;
  v11 = type metadata accessor for UsoIdentifier();
  v77 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1B5E3FA6C](v15);
  v19 = *(_QWORD *)(v18 + 16);
  v20 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v21 = *(_QWORD *)(v20 - 8);
  if (v19)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v17, v18 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)), v20);
    v22 = 0;
  }
  else
  {
    v22 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v17, v22, 1, v20);
  swift_bridgeObjectRelease();
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v17, 1, v20) != 1)
  {
    v25 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v20);
    if (!v25)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
    swift_retain();
    static UsoTask_CodegenConverter.convert(task:)();
    swift_release();
    if (!v79[3])
    {
      swift_release();
      v23 = (uint64_t *)&demangling cache variable for type metadata for Any?;
      v24 = (char *)v79;
      goto LABEL_6;
    }
    type metadata accessor for UsoTask_execute_common_VoiceCommand();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v63[3] = v25;
      v26 = v78;
      v27 = swift_retain();
      MEMORY[0x1B5E40A38](v79, v27);
      swift_release();
      if (v79[0])
      {
        v28 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
        swift_release();
        if (v28)
        {
          v29 = *(_QWORD *)(v28 + 16);
          if (!v29)
          {
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            return (_QWORD *)MEMORY[0x1E0DEE9D8];
          }
          v63[2] = v26;
          v68 = v2;
          v30 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
          v63[1] = v28;
          v31 = v28 + v30;
          v71 = *(_QWORD *)(v77 + 72);
          v32 = *(void (**)(char *, unint64_t, uint64_t))(v77 + 16);
          v69 = *MEMORY[0x1E0DA2C90];
          v70 = v32;
          v33 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v67 = *MEMORY[0x1E0DA0618];
          v66 = v11;
          v32(v13, v28 + v30, v11);
          while (1)
          {
            v34 = UsoIdentifier.namespace.getter();
            v36 = v35;
            v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            if (!v36)
            {
              swift_bridgeObjectRelease();
              goto LABEL_15;
            }
            if (v34 == v37 && v36 == v38)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v39 & 1) == 0)
                goto LABEL_15;
            }
            v40 = v74;
            UsoIdentifier.sourceComponent.getter();
            v42 = v75;
            v41 = v76;
            (*(void (**)(uint64_t, _QWORD, uint64_t))(v76 + 104))(v75, v67, v0);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v0);
            v43 = (uint64_t)&v4[*(int *)(v68 + 48)];
            outlined init with copy of UsoIdentifier.NluComponent?(v40, (uint64_t)v4);
            outlined init with copy of UsoIdentifier.NluComponent?(v42, v43);
            v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
            if (v44(v4, 1, v0) == 1)
              break;
            v46 = (uint64_t)v73;
            outlined init with copy of UsoIdentifier.NluComponent?((uint64_t)v4, (uint64_t)v73);
            if (v44((char *)v43, 1, v0) == 1)
            {
              outlined destroy of ReferenceResolutionClientProtocol?(v75, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
              outlined destroy of ReferenceResolutionClientProtocol?(v74, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
              (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v46, v0);
              v11 = v66;
LABEL_27:
              outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
              goto LABEL_15;
            }
            v47 = v76;
            v48 = v72;
            (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(v72, v43, v0);
            lazy protocol witness table accessor for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent();
            v49 = dispatch thunk of static Equatable.== infix(_:_:)();
            v50 = *(void (**)(char *, uint64_t))(v47 + 8);
            v50(v48, v0);
            outlined destroy of ReferenceResolutionClientProtocol?(v75, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
            outlined destroy of ReferenceResolutionClientProtocol?(v74, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
            v50(v73, v0);
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
            v11 = v66;
            if ((v49 & 1) != 0)
              goto LABEL_29;
LABEL_15:
            (*(void (**)(char *, uint64_t))(v77 + 8))(v13, v11);
            v31 += v71;
            if (!--v29)
            {
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              return v33;
            }
            v70(v13, v31, v11);
          }
          outlined destroy of ReferenceResolutionClientProtocol?(v42, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
          outlined destroy of ReferenceResolutionClientProtocol?(v40, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
          v45 = v44((char *)v43, 1, v0);
          v11 = v66;
          if (v45 != 1)
            goto LABEL_27;
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
LABEL_29:
          v51 = UsoIdentifier.appBundleId.getter();
          v64 = v52;
          v65 = v51;
          v53 = UsoIdentifier.groupIndex.getter();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
          v55 = v33[2];
          v54 = v33[3];
          if (v55 >= v54 >> 1)
            v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v33);
          v33[2] = v55 + 1;
          v56 = &v33[3 * v55];
          v57 = v64;
          v56[4] = v65;
          v56[5] = v57;
          *((_DWORD *)v56 + 12) = v53;
          *((_BYTE *)v56 + 52) = BYTE4(v53) & 1;
          goto LABEL_15;
        }
      }
      if (one-time initialization token for executor != -1)
        swift_once();
      v58 = type metadata accessor for Logger();
      __swift_project_value_buffer(v58, (uint64_t)static Logger.executor);
      v59 = Logger.logObject.getter();
      v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v61 = 0;
        _os_log_impl(&dword_1B4BE6000, v59, v60, "[Generalized AppShortcuts] Identifiers missing for VoiceCommand node", v61, 2u);
        MEMORY[0x1B5E44758](v61, -1, -1);
      }

      swift_release();
    }
    swift_release();
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v23 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
  v24 = v17;
LABEL_6:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v24, v23);
  return (_QWORD *)MEMORY[0x1E0DEE9D8];
}

uint64_t AppShortcutTarget.bundleIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppShortcutTarget.actionIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t AppShortcutTarget.groupIndex.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32);
}

uint64_t AppShortcutTarget.containsAppName.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 37);
}

uint64_t AppShortcutTarget.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v25;
  _QWORD v26[2];
  _BYTE v27[8];

  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  v26[0] = 0xD000000000000023;
  v26[1] = 0x80000001B4EFE5F0;
  v1 = *(_QWORD *)v0;
  v2 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8236;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v26[0] = 0xD000000000000012;
  v26[1] = 0x80000001B4EFE620;
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8236;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = 0xD000000000000012;
  v9._object = (void *)0x80000001B4EFE620;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v26, "groupIndex: ");
  HIWORD(v26[1]) = -5120;
  outlined init with take of UInt32?(v0 + 32, (uint64_t)v27);
  outlined init with take of UInt32?((uint64_t)v27, (uint64_t)&v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  v10._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 8236;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12 = v26[0];
  v13 = (void *)v26[1];
  v26[0] = 0xD000000000000023;
  v26[1] = 0x80000001B4EFE5F0;
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v26[0];
  v15 = v26[1];
  v26[0] = 0;
  v26[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v26[0] = 0xD000000000000011;
  v26[1] = 0x80000001B4EFE640;
  if ((*(_BYTE *)(v0 + 37) & 1) != 0)
    v17 = 1702195828;
  else
    v17 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 37) & 1) != 0)
    v18 = 0xE400000000000000;
  else
    v18 = 0xE500000000000000;
  v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20 = v26[0];
  v21 = (void *)v26[1];
  v26[0] = v16;
  v26[1] = v15;
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v20;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = 41;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  return v26[0];
}

uint64_t AppShortcutTarget.identifier.getter()
{
  __int128 *v0;
  Swift::String v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v6;
  __int128 v7;

  v7 = *v0;
  v6 = v7;
  outlined retain of String((uint64_t)&v7);
  v1._countAndFlagsBits = 35;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v3 = *((_QWORD *)v0 + 2);
  v2 = (void *)*((_QWORD *)v0 + 3);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v3;
  v4._object = v2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return v6;
}

void AppShortcutTarget.hash(into:)()
{
  uint64_t v0;
  Swift::UInt32 v1;

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v0 + 36) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v1 = *(_DWORD *)(v0 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(*(_BYTE *)(v0 + 37) & 1);
}

Swift::Int AppShortcutTarget.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt32 v1;

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v0 + 36) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v1 = *(_DWORD *)(v0 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(*(_BYTE *)(v0 + 37) & 1);
  return Hasher._finalize()();
}

uint64_t AppShortcutTarget.init(bundleIdentifier:actionIdentifier:groupIndex:containsAppName:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  *(_QWORD *)a7 = result;
  *(_QWORD *)(a7 + 8) = a2;
  *(_QWORD *)(a7 + 16) = a3;
  *(_QWORD *)(a7 + 24) = a4;
  *(_DWORD *)(a7 + 32) = a5;
  *(_BYTE *)(a7 + 36) = BYTE4(a5) & 1;
  *(_BYTE *)(a7 + 37) = a6;
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AppShortcutTarget()
{
  return AppShortcutTarget.debugDescription.getter();
}

void protocol witness for Hashable.hash(into:) in conformance AppShortcutTarget()
{
  uint64_t v0;
  Swift::UInt32 v1;
  int v2;
  Swift::UInt8 v3;

  v1 = *(_DWORD *)(v0 + 32);
  v2 = *(unsigned __int8 *)(v0 + 36);
  v3 = *(_BYTE *)(v0 + 37);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AppShortcutTarget()
{
  uint64_t v0;
  Swift::UInt32 v1;
  int v2;
  Swift::UInt8 v3;

  v1 = *(_DWORD *)(v0 + 32);
  v2 = *(unsigned __int8 *)(v0 + 36);
  v3 = *(_BYTE *)(v0 + 37);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AppShortcutTarget(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_QWORD *)((char *)v6 + 14) = *(_QWORD *)((char *)a1 + 30);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_QWORD *)((char *)v8 + 14) = *(_QWORD *)((char *)a2 + 30);
  return specialized static AppShortcutTarget.== infix(_:_:)((uint64_t)&v5, (uint64_t)&v7) & 1;
}

uint64_t GeneralizedAppShortcutTarget.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t GeneralizedAppShortcutTarget.groupIndex.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a3 | ((HIDWORD(a3) & 1) << 32);
}

uint64_t UsoTask_run_common_VoiceCommand.appShortcuts.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  unint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _QWORD *v43;
  __int128 v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  Swift::String v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  char v81;
  void (*v82)(char *, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  int v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint8_t *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  os_log_type_t v101;
  uint64_t result;
  _QWORD v103[2];
  __int128 v104;
  _QWORD *v105;
  _QWORD *v106;
  int v107;
  char *v108;
  int v109;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(char *, uint64_t, uint64_t);
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  _QWORD v135[3];
  int v136;
  char v137;
  char v138;

  v0 = type metadata accessor for UsoIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2);
  v129 = (char *)v103 - v6;
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v103 - v7;
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  if (!v134 || (v9 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)(), swift_release(), !v9))
  {
    if (one-time initialization token for executor == -1)
      goto LABEL_20;
    goto LABEL_90;
  }
  v108 = v4;
  v10 = MEMORY[0x1E0DEE9E0];
  v134 = MEMORY[0x1E0DEE9E0];
  v11 = *(_QWORD *)(v9 + 16);
  v126 = v0;
  v123 = v1;
  v121 = v9;
  if (v11)
  {
    v12 = *(unsigned __int8 *)(v1 + 80);
    v13 = (v12 + 32) & ~v12;
    v14 = v9 + v13;
    v15 = *(_QWORD *)(v1 + 72);
    v127 = v13;
    v124 = (void (*)(char *, uint64_t, uint64_t))(v12 | 7);
    v125 = v15 + v13;
    v128 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
    v122 = xmmword_1B4EE3F50;
    v128(v8, v9 + v13, v0);
    while (1)
    {
      v16 = UsoIdentifier.groupIndex.getter();
      v17 = v16;
      v18 = HIDWORD(v16) & 1;
      v19 = v16;
      v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16 | (unint64_t)(v18 << 32));
      v22 = *(_QWORD *)(v10 + 16);
      v23 = (v20 & 1) == 0;
      v24 = v22 + v23;
      if (__OFADD__(v22, v23))
        break;
      v25 = v20;
      if (*(_QWORD *)(v10 + 24) < v24)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, 1);
        v10 = v134;
        v26 = specialized __RawDictionaryStorage.find<A>(_:)(v19 | (v18 << 32));
        if ((v25 & 1) != (v27 & 1))
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        v21 = v26;
      }
      if ((v25 & 1) != 0)
      {
        v112 = v10;
        v28 = *(_QWORD *)(v10 + 56);
        v29 = *(void (**)(char *, char *, uint64_t))(v123 + 32);
        v29(v129, v8, v126);
        v30 = *(_QWORD *)(v28 + 8 * v21);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v28 + 8 * v21) = v30;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
          *(_QWORD *)(v28 + 8 * v21) = v30;
        }
        v33 = *(_QWORD *)(v30 + 16);
        v32 = *(_QWORD *)(v30 + 24);
        if (v33 >= v32 >> 1)
        {
          v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v30);
          *(_QWORD *)(v28 + 8 * v21) = v30;
        }
        *(_QWORD *)(v30 + 16) = v33 + 1;
        v0 = v126;
        v29((char *)(v30 + v127 + v33 * v15), v129, v126);
        v10 = v112;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>);
        v34 = swift_allocObject();
        *(_OWORD *)(v34 + 16) = v122;
        v0 = v126;
        (*(void (**)(uint64_t, char *, uint64_t))(v123 + 32))(v34 + v127, v8, v126);
        *(_QWORD *)(v10 + 8 * (v21 >> 6) + 64) |= 1 << v21;
        v35 = *(_QWORD *)(v10 + 48) + 8 * v21;
        *(_DWORD *)v35 = v17;
        *(_BYTE *)(v35 + 4) = v18;
        *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v21) = v34;
        v36 = *(_QWORD *)(v10 + 16);
        v37 = __OFADD__(v36, 1);
        v38 = v36 + 1;
        if (v37)
          goto LABEL_88;
        *(_QWORD *)(v10 + 16) = v38;
      }
      v14 += v15;
      if (!--v11)
        goto LABEL_23;
      v128(v8, v14, v0);
    }
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    swift_once();
LABEL_20:
    v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.executor);
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_1B4BE6000, v40, v41, "[AppShortcuts] Identifiers missing for VoiceCommand node", v42, 2u);
      v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_22:
      MEMORY[0x1B5E44758](v42, -1, -1);
    }
    else
    {
      v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    goto LABEL_84;
  }
LABEL_23:
  swift_bridgeObjectRelease();
  v45 = 0;
  v46 = *(_QWORD *)(v10 + 64);
  v110 = v10 + 64;
  v47 = 1 << *(_BYTE *)(v10 + 32);
  v48 = -1;
  if (v47 < 64)
    v48 = ~(-1 << v47);
  v49 = v48 & v46;
  v111 = (unint64_t)(v47 + 63) >> 6;
  v129 = (char *)*MEMORY[0x1E0DA2C90];
  *(_QWORD *)&v122 = *MEMORY[0x1E0DA2CA0];
  v105 = v135;
  v106 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v116 = "containsAppName: ";
  v120 = 0x80000001B4EFE660;
  v119 = 0x80000001B4EFE680;
  *(_QWORD *)&v44 = 136315138;
  v104 = v44;
  v103[1] = MEMORY[0x1E0DEE9B8] + 8;
  v50 = v123;
  v112 = v10;
LABEL_28:
  while (2)
  {
    if (v49)
    {
      v51 = __clz(__rbit64(v49));
      v49 &= v49 - 1;
      v52 = v51 | (v45 << 6);
LABEL_44:
      v56 = 8 * v52;
      v57 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + v56);
      v58 = *(_QWORD *)(v57 + 16);
      if (!v58)
        continue;
      v114 = v49;
      v115 = v45;
      v59 = *(_QWORD *)(v10 + 48) + v56;
      v109 = *(_DWORD *)v59;
      v107 = *(unsigned __int8 *)(v59 + 4);
      v60 = v57 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
      v113 = v57;
      swift_bridgeObjectRetain();
      v118 = 0;
      v127 = 0;
      v117 = 0;
      v128 = 0;
      LODWORD(v121) = 0;
      v61 = *(_QWORD *)(v50 + 72);
      v63 = v108;
      v124 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
      v62 = v124;
      v125 = v61;
      v124(v108, v60, v0);
      while (1)
      {
        v65 = UsoIdentifier.namespace.getter();
        v67 = v66;
        v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        if (!v67)
        {
          swift_bridgeObjectRelease();
          goto LABEL_60;
        }
        if (v65 == v68 && v67 == v69)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v70 & 1) == 0)
            goto LABEL_60;
        }
        v134 = UsoIdentifier.value.getter();
        v135[0] = v71;
        v132 = 94;
        v133 = 0xE100000000000000;
        v72._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        String.append(_:)(v72);
        swift_bridgeObjectRelease();
        v130 = 0;
        v131 = 0xE000000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        v73 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        v75 = v74;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v134 = v73;
        v135[0] = v75;
        v132 = 35;
        v133 = 0xE100000000000000;
        v76 = (_QWORD *)StringProtocol.components<A>(separatedBy:)();
        swift_bridgeObjectRelease();
        if (!v76[2])
          break;
        v77 = v76[5];
        v118 = v76[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v117 = UsoIdentifier.appBundleId.getter();
        v128 = v78;
        v50 = v123;
        v0 = v126;
        (*(void (**)(char *, uint64_t))(v123 + 8))(v63, v126);
        v127 = v77;
        v62 = v124;
        v61 = v125;
LABEL_49:
        v60 += v61;
        if (!--v58)
        {
          swift_bridgeObjectRelease();
          v82 = v128;
          if (!v128)
          {
            swift_bridgeObjectRelease();
            v10 = v112;
            goto LABEL_27;
          }
          v10 = v112;
          v83 = v127;
          if (v127)
          {
            if (one-time initialization token for executor != -1)
              swift_once();
            v84 = type metadata accessor for Logger();
            __swift_project_value_buffer(v84, (uint64_t)static Logger.executor);
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            v85 = Logger.logObject.getter();
            v86 = static os_log_type_t.debug.getter();
            v87 = os_log_type_enabled(v85, v86);
            v88 = v109;
            if (v87)
            {
              v89 = (uint8_t *)swift_slowAlloc();
              v90 = swift_slowAlloc();
              v132 = v90;
              *(_DWORD *)v89 = v104;
              v134 = v117;
              v135[0] = v128;
              v135[1] = v118;
              v135[2] = v83;
              v136 = v109;
              v137 = v107;
              v138 = v121 & 1;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v91 = String.init<A>(describing:)();
              v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, &v132);
              v82 = v128;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              v0 = v126;
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1B4BE6000, v85, v86, "Found AppShortcutTarget: %s", v89, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1B5E44758](v90, -1, -1);
              v93 = v89;
              v88 = v109;
              MEMORY[0x1B5E44758](v93, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }
            v94 = v83;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v106 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v106[2] + 1, 1, v106);
            v96 = v106[2];
            v95 = v106[3];
            v45 = v115;
            v49 = v114;
            if (v96 >= v95 >> 1)
            {
              v99 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v95 > 1), v96 + 1, 1, v106);
              v49 = v114;
              v45 = v115;
              v106 = v99;
            }
            v97 = v106;
            v106[2] = v96 + 1;
            v98 = &v97[5 * v96];
            v98[4] = v117;
            v98[5] = v82;
            v98[6] = v118;
            v98[7] = v94;
            *((_DWORD *)v98 + 16) = v88;
            *((_BYTE *)v98 + 68) = v107;
            *((_BYTE *)v98 + 69) = v121 & 1;
          }
          else
          {
            swift_bridgeObjectRelease();
LABEL_27:
            v45 = v115;
            v49 = v114;
          }
          goto LABEL_28;
        }
        v62(v63, v60, v0);
      }
      swift_bridgeObjectRelease();
      v61 = v125;
      v0 = v126;
      v50 = v123;
      v62 = v124;
LABEL_60:
      v79 = UsoIdentifier.namespace.getter();
      if (v80)
      {
        if (v79 == 0xD000000000000018 && v80 == v120)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v81 & 1) == 0)
            goto LABEL_48;
        }
        v134 = UsoIdentifier.value.getter();
        v135[0] = v64;
        v132 = 0xD000000000000012;
        v133 = v119;
        lazy protocol witness table accessor for type String and conformance String();
        LODWORD(v121) = StringProtocol.contains<A>(_:)();
        swift_bridgeObjectRelease();
      }
LABEL_48:
      (*(void (**)(char *, uint64_t))(v50 + 8))(v63, v0);
      goto LABEL_49;
    }
    break;
  }
  v53 = v45 + 1;
  if (__OFADD__(v45, 1))
    goto LABEL_87;
  if (v53 < v111)
  {
    v54 = *(_QWORD *)(v110 + 8 * v53);
    ++v45;
    if (!v54)
    {
      v45 = v53 + 1;
      if (v53 + 1 >= v111)
        goto LABEL_78;
      v54 = *(_QWORD *)(v110 + 8 * v45);
      if (!v54)
      {
        v45 = v53 + 2;
        if (v53 + 2 >= v111)
          goto LABEL_78;
        v54 = *(_QWORD *)(v110 + 8 * v45);
        if (!v54)
        {
          v55 = v53 + 3;
          if (v55 >= v111)
            goto LABEL_78;
          v54 = *(_QWORD *)(v110 + 8 * v55);
          if (!v54)
          {
            while (1)
            {
              v45 = v55 + 1;
              if (__OFADD__(v55, 1))
                goto LABEL_89;
              if (v45 >= v111)
                goto LABEL_78;
              v54 = *(_QWORD *)(v110 + 8 * v45);
              ++v55;
              if (v54)
                goto LABEL_43;
            }
          }
          v45 = v55;
        }
      }
    }
LABEL_43:
    v49 = (v54 - 1) & v54;
    v52 = __clz(__rbit64(v54)) + (v45 << 6);
    goto LABEL_44;
  }
LABEL_78:
  swift_release();
  v43 = v106;
  if (v106[2])
    return (uint64_t)v43;
  if (one-time initialization token for executor != -1)
    swift_once();
  v100 = type metadata accessor for Logger();
  __swift_project_value_buffer(v100, (uint64_t)static Logger.executor);
  v40 = Logger.logObject.getter();
  v101 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v101))
  {
    v42 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v42 = 0;
    _os_log_impl(&dword_1B4BE6000, v40, v101, "Found no AppShortcutTargets!", v42, 2u);
    goto LABEL_22;
  }
LABEL_84:

  return (uint64_t)v43;
}

uint64_t Siri_Nlu_External_UserParse.isAppShortcutParse.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _BYTE v11[24];
  uint64_t v12;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = &v11[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = MEMORY[0x1B5E3FA6C](v1);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v7 = *(_QWORD *)(v6 - 8);
  if (v5)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v3, v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v3, v8, 1, v6);
  swift_bridgeObjectRelease();
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  }
  else
  {
    Siri_Nlu_External_UserDialogAct.toUsoTask()();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v3, v6);
  }
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (v12)
  {
    type metadata accessor for UsoTask_run_common_VoiceCommand();
    result = swift_dynamicCast();
    if ((_DWORD)result)
    {
      swift_release();
      return 1;
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  return result;
}

BOOL closure #1 in Sequence<>.isContainsAppShortcutParse.getter()
{
  uint64_t v0;

  v0 = *(_QWORD *)(Siri_Nlu_External_UserParse.appShortcuts.getter() + 16);
  swift_bridgeObjectRelease();
  return v0 != 0;
}

uint64_t outlined init with copy of UsoIdentifier.NluComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent;
  if (!lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent)
  {
    v1 = type metadata accessor for UsoIdentifier.NluComponent();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DA0630], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent);
  }
  return result;
}

uint64_t outlined init with take of UInt32?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized static AppShortcutTarget.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  char v6;
  BOOL v7;
  char v8;

  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v5 & 1) != 0))
  {
    v7 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
    if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v8 & 1) != 0))
    {
      v6 = *(_BYTE *)(a2 + 36);
      if ((*(_BYTE *)(a1 + 36) & 1) != 0)
      {
        if (!*(_BYTE *)(a2 + 36))
          return v6 & 1;
        goto LABEL_18;
      }
      if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
        v6 = 1;
      if ((v6 & 1) == 0)
      {
LABEL_18:
        v6 = ((*(_BYTE *)(a1 + 37) & 1) == 0) ^ *(_BYTE *)(a2 + 37);
        return v6 & 1;
      }
      v6 = 0;
    }
  }
  return v6 & 1;
}

unint64_t lazy protocol witness table accessor for type AppShortcutTarget and conformance AppShortcutTarget()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AppShortcutTarget and conformance AppShortcutTarget;
  if (!lazy protocol witness table cache variable for type AppShortcutTarget and conformance AppShortcutTarget)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for AppShortcutTarget, &type metadata for AppShortcutTarget);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppShortcutTarget and conformance AppShortcutTarget);
  }
  return result;
}

uint64_t initializeWithCopy for AppShortcutTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AppShortcutTarget(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  return a1;
}

__n128 __swift_memcpy38_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 30) = *(_QWORD *)(a2 + 30);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AppShortcutTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppShortcutTarget(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 38))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppShortcutTarget(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 38) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 38) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppShortcutTarget()
{
  return &type metadata for AppShortcutTarget;
}

uint64_t initializeBufferWithCopyOfBuffer for GeneralizedAppShortcutTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GeneralizedAppShortcutTarget(uint64_t a1, uint64_t a2)
{
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy21_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 13) = *(_QWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for GeneralizedAppShortcutTarget(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for GeneralizedAppShortcutTarget(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 21))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeneralizedAppShortcutTarget(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 21) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 21) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GeneralizedAppShortcutTarget()
{
  return &type metadata for GeneralizedAppShortcutTarget;
}

uint64_t Siri_Nlu_External_UserParse.isPSC.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v21 = type metadata accessor for Siri_Nlu_External_UserParse();
  v0 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v20 - v8;
  v10 = type metadata accessor for Siri_Nlu_External_Parser();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E0D9F100], v3);
  lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v15 = v22;
  v14 = v23;
  v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v7, v3);
  v16(v9, v3);
  v17 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v0 + 16))(v2, v20, v21);
  if (v14 == v15)
    v18 = 1;
  else
    v18 = Siri_Nlu_External_UserParse.isOverriddenPSC.getter();
  (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v17);
  return v18 & 1;
}

uint64_t Siri_Nlu_External_UserParse.isDelegated.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v11;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1B5E3FA6C](v1);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v7 = *(_QWORD *)(v6 - 8);
  if (v5)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v3, v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v3, v8, 1, v6);
  swift_bridgeObjectRelease();
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v3);
    v9 = 0;
  }
  else
  {
    v9 = Siri_Nlu_External_UserDialogAct.hasDelegated.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v3, v6);
  }
  return v9 & 1;
}

uint64_t Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)()
{
  uint64_t v0;

  v0 = type metadata accessor for Array();
  MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF38], v0);
  return Sequence.compactMap<A>(_:)();
}

uint64_t Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  lazy protocol witness table accessor for type [Data] and conformance [A]();
  return Sequence.compactMap<A>(_:)();
}

uint64_t closure #1 in Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  uint64_t result;
  unint64_t v4;

  result = Message.serializedData(partial:)();
  if (v1)
  {

    result = 0;
    v4 = 0xF000000000000000;
  }
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t partial apply for closure #1 in Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)(a1);
}

uint64_t closure #1 in Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v7);
  outlined copy of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  BinaryDecodingOptions.init()();
  Message.init(serializedData:extensions:partial:options:)();
  if (v3)
  {

    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v8, 1, a2);
}

uint64_t partial apply for closure #1 in Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type [Data] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [Data] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Data] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Data]);
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Data] and conformance [A]);
  }
  return result;
}

SiriKitRuntime::NotebookAffinityScorer __swiftcall NotebookAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::NotebookAffinityScorer result;

  v0 = (void *)0x80000001B4EF6D20;
  v1 = 0xD000000000000021;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t NotebookAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized NotebookAffinityScorer.isExplicitlySupported(usoTask:)()
{
  uint64_t v0;
  _BYTE v2[32];
  _BYTE v3[24];
  uint64_t v4;

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v4)
    goto LABEL_42;
  outlined init with copy of Any?((uint64_t)v3, (uint64_t)v2);
  type metadata accessor for UsoTask_create_common_Reminder();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_noVerb_common_Reminder();
    if (!swift_dynamicCast())
    {
      type metadata accessor for UsoTask_checkExistence_common_Reminder();
      if (!swift_dynamicCast())
      {
        type metadata accessor for UsoTask_delete_common_Reminder();
        if (!swift_dynamicCast())
        {
          type metadata accessor for UsoTask_request_common_Reminder();
          if (!swift_dynamicCast())
          {
            type metadata accessor for UsoTask_summarise_common_Reminder();
            if (!swift_dynamicCast())
            {
              type metadata accessor for UsoTask_read_common_Reminder();
              if (!swift_dynamicCast())
              {
                type metadata accessor for UsoTask_update_common_Reminder();
                if (!swift_dynamicCast())
                {
                  type metadata accessor for UsoTask_disableSetting_common_Reminder();
                  if (!swift_dynamicCast())
                  {
                    type metadata accessor for UsoTask_disable_common_Reminder();
                    if (!swift_dynamicCast())
                    {
                      type metadata accessor for UsoTask_enableSetting_common_Reminder();
                      if (!swift_dynamicCast())
                      {
                        type metadata accessor for UsoTask_snooze_common_Reminder();
                        if (!swift_dynamicCast())
                        {
                          type metadata accessor for UsoTask_create_common_ReminderList();
                          if (!swift_dynamicCast())
                          {
                            type metadata accessor for UsoTask_noVerb_common_ReminderList();
                            if (!swift_dynamicCast())
                            {
                              type metadata accessor for UsoTask_checkExistence_common_ReminderList();
                              if (!swift_dynamicCast())
                              {
                                type metadata accessor for UsoTask_delete_common_ReminderList();
                                if (!swift_dynamicCast())
                                {
                                  type metadata accessor for UsoTask_request_common_ReminderList();
                                  if (!swift_dynamicCast())
                                  {
                                    type metadata accessor for UsoTask_summarise_common_ReminderList();
                                    if (!swift_dynamicCast())
                                    {
                                      type metadata accessor for UsoTask_read_common_ReminderList();
                                      if (!swift_dynamicCast())
                                      {
                                        type metadata accessor for UsoTask_update_common_ReminderList();
                                        if (!swift_dynamicCast())
                                        {
                                          type metadata accessor for UsoTask_create_common_Note();
                                          if (!swift_dynamicCast())
                                          {
                                            type metadata accessor for UsoTask_noVerb_common_Note();
                                            if (!swift_dynamicCast())
                                            {
                                              type metadata accessor for UsoTask_checkExistence_common_Note();
                                              if (!swift_dynamicCast())
                                              {
                                                type metadata accessor for UsoTask_delete_common_Note();
                                                if (!swift_dynamicCast())
                                                {
                                                  type metadata accessor for UsoTask_request_common_Note();
                                                  if (!swift_dynamicCast())
                                                  {
                                                    type metadata accessor for UsoTask_summarise_common_Note();
                                                    if (!swift_dynamicCast())
                                                    {
                                                      type metadata accessor for UsoTask_update_common_Note();
                                                      if (!swift_dynamicCast())
                                                      {
                                                        type metadata accessor for UsoTask_read_common_Note();
                                                        if (!swift_dynamicCast())
                                                        {
                                                          type metadata accessor for UsoTask_enableSetting_common_Note();
                                                          if (!swift_dynamicCast())
                                                          {
                                                            type metadata accessor for UsoTask_disableSetting_common_Note();
                                                            if (!swift_dynamicCast())
                                                            {
                                                              type metadata accessor for UsoTask_undo_common_Note();
                                                              if (!swift_dynamicCast())
                                                              {
                                                                type metadata accessor for UsoTask_create_common_NoteFolder();
                                                                if (!swift_dynamicCast())
                                                                {
                                                                  type metadata accessor for UsoTask_noVerb_common_NoteFolder();
                                                                  if (!swift_dynamicCast())
                                                                  {
                                                                    type metadata accessor for UsoTask_checkExistence_common_NoteFolder();
                                                                    if (!swift_dynamicCast())
                                                                    {
                                                                      type metadata accessor for UsoTask_delete_common_NoteFolder();
                                                                      if (!swift_dynamicCast())
                                                                      {
                                                                        type metadata accessor for UsoTask_request_common_NoteFolder();
                                                                        if (!swift_dynamicCast())
                                                                        {
                                                                          type metadata accessor for UsoTask_summarise_common_NoteFolder();
                                                                          if (!swift_dynamicCast())
                                                                          {
                                                                            type metadata accessor for UsoTask_update_common_NoteFolder();
                                                                            if (!swift_dynamicCast())
                                                                            {
                                                                              __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
LABEL_42:
                                                                              v0 = 0;
                                                                              goto LABEL_43;
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  v0 = 1;
LABEL_43:
  outlined destroy of Any?((uint64_t)v3);
  return v0;
}

uint64_t specialized NotebookAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  char *v28;
  uint8_t *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  char *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint8_t *v67;
  void (*v68)(char *, uint64_t);
  char *v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  uint64_t v74;
  uint64_t v75;
  uint8_t *v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v87 = a2;
  v90 = type metadata accessor for RREntity();
  v2 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90);
  v91 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RRCandidate();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v89 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v88 = (char *)&v78 - v8;
  v9 = type metadata accessor for Parse();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for USOParse();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v10 + 88))(v12, v9) != *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if (one-time initialization token for executor != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v20 = 2;
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1B4BE6000, v22, v23, "[NotebookAffinityScorer] Unexpected parse", v24, 2u);
      MEMORY[0x1B5E44758](v24, -1, -1);

      return v20;
    }

    return 2;
  }
  (*(void (**)(char *, uint64_t))(v10 + 96))(v12, v9);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  v17 = specialized static AffinityScorerUtils.getTask(_:)();
  v18 = v14;
  if (!v17)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = v16;
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1B4BE6000, v26, v27, "[NotebookAffinityScorer] Unable to obtain task from parse", v29, 2u);
      v30 = v29;
      v16 = v28;
      MEMORY[0x1B5E44758](v30, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return 2;
  }
  v19 = v17;
  if ((specialized NotebookAffinityScorer.isExplicitlySupported(usoTask:)() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    swift_release();
    return 3;
  }
  v31 = v13;
  v81 = v16;
  v82 = v19;
  if (UsoTask.baseEntityAsString.getter() == 0x6E456F4E5F6F7375 && v32 == 0xEC00000079746974)
  {
    swift_bridgeObjectRelease();
    v35 = v88;
    v36 = v91;
  }
  else
  {
    v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v35 = v88;
    v36 = v91;
    if ((v34 & 1) == 0)
      goto LABEL_32;
  }
  if (UsoTask.verbString.getter() == 0x657461647075 && v37 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v38 & 1) == 0)
    {
LABEL_32:
      if (one-time initialization token for executor != -1)
        swift_once();
      v57 = type metadata accessor for Logger();
      __swift_project_value_buffer(v57, (uint64_t)static Logger.executor);
      v58 = Logger.logObject.getter();
      v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v60 = 0;
        _os_log_impl(&dword_1B4BE6000, v58, v59, "[NotebookAffinityScorer] Not a shared task", v60, 2u);
        MEMORY[0x1B5E44758](v60, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v81, v31);
      return 2;
    }
  }
  v80 = v31;
  SiriEnvironment.salientEntitiesProvider.getter();
  v39 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  v40 = *(_QWORD *)(v39 + 16);
  if (v40)
  {
    v78 = v39;
    v79 = v18;
    v41 = v39 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v83 = *(_QWORD *)(v5 + 72);
    v86 = v5;
    v88 = *(char **)(v5 + 16);
    swift_bridgeObjectRetain();
    v84 = v2;
    v85 = 0x80000001B4EFE6E0;
    while (1)
    {
      v87 = v40;
      ((void (*)(char *, unint64_t, uint64_t))v88)(v35, v41, v4);
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      v42 = v35;
      v43 = *(void (**)(char *, uint64_t))(v2 + 8);
      v44 = v90;
      v43(v36, v90);
      v45 = UsoTask.verbString.getter();
      v47 = v46;
      swift_release();
      v94 = v45;
      v95 = v47;
      v92 = 0x525F6E6F6D6D6F63;
      v93 = 0xEF7265646E696D65;
      lazy protocol witness table accessor for type String and conformance String();
      v48 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      v49 = v89;
      ((void (*)(char *, char *, uint64_t))v88)(v89, v42, v4);
      if ((v48 & 1) != 0)
        break;
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      v43(v36, v44);
      v50 = v49;
      v51 = UsoTask.verbString.getter();
      v53 = v52;
      swift_release();
      v94 = v51;
      v95 = v53;
      v92 = 0xD000000000000013;
      v93 = v85;
      v54 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      v55 = *(void (**)(char *, uint64_t))(v86 + 8);
      v55(v50, v4);
      v55(v42, v4);
      if ((v54 & 1) != 0)
        goto LABEL_46;
      v35 = v42;
      v2 = v84;
      v41 += v83;
      v40 = v87 - 1;
      v36 = v91;
      if (v87 == 1)
      {
        swift_bridgeObjectRelease_n();
        v18 = v79;
        v56 = v80;
        goto LABEL_40;
      }
    }
    v68 = *(void (**)(char *, uint64_t))(v86 + 8);
    v68(v49, v4);
    v68(v42, v4);
LABEL_46:
    swift_bridgeObjectRelease_n();
    v69 = v81;
    if (one-time initialization token for executor != -1)
      swift_once();
    v70 = type metadata accessor for Logger();
    __swift_project_value_buffer(v70, (uint64_t)static Logger.executor);
    v71 = Logger.logObject.getter();
    v72 = static os_log_type_t.debug.getter();
    v73 = os_log_type_enabled(v71, v72);
    v75 = v79;
    v74 = v80;
    if (v73)
    {
      v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v76 = 0;
      _os_log_impl(&dword_1B4BE6000, v71, v72, "[NotebookAffinityScorer] Reminders found in entities, returning .high", v76, 2u);
      v77 = v76;
      v69 = v81;
      MEMORY[0x1B5E44758](v77, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v75 + 8))(v69, v74);
    return 3;
  }
  else
  {
    swift_bridgeObjectRelease();
    v56 = v80;
LABEL_40:
    v62 = v81;
    if (one-time initialization token for executor != -1)
      swift_once();
    v63 = type metadata accessor for Logger();
    __swift_project_value_buffer(v63, (uint64_t)static Logger.executor);
    v64 = Logger.logObject.getter();
    v65 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v66 = 0;
      _os_log_impl(&dword_1B4BE6000, v64, v65, "[NotebookAffinityScorer] No reminders found in entities, returning .low", v66, 2u);
      v67 = v66;
      v62 = v81;
      MEMORY[0x1B5E44758](v67, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v62, v56);
    return 1;
  }
}

ValueMetadata *type metadata accessor for NotebookAffinityScorer()
{
  return &type metadata for NotebookAffinityScorer;
}

SiriKitRuntime::NotificationAffinityScorer __swiftcall NotificationAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::NotificationAffinityScorer result;

  v0 = (void *)0x80000001B4EF6AF0;
  v1 = 0xD00000000000002ELL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t NotificationAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized NotificationAffinityScorer.isAmbiguousRead(task:)()
{
  uint64_t v0;
  _BYTE v2[32];
  _BYTE v3[24];
  uint64_t v4;

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v4)
    goto LABEL_5;
  outlined init with copy of Any?((uint64_t)v3, (uint64_t)v2);
  type metadata accessor for UsoTask_read_uso_NoEntity();
  if (!swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
LABEL_5:
    v0 = 0;
    goto LABEL_6;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  v0 = 1;
LABEL_6:
  outlined destroy of Any?((uint64_t)v3);
  return v0;
}

uint64_t specialized NotificationAffinityScorer.isSalientNotification(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  _QWORD v21[2];
  uint64_t v22;
  _BYTE v23[32];
  _BYTE v24[24];
  uint64_t v25;

  v0 = type metadata accessor for RREntity();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for RRCandidate();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  SiriEnvironment.salientEntitiesProvider.getter();
  v8 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  v10 = *(unsigned __int8 *)(v5 + 80);
  v21[0] = v8;
  v11 = v8 + ((v10 + 32) & ~v10);
  v12 = *(_QWORD *)(v5 + 72);
  v22 = v5;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v21[1] = MEMORY[0x1E0DEE9B8] + 8;
  v13(v7, v11, v4);
  while (1)
  {
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    static UsoEntity_CodeGenConverter.convert(entity:)();
    swift_release();
    if (!v25)
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v4);
      goto LABEL_4;
    }
    outlined init with copy of Any?((uint64_t)v24, (uint64_t)v23);
    type metadata accessor for UsoEntity_common_Notification();
    if (swift_dynamicCast())
      break;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
LABEL_4:
    outlined destroy of Any?((uint64_t)v24);
    v11 += v12;
    if (!--v9)
      goto LABEL_9;
    v13(v7, v11, v4);
  }
  swift_bridgeObjectRelease();
  swift_release();
  if (one-time initialization token for executor != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.default.getter();
  v18 = os_log_type_enabled(v16, v17);
  v19 = v22;
  if (v18)
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1B4BE6000, v16, v17, "NotificationAffinityScorer isSalientNotification | salient notification in entity pool", v20, 2u);
    MEMORY[0x1B5E44758](v20, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  outlined destroy of Any?((uint64_t)v24);
  return 1;
}

uint64_t specialized NotificationAffinityScorer.score(input:environment:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;

  v0 = type metadata accessor for Parse();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for USOParse();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) != *MEMORY[0x1E0D9C678])
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (one-time initialization token for executor != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v8 = 2;
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1B4BE6000, v10, v11, "NotificationAffinityScorer score | unexpected parse, returning default affinity", v12, 2u);
      MEMORY[0x1B5E44758](v12, -1, -1);

      return v8;
    }

    return 2;
  }
  (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  if (!specialized static AffinityScorerUtils.getTask(_:)())
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1B4BE6000, v14, v15, "NotificationAffinityScorer score | unable to obtain task, returning default affinity", v16, 2u);
      MEMORY[0x1B5E44758](v16, -1, -1);
    }

    goto LABEL_21;
  }
  if ((specialized NotificationAffinityScorer.isAmbiguousRead(task:)() & 1) == 0)
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1B4BE6000, v18, v19, "NotificationAffinityScorer score | not an ambiguous read task, returning default affinity", v20, 2u);
      MEMORY[0x1B5E44758](v20, -1, -1);
    }

    swift_release();
LABEL_21:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 2;
  }
  if ((specialized NotificationAffinityScorer.isSalientNotification(_:)() & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_release();
    return 3;
  }
  else
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1B4BE6000, v23, v24, "NotificationAffinityScorer score | no salient notification, returning low affinity", v25, 2u);
      MEMORY[0x1B5E44758](v25, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 1;
  }
}

ValueMetadata *type metadata accessor for NotificationAffinityScorer()
{
  return &type metadata for NotificationAffinityScorer;
}

Swift::Bool __swiftcall NSProcessInfo.isLowPowerModeEnabled()()
{
  void *v0;

  return objc_msgSend(v0, sel_isLowPowerModeEnabled);
}

id protocol witness for ProcessInfoProtocol.isLowPowerModeEnabled() in conformance NSProcessInfo()
{
  id *v0;

  return objc_msgSend(*v0, sel_isLowPowerModeEnabled);
}

uint64_t OfflineServerFallbackRule.ruleType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t OfflineServerFallbackRule.networkAvailabilityProvider.getter()
{
  return swift_retain();
}

uint64_t OfflineServerFallbackRule.coreTelephonyServiceProvider.getter()
{
  return swift_retain();
}

uint64_t OfflineServerFallbackRule.fallbackReason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ServerFallbackReason?(v1 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason, a1);
}

uint64_t outlined init with copy of ServerFallbackReason?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OfflineServerFallbackRule.processInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_processInfo, a1);
}

uint64_t OfflineServerFallbackRule.__allocating_init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(a4 + 24);
  v10 = *(_QWORD *)(a4 + 32);
  v11 = __swift_mutable_project_boxed_opaque_existential_1(a4, v9);
  v12 = specialized OfflineServerFallbackRule.__allocating_init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)(a1, a2, a3, v11, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1(a4);
  return v12;
}

uint64_t OfflineServerFallbackRule.init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = *(_QWORD *)(a4 + 24);
  v10 = *(_QWORD *)(a4 + 32);
  v11 = __swift_mutable_project_boxed_opaque_existential_1(a4, v9);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  v15 = specialized OfflineServerFallbackRule.init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)(a1, a2, a3, (uint64_t)v13, v4, v9, v10);
  __swift_destroy_boxed_opaque_existential_1(a4);
  return v15;
}

Swift::Bool __swiftcall OfflineServerFallbackRule.isFallbackReasonAnError()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  void (*v21)(_BYTE *, _QWORD, uint64_t);
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  char v27;
  _BYTE *v28;
  void (*v29)(_BYTE *, uint64_t);
  _BYTE *v30;
  _BYTE *v31;
  void (*v32)(_BYTE *, uint64_t);
  _BYTE v34[12];
  int v35;
  _BYTE *v36;
  void (*v37)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;

  v1 = type metadata accessor for ServerFallbackReason();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v36 = &v34[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ServerFallbackReason?, ServerFallbackReason?));
  v5 = MEMORY[0x1E0C80A78](v4);
  v41 = &v34[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v8 = &v34[-v7];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v40 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = &v34[-v13];
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = &v34[-v16];
  MEMORY[0x1E0C80A78](v15);
  v19 = &v34[-v18];
  v20 = v0 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason;
  v21 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104);
  v21(&v34[-v18], *MEMORY[0x1E0D9ED30], v1);
  v37 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v2 + 56);
  v37(v19, 0, 1, v1);
  v38 = v20;
  v39 = v4;
  v22 = (uint64_t)&v8[*(int *)(v4 + 48)];
  outlined init with copy of ServerFallbackReason?(v20, (uint64_t)v8);
  outlined init with copy of ServerFallbackReason?((uint64_t)v19, v22);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v23((uint64_t)v8, 1, v1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, &demangling cache variable for type metadata for ServerFallbackReason?);
    if (v23(v22, 1, v1) == 1)
    {
      v24 = (uint64_t)v8;
LABEL_10:
      outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for ServerFallbackReason?);
LABEL_15:
      v27 = 1;
      return v27 & 1;
    }
    goto LABEL_6;
  }
  outlined init with copy of ServerFallbackReason?((uint64_t)v8, (uint64_t)v17);
  if (v23(v22, 1, v1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, &demangling cache variable for type metadata for ServerFallbackReason?);
    (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v17, v1);
LABEL_6:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for (ServerFallbackReason?, ServerFallbackReason?));
    goto LABEL_7;
  }
  v28 = v36;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 32))(v36, v22, v1);
  lazy protocol witness table accessor for type ServerFallbackReason and conformance ServerFallbackReason();
  v35 = dispatch thunk of static Equatable.== infix(_:_:)();
  v29 = *(void (**)(_BYTE *, uint64_t))(v2 + 8);
  v29(v28, v1);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, &demangling cache variable for type metadata for ServerFallbackReason?);
  v29(v17, v1);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for ServerFallbackReason?);
  if ((v35 & 1) != 0)
    goto LABEL_15;
LABEL_7:
  v21(v14, *MEMORY[0x1E0D9ED38], v1);
  v37(v14, 0, 1, v1);
  v25 = v41;
  v26 = (uint64_t)&v41[*(int *)(v39 + 48)];
  outlined init with copy of ServerFallbackReason?(v38, (uint64_t)v41);
  outlined init with copy of ServerFallbackReason?((uint64_t)v14, v26);
  if (v23((uint64_t)v25, 1, v1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for ServerFallbackReason?);
    if (v23(v26, 1, v1) == 1)
    {
      v24 = (uint64_t)v25;
      goto LABEL_10;
    }
  }
  else
  {
    outlined init with copy of ServerFallbackReason?((uint64_t)v25, (uint64_t)v40);
    if (v23(v26, 1, v1) != 1)
    {
      v30 = v36;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 32))(v36, v26, v1);
      lazy protocol witness table accessor for type ServerFallbackReason and conformance ServerFallbackReason();
      v31 = v40;
      v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      v32 = *(void (**)(_BYTE *, uint64_t))(v2 + 8);
      v32(v30, v1);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for ServerFallbackReason?);
      v32(v31, v1);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v25, &demangling cache variable for type metadata for ServerFallbackReason?);
      return v27 & 1;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for ServerFallbackReason?);
    (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v40, v1);
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v25, &demangling cache variable for type metadata for (ServerFallbackReason?, ServerFallbackReason?));
  v27 = 0;
  return v27 & 1;
}

uint64_t OfflineServerFallbackRule.isLowPowerModeEnabled(processInfo:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2) & 1;
}

uint64_t OfflineServerFallbackRule.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_processInfo);
  return v0;
}

uint64_t specialized OfflineServerFallbackRule.init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v13;
  uint64_t *boxed_opaque_existential_1;

  v13 = (uint64_t *)(a5 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_processInfo);
  v13[3] = a6;
  v13[4] = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_1, a4, a6);
  *(_BYTE *)(a5 + 16) = 5;
  *(_QWORD *)(a5 + 24) = a1;
  outlined init with take of ServerFallbackReason?(a3, a5 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason);
  *(_QWORD *)(a5 + 32) = a2;
  return a5;
}

uint64_t specialized OfflineServerFallbackRule.__allocating_init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v13 = *(_QWORD *)(a6 - 8);
  MEMORY[0x1E0C80A78](a1);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OfflineServerFallbackRule();
  v16 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a4, a6);
  return specialized OfflineServerFallbackRule.init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)(a1, a2, a3, (uint64_t)v15, v16, a6, a7);
}

unint64_t lazy protocol witness table accessor for type ServerFallbackReason and conformance ServerFallbackReason()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ServerFallbackReason and conformance ServerFallbackReason;
  if (!lazy protocol witness table cache variable for type ServerFallbackReason and conformance ServerFallbackReason)
  {
    v1 = type metadata accessor for ServerFallbackReason();
    result = MEMORY[0x1B5E44668](MEMORY[0x1E0D9ED70], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ServerFallbackReason and conformance ServerFallbackReason);
  }
  return result;
}

uint64_t dispatch thunk of ProcessInfoProtocol.isLowPowerModeEnabled()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t ObjC metadata update function for OfflineServerFallbackRule()
{
  return type metadata accessor for OfflineServerFallbackRule();
}

void type metadata completion function for OfflineServerFallbackRule()
{
  unint64_t v0;

  type metadata accessor for ServerFallbackReason?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for OfflineServerFallbackRule()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of OfflineServerFallbackRule.__allocating_init(networkAvailabilityProvider:coreTelephonyServiceProvider:fallbackReason:processInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of OfflineServerFallbackRule.evaluate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of OfflineServerFallbackRule.isFallbackReasonAnError()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of OfflineServerFallbackRule.isLowPowerModeEnabled(processInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

void type metadata accessor for ServerFallbackReason?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for ServerFallbackReason?)
  {
    type metadata accessor for ServerFallbackReason();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ServerFallbackReason?);
  }
}

uint64_t outlined init with take of ServerFallbackReason?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t NodeIterator.next()()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if (*v0)
    *v0 = swift_weakLoadStrong();
  return v1;
}

_QWORD *OrderedForest.__allocating_init()()
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[3] = 0;
  result[4] = 0;
  result[2] = 0;
  return result;
}

_QWORD *OrderedForest.init()()
{
  _QWORD *v0;
  _QWORD *result;

  result = v0;
  v0[2] = 0;
  v0[3] = 0;
  v0[4] = 0;
  return result;
}

Swift::Void __swiftcall OrderedForest.clear()()
{
  _QWORD *v0;

  v0[2] = 0;
  swift_release();
  v0[3] = 0;
  swift_release();
  swift_beginAccess();
  v0[4] = 0;
}

uint64_t *OrderedForest.push(value:parentNode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  type metadata accessor for Node(0, *(_QWORD *)(*(_QWORD *)v4 + 80), a3, a4);
  swift_retain();
  v9 = specialized Node.__allocating_init(value:parent:)(a1, a2, v7, v8);
  if (a2)
  {
    swift_beginAccess();
    type metadata accessor for Array();
    swift_retain();
    swift_retain();
    Array.append(_:)();
    swift_endAccess();
    swift_release();
  }
  OrderedForest._push(_:)((uint64_t)v9);
  return v9;
}

uint64_t type metadata accessor for Node(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Node);
}

uint64_t *OrderedForest.replan(node:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  type metadata accessor for Node(0, *(_QWORD *)(*(_QWORD *)v4 + 80), a3, a4);
  v6 = a1 + *(_QWORD *)(*(_QWORD *)a1 + 88);
  v7 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 128);
  v8 = v7();
  v11 = specialized Node.__allocating_init(value:parent:)(v6, v8, v9, v10);
  v12 = specialized OrderedForest._recursiveRemove(_:)(a1);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(v12);
  v14 = (uint64_t *)((char *)v11 + *(_QWORD *)(*v11 + 104));
  swift_beginAccess();
  *v14 = v13;
  swift_bridgeObjectRelease();
  v15 = static Array._allocateUninitialized(_:)();
  v16 = (uint64_t *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 104));
  swift_beginAccess();
  *v16 = v15;
  swift_bridgeObjectRelease();
  v17 = OrderedForest._push(_:)(a1);
  v18 = ((uint64_t (*)(uint64_t))v7)(v17);
  if (v18)
  {
    v19 = v18;
    v20 = *(void (**)(void))(*(_QWORD *)v18 + 152);
    v20();
    v21 = type metadata accessor for Array();
    MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF50], v21);
    v22 = Collection.isEmpty.getter();
    v23 = swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      ((void (*)(uint64_t))v20)(v23);
      MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF60], v21);
      v24 = _ArrayProtocol.filter(_:)();
      v25 = (uint64_t *)(v19 + *(_QWORD *)(*(_QWORD *)v19 + 104));
      swift_beginAccess();
      *v25 = v24;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_retain();
      Array.append(_:)();
      swift_endAccess();
    }
    swift_release();
  }
  return v11;
}

uint64_t OrderedForest.remove(node:)(uint64_t *a1)
{
  specialized OrderedForest._recursiveRemove(_:)((uint64_t)a1);
  specialized OrderedForest._detachFromParent(_:)(a1);
  return swift_retain();
}

uint64_t OrderedForest.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t OrderedForest.count.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 32);
}

BOOL OrderedForest.isEmpty.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))() == 0;
}

uint64_t OrderedForest.makeIterator()()
{
  return swift_retain();
}

uint64_t OrderedForest.top()()
{
  return swift_retain();
}

uint64_t OrderedForest.raise(node:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v3 = *v1;
  v4 = OrderedForest._raise(_:)(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(v4);
  if (v5)
  {
    v6 = v5;
    v7 = *(void (**)(void))(*(_QWORD *)v5 + 152);
    v7();
    type metadata accessor for Node(255, *(_QWORD *)(v3 + 80), v8, v9);
    v10 = type metadata accessor for Array();
    MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF50], v10);
    v11 = Collection.isEmpty.getter();
    v12 = swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      ((void (*)(uint64_t))v7)(v12);
      MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF60], v10);
      v13 = _ArrayProtocol.filter(_:)();
      v14 = (uint64_t *)(v6 + *(_QWORD *)(*(_QWORD *)v6 + 104));
      swift_beginAccess();
      *v14 = v13;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_retain();
      Array.append(_:)();
      swift_endAccess();
    }
    swift_release();
  }
  return swift_retain();
}

uint64_t OrderedForest.removeTree(node:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v3 = a1;
  v4 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 128);
  swift_retain();
  v5 = v4();
  if (v5)
  {
    v6 = v5;
    do
    {
      v7 = swift_release();
      v3 = v6;
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 128))(v7);
    }
    while (v6);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 240))(v3);
  swift_release();
  return v8;
}

uint64_t OrderedForest.removeBranch(node:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v3 = a1;
  v4 = *v1;
  v5 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 128);
  swift_retain();
  v6 = v5();
  if (v6)
  {
    v7 = v6;
    while (1)
    {
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v7 + 152))();
      v11 = type metadata accessor for Node(0, *(_QWORD *)(v4 + 80), v9, v10);
      v12 = MEMORY[0x1B5E43540](v8, v11);
      swift_bridgeObjectRelease();
      if (v12 > 1)
        break;
      v13 = v7;
      v14 = swift_release();
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 128))(v14);
      v3 = v13;
      if (!v7)
        goto LABEL_8;
    }
    swift_release();
  }
  v13 = v3;
LABEL_8:
  v15 = (*(uint64_t (**)(uint64_t))(*v2 + 240))(v13);
  swift_release();
  return v15;
}

uint64_t OrderedForest._push(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v3 = v1[3];
  if (v1[2] && v3)
  {
    swift_weakAssign();
    *(_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 120)) = a1;
    swift_retain();
    swift_release();
    v1[3] = a1;
  }
  else
  {
    v1[3] = a1;
    swift_retain();
    swift_release();
    v1[2] = a1;
  }
  swift_retain();
  swift_release();
  result = swift_beginAccess();
  v5 = v1[4];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    v1[4] = v7;
  return result;
}

uint64_t OrderedForest._raise(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Bool IsNativeType;
  uint64_t v12;
  uint64_t v13;

  v3 = *v1;
  OrderedForest._remove(_:)(a1);
  v4 = OrderedForest._push(_:)(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(v4);
  v8 = type metadata accessor for Node(0, *(_QWORD *)(v3 + 80), v6, v7);
  if (MEMORY[0x1B5E43558](v5, v8))
  {
    v9 = 4;
    do
    {
      v10 = v9 - 4;
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        v12 = *(_QWORD *)(v5 + 8 * v9);
        swift_retain();
        v13 = v9 - 3;
        if (__OFADD__(v10, 1))
          goto LABEL_9;
      }
      else
      {
        v12 = _ArrayBuffer._getElementSlowPath(_:)();
        v13 = v9 - 3;
        if (__OFADD__(v10, 1))
        {
LABEL_9:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      OrderedForest._raise(_:)(v12);
      swift_release();
      ++v9;
    }
    while (v13 != MEMORY[0x1B5E43558](v5, v8));
  }
  return swift_bridgeObjectRelease();
}

uint64_t OrderedForest._remove(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t Strong;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v3 = v1[2];
  v4 = v1[3];
  if (v3)
    v5 = v3 == a1;
  else
    v5 = 0;
  if (v5)
  {
    if (v4)
      v8 = v4 == a1;
    else
      v8 = 0;
    if (v8)
    {
      v1[2] = 0;
      swift_release();
      v1[3] = 0;
    }
    else
    {
      v1[2] = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 120));
      swift_retain();
    }
    goto LABEL_23;
  }
  Strong = swift_weakLoadStrong();
  if (v4)
    v7 = v4 == a1;
  else
    v7 = 0;
  if (v7)
  {
    if (Strong)
    {
      *(_QWORD *)(Strong + *(_QWORD *)(*(_QWORD *)Strong + 120)) = 0;
      swift_retain();
      swift_release();
      swift_release();
    }
    else
    {
      swift_retain();
    }
    v9 = swift_weakLoadStrong();
    swift_release();
    v1[3] = v9;
    goto LABEL_23;
  }
  if (Strong)
  {
    *(_QWORD *)(Strong + *(_QWORD *)(*(_QWORD *)Strong + 120)) = *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 120));
    swift_retain();
    swift_release();
    swift_release();
  }
  if (*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 120)))
  {
    swift_weakLoadStrong();
    swift_weakAssign();
LABEL_23:
    swift_release();
  }
  swift_weakAssign();
  *(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 + 120)) = 0;
  swift_release();
  result = swift_beginAccess();
  v11 = v1[4];
  v12 = __OFSUB__(v11, 1);
  v13 = v11 - 1;
  if (v12)
    __break(1u);
  else
    v1[4] = v13;
  return result;
}

uint64_t OrderedForest.debugDescription(printer:)(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD v7[2];

  if (!*(_QWORD *)(v2 + 16))
    return 0x54207974706D453CLL;
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  v5 = swift_retain();
  OrderedForest.debugDescription(for:printer:level:result:)(v5, a1, a2, 0, (uint64_t)v7);
  swift_release();
  return v7[0];
}

uint64_t OrderedForest.debugDescription(for:printer:level:result:)(uint64_t result, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  Swift::Bool IsNativeType;
  uint64_t v25;
  uint64_t v26;

  if (a4 < 0)
  {
    __break(1u);
  }
  else
  {
    v10 = result;
    v11 = *v5;
    if (a4)
    {
      v12 = a4;
      do
      {
        v13._countAndFlagsBits = 8224;
        v13._object = (void *)0xE200000000000000;
        String.append(_:)(v13);
        --v12;
      }
      while (v12);
    }
    v14._countAndFlagsBits = a2(v10 + *(_QWORD *)(*(_QWORD *)v10 + 88));
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 10;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16 = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 152))();
    v19 = type metadata accessor for Node(0, *(_QWORD *)(v11 + 80), v17, v18);
    result = MEMORY[0x1B5E43558](v16, v19);
    if (!result)
      return swift_bridgeObjectRelease();
    v20 = __OFADD__(a4, 1);
    v21 = a4 + 1;
    if (!v20)
    {
      for (i = 4; ; ++i)
      {
        v23 = i - 4;
        IsNativeType = Array._hoistableIsNativeTypeChecked()();
        Array._checkSubscript(_:wasNativeTypeChecked:)();
        if (IsNativeType)
        {
          v25 = *(_QWORD *)(v16 + 8 * i);
          swift_retain();
          v26 = i - 3;
          if (__OFADD__(v23, 1))
            goto LABEL_14;
        }
        else
        {
          v25 = _ArrayBuffer._getElementSlowPath(_:)();
          v26 = i - 3;
          if (__OFADD__(v23, 1))
          {
LABEL_14:
            __break(1u);
            return swift_bridgeObjectRelease();
          }
        }
        OrderedForest.debugDescription(for:printer:level:result:)(v25, a2, a3, v21, a5);
        swift_release();
        if (v26 == MEMORY[0x1B5E43558](v16, v19))
          return swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t Node.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 88));
}

uint64_t Node.parent.getter()
{
  swift_beginAccess();
  return swift_weakLoadStrong();
}

uint64_t key path setter for Node.children : <A>Node<A>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*(_QWORD *)a2 + *(_QWORD *)(**(_QWORD **)a2 + 104));
  swift_beginAccess();
  *v3 = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t Node.children.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t *Node.__allocating_init(value:parent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;

  v6 = specialized Node.__allocating_init(value:parent:)(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 80) - 8) + 8))(a1);
  return v6;
}

uint64_t *Node.init(value:parent:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = specialized Node.init(value:parent:)(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t Node.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  v2 = *(_QWORD *)(v0 + v1);
  *(_QWORD *)(v0 + v1) = 0;
  if (v2)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native())
        break;
      v3 = *(_QWORD *)(v2 + *(_QWORD *)(*(_QWORD *)v2 + 120));
      swift_retain();
      swift_release();
      v2 = v3;
    }
    while (v3);
  }
  swift_release();
  return v0;
}

uint64_t Node.__deallocating_deinit()
{
  Node.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for IteratorProtocol.next() in conformance NodeIterator<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = NodeIterator.next()();
  *a1 = result;
  return result;
}

uint64_t closure #1 in default argument 0 of OrderedForest.debugDescription(printer:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x1E0C80A78](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return String.init<A>(describing:)();
}

uint64_t OrderedForest.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Sequence.makeIterator() in conformance OrderedForest<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 192))();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance OrderedForest<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for OrderedForest(0, *(_QWORD *)(a1 + 80), a3, a4);
  v7 = specialized Sequence._copyToContiguousArray()(v4, v6, a2);
  swift_release();
  return v7;
}

void protocol witness for Sequence._copyContents(initializing:) in conformance OrderedForest<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for OrderedForest(0, *(_QWORD *)(a4 + 80), a3, a4);
  JUMPOUT(0x1B5E43468);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance OrderedForest<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for OrderedForest(0, *(_QWORD *)(a4 + 80), a3, a4);
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t specialized OrderedForest._recursiveRemove(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Bool IsNativeType;
  uint64_t v11;
  uint64_t v12;

  v3 = *v1;
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 152))();
  v7 = type metadata accessor for Node(0, *(_QWORD *)(v3 + 80), v5, v6);
  if (MEMORY[0x1B5E43558](v4, v7))
  {
    v8 = 4;
    do
    {
      v9 = v8 - 4;
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        v11 = *(_QWORD *)(v4 + 8 * v8);
        swift_retain();
        v12 = v8 - 3;
        if (__OFADD__(v9, 1))
          goto LABEL_9;
      }
      else
      {
        v11 = _ArrayBuffer._getElementSlowPath(_:)();
        v12 = v8 - 3;
        if (__OFADD__(v9, 1))
        {
LABEL_9:
          __break(1u);
          break;
        }
      }
      specialized OrderedForest._recursiveRemove(_:)(v11);
      swift_release();
      ++v8;
    }
    while (v12 != MEMORY[0x1B5E43558](v4, v7));
  }
  swift_bridgeObjectRelease();
  OrderedForest._remove(_:)(a1);
  return a1;
}

uint64_t specialized OrderedForest._detachFromParent(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v1 = *a1;
  result = (*(uint64_t (**)(void))(*a1 + 128))();
  if (result)
  {
    v3 = result;
    v4 = *(void (**)(void))(*(_QWORD *)result + 152);
    v4();
    type metadata accessor for Node(255, *(_QWORD *)(v1 + 80), v5, v6);
    v7 = type metadata accessor for Array();
    MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF50], v7);
    v8 = Collection.isEmpty.getter();
    v9 = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
    {
      return swift_release();
    }
    else
    {
      ((void (*)(uint64_t))v4)(v9);
      MEMORY[0x1B5E44668](MEMORY[0x1E0DEAF60], v7);
      v10 = _ArrayProtocol.filter(_:)();
      v11 = (uint64_t *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 104));
      swift_beginAccess();
      *v11 = v10;
      swift_release();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      return swift_weakAssign();
    }
  }
  return result;
}

uint64_t *specialized Node.init(value:parent:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  swift_weakInit();
  swift_weakInit();
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 120)) = 0;
  v4 = *(_QWORD *)(v3 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))((uint64_t)v1 + *(_QWORD *)(*v1 + 88), a1, v4);
  swift_beginAccess();
  swift_weakAssign();
  type metadata accessor for Node(0, v4, v5, v6);
  v7 = static Array._allocateUninitialized(_:)();
  swift_release();
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 104)) = v7;
  swift_weakAssign();
  *(uint64_t *)((char *)v1 + *(_QWORD *)(*v1 + 120)) = 0;
  swift_release();
  return v1;
}

uint64_t *specialized Node.__allocating_init(value:parent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for Node(0, *(_QWORD *)(v4 + 80), a3, a4);
  swift_allocObject();
  return specialized Node.init(value:parent:)(a1);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in OrderedForest<A>()
{
  JUMPOUT(0x1B5E44668);
}

uint64_t sub_1B4E2E05C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E2E08C()
{
  swift_beginAccess();
  return swift_weakAssign();
}

uint64_t sub_1B4E2E0E0()
{
  return 8;
}

_QWORD *sub_1B4E2E0EC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B4E2E0F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E2E12C()
{
  return 8;
}

uint64_t sub_1B4E2E138@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 160))();
  *a2 = result;
  return result;
}

uint64_t sub_1B4E2E168(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 32) = v2;
  return result;
}

uint64_t sub_1B4E2E1A8()
{
  return 8;
}

uint64_t type metadata completion function for Node()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for Node()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Node.parent.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of Node.children.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of Node.__allocating_init(value:parent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

_QWORD *assignWithCopy for NodeIterator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for NodeIterator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeIterator(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeIterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t type metadata accessor for NodeIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for NodeIterator);
}

uint64_t type metadata completion function for OrderedForest()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for OrderedForest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OrderedForest);
}

uint64_t method lookup function for OrderedForest()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of OrderedForest.count.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of OrderedForest.isEmpty.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of OrderedForest.makeIterator()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of OrderedForest.clear()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of OrderedForest.push(value:parentNode:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of OrderedForest.top()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of OrderedForest.raise(node:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of OrderedForest.replan(node:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of OrderedForest.remove(node:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of OrderedForest.removeTree(node:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of OrderedForest.removeBranch(node:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of OrderedForest.debugDescription(printer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of OrderedForest.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 320))();
}

BOOL partial apply for closure #1 in OrderedForest._detachFromParent(_:)(_QWORD *a1)
{
  uint64_t v1;

  return *a1 != v1;
}

BOOL partial apply for closure #1 in OrderedForest.replan(node:)(_QWORD *a1)
{
  return partial apply for closure #1 in OrderedForest._detachFromParent(_:)(a1);
}

uint64_t PeerInfoProvider.__allocating_init(peerInfo:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

void *PeerInfoProvider.peerInfo.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t PeerInfoProvider.init(peerInfo:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

Swift::String_optional __swiftcall PeerInfoProvider.getIdsIdentifier()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = EndpointInfoProvider.getIdentifier()((SEL *)&selRef_idsIdentifier);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall PeerInfoProvider.getRapportEffectiveIdentifier()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = EndpointInfoProvider.getIdentifier()((SEL *)&selRef_rapportEffectiveIdentifier);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall PeerInfoProvider.getMediaSystemIdentifier()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = EndpointInfoProvider.getIdentifier()((SEL *)&selRef_mediaSystemIdentifier);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Bool __swiftcall PeerInfoProvider.isOwnedByCurrentUser()()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  if (v1)
    return objc_msgSend(v1, sel_isDeviceOwnedByCurrentUser);
  else
    return 1;
}

uint64_t PeerInfoProvider.getDeviceIdiom()()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;

  v1 = *(void **)(v0 + 16);
  if (v1 && (v2 = objc_msgSend(v1, sel_userInterfaceIdiom)) != 0)
  {
    v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    return DeviceIdiom.init(aceValue:)();
  }
  else
  {
    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    SiriEnvironment.currentDevice.getter();
    swift_release();
    CurrentDevice.localDeviceIdiom.getter();
    return swift_release();
  }
}

Swift::String_optional __swiftcall PeerInfoProvider.getMediaRouteIdentifier()()
{
  uint64_t v0;
  void *v1;
  Swift::String_optional result;

  v0 = EndpointInfoProvider.getIdentifier()((SEL *)&selRef_mediaRouteIdentifier);
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall PeerInfoProvider.getPeerName()()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::String_optional result;

  v1 = *(void **)(v0 + 16);
  if (!v1)
    goto LABEL_7;
  v2 = objc_msgSend(v1, sel_name);
  if (!v2)
    goto LABEL_7;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v7 = v4 & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    v4 = 0;
    v6 = 0;
  }
  v8 = v4;
  v9 = (void *)v6;
  result.value._object = v9;
  result.value._countAndFlagsBits = v8;
  return result;
}

uint64_t PeerInfoProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for PeerInfoProviding.isOwnedByCurrentUser() in conformance PeerInfoProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))() & 1;
}

uint64_t protocol witness for PeerInfoProviding.getDeviceIdiom() in conformance PeerInfoProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t method lookup function for PeerInfoProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PeerInfoProvider.__allocating_init(peerInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PeerInfoProvider.getIdsIdentifier()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PeerInfoProvider.getRapportEffectiveIdentifier()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PeerInfoProvider.getMediaSystemIdentifier()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PeerInfoProvider.isOwnedByCurrentUser()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PeerInfoProvider.getDeviceIdiom()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PeerInfoProvider.getMediaRouteIdentifier()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PeerInfoProvider.getPeerName()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t PerTCUFlowOperationQueue.submit(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t result;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = (_QWORD *)(v2 + 112);
  swift_beginAccess();
  v7 = *(_QWORD **)(v2 + 112);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 112) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *v6 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v6 = v7;
  }
  v7[2] = v10 + 1;
  v11 = &v7[2 * v10];
  v11[4] = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error);
  v11[5] = v5;
  result = swift_endAccess();
  if ((unint64_t)(*(_QWORD *)(v2 + 144) - 1) >= 2)
  {
    PerTCUFlowOperationQueue.runTasksNow()();
    return swift_release();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return v5();
}

uint64_t sub_1B4E2E8EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  return ((uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)
                                                 + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)))(a1, v4);
}

uint64_t PerTCUFlowOperationQueue.wait()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v1 + 24) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v0 + 32) = v2;
  if (v2)
  {
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 40) = v3;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v4 = PerTCUFlowOperationQueue.wait();
  }
  else
  {
    if (*(_QWORD *)(v1 + 144) == 2)
    {
      v5 = type metadata accessor for UnsafeFlowOperationQueueError();
      lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type UnsafeFlowOperationQueueError and conformance UnsafeFlowOperationQueueError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ADC8], MEMORY[0x1E0D9ADD0]);
      swift_allocError();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v6, *MEMORY[0x1E0D9ADC0], v5);
      swift_willThrow();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v8 = *(_QWORD *)(v0 + 24);
    v9 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
    v11 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type PerTCUFlowOperationQueue and conformance PerTCUFlowOperationQueue, v10, (uint64_t (*)(uint64_t))type metadata accessor for PerTCUFlowOperationQueue, (uint64_t)&protocol conformance descriptor for PerTCUFlowOperationQueue);
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v1;
    v12[3] = v11;
    v12[4] = v1;
    swift_retain_n();
    v13 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v8, (uint64_t)&async function pointer to partial apply for closure #1 in PerTCUFlowOperationQueue.wait(), (uint64_t)v12);
    *(_QWORD *)(v0 + 56) = v13;
    *(_QWORD *)(v1 + 120) = v13;
    swift_retain();
    swift_release();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v3;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v4 = PerTCUFlowOperationQueue.wait();
  }
  *v3 = v0;
  v3[1] = v4;
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PerTCUFlowOperationQueue.wait()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 64) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in PerTCUFlowOperationQueue.wait()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  int v4;
  void *v5;
  uint64_t (*v6)(void);
  int v7;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = (uint64_t *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(void **)(v1 + 128);
  *(_QWORD *)(v0 + 72) = v3;
  v4 = *(unsigned __int8 *)(v1 + 136);
  *(_BYTE *)(v0 + 88) = v4;
  if (v4 == 255)
  {
    if ((static Task<>.isCancelled.getter() & 1) == 0)
    {
      v9 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 80) = v9;
      *v9 = v0;
      v9[1] = closure #1 in PerTCUFlowOperationQueue.wait();
      return static Task<>.sleep(nanoseconds:)();
    }
    v7 = *(unsigned __int8 *)(*v2 + 136);
    if (v7 == 255)
      return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000064, 0x80000001B4EFE920, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/PerTCUFlowOperationQueue.swift", 99, 2, 57);
    v5 = *(void **)(*v2 + 128);
    outlined copy of Result<(), Error>(v5, v7 & 1);
    LOBYTE(v4) = *(_BYTE *)(v0 + 88);
    v3 = *(void **)(v0 + 72);
    if ((v7 & 1) == 0)
    {
      v1 = *v2;
      goto LABEL_3;
    }
LABEL_9:
    *(_QWORD *)(v0 + 40) = v5;
    outlined copy of Result<(), Error>?(v3, v4);
    outlined copy of Result<(), Error>(v5, 1);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
    if (one-time initialization token for executor != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    v11 = v5;
    v12 = v5;
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v20 = v16;
      *(_DWORD *)v15 = 136315138;
      swift_getErrorValue();
      v17 = Error.localizedDescription.getter();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<(), Error>(v5, 1);
      outlined consume of Result<(), Error>(v5, 1);
      _os_log_impl(&dword_1B4BE6000, v13, v14, "UnsafeFlowOperationQueue: Operation threw an error: %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v16, -1, -1);
      MEMORY[0x1B5E44758](v15, -1, -1);
    }
    else
    {
      outlined consume of Result<(), Error>(v5, 1);
      outlined consume of Result<(), Error>(v5, 1);
    }

    v19 = *(_QWORD *)(v0 + 64);
    swift_willThrow();
    outlined consume of Result<(), Error>(v5, 1);
    *(_QWORD *)(v19 + 120) = 0;
    swift_release();
    v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  v5 = v3;
  if ((v4 & 1) != 0)
    goto LABEL_9;
LABEL_3:
  *(_QWORD *)(v1 + 120) = 0;
  outlined copy of Result<(), Error>?(v3, v4);
  swift_release();
  v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(unsigned __int8 *)(v1 + 136);
  if (v2 == 255)
    return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000064, 0x80000001B4EFE920, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/PerTCUFlowOperationQueue.swift", 99, 2, 57);
  v4 = *(void **)(v1 + 128);
  outlined copy of Result<(), Error>(v4, v2 & 1);
  v5 = *(_BYTE *)(v0 + 88);
  v6 = *(void **)(v0 + 72);
  if ((v2 & 1) != 0)
  {
    *(_QWORD *)(v0 + 40) = v4;
    outlined copy of Result<(), Error>?(v6, v5);
    outlined copy of Result<(), Error>(v4, 1);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
    if (one-time initialization token for executor != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    v8 = v4;
    v9 = v4;
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v18 = v13;
      *(_DWORD *)v12 = 136315138;
      swift_getErrorValue();
      v14 = Error.localizedDescription.getter();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<(), Error>(v4, 1);
      outlined consume of Result<(), Error>(v4, 1);
      _os_log_impl(&dword_1B4BE6000, v10, v11, "UnsafeFlowOperationQueue: Operation threw an error: %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1B5E44758](v13, -1, -1);
      MEMORY[0x1B5E44758](v12, -1, -1);
    }
    else
    {
      outlined consume of Result<(), Error>(v4, 1);
      outlined consume of Result<(), Error>(v4, 1);
    }

    v17 = *(_QWORD *)(v0 + 64);
    swift_willThrow();
    outlined consume of Result<(), Error>(v4, 1);
    *(_QWORD *)(v17 + 120) = 0;
    swift_release();
    v16 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(v0 + 64) + 120) = 0;
    outlined copy of Result<(), Error>?(v6, v5);
    swift_release();
    v16 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v16();
}

unint64_t PerTCUFlowOperationQueue.finalize()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char *v3;

  v1 = *(_QWORD *)(v0 + 144);
  if (v1 == 1)
    return PerTCUFlowOperationQueue.runTasksNow()();
  if (v1 == 2)
    v2 = 1;
  else
    v2 = 3;
  lazy protocol witness table accessor for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError();
  swift_allocError();
  *v3 = v2;
  return swift_willThrow();
}

unint64_t PerTCUFlowOperationQueue.runTasksNow()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(void **)(v0 + 128);
  *(_QWORD *)(v0 + 128) = 0;
  v5 = *(_BYTE *)(v0 + 136);
  *(_BYTE *)(v0 + 136) = -1;
  outlined consume of Result<(), Error>?(v4, v5);
  v6 = *(_QWORD *)(v0 + 144);
  if (v6 >= 3)
  {
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
    v9 = lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type PerTCUFlowOperationQueue and conformance PerTCUFlowOperationQueue, v8, (uint64_t (*)(uint64_t))type metadata accessor for PerTCUFlowOperationQueue, (uint64_t)&protocol conformance descriptor for PerTCUFlowOperationQueue);
    v10 = (_QWORD *)swift_allocObject();
    v10[2] = v0;
    v10[3] = v9;
    v10[4] = v0;
    swift_retain_n();
    v6 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in PerTCUFlowOperationQueue.runTasksNow(), (uint64_t)v10);
    v11 = *(_QWORD *)(v0 + 144);
    *(_QWORD *)(v0 + 144) = v6;
    swift_retain();
    outlined consume of PerTCUFlowOperationQueue.State(v11);
  }
  return v6;
}

uint64_t closure #1 in PerTCUFlowOperationQueue.runTasksNow()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 64) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in PerTCUFlowOperationQueue.runTasksNow()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int *v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);

  v1 = *(_QWORD *)(v0 + 64);
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 64);
  if (*(_QWORD *)(*(_QWORD *)(v1 + 112) + 16))
  {
    swift_beginAccess();
    v3 = *(_QWORD **)(v2 + 112);
    v4 = v3[2];
    if (v4)
    {
      v5 = (int *)v3[4];
      *(_QWORD *)(v0 + 72) = v3[5];
      swift_retain();
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || (unint64_t)(v4 - 1) > v3[3] >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v4, 1, v3);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ());
      swift_arrayDestroy();
      v7 = v3[2];
      if (v7)
      {
        v8 = *(_QWORD *)(v0 + 64);
        memmove(v3 + 4, v3 + 6, 16 * v7 - 16);
        v3[2] = v7 - 1;
        *(_QWORD *)(v8 + 112) = v3;
        swift_endAccess();
        v16 = (uint64_t (*)(void))((char *)v5 + *v5);
        v9 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 80) = v9;
        *v9 = v0;
        v9[1] = closure #1 in PerTCUFlowOperationQueue.runTasksNow();
        return v16();
      }
    }
    else
    {
      __break(1u);
    }
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
  else
  {
    v11 = *(void **)(v2 + 128);
    *(_QWORD *)(v2 + 128) = 0;
    v12 = *(_BYTE *)(v2 + 136);
    *(_BYTE *)(v2 + 136) = 0;
    outlined copy of Result<(), Error>(0, 0);
    outlined consume of Result<(), Error>?(v11, v12);
    v13 = *(_QWORD *)(v2 + 144);
    *(_QWORD *)(v2 + 144) = 0;
    outlined consume of PerTCUFlowOperationQueue.State(v13);
    v14 = *(_QWORD *)(v2 + 120);
    if (v14)
    {
      swift_retain();
      v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      MEMORY[0x1B5E436B4](v14, MEMORY[0x1E0DEE9C0] + 8, v15, MEMORY[0x1E0DEDB38]);
      outlined consume of Result<(), Error>(0, 0);
      swift_release();
    }
    else
    {
      outlined consume of Result<(), Error>(0, 0);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int *v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);

  v1 = *(_QWORD *)(v0 + 64);
  v2 = v1 + 112;
  if (*(_QWORD *)(*(_QWORD *)(v1 + 112) + 16))
  {
    swift_beginAccess();
    v3 = *(_QWORD **)v2;
    v4 = *(_QWORD *)(*(_QWORD *)v2 + 16);
    if (v4)
    {
      v5 = (int *)v3[4];
      *(_QWORD *)(v0 + 72) = v3[5];
      swift_retain();
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || (unint64_t)(v4 - 1) > v3[3] >> 1)
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v4, 1, v3);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ());
      swift_arrayDestroy();
      v7 = v3[2];
      if (v7)
      {
        v8 = *(_QWORD *)(v0 + 64);
        memmove(v3 + 4, v3 + 6, 16 * v7 - 16);
        v3[2] = v7 - 1;
        *(_QWORD *)(v8 + 112) = v3;
        swift_endAccess();
        v16 = (uint64_t (*)(void))((char *)v5 + *v5);
        v9 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 80) = v9;
        *v9 = v0;
        v9[1] = closure #1 in PerTCUFlowOperationQueue.runTasksNow();
        return v16();
      }
    }
    else
    {
      __break(1u);
    }
    return _fatalErrorMessage(_:_:file:line:flags:)();
  }
  else
  {
    v11 = *(void **)(v1 + 128);
    *(_QWORD *)(v1 + 128) = 0;
    v12 = *(_BYTE *)(v1 + 136);
    *(_BYTE *)(v1 + 136) = 0;
    outlined copy of Result<(), Error>(0, 0);
    outlined consume of Result<(), Error>?(v11, v12);
    v13 = *(_QWORD *)(v1 + 144);
    *(_QWORD *)(v1 + 144) = 0;
    outlined consume of PerTCUFlowOperationQueue.State(v13);
    v14 = *(_QWORD *)(v1 + 120);
    if (v14)
    {
      swift_retain();
      v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      MEMORY[0x1B5E436B4](v14, MEMORY[0x1E0DEE9C0] + 8, v15, MEMORY[0x1E0DEDB38]);
      outlined consume of Result<(), Error>(0, 0);
      swift_release();
    }
    else
    {
      outlined consume of Result<(), Error>(0, 0);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(void **)(v2 + 128);
  *(_QWORD *)(v2 + 128) = v1;
  v4 = *(_BYTE *)(v2 + 136);
  *(_BYTE *)(v2 + 136) = 1;
  outlined copy of Result<(), Error>(v1, 1);
  outlined consume of Result<(), Error>?(v3, v4);
  v5 = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(v2 + 144) = 0;
  outlined consume of PerTCUFlowOperationQueue.State(v5);
  v6 = *(_QWORD *)(v2 + 120);
  if (v6)
  {
    swift_retain();
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    MEMORY[0x1B5E436B4](v6, MEMORY[0x1E0DEE9C0] + 8, v7, MEMORY[0x1E0DEDB38]);
    outlined consume of Result<(), Error>(v1, 1);
    swift_release();
  }
  else
  {
    outlined consume of Result<(), Error>(v1, 1);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PerTCUFlowOperationQueue.abandon()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 144);
  if (v1 == 1)
  {
    v4 = type metadata accessor for UnsafeFlowOperationQueueError();
    lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type UnsafeFlowOperationQueueError and conformance UnsafeFlowOperationQueueError, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ADC8], MEMORY[0x1E0D9ADD0]);
    v5 = swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v6, *MEMORY[0x1E0D9ADC0], v4);
    v7 = *(void **)(v0 + 128);
    *(_QWORD *)(v0 + 128) = v5;
    v8 = *(_BYTE *)(v0 + 136);
    *(_BYTE *)(v0 + 136) = 1;
    outlined consume of Result<(), Error>?(v7, v8);
    v9 = *(_QWORD *)(v0 + 144);
    *(_QWORD *)(v0 + 144) = 2;
    outlined consume of PerTCUFlowOperationQueue.State(v9);
    v10 = *(_QWORD *)(v0 + 120);
    if (v10)
    {
      swift_retain();
      v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      MEMORY[0x1B5E436B4](v10, MEMORY[0x1E0DEE9C0] + 8, v11, MEMORY[0x1E0DEDB38]);
      swift_release();
    }
  }
  else
  {
    if (v1 == 2)
      v2 = 2;
    else
      v2 = 0;
    lazy protocol witness table accessor for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError();
    swift_allocError();
    *v3 = v2;
    swift_willThrow();
  }
}

uint64_t PerTCUFlowOperationQueue.OperationError.debugDescription.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1B4E2FD84 + 4 * byte_1B4EEC5E0[a1]))(0xD000000000000031, 0x80000001B4EFE880);
}

uint64_t sub_1B4E2FD84()
{
  uint64_t v0;

  return v0 + 15;
}

unint64_t sub_1B4E2FD9C()
{
  return 0xD000000000000022;
}

BOOL static PerTCUFlowOperationQueue.OperationError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void PerTCUFlowOperationQueue.OperationError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int PerTCUFlowOperationQueue.OperationError.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PerTCUFlowOperationQueue.OperationError()
{
  unsigned __int8 *v0;

  return PerTCUFlowOperationQueue.OperationError.debugDescription.getter(*v0);
}

uint64_t PerTCUFlowOperationQueue.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of Result<(), Error>?(*(void **)(v0 + 128), *(_BYTE *)(v0 + 136));
  outlined consume of PerTCUFlowOperationQueue.State(*(_QWORD *)(v0 + 144));
  swift_defaultActor_destroy();
  return v0;
}

uint64_t PerTCUFlowOperationQueue.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of Result<(), Error>?(*(void **)(v0 + 128), *(_BYTE *)(v0 + 136));
  outlined consume of PerTCUFlowOperationQueue.State(*(_QWORD *)(v0 + 144));
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t PerTCUFlowOperationQueue.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = swift_allocObject();
  swift_defaultActor_initialize();
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 112) = v1;
  *(_BYTE *)(v0 + 136) = -1;
  *(_QWORD *)(v0 + 144) = 1;
  return v0;
}

uint64_t PerTCUFlowOperationQueue.init()()
{
  uint64_t v0;
  uint64_t v1;

  swift_defaultActor_initialize();
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 112) = v1;
  *(_BYTE *)(v0 + 136) = -1;
  *(_QWORD *)(v0 + 144) = 1;
  return v0;
}

uint64_t PerTCUFlowOperationQueue.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for UnsafeFlowOperationQueue.wait() in conformance PerTCUFlowOperationQueue()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return PerTCUFlowOperationQueue.wait()();
}

uint64_t type metadata accessor for PerTCUFlowOperationQueue()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in PerTCUFlowOperationQueue.wait()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(dialogEngineOutput:) in conformance AceServiceInvokerImpl;
  v3[8] = v2;
  return swift_task_switch();
}

unint64_t lazy protocol witness table accessor for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError;
  if (!lazy protocol witness table cache variable for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for PerTCUFlowOperationQueue.OperationError, &type metadata for PerTCUFlowOperationQueue.OperationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError;
  if (!lazy protocol witness table cache variable for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError)
  {
    result = MEMORY[0x1B5E44668](&protocol conformance descriptor for PerTCUFlowOperationQueue.OperationError, &type metadata for PerTCUFlowOperationQueue.OperationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PerTCUFlowOperationQueue.OperationError and conformance PerTCUFlowOperationQueue.OperationError);
  }
  return result;
}

uint64_t outlined consume of PerTCUFlowOperationQueue.State(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 2)
    return swift_release();
  return result;
}

uint64_t base witness table accessor for Actor in PerTCUFlowOperationQueue(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(&lazy protocol witness table cache variable for type PerTCUFlowOperationQueue and conformance PerTCUFlowOperationQueue, a2, (uint64_t (*)(uint64_t))type metadata accessor for PerTCUFlowOperationQueue, (uint64_t)&protocol conformance descriptor for PerTCUFlowOperationQueue);
}

uint64_t method lookup function for PerTCUFlowOperationQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PerTCUFlowOperationQueue.submit(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PerTCUFlowOperationQueue.wait()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v0 + 224) + *(_QWORD *)(*(_QWORD *)v0 + 224));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t dispatch thunk of PerTCUFlowOperationQueue.finalize()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of PerTCUFlowOperationQueue.abandon()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of PerTCUFlowOperationQueue.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t storeEnumTagSinglePayload for PerTCUFlowOperationQueue.OperationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B4E301F4 + 4 * byte_1B4EEC5E9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B4E30228 + 4 * byte_1B4EEC5E4[v4]))();
}

uint64_t sub_1B4E30228(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E30230(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B4E30238);
  return result;
}

uint64_t sub_1B4E30244(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B4E3024CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B4E30250(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B4E30258(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PerTCUFlowOperationQueue.OperationError()
{
  return &type metadata for PerTCUFlowOperationQueue.OperationError;
}

unint64_t destroy for PerTCUFlowOperationQueue.State(unint64_t *a1)
{
  unint64_t result;
  int v2;

  result = *a1;
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_release();
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PerTCUFlowOperationQueue.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v4 = *a2;
  if ((int)v4 - 1 < 0)
    v3 = swift_retain();
  *a1 = v3;
  return a1;
}

uint64_t *assignWithCopy for PerTCUFlowOperationQueue.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  LODWORD(v3) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v4) = -1;
  else
    v4 = *a1;
  v5 = v4 - 1;
  v6 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF)
    v3 = *a2;
  v7 = v3 - 1;
  if (v5 < 0)
  {
    if (v7 < 0)
    {
      *a1 = v6;
      swift_retain();
      swift_release();
    }
    else
    {
      swift_release();
      *a1 = *a2;
    }
  }
  else
  {
    *a1 = v6;
    if (v7 < 0)
      swift_retain();
  }
  return a1;
}

unint64_t *assignWithTake for PerTCUFlowOperationQueue.State(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a1;
  v4 = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = v3;
  v5 = *a2;
  if (v4 - 1 < 0)
  {
    LODWORD(v6) = -1;
    if (v5 < 0xFFFFFFFF)
      v6 = *a2;
    if ((int)v6 - 1 < 0)
    {
      *a1 = v5;
      swift_release();
      return a1;
    }
    swift_release();
  }
  *a1 = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for PerTCUFlowOperationQueue.State(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = v4 + 1;
  v6 = v4 - 1;
  if (v5 >= 3)
    return v6;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PerTCUFlowOperationQueue.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for PerTCUFlowOperationQueue.State(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *destructiveInjectEnumTag for PerTCUFlowOperationQueue.State(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    a2 -= 0x7FFFFFFF;
    goto LABEL_5;
  }
  if (a2)
LABEL_5:
    *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PerTCUFlowOperationQueue.State()
{
  return &type metadata for PerTCUFlowOperationQueue.State;
}

id outlined copy of Result<(), Error>?(id result, unsigned __int8 a2)
{
  if (a2 != 255)
    return outlined copy of Result<(), Error>(result, a2 & 1);
  return result;
}

uint64_t partial apply for closure #1 in PerTCUFlowOperationQueue.runTasksNow()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  v3[8] = v2;
  return swift_task_switch();
}

SiriKitRuntime::PhoneAffinityScorer __swiftcall PhoneAffinityScorer.init()()
{
  void *v0;
  uint64_t v1;
  SiriKitRuntime::PhoneAffinityScorer result;

  v0 = (void *)0x80000001B4EF6C70;
  v1 = 0xD00000000000002ALL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t key path getter for CodeGenListEntry.entry : CodeGenListEntry<UsoEntity_common_UserEntity>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = dispatch thunk of CodeGenListEntry.entry.getter();
  *a1 = v3;
  return result;
}

uint64_t PhoneAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t PhoneFeatureFlags.isEnabled.getter()
{
  unsigned __int8 *v0;
  os_unfair_lock_s *v1;
  unsigned __int8 v3;

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  v0 = (unsigned __int8 *)(static PhoneFeatureFlags.forceEnabled + 16);
  v1 = (os_unfair_lock_s *)(static PhoneFeatureFlags.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static PhoneFeatureFlags.forceEnabled + 20));
  closure #1 in InCallFeatureFlags.isEnabled.getter(v0, (uint64_t)&type metadata for PhoneFeatureFlags, (uint64_t (*)(void))lazy protocol witness table accessor for type PhoneFeatureFlags and conformance PhoneFeatureFlags, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

uint64_t UsoTask.parseResult.getter()
{
  unsigned __int8 v0;
  unsigned __int8 v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  char v21;
  int8x16_t *v22;
  int8x16_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  uint64_t v28;
  int8x8_t v29;
  int8x8_t *v30;
  unint64_t v31;
  int8x8_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[5];
  uint64_t v50[4];

  static UsoTask_CodegenConverter.convert(task:)();
  if (v50[3])
  {
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v50, (uint64_t)v49, (uint64_t *)&demangling cache variable for type metadata for Any?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_ReferenceTrigger<UsoEntity_common_Setting>);
    if (swift_dynamicCast())
    {
      v0 = UsoTask.parse(referenceTriggerTask:)();
LABEL_6:
      v1 = v0;
      swift_release();
LABEL_7:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      v2 = 0;
      goto LABEL_51;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_ReferenceNumberTrigger<UsoEntity_common_Setting>);
    if (swift_dynamicCast())
    {
      v0 = UsoTask.parse(referenceNumberTriggerTask:)();
      goto LABEL_6;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_Reference<UsoEntity_common_Setting>);
    if (swift_dynamicCast())
    {
      type metadata accessor for UsoTask_summarise_common_Setting();
      if (!swift_dynamicCastClass())
      {
        type metadata accessor for UsoTask_checkExistence_common_Setting();
        if (!swift_dynamicCastClass())
        {
          swift_release();
          v1 = 0;
          goto LABEL_7;
        }
      }
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v3 = UsoTask.parseEntity(setting:)(v48);
      swift_release();
      v4 = dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      if (v48)
      {
        v5 = MEMORY[0x1B5E4024C](v4);
        swift_release();
      }
      else
      {
        v5 = 0;
      }
      v12 = UsoTask.parseEntity(setting:)(v5);
      v13 = swift_release();
      v14 = MEMORY[0x1B5E403C0](v13);
      if (v14)
      {
        v15 = specialized Sequence.compactMap<A>(_:)(v14);
        swift_bridgeObjectRelease();
      }
      else
      {
        v15 = MEMORY[0x1E0DEE9D8];
      }
      v16 = v12 | v3;
      swift_retain();
      v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology021UsoEntity_common_UserG0CG_0D10KitRuntime19SettingParseOptionsVs5NeverOTg504_s12d9Ontology7f9TaskC0A10jk69E11parseEntity33_78CB2465498F39AEB41E4B41B1A3637CLL12userEntitiesAD19lmn12VSayAA0ch12_h1_I25H0CG_tFAiKcACcfu_AiKcfu0_AF0fR0CTf1cn_nTf4ng_n(v15);
      swift_release();
      v18 = *(_QWORD *)(v17 + 16);
      if (!v18)
      {
        v20 = 0;
LABEL_45:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v1 = v16 | v20;
        goto LABEL_7;
      }
      if (v18 < 8)
      {
        v19 = 0;
        v20 = 0;
LABEL_43:
        v34 = v18 - v19;
        v35 = (char *)(v19 + v17 + 32);
        do
        {
          v36 = *v35++;
          v20 |= v36;
          --v34;
        }
        while (v34);
        goto LABEL_45;
      }
      if (v18 >= 0x20)
      {
        v19 = v18 & 0x7FFFFFFFFFFFFFE0;
        v22 = (int8x16_t *)(v17 + 48);
        v23 = 0uLL;
        v24 = v18 & 0x7FFFFFFFFFFFFFE0;
        v25 = 0uLL;
        do
        {
          v23 = vorrq_s8(v22[-1], v23);
          v25 = vorrq_s8(*v22, v25);
          v22 += 2;
          v24 -= 32;
        }
        while (v24);
        v26 = vorrq_s8(v25, v23);
        *(int8x8_t *)v26.i8 = vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
        v27 = v26.i64[0] | HIDWORD(v26.i64[0]) | ((unint64_t)(v26.i64[0] | HIDWORD(v26.i64[0])) >> 16);
        v20 = v27 | BYTE1(v27);
        if (v18 == v19)
          goto LABEL_45;
        if ((v18 & 0x18) == 0)
          goto LABEL_43;
      }
      else
      {
        v20 = 0;
        v19 = 0;
      }
      v28 = v19;
      v19 = v18 & 0x7FFFFFFFFFFFFFF8;
      v29 = (int8x8_t)v20;
      v30 = (int8x8_t *)(v28 + v17 + 32);
      v31 = v28 - (v18 & 0x7FFFFFFFFFFFFFF8);
      do
      {
        v32 = *v30++;
        v29 = vorr_s8(v32, v29);
        v31 += 8;
      }
      while (v31);
      v33 = *(_QWORD *)&v29 | HIDWORD(*(_QWORD *)&v29) | ((*(_QWORD *)&v29 | HIDWORD(*(_QWORD *)&v29)) >> 16);
      v20 = v33 | BYTE1(v33);
      if (v18 == v19)
        goto LABEL_45;
      goto LABEL_43;
    }
    type metadata accessor for UsoTask_noVerb_common_Setting();
    if (swift_dynamicCast())
    {
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v6 = UsoTask.parseEntity(setting:)(v48);
      swift_release();
      v7 = dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      if (v48)
      {
        v8 = MEMORY[0x1B5E4024C](v7);
        swift_release();
      }
      else
      {
        v8 = 0;
      }
      v21 = UsoTask.parseEntity(setting:)(v8);
      swift_release();
      swift_release();
      v1 = v21 | v6;
      goto LABEL_7;
    }
    type metadata accessor for UsoTask_reply_uso_NoEntity();
    if (swift_dynamicCast())
    {
      v9 = swift_retain();
      MEMORY[0x1B5E4078C](&v48, v9);
      swift_release();
      v10 = v48;
      swift_release();
      if (v10 || (dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter(), v11 = v48, swift_release(), v11))
      {
        swift_release();
        v1 = 0;
      }
      else
      {
        v46 = swift_retain();
        v47 = MEMORY[0x1B5E40774](v46);
        swift_release_n();
        swift_bridgeObjectRelease();
        v1 = v47 == 0;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      goto LABEL_50;
    }
    type metadata accessor for UsoTask_update_common_PhoneCall();
    if (swift_dynamicCast())
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      v2 = 1;
      v1 = 3;
      goto LABEL_51;
    }
    type metadata accessor for UsoTask_update_common_Communication();
    if (swift_dynamicCast())
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      v2 = 1;
      v1 = 2;
      goto LABEL_51;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
  v1 = 0;
LABEL_50:
  v2 = 1;
LABEL_51:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (one-time initialization token for executor != -1)
    swift_once();
  v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)static Logger.executor);
  v38 = Logger.logObject.getter();
  v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc();
    v41 = swift_slowAlloc();
    v50[0] = v41;
    *(_DWORD *)v40 = 136315138;
    v42 = v1;
    v43 = PhoneSettingParseResult.description.getter(v1 | (unsigned __int16)((_WORD)v2 << 8));
    v49[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B4BE6000, v38, v39, "PhoneAffinityScorer UsoTask.parseResult = %s", v40, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1B5E44758](v41, -1, -1);
    MEMORY[0x1B5E44758](v40, -1, -1);

  }
  else
  {

    v42 = v1;
  }
  return v42 | (v2 << 8);
}

uint64_t InCallFeatureFlags.isEnabled.getter()
{
  unsigned __int8 *v0;
  os_unfair_lock_s *v1;
  unsigned __int8 v3;

  if (one-time initialization token for forceEnabled != -1)
    swift_once();
  v0 = (unsigned __int8 *)(static InCallFeatureFlags.forceEnabled + 16);
  v1 = (os_unfair_lock_s *)(static InCallFeatureFlags.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static InCallFeatureFlags.forceEnabled + 20));
  closure #1 in InCallFeatureFlags.isEnabled.getter(v0, (uint64_t)&type metadata for InCallFeatureFlags, (uint64_t (*)(void))lazy protocol witness table accessor for type InCallFeatureFlags and conformance InCallFeatureFlags, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

BOOL SettingParseOptions.isSupportedInCall.getter(char a1)
{
  return (a1 & 1) == 0 && a1 != 0;
}

void *SettingParseOptions.callVolume.unsafeMutableAddressor()
{
  return &static SettingParseOptions.callVolume;
}

uint64_t PhoneSettingParseResult.description.getter(__int16 a1)
{
  unsigned __int8 v1;
  Swift::String v2;
  Swift::String v3;

  v1 = a1;
  if ((a1 & 0x100) != 0)
    __asm { BR              X10 }
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = SettingParseOptions.description.getter(v1);
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0x676E69747465732ELL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PhoneSettingParseResult()
{
  unsigned __int8 *v0;

  return PhoneSettingParseResult.description.getter(*v0 | (unsigned __int16)(v0[1] << 8));
}

void one-time initialization function for descriptionLabels()
{
  static SettingParseOptions.descriptionLabels = &outlined read-only object #0 of one-time initialization function for descriptionLabels;
}

void *SettingParseOptions.none.unsafeMutableAddressor()
{
  return &static SettingParseOptions.none;
}

uint64_t static SettingParseOptions.none.getter()
{
  return 0;
}

void *SettingParseOptions.unsupportedTask.unsafeMutableAddressor()
{
  return &static SettingParseOptions.unsupportedTask;
}

uint64_t static SettingParseOptions.unsupportedTask.getter()
{
  return 0;
}

void *SettingParseOptions.unsupportedEntity.unsafeMutableAddressor()
{
  return &static SettingParseOptions.unsupportedEntity;
}

uint64_t static SettingParseOptions.unsupportedEntity.getter()
{
  return 1;
}

void *SettingParseOptions.phoneSetting.unsafeMutableAddressor()
{
  return &static SettingParseOptions.phoneSetting;
}

uint64_t static SettingParseOptions.phoneSetting.getter()
{
  return 2;
}

void *SettingParseOptions.generalVolume.unsafeMutableAddressor()
{
  return &static SettingParseOptions.generalVolume;
}

uint64_t static SettingParseOptions.generalVolume.getter()
{
  return 4;
}

uint64_t static SettingParseOptions.callVolume.getter()
{
  return 8;
}

void *SettingParseOptions.mediaVolume.unsafeMutableAddressor()
{
  return &static SettingParseOptions.mediaVolume;
}

uint64_t static SettingParseOptions.mediaVolume.getter()
{
  return 16;
}

void *SettingParseOptions.voiceVolume.unsafeMutableAddressor()
{
  return &static SettingParseOptions.voiceVolume;
}

uint64_t static SettingParseOptions.voiceVolume.getter()
{
  return 32;
}

void *SettingParseOptions.BOOLeanSetting.unsafeMutableAddressor()
{
  return &static SettingParseOptions.BOOLeanSetting;
}

uint64_t static SettingParseOptions.BOOLeanSetting.getter()
{
  return 64;
}

uint64_t SettingParseOptions.description.getter(unsigned __int8 a1)
{
  char *v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (one-time initialization token for descriptionLabels != -1)
    swift_once();
  v2 = (char *)static SettingParseOptions.descriptionLabels;
  v3 = *((_QWORD *)static SettingParseOptions.descriptionLabels + 2);
  if (v3)
  {
    v4 = a1;
    swift_bridgeObjectRetain();
    v5 = 0;
    v6 = (uint64_t *)(v2 + 40);
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v10 = *(v6 - 1);
      v9 = *v6;
      if (v5 > 7 || ((v4 >> v5) & 1) != 0)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        v12 = v7[2];
        v11 = v7[3];
        if (v12 >= v11 >> 1)
          v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v7);
        v7[2] = v12 + 1;
        v8 = &v7[2 * v12];
        v8[4] = v10;
        v8[5] = v9;
      }
      ++v5;
      v6 += 2;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = MEMORY[0x1B5E434D4](v7, MEMORY[0x1E0DEA968]);
  swift_bridgeObjectRelease();
  return v13;
}

_BYTE *protocol witness for OptionSet.init(rawValue:) in conformance SettingParseOptions@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SettingParseOptions()
{
  unsigned __int8 *v0;

  return SettingParseOptions.description.getter(*v0);
}

void protocol witness for SetAlgebra.init() in conformance SettingParseOptions(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *protocol witness for SetAlgebra.union(_:) in conformance SettingParseOptions@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.intersection(_:) in conformance SettingParseOptions@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance SettingParseOptions@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance SettingParseOptions(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *protocol witness for SetAlgebra.remove(_:) in conformance SettingParseOptions@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *protocol witness for SetAlgebra.update(with:) in conformance SettingParseOptions@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *protocol witness for SetAlgebra.formUnion(_:) in conformance SettingParseOptions(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.formIntersection(_:) in conformance SettingParseOptions(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance SettingParseOptions(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.subtracting(_:) in conformance SettingParseOptions@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance SettingParseOptions(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance SettingParseOptions(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance SettingParseOptions(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance SettingParseOptions()
{
  _BYTE *v0;

  return *v0 == 0;
}

_BYTE *protocol witness for SetAlgebra.subtract(_:) in conformance SettingParseOptions(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance SettingParseOptions@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SettingParseOptions(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance SettingParseOptions@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

const char *UsoTask.kPhoneSettingNamespace.unsafeMutableAddressor()
{
  return "phoneSetting";
}

uint64_t static UsoTask.kPhoneSettingNamespace.getter()
{
  return 0x746553656E6F6870;
}

void *UsoTask.kFloatSettingNameNamespace.unsafeMutableAddressor()
{
  return &static UsoTask.kFloatSettingNameNamespace;
}

unint64_t static UsoTask.kFloatSettingNameNamespace.getter()
{
  return 0xD000000000000010;
}

const char *UsoTask.kAnswerProductNamespace.unsafeMutableAddressor()
{
  return "answerProduct";
}

uint64_t static UsoTask.kAnswerProductNamespace.getter()
{
  return 0x7250726577736E61;
}

void *UsoTask.kBoolSettingNamespace.unsafeMutableAddressor()
{
  return &static UsoTask.kBoolSettingNamespace;
}

uint64_t static UsoTask.kBoolSettingNamespace.getter()
{
  return 0x747465536C6F6F62;
}

uint64_t one-time initialization function for kAnswerProductValues()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kAnswerProductValues);
  result = swift_arrayDestroy();
  static UsoTask.kAnswerProductValues = v0;
  return result;
}

uint64_t *UsoTask.kAnswerProductValues.unsafeMutableAddressor()
{
  if (one-time initialization token for kAnswerProductValues != -1)
    swift_once();
  return &static UsoTask.kAnswerProductValues;
}

uint64_t static UsoTask.kAnswerProductValues.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kAnswerProductValues);
}

uint64_t one-time initialization function for kSupportedBooleanNamespaceValues()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kSupportedBooleanNamespaceValues);
  result = swift_arrayDestroy();
  static UsoTask.kSupportedBooleanNamespaceValues = v0;
  return result;
}

uint64_t *UsoTask.kSupportedBooleanNamespaceValues.unsafeMutableAddressor()
{
  if (one-time initialization token for kSupportedBooleanNamespaceValues != -1)
    swift_once();
  return &static UsoTask.kSupportedBooleanNamespaceValues;
}

uint64_t static UsoTask.kSupportedBooleanNamespaceValues.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kSupportedBooleanNamespaceValues);
}

uint64_t UsoTask.parse(referenceTriggerTask:)()
{
  uint64_t result;
  int v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int8x16_t *v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t v19;
  uint64_t v20;
  int8x8_t v21;
  int8x8_t *v22;
  unint64_t v23;
  int8x8_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  int v35;
  uint64_t v36;

  type metadata accessor for UsoTask_enable_common_Setting();
  if (!swift_dynamicCastClass())
  {
    type metadata accessor for UsoTask_disable_common_Setting();
    if (!swift_dynamicCastClass())
    {
      type metadata accessor for UsoTask_toggle_common_Setting();
      if (!swift_dynamicCastClass())
      {
        type metadata accessor for UsoTask_set_common_Setting();
        result = swift_dynamicCastClass();
        if (!result)
          return result;
      }
    }
  }
  MEMORY[0x1B5E40834](&v36);
  v1 = UsoTask.parseEntity(setting:)(v36);
  v2 = swift_release();
  v3 = MEMORY[0x1B5E40834](&v36, v2);
  if (v36)
  {
    v4 = MEMORY[0x1B5E4024C](v3);
    swift_release();
  }
  else
  {
    v4 = 0;
  }
  v5 = UsoTask.parseEntity(setting:)(v4);
  v6 = swift_release();
  v7 = MEMORY[0x1B5E4081C](v6);
  if (v7)
  {
    v8 = specialized Sequence.compactMap<A>(_:)(v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = MEMORY[0x1E0DEE9D8];
  }
  v9 = v5 | v1;
  swift_retain();
  v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology021UsoEntity_common_UserG0CG_0D10KitRuntime19SettingParseOptionsVs5NeverOTg504_s12d9Ontology7f9TaskC0A10jk69E11parseEntity33_78CB2465498F39AEB41E4B41B1A3637CLL12userEntitiesAD19lmn12VSayAA0ch12_h1_I25H0CG_tFAiKcACcfu_AiKcfu0_AF0fR0CTf1cn_nTf4ng_n(v8);
  swift_release();
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    if (v11 < 8)
    {
      v12 = 0;
      v13 = 0;
LABEL_24:
      v26 = v11 - v12;
      v27 = (unsigned __int8 *)(v12 + v10 + 32);
      do
      {
        v28 = *v27++;
        v13 |= v28;
        --v26;
      }
      while (v26);
      goto LABEL_26;
    }
    if (v11 >= 0x20)
    {
      v12 = v11 & 0x7FFFFFFFFFFFFFE0;
      v14 = (int8x16_t *)(v10 + 48);
      v15 = 0uLL;
      v16 = v11 & 0x7FFFFFFFFFFFFFE0;
      v17 = 0uLL;
      do
      {
        v15 = vorrq_s8(v14[-1], v15);
        v17 = vorrq_s8(*v14, v17);
        v14 += 2;
        v16 -= 32;
      }
      while (v16);
      v18 = vorrq_s8(v17, v15);
      *(int8x8_t *)v18.i8 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
      v19 = v18.i64[0] | HIDWORD(v18.i64[0]) | ((unint64_t)(v18.i64[0] | HIDWORD(v18.i64[0])) >> 16);
      v13 = v19 | (v19 >> 8);
      if (v11 == v12)
        goto LABEL_26;
      if ((v11 & 0x18) == 0)
        goto LABEL_24;
    }
    else
    {
      LOBYTE(v13) = 0;
      v12 = 0;
    }
    v20 = v12;
    v12 = v11 & 0x7FFFFFFFFFFFFFF8;
    v21 = (int8x8_t)v13;
    v22 = (int8x8_t *)(v20 + v10 + 32);
    v23 = v20 - (v11 & 0x7FFFFFFFFFFFFFF8);
    do
    {
      v24 = *v22++;
      v21 = vorr_s8(v24, v21);
      v23 += 8;
    }
    while (v23);
    v25 = *(_QWORD *)&v21 | HIDWORD(*(_QWORD *)&v21) | ((*(_QWORD *)&v21 | HIDWORD(*(_QWORD *)&v21)) >> 16);
    v13 = v25 | (v25 >> 8);
    if (v11 == v12)
      goto LABEL_26;
    goto LABEL_24;
  }
  v13 = 0;
LABEL_26:
  swift_bridgeObjectRelease();
  v29 = swift_bridgeObjectRelease();
  v30 = v9 | v13;
  if (MEMORY[0x1B5E40828](v29))
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.executor);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1B4BE6000, v32, v33, "PhoneAffinityScorer Found an unsupported UsoEntity_common_EventTrigger", v34, 2u);
      MEMORY[0x1B5E44758](v34, -1, -1);
    }

    swift_release();
    v35 = 1;
  }
  else
  {
    v35 = 0;
  }
  return v30 | v35;
}

uint64_t UsoTask.parse(referenceNumberTriggerTask:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int8x16_t *v34;
  int8x16_t v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  unint64_t v39;
  uint64_t v40;
  int8x8_t v41;
  int8x8_t *v42;
  unint64_t v43;
  int8x8_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned __int8 *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  int v55;
  char *v56;
  char v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;

  v0 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v59 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v59 - v14;
  type metadata accessor for UsoTask_increaseBy_common_Setting();
  if (!swift_dynamicCastClass())
  {
    type metadata accessor for UsoTask_decreaseBy_common_Setting();
    if (!swift_dynamicCastClass())
    {
      type metadata accessor for UsoTask_setNumber_common_Setting();
      result = swift_dynamicCastClass();
      if (!result)
        return result;
    }
  }
  v60 = v3;
  v61 = v10;
  v17 = dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.reference.getter();
  if (v62)
  {
    MEMORY[0x1B5E40258](v17);
    v19 = v18;
    swift_bridgeObjectRelease();
    if (v19)
    {
LABEL_15:
      swift_release();
      goto LABEL_16;
    }
    if (dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter())
    {
      MEMORY[0x1B5E405AC]();
      swift_release();
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, *MEMORY[0x1E0DA1E60], v0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
    v20 = (uint64_t)&v6[*(int *)(v4 + 48)];
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v15, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v13, v20, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
    if (v21((uint64_t)v6, 1, v0) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      if (v21(v20, 1, v0) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        swift_release();
        return 4;
      }
      goto LABEL_14;
    }
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t)v61, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    if (v21(v20, 1, v0) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v61, v0);
LABEL_14:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
      goto LABEL_15;
    }
    v56 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v60, v20, v0);
    lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager(&lazy protocol witness table cache variable for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E68], MEMORY[0x1E0DA1E78]);
    v57 = dispatch thunk of static Equatable.== infix(_:_:)();
    v58 = *(void (**)(char *, uint64_t))(v1 + 8);
    v58(v56, v0);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    v58(v61, v0);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    swift_release();
    if ((v57 & 1) != 0)
      return 4;
  }
LABEL_16:
  dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.reference.getter();
  v22 = UsoTask.parseEntity(setting:)(v62);
  swift_release();
  v23 = dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.reference.getter();
  if (v62)
  {
    v24 = MEMORY[0x1B5E4024C](v23);
    swift_release();
  }
  else
  {
    v24 = 0;
  }
  v25 = UsoTask.parseEntity(setting:)(v24);
  v26 = swift_release();
  v27 = MEMORY[0x1B5E4099C](v26);
  if (v27)
  {
    v28 = specialized Sequence.compactMap<A>(_:)(v27);
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = MEMORY[0x1E0DEE9D8];
  }
  v29 = v25 | v22;
  swift_retain();
  v30 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology021UsoEntity_common_UserG0CG_0D10KitRuntime19SettingParseOptionsVs5NeverOTg504_s12d9Ontology7f9TaskC0A10jk69E11parseEntity33_78CB2465498F39AEB41E4B41B1A3637CLL12userEntitiesAD19lmn12VSayAA0ch12_h1_I25H0CG_tFAiKcACcfu_AiKcfu0_AF0fR0CTf1cn_nTf4ng_n(v28);
  swift_release();
  v31 = *(_QWORD *)(v30 + 16);
  if (v31)
  {
    if (v31 < 8)
    {
      v32 = 0;
      v33 = 0;
LABEL_35:
      v46 = v31 - v32;
      v47 = (unsigned __int8 *)(v32 + v30 + 32);
      do
      {
        v48 = *v47++;
        v33 |= v48;
        --v46;
      }
      while (v46);
      goto LABEL_37;
    }
    if (v31 >= 0x20)
    {
      v32 = v31 & 0x7FFFFFFFFFFFFFE0;
      v34 = (int8x16_t *)(v30 + 48);
      v35 = 0uLL;
      v36 = v31 & 0x7FFFFFFFFFFFFFE0;
      v37 = 0uLL;
      do
      {
        v35 = vorrq_s8(v34[-1], v35);
        v37 = vorrq_s8(*v34, v37);
        v34 += 2;
        v36 -= 32;
      }
      while (v36);
      v38 = vorrq_s8(v37, v35);
      *(int8x8_t *)v38.i8 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
      v39 = v38.i64[0] | HIDWORD(v38.i64[0]) | ((unint64_t)(v38.i64[0] | HIDWORD(v38.i64[0])) >> 16);
      v33 = v39 | (v39 >> 8);
      if (v31 == v32)
        goto LABEL_37;
      if ((v31 & 0x18) == 0)
        goto LABEL_35;
    }
    else
    {
      LOBYTE(v33) = 0;
      v32 = 0;
    }
    v40 = v32;
    v32 = v31 & 0x7FFFFFFFFFFFFFF8;
    v41 = (int8x8_t)v33;
    v42 = (int8x8_t *)(v40 + v30 + 32);
    v43 = v40 - (v31 & 0x7FFFFFFFFFFFFFF8);
    do
    {
      v44 = *v42++;
      v41 = vorr_s8(v44, v41);
      v43 += 8;
    }
    while (v43);
    v45 = *(_QWORD *)&v41 | HIDWORD(*(_QWORD *)&v41) | ((*(_QWORD *)&v41 | HIDWORD(*(_QWORD *)&v41)) >> 16);
    v33 = v45 | (v45 >> 8);
    if (v31 == v32)
      goto LABEL_37;
    goto LABEL_35;
  }
  v33 = 0;
LABEL_37:
  swift_bridgeObjectRelease();
  v49 = swift_bridgeObjectRelease();
  v50 = v29 | v33;
  if (MEMORY[0x1B5E409A8](v49))
  {
    if (one-time initialization token for executor != -1)
      swift_once();
    v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)static Logger.executor);
    v52 = Logger.logObject.getter();
    v53 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v54 = 0;
      _os_log_impl(&dword_1B4BE6000, v52, v53, "PhoneAffinityScorer Found an unsupported UsoEntity_common_EventTrigger", v54, 2u);
      MEMORY[0x1B5E44758](v54, -1, -1);
    }

    swift_release();
    v55 = 1;
  }
  else
  {
    v55 = 0;
  }
  return v50 | v55;
}

